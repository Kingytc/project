package com.sai.laps.ejb.lapsReport;

import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.ArrayList;

import javax.ejb.EJBException;
import javax.ejb.Remote;
import javax.ejb.Stateless;

import org.apache.log4j.Logger;

import com.sai.laps.ejb.ComProposal.ComProposalBean;
import com.sai.laps.ejb.appraisal.appraisalBean;
import com.sai.laps.ejb.bankapp.BankAppBean;
import com.sai.laps.ejb.checkeligibility.CheckEligibilityBean;
import com.sai.laps.ejb.comassestsliab.ComAssetsLiabBean;
import com.sai.laps.ejb.commdocument.CommDocumentBean;
import com.sai.laps.ejb.dscr.DscrBean;
import com.sai.laps.ejb.executive.ExecutiveBean;
import com.sai.laps.ejb.financial.FinancialBean;
import com.sai.laps.ejb.mastapplicant.MastApplicantBean;
import com.sai.laps.ejb.proposalterms.ProposalTermsBean;
import com.sai.laps.ejb.retailassessment.RetailAssessmentBean;
import com.sai.laps.helper.ApplicationParams;
import com.sai.laps.helper.AuditTrial;
import com.sai.laps.helper.BeanAdapter;
import com.sai.laps.helper.DBUtils;
import com.sai.laps.helper.EJBInvoker;
import com.sai.laps.helper.Helper;
import com.sai.laps.helper.MISLogger;
import com.sai.laps.helper.SQLParser;
import com.sai.laps.securitymaster.SecurityMasterBean;

@Stateless(name = "lapsReportBean", mappedName = "lapsReportHome")
@Remote (lapsReportRemote.class)
public class lapsReportBean extends BeanAdapter {

	static Logger log = Logger.getLogger(lapsReportBean.class);
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void updateDueDiligence1(HashMap hshValues)  {
		HashMap hshQuery = null;
		HashMap hshQueryValues = null;

		ArrayList arrValues = new ArrayList();

		ResultSet rs = null;
		ResultSet rs1 = null;

		String strAppno = "";
		String strAction = "";
		String strQuery = "";
		String strName = "";
		String strTitle = "";
		String strFatHusName = "";
		String strAge = "";
		String strOccupation = "";
		String strService = "";
		String strResiAddr = "";
		String strOfficeAddr = "";
		String strYrsemploy = "";
		String strAppName = "";
		int intCount = 0;
		String auditflag = correctNull((String) hshValues.get("auditflag"));
		strAppno = correctNull((String) hshValues.get("strappno"));
		strAction = correctNull((String) hshValues.get("hidAction"));
		try {
			strName = correctNull((String) hshValues.get("txtName"));
			strTitle = correctNull((String) hshValues.get("txtTitle"));
			strFatHusName = correctNull((String) hshValues.get("txtFatHusName"));
			strAge = correctNull((String) hshValues.get("txtAge"));
			strOccupation = correctNull((String) hshValues.get("txtOccupation"));
			strYrsemploy = correctNull((String) hshValues.get("txtYrsemploy"));
			strService = correctNull((String) hshValues.get("selService"));
			strResiAddr = correctNull((String) hshValues.get("txtResiAddr"));
			strOfficeAddr = correctNull((String) hshValues.get("txtOfficeAddr"));
			String strInwardno = correctNull((String) hshValues.get("inwardno"));
			String desc = "";
			StringBuilder strOldAudit = new StringBuilder();
			if (strAction.equalsIgnoreCase("U")) {
				// hshValues.put("hidAction", "Update");

				// hidsaral=saral
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser.getSqlQuery("selduedilicountbyinward^"
							+ strInwardno);
				} else {
					strQuery = SQLParser.getSqlQuery("selduedilicount^"
							+ strAppno);
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("cnt");
				}

				if (intCount == 0) {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues.add(strAppno);
					arrValues.add(strName);
					arrValues.add(strFatHusName);
					arrValues.add(strAge);
					arrValues.add(strOccupation);
					arrValues.add(strYrsemploy);
					arrValues.add(strService);
					arrValues.add(strResiAddr);
					arrValues.add(strOfficeAddr);
					arrValues.add(strTitle);
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));

					hshQuery.put("strQueryId", "insduediligence");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();

					arrValues.add(strName);
					arrValues.add(strFatHusName);
					arrValues.add(strAge);
					arrValues.add(strOccupation);
					arrValues.add(strYrsemploy);
					arrValues.add(strService);
					arrValues.add(strResiAddr);
					arrValues.add(strOfficeAddr);
					arrValues.add(strTitle);

					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						arrValues.add(correctNull((String) hshValues
								.get("inwardno")));
						hshQuery
								.put("strQueryId", "updduediligence1byinwardno");
					} else {
						arrValues.add(strAppno);
						hshQuery.put("strQueryId", "updduediligence1");
					}
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser.getSqlQuery("selduediligencebyinward^"
							+ strInwardno);
				} else {
					strQuery = SQLParser.getSqlQuery("selduediligence^"
							+ strAppno);
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strOldAudit.append("~Name = ");
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						strQuery = SQLParser
								.getSqlQuery("sel_duediligencereport_audittrial");
						desc = "  where dueinwardno=" + strInwardno;
						strQuery = strQuery + desc;
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strAppName = Helper.correctNull((String) rs1
									.getString("DUENAME"));
						}
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_duediligencereport_appname_audittrial^"
										+ strAppno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strAppName = Helper.correctNull((String) rs1
									.getString("DUENAME"));
						}
					}
					strOldAudit.append(strAppName);
					if (!Helper.correctNull(
							(String) rs.getString("duefathusname"))
							.equalsIgnoreCase("")) {
						strOldAudit.append(" - ");
					}
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("duefathusname")));
					strOldAudit.append("~ Age = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("dueage")));
					strOldAudit.append("~ Present Occupation/Employment = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("dueoccupation")));
					strOldAudit
							.append("~ No. of years in present employment/Organisation Years = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("DUEYRSEMPLOY")));
					strOldAudit
							.append("~ Whether applicant's services are  = ");
					if (Helper.correctNull((String) rs.getString("DUESERVICE"))
							.equalsIgnoreCase("c")) {
						strOldAudit.append("Confirmed");
					} else if (Helper.correctNull(
							(String) rs.getString("DUESERVICE"))
							.equalsIgnoreCase("u")) {
						strOldAudit.append("Unconfirmed");
					} else {
						strOldAudit.append("");
					}
					/*
					 * strOldAudit.append("~ Date of Due Diligence = ");
					 * strOldAudit
					 * .append(Helper.correctNull((String)rs.getString
					 * ("DUEDATEVISIT"))); strOldAudit.append("~ Place = ");
					 * strOldAudit
					 * .append(Helper.correctNull((String)rs.getString
					 * ("DUEPLACE")));
					 */

				}
			} else if (strAction.equalsIgnoreCase("D")) {
				hshValues.put("hidAction", "Delete");
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					hshQuery.put("strQueryId", "delduediligencebyinwardno");
				} else {
					arrValues.add(strAppno);
					hshQuery.put("strQueryId", "delduediligence");
				}

				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			}
			if (auditflag.equalsIgnoreCase("N")) {
				if (!strAction.equalsIgnoreCase("D")) {
					hshValues.put("hidAction", "insert");
				}

			} else {
				if (!strAction.equalsIgnoreCase("D")) {
					hshValues.put("hidAction", "update");
				}
			}
			if (correctNull((String) hshValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				AuditTrial.auditLog(hshValues, "406", strInwardno, strOldAudit
						.toString());
			} else {
				AuditTrial.auditLog(hshValues, "406", strAppno, strOldAudit
						.toString());
			}
		} catch (Exception e) {
			throw new EJBException(
					"Exception in updateDueDiligence1 lapsReportBean"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in updateDuediligence1"
								+ e.getMessage());
			}
		}
	}

	public void updateDueDiligence2(HashMap hshValues)  {
		HashMap hshQuery = new HashMap();
		HashMap hshQueryValues = new HashMap();

		ArrayList arrValues = new ArrayList();

		String strAppno = "";
		String strAction = "";

		strAppno = correctNull((String) hshValues.get("strappno"));
		strAction = correctNull((String) hshValues.get("hidAction"));
		try {
			if (strAction.equalsIgnoreCase("U")) {
				arrValues.add(correctNull((String) hshValues
						.get("txtPersonContact")));
				arrValues.add(correctNull((String) hshValues
						.get("txtResiaddrVisited")));
				arrValues.add(correctNull((String) hshValues
						.get("txtYrsofResidence")));
				arrValues.add(correctNull((String) hshValues
						.get("txtTypeofResidence")));
				arrValues.add(correctNull((String) hshValues
						.get("txtOfficeaddrVisited")));
				arrValues
						.add(correctNull((String) hshValues.get("txtIdentity")));
				arrValues.add(correctNull((String) hshValues
						.get("txtGenuineSC")));

				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					hshQuery.put("strQueryId", "updduediligence2byinwardno");
				} else {
					arrValues.add(strAppno);
					hshQuery.put("strQueryId", "updduediligence2");
				}

				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
		} catch (Exception e) {
			throw new EJBException(
					"Exception in updateDueDiligence1 lapsReportBean"
							+ e.getMessage());
		}
	}

	public void updateDueDiligence3(HashMap hshValues)  {
		HashMap hshQuery = new HashMap();
		HashMap hshQueryValues = new HashMap();

		ArrayList arrValues = new ArrayList();

		String strAppno = "";
		String strAction = "";

		strAppno = correctNull((String) hshValues.get("strappno"));
		strAction = correctNull((String) hshValues.get("hidAction"));

		try {
			if (strAction.equalsIgnoreCase("U")) {
				arrValues.add(correctNull((String) hshValues
						.get("txtUndertakingVerified")));
				arrValues.add(correctNull((String) hshValues
						.get("txtUndertakingAuthority")));
				arrValues.add(correctNull((String) hshValues
						.get("txtITReturns")));
				arrValues.add(correctNull((String) hshValues
						.get("txtPANIdentity")));
				arrValues.add(correctNull((String) hshValues
						.get("txtDocumentVerified")));
				arrValues.add(correctNull((String) hshValues
						.get("txtBnkstmtVerified")));

				arrValues.add(correctNull((String) hshValues.get("txt_date")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_inspecting")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_inspectingdesign")));
				arrValues.add(correctNull((String) hshValues.get("txt_palce")));

				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					hshQuery.put("strQueryId", "updduediligence3byinwardno");
				} else {
					arrValues.add(strAppno);
					hshQuery.put("strQueryId", "updduediligence3");
				}

				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
		} catch (Exception e) {
			throw new EJBException(
					"Exception in updateDueDiligence3 lapsReportBean"
							+ e.getMessage());
		}
	}

	public HashMap getDueDiligenceRetail(HashMap hshValues)  {

		HashMap hshRecord = new HashMap();

		ResultSet rs = null;

		String strQuery = "";
		String strAppno = "";
		String title = "";
		String strTitle = "";
		String husname = "";
		String strInwardno = "";
		String strSaral = "";

		int intCount = 0;

		try {
			strSaral = correctNull((String) hshValues.get("hidsaral"));
			strInwardno = correctNull((String) hshValues.get("inwardno"));

			strAppno = correctNull((String) hshValues.get("strappno"));

			if (!(strSaral.equalsIgnoreCase("saral"))) {
				strQuery = SQLParser.getSqlQuery("agrcomfunsel2^" + strAppno);

				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("appname", Helper
							.correctDoubleQuote(correctNull(rs
									.getString("app_name"))));
					hshRecord.put("app_status", Helper
							.correctDoubleQuote(correctNull(rs
									.getString("app_status"))));
					hshRecord.put("applicantid", rs.getString("demo_appid"));
				}
			}
			if (strSaral.equalsIgnoreCase("saral")) {
				strQuery = SQLParser.getSqlQuery("selduedilicountbyinward^"
						+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("selduedilicount^" + strAppno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				intCount = rs.getInt("cnt");
			}
			if (intCount == 0) {
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selduedilidata^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("strName", correctNull(rs
							.getString("appName")));
					title = correctNull(rs.getString("perapp_title"));
					if (title.equalsIgnoreCase("MR")) {
						strTitle = "S/o";
					}
					if (title.equalsIgnoreCase("MS")) {
						strTitle = "D/o";
					}
					if (title.equalsIgnoreCase("MRS")) {
						husname = correctNull(rs
								.getString("indinfo_spouse_name"));
						if (husname.equalsIgnoreCase("")) {
							strTitle = "D/o";
							hshRecord.put("strFatHusName", correctNull(rs
									.getString("perapp_fatname")));
						} else {
							strTitle = "W/o";
							hshRecord.put("strFatHusName", husname);
						}

					} else {
						hshRecord.put("strFatHusName", correctNull(rs
								.getString("perapp_fatname")));
					}
					hshRecord.put("strTitle", strTitle);

					double age = Double.parseDouble(Helper
							.correctDouble((String) rs.getString("age")));
					if (age < 0)
						age = age + 100;
					int dblAge = (int) age;

					hshRecord.put("strAge", Integer.toString(dblAge));
					hshRecord.put("strOccupation", rs.getString("occupation"));
					hshRecord.put("strYrsemploy", rs
							.getString("peremp_yearsinbuss"));
					hshRecord.put("recordflag", "N");
				} else {
					hshRecord.put("audit_flag", "N");
				}

			} else {
				if (rs != null)
					rs.close();

				if (strSaral.equalsIgnoreCase("saral")) {
					strQuery = SQLParser.getSqlQuery("selduediligencebyinward^"
							+ strInwardno);
				} else {
					strQuery = SQLParser.getSqlQuery("selduediligence^"
							+ strAppno);
				}

				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("strName", rs.getString("dueName"));
					hshRecord.put("strTitle", rs.getString("apptitle"));
					hshRecord.put("strFatHusName", rs
							.getString("dueFatHusName"));
					hshRecord.put("strAge", rs.getString("dueAge"));
					hshRecord.put("strOccupation", rs
							.getString("dueOccupation"));
					hshRecord.put("strYrsemploy", rs.getString("dueYrsemploy"));
					hshRecord.put("strService", rs.getString("dueService"));
					hshRecord.put("strResiAddr", rs.getString("dueResiAddr"));
					hshRecord.put("strOfficeAddr", rs
							.getString("dueOfficeAddr"));
					hshRecord.put("strPersonContact", rs
							.getString("duePersonContact"));
					hshRecord.put("strResiaddrVisited", rs
							.getString("dueResiaddrVisited"));
					hshRecord.put("strYrsofResidence", rs
							.getString("dueYrsofResidence"));
					hshRecord.put("strTypeofResidence", rs
							.getString("dueTypeofResidence"));
					hshRecord.put("strOfficeaddrVisited", rs
							.getString("dueOfficeaddrVisited"));
					hshRecord.put("strIdentity", rs.getString("dueIdentity"));
					hshRecord.put("strGenuineSC", rs.getString("dueGenuineSC"));
					hshRecord.put("strUndertakingVerified", rs
							.getString("dueUndertakingVerified"));
					hshRecord.put("strUndertakingAuthority", rs
							.getString("dueUndertakingAuthority"));
					hshRecord.put("strITReturns", rs.getString("dueITReturns"));
					hshRecord.put("strPANIdentity", rs
							.getString("duePANIdentity"));
					hshRecord.put("strDocumentVerified", rs
							.getString("dueDocumentVerified"));
					hshRecord.put("strBnkstmtVerified", rs
							.getString("dueBnkstmtVerified"));
					hshRecord
							.put("strDueInwardno", rs.getString("dueinwardno"));
					hshRecord.put("duedatevisit", rs.getString("duedatevisit"));
					hshRecord.put("dueinspectorname", rs
							.getString("dueinspectorname"));
					hshRecord.put("dueinspectordesign", rs
							.getString("dueinspectordesign"));
					hshRecord.put("dueplace", rs.getString("dueplace"));
					hshRecord.put("recordflag", "Y");
				} else {
					hshRecord.put("audit_flag", "N");
				}

			}

			if (strInwardno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selBranchCityName^"
						+ strAppno);
			} else {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strInwardno);
			}

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord
						.put("orgcity", correctNull(rs.getString("city_name")));
				hshRecord.put("orgstate", correctNull(rs
						.getString("state_name")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
				hshRecord.put("orgphone",
						correctNull(rs.getString("org_phone")));

			}
		} catch (Exception e) {
			throw new EJBException(
					"Exception in getDueDiligenceRetail lapsReportBean"
							+ e.getMessage());

		}
		return hshRecord;
	}

	public HashMap getDueDiligence(HashMap hshValues)  {
		HashMap hshRecord = new HashMap();

		ResultSet rs = null;

		String strQuery = "";
		String strAppno = "";
		String strInwardno = "";
		String strSaral = "";

		try {
			strSaral = correctNull((String) hshValues.get("hidsaral"));
			strInwardno = correctNull((String) hshValues.get("inwardno"));
			strAppno = correctNull((String) hshValues.get("appno"));
			if (strAppno.equals("")) {
				strAppno = correctNull((String) hshValues.get("strappno"));
			}
			if (!(strSaral.equalsIgnoreCase("saral"))) {
				strQuery = SQLParser.getSqlQuery("agrcomfunsel2^" + strAppno);

				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("appname", Helper
							.correctDoubleQuote(correctNull(rs
									.getString("app_name"))));
					hshRecord.put("app_status", Helper
							.correctDoubleQuote(correctNull(rs
									.getString("app_status"))));
					hshRecord.put("applicantid", rs.getString("demo_appid"));
				}
			}
			if (rs != null)
				rs.close();

			if (strSaral.equalsIgnoreCase("saral")) {
				strQuery = SQLParser
						.getSqlQuery("selagrduediligencereportbyinwardno^"
								+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("selagrduediligencereport^"
						+ strAppno);
			}

			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshRecord.put("dueappno", rs.getString("dueappno"));
				hshRecord.put("dueName", rs.getString("dueName"));
				hshRecord.put("duePersonContact", rs
						.getString("duePersonContact"));
				hshRecord.put("dueapplntrelated", rs
						.getString("dueapplntrelated"));
				hshRecord.put("dueknewsince", rs.getString("dueknewsince"));
				hshRecord.put("dueYrsofResidence", rs
						.getString("dueYrsofResidence"));
				hshRecord.put("dueResiaddrVisited", rs
						.getString("dueResiaddrVisited"));
				hshRecord.put("dueTypeofResidence", rs
						.getString("dueTypeofResidence"));
				hshRecord.put("duemarketability", rs
						.getString("duemarketability"));
				hshRecord.put("dueobservations", rs
						.getString("dueobservations"));
				hshRecord.put("duedatevisit", rs.getString("duedatevisit"));
				hshRecord.put("dueinspectorname", rs
						.getString("dueinspectorname"));
				hshRecord.put("dueinspectordesign", rs
						.getString("dueinspectordesign"));
				hshRecord.put("dueinwardno", rs.getString("dueinwardno"));
			} else {
				hshRecord.put("audit_flag", "N");
			}
			if (strInwardno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selBranchCityName^"
						+ strAppno);
			} else {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strInwardno);
			}

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord.put("orgcity", correctNull(rs.getString("org_city")));
				hshRecord.put("orgstate",
						correctNull(rs.getString("org_state")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
			}
		} catch (Exception e) {
			throw new EJBException(
					"Exception in getDueDiligence lapsReportBean"
							+ e.getMessage());

		}
		return hshRecord;

	}

	public void updateCreditreport1(HashMap hshValues)  {

		HashMap hshQuery = null;
		HashMap hshQueryValues = null;

		ArrayList arrValues = new ArrayList();

		ResultSet rs = null;
		ResultSet rs1 = null;
		String strAppno = "";
		String strAction = "";
		String strQuery = "";
		String strName = "";
		String strFatName = "";
		String strOffadd = "";
		String strOffTelno = "";
		String strResadd = "";
		String strResTelno = "";
		String strPermadd = "";
		String strPermTelno = "";
		String strAppType = "";
		String strChkAgri = "";
		String strChkMinor = "";
		String strhidsaral = "";
		String strmainbussiness = "";
		String strsideline = "";
		String strconstitution = "";
		String strestablished = "";
		String Apploantype = "";
		int intCount = 0;
		Apploantype = Helper.correctNull((String) hshValues.get("apploantype"));
		strhidsaral = correctNull((String) hshValues.get("hidsaral"));
		if (!strhidsaral.equals("saral")) {
			strAppno = correctNull((String) hshValues.get("appno"));

			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("strappno"));
			}
		}
		String desc = "";
		strAction = correctNull((String) hshValues.get("hidAction"));
		String strhid_saralno = "";
		String strStatic_constitution_id = "";
		String strConsti_code = "";

		try {
			strName = correctNull((String) hshValues.get("sel_name"));

			strFatName = correctNull((String) hshValues.get("txt_fname"));
			strOffadd = correctNull((String) hshValues.get("txt_offadd"));
			strOffTelno = correctNull((String) hshValues.get("txt_offtel"));
			strResadd = correctNull((String) hshValues.get("txt_resadd"));
			strResTelno = correctNull((String) hshValues.get("txt_restel"));
			strPermadd = correctNull((String) hshValues.get("txt_permadd"));
			strPermTelno = correctNull((String) hshValues.get("txt_permtel"));
			strAppType = correctNull((String) hshValues.get("hid_appid"));
			strChkAgri = correctNull((String) hshValues.get("chkAgri"));
			strChkMinor = correctNull((String) hshValues.get("chkMinor"));

			strmainbussiness = correctNull((String) hshValues
					.get("txt_mainbussiness"));
			strsideline = correctNull((String) hshValues.get("txt_sideline"));
			strconstitution = correctNull((String) hshValues
					.get("txt_constitution"));
			strestablished = correctNull((String) hshValues
					.get("txt_established"));
			String strAppName = "";
			String strInwardNo = correctNull((String) hshValues.get("inwardno"));
			StringBuilder strOldAudit = new StringBuilder();
			strhid_saralno = correctNull((String) hshValues.get("hid_slno"));
			if (!(strhidsaral.equalsIgnoreCase("saral"))) {
				desc = "  where CR_APPNO='" + strAppno + "' and CR_APPTYPE='"
						+ strAppType + "'";
			} else {
				desc = "  where CR_INWARDNO='" + strInwardNo
						+ "' and CR_SLNO='" + strhid_saralno + "'";
			}
			if (strAction.equalsIgnoreCase("U")
					|| strAction.equalsIgnoreCase("D")
					|| strAction.equalsIgnoreCase("M")) {
				// sel_creditreport_audittrial
				// strQuery =
				// SQLParser.getSqlQuery("sel_creditreport_audittrial^"+strAppno+"^"+strAppType);
				strQuery = SQLParser.getSqlQuery("sel_creditreport_audittrial");
				strQuery = strQuery + desc;
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					strOldAudit.append("~Name = ");

					String strDemo_id = Helper.correctNull((String) rs
							.getString("cr_name"));
					if (!strDemo_id.equals("")) {
						if (Apploantype.equalsIgnoreCase("P")) {
							strDemo_id = strDemo_id.substring(1, strDemo_id
									.length());
						} else if (Apploantype.equalsIgnoreCase("A")) {
							strDemo_id = strDemo_id.substring(1, strDemo_id
									.length());
						}
					}
					if (!(strhidsaral.equalsIgnoreCase("saral"))) {
						strQuery = SQLParser
								.getSqlQuery("sel_creditreport_appname_audittrial^"
										+ strDemo_id + "^" + strAppno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strAppName = Helper.correctNull((String) rs1
									.getString("perapp_title"))
									+ "."
									+ Helper.correctNull((String) rs1
											.getString("perapp_fname"));
						}
						strOldAudit.append(strAppName);
					} else {
						strOldAudit.append(strDemo_id);
					}

					strOldAudit.append("~Minority = ");
					if (Helper.correctNull(
							(String) rs.getString("CR_MINORTYPE"))
							.equalsIgnoreCase("1"))
						strOldAudit.append("Yes");
					else
						strOldAudit.append("No");
					strOldAudit.append("~SC/ST= ");
					if (Helper.correctNull(
							(String) rs.getString("CR_MINORTYPE"))
							.equalsIgnoreCase("2"))
						strOldAudit.append("Yes");
					else
						strOldAudit.append("No");
					strOldAudit.append("~Agriculturist = ");
					if (Helper
							.correctNull((String) rs.getString("CR_AGRITYPE"))
							.equalsIgnoreCase("1"))
						strOldAudit.append("Yes");
					else
						strOldAudit.append("NO");
					strOldAudit.append("~Non - Agriculturist = ");
					if (Helper
							.correctNull((String) rs.getString("CR_AGRITYPE"))
							.equalsIgnoreCase("2"))
						strOldAudit.append("Yes");
					else
						strOldAudit.append("NO");
					strOldAudit.append("~Father's Name = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_FATNAME")));
					strOldAudit.append("~Office Address = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_OFFADD")));
					strOldAudit.append("~Office Telephone No. = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_OFFTELNO")));
					strOldAudit.append("~Residence Address = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_RESADD")));
					strOldAudit.append("~Residential Telephone No. = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_RESTELNO")));
					strOldAudit.append("~Permanent Address = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_PERMADD")));
					strOldAudit.append("~Permanent Telephone No. = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("CR_PERMTELNO")));
					if ((strhidsaral.equalsIgnoreCase("saral"))) {
						strOldAudit.append("~Constitution = ");
						strStatic_constitution_id = "14";
						strConsti_code = Helper.correctNull((String) rs
								.getString("CR_CONSTITUTION"));
						strQuery = SQLParser
								.getSqlQuery("sel_consti_desc_audittrial^"
										+ strStatic_constitution_id + "^"
										+ strConsti_code);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strOldAudit.append(Helper.correctNull((String) rs1
									.getString("stat_data_desc1")));
						} else {
							strOldAudit.append("");
						}
						strOldAudit.append("~Established = ");
						strOldAudit.append(Helper.correctNull((String) rs
								.getString("CR_ESTABLISHED")));
					}
				}
			}

			if (!(strhidsaral.equalsIgnoreCase("saral"))) {

				if (strAction.equalsIgnoreCase("U")) {
					strQuery = SQLParser.getSqlQuery("selcreditcount^"
							+ strAppno + "^" + strAppType);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						intCount = rs.getInt("creditcount");
					}

					if (intCount == 0) {
						hshValues.put("hidAction", "Insert");
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();

						arrValues.add(strAppno);
						arrValues.add(strName);
						arrValues.add(strFatName);
						arrValues.add(strOffadd);
						arrValues.add(strOffTelno);
						arrValues.add(strResadd);
						arrValues.add(strResTelno);
						arrValues.add(strPermadd);
						arrValues.add(strPermTelno);
						arrValues.add(strAppType);
						arrValues.add(strChkAgri);
						arrValues.add(strChkMinor);
						arrValues.add(correctNull((String) hshValues
								.get("inwardno")));
						arrValues.add(correctNull((String) hshValues
								.get("hid_slno")));
						arrValues.add(strmainbussiness);
						arrValues.add(strsideline);
						arrValues.add(strconstitution);
						arrValues.add(strestablished);

						hshQuery.put("strQueryId", "inscreditreport");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					} else {
						hshValues.put("hidAction", "Update");
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();

						arrValues.add(strName);
						arrValues.add(strFatName);
						arrValues.add(strOffadd);
						arrValues.add(strOffTelno);
						arrValues.add(strResadd);
						arrValues.add(strResTelno);
						arrValues.add(strPermadd);
						arrValues.add(strPermTelno);
						arrValues.add(strChkAgri);
						arrValues.add(strChkMinor);

						arrValues.add(strmainbussiness);
						arrValues.add(strsideline);
						arrValues.add(strconstitution);
						arrValues.add(strestablished);

						arrValues.add(strAppno);
						arrValues.add(strAppType);

						hshQuery.put("strQueryId", "updcreditreport");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				} else if (strAction.equalsIgnoreCase("D")) {

					hshValues.put("hidAction", "Delete");
					hshQueryValues = new HashMap();

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					arrValues.add(strAppType);
					hshQuery.put("strQueryId", "delcreditreport");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					arrValues.add(strAppType);
					hshQuery.put("strQueryId", "delcreditreport2");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("2", hshQuery);
					hshQueryValues.put("size", "2");

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					arrValues.add(strAppType);
					hshQuery.put("strQueryId", "delcreditreport3");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("3", hshQuery);
					hshQueryValues.put("size", "3");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

				}
			} else {
				if (strAction.equalsIgnoreCase("I")) {
					hshValues.put("hidAction", "Insert");
					strQuery = SQLParser.getSqlQuery("selsaralmaxslno^"
							+ correctNull((String) hshValues.get("inwardno")));
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						intCount = rs.getInt("maxsno");
					}

					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					arrValues.add(strAppno);
					arrValues.add(correctNull((String) hshValues
							.get("txt_crname")));
					arrValues.add(strFatName);
					arrValues.add(strOffadd);
					arrValues.add(strOffTelno);
					arrValues.add(strResadd);
					arrValues.add(strResTelno);
					arrValues.add(strPermadd);
					arrValues.add(strPermTelno);
					arrValues.add(strAppType);
					arrValues.add(strChkAgri);
					arrValues.add(strChkMinor);
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					arrValues.add(Integer.toString(intCount));

					arrValues.add(strmainbussiness);
					arrValues.add(strsideline);
					arrValues.add(strconstitution);
					arrValues.add(strestablished);

					hshQuery.put("strQueryId", "inscreditreport");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else if (strAction.equalsIgnoreCase("M")) {

					hshValues.put("hidAction", "Update");

					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					arrValues.add(correctNull((String) hshValues
							.get("txt_crname")));
					arrValues.add(strFatName);
					arrValues.add(strOffadd);
					arrValues.add(strOffTelno);
					arrValues.add(strResadd);
					arrValues.add(strResTelno);
					arrValues.add(strPermadd);
					arrValues.add(strPermTelno);
					arrValues.add(strAppType);
					arrValues.add(strChkAgri);
					arrValues.add(strChkMinor);

					arrValues.add(strmainbussiness);
					arrValues.add(strsideline);
					arrValues.add(strconstitution);
					arrValues.add(strestablished);

					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					arrValues.add(correctNull((String) hshValues
							.get("hid_slno")));

					hshQuery.put("strQueryId", "updcreditreportinwardwise");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else if (strAction.equalsIgnoreCase("D")) {

					hshValues.put("hidAction", "Delete");
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					arrValues.add(correctNull((String) hshValues
							.get("hid_slno")));
					hshQuery.put("strQueryId", "delcreditreportinwardwise");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					arrValues.add(correctNull((String) hshValues
							.get("hid_slno")));
					hshQuery.put("strQueryId", "delcredittotmeansbyinwardno");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("2", hshQuery);
					hshQueryValues.put("size", "2");

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
					arrValues.add(correctNull((String) hshValues
							.get("hid_slno")));
					hshQuery.put("strQueryId", "delcreditassetsbyinwardno");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("3", hshQuery);
					hshQueryValues.put("size", "3");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId",
								"delcredittotmeansbyinwardno");
						arrValues.add(correctNull((String) hshValues
								.get("inwardno")));
						arrValues.add(correctNull((String) hshValues
								.get("hid_slno")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");

						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "delcreditassetsbyinwardno");
						arrValues.add(correctNull((String) hshValues
								.get("inwardno")));
						arrValues.add(correctNull((String) hshValues
								.get("hid_slno")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");

					}
				}
			}
			// for new data(update & insert)--audit trial
			StringBuilder strNewAudit = new StringBuilder();
			String strDemoid = Helper.correctNull((String) hshValues
					.get("hidapplicantid"));
			if (strAction.equalsIgnoreCase("U")
					|| strAction.equalsIgnoreCase("I")
					|| strAction.equalsIgnoreCase("M")) {
				strNewAudit.append("~Name = ");
				if (!(strhidsaral.equalsIgnoreCase("saral"))) {

					String strDemo_id = strName;
					if (!strDemo_id.equals("")) {
						if (Apploantype.equalsIgnoreCase("P")
								|| Apploantype.equalsIgnoreCase("A")) {
							strDemo_id = strDemo_id.substring(1, strDemo_id
									.length());
						}
					}
					strQuery = SQLParser
							.getSqlQuery("sel_creditreport_appname_audittrial^"
									+ strDemo_id + "^" + strAppno);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strAppName = Helper.correctNull((String) rs1
								.getString("perapp_title"))
								+ "."
								+ Helper.correctNull((String) rs1
										.getString("perapp_fname"));
					}

				} else {
					strAppName = correctNull((String) hshValues
							.get("txt_crname"));
				}
				strNewAudit.append(strAppName);
				strNewAudit.append("~Minority  = ");
				if (strChkMinor.equalsIgnoreCase("1"))
					strNewAudit.append("Yes");
				else
					strNewAudit.append("No");
				strNewAudit.append("~SC/ST  = ");
				if (strChkMinor.equalsIgnoreCase("2"))
					strNewAudit.append("Yes");
				else
					strNewAudit.append("No");
				strNewAudit.append("~Agriculturist = ");
				if (strChkAgri.equalsIgnoreCase("1"))
					strNewAudit.append("Yes");
				else
					strNewAudit.append("No");
				strNewAudit.append("~Non - Agriculturist = ");
				if (strChkAgri.equalsIgnoreCase("2"))
					strNewAudit.append("Yes");
				else
					strNewAudit.append("No");
				strNewAudit.append("~Father's Name = ");
				strNewAudit.append(strFatName);
				strNewAudit.append("~Office Address = ");
				strNewAudit.append(strOffadd);
				strNewAudit.append("~Office Telephone No. = ");
				strNewAudit.append(strOffTelno);
				strNewAudit.append("~Residence Address = ");
				strNewAudit.append(strResadd);
				strNewAudit.append("~Residential Telephone No. = ");
				strNewAudit.append(strResTelno);
				strNewAudit.append("~Permanent Address = ");
				strNewAudit.append(strPermadd);
				strNewAudit.append("~Permanent Telephone No. = ");
				strNewAudit.append(strPermTelno);
				if ((strhidsaral.equalsIgnoreCase("saral"))) {
					strNewAudit.append("~Constitution = ");
					strStatic_constitution_id = "14";
					if (rs1 != null) {
						rs1.close();
					}
					strQuery = SQLParser
							.getSqlQuery("sel_consti_desc_audittrial^"
									+ strStatic_constitution_id + "^"
									+ strconstitution);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strNewAudit.append(Helper.correctNull((String) rs1
								.getString("stat_data_desc1")));
					} else {
						strNewAudit.append("");
					}
					strNewAudit.append("~Established = ");
					strNewAudit.append(strestablished);
				}
			}

			if (!(strhidsaral.equalsIgnoreCase("saral"))) {
				if (Helper.correctNull((String) hshValues.get("hidPageId"))
						.equalsIgnoreCase("crdrep1")) {
					AuditTrial.auditNewLog(hshValues, "69", strAppno,
							strNewAudit.toString(), strOldAudit.toString());
				} else if (Helper.correctNull(
						(String) hshValues.get("hidPageId")).equalsIgnoreCase(
						"comcrdtr")) {
					AuditTrial.auditNewLog(hshValues, "407", strAppno,
							strNewAudit.toString(), strOldAudit.toString());
				} else if (Helper.correctNull(
						(String) hshValues.get("hidPageId")).equalsIgnoreCase(
						"agrcdrep")) {
					AuditTrial.auditNewLog(hshValues, "409", strAppno,
							strNewAudit.toString(), strOldAudit.toString());
				}
				//
				else {
					AuditTrial.auditNewLog(hshValues, "184", strAppno,
							strNewAudit.toString(), strOldAudit.toString());
				}

			} else {
				if (Helper.correctNull((String) hshValues.get("hidPageId"))
						.equalsIgnoreCase("crdrep1")) {
					AuditTrial.auditNewLog(hshValues, "69",
							correctNull((String) hshValues.get("inwardno")),
							strNewAudit.toString(), strOldAudit.toString());
				} else if (Helper.correctNull(
						(String) hshValues.get("hidPageId")).equalsIgnoreCase(
						"comcrdtr")) {
					AuditTrial.auditNewLog(hshValues, "407",
							correctNull((String) hshValues.get("inwardno")),
							strNewAudit.toString(), strOldAudit.toString());
				} else if (Helper.correctNull(
						(String) hshValues.get("hidPageId")).equalsIgnoreCase(
						"agrcdrep")) {
					AuditTrial.auditNewLog(hshValues, "409",
							correctNull((String) hshValues.get("inwardno")),
							strNewAudit.toString(), strOldAudit.toString());
				} else {
					AuditTrial.auditNewLog(hshValues, "184",
							correctNull((String) hshValues.get("inwardno")),
							strNewAudit.toString(), strOldAudit.toString());
				}

			}

		} catch (Exception e) {
			throw new EJBException(
					"Exception in updateDueDiligence1 lapsReportBean"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in updateDuediligence1"
								+ e.getMessage());
			}
		}
	}

	public void updateCreditreport2(HashMap hshValues)  {
		HashMap hshQuery = null;
		HashMap hshQueryValues = null;
		ArrayList arrValues = new ArrayList();
		ResultSet rs = null, rs1 = null, rs3 = null, rs2 = null, rs4 = null, rs5 = null, rs6 = null;
		String strAppno = "";
		String strAction = "";
		String strQuery = "";
		String strName = "", strAppType = "";
		String[] strMovdesc = null;
		String[] strMovvalue = null;
		String[] strImmovdesc = null;
		String[] strImmovvalue = null;
		String[] strMovdesc1 = null;
		String[] strMovvalue1 = null;
		String[] strImmovdesc1 = null;
		String[] strImmovvalue1 = null;
		String strMovtotal = "";
		String strImmovtotal = "";
		String strInwardno = "";
		String strSno = "";
		String strAssetType = "";
		int intCount = 0, intCount2 = 0;
		String strAppName = "";
		String Apploantype = Helper.correctNull((String) hshValues
				.get("apploantype"));
		strAction = correctNull((String) hshValues.get("hidAction"));
		try {
			strAppno = correctNull((String) hshValues.get("appno"));

			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("strappno"));
			}
			strInwardno = correctNull((String) hshValues.get("inwardno"));
			strSno = correctNull((String) hshValues.get("hid_slno"));

			strAppType = correctNull((String) hshValues.get("hid_appid"));
			strName = correctNull((String) hshValues.get("sel_name"));

			strMovdesc = (String[]) hshValues.get("txt_movdesc");
			strMovvalue = (String[]) hshValues.get("txt_movvalue");
			strImmovdesc = (String[]) hshValues.get("txt_immovdesc");
			strImmovvalue = (String[]) hshValues.get("txt_immovvalue");
			strMovtotal = correctNull((String) hshValues.get("txt_movtotal"));
			strImmovtotal = correctNull((String) hshValues
					.get("txt_immovtotal"));

			String desc = "";
			StringBuilder strOldAudit = new StringBuilder();
			if (strAction.equalsIgnoreCase("U")
					|| strAction.equalsIgnoreCase("D")) {
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("credittotmeansbyinwardno^"
									+ strInwardno + "^" + strSno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport2^"
							+ strAppno + "^" + strAppType);
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strOldAudit.append("~Name = ");
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						strQuery = SQLParser
								.getSqlQuery("sel_creditreport_audittrial");
						desc = "  where CR_INWARDNO='" + strInwardno
								+ "' and CR_SLNO='" + strSno + "'";
						strQuery = strQuery + desc;
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strAppName = Helper.correctNull((String) rs1
									.getString("cr_name"));
						}
					} else {
						String strDemo_id = Helper.correctNull((String) rs
								.getString("cr_apptype"));
						if (!strDemo_id.equals("")) {
							if (Apploantype.equalsIgnoreCase("P")
									|| Apploantype.equalsIgnoreCase("A")) {
								strDemo_id = strDemo_id.substring(1, strDemo_id
										.length());
							}
						}
						strQuery = SQLParser
								.getSqlQuery("sel_creditreport_appname_audittrial^"
										+ strDemo_id + "^" + strAppno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strAppName = Helper.correctNull((String) rs1
									.getString("perapp_title"))
									+ "."
									+ Helper.correctNull((String) rs1
											.getString("perapp_fname"));
						}
					}
					strOldAudit.append(strAppName);
					strOldAudit.append("~Total Means = ");
					strOldAudit.append(ApplicationParams.getCurrency()
							+ " "
							+ Helper.correctNull((String) rs
									.getString("CR_Total_MEANS")));
					strOldAudit.append("~ Means/ TNW as on = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("cr_meansason")));
					strOldAudit
							.append("~ Particulars of Liabilities of Individuals/partners/Directors/Others = ");
					strOldAudit.append(ApplicationParams.getCurrency()
							+ " "
							+ Helper.correctNull((String) rs
									.getString("CR_LIAB_Partner")));
					strOldAudit.append("~ Business Ability = ");
					if (correctNull(
							(String) rs.getString("CR_Business_ability"))
							.equalsIgnoreCase("1")) {
						strOldAudit.append("CAPABLE");
					} else if (correctNull(
							(String) rs.getString("CR_Business_ability"))
							.equalsIgnoreCase("2")) {
						strOldAudit.append("INCAPABLE");
					} else if (correctNull(
							(String) rs.getString("CR_Business_ability"))
							.equalsIgnoreCase("3")) {
						strOldAudit.append("EXPERIENCED");
					} else if (correctNull(
							(String) rs.getString("CR_Business_ability"))
							.equalsIgnoreCase("4")) {
						strOldAudit.append("INEXPERIENCED");
					} else if (correctNull(
							(String) rs.getString("CR_Business_ability"))
							.equalsIgnoreCase("5")) {
						strOldAudit.append("NOT APPLICABLE");
					} else {
						strOldAudit.append("");
					}
					strOldAudit.append("~ Business Conducted = ");
					if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("1")) {
						strOldAudit.append("SPECULATIVE");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("2")) {
						strOldAudit.append("OVERTRADE");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("3")) {
						strOldAudit.append("CONSERVATIVE");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("4")) {
						strOldAudit.append("PRUDENT");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("5")) {
						strOldAudit.append("CAUTIOUS");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("6")) {
						strOldAudit.append("STEADY");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Conducted"))
							.equalsIgnoreCase("7")) {
						strOldAudit.append("NOT APPLICABLE");
					} else {
						strOldAudit.append("");
					}
					strOldAudit.append("~ Business Reputation = ");
					if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("1")) {
						strOldAudit.append("HONEST");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("2")) {
						strOldAudit.append("DISHONEST");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("3")) {
						strOldAudit.append("STRAIGHT-FORWARD");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("4")) {
						strOldAudit.append("TRICKY");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("5")) {
						strOldAudit.append("SHARP");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("6")) {
						strOldAudit.append("SHREWD");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Reputation"))
							.equalsIgnoreCase("7")) {
						strOldAudit.append("NOT APPLICABLE");
					} else {
						strOldAudit.append("");
					}
					strOldAudit.append("~ Condition of Business= ");
					if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("1")) {
						strOldAudit.append("PROGRESSIVE");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("2")) {
						strOldAudit.append("DECLINING");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("3")) {
						strOldAudit.append("STAGNANT");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("4")) {
						strOldAudit.append("THRIVING");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("5")) {
						strOldAudit.append("HEALTHY");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("6")) {
						strOldAudit.append("SOUND");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("7")) {
						strOldAudit.append("LIQUID");
					} else if (correctNull(
							(String) rs.getString("CR_Business_Condition"))
							.equalsIgnoreCase("8")) {
						strOldAudit.append("NOT APPLICABLE");
					} else {
						strOldAudit.append("");
					}
					strAssetType = "M";
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						strQuery = SQLParser
								.getSqlQuery("selcreditassetsbyinwardno^"
										+ strInwardno + "^" + strSno + "^"
										+ strAssetType);
					} else {
						strQuery = SQLParser.getSqlQuery("selcreditreport3^"
								+ strAppno + "^" + strAppType + "^"
								+ strAssetType);
					}
					rs1 = DBUtils.executeQuery(strQuery);
					int i = 0;
					while (rs1.next()) {
						strOldAudit.append(" ~MOVABLE ASSETS Desc= ").append(
								correctNull((String) rs1
										.getString("CR_DESCRIPTION")));
						strOldAudit.append(" ~MOVABLE ASSETS Value= ").append(
								ApplicationParams.getCurrency()
										+ " "
										+ correctNull((String) rs1
												.getString("CR_VALUE")));
					}
					strAssetType = "MT";
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						strQuery = SQLParser
								.getSqlQuery("selcreditassetsbyinwardno^"
										+ strInwardno + "^" + strSno + "^"
										+ strAssetType);
					} else {
						strQuery = SQLParser.getSqlQuery("selcreditreport3^"
								+ strAppno + "^" + strAppType + "^"
								+ strAssetType);
					}
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						strMovtotal = Helper.correctNull((String) rs2
								.getString("CR_VALUE"));
					}
					strOldAudit.append(" ~TOTAL MOVABLE ASSETS = ")
							.append(
									ApplicationParams.getCurrency() + " "
											+ strMovtotal);
					// for immovable asset
					i = 0;
					strAssetType = "I";
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						strQuery = SQLParser
								.getSqlQuery("selcreditassetsbyinwardno^"
										+ strInwardno + "^" + strSno + "^"
										+ strAssetType);
					} else {
						strQuery = SQLParser.getSqlQuery("selcreditreport3^"
								+ strAppno + "^" + strAppType + "^"
								+ strAssetType);
					}
					rs4 = DBUtils.executeQuery(strQuery);
					while (rs4.next()) {
						strOldAudit.append(" ~IMMOVABLE ASSETS Desc= ").append(
								correctNull(rs4.getString("CR_DESCRIPTION")));
						strOldAudit
								.append(" ~IMMOVABLE ASSETS Value= ")
								.append(
										ApplicationParams.getCurrency()
												+ " "
												+ correctNull(rs4
														.getString("CR_VALUE")));
					}
					strAssetType = "IMT";
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						strQuery = SQLParser
								.getSqlQuery("selcreditassetsbyinwardno^"
										+ strInwardno + "^" + strSno + "^"
										+ strAssetType);
					} else {
						strQuery = SQLParser.getSqlQuery("selcreditreport3^"
								+ strAppno + "^" + strAppType + "^"
								+ strAssetType);
					}
					rs5 = DBUtils.executeQuery(strQuery);
					if (rs5.next()) {
						strImmovtotal = Helper.correctNull((String) rs5
								.getString("CR_VALUE"));
					}
					strOldAudit.append(" ~TOTAL IMMOVABLE ASSETS= ").append(
							ApplicationParams.getCurrency() + " "
									+ strImmovtotal);
					strOldAudit.append("~ Date = ");
					strOldAudit.append(correctNull((String) rs
							.getString("CR_DATE")));
					strOldAudit.append("~ Credit Investigator = ");
					strOldAudit.append(correctNull((String) rs
							.getString("CR_CRDINVESTIGATOR")));
					strOldAudit.append("~ Branch Manager = ");
					strOldAudit.append(correctNull((String) rs
							.getString("CR_BRANCHMANAGER")));
				}
			}
			if (strAction.equalsIgnoreCase("U")) {
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditcount2byinwardwise^"
									+ strInwardno + "^" + strSno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditcount2^"
							+ strAppno + "^" + strAppType);
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("creditcount");
				}
				if (intCount > 0) {
					hshValues.put("hidAction", "Update");
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						hshQuery.put("strQueryId",
								"delcredittotmeansbyinwardno");
						arrValues.add(strInwardno);
						arrValues.add(strSno);
					} else {
						hshQuery.put("strQueryId", "delcreditreport2");
						arrValues.add(strAppno);
						arrValues.add(strAppType);
					}
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					intCount = 0;
				} else {
					hshValues.put("hidAction", "Insert");
				}

				if (intCount == 0) {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					arrValues.add(strAppno);
					arrValues.add(strName);
					arrValues.add(correctNull((String) hshValues
							.get("txt_gurantdetail")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_indlibpartner")));
					arrValues.add(correctNull((String) hshValues
							.get("sel_busability")));
					arrValues.add(correctNull((String) hshValues
							.get("sel_busconduct")));
					arrValues.add(correctNull((String) hshValues
							.get("sel_busreputation")));
					arrValues.add(correctNull((String) hshValues
							.get("sel_buscondtion")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_enjoybranch")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_othersecuritycharge")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_indreport")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_date"))); //				
					arrValues.add(Helper.correctDouble((String) hshValues
							.get("txt_total")));
					arrValues.add(strAppType);
					arrValues.add(strInwardno);
					arrValues.add(strSno);
					arrValues.add(correctNull((String) hshValues
							.get("txt_investigator")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_brmanager")));
					arrValues.add(correctNull((String) hshValues
							.get("txt_meansason")));

					hshQuery.put("strQueryId", "inscreditreport2");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditcount3byinwardwise^"
									+ strInwardno + "^" + strSno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditcount3^"
							+ strAppno + "^" + strAppType);
				}

				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount2 = rs.getInt("creditcount");
				}
				if (intCount2 > 0) {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						hshQuery.put("strQueryId", "delcreditassetsbyinwardno");
						arrValues.add(strInwardno);
						arrValues.add(strSno);
					} else {
						hshQuery.put("strQueryId", "delcreditreport3");
						arrValues.add(strAppno);
						arrValues.add(strAppType);
					}

					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					intCount2 = 0;
				}

				if (intCount2 == 0) {
					if (!strMovdesc[0].equals("")) {
						for (int i = 0; i < strMovdesc.length; i++) {
							if (!strMovdesc[i].equals("")) {
								hshQueryValues = new HashMap();
								hshQuery = new HashMap();
								arrValues = new ArrayList();

								arrValues.add(strAppno);
								arrValues.add(Integer.toString(i + 1));
								arrValues.add("M");
								arrValues.add(strMovdesc[i]);
								arrValues.add(strMovvalue[i]);
								arrValues.add(strAppType);
								arrValues.add(strInwardno);
								arrValues.add(strSno);

								hshQuery.put("strQueryId", "inscreditreport3");
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("1", hshQuery);
								hshQueryValues.put("size", "1");
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}
						}
						// MOVABLE ASSET TOTAL
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						strMovtotal = correctNull((String) hshValues
								.get("txt_movtotal"));

						arrValues.add(strAppno);
						arrValues.add(Integer.toString(1));
						arrValues.add("MT");
						arrValues.add("MOVABLE ASSET TOTAL");
						if (strMovtotal.equalsIgnoreCase("")) {
							strMovtotal = "0.00";
						}
						arrValues.add(strMovtotal);
						arrValues.add(strAppType);
						arrValues.add(strInwardno);
						arrValues.add(strSno);
						hshQuery.put("strQueryId", "inscreditreport3");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
					if (!strImmovdesc[0].equals("")) {
						for (int i = 0; i < strMovdesc.length; i++) {
							if (!strImmovdesc[i].equals("")) {
								hshQueryValues = new HashMap();
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								arrValues.add(strAppno);
								arrValues.add(Integer.toString(i + 1));
								arrValues.add("I");
								arrValues.add(strImmovdesc[i]);
								arrValues.add(strImmovvalue[i]);
								arrValues.add(strAppType);
								arrValues.add(strInwardno);
								arrValues.add(strSno);
								hshQuery.put("strQueryId", "inscreditreport3");
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("1", hshQuery);
								hshQueryValues.put("size", "1");
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}
						}
						// IMMOVABLE ASSET TOTAL
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						strImmovtotal = correctNull((String) hshValues
								.get("txt_immovtotal"));
						arrValues.add(strAppno);
						arrValues.add(Integer.toString(1));
						arrValues.add("IMT");
						arrValues.add("IMMOVABLE ASSET TOTAL");
						if (strImmovtotal.equalsIgnoreCase("")) {
							strImmovtotal = "0.00";
						}
						arrValues.add(strImmovtotal);
						arrValues.add(strAppType);
						arrValues.add(strInwardno);
						arrValues.add(correctNull((String) hshValues
								.get("hid_slno")));
						hshQuery.put("strQueryId", "inscreditreport3");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}
			} else if (strAction.equalsIgnoreCase("D")) {
				hshValues.put("hidAction", "Delete");
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();

				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId", "delcredittotmeansbyinwardno");
					arrValues.add(strInwardno);
					arrValues.add(strSno);
				} else {
					hshQuery.put("strQueryId", "delcreditreport2");
					arrValues.add(strAppno);
					arrValues.add(strAppType);
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");

				hshQuery = new HashMap();
				arrValues = new ArrayList();

				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId", "delcreditassetsbyinwardno");
					arrValues.add(strInwardno);
					arrValues.add(strSno);
				} else {
					hshQuery.put("strQueryId", "delcreditreport3");
					arrValues.add(strAppno);
					arrValues.add(strAppType);
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);
				hshQueryValues.put("size", "2");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

			// Audit Trial starts Here
			String strDemoId = Helper.correctNull((String) hshValues
					.get("hidapplicantid"));
			StringBuilder sbAt = new StringBuilder();
			if (strAction.equalsIgnoreCase("U")
					|| strAction.equalsIgnoreCase("I")) {
				sbAt.append("~Name = ");
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("sel_creditreport_audittrial");
					desc = "  where CR_INWARDNO='" + strInwardno
							+ "' and CR_SLNO='" + strSno + "'";
					strQuery = strQuery + desc;
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strAppName = Helper.correctNull((String) rs1
								.getString("cr_name"));
					}

				} else {
					String strDemo_id = strAppType;
					if (!strDemo_id.equals("")) {
						if (Apploantype.equalsIgnoreCase("P")
								|| Apploantype.equalsIgnoreCase("A")) {
							strDemo_id = strDemo_id.substring(1, strDemo_id
									.length());
						}
					}
					strQuery = SQLParser
							.getSqlQuery("sel_creditreport_appname_audittrial^"
									+ strDemoId + "^" + strAppno);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strAppName = Helper.correctNull((String) rs1
								.getString("perapp_title"))
								+ "."
								+ Helper.correctNull((String) rs1
										.getString("perapp_fname"));
					}
				}
				sbAt.append(strAppName);
				sbAt.append("~Total Means =").append(
						ApplicationParams.getCurrency()
								+ " "
								+ correctNull((String) hshValues
										.get("txt_total")));
				sbAt.append(" ~Means / TNW as on = ").append(
						correctNull((String) hshValues.get("txt_meansason")));
				sbAt
						.append(
								" ~PARTICULARS OF LIABILITIES OF INDIVIDUAL / PARTNERS / DIRECTORS /OTHERS = ")
						.append(
								ApplicationParams.getCurrency()
										+ " "
										+ correctNull((String) hshValues
												.get("txt_indlibpartner")));
				if (correctNull((String) hshValues.get("sel_busability"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~BUSINESS ABILITY  = ").append("CAPABLE");
				} else if (correctNull((String) hshValues.get("sel_busability"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~BUSINESS ABILITY  = ").append("INCAPABLE");
				} else if (correctNull((String) hshValues.get("sel_busability"))
						.equalsIgnoreCase("3")) {
					sbAt.append(" ~BUSINESS ABILITY  = ").append("EXPERIENCED");
				} else if (correctNull((String) hshValues.get("sel_busability"))
						.equalsIgnoreCase("4")) {
					sbAt.append(" ~BUSINESS ABILITY  = ").append(
							"INEXPERIENCED");
				} else if (correctNull((String) hshValues.get("sel_busability"))
						.equalsIgnoreCase("5")) {
					sbAt.append(" ~BUSINESS ABILITY  = ").append(
							"NOT APPLICABLE");
				}

				if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ").append("SPECULATIVE");
				} else if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ").append("OVERTRADE");
				} else if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("3")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ")
							.append("CONSERVATIVE");
				} else if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("4")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ").append("PRUDENT");
				} else if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("5")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ").append("CAUTIOUS");
				} else if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("6")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ").append("STEADY");
				} else if (correctNull((String) hshValues.get("sel_busconduct"))
						.equalsIgnoreCase("7")) {
					sbAt.append(" ~BUSINESS CONDUCTED= ").append(
							"NOT APPLICABLE");
				}

				if (correctNull((String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append("HONEST");
				} else if (correctNull(
						(String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append("DISHONEST");
				} else if (correctNull(
						(String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("3")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append(
							"STRAIGHT-FORWARD");
				} else if (correctNull(
						(String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("4")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append("TRICKY");
				} else if (correctNull(
						(String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("5")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append("SHARP");
				} else if (correctNull(
						(String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("6")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append("SHREWD");
				} else if (correctNull(
						(String) hshValues.get("sel_busreputation"))
						.equalsIgnoreCase("7")) {
					sbAt.append(" ~BUSINESS REPUTATION = ").append(
							"NOT APPLICABLE");
				}

				if (correctNull((String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append(
							"PROGRESSIVE");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append(
							"DECLINING");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("3")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append(
							"STAGNANT");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("4")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append(
							"THRIVING");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("5")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ")
							.append("HEALTHY");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("6")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append("SOUND");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("7")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append("LIQUID");
				} else if (correctNull(
						(String) hshValues.get("sel_buscondtion"))
						.equalsIgnoreCase("8")) {
					sbAt.append(" ~CONDITION OF BUSINESS  = ").append(
							"NOT APPLICABLE");
				}

				if (intCount2 == 0) {
					if (!strMovdesc[0].equals("")) {
						for (int i = 0; i < strMovdesc.length; i++) {
							if (!strMovdesc[i].equals("")) {
								sbAt.append(" ~MOVABLE ASSETS Desc= ").append(
										strMovdesc[i]);
								sbAt.append(" ~MOVABLE ASSETS Value= ").append(
										ApplicationParams.getCurrency() + " "
												+ strMovvalue[i]);
							}
						}
					}
				}
				sbAt.append(" ~TOTAL MOVABLE ASSETS = ").append(
						ApplicationParams.getCurrency() + " " + strMovtotal);

				if (!strImmovdesc[0].equals("")) {
					for (int i = 0; i < strMovdesc.length; i++) {
						if (!strImmovdesc[i].equals("")) {
							sbAt.append(" ~IMMOVABLE ASSETS Desc= ").append(
									strImmovdesc[i]);
							sbAt.append(" ~IMMOVABLE ASSETS Value= ").append(
									ApplicationParams.getCurrency() + " "
											+ strImmovvalue[i]);
						}
					}
				}
				sbAt.append(" ~TOTAL IMMOVABLE ASSETS= ").append(
						ApplicationParams.getCurrency() + " " + strImmovtotal);
				sbAt.append(" ~DATE =").append(
						correctNull((String) hshValues.get("txt_date")));
				sbAt.append(" ~CREDIT INVESTIGATOR  =")
						.append(
								correctNull((String) hshValues
										.get("txt_investigator")));
				sbAt.append(" ~BRANCH MANAGER  =").append(
						correctNull((String) hshValues.get("txt_brmanager")));
			}
			if (correctNull((String) hshValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				if (Helper.correctNull((String) hshValues.get("hidPageId"))
						.equalsIgnoreCase("crdrep2")) {
					AuditTrial.auditNewLog(hshValues, "70", strInwardno, sbAt
							.toString(), strOldAudit.toString());
				} else if (Helper.correctNull(
						(String) hshValues.get("hidPageId")).equalsIgnoreCase(
						"comcrdr4")) {
					AuditTrial.auditNewLog(hshValues, "287", strInwardno, sbAt
							.toString(), strOldAudit.toString());
				} else {
					AuditTrial.auditNewLog(hshValues, "298", strInwardno, sbAt
							.toString(), strOldAudit.toString());
				}
			} else {
				if (Helper.correctNull((String) hshValues.get("hidPageId"))
						.equalsIgnoreCase("crdrep2")) {
					AuditTrial.auditNewLog(hshValues, "70", strAppno, sbAt
							.toString(), strOldAudit.toString());
				} else if (Helper.correctNull(
						(String) hshValues.get("hidPageId")).equalsIgnoreCase(
						"comcrdr4")) {
					AuditTrial.auditNewLog(hshValues, "287", strAppno, sbAt
							.toString(), strOldAudit.toString());
				} else {
					AuditTrial.auditNewLog(hshValues, "298", strAppno, sbAt
							.toString(), strOldAudit.toString());
				}
			}

		} catch (Exception e) {
			throw new EJBException(
					"Exception in updateCreditreport2 lapsReportBean"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in updateCreditreport2"
								+ e.getMessage());
			}
		}
	}

	public HashMap getCreditreport1(HashMap hshValues)  {
		HashMap hshRecord = new HashMap();
		ResultSet rs = null;
		String strQuery = "";
		String strAppno = "", strAction = "", strAppType = "S", strComapp_id = "", strhidsaral = "";
		int intCount = 0;

		String charGua = "";
		String comapp_compname1 = "";
		String hidCoappid = correctNull((String) hshValues.get("hid_appid"));

		String strCategoryType = correctNull((String) hshValues
				.get("hidCategoryType"));
		if (strCategoryType.equalsIgnoreCase("")) {
			if (strCategoryType.equalsIgnoreCase("")) {
				strCategoryType = correctNull((String) hshValues.get("cattype"));
			}
		}

		strComapp_id = correctNull((String) hshValues.get("comapp_id"));
		if (strComapp_id.equalsIgnoreCase("")) {
			strComapp_id = correctNull((String) hshValues.get("comappid"));
		}
		if (strAppno.equals("")) {
			strAppno = correctNull((String) hshValues.get("appno"));
		}
		if (strAppno.equalsIgnoreCase("")) {
			strAppno = correctNull((String) hshValues.get("strappno"));
		}
		strAction = correctNull((String) hshValues.get("hidAction"));
		strhidsaral = correctNull((String) hshValues.get("hidsaral"));
		// ArrayList arrRow=null;
		// ArrayList arrCol=null;

		try {

			if (!strhidsaral.equalsIgnoreCase("SARAL")) {
				strAppno = correctNull((String) hshValues.get("appno"));

				if (strAppno.equalsIgnoreCase("")) {
					strAppno = correctNull((String) hshValues.get("strappno"));
				}
			}

			if (!strAppno.equalsIgnoreCase("")) {

				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("comfunsel3^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					strComapp_id = correctNull(rs.getString("demo_appid"));
					comapp_compname1 = correctNull(rs.getString("app_name"));
				}

				strQuery = SQLParser.getSqlQuery("get_Appstatus^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("appstatus", correctNull(rs
							.getString("app_status")));
				}
			}

			if (strAction.equalsIgnoreCase("Get")
					&& !hidCoappid.equalsIgnoreCase("S")
					&& !strCategoryType.equalsIgnoreCase("SSI")) {
				strQuery = SQLParser.getSqlQuery("selcreditcount^" + strAppno
						+ "^" + hidCoappid);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					intCount = rs.getInt("creditcount");
				}
				hshRecord.put("intCount", Integer.toString(intCount));
				hshRecord.put("hidCoappid", hidCoappid);
				if (intCount == 0 && !hidCoappid.equalsIgnoreCase("0")
						&& !charGua.equalsIgnoreCase("g")) {
					strQuery = SQLParser.getSqlQuery("sel_corpromoterdetails^"
							+ strAppno + "^" + hidCoappid);
					if (rs != null)
						rs.close();
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("address1", correctNull(rs
								.getString("com_compdtaddress1")));
						hshRecord.put("address2", correctNull(rs
								.getString("com_compdtaddress2")));
						hshRecord.put("city", correctNull(rs
								.getString("com_compdtcity")));
						hshRecord.put("state", correctNull(rs
								.getString("com_compdtstate")));
						hshRecord.put("com_compdtpin", correctNull(rs
								.getString("com_compdtpin")));
						hshRecord.put("com_compdtphone", correctNull(rs
								.getString("com_compdtphone")));
						hshRecord.put("CR_CONSTITUTION", "001");
					}
				}
				if (strCategoryType.equalsIgnoreCase("CORP")) {
					strQuery = SQLParser
							.getSqlQuery("corp_selname^" + strAppno);
					if (rs != null)
						rs.close();
					rs = DBUtils.executeQuery(strQuery);

					if (rs.next()) {
						hshRecord.put("comapp_companyname", rs
								.getString("comapp_companyname"));
						hshRecord.put("address", rs.getString("address"));
						hshRecord.put("city_name", rs.getString("city_name"));
						hshRecord.put("state_name", rs.getString("state_name"));
						hshRecord.put("comapp_crptpin", rs
								.getString("comapp_crptpin"));
						hshRecord.put("comapp_crptphone", rs
								.getString("comapp_crptphone"));

						if (hidCoappid.equalsIgnoreCase("0")) {
							String strOwner = correctNull(rs
									.getString("comapp_ownership"));
							if (strOwner.trim().equals("OO")) {
								hshRecord.put("CR_CONSTITUTION", "999");
							} else if (strOwner.trim().equals("OLP")) {
								hshRecord.put("CR_CONSTITUTION", "005");
							} else if (strOwner.trim().equals("OLC")) {
								hshRecord.put("CR_CONSTITUTION", "002");
							} else if (strOwner.trim().equals("OS")) {
								hshRecord.put("CR_CONSTITUTION", "009");
							} else if (strOwner.trim().equals("OCC")) {
								hshRecord.put("CR_CONSTITUTION", "006");
							} else if (strOwner.trim().equals("OP")) {
								hshRecord.put("CR_CONSTITUTION", "007");
							} else if (strOwner.trim().equals("IN")) {
								hshRecord.put("CR_CONSTITUTION", "001");
							} else if (strOwner.trim().equals("Jo")) {
								hshRecord.put("CR_CONSTITUTION", "011");
							} else if (strOwner.trim().equals("sub")) {
								hshRecord.put("CR_CONSTITUTION", "011");
							} else if (strOwner.trim().equals("nbfc")) {
								hshRecord.put("CR_CONSTITUTION", "999");
							}
						}
						hshRecord.put("orgname", rs.getString("org_name"));
					}
				}
			}
			strQuery = SQLParser.getSqlQuery("sel_creditname^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshRecord.put("perapp_fname", rs.getString("perapp_fname"));
				hshRecord.put("address", rs.getString("address"));
				hshRecord.put("perapp_zip", rs.getString("perapp_zip"));
				hshRecord.put("perapp_phone", rs.getString("perapp_phone"));
				hshRecord.put("city_name", rs.getString("city_name"));
				hshRecord.put("state_name", rs.getString("state_name"));
				hshRecord.put("perinc_selfincometype", rs
						.getString("constitution"));
				hshRecord.put("orgname", rs.getString("org_name"));

			}

			if (strAction.equalsIgnoreCase("Get")) {
				strAppType = correctNull((String) hshValues.get("hid_appid"));
				if (strAppType.equalsIgnoreCase("")) {
					strAppType = "S";
				}
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("selcreditreport^" + strAppno
						+ "^" + strAppType);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("strAppType", strAppType);
					hshRecord.put("CR_NAME", rs.getString("CR_NAME"));
					hshRecord.put("CR_FatName", rs.getString("CR_FatName"));
					hshRecord.put("CR_Offadd", rs.getString("CR_Offadd"));
					hshRecord.put("CR_OffTelno", rs.getString("CR_OffTelno"));
					hshRecord.put("CR_Resadd", rs.getString("CR_Resadd"));
					hshRecord.put("CR_ResTelno", rs.getString("CR_ResTelno"));
					hshRecord.put("CR_Permadd", rs.getString("CR_Permadd"));
					hshRecord.put("CR_PermTelno", rs.getString("CR_PermTelno"));
					hshRecord.put("CR_Agri", rs.getString("CR_AGRITYPE"));
					hshRecord.put("CR_Minor", rs.getString("CR_MINORTYPE"));
					hshRecord.put("CR_INWARDNO", rs.getString("cr_inwardno"));
					hshRecord.put("CR_SLNO", rs.getString("cr_slno"));
					hshRecord.put("CR_MAINBUSSINESS", rs
							.getString("cr_mainbussiness"));
					hshRecord.put("CR_SIDELINE", rs.getString("cr_sideline"));
					hshRecord.put("CR_CONSTITUTION", rs
							.getString("cr_constitution"));
					hshRecord.put("CR_ESTABLISHED", rs
							.getString("cr_established"));
					hshRecord.put("attachdetach", "detach");
					hshRecord.put("recordflag", "Y");
				} else {
					hshRecord.put("strAppType", strAppType);
					hshRecord.put("CR_NAME", "");
					hshRecord.put("CR_FatName", "");
					hshRecord.put("CR_Offadd", "");
					hshRecord.put("CR_OffTelno", "");
					hshRecord.put("CR_Resadd", "");
					hshRecord.put("CR_ResTelno", "");
					hshRecord.put("CR_Permadd", "");
					hshRecord.put("CR_PermTelno", "");
					hshRecord.put("CR_Agri", "");
					hshRecord.put("CR_Minor", "");
					hshRecord.put("CR_MAINBUSSINESS", "");
					hshRecord.put("CR_SIDELINE", "");
					hshRecord.put("CR_ESTABLISHED", "");
					hshRecord.put("attachdetach", "attach");
					hshRecord.put("recordflag", "N");

				}
			} else if (strhidsaral.equalsIgnoreCase("saral")
					&& (strAction.equalsIgnoreCase("I") || strAction
							.equalsIgnoreCase("M"))) {

				String strinwardno = correctNull((String) hshValues
						.get("inwardno"));
				String strslno = correctNull((String) hshValues.get("hid_slno"));
				if (strslno.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("selmaxslnoinwardwise^"
							+ strinwardno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strslno = correctNull(rs.getString("slno"));
					}
				}

				if (strAction.equalsIgnoreCase("cancel")) {
					strslno = "";
				}
				strQuery = SQLParser
						.getSqlQuery("selcreditreportnamesinwardwise^"
								+ strinwardno + "^" + strslno);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("strAppType", "");
					hshRecord.put("CR_NAME", rs.getString("CR_NAME"));
					hshRecord.put("CR_FatName", rs.getString("CR_FATNAME"));
					hshRecord.put("CR_Offadd", rs.getString("CR_OFFADD"));
					hshRecord.put("CR_OffTelno", rs.getString("CR_OFFTELNO"));
					hshRecord.put("CR_Resadd", rs.getString("CR_RESADD"));
					hshRecord.put("CR_ResTelno", rs.getString("CR_RESTELNO"));
					hshRecord.put("CR_Permadd", rs.getString("CR_PERMADD"));
					hshRecord.put("CR_PermTelno", rs.getString("CR_PERMTELNO"));
					hshRecord.put("CR_Agri", rs.getString("CR_AGRITYPE"));
					hshRecord.put("CR_Minor", rs.getString("CR_MINORTYPE"));
					hshRecord.put("CR_INWARDNO", rs.getString("CR_INWARDNO"));
					hshRecord.put("CR_SLNO", rs.getString("CR_SLNO"));

					hshRecord.put("CR_MAINBUSSINESS", rs
							.getString("cr_mainbussiness"));
					hshRecord.put("CR_SIDELINE", rs.getString("cr_sideline"));
					hshRecord.put("CR_CONSTITUTION", rs
							.getString("cr_constitution"));
					hshRecord.put("CR_ESTABLISHED", rs
							.getString("cr_established"));
					hshRecord.put("recordflag", "Y");
				}
			} else {
				hshRecord.put("strAppType", strAppType);
				hshRecord.put("CR_NAME", "");
				hshRecord.put("CR_FatName", "");
				hshRecord.put("CR_Offadd", "");
				hshRecord.put("CR_OffTelno", "");
				hshRecord.put("CR_Resadd", "");
				hshRecord.put("CR_ResTelno", "");
				hshRecord.put("CR_Permadd", "");
				hshRecord.put("CR_PermTelno", "");
				hshRecord.put("CR_Agri", "");
				hshRecord.put("CR_Minor", "");

				hshRecord.put("CR_MAINBUSSINESS", "");
				hshRecord.put("CR_SIDELINE", "");
				hshRecord.put("CR_CONSTITUTION", "");
				hshRecord.put("CR_ESTABLISHED", "");
			}

			if ((correctNull((String) hshValues.get("strOrgLevel")).equals("D"))
					&& correctNull((String) hshValues.get("strIsSaral"))
							.equals("Y")) {
				strQuery = SQLParser
						.getSqlQuery("selinwardappdata^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("inwardstatus", correctNull(rs
							.getString("inward_brstatus")));
				}
			}
			hshRecord.put("appno", strAppno);

			String comapp_compname = (String) hshValues.get("appname");

			hshRecord.put("comapp_compname", comapp_compname);
			hshRecord.put("comapp_compname1", comapp_compname1);
			hshRecord.put("strOrgName", correctNull((String) hshValues
					.get("strOrgName")));
			hshRecord.put("saral", correctNull((String) hshValues
					.get("hidsaral")));
			hshRecord.put("strOrgLevel", correctNull((String) hshValues
					.get("strOrgLevel")));

		} catch (Exception e) {
			throw new EJBException(
					"Exception in getCreditreport1 lapsReportBean"
							+ e.getMessage());

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in getCreditreport1"
								+ e.getMessage());
			}
		}
		return hshRecord;

	}

	public HashMap getCreditreport2(HashMap hshValues)  {
		HashMap hshRecord = new HashMap();
		ResultSet rs = null;
		String strQuery = "";
		String strAppno = "", strAction = "Get", strAppType = "S";
		String strAssetType = "";
		String[] strMovdesc = new String[10];
		String[] strMovvalue = new String[10];
		String[] strImmovdesc = new String[10];
		String[] strImmovvalue = new String[10];
		int i = 0;
		boolean recordflag = false;
		strAppno = correctNull((String) hshValues.get("appno"));

		if (strAppno.equalsIgnoreCase("")) {
			strAppno = correctNull((String) hshValues.get("strappno"));
		}
		String strSaral = correctNull((String) hshValues.get("hidsaral"));
		String strInwardno = correctNull((String) hshValues.get("inwardno"));
		String strSlno = correctNull((String) hshValues.get("hid_slno"));

		try {
			if (strAction.equalsIgnoreCase("Get")) {
				strAppType = correctNull((String) hshValues.get("hid_appid"));
				if (strAppType.equalsIgnoreCase("")) {
					strAppType = "S";
				}
				if (rs != null) {
					rs.close();
				}
				if (strSaral.equals("saral")) {
					strQuery = SQLParser
							.getSqlQuery("credittotmeansbyinwardno^"
									+ strInwardno + "^" + strSlno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport2^"
							+ strAppno + "^" + strAppType);
				}
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("strAppType", strAppType);
					hshRecord.put("CR_Gurantor", rs.getString("CR_Gurantee"));
					hshRecord
							.put("CR_Partner", rs.getString("CR_LIAB_Partner"));
					hshRecord.put("CR_Busability", rs
							.getString("CR_Business_ability"));
					hshRecord.put("CR_BusConducted", rs
							.getString("CR_Business_Conducted"));
					hshRecord.put("CR_BusReputation", rs
							.getString("CR_Business_Reputation"));
					hshRecord.put("CR_BusCondition", rs
							.getString("CR_Business_Condition"));
					hshRecord.put("CR_Enjoybranch", rs
							.getString("CR_DEALINGS_BANK"));
					hshRecord.put("CR_Othersecur", rs
							.getString("CR_SECURITIES_CHARGED"));
					hshRecord.put("CR_IndReport", rs
							.getString("CR_REPORT_ON_MEANS"));
					hshRecord.put("CR_Date", rs.getString("CR_DATE"));
					hshRecord.put("CR_Total_MEANS", rs
							.getString("CR_Total_MEANS"));
					hshRecord.put("CR_Investigator", rs
							.getString("CR_CRDINVESTIGATOR"));
					hshRecord.put("CR_Brmanager", rs
							.getString("CR_BRANCHMANAGER"));
					hshRecord.put("CR_meansason", rs.getString("cr_meansason"));
					recordflag = true;
				}
				if (recordflag)
					hshRecord.put("recordflag", "Y");
				else
					hshRecord.put("recordflag", "N");

				if (rs != null) {
					rs.close();
				}
				strAssetType = "M";

				if (strSaral.equals("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strInwardno + "^" + strSlno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + strAppType + "^" + strAssetType);
				}
				rs = DBUtils.executeQuery(strQuery);

				while (rs.next()) {
					strMovdesc[i] = correctNull(rs.getString("CR_DESCRIPTION"));
					strMovvalue[i] = correctNull(rs.getString("CR_VALUE"));
					i = i + 1;
				}

				if (rs != null) {
					rs.close();
				}
				i = 0;
				strAssetType = "I";
				if (strSaral.equals("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strInwardno + "^" + strSlno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + strAppType + "^" + strAssetType);
				}
				rs = DBUtils.executeQuery(strQuery);

				while (rs.next()) {
					strImmovdesc[i] = correctNull(rs
							.getString("CR_DESCRIPTION"));
					strImmovvalue[i] = correctNull(rs.getString("CR_VALUE"));
					i = i + 1;
				}

				hshRecord.put("CR_MOV_DESCRIPTION", strMovdesc);
				hshRecord.put("CR_MOV_VALUE", strMovvalue);
				hshRecord.put("CR_IMMOV_DESCRIPTION", strImmovdesc);
				hshRecord.put("CR_IMMOV_VALUE", strImmovvalue);

				if (rs != null) {
					rs.close();
				}
				strAssetType = "MT";
				if (strSaral.equals("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strInwardno + "^" + strSlno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + strAppType + "^" + strAssetType);
				}
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("CR_MOV_TOTAL", rs.getString("CR_VALUE"));
				} else {
					hshRecord.put("CR_MOV_TOTAL", "0.00");
				}

				if (rs != null) {
					rs.close();
				}
				strAssetType = "IMT";
				if (strSaral.equals("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strInwardno + "^" + strSlno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + strAppType + "^" + strAssetType);
				}
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("CR_IMMOV_TOTAL", rs.getString("CR_VALUE"));
				} else {
					hshRecord.put("CR_IMMOV_TOTAL", "0.00");
				}

			} else {
				hshRecord.put("strAppType", "S");
				hshRecord.put("CR_MOV_DESCRIPTION", strMovdesc);
				hshRecord.put("CR_MOV_VALUE", strMovvalue);
				hshRecord.put("CR_IMMOV_DESCRIPTION", strImmovdesc);
				hshRecord.put("CR_IMMOV_VALUE", strImmovdesc);
				hshRecord.put("CR_MOV_TOTAL", "0.00");
				hshRecord.put("CR_IMMOV_TOTAL", "0.00");
				hshRecord.put("CR_Total_MEANS", "0.00");
			}
			hshRecord.put("appno", strAppno);
			String strCons = correctNull((String) hshValues.get("hidCons"));
			// String
			// comapp_compname=correctNull((String)hshValues.get("appname"));
			// hshRecord.put("comapp_compname",comapp_compname);
			hshRecord.put("chkCons", strCons);

		} catch (Exception e) {
			throw new EJBException(
					"Exception in getDueDiligence lapsReportBean"
							+ e.getMessage());

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in updateDuediligence1"
								+ e.getMessage());
			}
		}
		return hshRecord;

	}

	public HashMap getCreditReportPrint1(HashMap hshValues)  {
		HashMap hshRecord = new HashMap();
		ResultSet rs = null;
		ResultSet rs1 = null;
		String strQuery = "";
		String strAppno = "", strAction = "";
		// String strAppID="";
		String strAppName = "";
		// String appType="";
		String strAssetType = "";
		String[] strMovdesc = new String[10];
		String[] strMovvalue = new String[10];
		String[] strImmovdesc = new String[10];
		String[] strImmovvalue = new String[10];
		String appid = "";
		String app_type = "";
		int i = 0;

		String strComapp_id = correctNull((String) hshValues.get("comapp_id"));
		if (strComapp_id.equalsIgnoreCase("")) {
			strComapp_id = correctNull((String) hshValues.get("comappid"));
		}
		String strCategoryType = correctNull((String) hshValues
				.get("hidCategoryType"));

		strAppno = correctNull((String) hshValues.get("appno"));

		if (strAppno.equalsIgnoreCase("")) {
			strAppno = correctNull((String) hshValues.get("strappno"));
		}

		strAction = correctNull((String) hshValues.get("strAction"));

		String AppType = correctNull((String) hshValues.get("AppType"));
		if (!(correctNull((String) hshValues.get("hidsaral")).equals("saral"))) {
			if (strCategoryType.equalsIgnoreCase("OPS")) {
				appid = AppType;
			} else {
				appid = AppType.substring(1);
				app_type = AppType.substring(0, 1);
			}
		}
		// String strprd_type="";
		// String prd_type="";

		// ArrayList arrAppDetails=new ArrayList();
		// ArrayList arrRow1=new ArrayList();
		String strinwardno = correctNull((String) hshValues.get("inwardno"));
		String strslno = correctNull((String) hshValues.get("slno"));

		try {
			// if(!(correctNull((String)hshValues.get("hidsaral")).equals("saral")))
			// {

			/*
			 * This code is for getting only the address of the applicant this
			 * address will be displayed at the top of the credit note after the
			 * application is attached
			 */
			if (correctNull((String) hshValues.get("hidsaral")).equals("saral")) {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strinwardno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("orgname", correctNull(rs
							.getString("org_name")));
					hshRecord.put("orgadd1", correctNull(rs
							.getString("org_add1")));
					hshRecord.put("orgadd2", correctNull(rs
							.getString("org_add2")));
					hshRecord.put("orgcity", correctNull(rs
							.getString("city_name")));
					hshRecord.put("orgstate", correctNull(rs
							.getString("state_name")));
					hshRecord.put("orgzip",
							correctNull(rs.getString("org_zip")));
				}
			} else {
				if (strCategoryType.equalsIgnoreCase("OPS")) {
					strQuery = SQLParser.getSqlQuery("sel_creditname2^"
							+ strAppno + "^" + appid);
				} else {
					strQuery = SQLParser
							.getSqlQuery("sel_addresdetailsforcredit^" + appid
									+ "^" + strAppno + "^" + app_type);// a
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strAppName = rs.getString("perapp_fname");
					hshRecord.put("perapp_fname", strAppName);
					hshRecord.put("address", rs.getString("address"));
					hshRecord.put("perapp_zip", rs.getString("perapp_zip"));
					hshRecord.put("perapp_phone", rs.getString("perapp_phone"));
					hshRecord.put("city_name", rs.getString("perappcityname"));
					hshRecord
							.put("state_name", rs.getString("perappstatename"));
					hshRecord.put("perinc_selfincometype", rs
							.getString("constitution"));
					/*
					 * this to get the Organization name and address
					 */
					hshRecord.put("orgname", rs.getString("org_name"));
					hshRecord.put("orgadd1", correctNull(rs
							.getString("org_add1")));
					hshRecord.put("orgadd2", correctNull(rs
							.getString("org_add2")));
					hshRecord.put("orgcity", correctNull(rs
							.getString("city_name")));
					hshRecord.put("orgstate", correctNull(rs
							.getString("state_name")));
					hshRecord.put("orgzip",
							correctNull(rs.getString("org_zip")));
				}
			}
			// }
			if (rs1 != null) {
				rs1.close();
			}
			// strprd_type=correctNull((String)hshValues.get("strProductType"));

			/*
			 * This is for getting the details of the appln and
			 * garantor/co-applicant of the credit report
			 */

			// if(strprd_type!="")
			// {
			// prd_type=strprd_type.substring(0,1);
			// }
			if (app_type.equalsIgnoreCase("a")) {
				/*
				 * This is to get only the name of the coapplicant/garantor
				 */

				if (rs != null) {
					rs.close();
				}
				if (!strCategoryType.equalsIgnoreCase("OPS")) {
					strQuery = SQLParser.getSqlQuery("cr_getcoappguarantor^"
							+ strAppno + "^" + app_type.toUpperCase() + "^"
							+ appid);// a,1994
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strAppName = correctNull(rs.getString("appname"));
					}
				}

				hshRecord.put("strAppName", strAppName);

				if (rs != null) {
					rs.close();
				}
				String strtemp = AppType.substring(0, 1);
				if (app_type.equalsIgnoreCase("a")
						|| app_type.equalsIgnoreCase(strtemp))// a
				{
					strQuery = SQLParser.getSqlQuery("selcreditreport^"
							+ strAppno + "^" + AppType);// a1994
					rs = DBUtils.executeQuery(strQuery);

					if (rs.next()) {
						// arrRow1=new ArrayList();

						hshRecord.put("strAppName", strAppName);
						hshRecord.put("cr_fatname", correctNull(rs
								.getString("CR_FatName")));
						hshRecord.put("cr_offadd", correctNull(rs
								.getString("CR_Offadd")));
						hshRecord.put("cr_offtelno", correctNull(rs
								.getString("CR_OffTelno")));
						hshRecord.put("cr_resadd", correctNull(rs
								.getString("CR_Resadd")));
						hshRecord.put("cr_restelno", correctNull(rs
								.getString("CR_ResTelno")));
						hshRecord.put("cr_permadd", correctNull(rs
								.getString("CR_Permadd")));
						hshRecord.put("cr_permtelno", correctNull(rs
								.getString("CR_PermTelno")));

						hshRecord.put("CR_Minor", correctNull(rs
								.getString("CR_MINORTYPE")));
						hshRecord.put("CR_Agri", correctNull(rs
								.getString("CR_AGRITYPE")));
						hshRecord.put("cr_constitution", correctNull(rs
								.getString("constitution")));
						hshRecord.put("cr_established", correctNull(rs
								.getString("cr_established")));
						hshRecord.put("cr_sideline", correctNull(rs
								.getString("cr_sideline")));
						hshRecord.put("cr_mainbussiness", correctNull(rs
								.getString("cr_mainbussiness")));
					}
				}
			} else {
				if (!(correctNull((String) hshValues.get("hidsaral"))
						.equals("saral"))) {

					if (rs != null) {
						rs.close();
					}
					if (!strCategoryType.equalsIgnoreCase("OPS")) {
						strQuery = SQLParser
								.getSqlQuery("cr_getcoappguarantor^" + strAppno
										+ "^" + app_type.toUpperCase() + "^"
										+ appid);// c,1273
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							strAppName = correctNull(rs.getString("appname"));
						}
					}
					// else if(prd_type.equalsIgnoreCase("p"))
					// {
					// strQuery =
					// SQLParser.getSqlQuery("cr_getcoappguarantor^"+strAppno+"^"+app_type.toUpperCase()+"^"+appid);
					// rs = DBUtils.executeQuery(strQuery);
					// if(rs.next())
					// {
					// strAppName=correctNull(rs.getString("appname"));
					// }
					// }
					hshRecord.put("strAppName", strAppName);
				}
				if (correctNull((String) hshValues.get("hidsaral")).equals(
						"saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditreportnamesinwardwise^"
									+ strinwardno + "^" + strslno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport^"
							+ strAppno + "^" + AppType);// c1234
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						hshRecord.put("strAppName", correctNull(rs
								.getString("cr_name")));
					} else {
						hshRecord.put("strAppName", strAppName);
					}

					hshRecord.put("cr_fatname", correctNull(rs
							.getString("CR_FatName")));
					hshRecord.put("cr_offadd", correctNull(rs
							.getString("CR_Offadd")));
					hshRecord.put("cr_offtelno", correctNull(rs
							.getString("CR_OffTelno")));
					hshRecord.put("cr_resadd", correctNull(rs
							.getString("CR_Resadd")));
					hshRecord.put("cr_restelno", correctNull(rs
							.getString("CR_ResTelno")));
					hshRecord.put("cr_permadd", correctNull(rs
							.getString("CR_Permadd")));
					hshRecord.put("cr_permtelno", correctNull(rs
							.getString("CR_PermTelno")));

					hshRecord.put("CR_Minor", correctNull(rs
							.getString("CR_MINORTYPE")));
					hshRecord.put("CR_Agri", correctNull(rs
							.getString("CR_AGRITYPE")));
					hshRecord.put("cr_constitution", correctNull(rs
							.getString("constitution")));
					hshRecord.put("cr_established", correctNull(rs
							.getString("cr_established")));
					hshRecord.put("cr_sideline", correctNull(rs
							.getString("cr_sideline")));
					hshRecord.put("cr_mainbussiness", correctNull(rs
							.getString("cr_mainbussiness")));
				}
			}

			// hshRecord.put("strOrgName",correctNull((String)hshValues.get("strOrgName")));

			if (strAction.equalsIgnoreCase("Print")) {
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("credittotmeansbyinwardno^"
									+ strinwardno + "^" + strslno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport2^"
							+ strAppno + "^" + AppType);// a1994
				}
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {

					hshRecord.put("CR_Gurantee", correctNull(rs
							.getString("CR_Gurantee")));
					hshRecord.put("CR_LIAB_Partner", correctNull(rs
							.getString("CR_LIAB_Partner")));
					hshRecord.put("CR_Business_ability", correctNull(rs
							.getString("CR_Business_ability")));
					hshRecord.put("CR_Business_Conducted", correctNull(rs
							.getString("CR_Business_Conducted")));
					hshRecord.put("CR_Business_Reputation", correctNull(rs
							.getString("CR_Business_Reputation")));
					hshRecord.put("CR_Business_Condition", correctNull(rs
							.getString("CR_Business_Condition")));
					hshRecord.put("CR_DEALINGS_BANK", correctNull(rs
							.getString("CR_DEALINGS_BANK")));
					hshRecord.put("CR_SECURITIES_CHARGED", correctNull(rs
							.getString("CR_SECURITIES_CHARGED")));
					hshRecord.put("CR_REPORT_ON_MEANS", correctNull(rs
							.getString("CR_REPORT_ON_MEANS")));
					hshRecord.put("CR_DATE", correctNull(rs
							.getString("CR_DATE")));
					hshRecord.put("CR_Total_MEANS", correctNull(rs
							.getString("CR_Total_MEANS")));
					hshRecord.put("CR_Investigator", rs
							.getString("CR_CRDINVESTIGATOR"));
					hshRecord.put("CR_Brmanager", rs
							.getString("CR_BRANCHMANAGER"));
					hshRecord.put("CR_meansason", rs.getString("cr_meansason"));
				}
				hshRecord.put("strAppType", AppType);

				if (rs != null) {
					rs.close();
				}
				strAssetType = "M";
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strinwardno + "^" + strslno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + AppType + "^" + strAssetType);// a1994
				}
				rs = DBUtils.executeQuery(strQuery);

				while (rs.next()) {
					strMovdesc[i] = correctNull(rs.getString("CR_DESCRIPTION"));
					strMovvalue[i] = correctNull(rs.getString("CR_VALUE"));
					i = i + 1;
				}

				if (rs != null) {
					rs.close();
				}
				i = 0;
				strAssetType = "I";
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strinwardno + "^" + strslno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + AppType + "^" + strAssetType);// a1994
				}
				rs = DBUtils.executeQuery(strQuery);

				while (rs.next()) {
					strImmovdesc[i] = correctNull(rs
							.getString("CR_DESCRIPTION"));
					strImmovvalue[i] = correctNull(rs.getString("CR_VALUE"));
					i = i + 1;
				}

				hshRecord.put("CR_MOV_DESCRIPTION", strMovdesc);
				hshRecord.put("CR_MOV_VALUE", strMovvalue);
				hshRecord.put("CR_IMMOV_DESCRIPTION", strImmovdesc);
				hshRecord.put("CR_IMMOV_VALUE", strImmovvalue);

				if (rs != null) {
					rs.close();
				}
				strAssetType = "MT";
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strinwardno + "^" + strslno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + AppType + "^" + strAssetType);// c1234
				}
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("CR_MOV_TOTAL", rs.getString("CR_VALUE"));
				} else {
					hshRecord.put("CR_MOV_TOTAL", "0.00");
				}

				if (rs != null) {
					rs.close();
				}
				strAssetType = "IMT";
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditassetsbyinwardno^"
									+ strinwardno + "^" + strslno + "^"
									+ strAssetType);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport3^"
							+ strAppno + "^" + AppType + "^" + strAssetType);// c1234
				}
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("CR_IMMOV_TOTAL", rs.getString("CR_VALUE"));
				} else {
					hshRecord.put("CR_IMMOV_TOTAL", "0.00");
				}

			} else {
				hshRecord.put("CR_MOV_DESCRIPTION", strMovdesc);
				hshRecord.put("CR_MOV_VALUE", strMovvalue);
				hshRecord.put("CR_IMMOV_DESCRIPTION", strImmovdesc);
				hshRecord.put("CR_IMMOV_VALUE", strImmovdesc);
				hshRecord.put("CR_MOV_TOTAL", "0.00");
				hshRecord.put("CR_IMMOV_TOTAL", "0.00");
				hshRecord.put("CR_Total_MEANS", "0.00");
			}
			hshRecord.put("saral", correctNull((String) hshValues
					.get("hidsaral")));

		} catch (Exception e) {
			throw new EJBException(
					"Exception in getDueDiligence lapsReportBean"
							+ e.getMessage());

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in getCreditReportPrint"
								+ e.getMessage());
			}
		}
		return hshRecord;

	}

	public HashMap getCreditReportPrint2(HashMap hshValues)  {
		HashMap hshRecord = new HashMap();
		ResultSet rs = null;
		ResultSet rs1 = null;
		String strQuery = "";
		// String strQuery1="";
		String strAppno = "", strAction = "", strAppType = "";
		String strAppName = "", appType = "";
		String[] strMovdesc = new String[10];
		String[] strMovvalue = new String[10];
		String[] strImmovdesc = new String[10];
		String[] strImmovvalue = new String[10];
		ArrayList arrRow = null;
		ArrayList arrCol = null;
		ArrayList arrAppDetails = new ArrayList();
		ArrayList arrCorp = new ArrayList();
		int i = 0;

		String strComapp_id = correctNull((String) hshValues.get("comapp_id"));
		if (strComapp_id.equalsIgnoreCase("")) {
			strComapp_id = correctNull((String) hshValues.get("comappid"));
		}
		String strCategoryType = correctNull((String) hshValues
				.get("hidCategoryType"));

		strAppno = correctNull((String) hshValues.get("appno"));

		if (strAppno.equalsIgnoreCase("")) {
			strAppno = correctNull((String) hshValues.get("strappno"));
		}

		strAction = correctNull((String) hshValues.get("strAction"));

		String ApplicantName = correctNull((String) hshValues.get("app_name"));

		String AppType = correctNull((String) hshValues.get("AppType"));

		String CompanyName = "";
		String promotorName = "";
		strAppType = AppType;

		String strinwardno = correctNull((String) hshValues.get("inwardno"));
		String strslno = correctNull((String) hshValues.get("slno"));

		try {

			if (correctNull((String) hshValues.get("hidsaral")).equals("saral")) {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strinwardno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("orgname", correctNull(rs
							.getString("org_name")));
					hshRecord.put("orgadd1", correctNull(rs
							.getString("org_add1")));
					hshRecord.put("orgadd2", correctNull(rs
							.getString("org_add2")));
					hshRecord.put("orgcity", correctNull(rs
							.getString("org_city")));
					hshRecord.put("orgstate", correctNull(rs
							.getString("org_state")));
					hshRecord.put("orgzip",
							correctNull(rs.getString("org_zip")));
				}
			} else if (!(correctNull((String) hshValues.get("hidsaral"))
					.equals("saral"))) {
				// CORPORATE
				strQuery = SQLParser.getSqlQuery("corp_selname^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					CompanyName = correctNull(rs
							.getString("comapp_companyname"));
					hshRecord.put("comapp_companyname", rs
							.getString("comapp_companyname"));
					hshRecord.put("address", rs.getString("address"));
					hshRecord.put("city_name", rs.getString("city_name"));
					hshRecord.put("state_name", rs.getString("state_name"));
					hshRecord.put("comapp_crptpin", rs
							.getString("comapp_crptpin"));
					hshRecord.put("comapp_crptphone", rs
							.getString("comapp_crptphone"));
					hshRecord.put("comapp_ownership", rs
							.getString("comapp_ownership"));
					hshRecord.put("orgname", correctNull(rs
							.getString("org_name")));
					hshRecord.put("orgadd1", correctNull(rs
							.getString("org_add1")));
					hshRecord.put("orgadd2", correctNull(rs
							.getString("org_add2")));
					hshRecord.put("orgcity", correctNull(rs
							.getString("org_city")));
					hshRecord.put("orgstate", correctNull(rs
							.getString("org_state")));
					hshRecord.put("orgzip",
							correctNull(rs.getString("org_zip")));

				}
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("corp_selbranch^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);

				arrCol = new ArrayList();

				while (rs.next()) {
					arrRow = new ArrayList();
					arrRow.add(correctNull(rs.getString("comapp_name")));
					arrRow.add(correctNull(rs.getString("comapp_add")));
					arrRow.add(correctNull(rs.getString("city_name")));
					arrRow.add(correctNull(rs.getString("state_name")));
					arrRow.add(correctNull(rs.getString("comapp_pincode")));
					arrRow.add(correctNull(rs.getString("comapp_phoneno")));
					arrCol.add(arrRow);

				}
				hshRecord.put("arrCol", arrCol);
			}
			if (rs != null) {
				rs.close();
			}
			if (rs1 != null) {
				rs1.close();
			}

			if (strCategoryType.equalsIgnoreCase("CORP")
					|| strCategoryType.equalsIgnoreCase("CORPORATE")
					&& AppType.equalsIgnoreCase("0")) {
				// changed by prashanth
				// ArrayList arrCor=null;
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditreportnamesinwardwise^"
									+ strinwardno + "^" + strslno);
				} else {
					strQuery = SQLParser.getSqlQuery("sel_corpcreditdetails^"
							+ strAppno + "^" + strAppType);
				}
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {

					hshRecord.put("cr_fatname", correctNull(rs
							.getString("cr_fatname")));
					hshRecord.put("cr_offadd", correctNull(rs
							.getString("cr_offadd")));
					hshRecord.put("cr_offtelno", correctNull(rs
							.getString("cr_offtelno")));
					hshRecord.put("cr_resadd", correctNull(rs
							.getString("cr_resadd")));
					hshRecord.put("cr_restelno", correctNull(rs
							.getString("cr_restelno")));
					hshRecord.put("cr_permadd", correctNull(rs
							.getString("cr_permadd")));
					hshRecord.put("cr_permtelno", correctNull(rs
							.getString("cr_permtelno")));

					String AppID = correctNull(rs.getString("CR_APPTYPE"));
					hshRecord.put("CR_Minor", correctNull(rs
							.getString("CR_MINORTYPE")));
					hshRecord.put("CR_Agri", correctNull(rs
							.getString("CR_AGRITYPE")));
					hshRecord.put("cr_constitution", correctNull(rs
							.getString("constitution")));
					hshRecord.put("cr_established", correctNull(rs
							.getString("cr_established")));
					hshRecord.put("cr_sideline", correctNull(rs
							.getString("cr_sideline")));
					hshRecord.put("cr_mainbussiness", correctNull(rs
							.getString("cr_mainbussiness")));
					if (!(correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral"))) {
						if (!AppID.equalsIgnoreCase("0")) {
							strQuery = SQLParser
									.getSqlQuery("sel_corpromoterdetails^"
											+ strAppno + "^" + AppID);
							rs1 = DBUtils.executeQuery(strQuery);
							if (rs1.next()) {
								promotorName = correctNull((String) rs1
										.getString("com_compdtname"));
							}

							// arrCor.add(promotorName); //changed by prashanth
							hshRecord.put("strAppName", promotorName);
						} else {
							// arrCor.add(CompanyName); //changed by prashanth
							hshRecord.put("strAppName", CompanyName);
						}

						// arrCorp.add(arrCor); //changed by prashanth
					} else {
						hshRecord.put("strAppName", correctNull(rs
								.getString("cr_name")));
					}
				}
				hshRecord.put("arrCorp", arrCorp);
			} else {
				if (!(correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral"))) {
					strQuery = SQLParser.getSqlQuery("sel_corpromoterdetails^"
							+ strAppno + "^" + strAppType);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						promotorName = correctNull((String) rs1
								.getString("com_compdtname"));
					}
				}
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("selcreditreportnamesinwardwise^"
									+ strinwardno + "^" + strslno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport^"
							+ strAppno + "^" + strAppType);
				}

				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					if (correctNull((String) hshValues.get("hidsaral"))
							.equalsIgnoreCase("saral")) {
						hshRecord.put("strAppName", correctNull(rs
								.getString("cr_name")));
					} else {
						hshRecord.put("strAppName", promotorName);
					}
					hshRecord.put("cr_fatname", correctNull(rs
							.getString("cr_fatname")));
					hshRecord.put("cr_offadd", correctNull(rs
							.getString("cr_offadd")));
					hshRecord.put("cr_offtelno", correctNull(rs
							.getString("cr_offtelno")));
					hshRecord.put("cr_resadd", correctNull(rs
							.getString("cr_resadd")));
					hshRecord.put("cr_restelno", correctNull(rs
							.getString("cr_restelno")));
					hshRecord.put("cr_permadd", correctNull(rs
							.getString("cr_permadd")));
					hshRecord.put("cr_permtelno", correctNull(rs
							.getString("cr_permtelno")));
					hshRecord.put("CR_Minor", correctNull(rs
							.getString("CR_MINORTYPE")));
					hshRecord.put("CR_Agri", correctNull(rs
							.getString("CR_AGRITYPE")));
					hshRecord.put("cr_constitution", correctNull(rs
							.getString("constitution")));
					hshRecord.put("cr_established", correctNull(rs
							.getString("cr_established")));
					hshRecord.put("cr_sideline", correctNull(rs
							.getString("cr_sideline")));
					hshRecord.put("cr_mainbussiness", correctNull(rs
							.getString("cr_mainbussiness")));
				}
			}

			hshRecord.put("arrAppDetails", arrAppDetails);
			hshRecord.put("strOrgName", correctNull((String) hshValues
					.get("strOrgName")));

			// hi
			if (strAction.equalsIgnoreCase("Print")) {
				strAppType = correctNull((String) hshValues.get("AppType"));
				appType = strAppType;

				if (rs != null) {
					rs.close();
				}

				// CORPORATE
				if (strCategoryType.equalsIgnoreCase("Corporate")) {
					if (appType.equalsIgnoreCase("0")) {
						strAppName = ApplicantName;
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_corpromoterdetails^"
										+ strAppno + "^" + appType);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							strAppName = correctNull(rs
									.getString("com_compdtname"));
						}
					}
					hshRecord.put("strAppName", strAppName);
				}
				if (rs != null) {
					rs.close();
				}

				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("credittotmeansbyinwardno^"
									+ strinwardno + "^" + strslno);
					strAppType = strslno;
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreport2^"
							+ strAppno + "^" + strAppType);
				}

				rs = DBUtils.executeQuery(strQuery);

				if (rs.next()) {
					hshRecord.put("strAppType", strAppType);
					hshRecord.put("CR_Gurantee", correctNull(rs
							.getString("CR_Gurantee")));
					hshRecord.put("CR_LIAB_Partner", correctNull(rs
							.getString("CR_LIAB_Partner")));
					hshRecord.put("CR_Business_ability", correctNull(rs
							.getString("CR_Business_ability")));
					hshRecord.put("CR_Business_Conducted", correctNull(rs
							.getString("CR_Business_Conducted")));
					hshRecord.put("CR_Business_Reputation", correctNull(rs
							.getString("CR_Business_Reputation")));
					hshRecord.put("CR_Business_Condition", correctNull(rs
							.getString("CR_Business_Condition")));
					hshRecord.put("CR_DEALINGS_BANK", correctNull(rs
							.getString("CR_DEALINGS_BANK")));
					hshRecord.put("CR_SECURITIES_CHARGED", correctNull(rs
							.getString("CR_SECURITIES_CHARGED")));
					hshRecord.put("CR_REPORT_ON_MEANS", correctNull(rs
							.getString("CR_REPORT_ON_MEANS")));
					hshRecord.put("CR_DATE", correctNull(rs
							.getString("CR_DATE")));
					hshRecord.put("CR_Total_MEANS", correctNull(rs
							.getString("CR_Total_MEANS")));
					hshRecord.put("CR_Investigator", rs
							.getString("CR_CRDINVESTIGATOR"));
					hshRecord.put("CR_Brmanager", rs
							.getString("CR_BRANCHMANAGER"));
					hshRecord.put("CR_meansason", rs.getString("cr_meansason"));
				}
				if (rs != null) {
					rs.close();
				}

				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser.getSqlQuery("selcreditasset_inwardno^"
							+ strinwardno + "^" + strslno);
				} else {
					strQuery = SQLParser.getSqlQuery("selcreditreportassets^"
							+ strAppno + "^" + strAppType);
				}

				rs = DBUtils.executeQuery(strQuery);
				int j = 0;
				while (rs.next()) {
					if (correctNull(rs.getString("CR_ASSETTYPE")).equals("M")) {
						strMovdesc[i] = correctNull(rs
								.getString("CR_DESCRIPTION"));
						strMovvalue[i] = correctNull(rs.getString("CR_VALUE"));
						i = i + 1;
					} else if (correctNull(rs.getString("CR_ASSETTYPE"))
							.equals("I")) {
						strImmovdesc[j] = correctNull(rs
								.getString("CR_DESCRIPTION"));
						strImmovvalue[j] = correctNull(rs.getString("CR_VALUE"));
						j = j + 1;
					} else if (correctNull(rs.getString("CR_ASSETTYPE"))
							.equals("MT")) {
						hshRecord.put("CR_MOV_TOTAL", rs.getString("CR_VALUE"));
					} else if (correctNull(rs.getString("CR_ASSETTYPE"))
							.equals("IMT")) {
						hshRecord.put("CR_IMMOV_TOTAL", rs
								.getString("CR_VALUE"));
					}

				}

				hshRecord.put("CR_MOV_DESCRIPTION", strMovdesc);
				hshRecord.put("CR_MOV_VALUE", strMovvalue);
				hshRecord.put("CR_IMMOV_DESCRIPTION", strImmovdesc);
				hshRecord.put("CR_IMMOV_VALUE", strImmovvalue);
			} else {
				hshRecord.put("CR_MOV_DESCRIPTION", strMovdesc);
				hshRecord.put("CR_MOV_VALUE", strMovvalue);
				hshRecord.put("CR_IMMOV_DESCRIPTION", strImmovdesc);
				hshRecord.put("CR_IMMOV_VALUE", strImmovdesc);
				hshRecord.put("CR_MOV_TOTAL", "0.00");
				hshRecord.put("CR_IMMOV_TOTAL", "0.00");
				hshRecord.put("CR_Total_MEANS", "0.00");
			}
			hshRecord.put("saral", correctNull((String) hshValues
					.get("hidsaral")));
			hshRecord.put("appname", correctNull((String) hshValues
					.get("appname")));
			hshRecord.put("strAppType", strAppType);
		} catch (Exception e) {
			throw new EJBException(
					"Exception in getDueDiligence lapsReportBean"
							+ e.getMessage());

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in getCreditReportPrint"
								+ e.getMessage());
			}
		}
		return hshRecord;

	}

	public HashMap getCreditreportforRetail(HashMap hshValues)
			 {
		HashMap hshRecord = new HashMap();
		ResultSet rs = null;
		String strQuery = "";
		String strAppno = "";
		String strAction = "";
		String strAppType = "S";
		// String strComapp_id="";
		String strCategoryType = "";
		String strAppid = "";
		String hidappid = "";
		String strSaral = "";
		String strApporglevel = "";
		// int intCount=0;

		try {
			strCategoryType = correctNull((String) hshValues
					.get("hidCategoryType"));

			hidappid = correctNull((String) hshValues.get("hid_appid"));
			if (!hidappid.equalsIgnoreCase("")
					&& !hidappid.equalsIgnoreCase("S")) {
				if (strCategoryType.equalsIgnoreCase("OPS")) {
					strAppid = hidappid;
				} else {
					strAppid = hidappid.substring(1);
				}
				strAppType = hidappid;
			}

			strAppno = correctNull((String) hshValues.get("appno"));

			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("strappno"));
			}
			strSaral = correctNull((String) hshValues.get("hidsaral"));
			strApporglevel = correctNull((String) hshValues.get("applevel"));
			/*
			 * strComapp_id=correctNull((String)hshValues.get("comapp_id"));
			 * if(strComapp_id.equalsIgnoreCase("")) {
			 * strComapp_id=correctNull((String)hshValues.get("comappid")); }
			 * if(strComapp_id.equalsIgnoreCase("")) {
			 * strComapp_id=correctNull((String)hshValues.get("sel_name")); }
			 */

			strAction = correctNull((String) hshValues.get("hidAction"));

			if (strSaral.equalsIgnoreCase("Saral")
					&& (strAction.equalsIgnoreCase("I") || strAction
							.equalsIgnoreCase("M"))) {
				String strinwardno = correctNull((String) hshValues
						.get("inwardno"));
				String strslno = correctNull((String) hshValues.get("hid_slno"));
				if (strslno.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("selmaxslnoinwardwise^"
							+ strinwardno);
					rs = DBUtils.executeQuery(strQuery);
					strQuery = "";
					if (rs.next()) {
						strslno = correctNull(rs.getString("slno"));
					}
				}
				strQuery = SQLParser
						.getSqlQuery("selcreditreportnamesinwardwise^"
								+ strinwardno + "^" + strslno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
			} else if (!strSaral.equalsIgnoreCase("Saral")) {
				strQuery = SQLParser.getSqlQuery("selcreditreport^" + strAppno
						+ "^" + strAppType);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
			}

			if (rs != null && rs.next()) {
				hshRecord.put("CR_MAINBUSSINESS", rs
						.getString("cr_mainbussiness"));
				hshRecord.put("CR_SIDELINE", rs.getString("cr_sideline"));
				hshRecord.put("CR_CONSTITUTION", rs
						.getString("cr_constitution"));
				hshRecord.put("CR_ESTABLISHED", rs.getString("cr_established"));
				hshRecord.put("CR_Minor", correctNull(rs
						.getString("CR_MINORTYPE")));
				hshRecord.put("CR_Agri", correctNull(rs
						.getString("CR_AGRITYPE")));
				hshRecord.put("CR_FatName", correctNull(rs
						.getString("CR_FatName")));
				hshRecord.put("CR_Offadd", correctNull(rs
						.getString("CR_Offadd")));
				hshRecord.put("CR_OffTelno", correctNull(rs
						.getString("CR_OffTelno")));
				hshRecord.put("CR_Resadd", correctNull(rs
						.getString("CR_Resadd")));
				hshRecord.put("CR_ResTelno", correctNull(rs
						.getString("CR_ResTelno")));
				hshRecord.put("CR_Permadd", correctNull(rs
						.getString("CR_Permadd")));
				hshRecord.put("CR_PermTelno", correctNull(rs
						.getString("CR_PermTelno")));
				hshRecord.put("strAppType", strAppType);
				hshRecord.put("CR_INWARDNO", correctNull(rs
						.getString("cr_inwardno")));
				hshRecord.put("CR_SLNO", correctNull(rs.getString("cr_slno")));
				hshRecord.put("CR_NAME", correctNull(rs.getString("CR_NAME")));
				if (strApporglevel.equals("S")) {
					hshRecord.put("attachdetach", "detach");
				}
				hshRecord.put("recordflag", "Y");
			} else if (!strSaral.equalsIgnoreCase("Saral")) {
				hshRecord.put("strAppType", strAppType);

				if (strApporglevel.equals("S")) {
					hshRecord.put("attachdetach", "attach");
				} else if (!strAppid.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("sel_applicantdetails^"
							+ strAppid);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("CR_FatName", correctNull(rs
								.getString("perapp_fatname")));
						hshRecord
								.put("CR_Offadd", correctNull(rs
										.getString("peremp_address1"))
										+ " "
										+ correctNull(rs
												.getString("peremp_address2"))
										+ " "
										+ correctNull(rs
												.getString("peremp_address3"))
										+ " "
										+ correctNull(rs
												.getString("peremp_city"))
										+ " "
										+ correctNull(rs
												.getString("peremp_state"))
										+ " "
										+ correctNull(rs
												.getString("peremp_zip")));
						hshRecord.put("CR_OffTelno", correctNull(rs
								.getString("peremp_phone")));
						hshRecord
								.put("CR_Resadd", correctNull(rs
										.getString("perapp_address1"))
										+ " "
										+ correctNull(rs
												.getString("perapp_address2"))
										+ " "
										+ correctNull(rs
												.getString("perapp_address3"))
										+ " "
										+ correctNull(rs
												.getString("perapp_cityname"))
										+ " "
										+ correctNull(rs
												.getString("perapp_statename"))
										+ " "
										+ correctNull(rs
												.getString("perapp_zip")));
						hshRecord.put("CR_ResTelno", correctNull(rs
								.getString("perapp_phone")));
						hshRecord.put("CR_Permadd", correctNull(rs
								.getString("perapp_permadd1"))
								+ " "
								+ correctNull(rs.getString("perapp_permadd2"))
								+ " "
								+ correctNull(rs.getString("perapp_permadd3"))
								+ " "
								+ correctNull(rs
										.getString("perapp_permcityname"))
								+ " "
								+ correctNull(rs
										.getString("perapp_permstatename"))
								+ " "
								+ correctNull(rs.getString("perapp_permzip")));
						hshRecord.put("CR_PermTelno", correctNull(rs
								.getString("perapp_permphone")));
						hshRecord.put("CR_CONSTITUTION", rs
								.getString("perapp_constitution"));
						hshRecord.put("constitution", rs
								.getString("constitution"));
					}
				}
				hshRecord.put("recordflag", "N");
			} else {
				hshRecord.put("recordflag", "N");
			}

			if ((correctNull((String) hshValues.get("strOrgLevel")).equals("D"))
					&& correctNull((String) hshValues.get("strIsSaral"))
							.equals("Y")) {
				strQuery = SQLParser
						.getSqlQuery("selinwardappdata^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("inwardstatus", correctNull(rs
							.getString("inward_brstatus")));
					hshRecord.put("inward_appliedfor", correctNull(rs
							.getString("inward_appliedfor")));
				}
			}
			/*
			 * strQuery=SQLParser.getSqlQuery("selcreditcount^"+strAppno+"^"+hidCoappid
			 * );
			 * 
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * intCount=rs.getInt("creditcount"); }
			 * 
			 * hshRecord.put("intCount",Integer.toString(intCount));
			 * if(!strAppid.equalsIgnoreCase("") && intCount!=1) {
			 * strQuery=SQLParser.getSqlQuery("sel_applicantdetails^"+strAppid);
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * hshRecord.put("perapp_fatname"
			 * ,correctNull(rs.getString("perapp_fatname")));
			 * hshRecord.put("perapp_permadd1"
			 * ,correctNull(rs.getString("perapp_permadd1")));
			 * hshRecord.put("perapp_permadd2"
			 * ,correctNull(rs.getString("perapp_permadd2")));
			 * hshRecord.put("perapp_permadd3"
			 * ,correctNull(rs.getString("perapp_permadd3")));
			 * hshRecord.put("perapp_permcity"
			 * ,correctNull(rs.getString("perapp_permcity")));
			 * hshRecord.put("perapp_permstate"
			 * ,correctNull(rs.getString("perapp_permstate")));
			 * hshRecord.put("perapp_permzip"
			 * ,correctNull(rs.getString("perapp_permzip")));
			 * hshRecord.put("peremp_address1"
			 * ,correctNull(rs.getString("peremp_address1")));
			 * hshRecord.put("peremp_address2"
			 * ,correctNull(rs.getString("peremp_address2")));
			 * hshRecord.put("peremp_address3"
			 * ,correctNull(rs.getString("peremp_address3")));
			 * hshRecord.put("peremp_city"
			 * ,correctNull(rs.getString("peremp_city")));
			 * hshRecord.put("peremp_zip"
			 * ,correctNull(rs.getString("peremp_zip")));
			 * hshRecord.put("peremp_state"
			 * ,correctNull(rs.getString("peremp_state")));
			 * hshRecord.put("peremp_phone"
			 * ,correctNull(rs.getString("peremp_phone")));
			 * hshRecord.put("perapp_permphone"
			 * ,correctNull(rs.getString("perapp_permphone")));
			 * hshRecord.put("city_name"
			 * ,correctNull(rs.getString("perapp_permcityname")));
			 * hshRecord.put(
			 * "state_name",correctNull(rs.getString("perapp_permstatename")));
			 * hshRecord
			 * .put("perapp_address1",correctNull(rs.getString("perapp_address1"
			 * )));hshRecord.put("perapp_address2",correctNull(rs.getString(
			 * "perapp_address2")));
			 * hshRecord.put("perapp_address3",correctNull(
			 * rs.getString("perapp_address3")));
			 * hshRecord.put("perapp_city",correctNull
			 * (rs.getString("perapp_city")));
			 * hshRecord.put("perapp_state",correctNull
			 * (rs.getString("perapp_state")));
			 * hshRecord.put("perapp_zip1",correctNull
			 * (rs.getString("perapp_zip")));
			 * hshRecord.put("city_name1",correctNull
			 * (rs.getString("perapp_cityname")));
			 * hshRecord.put("state_name1",correctNull
			 * (rs.getString("perapp_statename"))); } }
			 * if(strCategoryType.equalsIgnoreCase("OPS")) {
			 * strQuery=SQLParser.getSqlQuery
			 * ("sel_creditname2^"+strAppno+"^"+strAppid);
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * hshRecord.put("perapp_fname",rs.getString("perapp_fname"));
			 * hshRecord.put("address",rs.getString("address"));
			 * hshRecord.put("perapp_zip",rs.getString("perapp_zip"));
			 * hshRecord.put("perapp_phone",rs.getString("perapp_phone"));
			 * hshRecord.put("city_name2",rs.getString("city_name"));
			 * hshRecord.put("state_name2",rs.getString("state_name"));
			 * hshRecord
			 * .put("perinc_selfincometype",rs.getString("constitution"));
			 * hshRecord.put("orgname",rs.getString("org_name")); } } else
			 * if(!apptype.equalsIgnoreCase("")) {
			 * strQuery=SQLParser.getSqlQuery
			 * ("sel_creditname1^"+strAppno+"^"+apptype);
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * hshRecord.put("perapp_fname",rs.getString("perapp_fname"));
			 * hshRecord.put("address",rs.getString("address"));
			 * hshRecord.put("perapp_zip",rs.getString("perapp_zip"));
			 * hshRecord.put("perapp_phone",rs.getString("perapp_phone"));
			 * hshRecord.put("city_name2",rs.getString("city_name"));
			 * hshRecord.put("state_name2",rs.getString("state_name"));
			 * hshRecord.put("CR_CONSTITUTION",rs.getString("constitution"));
			 * hshRecord.put("orgname",rs.getString("org_name")); } }
			 * if(rs!=null) { rs.close(); } if(strAction.equalsIgnoreCase("Get")
			 * || strAction.equalsIgnoreCase("U") ||
			 * strAction.equalsIgnoreCase("D")) {
			 * strAppType=correctNull((String)hshValues.get("hid_appid"));
			 * if(strAppType.equalsIgnoreCase("")) { strAppType="S"; }
			 * if(rs!=null) { rs.close(); }
			 * strQuery=SQLParser.getSqlQuery("selcreditreport^"
			 * +strAppno+"^"+strAppType); rs=DBUtils.executeQuery(strQuery);
			 * 
			 * if(rs.next()) { } else { hshRecord.put("strAppType",strAppType);
			 * hshRecord.put("CR_NAME",""); hshRecord.put("CR_FatName","");
			 * hshRecord.put("CR_Offadd",""); hshRecord.put("CR_OffTelno","");
			 * hshRecord.put("CR_Resadd",""); hshRecord.put("CR_ResTelno","");
			 * hshRecord.put("CR_Permadd",""); hshRecord.put("CR_PermTelno","");
			 * hshRecord.put("CR_Minor",""); hshRecord.put("CR_Agri","");
			 * hshRecord.put("CR_MAINBUSSINESS","");
			 * hshRecord.put("CR_SIDELINE","");
			 * //hshRecord.put("CR_CONSTITUTION","");
			 * hshRecord.put("CR_ESTABLISHED","");
			 * hshRecord.put("attachdetach","attach"); } }
			 */
			/*
			 * else { hshRecord.put("strAppType",strAppType);
			 * hshRecord.put("CR_NAME",""); hshRecord.put("CR_FatName","");
			 * hshRecord.put("CR_Offadd",""); hshRecord.put("CR_OffTelno","");
			 * hshRecord.put("CR_Resadd",""); hshRecord.put("CR_ResTelno","");
			 * hshRecord.put("CR_Permadd",""); hshRecord.put("CR_PermTelno","");
			 * }
			 */
			// hshRecord.put("appno",strAppno);
			// String comapp_compname1=correctNull((String)
			// hshValues.get("comapp_compname"));
			// hshRecord.put("comapp_compname1",comapp_compname1);
			// hshRecord.put("strOrgName",correctNull((String)hshValues.get("strOrgName")));
		} catch (Exception e) {
			throw new EJBException(
					"Exception in getCreditreportforRetail lapsReportBean"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Exception while closing connection in getCreditReportPrint"
								+ e.getMessage());
			}
		}
		return hshRecord;
	}

	public void updateOPSInspectionReport(HashMap hshValues)
			 {

		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();

		ArrayList arrValues = new ArrayList();
		// HashMap hshResult=new HashMap();

		ResultSet rs = null;
		// String strQuery ="";
		String strAppno = "";
		String strAction = "";

		strAppno = correctNull((String) hshValues.get("appno"));
		if (strAppno.equalsIgnoreCase("")) {
			strAppno = correctNull((String) hshValues.get("strappno"));
		}

		strAction = correctNull((String) hshValues.get("hidAction"));

		String[] strpurpose = null;
		String[] strtype = null;
		String[] stramount = null;
		strpurpose = (String[]) hshValues.get("txt_facpurpose");
		strtype = (String[]) hshValues.get("txt_factype");
		stramount = (String[]) hshValues.get("txt_facamount");

		try {
			StringBuilder sbolddata = new StringBuilder();
			if (strAction.equalsIgnoreCase("insert")) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				hshQueryValues.put("size", "1");
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"delops_inspectionreportbyinwardno");
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "delops_inspectionreport");
					arrValues.add(strAppno);
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				arrValues = new ArrayList();
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				hshQueryValues.put("size", "1");
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"delops_inspectionfacilitybyinwardno");
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "delops_inspectionfacility");
					arrValues.add(strAppno);
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				hshQuery = new HashMap();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "insops_inspectionreport");
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshValues
						.get("txt_visitdate")));// visit
				arrValues.add(correctNull((String) hshValues
						.get("txt_distance")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_purpose")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_loanrequested")));
				arrValues.add(correctNull((String) hshValues
						.get("sel_premises")));
				arrValues.add(correctNull((String) hshValues
						.get("sel_ownership")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_businessaddr")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_primarysecurity")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_collsecurity")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_presentbanker")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_ourname")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_othername")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_ourtype")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_othertype")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_ouramount")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_otheramount")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_ourdate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_otherdate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_ourbalance")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_otherbalance")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_ouroverdue")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_otheroverdue")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_namepersoncond")));
				arrValues
						.add(correctNull((String) hshValues.get("sel_related")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_sinceappli")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_sinceaddress")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_opinion")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_propnamecond")));
				arrValues.add(correctNull((String) hshValues.get("txt_neig")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_guarantor")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_location")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_observation")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_north")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_south")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_east")));
				arrValues.add(correctNull((String) hshValues
						.get("textarea_west")));
				arrValues.add(correctNull((String) hshValues.get("inwardno")));
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
				for (int j = 0; j < strpurpose.length; j++) {
					if (!strpurpose[j].equals("")) {
						hshQueryValues = new HashMap();
						hshQueryValues.put("size", "1");
						arrValues = new ArrayList();
						hshQuery = new HashMap();
						arrValues.add(strAppno);
						arrValues.add(Integer.toString(j + 1));
						arrValues.add(strpurpose[j]);
						arrValues.add(strtype[j]);
						arrValues.add(stramount[j]);
						arrValues.add(correctNull((String) hshValues
								.get("inwardno")));
						hshQuery.put("strQueryId", "insops_inspectionfacility");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}
			}
			if (strAction.equalsIgnoreCase("delete")) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"delops_inspectionreportbyinwardno");
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "delops_inspectionreport");
					arrValues.add(strAppno);
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				if (correctNull((String) hshValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"delops_inspectionfacilitybyinwardno");
					arrValues.add(correctNull((String) hshValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "delops_inspectionfacility");
					arrValues.add(strAppno);
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
			// Start of AuditTrial
			StringBuilder sbAt = new StringBuilder();
			if (strAction.equalsIgnoreCase("insert")) {
				sbAt.append("Inspection Report ::").append("");
				sbAt.append(" ~Date of visit = ").append(
						correctNull((String) hshValues.get("txt_visitdate")));
				sbAt.append(" ~Distance from branch = ").append(
						correctNull((String) hshValues.get("txt_distance")));
				sbAt.append(" ~Purpose of Loan = ").append(
						correctNull((String) hshValues.get("txt_purpose")));
				sbAt.append(" ~Loan Amount Requested = ")
						.append(
								correctNull((String) hshValues
										.get("txt_loanrequested")));
				sbAt
						.append(
								" ~Facility / ies Proposed to be availed from Bank")
						.append("");
				for (int j = 0; j < strpurpose.length; j++) {
					if (!strpurpose[j].equals("")) {
						sbAt.append(" ~Purpose = ").append(strpurpose[j]);
						sbAt.append(" ~Type of Facility = ").append(strtype[j]);
						sbAt.append(" ~Loan amount requested(Rs) = ").append(
								stramount[j]);
					}
				}
				if (correctNull((String) hshValues.get("sel_premises"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~Business premises is = ").append("Owned");
				} else if (correctNull((String) hshValues.get("sel_premises"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~Business premises is = ").append("Leased");
				} else if (correctNull((String) hshValues.get("sel_premises"))
						.equalsIgnoreCase("3")) {
					sbAt.append(" ~Business premises is  = ").append("Rented");
				} else if (correctNull((String) hshValues.get("sel_premises"))
						.equalsIgnoreCase("4")) {
					sbAt.append(" ~Business premises is  = ").append("Others");
				}

				if (correctNull((String) hshValues.get("sel_ownership"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~Nature of ownership = ").append("Free hold");
				} else if (correctNull((String) hshValues.get("sel_ownership"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~Nature of ownership = ")
							.append("Lease hold");
				} else if (correctNull((String) hshValues.get("sel_ownership"))
						.equalsIgnoreCase("3")) {
					sbAt.append(" ~Nature of ownership = ").append("Licence");
				} else if (correctNull((String) hshValues.get("sel_ownership"))
						.equalsIgnoreCase("4")) {
					sbAt.append(" ~Nature of ownership = ").append(
							"Undivided share");
				} else if (correctNull((String) hshValues.get("sel_ownership"))
						.equalsIgnoreCase("5")) {
					sbAt.append(" ~Nature of ownership = ").append(
							"Trust property");
				} else if (correctNull((String) hshValues.get("sel_ownership"))
						.equalsIgnoreCase("6")) {
					sbAt.append(" ~Nature of ownership = ").append(
							"Title only by possession");
				}
				sbAt.append(" ~Loan Outstanding With Other Bank 1").append(" ");
				sbAt.append(" ~Name of the Bank/Branch = ").append(
						correctNull((String) hshValues.get("txt_ourname")));
				sbAt.append(" ~Type of Loan = ").append(
						correctNull((String) hshValues.get("txt_ourtype")));
				sbAt.append(" ~Amount Sanctioned = Rs.").append(
						correctNull((String) hshValues.get("txt_ouramount")));
				sbAt.append(" ~Date of Loan: = ").append(
						correctNull((String) hshValues.get("txt_ourdate")));
				sbAt.append(" ~Balance outstanding = Rs.").append(
						correctNull((String) hshValues.get("txt_ourbalance")));
				sbAt.append(" ~Overdue if any = Rs.").append(
						correctNull((String) hshValues.get("txt_ouroverdue")));

				sbAt.append(" ~Loan Outstanding With Other Bank 2").append(" ");
				sbAt.append(" ~Name of the Bank/Branch = ").append(
						correctNull((String) hshValues.get("txt_othername")));
				sbAt.append(" ~Type of Loan = ").append(
						correctNull((String) hshValues.get("txt_othertype")));
				sbAt.append(" ~Amount Sanctioned = Rs.").append(
						correctNull((String) hshValues.get("txt_otheramount")));
				sbAt.append(" ~Date of Loan: = ").append(
						correctNull((String) hshValues.get("txt_otherdate")));
				sbAt.append(" ~Balance outstanding = Rs.")
						.append(
								correctNull((String) hshValues
										.get("txt_otherbalance")));
				sbAt.append(" ~Overdue if any = Rs.")
						.append(
								correctNull((String) hshValues
										.get("txt_otheroverdue")));
				sbAt.append(" ~Due Diligence").append(" ");
				if (correctNull((String) hshValues.get("sel_related"))
						.equalsIgnoreCase("1")) {
					sbAt.append(" ~Whether related to applicant? = ").append(
							"Yes");
				} else if (correctNull((String) hshValues.get("sel_related"))
						.equalsIgnoreCase("2")) {
					sbAt.append(" ~Whether related to applicant? = ").append(
							"No");
				}
				sbAt.append(" ~Since when he/she knows the applicant? = ")
						.append(
								correctNull((String) hshValues
										.get("txt_sinceappli")));
				sbAt
						.append(
								"~ Since when the applicant is staying at given address? = ")
						.append(
								correctNull((String) hshValues
										.get("txt_sinceaddress")));
				sbAt.append("~Name of the neighbour = ").append(
						correctNull((String) hshValues.get("txt_neig")));
			}
			if (!Helper.correctNull((String) hshValues.get("auditflag"))
					.equalsIgnoreCase("N")) {
				if (!strAction.equalsIgnoreCase("delete"))
					hshValues.put("hidAction", "Update");
			}
			if (correctNull((String) hshValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				AuditTrial.auditLog(hshValues, "299",
						correctNull((String) hshValues.get("inwardno")), sbAt
								.toString());
			} else {
				AuditTrial
						.auditLog(hshValues, "299", strAppno, sbAt.toString());
			}
			// End
		} catch (Exception e) {
			throw new EJBException("Error in Insert Data " + e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception cf) {
				throw new EJBException(
						"Error closing in updateInspectionReport"
								+ cf.getMessage());
			}
		}
	}

	public HashMap getOPSInspectionReport(HashMap hshValues)
			 {
		HashMap hshResult = new HashMap();
		ResultSet rs = null;
		String strQuery = "";
		String strAppno = "";
		String strInwardno = "";
		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = new ArrayList();
		String strRecordflag = "N";
		if (!correctNull((String) hshValues.get("hidsaral")).equalsIgnoreCase(
				"saral")) {
			strAppno = correctNull((String) hshValues.get("appno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("strappno"));
			}
		}
		String strOrgName = correctNull((String) hshValues.get("strOrgName"));
		try {
			strInwardno = correctNull((String) hshValues.get("inwardno"));
			if (correctNull((String) hshValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				strQuery = SQLParser
						.getSqlQuery("selops_inspectionreportbyinwardno^"
								+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("selops_inspectionreport^"
						+ strAppno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshResult.put("ins_dateofvisit", correctNull(rs
						.getString("ins_dateofvisit")));
				hshResult.put("ins_distance", correctNull(rs
						.getString("ins_distance")));
				hshResult.put("ins_purpose", correctNull(rs
						.getString("ins_purpose")));
				hshResult.put("ins_amtreqd", correctNull(rs
						.getString("ins_amtreqd")));
				hshResult.put("ins_businessper", correctNull(rs
						.getString("ins_businessper")));
				hshResult.put("ins_natureofbusiness", correctNull(rs
						.getString("ins_natureofbusiness")));
				hshResult.put("ins_businessaddr", correctNull(rs
						.getString("ins_businessaddr")));
				hshResult.put("ins_prisecurity", correctNull(rs
						.getString("ins_prisecurity")));
				hshResult.put("ins_collsecurity", correctNull(rs
						.getString("ins_collsecurity")));
				hshResult.put("ins_presentbanker", correctNull(rs
						.getString("ins_presentbanker")));
				hshResult.put("ins_ourbranchname", correctNull(rs
						.getString("ins_ourbranchname")));
				hshResult.put("ins_othrbankname", correctNull(rs
						.getString("ins_othrbankname")));
				hshResult.put("ins_ourloantype", correctNull(rs
						.getString("ins_ourloantype")));
				hshResult.put("ins_othrloantype", correctNull(rs
						.getString("ins_othrloantype")));
				hshResult.put("ins_ouramtsanc", correctNull(rs
						.getString("ins_ouramtsanc")));
				hshResult.put("ins_othramtsanc", correctNull(rs
						.getString("ins_othramtsanc")));
				hshResult.put("ins_ourloandate", correctNull(rs
						.getString("ins_ourloandate")));
				hshResult.put("ins_othrloandate", correctNull(rs
						.getString("ins_othrloandate")));
				hshResult.put("ins_ourbalos", correctNull(rs
						.getString("ins_ourbalos")));
				hshResult.put("ins_othrbalos", correctNull(rs
						.getString("ins_othrbalos")));
				hshResult.put("ins_ouroverdue", correctNull(rs
						.getString("ins_ouroverdue")));
				hshResult.put("ins_othroverdue", correctNull(rs
						.getString("ins_othroverdue")));
				hshResult.put("ins_kycpernameaddr", correctNull(rs
						.getString("ins_kycpernameaddr")));
				hshResult.put("ins_kycperrelated", correctNull(rs
						.getString("ins_kycperrelated")));
				hshResult.put("ins_kycpersincewhen", correctNull(rs
						.getString("ins_kycpersincewhen")));
				hshResult.put("ins_appstayinaddr", correctNull(rs
						.getString("ins_appstayinaddr")));
				hshResult.put("ins_opiniongathered", correctNull(Helper
						.CLOBToString((rs.getClob("ins_opiniongathered")))));
				hshResult.put("ins_proppernameaddr", correctNull(rs
						.getString("ins_proppernameaddr")));
				hshResult.put("ins_propneighbour", correctNull(rs
						.getString("ins_propneighbour")));
				hshResult.put("ins_propinpossession", correctNull(rs
						.getString("ins_propinpossession")));
				hshResult.put("ins_proplocation", correctNull(rs
						.getString("ins_proplocation")));
				hshResult.put("ins_officercomments", correctNull(Helper
						.CLOBToString((rs.getClob("ins_officercomments")))));
				hshResult.put("ins_landmarknorth", correctNull(rs
						.getString("ins_landmarknorth")));
				hshResult.put("ins_landmarksouth", correctNull(rs
						.getString("ins_landmarksouth")));
				hshResult.put("ins_landmarkeast", correctNull(rs
						.getString("ins_landmarkeast")));
				hshResult.put("ins_landmarkwest", correctNull(rs
						.getString("ins_landmarkwest")));
				hshResult.put("ins_inwardno", correctNull(rs
						.getString("ins_inwardno")));

				strRecordflag = "Y";
			} else {
				hshResult.put("audit_flag", "N");
			}
			hshResult.put("strAppno", strAppno);
			hshResult.put("strOrgName", strOrgName);
			if (correctNull((String) hshValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				strQuery = SQLParser
						.getSqlQuery("selops_inspectionfacilitybyinwardno^"
								+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("selops_inspectionfacility^"
						+ strAppno);
			}
			rs = DBUtils.executeQuery(strQuery);
			arrRow = new ArrayList();
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("ins_appno")));
				arrCol.add(correctNull(rs.getString("ins_sno")));
				arrCol.add(correctNull(rs.getString("ins_purpose")));
				arrCol.add(correctNull(rs.getString("ins_type")));
				arrCol.add(correctNull(rs.getString("ins_loanamount")));
				hshResult.put("ins_inwardno", correctNull(rs
						.getString("ins_inwardno")));
				arrRow.add(arrCol);
			}
			hshResult.put("arrRow", arrRow);
			strQuery = SQLParser.getSqlQuery("comfunsel4^" + strAppno + "^"
					+ "N");
			rs = DBUtils.executeQuery(strQuery);
			arrRow = new ArrayList();
			while (rs.next()) {
				hshResult
						.put("app_name", correctNull(rs.getString("app_name")));
			}
			if (rs != null) {
				rs.close();
			}
			if (strInwardno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selBranchCityName^"
						+ strAppno);
			} else {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strInwardno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshResult.put("orgname", correctNull(rs.getString("org_name")));
				hshResult.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshResult.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshResult.put("orgcity", correctNull(rs.getString("org_city")));
				hshResult.put("orgstate",
						correctNull(rs.getString("org_state")));
				hshResult.put("orgzip", correctNull(rs.getString("org_zip")));
			}

			hshResult.put("recordflag", strRecordflag);
		} catch (Exception ce) {
			throw new EJBException("Error in getBookdebitseligible-- "
					+ ce.toString());
		} finally {
			try {
				if (rs != null)
					rs.close();

			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshResult;
	}

	public HashMap getComInspectionReport(HashMap hshRequestValues)
			 {

		ResultSet rs = null;
		HashMap hshRecord = new HashMap();
		String strQuery = "";
		String strappno = correctNull((String) hshRequestValues.get("appno"));
		try {

			hshRecord = new HashMap();

			if (correctNull((String) hshRequestValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				String strInwardno = correctNull((String) hshRequestValues
						.get("inwardno"));
				strQuery = SQLParser.getSqlQuery("sel_comInspectionbyinwardno^"
						+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("sel_comInspectionReport^"
						+ strappno);
			}

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("visitdate", correctNull(rs
						.getString("visitdate")));
				hshRecord.put("visitname1", correctNull(rs
						.getString("visitname1")));
				hshRecord.put("visitdes1", correctNull(rs
						.getString("visitdes1")));
				hshRecord.put("contact",
						correctNull(rs.getString("visitname2")));
				hshRecord.put("distance",
						correctNull(rs.getString("visitdes2")));
				hshRecord.put("taken", correctNull(rs.getString("visitname3")));
				hshRecord.put("visitdes3", correctNull(rs
						.getString("visitdes3")));
				hshRecord.put("north", correctNull(rs.getString("north")));
				hshRecord.put("east", correctNull(rs.getString("east")));
				hshRecord.put("west", correctNull(rs.getString("west")));
				hshRecord.put("south", correctNull(rs.getString("south")));
				hshRecord.put("suitability", correctNull(rs
						.getString("suitability")));
				hshRecord.put("primary_security", correctNull(rs
						.getString("primary_security")));
				hshRecord.put("coll_security", correctNull(rs
						.getString("coll_security")));
				hshRecord.put("present_status", correctNull(rs
						.getString("present_status")));
				hshRecord.put("availability", correctNull(rs
						.getString("availability")));
				hshRecord
						.put("licenses", correctNull(rs.getString("licenses")));
				hshRecord.put("operation", correctNull(rs
						.getString("operation")));
				hshRecord.put("borrower_name", correctNull(rs
						.getString("borrower_name")));
				hshRecord.put("proper_main", correctNull(rs
						.getString("proper_main")));
				hshRecord.put("credit_limit", correctNull(rs
						.getString("credit_limit")));
				hshRecord.put("confirmation", correctNull(rs
						.getString("confirmation")));
				hshRecord.put("other_features", correctNull(rs
						.getString("other_features")));
				hshRecord.put("san_inwardno", correctNull(rs
						.getString("san_inwardno")));
				hshRecord.put("dateofreport", correctNull(rs
						.getString("dateofreport")));

			} else {
				hshRecord.put("audit_flag", "N");
			}
			hshRecord.put("saral", correctNull((String) hshRequestValues
					.get("hidsaral")));
			if (rs != null)
				rs.close();

			if ((correctNull((String) hshRequestValues.get("strOrgLevel"))
					.equals("D"))
					&& correctNull((String) hshRequestValues.get("strIsSaral"))
							.equals("Y")) {
				strQuery = SQLParser
						.getSqlQuery("selinwardappdata^" + strappno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("inward_appliedfor", correctNull(rs
							.getString("inward_appliedfor")));
				}
			}
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;

	}

	public void updateComInspectionReport(HashMap hshRequestValues)
			 {

		HashMap hshQueryValues = null;
		HashMap hshQuery = null;

		ArrayList arrValues = null;
		String strAction = "";
		int intUpdatesize = 0;
		ResultSet rs = null;
		ResultSet rs1 = null;

		strAction = correctNull((String) hshRequestValues.get("hidAction"));
		String desc = "", strQuery = "", strAppName = "";
		String strAppno = correctNull((String) hshRequestValues.get("appno"));
		String strInwardno = correctNull((String) hshRequestValues
				.get("inwardno"));
		StringBuilder strOldAudit = new StringBuilder();
		try {
			if (strAction.equalsIgnoreCase("insert")) {
				hshRequestValues.put("hidAction", "Update");
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();

				intUpdatesize++;
				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId", "del_comInspectionbyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "del_comInspectionReport");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));

				}
				hshQuery.put("arrValues", arrValues);

				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);

				hshQuery = new HashMap();

				arrValues = new ArrayList();

				intUpdatesize++;

				arrValues.add(correctNull((String) hshRequestValues
						.get("appno")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_visitdate")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_name1")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_designation1")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_contact")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_distance")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_taken")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_designation3")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_north")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_east")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_west")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_south")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_suitability")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_primarysecurity")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_collsecurity")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_presentstatus")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_availability")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_licenses")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_operation")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("sel_borrowernamebord")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("sel_maintanance")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_credit_limit")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_duediligence")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_other_features")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_reportdate")));

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_comInspectionReport");

				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strQuery = SQLParser
							.getSqlQuery("sel_comInspectionReportbyInward^"
									+ strInwardno);
				} else {
					strQuery = SQLParser.getSqlQuery("sel_comInspectionReport^"
							+ strAppno);
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strOldAudit.append("~Date of visit = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("visitdate")));
					strOldAudit.append("~ Visited by = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("visitname1")));
					strOldAudit.append("~ Designation = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("visitdes1")));
					strOldAudit
							.append("~ Contact No. of the applicant or key person = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("visitname2")));
					strOldAudit.append("~ Distance from branch in Kms = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("visitdes2")));
					strOldAudit
							.append("~ Whether new connection or account to be taken-over = ");
					strOldAudit.append(Helper.correctNull((String) rs
							.getString("visitname3")));
					strOldAudit
							.append("~ Whether borrower's name board is displayed = ");
					if (Helper.correctNull(
							(String) rs.getString("borrower_name"))
							.equalsIgnoreCase("1")) {
						strOldAudit.append("Yes");
					} else if (Helper.correctNull(
							(String) rs.getString("borrower_name"))
							.equalsIgnoreCase("2")) {
						strOldAudit.append("No");
					} else {
						strOldAudit.append("");
					}
					strOldAudit
							.append("~ Proper maintenance of books of accounts = ");
					if (Helper
							.correctNull((String) rs.getString("proper_main"))
							.equalsIgnoreCase("1")) {
						strOldAudit.append("Yes");
					} else if (Helper.correctNull(
							(String) rs.getString("proper_main"))
							.equalsIgnoreCase("2")) {
						strOldAudit.append("No");
					} else {
						strOldAudit.append("");
					}
				}
			} else if (strAction.equalsIgnoreCase("delete")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();

				arrValues = new ArrayList();

				intUpdatesize++;

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId", "del_comInspectionbyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "del_comInspectionReport");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));

				}

				hshQuery.put("arrValues", arrValues);

				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}
			if (!Helper.correctNull((String) hshRequestValues.get("auditflag"))
					.equalsIgnoreCase("N")) {
				if (!strAction.equalsIgnoreCase("delete"))
					hshRequestValues.put("hidAction", "Update");
			}
			if (correctNull((String) hshRequestValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				AuditTrial.auditLog(hshRequestValues, "408", strInwardno,
						strOldAudit.toString());
			} else {
				AuditTrial.auditLog(hshRequestValues, "408", strAppno,
						strOldAudit.toString());
			}

		} catch (Exception e) {
			throw new EJBException("Connection Error in updateNpainterest"
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				log.error("error occured" + e1.toString());
			}
		}

	}

	public HashMap getComInspectionReportPrint(HashMap hshValues)
			 {

		HashMap hshRecord = new HashMap();
		String strQuery = "";
		ArrayList arrRow1 = new ArrayList();
		ArrayList arrCol1 = new ArrayList();
		ArrayList arrGuarantors = new ArrayList();
		ResultSet rs = null;
		ResultSet rs1 = null;
		try {
			String strappno = correctNull((String) hshValues.get("appno"));
			String comappid = correctNull((String) hshValues.get("comappid"));
			String strInwardno = correctNull((String) hshValues.get("inwardno"));
			hshRecord.put("org_name", correctNull((String) hshValues
					.get("strOrgName")));
			if (!(correctNull((String) hshValues.get("hidsaral"))
					.equals("saral"))) {
				// customer details
				strQuery = SQLParser.getSqlQuery("comappmastersel^" + comappid);
				rs = DBUtils.executeQuery(strQuery);
				String strCompanyName = "", strComapp_crptaddress1 = "", strComapp_crptaddress2 = "", strComapp_crptcity = "", strComapp_crptstate = "", strComapp_crptpin = "", strComapp_regpremises = "";
				// strPerSolid="";
				if (rs.next()) {
					strCompanyName = correctNull(rs
							.getString("comapp_companyname"));
					strComapp_crptaddress1 = correctNull(rs
							.getString("comapp_regadd1"));
					strComapp_crptaddress2 = correctNull(rs
							.getString("comapp_regadd2"));
					strComapp_crptcity = correctNull(rs
							.getString("comapp_regcity"));
					strComapp_crptstate = correctNull(rs
							.getString("comapp_regstate"));
					strComapp_crptpin = correctNull(rs
							.getString("comapp_regpin"));
					strComapp_regpremises = correctNull(rs
							.getString("comapp_regpremises"));
				}
				hshRecord.put("strPersonalAddress", strComapp_crptaddress1
						+ ", " + strComapp_crptaddress2 + ", "
						+ strComapp_crptcity + ", " + strComapp_crptstate
						+ " - " + strComapp_crptpin);
				hshRecord.put("strCompanyName", strCompanyName);
				hshRecord.put("premises", strComapp_regpremises);

				if (rs != null)
					rs.close();
				// banking arrangement
				rs = DBUtils.executeLAPSQuery("sel_bankingArrangementPrint^"
						+ strappno);
				while (rs.next()) {

					arrCol1 = new ArrayList();
					arrCol1.add(correctNull(rs.getString("combk_bankname")));
					arrCol1
							.add(correctNull(rs.getString("combk_lmtfundexist")));
					arrCol1.add(correctNull(rs.getString("combk_lmtfundprop")));
					arrCol1.add(correctNull(rs
							.getString("combk_lmtnonfundexist")));
					arrCol1.add(correctNull(rs
							.getString("combk_lmtnonfundprop")));
					arrRow1.add(arrCol1);
				}
				hshRecord.put("arrRowArrange", arrRow1);

				// collateral security
				arrRow1 = new ArrayList();
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selsecuritybytype^" + strappno
						+ "^Collateral");
				while (rs.next()) {

					arrCol1 = new ArrayList();
					arrCol1.add(correctNull(rs.getString("sec_desc_details")));
					arrCol1.add(correctNull(rs.getString("sec_desc_value")));
					arrRow1.add(arrCol1);
				}
				hshRecord.put("arrRowCollSec", arrRow1);

				arrRow1 = new ArrayList();
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selsecuritybytype^"
						+ strappno + "^Primary");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					arrCol1 = new ArrayList();
					arrCol1.add(correctNull(rs.getString("sec_desc_details")));
					arrCol1.add(correctNull(rs.getString("sec_desc_value")));
					arrRow1.add(arrCol1);
				}
				hshRecord.put("primSec", arrRow1);

				// Personal guarantee
				arrRow1 = new ArrayList();

				if (rs != null)
					rs.close();
				strQuery = SQLParser
						.getSqlQuery("compromoterselectionpromoters^"
								+ strappno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					ArrayList arrVec4 = new ArrayList();

					arrVec4.add(correctNull(rs.getString("com_compdtfname")));
					arrVec4.add(correctNull(rs.getString("com_compdtlname")));
					arrVec4.add(correctNull(rs.getString("com_compdtmname")));
					arrVec4.add(correctNull(rs.getString("com_compdaca")));
					String company_id = correctNull((String) rs
							.getString("com_compdtid"));
					if (rs1 != null) {
						rs1.close();
					}
					strQuery = SQLParser.getSqlQuery("selcreditreport2^"
							+ strappno + "^" + company_id);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						arrVec4
								.add(correctNull(rs1
										.getString("CR_Total_MEANS")));
					} else {
						arrVec4.add("0.00");
					}
					arrVec4.add(correctNull(rs.getString("com_compdexp")));

					String strpromgua[] = correctNull(
							rs.getString("com_compdttype")).split("@");

					for (int i = 0; i < strpromgua.length; i++) {
						if (strpromgua[i].equals("G")) {
							// log.error("Guarantor");
							arrGuarantors.add(arrVec4);

						}
					}
				}
				hshRecord.put("arrGuarantors", arrGuarantors);
				if (rs != null)
					rs.close();

				strQuery = SQLParser.getSqlQuery("selprosalvaluesin^"
						+ strappno);
				if (rs != null) {
					rs.close();
				}
				String Strproposalvaluesin = "";
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					Strproposalvaluesin = correctNull(rs
							.getString("prop_valuesin"));
					hshRecord.put("proposalvaluesin", Strproposalvaluesin);
				}

			}

			// Inspection report
			if (correctNull((String) hshValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {

				strQuery = SQLParser.getSqlQuery("sel_comInspectionbyinwardno^"
						+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("sel_comInspectionReport^"
						+ strappno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {

				hshRecord.put("visitdate", correctNull(rs
						.getString("visitdate")));
				hshRecord.put("visitname1", correctNull(rs
						.getString("visitname1")));
				hshRecord.put("visitdes1", correctNull(rs
						.getString("visitdes1")));
				hshRecord.put("contact",
						correctNull(rs.getString("visitname2")));
				hshRecord.put("distance1", correctNull(rs
						.getString("visitdes2")));
				hshRecord.put("taken", correctNull(rs.getString("visitname3")));
				hshRecord.put("visitdes3", correctNull(rs
						.getString("visitdes3")));
				hshRecord.put("north", correctNull(rs.getString("north")));
				hshRecord.put("east", correctNull(rs.getString("east")));
				hshRecord.put("west", correctNull(rs.getString("west")));
				hshRecord.put("south", correctNull(rs.getString("south")));
				hshRecord.put("suitability", correctNull(rs
						.getString("suitability")));
				hshRecord.put("primary_security", correctNull(rs
						.getString("primary_security")));
				hshRecord.put("coll_security", correctNull(rs
						.getString("coll_security")));
				hshRecord.put("present_status", correctNull(rs
						.getString("present_status")));
				hshRecord.put("availability", correctNull(rs
						.getString("availability")));
				hshRecord
						.put("licenses", correctNull(rs.getString("licenses")));
				hshRecord.put("operation", correctNull(rs
						.getString("operation")));
				if ("1".equals(correctNull(rs.getString("borrower_name"))))
					hshRecord.put("borrower_name", "Yes");
				else if ("2".equals(correctNull(rs.getString("borrower_name"))))
					hshRecord.put("borrower_name", "No");
				else
					hshRecord.put("borrower_name", "");

				if ("1".equals(correctNull(rs.getString("proper_main"))))
					hshRecord.put("proper_main", "Yes");
				else if ("2".equals(correctNull(rs.getString("proper_main"))))
					hshRecord.put("proper_main", "No");
				else
					hshRecord.put("proper_main", "");
				hshRecord.put("credit_limit", correctNull(rs
						.getString("credit_limit")));
				hshRecord.put("confirmation", correctNull(rs
						.getString("confirmation")));
				hshRecord.put("other_features", correctNull(rs
						.getString("other_features")));
				hshRecord.put("dateofreport", correctNull(rs
						.getString("dateofreport")));
			}

			if (rs != null)
				rs.close();
			if (!(correctNull((String) hshValues.get("hidsaral"))
					.equals("saral"))) {
				// facility details
				rs = DBUtils.executeLAPSQuery("selfacilitylist^" + strappno
						+ "^" + "0");
				while (rs.next()) {

					arrCol1 = new ArrayList();
					arrCol1.add(correctNull(rs.getString("facheaddesc")) + "-"
							+ correctNull(rs.getString("facdesc")));
					arrCol1.add(correctNull(rs.getString("facility_purpose")));
					arrCol1.add(correctNull(rs.getString("facility_proposed")));
					arrRow1.add(arrCol1);
				}
				hshRecord.put("facility", arrRow1);
			}

			if (rs != null)
				rs.close();
			if (strInwardno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selBranchCityName^"
						+ strappno);
			} else {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strInwardno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord.put("orgcity", correctNull(rs.getString("org_city")));
				hshRecord.put("orgstate",
						correctNull(rs.getString("org_state")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
			}

		} catch (Exception e1) {
			throw new EJBException("Error in getConsortium :: "
					+ e1.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return hshRecord;

	}

	public void AttachDetachCreditReport(HashMap hshRequestValues)
			 {
		HashMap hshQueryValues = null;
		HashMap hshQuery = null;

		ArrayList arrValues = null;

		String strAction = "";
		String strappno = null;
		String strApptype = null;
		int intUpdatesize = 0;
		ResultSet rs = null;

		strAction = correctNull((String) hshRequestValues.get("hidattach"));

		try {
			if (strAction.equalsIgnoreCase("attach")) {
				strappno = correctNull((String) hshRequestValues.get("appno"));
				strApptype = correctNull((String) hshRequestValues
						.get("sel_name"));
			}

			hshQueryValues = new HashMap();
			/**
			 * Updating the creditreport table with inwardno and slno wise as
			 * per the user selection
			 */
			hshQuery = new HashMap();
			arrValues = new ArrayList();

			intUpdatesize++;
			arrValues.add(strApptype);
			arrValues.add(strappno);
			arrValues
					.add(correctNull((String) hshRequestValues.get("inwardno")));
			arrValues
					.add(correctNull((String) hshRequestValues.get("hid_slno")));

			hshQuery.put("arrValues", arrValues);
			hshQuery.put("strQueryId", "attachcreditreport1");

			hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
			hshQueryValues.put("size", Integer.toString(intUpdatesize));

			/**
			 * Updating the creditreport_totmeans table with inwardno and slno
			 * wise as per the user selection
			 */
			hshQuery = new HashMap();
			arrValues = new ArrayList();

			intUpdatesize++;
			arrValues.add(strappno);
			arrValues.add(strApptype);
			arrValues
					.add(correctNull((String) hshRequestValues.get("inwardno")));
			arrValues
					.add(correctNull((String) hshRequestValues.get("hid_slno")));

			hshQuery.put("arrValues", arrValues);
			hshQuery.put("strQueryId", "attachcreditreport2");

			hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
			hshQueryValues.put("size", Integer.toString(intUpdatesize));

			/**
			 * Updating the creditreport_assets table with inwardno and slno
			 * wise as per the user selection
			 */
			hshQuery = new HashMap();
			arrValues = new ArrayList();

			intUpdatesize++;
			arrValues.add(strappno);
			arrValues.add(strApptype);
			arrValues
					.add(correctNull((String) hshRequestValues.get("inwardno")));
			arrValues
					.add(correctNull((String) hshRequestValues.get("hid_slno")));

			hshQuery.put("arrValues", arrValues);
			hshQuery.put("strQueryId", "attachcreditreport3");

			hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
			hshQueryValues.put("size", Integer.toString(intUpdatesize));

			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
		} catch (Exception e) {
			throw new EJBException(
					"Connection Error in AttachDetachCreditReport"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				log.error("error occured while closing the connection"
						+ e1.toString());
			}
		}
	}

	public HashMap getCreditreportNames(HashMap hshValues)  {

		HashMap hshRecord = new HashMap();
		String strQuery = "";
		ArrayList arryRow = new ArrayList();
		ArrayList arryCol = null;
		ResultSet rs = null;
		boolean bState = false;
		try {
			String strinwardno = correctNull((String) hshValues.get("inwardno"));

			if (!strinwardno.equals("")) {
				strQuery = SQLParser.getSqlQuery("selcreditreportnames^"
						+ strinwardno);
			}
			rs = DBUtils.executeQuery(strQuery);
			bState = rs.next();
			if (!bState) {
				hshRecord.put("noData", "noData");
			} else {
				hshRecord.put("noData", "Data");
			}
			while (bState) {

				arryCol = new ArrayList();
				arryCol.add(correctNull(rs.getString("cr_inwardno")));// 0
				arryCol.add(correctNull(rs.getString("cr_name")));// 1
				arryCol.add(correctNull(rs.getString("cr_fatname")));// 2
				arryCol.add(correctNull(rs.getString("cr_appno")));// 3
				arryCol.add(correctNull(rs.getString("CR_OFFADD")));// 4
				arryCol.add(correctNull(rs.getString("CR_OFFTELNO")));// 5
				arryCol.add(correctNull(rs.getString("CR_RESADD")));// 6
				arryCol.add(correctNull(rs.getString("CR_RESTELNO")));// 7
				arryCol.add(correctNull(rs.getString("CR_PERMADD")));// 8
				arryCol.add(correctNull(rs.getString("CR_PERMTELNO")));// 9
				arryCol.add(correctNull(rs.getString("CR_APPTYPE")));// 10
				arryCol.add(correctNull(rs.getString("CR_MINORTYPE")));// 11
				arryCol.add(correctNull(rs.getString("CR_AGRITYPE")));// 12
				arryCol.add(correctNull(rs.getString("CR_SLNO")));// 13

				arryCol.add(correctNull(rs.getString("cr_mainbussiness")));// 14
				arryCol.add(correctNull(rs.getString("cr_sideline")));// 15
				arryCol.add(correctNull(rs.getString("cr_constitution")));// 16
				arryCol.add(correctNull(rs.getString("cr_established")));// 17

				arryRow.add(arryCol);
				bState = rs.next();
			}
			hshRecord.put("arryRow", arryRow);

		} catch (Exception e1) {
			throw new EJBException("Error in getCreditreportNames :: "
					+ e1.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return hshRecord;

	}

	public void updateAgriDueDiligence(HashMap hshRequestValues)
			 {

		HashMap hshQueryValues = null;
		HashMap hshQuery = null;
		ArrayList arrValues = null;
		String strAction = "";
		int intUpdatesize = 0;
		ResultSet rs = null;
		String strAppno = "";
		strAction = correctNull((String) hshRequestValues.get("hidAction"));
		strAppno = correctNull((String) hshRequestValues.get("strappno"));
		try {
			if (strAction.equalsIgnoreCase("insert")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();

				intUpdatesize++;
				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"delduediligencereportbyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "delduediligencereport");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));

				}
				hshQuery.put("arrValues", arrValues);

				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);

				hshQuery = new HashMap();

				arrValues = new ArrayList();

				intUpdatesize++;
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtName")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtPersonContact")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtRelated")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtSincewhen")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtYrsofResidence")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtResiaddrVisited")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txtTypeofResidence")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_marketability")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_observation")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_date")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_inspecting")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_inspectingdesign")));
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "insagrduediligencereport");
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}

			else if (strAction.equalsIgnoreCase("delete")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"delduediligencereportbyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "delduediligencereport");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));
				}

				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}

		} catch (Exception e) {
			throw new EJBException("Connection Error in updateAgriDueDiligence"
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				log.error("error occured" + e1.toString());
			}
		}

	}

	public HashMap getComDueDiligenceReport(HashMap hshRequestValues)
			 {

		ResultSet rs = null;
		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = new ArrayList();
		String strQuery = "";
		String strappno = correctNull((String) hshRequestValues.get("appno"));
		HashMap hshRecord = new HashMap();
		try {
			if (correctNull((String) hshRequestValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				String strInwardno = correctNull((String) hshRequestValues
						.get("inwardno"));
				strQuery = SQLParser
						.getSqlQuery("sel_comduediligencebyinwardno^"
								+ strInwardno);
			} else {
				strQuery = SQLParser.getSqlQuery("sel_comduediligencebyappno^"
						+ strappno);
			}

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("duediligence_appno")));// 0
				arrCol.add(correctNull(rs.getString("duediligence_inwardno")));// 1
				arrCol.add(correctNull(rs.getString("duediligence_slno")));// 2
				arrCol.add(correctNull(rs.getString("duediligence_inspect")));// 3
				arrCol.add(correctNull(rs.getString("duediligence_name")));// 4
				arrCol
						.add(correctNull(rs
								.getString("duediligence_designation")));// 5
				arrCol.add(correctNull(rs.getString("duediligence_docs")));// 6
				arrCol.add(correctNull(rs.getString("duediligence_address")));
				arrCol.add(correctNull(rs.getString("duediligence_property")));
				arrCol.add(correctNull(rs.getString("duediligence_plot")));
				arrCol.add(correctNull(rs.getString("duediligence_door")));
				arrCol.add(correctNull(rs.getString("duediligence_TSNo")));
				arrCol.add(correctNull(rs.getString("duediligence_ward")));
				arrCol.add(correctNull(rs.getString("duediligence_mandal")));
				arrCol.add(correctNull(rs.getString("duediligence_others")));
				arrCol
						.add(correctNull(rs
								.getString("duediligence_residential")));
				arrCol
						.add(correctNull(rs
								.getString("duediligence_corporation")));
				arrCol.add(correctNull(rs.getString("duediligence_state")));
				arrCol.add(correctNull(rs.getString("duediligence_plotsize")));
				arrCol.add(correctNull(rs.getString("duediligence_owners")));
				arrCol.add(correctNull(rs.getString("duediligence_sincewhen")));
				arrCol.add(correctNull(rs.getString("duediligence_civic")));
				arrCol
						.add(correctNull(rs
								.getString("duediligence_boundaries")));
				arrCol
						.add(correctNull(rs
								.getString("duediligence_surrounding")));
				arrCol
						.add(correctNull(rs
								.getString("duediligence_certificate")));
				arrCol.add(correctNull(rs
						.getString("duediligence_mortrelation")));
				arrCol.add(correctNull(rs.getString("duediligence_enquiry")));
				arrCol.add(correctNull(rs
						.getString("duediligence_propertyvalue")));
				arrCol.add(correctNull(rs.getString("duediligence_market")));// 28
				arrRow.add(arrCol);

			}
			hshRecord.put("arrRow", arrRow);
			hshRecord.put("saral", correctNull((String) hshRequestValues
					.get("hidsaral")));
			if (rs != null)
				rs.close();
		} catch (Exception e) {
			throw new EJBException("Error in getComDueDiligenceReport methord "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;

	}

	public void updateComDueDiligenceReport(HashMap hshRequestValues)
			 {

		HashMap hshQueryValues = null;
		HashMap hshQuery = null;
		ArrayList arrValues = null;
		String strAction = "";
		String strQuery = "";
		int intUpdatesize = 0;
		ResultSet rs = null;
		String strslno = "";
		String strwhereclause = "";
		strAction = correctNull((String) hshRequestValues.get("hidAction"));
		StringBuilder sbolddata = new StringBuilder();

		try {
			if (strAction.equalsIgnoreCase("update")
					|| strAction.equalsIgnoreCase("delete")) {
				// strQuery=SQLParser.getSqlQuery("pergetfinancialpolbysno^"+strSno+"^"+correctNull((String)hshValues.get("selapptype"))+"^"+strApplicationNo);
				// rs=DBUtils.executeQuery(strQuery);
				// if(rs.next())
				// {
				//					
				// }
			}

			if (strAction.equalsIgnoreCase("insert")) {
				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strwhereclause = "duediligence_inwardno='"
							.concat(correctNull((String) hshRequestValues
									.get("inwardno")))
							+ "'";
				} else {
					strwhereclause = "duediligence_appno='"
							.concat(correctNull((String) hshRequestValues
									.get("appno")))
							+ "'";
				}
				strQuery = SQLParser.getSqlQuery("sel_maxcomduediligence^"
						+ strwhereclause);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strslno = correctNull(rs.getString("Maxslno"));
				}

				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				arrValues.add(correctNull((String) hshRequestValues
						.get("appno")));// 0
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));// 1
				arrValues.add(strslno);// 2
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_inspect")));// 3
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_name")));// 4
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_designation")));// 5
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_docs")));// 6
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_address")));// 7
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_property")));// 8
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_plot")));// 9
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_door")));// 10
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_TSNo")));// 11
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_ward")));// 12
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_mandal")));// 13
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_others")));// 14
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_residential")));// 15
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_corporation")));// 16
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_state")));// 17
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_plotsize")));// 18
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_owners")));// 19
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_sincewhen")));// 20
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_civic")));// 21
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_boundaries")));// 22
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_surrounding")));// 23
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_certificate")));// 24
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_mortrelation")));// 25
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_enquiry")));// 26
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_propertyvalue")));// 27
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_market")));// 28
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_comduediligence");
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			} else if (strAction.equalsIgnoreCase("update")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				arrValues.add(correctNull((String) hshRequestValues
						.get("appno")));// 0
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));// 1
				arrValues.add(correctNull((String) hshRequestValues
						.get("hid_slno")));//
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_inspect")));// 3
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_name")));// 4
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_designation")));// 5
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_docs")));// 6
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_address")));// 7
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_property")));// 8
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_plot")));// 9
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_door")));// 10
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_TSNo")));// 11
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_ward")));// 12
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_mandal")));// 13
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_others")));// 14
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_residential")));// 15
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_corporation")));// 16
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_state")));// 17
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_plotsize")));// 18
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_owners")));// 19
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_sincewhen")));// 20
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_civic")));// 21
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_boundaries")));// 22
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_surrounding")));// 23
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_certificate")));// 24
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_mortrelation")));// 25
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_enquiry")));// 26
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_propertyvalue")));// 27
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_market")));// 28
				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId", "upd_comduediligencebyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "upd_comduediligencebyappno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));

				}
				arrValues.add(correctNull((String) hshRequestValues
						.get("hid_slno")));
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			} else if (strAction.equalsIgnoreCase("delete")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId", "del_comduediligencebyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
					arrValues.add(correctNull((String) hshRequestValues
							.get("hid_slno")));
				} else {
					hshQuery.put("strQueryId", "del_comduediligencebyappno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));
					arrValues.add(correctNull((String) hshRequestValues
							.get("hid_slno")));
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}
		} catch (Exception e) {
			throw new EJBException(
					"Connection Error in updateComDueDiligenceReport"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				log.error("error occured" + e1.toString());
			}
		}

	}

	public HashMap getComCreditLimitSought(HashMap hshRequestValues)
			 {

		ResultSet rs = null;
		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = new ArrayList();
		String strQuery = "";
		String strappno = correctNull((String) hshRequestValues.get("appno"));
		HashMap hshRecord = new HashMap();
		try {
			if (correctNull((String) hshRequestValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				String strInwardno = correctNull((String) hshRequestValues
						.get("inwardno"));
				strQuery = SQLParser
						.getSqlQuery("sel_creditlimitsoughtbyinwardno^"
								+ strInwardno);
			} else {
				strQuery = SQLParser
						.getSqlQuery("sel_creditlimitsoughtbyappno^" + strappno);
			}

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol
						.add(correctNull(rs
								.getString("creditlimitsought_appno")));// 0
				arrCol.add(correctNull(rs
						.getString("creditlimitsought_inwardno")));// 1
				arrCol.add(correctNull(rs.getString("creditlimitsought_slno")));// 2
				arrCol.add(correctNull(rs
						.getString("creditlimitsought_facility")));// 3
				arrCol
						.add(correctNull(rs
								.getString("creditlimitsought_limits")));// 4

				arrRow.add(arrCol);
			}
			hshRecord.put("arrRow", arrRow);
			hshRecord.put("saral", correctNull((String) hshRequestValues
					.get("hidsaral")));
			if (rs != null)
				rs.close();
		} catch (Exception e) {
			throw new EJBException("Error in getComCreditLimitSought methord "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;

	}

	public void updateComCreditLimitSought(HashMap hshRequestValues)
			 {

		HashMap hshQueryValues = null;
		HashMap hshQuery = null;
		ArrayList arrValues = null;
		String strAction = "";
		String strQuery = "";
		int intUpdatesize = 0;
		ResultSet rs = null;
		String strslno = "";
		String strwhereclause = "";
		strAction = correctNull((String) hshRequestValues.get("hidAction"));

		try {
			if (strAction.equalsIgnoreCase("insert")) {
				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					strwhereclause = "creditlimitsought_inwardno="
							.concat(correctNull((String) hshRequestValues
									.get("inwardno")));
				} else {
					strwhereclause = "creditlimitsought_appno="
							.concat(correctNull((String) hshRequestValues
									.get("appno")));
				}
				strQuery = SQLParser.getSqlQuery("sel_maxcreditlimitsought^"
						+ strwhereclause);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strslno = correctNull(rs.getString("Maxslno"));
				}

				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				arrValues.add(correctNull((String) hshRequestValues
						.get("appno")));// 0
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));// 1
				arrValues.add(strslno);// 2
				arrValues.add(correctNull((String) hshRequestValues
						.get("selnaturefac")));// 3
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_limitapplied")));// 4

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_creditlimitsought");
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			} else if (strAction.equalsIgnoreCase("update")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				arrValues.add(correctNull((String) hshRequestValues
						.get("appno")));// 0
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));// 1
				arrValues.add(correctNull((String) hshRequestValues
						.get("hid_slno")));//
				arrValues.add(correctNull((String) hshRequestValues
						.get("selnaturefac")));// 3
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_limitapplied")));// 4

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"upd_creditlimitsoughtbyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId", "upd_creditlimitsoughtbyappno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));

				}
				arrValues.add(correctNull((String) hshRequestValues
						.get("hid_slno")));
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			} else if (strAction.equalsIgnoreCase("delete")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"del_creditlimitsoughtbyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
					arrValues.add(correctNull((String) hshRequestValues
							.get("hid_slno")));
				} else {
					hshQuery.put("strQueryId", "del_creditlimitsoughtbyappno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));
					arrValues.add(correctNull((String) hshRequestValues
							.get("hid_slno")));
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}
		} catch (Exception e) {
			throw new EJBException(
					"Connection Error in updateComCreditLimitSought"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				log.error("error occured" + e1.toString());
			}
		}

	}

	public HashMap getComDueDiligenceCertificate(HashMap hshRequestValues)
			 {

		ResultSet rs = null;
		String strQuery = "";
		String strInwardno = "";
		String strappno = correctNull((String) hshRequestValues.get("appno"));
		HashMap hshRecord = new HashMap();
		String strsaral = correctNull((String) hshRequestValues.get("hidsaral"));
		try {
			strInwardno = correctNull((String) hshRequestValues.get("inwardno"));
			if (strsaral.equalsIgnoreCase("saral")) {

				strQuery = SQLParser
						.getSqlQuery("sel_duediligencecertificatebyinwardno^"
								+ strInwardno);
			} else {
				strQuery = SQLParser
						.getSqlQuery("sel_duediligencecertificatebyappno^"
								+ strappno);
			}

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("duecertificate_appno", correctNull(rs
						.getString("duecertificate_appno")));// 0
				hshRecord.put("duecertificate_inwardno", correctNull(rs
						.getString("duecertificate_inwardno")));// 1
				hshRecord.put("duecertificate_comments", correctNull(Helper
						.CLOBToString(rs.getClob("duecertificate_comments"))));// 2
				hshRecord.put("duecertificate_enquriedby", correctNull(rs
						.getString("duecertificate_enquriedby")));// 3
				hshRecord.put("duecertificate_enquried", correctNull(rs
						.getString("duecertificate_enquried")));// 4

				hshRecord.put("duedate", correctNull(rs.getString("duedate")));// 5
				hshRecord.put("dueofficername", correctNull(rs
						.getString("dueofficername")));// 6
				hshRecord.put("duedesignation", correctNull(rs
						.getString("duedesignation")));// 7
			}
			if (strsaral.equalsIgnoreCase("saral")) {
				hshRecord.put("appname", correctNull((String) hshRequestValues
						.get("applicantname")));
			} else {
				hshRecord.put("appname", correctNull((String) hshRequestValues
						.get("applicantname")));
			}

			if (rs != null)
				rs.close();
			if (strInwardno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selBranchCityName^"
						+ strappno);

			} else {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strInwardno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord
						.put("orgcity", correctNull(rs.getString("city_name")));
				hshRecord.put("orgstate", correctNull(rs
						.getString("state_name")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
			}
			hshRecord.put("saral", strsaral);
		} catch (Exception e) {
			throw new EJBException(
					"Error in getComDueDiligenceCertificate methord "
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;

	}

	public void updateComDueDiligenceCertificate(HashMap hshRequestValues)
			 {
		HashMap hshQueryValues = null;
		HashMap hshQuery = null;
		ArrayList arrValues = null;
		String strAction = "";
		int intUpdatesize = 0;
		ResultSet rs = null;
		strAction = correctNull((String) hshRequestValues.get("hidAction"));
		try {
			if (strAction.equalsIgnoreCase("insert")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"del_duediligencecertificatebyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId",
							"del_duediligencecertificatebyappno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));
				}
				hshQuery.put("arrValues", arrValues);

				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				arrValues.add(correctNull((String) hshRequestValues
						.get("appno")));// 0
				arrValues.add(correctNull((String) hshRequestValues
						.get("inwardno")));// 1
				arrValues.add(correctNull((String) hshRequestValues
						.get("due_comments")));// 3
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_enquiredby")));// 4
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_enquired")));// 5

				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_date")));// 6
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_officername")));// 7
				arrValues.add(correctNull((String) hshRequestValues
						.get("txt_designation")));// 8

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_duediligencecertificate");
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			} else if (strAction.equalsIgnoreCase("delete")) {
				hshQuery = new HashMap();
				hshQueryValues = new HashMap();
				arrValues = new ArrayList();
				intUpdatesize++;

				if (correctNull((String) hshRequestValues.get("hidsaral"))
						.equalsIgnoreCase("saral")) {
					hshQuery.put("strQueryId",
							"del_duediligencecertificatebyinwardno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("inwardno")));
				} else {
					hshQuery.put("strQueryId",
							"del_duediligencecertificatebyappno");
					arrValues.add(correctNull((String) hshRequestValues
							.get("appno")));
				}
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
				hshQueryValues.put("size", Integer.toString(intUpdatesize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}
		} catch (Exception e) {
			throw new EJBException(
					"Connection Error in updateComDueDiligenceCertificate"
							+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				log.error("error occured" + e1.toString());
			}
		}
	}

	public HashMap getComDueDiligenceReportPrint(HashMap hshRequestValues)
			 {

		ResultSet rs = null;

		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = new ArrayList();

		String strQuery = "";
		String strappno = "";
		String strHidslno = "";
		String strInwardno = "";
		String strCategory = "";
		String strretail = "";
		HashMap hshRecord = new HashMap();
		try {
			strappno = correctNull((String) hshRequestValues.get("appno"));
			strHidslno = correctNull((String) hshRequestValues.get("hidslno"));
			strInwardno = correctNull((String) hshRequestValues.get("inwardno"));
			strCategory = correctNull((String) hshRequestValues
					.get("hidCategoryType"));
			if (correctNull((String) hshRequestValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				strQuery = SQLParser
						.getSqlQuery("sel_comduediligenceprintbyinwardno^"
								+ strInwardno + "^" + strHidslno);
			} else {
				strQuery = SQLParser
						.getSqlQuery("sel_comduediligenceprintbyappno^"
								+ strappno + "^" + strHidslno);
			}

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("duediligence_appno", correctNull(rs
						.getString("duediligence_appno")));// 0
				hshRecord.put("duediligence_inwardno", correctNull(rs
						.getString("duediligence_inwardno")));// 1
				hshRecord.put("duediligence_slno", correctNull(rs
						.getString("duediligence_slno")));// 2
				hshRecord.put("duediligence_inspect", correctNull(rs
						.getString("duediligence_inspect")));// 3
				hshRecord.put("duediligence_name", correctNull(rs
						.getString("duediligence_name")));// 4
				hshRecord.put("duediligence_designation", correctNull(rs
						.getString("duediligence_designation")));// 5
				hshRecord.put("duediligence_docs", correctNull(rs
						.getString("duediligence_docs")));// 6
				hshRecord.put("duediligence_address", correctNull(rs
						.getString("duediligence_address")));
				hshRecord.put("duediligence_property", correctNull(rs
						.getString("duediligence_property")));
				hshRecord.put("duediligence_plot", correctNull(rs
						.getString("duediligence_plot")));
				hshRecord.put("duediligence_door", correctNull(rs
						.getString("duediligence_door")));
				hshRecord.put("duediligence_TSNo", correctNull(rs
						.getString("duediligence_TSNo")));
				hshRecord.put("duediligence_ward", correctNull(rs
						.getString("duediligence_ward")));
				hshRecord.put("duediligence_mandal", correctNull(rs
						.getString("duediligence_mandal")));
				hshRecord.put("duediligence_others", correctNull(rs
						.getString("duediligence_others")));
				hshRecord.put("duediligence_residential", correctNull(rs
						.getString("duediligence_residential")));
				hshRecord.put("duediligence_corporation", correctNull(rs
						.getString("duediligence_corporation")));
				hshRecord.put("duediligence_state", correctNull(rs
						.getString("duediligence_state")));
				hshRecord.put("duediligence_plotsize", correctNull(rs
						.getString("duediligence_plotsize")));
				hshRecord.put("duediligence_owners", correctNull(rs
						.getString("duediligence_owners")));
				hshRecord.put("duediligence_sincewhen", correctNull(rs
						.getString("duediligence_sincewhen")));
				hshRecord.put("duediligence_civic", correctNull(rs
						.getString("duediligence_civic")));
				hshRecord.put("duediligence_boundaries", correctNull(rs
						.getString("duediligence_boundaries")));
				hshRecord.put("duediligence_surrounding", correctNull(rs
						.getString("duediligence_surrounding")));
				hshRecord.put("duediligence_certificate", correctNull(rs
						.getString("duediligence_certificate")));
				hshRecord.put("duediligence_mortrelation", correctNull(rs
						.getString("duediligence_mortrelation")));
				hshRecord.put("duediligence_enquiry", correctNull(rs
						.getString("duediligence_enquiry")));
				hshRecord.put("duediligence_propertyvalue", correctNull(rs
						.getString("duediligence_propertyvalue")));
				hshRecord.put("duediligence_market", correctNull(rs
						.getString("duediligence_market")));// 28
			}

			if (correctNull((String) hshRequestValues.get("hidsaral"))
					.equalsIgnoreCase("saral")) {
				strQuery = SQLParser.getSqlQuery("selbrrecmdfacility^"
						+ strInwardno + "^0");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					ResultSet rs1 = null;
					arrCol = new ArrayList();
					String strFacgrp = correctNull(rs
							.getString("brrecmd_facsno"));
					arrCol.add(strFacgrp);// 1
					arrCol.add(correctNull(rs.getString("brrecmd_factype")));// 2
					arrCol.add(Helper.correctDouble(rs
							.getString("brrecmd_limitapplied")));// 3
					arrCol.add(Helper.correctDouble(rs
							.getString("brrecmd_facnature")));// 4
					arrRow.add(arrCol);

					strQuery = SQLParser.getSqlQuery("selbrrecmdfacility^"
							+ strInwardno + "^" + strFacgrp);

					if (rs1 != null)
						rs1.close();

					rs1 = DBUtils.executeQuery(strQuery);
					while (rs1.next()) {
						arrCol = new ArrayList();
						arrCol
								.add(correctNull(rs1
										.getString("brrecmd_facsno")));// 1
						arrCol
								.add(correctNull(rs1
										.getString("brrecmd_factype")));// 2
						arrCol.add(Helper.correctDouble(rs1
								.getString("brrecmd_limitapplied")));// 3
						arrCol.add(Helper.correctDouble(rs1
								.getString("brrecmd_facnature")));// 4

						arrRow.add(arrCol);
					}
				}
			} else {
				if (strCategory.equalsIgnoreCase("OPS")
						|| strCategory.equalsIgnoreCase("CORP")
						|| strCategory.equalsIgnoreCase("SME")) {
					strQuery = SQLParser.getSqlQuery("selfacilitylist^"
							+ strappno + "^0");
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						ResultSet rs1 = null;
						arrCol = new ArrayList();
						String strFacgrp = correctNull(rs
								.getString("facility_sno"));
						arrCol.add(strFacgrp);// 1
						arrCol.add(correctNull(rs.getString("facdesc")));// 2
						arrCol.add(Helper.correctDouble(rs
								.getString("facility_proposed")));// 3
						arrCol.add(correctNull(rs.getString("facdesc")));// 4
						arrRow.add(arrCol);

						strQuery = SQLParser.getSqlQuery("selfacilitylist^"
								+ strappno + "^" + strFacgrp);

						if (rs1 != null)
							rs1.close();

						rs1 = DBUtils.executeQuery(strQuery);
						while (rs1.next()) {
							arrCol = new ArrayList();
							arrCol.add(correctNull(rs1
									.getString("facility_sno")));// 1
							arrCol.add(correctNull(rs1.getString("facdesc")));// 2
							arrCol.add(Helper.correctDouble(rs1
									.getString("facility_proposed")));// 3

							arrRow.add(arrCol);
						}
					}
				} else {

					if (rs != null) {
						rs.close();
					}
					String strProdPurpose = "", strVehicleType = "";
					strQuery = SQLParser.getSqlQuery("selprodpurpose^"
							+ strappno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strProdPurpose = Helper.correctNull((String) rs
								.getString("prd_purpose"));
						strVehicleType = Helper.correctNull((String) rs
								.getString("prd_vehitype"));
					}
					/*
					 * For Purchase of Ready Built House and Used Vehicle loan,
					 * Margin is based on age of the building / vehicle
					 * respectively
					 */
					if (strProdPurpose.equalsIgnoreCase("H")
							|| strProdPurpose.equalsIgnoreCase("U")
							|| strVehicleType.equalsIgnoreCase("2")) {
						strQuery = SQLParser
								.getSqlQuery("pergetloanProductbymargin^"
										+ strappno);
					} else {
						strQuery = SQLParser.getSqlQuery("pergetloanProduct^"
								+ strappno);
					}
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						arrCol.add("1");
						arrCol.add(correctNull(rs.getString("category"))
								+ " - "
								+ correctNull(rs.getString("subcategory")));
						arrCol.add(correctNull(rs.getString("amtreqd")));
						arrRow.add(arrCol);
						strretail = "Y";
					}
				}

			}

			hshRecord.put("arrRow", arrRow);
			hshRecord.put("strretail", strretail);

			String strappname = correctNull((String) hshRequestValues
					.get("appname"));
			if (strappname.equalsIgnoreCase("")) {
				strappname = correctNull((String) hshRequestValues
						.get("applicantname"));
			}
			hshRecord.put("appname", strappname);
			if (rs != null)
				rs.close();
			if (strInwardno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selBranchCityName^"
						+ strappno);
			} else {
				strQuery = SQLParser.getSqlQuery("selinwardreg^" + strInwardno);
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord
						.put("orgcity", correctNull(rs.getString("city_name")));
				hshRecord.put("orgstate", correctNull(rs
						.getString("state_name")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
			}
		} catch (Exception e) {
			throw new EJBException("Error in getComDueDiligenceReport methord "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;

	}

	public HashMap getProcessNote(HashMap hshReqValues)  {

		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		ResultSet rs = null, rs1 = null, rs2 = null, rscmmt = null, rscmtdesc = null, rs3 = null, rs4 = null, rs6 = null, rs5 = null;
		;
		HashMap hshValues = new HashMap();
		HashMap hshFacVal = new HashMap();
		HashMap hshFinValues = new HashMap();
		HashMap hshFinSenValues = new HashMap();
		HashMap hshBenchValues = new HashMap();
		DscrBean dscrobj = new DscrBean();
		double dblGrpExp = 0;
		int strFinid = 0;
		String strAppId = "", strAppNo = "", strOrgCode = "", strfacno = "";
		String strVal = "", strValuesIn = "", strVal1 = "", strVal2 = "", strVal3 = "", str_arr = "", strValuesIn1 = "", strFinvaluesIn = "", strAmountValue = "", strAmtValueIn = "";
		String strCommentMgmtSno[] = { "8", "11", "12", "13", "14", "15", "16" };
		String strProposalType = "", strAppStatus = "";
		String strFacSno = "";
		ArrayList arrOutCol = new ArrayList();
		ArrayList arrOutRow = new ArrayList();
		ArrayList arrOutRowCons = new ArrayList();
		ArrayList arrCOPCol = new ArrayList();
		ArrayList arrCOPRow = new ArrayList();
		ArrayList arrMOFCol = new ArrayList();
		ArrayList arrMOFRow = new ArrayList();
		ArrayList arrRelPatCol = new ArrayList();
		ArrayList arrRelPatRow = new ArrayList();
		ArrayList arrImplSchRow = new ArrayList();
		ArrayList arrImplSchCol = new ArrayList();
		ArrayList arrColTakeover = new ArrayList();
		ArrayList arrRowTakeover = new ArrayList();

		ArrayList arrIncomeFromCropRow = new ArrayList();
		ArrayList arrIncomeFromCropCol = new ArrayList();

		ArrayList arrGrpExpDet = new ArrayList();
		ArrayList arrcolGrpExpDet = new ArrayList();
		ArrayList arrExistingWC = new ArrayList();
		ArrayList arrPresentWC = new ArrayList();
		ArrayList arrPresentTL = new ArrayList();
		ArrayList arrRowcgssd = new ArrayList();
		ArrayList arrColCgssd = new ArrayList();
		DecimalFormat dc = new DecimalFormat();
		dc.setGroupingUsed(false);
		dc.setMaximumFractionDigits(2);
		dc.setMinimumFractionDigits(2);

		String strSeasonType = "", strSeasonName = "", ApprUserid = "";
		String strQuery = "";
		double dblGrpExposure = 0.00, dblTotalExposure = 0.00;

		double dblTotal = 0.00, dblTotalAmt = 0.00, dbl_exitot = 0.00, dbl_exialltot = 0.00, dbl_protot = 0.00, dbl_proalltot = 0.00;
		String strTotalAmt = "", strCropType = "", strCropName = "", strexiprotype = "";

		String strCommentSno[] = { "1", "3", "5", "6" };
		double dblTotCOP = 0.00, dblRPTotCost = 0.00, dblRPTotMargin = 0.00, dblRPTotLoan = 0.00;

		String strLoanType = "", cma = "";

		ArrayList arrLimit = new ArrayList();
		ArrayList arrRowLimit = new ArrayList();

		ArrayList arrInland = new ArrayList();
		ArrayList arrRowInland = new ArrayList();
		ArrayList arrInlandYr = new ArrayList();
		ArrayList arrRowInlandYr = new ArrayList();

		// Added by vinoth kumar on March 08 2014
		HashMap hshPhysicsAndFinValues = new HashMap();
		HashMap hshDSSData = new HashMap();
		HashMap hshCropAss = new HashMap();
		HashMap hshkccIntSubVen = new HashMap();
		ArrayList vecData = new ArrayList();
		ArrayList vecRec = new ArrayList();
		HashMap hshRes = new HashMap();

		ArrayList arrFacilityTermApp = new ArrayList();
		ArrayList arrFacilityTerm = new ArrayList();
		ArrayList arrFacilityTermType = new ArrayList();
		ArrayList arrParentID = new ArrayList();
		ArrayList arrFacilityId = new ArrayList();
		ArrayList arrFacilityTermStatus = new ArrayList();
		ArrayList arrFacilityPrepost = new ArrayList();
		ArrayList arrFacilityTermTypeApp = new ArrayList();
		ArrayList arrFacilityIdApp = new ArrayList();
		ArrayList arrFacilityTermStatusapp = new ArrayList();

		ArrayList arrRowNonBr = new ArrayList();
		ArrayList arrColNonBr = new ArrayList();

		int strPatentid = 0;
		String[] peakDeficit = null;

		double dbl_allopnBal = 0.00, dbl_opnBal = 0.00, dbl_allproEqt = 0.00, dbl_proEqt = 0.00, dbl_bnkFin = 0.00, dbl_allbnkFin = 0.00, dbl_unsec = 0.00, dbl_allunsec = 0.00;
		double dbl_allsaleProc = 0.00, dbl_saleProc = 0.00, dbl_other = 0.00, dbl_allother = 0.00, dbl_allsofTot = 0.00, dbl_sofTot = 0.00, dbl_costLand = 0.00, dbl_allcostLand = 0.00;
		double dbl_adminexp = 0.00, dbl_alladminexp = 0.00, dbl_marketexp = 0.00, dbl_allmarketexp = 0.00, dbl_constcost = 0.00, dbl_allconstcost = 0.00, dbl_premiumfsi = 0.00;
		double dbl_allpremiumfsi = 0.00, dbl_provTax = 0.00, dbl_allprovTax = 0.00, dbl_allrepayment = 0.00, dbl_repayment = 0.00, dbl_allinterest = 0.00, dbl_interest = 0.00;
		double dbl_allotherFin = 0.00, dbl_otherFin = 0.00, dbl_allappfinTot = 0.00, dbl_appfinTot = 0.00, dbl_closingBal = 0.00, dbl_allclosingBal = 0.00;

		String srrBaseRate = "", strInterestType = "", strInterestRate = "", strWhetherBRAvail = "N", strHoliday = "0";
		double dblBaseRate = 0.00, dblInterestRate = 0.00, dblDiffIntRate = 0.00;
		String mainactivity = "", subactivity = "";
		String strFinancialrequired = "";

		ArrayList arrMISRow = new ArrayList();
		ArrayList arrMISCol = new ArrayList();
		HashMap hshGoods = new HashMap();
		String strusername = "";
		ArrayList arrFinSnoRow = new ArrayList();
		ArrayList arrFinSnoCol = new ArrayList();
		String strSancBranch = "", strAppOrgCode = "", strMCLRFlag = "Y";
		String strVerifyWithCFR = "", strNamApprCFR = "", strStatusVer = "";
		String strRoiType = "", StrInsCompanyName = "";

		try {
			strAppId = correctNull((String) hshReqValues.get("appid"));
			if(strAppId.equalsIgnoreCase(""))
			{
				strAppId = correctNull((String) hshReqValues.get("Str_ApplicantId"));	
			}
			// Str_ApplicantId=379679
			strAppNo = correctNull((String) hshReqValues.get("appno"));
			strusername = Helper.correctNull((String) hshReqValues
					.get("strUserId"));
			String strSessionModuleType = Helper
					.correctNull((String) hshReqValues.get("sessionModuleType"));
			appraisalBean appraisal = new appraisalBean();

			HashMap hshReqVal1 = new HashMap();
			hshReqVal1.put("appno", strAppNo);
			hshReqVal1.put("appid", strAppId);
			hshReqVal1.put("PageType", "PROPOSALLC");
			hshReqVal1.put("strPageType", "annexure");
			hshReqVal1 = appraisal.getRestruceAnnexure(hshReqVal1);
			hshReqVal1.put("page", "PROPOSAL LC");
			hshReqVal1.put("PROPOSALLC", hshReqVal1);
			rs = DBUtils.executeLAPSQuery("sanctiondate_mclr^" + strAppNo);
			if (rs.next()) {
				if (Integer.parseInt(Helper
						.correctInt(rs.getString("datediff"))) < 0) {
					strMCLRFlag = "N";
				}
			}

			String strOldAppId = "";
			rs = DBUtils.executeLAPSQuery("selgetveryoldid^" + strAppId);
			if (rs.next()) {
				strOldAppId = Helper.correctNull((String) rs
						.getString("perapp_oldid"));
			}
			ArrayList vecNcgtcRow=new ArrayList();
			ArrayList vecNcgtcCol=new ArrayList();
			rs = DBUtils.executeLAPSQuery("select_corp_ncgtc_all^" + strAppNo);
			while (rs.next()) {
				vecNcgtcCol=new ArrayList();
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_APPNO")));//1
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_FACILITY")));//2
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_TYPEOFPROJECT")));//3
				if (Helper.correctNull(rs.getString("CORP_TYPEOFPROJECT"))
						.equals("1")) {
					vecNcgtcCol.add("Green Field");//4
				} else if (Helper.correctNull(
						rs.getString("CORP_TYPEOFPROJECT")).equals("2")) {
					vecNcgtcCol.add("Brown Field");//4
				}
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_GREENFIELD")));//5
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_BROWNFIELD")));//6
				if (Helper.correctNull(rs.getString("CORP_METROPROJECT"))
						.equals("1")) {
					vecNcgtcCol.add("Yes");//7
					vecNcgtcCol.add("No");//8
				} else if (Helper
						.correctNull(rs.getString("CORP_METROPROJECT")).equals(
								"2")) {
					vecNcgtcCol.add("No");//7
					vecNcgtcCol.add("Yes");//8
				}
				
				if (Helper.correctNull(rs.getString("CORP_INDUSTRYSECTOR")).equals("1")) {
					vecNcgtcCol.add("Healthcare");//9
					vecNcgtcCol.add("No");//10
				} else if (Helper.correctNull(rs.getString("CORP_INDUSTRYSECTOR")).equals("2")) {
					vecNcgtcCol.add("Others");//9
					vecNcgtcCol.add("Yes");//10
				}
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_UDYOGAADHAAR")));//11
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_PROJECTUNITPIN")));//12
				if (Helper.correctNull(rs.getString("CORP_PROJECTNATURE"))
						.equals("1")) {
					vecNcgtcCol.add("Vaccine Manufacturing.");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("2")) {
					vecNcgtcCol.add("Import / Supply of vaccines and priority medical devices.");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("3")) {
					vecNcgtcCol.add("Hospitals/Dispensaries.");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("4")) {
					vecNcgtcCol.add("Pathology Labs and Diagnostic Centres");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("5")) {
					vecNcgtcCol.add("Manufacturing and Supply of Oxygen and Ventilators");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("6")) {
					vecNcgtcCol.add("COVID related drugs");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("7")) {
					vecNcgtcCol.add("COVID Related Logistics Firms");//13
				}
				vecNcgtcCol.add(Helper.correctNull(
						rs.getString("com_facdesc")));
				vecNcgtcCol.add(Helper.correctNull(
						rs.getString("facility_sno")));
				vecNcgtcRow.add(vecNcgtcCol);
			}
			hshValues.put("vecNcgtcRow", vecNcgtcRow);
			// Assessments selected
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_assessmentselection_select^"
					+ strAppNo);

			if (rs.next()) {
				str_arr = Helper
						.correctNull(rs.getString("COM_ASSESSMENTTYPE"));
			}
			hshValues.put("str_arr", str_arr);

			// Branch Name
			rs = DBUtils.executeLAPSQuery("selmcbReportprint^" + strAppNo);

			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
			}

			// Orgcode
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_appstatus^" + strAppNo);
			if (rs.next()) {
				strLoanType = Helper.correctNull((String) rs
						.getString("app_loantype"));
				strLoanType = strLoanType.toLowerCase();
				hshValues.put("app_renew_flag", Helper.correctNull((String) rs
						.getString("app_renew_flag")));
				if (Helper.correctNull((String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("F"))
					strProposalType = "Fresh";
				else if (Helper.correctNull(
						(String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("R"))
					strProposalType = "Renewal";
				else if (Helper.correctNull(
						(String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("S"))
					strProposalType = "Restructuring";
				else if (Helper.correctNull(
						(String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("P"))
					strProposalType = "Post Sanction";

				hshValues.put("strProposalType", strProposalType);

				strAppStatus = Helper.correctNull(rs.getString("app_status"));
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selorgno^" + strAppNo);
			if (rs.next()) {
				strOrgCode = correctNull(rs.getString("app_orgcode"));
				strValuesIn = correctNull(rs.getString("app_valuesin"));
				strValuesIn1 = correctNull(rs.getString("app_valuesin"));
				strFinancialrequired = correctNull(rs
						.getString("APP_FACILITYREQUIRED"));
			}
			hshReqValues.put("valuesin", strValuesIn1);
			hshReqValues.put("Financialrequired", strFinancialrequired);
			hshValues.put("Financialrequired", strFinancialrequired);
			if (rs != null) {
				rs.close();
			}
			String strKccFlag = "";
			if (strLoanType.equalsIgnoreCase("a")) {
				rs = DBUtils.executeLAPSQuery("sel_agr_facilities^" + strAppNo);
				while (rs.next()) {

					String strFacAgrSchem = Helper.correctNull((String) rs
							.getString("facscheme"));
					if (strFacAgrSchem.equalsIgnoreCase("aQ")) {
						strKccFlag = "Y";
					}
				}

			}

			hshValues.put("strKccFlag", strKccFlag);

			hshValues.put("username", correctNull((String) hshReqValues
					.get("strOrgName")));
			// added by bhaskar for Crop Loan Aseesment

			if (strKccFlag.equalsIgnoreCase("Y")) {

				hshReqValues.put("hidapplicantid", strAppId);
				hshCropAss = (HashMap) EJBInvoker.executeStateLess(
						"comproposal", hshReqValues, "getCropLoan");
				hshValues.put("hshCropAss", hshCropAss);

				// added for interest subvention details

				hshReqValues.put("hidapplicantid", strAppId);
				hshkccIntSubVen = (HashMap) EJBInvoker.executeStateLess(
						"agrcrops", hshReqValues,
						"getInterestSubventionDetails");
				hshValues.put("hshkccIntSubVen", hshkccIntSubVen);

			}

			// Values In
			if (strValuesIn.equals("C")) {
				strValuesIn = "Crore";
			} else if (strValuesIn.equals("L")) {
				strValuesIn = "Lacs";
			} else if (strValuesIn.equals("R")) {
				strValuesIn = "Rs";
			}

			hshValues.put("strValuesIn", strValuesIn);
			rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strAppNo);
			if (rs.next()) {
				hshValues.put("com_amountvalue", Helper.correctNull(rs
						.getString("com_amountvalue")));
				strAmountValue = Helper.correctNull(rs
						.getString("com_amountvalue"));
			}

			if (strAmountValue.equalsIgnoreCase("C")) {
				strAmtValueIn = "Crore";
			} else if (strAmountValue.equalsIgnoreCase("L")) {
				strAmtValueIn = "Lacs";
			} else {
				strAmtValueIn = "Rs";
			}

			hshValues.put("strAmountValue", strAmountValue);
			hshValues.put("strAmtValueIn", strAmtValueIn);

			if (!strOrgCode.equals("")) {
				strOrgCode = strOrgCode.substring(0, 6) + "%";
			}
			rs = DBUtils.executeLAPSQuery("sel_financeid^" + strAppNo);
			if (rs.next()) {
				strFinid = Integer.parseInt(Helper.correctInt((String) rs
						.getString("DEMO_FINSTANDARD")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("comfinance_finappid^" + strFinid);
			if (rs.next()) {
				strFinvaluesIn = correctNull(rs.getString("fin_valuesarein"));
			} else {
				strFinvaluesIn = "R";
			}
			if (rs != null) {
				rs.close();
			}

			// Financail Values In
			if (strFinvaluesIn.equals("C")) {
				strFinvaluesIn = "Crore";
			} else if (strFinvaluesIn.equals("L")) {
				strFinvaluesIn = "Lacs";
			} else if (strFinvaluesIn.equals("R")) {
				strFinvaluesIn = "Rs";
			}
			hshValues.put("strFinvaluesIn", strFinvaluesIn);
			// Region
			if (rs != null) {
				rs.close();
			}
			String livedate = ApplicationParams.getStrCLPHdate();
			String postsanctionflag = "";
			String applicationStatus = "";
			// check when application is created
			String appcreatedate = "";

			strQuery = SQLParser.getSqlQuery("getcreatedate^" + strAppNo);
			rs5 = DBUtils.executeQuery(strQuery);
			if (rs5.next()) {

				appcreatedate = rs5.getString("createddate");
				applicationStatus = rs5.getString("APP_STATUS");
			}
			System.out.println("Application created date-->" + appcreatedate);
			System.out.println("Sanction  Live Date-->" + livedate);
			if (!livedate.equalsIgnoreCase("")
					&& !appcreatedate.equalsIgnoreCase("")) {
				String Pattern = "dd/MM/yyyy";
				DateFormat df = new SimpleDateFormat(Pattern);
				Date appcreationdate = df.parse(appcreatedate);
				Date postsanclivedate = df.parse(livedate);

				if (appcreationdate.before(postsanclivedate)
						&& applicationStatus.equalsIgnoreCase("pa")) {
					rs = DBUtils
							.executeLAPSQuery("sel_ApplnBranch^" + strAppNo);
				} else {
					rs = DBUtils.executeLAPSQuery("sel_ApplnBranchnewchk^"
							+ strAppNo);
				}
			}
			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
				strAppOrgCode = Helper.correctNull(rs.getString("org_code"));
				hshValues.put("strLodgedDate", correctNull(rs
						.getString("app_lodgeddate")));
				hshValues.put("strDelodgedDate", correctNull(rs
						.getString("app_delodgeddate")));

				if (Helper.correctNull(rs.getString("APP_ORGLEVEL"))
						.equalsIgnoreCase("C")
						|| Helper.correctNull(rs.getString("APP_ORGLEVEL"))
								.equalsIgnoreCase("D")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_pertainingbr^"
							+ strAppNo);
					if (rs.next()) {
						hshValues.put("org_name", correctNull(rs
								.getString("org_name")));
						strAppOrgCode = Helper.correctNull(rs
								.getString("org_code"));
					}
				}
			}

			if (!strAppOrgCode.equals("")) {
				strAppOrgCode = strAppOrgCode.substring(0, 6) + "%";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_region^" + strAppOrgCode);
			if (rs.next()) {
				hshValues.put("Reg_org_name", correctNull(rs
						.getString("org_name")));
			}

			// Date of Credit Application
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_selectinwardcusttype^"
					+ strAppNo);
			if (rs.next()) {
				hshValues.put("inward_appliedon", correctNull(rs
						.getString("inward_appliedon")));
			}

			// Internal RMD Rating
			if (rs != null) {
				rs.close();
			}
			String cre_weight = "";
			rs = DBUtils.executeLAPSQuery("sel_rate_userid^" + strAppNo);
			if (rs.next()) {
				hshValues.put("cre_rating", correctNull(rs
						.getString("cre_rating")));
				cre_weight = correctNull(rs.getString("cre_weight"));
				if (cre_weight.equalsIgnoreCase("KB1")) {
					cre_weight += " - Minimal Risk";
				} else if (cre_weight.equalsIgnoreCase("KB2")) {
					cre_weight += " - Lowest Risk";
				} else if (cre_weight.equalsIgnoreCase("KB3")) {
					cre_weight += " - Lower Risk";
				} else if (cre_weight.equalsIgnoreCase("KB4")) {
					cre_weight += " - Low Risk";
				} else if (cre_weight.equalsIgnoreCase("KB5")) {
					cre_weight += " - Moderate Risk";
				} else if (cre_weight.equalsIgnoreCase("KB6")) {
					cre_weight += " - Average Risk";
				} else if (cre_weight.equalsIgnoreCase("KB7")) {
					cre_weight += " - High Risk";
				} else if (cre_weight.equalsIgnoreCase("KB8")) {
					cre_weight += " - Very high Risk";
				} else if (cre_weight.equalsIgnoreCase("KB9")) {
					cre_weight += " - Sub standard (highest)";
				} else if (cre_weight.equalsIgnoreCase("KB10")) {
					cre_weight += " - Doubt full/ loss (critical)";
				}
				hshValues.put("cre_weight", cre_weight);
				hshValues.put("crermd_rating", correctNull(rs
						.getString("cre_rating")));
				hshValues.put("crermd_rating_year", correctNull(rs
						.getString("rating_year")));

				if (correctNull(rs.getString("rating_yeartype"))
						.equalsIgnoreCase("A"))
					hshValues.put("crermd_rating_yeartype", "Audited");
				else if (correctNull(rs.getString("rating_yeartype"))
						.equalsIgnoreCase("U"))
					hshValues.put("crermd_rating_yeartype", "Unaudited");
				else if (correctNull(rs.getString("rating_yeartype"))
						.equalsIgnoreCase("E"))
					hshValues.put("crermd_rating_yeartype", "Estimated");
				else
					hshValues.put("crermd_rating_yeartype", " ");
			}

			if (rs != null) {
				rs.close();
			}
			cre_weight = "";
			rs = DBUtils.executeLAPSQuery("sel_crerating^" + strAppNo);
			if (rs.next()) {
				cre_weight = correctNull(rs.getString("cre_weight"));
				if (cre_weight.equalsIgnoreCase("KB1")) {
					cre_weight += " - Minimal Risk";
				} else if (cre_weight.equalsIgnoreCase("KB2")) {
					cre_weight += " - Lowest Risk";
				} else if (cre_weight.equalsIgnoreCase("KB3")) {
					cre_weight += " - Lower Risk";
				} else if (cre_weight.equalsIgnoreCase("KB4")) {
					cre_weight += " - Low Risk";
				} else if (cre_weight.equalsIgnoreCase("KB5")) {
					cre_weight += " - Moderate Risk";
				} else if (cre_weight.equalsIgnoreCase("KB6")) {
					cre_weight += " - Average Risk";
				} else if (cre_weight.equalsIgnoreCase("KB7")) {
					cre_weight += " - High Risk";
				} else if (cre_weight.equalsIgnoreCase("KB8")) {
					cre_weight += " - Very high Risk";
				} else if (cre_weight.equalsIgnoreCase("KB9")) {
					cre_weight += " - Sub standard (highest)";
				} else if (cre_weight.equalsIgnoreCase("KB10")) {
					cre_weight += " - Doubt full/ loss (critical)";
				}
				hshValues.put("creweight_recent", cre_weight);
				hshValues.put("creratyear_recent", correctNull(rs
						.getString("rating_year")));
				String cre_ratingType = correctNull(rs
						.getString("rating_yeartype"));

				if (cre_ratingType.equalsIgnoreCase("A")) {
					cre_ratingType = "AUDITED";
				} else if (cre_ratingType.equalsIgnoreCase("U")) {
					cre_ratingType = "UNAUDITED";
				} else if (cre_ratingType.equalsIgnoreCase("E")) {
					cre_ratingType = "ESTIMATED";
				} else if (cre_ratingType.equalsIgnoreCase("P")) {
					cre_ratingType = "PROJECTION";
				} else {
					cre_ratingType = "";
				}
				hshValues.put("crerattype_recent", cre_ratingType);
			}

			// Brief Background
			String strsancdept = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
					+ strAppNo);
			if (rs.next()) {
				strVal = correctNull(rs.getString("com_submittedto"));
				strsancdept = correctNull(rs.getString("com_sancdept"));
				hshValues.put("com_sancdeptcode", strsancdept);
				if (strsancdept.equalsIgnoreCase("011")) {
					hshValues.put("com_sancdept", "Central Processing Centre");
				} else if (strsancdept.equalsIgnoreCase("008")) {
					hshValues.put("com_sancdept", "Credit A ");
				} else if (strsancdept.equalsIgnoreCase("010")) {
					hshValues.put("com_sancdept", "Credit B ");
				} else if (strsancdept.equalsIgnoreCase("007")) {
					hshValues.put("com_sancdept", "Branch");
				} else if (strsancdept.equalsIgnoreCase("006")) {
					hshValues.put("com_sancdept", "Regional Office");
				}

				if (rs1 != null) {
					rs1.close();
				}
				if (!strsancdept.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "26" + "^" + strsancdept);
					if (rs1.next()) {
						hshValues.put("strSanctiondept", Helper.correctNull(rs1
								.getString("cbs_static_data_desc")));
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (!strVal.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"
							+ "21" + "^" + strVal);
					if (rs1.next()) {
						strVal = Helper.correctNull(rs1
								.getString("stat_data_desc1"));
					} else {
						strVal = "";
					}
				} else {
					strVal = "";
				}

				/*
				 * if(strVal.equalsIgnoreCase("adm")){strVal = "Administrator";}
				 * else if(strVal.equalsIgnoreCase("999")){strVal =
				 * "DGM Admin";} else if(strVal.equalsIgnoreCase("001")){strVal
				 * = "Officer";} else if(strVal.equalsIgnoreCase("002")){strVal
				 * = "General Manager";} else
				 * if(strVal.equalsIgnoreCase("003")){strVal = "Chief Manager";}
				 * else{strVal = "";}
				 */

				hshValues.put("com_partyfileno", correctNull(rs
						.getString("com_partyfileno")));
				hshValues.put("com_meeting", correctNull(rs
						.getString("com_meeting")));
				hshValues.put("com_meetingdate", correctNull(rs
						.getString("com_meetingdate")));
				hshValues.put("com_submittedto", strVal);
				hshValues.put("com_branchrcvddate", correctNull(rs
						.getString("com_branchrcvddate")));
				hshValues.put("com_branchcompletedate", correctNull(rs
						.getString("com_branchcompletedate")));
				hshValues.put("com_sancauthority", correctNull(rs
						.getString("com_sancauthority")));
				hshValues.put("com_processnotedate", correctNull(rs
						.getString("com_processnotedate")));
				hshValues.put("com_sancauthorityVal", Helper.CLOBToString(rs
						.getClob("com_comments")));
				hshValues
						.put("com_roho", correctNull(rs.getString("com_roho")));
				hshValues.put("com_sancbranchcode", correctNull(rs
						.getString("com_sancbranch")));
				strSancBranch = correctNull(rs.getString("com_sancbranch"));
				if (strSancBranch.equalsIgnoreCase("RFD")) {
					hshValues
							.put("com_sancbranch", "Retail Finance Department");
				} else if (strSancBranch.equalsIgnoreCase("MCFD")) {
					hshValues.put("com_sancbranch",
							"MID CORPORATE FINANCE DIVISION");
				} else if (strSancBranch.equalsIgnoreCase("ASG")) {
					hshValues
							.put("com_sancbranch", "AGRICULTURE SUPPORT GROUP");
				} else if (strSancBranch.equalsIgnoreCase("LCFD")) {
					hshValues.put("com_sancbranch", "LCFD");
				} else if (strSancBranch.equalsIgnoreCase("FS")) {
					hshValues.put("com_sancbranch", "FOREX SUPPORT");
				}

				hshValues.put("com_griddate", correctNull(rs
						.getString("com_griddate")));
				hshValues.put("com_processingfee", jtn.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("com_processingfee")))));

				hshValues.put("COM_CFR_VERIFIED", correctNull(rs
						.getString("COM_CFR_VERIFIED")));
				hshValues.put("COM_CFR_BORNAME", correctNull(rs
						.getString("COM_CFR_BORNAME")));
				hshValues.put("COM_CFR_DEV_RENFO", correctNull(rs
						.getString("COM_CFR_DEV_RENFO")));

				hshValues.put("STATUS_VERIFIED", correctNull(rs
						.getString("STATUS_VERIFIED")));

				if (correctNull(rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("A")) {
					strStatusVer = "APPROVED";
				} else if (correctNull(rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("R")) {
					strStatusVer = "REJECTED";
				}

				hshValues.put("LOAN_APPR_DATE", correctNull(rs
						.getString("COM_APPR_DATE")));
				ApprUserid = correctNull(rs.getString("COM_USERID2"));

				if (ApprUserid != "") {
					if (rs1 != null) {
						rs1.close();
					}

					strQuery = SQLParser.getSqlQuery("selectusername^"
							+ ApprUserid);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshValues.put("appuserid", correctNull((String) rs1
								.getString("name")));
					}
				}

				hshValues.put("strStatusVer", strStatusVer);
				if (rs1 != null) {
					rs1.close();
				}
				if (!Helper.correctNull(rs.getString("com_sancauthority"))
						.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "15" + "^" + rs.getString("com_sancauthority"));
					if (rs1.next()) {
						hshValues.put("strSanctionAuthDesc", Helper
								.correctNull(rs1
										.getString("cbs_static_data_desc")));
					}
				}
				hshValues.put("COM_CSLMSNO", correctNull(rs
						.getString("COM_CSLMSNO")));
			}

			hshFacVal = getFacilityDetails(strAppNo);

			hshValues.put("dblFBLimitTot", hshFacVal.get("dblFBLimitTot"));
			hshValues
					.put("dblFBOutstandTot", hshFacVal.get("dblFBOutstandTot"));
			hshValues
					.put("dblFBExposureTot", hshFacVal.get("dblFBExposureTot"));
			hshValues.put("dblFBBorrLimit", hshFacVal.get("dblFBBorrLimit"));
			hshValues.put("dblFBPropLiimitTot", hshFacVal
					.get("dblFBPropLiimitTot"));

			hshValues.put("dblNFBLimitTot", hshFacVal.get("dblNFBLimitTot"));
			hshValues.put("dblNFBOutstandTot", hshFacVal
					.get("dblNFBOutstandTot"));
			hshValues.put("dblNFBExposureTot", hshFacVal
					.get("dblNFBExposureTot"));
			hshValues.put("dblNFBBorrLimit", hshFacVal.get("dblNFBBorrLimit"));
			hshValues.put("dblNFBPropLiimitTot", hshFacVal
					.get("dblNFBPropLiimitTot"));

			hshValues.put("dblLimitTot", hshFacVal.get("dblLimitTot"));
			hshValues.put("dblOutstandTot", hshFacVal.get("dblOutstandTot"));
			hshValues.put("dblExposureTot", hshFacVal.get("dblExposureTot"));
			hshValues.put("dblBorrLimit", hshFacVal.get("dblBorrLimit"));
			hshValues
					.put("dblPropLiimitTot", hshFacVal.get("dblPropLiimitTot"));
			hshValues.put("dblTotExp", hshFacVal.get("dblTotExp"));
			hshValues.put("strOutstandingDate", hshFacVal
					.get("strOutstandingDate"));
			hshValues.put("dblFreshLimit", hshFacVal.get("dblFreshLimit"));
			hshValues.put("dblPropLimitTot", hshFacVal.get("dblPropLimitTot"));

			hshValues.put("arrFacRow", hshFacVal.get("arrFacRow"));

			// For Finding Main or Sub Limit by DINESH

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				arrLimit = new ArrayList();
				strVal = Helper.correctInt(rs.getString("facility_sno"));
				strVal1 = Helper.correctInt(rs.getString("facility_group"));
				strVal2 = Helper.correctInt(rs.getString("facility_repaytype"));
				strVal3 = Helper.correctInt(rs.getString("facheaddesc"));

				if (strVal1.equals("0")) {
					strVal1 = "Main-Limit";
				} else {
					strVal1 = "Sub-Limit";
				}

				arrLimit.add(strVal1);
				arrRowLimit.add(arrLimit);

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strVal);
				while (rs1.next()) {
					arrLimit = new ArrayList();
					strVal = "";
					strVal1 = Helper
							.correctInt(rs1.getString("facility_group"));
					strVal2 = Helper.correctInt(rs1
							.getString("facility_repaytype"));
					strVal3 = Helper.correctInt(rs1.getString("facheaddesc"));

					if (strVal1.equals("0")) {
						strVal1 = "Main-Limit";
					} else {
						strVal1 = "Sub-Limit";
					}

					arrLimit.add(strVal1);
					arrRowLimit.add(arrLimit);

				}

			}
			hshValues.put("arrRowLimit", arrRowLimit);

			// Present Proposal
			String strPresentWC = "", strPreWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_modeofrepay^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				strPresentWC = "";
				arrOutCol = new ArrayList();

				strVal = correctNull(rs.getString("facility_repaytype"));

				if (strVal.equalsIgnoreCase("E")) {
					strVal = "EMI";
				} else if (strVal.equalsIgnoreCase("NE")) {
					strVal = "Non EMI";
				} else if (strVal.equalsIgnoreCase("OD")) {
					strVal = "On Demand";
				} else if (strVal.equalsIgnoreCase("LC")) {
					strVal = "As Per LC Terms";
				} else if (strVal.equalsIgnoreCase("CO")) {
					strVal = "As Per Contract Terms";
				} else if (strVal.equalsIgnoreCase("BG")) {
					strVal = "As Per BG Rules";
				} else if (strVal.equalsIgnoreCase("DD")) {
					strVal = "On Due Date";
				} else if (strVal.equalsIgnoreCase("PC")) {
					strVal = "From the proceeds of PSC / by realization of bill";
				} else if (strVal.equalsIgnoreCase("PS")) {
					strVal = "By Realization of Export Bills";
				} else if (strVal.equalsIgnoreCase("PR")) {
					strVal = "By Realization of Respective Bills";
				} else if (strVal.equalsIgnoreCase("TG")) {
					strVal = "As per TCBG Rules";
				} else {
					strVal = "";
				}

				arrOutCol
						.add(correctNull(rs.getString("facility_displaydesc")));
				arrOutCol.add(strVal);
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));
				arrOutCol.add(correctNull(rs.getString("facility_facnature")));
				arrOutRow.add(arrOutCol);
			}
			double dblAmount = 0.00;
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_fundbasedfacility^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_proposed"))));
				arrPresentWC.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble((String) rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strPresentWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ jtn.format(dblAmount);
				strPreWClimit = strPreWClimit + strPresentWC + "@";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_fundbasedfacilityTL^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_proposed"))));
				arrPresentTL.add(arrOutCol);
			}
			hshValues.put("strPreWClimit", strPreWClimit);
			hshValues.put("arrFAConlyRow", arrOutRow);
			hshValues.put("arrPresentWC", arrPresentWC);
			hshValues.put("arrPresentTL", arrPresentTL);

			// Existing Proposal
			String strExiWC = "", strExiWClimit = "", strProcnoteExiWC = "", strProcnoteWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			// String strQuery="";
			strQuery = SQLParser.getSqlQuery("com_FACSel_existing^" + strAppNo
					+ "^" + strLoanType);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				dblAmount = 0.00;
				strExiWC = "";
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add("");
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));

				arrOutRow.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				arrOutCol = new ArrayList();
				strExiWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ jtn.format(dblAmount);
				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_existing")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strProcnoteExiWC = correctNull(rs.getString("com_facdesc"))
						+ " - " + jtn.format(dblAmount);
				strExiWClimit = strExiWClimit + strExiWC + "@";
				strProcnoteWClimit = strProcnoteWClimit + strProcnoteExiWC
						+ "@";
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper.correctInt(rs
						.getString("facility_existing"))));
				arrExistingWC.add(arrOutCol);

			}
			hshValues.put("strExiWClimit", strExiWClimit);
			hshValues.put("arrFACexistingRow", arrOutRow);
			hshValues.put("strProcnoteWClimit", strProcnoteWClimit);
			hshValues.put("arrExistingWC", arrExistingWC);
			// Gist of Proposal
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_comments^gist^" + strAppNo);
			if (rs.next()) {
				hshValues.put("GistOfProp", correctNull(Helper.CLOBToString(rs
						.getClob(("com_comments")))));
			}

			// Customer Profile
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			strVal = "";

			if (rs.next()) {
				hshValues.put("perapp_name", correctNull(rs
						.getString("perapp_fname")));
				hshValues.put("perapp_banksince", correctNull(rs
						.getString("perapp_banksince")));
				hshValues.put("perapp_bank", correctNull(rs
						.getString("perapp_bank")));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selCBSstaticdatanew^1");
				while (rs1.next()) {
					if (correctNull(
							(String) rs1.getString("cbs_static_data_code"))
							.trim().equals(
									correctNull(
											(String) rs
													.getString("perapp_title"))
											.trim())) {
						hshValues.put("perapp_title", correctNull(rs1
								.getString("cbs_static_data_desc")));
						break;
					}
				}
			}

			// Recommendations
			ArrayList arrMCLR = new ArrayList();
			ArrayList arrBanking = new ArrayList();
			String strType = "", strfacsel = "", strFac = "", StrIntType = "", strFacGroup = "", strAdhocFac = "";
			String strAdhocArr[] = null;
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				arrOutCol = new ArrayList();
				strVal = "";
				strType = "";
				strFacGroup = Helper.correctInt(rs.getString("facility_sno"));
				strVal1 = Helper.correctInt(rs.getString("facility_group"));
				strVal2 = Helper.correctInt(rs.getString("facility_repaytype"));

				dblBaseRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_baserate")));
				dblInterestRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_sancinterest")));
				strInterestType = Helper.correctNull((String) rs
						.getString("facility_intsubtype"));
				strAdhocFac = Helper.correctNull(rs
						.getString("facility_adhocfac"));
				strAdhocArr = strAdhocFac.split("~");

				if (!arrBanking.contains(Helper.correctNull(rs
						.getString("FACILITY_PROPBANKTYPE"))))
					arrBanking.add(Helper.correctNull(rs
							.getString("FACILITY_PROPBANKTYPE")));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facility_mclrspread^"
						+ strFacGroup + "^" + strAppNo);

				if (rs1.next()) {
					dblDiffIntRate = dblInterestRate - dblBaseRate;
					String strTemp = Helper.correctNull(rs1
							.getString("facility_mclrtype"));
					String strTempforfbil=Helper.correctNull(rs1.getString("facility_mclrtype"));
					String strfbildate=Helper.correctNull(rs1.getString("FBILL_DATE"));
					if (!strTemp.equalsIgnoreCase("")) {
						String[] strArr = strTemp.split("@");
						if (strArr.length > 1) {
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selcbsiddatadesc^34^"
											+ strArr[0]);
							if (rs3.next()) {
								strTemp = Helper.correctNull(rs3
										.getString("cbs_static_data_desc"));
							}
						} else {
							strTemp = "";
						}
					} else {
						strTemp = "";
					}
					strInterestRate = strTemp + " + "
							+ dc.format(dblDiffIntRate) + "% p.a presently at "
							+ dc.format(dblInterestRate) + "% p.a";
					strWhetherBRAvail = "Y";
					if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
					{
						if(strTempforfbil.contains("FD")||strTempforfbil.contains("FM"))
						{
					    arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"+ " as on "+ strfbildate);
						}
						else
						{
						arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");		
						}
					}
				
				} else {
					if (strInterestType.equalsIgnoreCase("BR")) {
						dblDiffIntRate = dblInterestRate - dblBaseRate;
						strInterestRate = "BR + " + dc.format(dblDiffIntRate)
								+ "% p.a presently at "
								+ dc.format(dblInterestRate) + "% p.a";
						strWhetherBRAvail = "Y";
					} else {
						strInterestRate = Helper.correctDouble(rs
								.getString("facility_interest"));
					}
				}
				if (strVal1.equals("0")) {
					strVal1 = "Main-Limit";
					strFac = correctNull(rs.getString("facility_desc"));
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
						+ Helper.correctInt(rs.getString("facility_sel_type")));
				if (rs1.next()) {
					strfacsel = Helper.correctNull(rs1
							.getString("STAT_DATA_DESC1"));
				}

				if (strVal2.equalsIgnoreCase("E")) {
					strVal2 = "EMI";
				} else if (strVal2.equalsIgnoreCase("NE")) {
					strVal2 = "Non EMI";
				} else if (strVal2.equalsIgnoreCase("OD")) {
					strVal2 = "On Demand";
				} else if (strVal2.equalsIgnoreCase("LC")) {
					strVal2 = "As Per LC Terms";
				} else if (strVal2.equalsIgnoreCase("CO")) {
					strVal2 = "As Per Contract Terms";
				} else if (strVal2.equalsIgnoreCase("BG")) {
					strVal2 = "As Per BG Rules";
				} else if (strVal2.equalsIgnoreCase("DD")) {
					strVal2 = "On Due Date";
				} else if (strVal2.equalsIgnoreCase("PC")) {
					strVal2 = "From the proceeds of PSC / by realization of bill";
				} else if (strVal2.equalsIgnoreCase("PS")) {
					strVal2 = "By Realization of Export Bills";
				} else if (strVal2.equalsIgnoreCase("PR")) {
					strVal2 = "By Realization of Respective Bills";
				} else if (strVal2.equalsIgnoreCase("TG")) {
					strVal2 = "As per TCBG Rules";
				} else {
					strVal2 = "";
				}

				/*
				 * if(strType.equalsIgnoreCase("1")) {
				 * arrOutCol.add(correctNull(rs.getString("com_facdesc")));//0 }
				 * else {
				 * arrOutCol.add(correctNull(rs.getString("com_facdesc")));//0 }
				 */
				// if(strType.equalsIgnoreCase("1"))
				// {
				// arrOutCol.add(correctNull(rs.getString("facility_desc")));
				// }
				// else
				// {
				arrOutCol.add(correctNull(rs.getString("facility_desc")));
				// }
				if (correctNull(rs.getString("com_headfac")).equalsIgnoreCase(
						"1")) {
					double dblAmt = Double.parseDouble(Helper.correctDouble(rs
							.getString("facility_sancamt")));
					dblAmt = dblAmt / 50;
					arrOutCol.add(String.valueOf(dblAmt));
				} else {
					arrOutCol.add(Helper.correctDouble(rs
							.getString("facility_sancamt")));// 1
				}
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_existing")));// 2
				arrOutCol.add(strInterestRate);// 3
				arrOutCol.add(Helper.correctInt(rs.getString("facility_sno")));// 4
				arrOutCol.add(strVal1);// 5
				arrOutCol.add(Helper
						.correctInt(rs.getString("facility_months")));// 6
				arrOutCol.add(correctNull(rs.getString("facility_for")));// 7
				// arrOutCol.add(strVal);
				arrOutCol.add(strfacsel);// 8
				arrOutCol.add(strVal2);// 9
				arrOutCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("facility_margin"))));// 10
				strHoliday = Helper.correctInt(rs
						.getString("facility_holidayperiod"));
				if (strHoliday.equalsIgnoreCase("0"))
					arrOutCol.add("Not Applicable");// 11
				else
					arrOutCol.add(Helper.correctInt(rs
							.getString("facility_holidayperiod")));
				arrOutCol.add(strInterestType);// 12
				arrOutCol.add(correctNull(rs.getString("facility_duedate"))); // 13
				String strComments = "";
				strFacSno = Helper.correctNull(rs.getString("facility_sno"));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate^"
								+ strFacSno + "^" + strAppNo);
				if (rs1.next()) {
					strComments = correctNull(Helper.CLOBToString(rs1
							.getClob("COM_COMMENTS")));
					if (true) {
						arrOutCol.add(correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS"))));// 14
					}
				} else {
					arrOutCol.add("");// 14
				}
				arrOutCol.add(Helper.correctNull(rs
						.getString("facility_duedate"))); // 15
				StrIntType = Helper.correctNull(rs
						.getString("facility_inttype"));
				if (StrIntType.equalsIgnoreCase("flo")) {
					StrIntType = "Floating";
				} else if (StrIntType.equalsIgnoreCase("fix")) {
					StrIntType = "Fixed";
				}
				arrOutCol.add(StrIntType);// 16
				arrOutCol.add(Helper.correctDouble(rs
						.getString("fac_metlifepremiumamt")));// 17
				// for CBS Branch display
				String strOrg_Name = "";
				strQuery = SQLParser.getSqlQuery("sel_cbsdetails^" + strAppNo
						+ "^" + strFacSno);
				if (rs3 != null)
					rs3.close();
				rs3 = DBUtils.executeQuery(strQuery);
				if (rs3.next()) {
					strOrgCode = Helper.correctNull(rs3
							.getString("LOANDISBBRANCH"));
					strOrg_Name = "";
					if (!strOrgCode.equalsIgnoreCase("")) {
						if (rs4 != null) {
							rs4.close();
						}
						strQuery = SQLParser.getSqlQuery("selectorgname^"
								+ strOrgCode);
						rs4 = DBUtils.executeQuery(strQuery);
						if (rs4.next()) {
							strOrg_Name = Helper.correctNull((String) rs4
									.getString("org_name"));
							arrOutCol.add(strOrg_Name);
							// hshRecord.put("strOrg_Name", strOrg_Name);
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				strRoiType = Helper.correctNull(rs
						.getString("FAC_INS_COMPANY_NAME"));
				if (rs4 != null) {
					rs4.close();
				}
				if (!strRoiType.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"
							+ strRoiType);
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 19
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				arrOutCol.add(strRoiType);// 20

				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_TENOR")));// 21
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_LOAN_AMOUNT")));// 22
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_INS_ACCOUNT_NO")));// 23
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_AMOUNT")));// 24
				StrInsCompanyName = Helper.correctNull(rs
						.getString("FAC_INS_FUNDED_COMPANY_NAME"));
				if (rs4 != null) {
					rs4.close();
				}
				if (!StrInsCompanyName.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"
							+ StrInsCompanyName);
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				// end

				if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("A"))
					arrOutCol.add("Adhoc Limit");
				else if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("R"))
					arrOutCol.add("Regular Limit");
				else if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("O"))
					arrOutCol.add("One Time Limit");
				else if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("D"))
					arrOutCol.add("Additional Limit");
				else
					arrOutCol.add(" ");

				if (rs4 != null) {
					rs4.close();
				}
				if (!Helper.correctNull(rs.getString("fac_actualmargin"))
						.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^235^"
							+ Helper.correctNull(rs
									.getString("fac_actualmargin")));
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				if (rs4 != null) {
					rs4.close();
				}
				if (!Helper.correctNull(rs.getString("fac_actualrelaxed"))
						.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^236^"
							+ Helper.correctNull(rs
									.getString("fac_actualrelaxed")));
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				if (Helper.correctNull(rs.getString("fac_marginrelax"))
						.equalsIgnoreCase("Y"))
					arrOutCol.add("Yes");
				else if (Helper.correctNull(rs.getString("fac_marginrelax"))
						.equalsIgnoreCase("N"))
					arrOutCol.add("No");
				else
					arrOutCol.add("");

				arrOutRow.add(arrOutCol);

				if (rs2 != null) {
					rs2.close();
				}
				rs2 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strFacGroup);
				while (rs2.next()) {

					arrOutCol = new ArrayList();
					strVal = "";
					strType = "";
					strVal1 = Helper
							.correctInt(rs2.getString("facility_group"));
					strVal2 = Helper.correctInt(rs2
							.getString("facility_repaytype"));

					dblBaseRate = Double.parseDouble(Helper
							.correctDouble((String) rs2
									.getString("facility_baserate")));
					dblInterestRate = Double.parseDouble(Helper
							.correctDouble((String) rs2
									.getString("facility_sancinterest")));
					strInterestType = Helper.correctNull((String) rs2
							.getString("facility_intsubtype"));
					strAdhocFac = Helper.correctNull(rs2
							.getString("facility_adhocfac"));
					strAdhocArr = strAdhocFac.split("~");

					if (!arrBanking.contains(Helper.correctNull(rs2
							.getString("FACILITY_PROPBANKTYPE"))))
						arrBanking.add(Helper.correctNull(rs2
								.getString("FACILITY_PROPBANKTYPE")));

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_facility_mclrspread^"
							+ Helper.correctInt(rs2.getString("facility_sno"))
							+ "^" + strAppNo);

					if (rs1.next()) {
						dblDiffIntRate = dblInterestRate - dblBaseRate;
						String strTemp = Helper.correctNull(rs1
								.getString("facility_mclrtype"));
						String strTempforfbil=Helper.correctNull(rs1.getString("facility_mclrtype"));
						String strfbildate=Helper.correctNull(rs1.getString("FBILL_DATE"));
						if (!strTemp.equalsIgnoreCase("")) {
							String[] strArr = strTemp.split("@");
							if (strArr.length > 1) {
								if (rs3 != null)
									rs3.close();
								rs3 = DBUtils
										.executeLAPSQuery("selcbsiddatadesc^34^"
												+ strArr[0]);
								if (rs3.next()) {
									strTemp = Helper.correctNull(rs3
											.getString("cbs_static_data_desc"));
								}
							} else {
								strTemp = "";
							}
						} else {
							strTemp = "";
						}
						strInterestRate = strTemp + " + "
								+ dc.format(dblDiffIntRate)
								+ "% p.a presently at "
								+ dc.format(dblInterestRate) + "% p.a";
						strWhetherBRAvail = "Y";
						if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
						{
							if(strTempforfbil.contains("FD")||strTempforfbil.contains("FM"))
							{
						    arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"+ " as on "+ strfbildate);
							}
							else
							{
							arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");		
							}
						}
					} else {
						if (strInterestType.equalsIgnoreCase("BR")) {
							dblDiffIntRate = dblInterestRate - dblBaseRate;
							strInterestRate = "BR + "
									+ dc.format(dblDiffIntRate)
									+ "% p.a presently at "
									+ dc.format(dblInterestRate) + "% p.a";
							strWhetherBRAvail = "Y";
						} else {
							strInterestRate = Helper.correctDouble(rs2
									.getString("facility_interest"));
						}
					}

					{
						strVal1 = "Sub-Limit";

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_sublimitVal^"
								+ strAppNo
								+ "^"
								+ Helper.correctInt(rs2
										.getString("facility_group")));

						if (rs1.next()) {
							strVal1 = strVal1
									+ " -> "
									+ correctNull(rs1.getString("com_facdesc"))
											.toUpperCase();
						}

						strType = "1";
					}

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
							+ Helper.correctInt(rs2
									.getString("facility_sel_type")));
					if (rs1.next()) {
						strfacsel = Helper.correctNull(rs1
								.getString("STAT_DATA_DESC1"));
					}

					if (strVal2.equalsIgnoreCase("E")) {
						strVal2 = "EMI";
					} else if (strVal2.equalsIgnoreCase("NE")) {
						strVal2 = "Non EMI";
					} else if (strVal2.equalsIgnoreCase("OD")) {
						strVal2 = "On Demand";
					} else if (strVal2.equalsIgnoreCase("LC")) {
						strVal2 = "As Per LC Terms";
					} else if (strVal2.equalsIgnoreCase("CO")) {
						strVal2 = "As Per Contract Terms";
					} else if (strVal2.equalsIgnoreCase("BG")) {
						strVal2 = "As Per BG Rules";
					} else if (strVal2.equalsIgnoreCase("DD")) {
						strVal2 = "On Due Date";
					} else if (strVal2.equalsIgnoreCase("PC")) {
						strVal2 = "From the proceeds of PSC / by realization of bill";
					} else if (strVal2.equalsIgnoreCase("PS")) {
						strVal2 = "By Realization of Export Bills";
					} else if (strVal2.equalsIgnoreCase("PR")) {
						strVal2 = "By Realization of Respective Bills";
					} else if (strVal2.equalsIgnoreCase("TG")) {
						strVal2 = "As per TCBG Rules";
					} else {
						strVal2 = "";
					}

					/*
					 * if(strType.equalsIgnoreCase("1")) {
					 * arrOutCol.add(correctNull
					 * (rs.getString("com_facdesc")));//0 } else {
					 * arrOutCol.add(
					 * correctNull(rs.getString("com_facdesc")));//0 }
					 */
					// if(strType.equalsIgnoreCase("1"))
					// {
					// arrOutCol.add(correctNull(rs2.getString("facility_desc")));
					// }
					// else
					// {
					arrOutCol.add(correctNull(rs2.getString("facility_desc")));
					// }
					if (correctNull(rs2.getString("com_headfac"))
							.equalsIgnoreCase("1")) {
						double dblAmt = Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_sancamt")));
						dblAmt = dblAmt / 50;
						arrOutCol.add(String.valueOf(dblAmt));
					} else {
						arrOutCol.add(Helper.correctDouble(rs2
								.getString("facility_sancamt")));// 1
					}
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("facility_existing")));// 2
					arrOutCol.add(strInterestRate);// 3
					arrOutCol.add(Helper.correctInt(rs2
							.getString("facility_sno")));// 4
					arrOutCol.add(strVal1);// 5
					arrOutCol.add(Helper.correctInt(rs2
							.getString("facility_months")));// 6
					arrOutCol.add(correctNull(rs2.getString("facility_for")));// 7
					// arrOutCol.add(strVal);
					arrOutCol.add(strfacsel);// 8
					arrOutCol.add(strVal2);// 9
					arrOutCol.add(correctNull(Helper.CLOBToString(rs2
							.getClob("facility_margin"))));// 10
					strHoliday = Helper.correctInt(rs2
							.getString("facility_holidayperiod"));
					if (strHoliday.equalsIgnoreCase("0"))
						arrOutCol.add("Not Applicable");// 11
					else
						arrOutCol.add(Helper.correctInt(rs2
								.getString("facility_holidayperiod")));
					arrOutCol.add(strInterestType);// 12
					arrOutCol
							.add(correctNull(rs2.getString("facility_duedate"))); // 13
					strComments = "";
					strFacSno = Helper.correctNull(rs2
							.getString("facility_sno"));
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate^"
									+ strFacSno + "^" + strAppNo);
					if (rs1.next()) {
						strComments = correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS")));
						if (true) {
							arrOutCol.add(correctNull(Helper.CLOBToString(rs1
									.getClob("COM_COMMENTS"))));// 14
						}
					} else {
						arrOutCol.add("");// 14
					}
					arrOutCol.add(Helper.correctNull(rs2
							.getString("facility_duedate"))); // 15
					StrIntType = Helper.correctNull(rs2
							.getString("facility_inttype"));
					if (StrIntType.equalsIgnoreCase("flo")) {
						StrIntType = "Floating";
					} else if (StrIntType.equalsIgnoreCase("fix")) {
						StrIntType = "Fixed";
					}
					arrOutCol.add(StrIntType);// 16
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("fac_metlifepremiumamt")));
					// for CBS Branch display
					// String strOrg_Name="";
					strQuery = SQLParser.getSqlQuery("sel_cbsdetails^"
							+ strAppNo + "^" + strFacSno);
					if (rs3 != null)
						rs3.close();
					rs3 = DBUtils.executeQuery(strQuery);
					if (rs3.next()) {
						strOrgCode = Helper.correctNull(rs3
								.getString("LOANDISBBRANCH"));
						strOrg_Name = "";
						if (!strOrgCode.equalsIgnoreCase("")) {
							if (rs4 != null) {
								rs4.close();
							}
							strQuery = SQLParser.getSqlQuery("selectorgname^"
									+ strOrgCode);
							rs4 = DBUtils.executeQuery(strQuery);
							if (rs4.next()) {
								strOrg_Name = Helper.correctNull((String) rs4
										.getString("org_name"));
								arrOutCol.add(strOrg_Name);
								// hshRecord.put("strOrg_Name", strOrg_Name);
							} else {
								arrOutCol.add("");
							}
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					strRoiType = Helper.correctNull(rs2
							.getString("FAC_INS_COMPANY_NAME"));
					if (rs4 != null) {
						rs4.close();
					}
					if (!strRoiType.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^223^"
										+ strRoiType);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 19
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					arrOutCol.add(strRoiType);// 20

					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_TENOR")));// 21
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_LOAN_AMOUNT")));// 22
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_INS_ACCOUNT_NO")));// 23
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_AMOUNT")));// 24
					StrInsCompanyName = Helper.correctNull(rs2
							.getString("FAC_INS_FUNDED_COMPANY_NAME"));
					if (rs4 != null) {
						rs4.close();
					}
					if (!StrInsCompanyName.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^223^"
										+ StrInsCompanyName);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 25
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					if (Helper.correctNull(rs2.getString("facility_category"))
							.equalsIgnoreCase("A"))
						arrOutCol.add("Adhoc Limit");
					else if (Helper.correctNull(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("R"))
						arrOutCol.add("Regular Limit");
					else if (Helper.correctNull(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("O"))
						arrOutCol.add("One Time Limit");
					else if (Helper.correctNull(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("D"))
						arrOutCol.add("Additional Limit");
					else
						arrOutCol.add(" ");

					if (rs4 != null) {
						rs4.close();
					}
					if (!Helper.correctNull(rs2.getString("fac_actualmargin"))
							.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^235^"
										+ Helper.correctNull(rs2
												.getString("fac_actualmargin")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 27
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					if (rs4 != null) {
						rs4.close();
					}
					if (!Helper.correctNull(rs2.getString("fac_actualrelaxed"))
							.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^236^"
										+ Helper
												.correctNull(rs2
														.getString("fac_actualrelaxed")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 28
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					if (Helper.correctNull(rs2.getString("fac_marginrelax"))
							.equalsIgnoreCase("Y"))
						arrOutCol.add("Yes");
					else if (Helper.correctNull(
							rs2.getString("fac_marginrelax")).equalsIgnoreCase(
							"N"))
						arrOutCol.add("No");
					else
						arrOutCol.add("");

					// end

					arrOutRow.add(arrOutCol);
				}
			}

			if (rs != null) {
				rs.close();
			}
			ArrayList arrOutCol1 = new ArrayList();
			ArrayList arrOutRow1 = new ArrayList();

			strQuery = SQLParser.getSqlQuery("sel_facility_allcomments^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (rs1 != null) {
					rs1.close();
				}
				String str_repay = "repaycomment";
				rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^" + strAppNo
						+ "^repaycomment^"
						+ Helper.correctNull(rs.getString("facility_sno")));
				if (rs1.next()) {
					arrOutCol1 = new ArrayList();
					arrOutCol1.add(Helper.correctNull(rs
							.getString("facility_sno")));
					arrOutCol1
							.add(Helper.correctNull(rs.getString("fac_desc")));
					arrOutCol1.add(Helper.CLOBToString(rs1
							.getClob("fin_comments")));
					arrOutCol1.add(Helper.correctNull(rs1
							.getString("FIN_STAGEWISE_RELEASE")));
					arrOutRow1.add(arrOutCol1);
				}
			}
			hshValues.put("arrOutRow1", arrOutRow1);

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
					+ "^repaycomment");
			if (rs.next()) {
				hshValues.put("fin_comments_repay", Helper.CLOBToString(rs
						.getClob("fin_comments")));
			}

			hshValues.put("arrRecommRow", arrOutRow);
			hshValues.put("arrMCLR", arrMCLR);
			hshValues.put("arrBanking", arrBanking);
			hshValues.put("strWhetherBRAvail", strWhetherBRAvail);

			// MIS information
			String strSector = "", strSubSector = "", strcrtsales = "";
			if (rs != null) {
				rs.close();
			}
			arrMISRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_misapp_desc^" + strAppNo + "^"
					+ strLoanType);
			while (rs.next()) {
				arrMISCol = new ArrayList();
				arrMISCol.add(Helper.correctNull(rs
						.getString("FACILITY_DISPLAYDESC")));
				mainactivity = Helper.correctNull(rs
						.getString("app_mainactivity"));
				subactivity = Helper.correctNull(rs
						.getString("app_subactivity"));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "7"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_subsector")));
				if (rs1.next()) {
					strSubSector = Helper.correctNull((String) rs1
							.getString("mis_static_data_desc"));
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
							+ "8"
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("app_subsector")));
					if (rs1.next()) {
						strSubSector = Helper.correctNull((String) rs1
								.getString("mis_static_data_desc"));
					} else {
						strSubSector = "";
					}
				}

				if (mainactivity.equalsIgnoreCase("01")
						|| mainactivity.equalsIgnoreCase("02")) {
					arrMISCol.add(strSubSector);
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
							+ "2" + "^" + mainactivity);
					if (rs1.next()) {
						arrMISCol.add(Helper.correctNull(rs1
								.getString("mis_static_data_desc")));
					} else {
						arrMISCol.add("");
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}

				rs1 = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
						+ mainactivity + "^" + subactivity);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("mis_subactdesc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("app_activitycode")));
				strSector = Helper.correctNull((String) rs
						.getString("app_sector"));
				if (strSector.equalsIgnoreCase("01")
						|| strSector.equalsIgnoreCase("1")) {
					arrMISCol.add("Priority Sector");
				} else if (strSector.equalsIgnoreCase("02")
						|| strSector.equalsIgnoreCase("2")) {
					arrMISCol.add("Non Priority Sector");
				} else {
					arrMISCol.add(" ");
				}
				arrMISCol.add(strSubSector);

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "11"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_sensitivesector")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("Y"))
					arrMISCol.add("Yes");
				else if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("N"))
					arrMISCol.add("No");
				else
					arrMISCol.add("");

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "23"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GOVTANNOUNCESCHEME")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "17"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GUARANTEE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}

				arrMISCol
						.add(Helper.correctNull(rs.getString("app_guarantee")));
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_GUARANTEEAMT")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_cusdetails^" + strAppId);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_UDYAM_REGNO")));
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_SALES_TURNOVER")));
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_SALES_TURNOVER_DATE")));

					strcrtsales = Helper.correctNull((String) rs1
							.getString("PERAPP_CRITERIA_SALES_TURNOVER"));
					rs2 = DBUtils.executeLAPSQuery("selmiscust^243^"
							+ strcrtsales);
					if (rs2.next()) {
						arrMISCol.add(Helper.correctNull(rs2
								.getString("STAT_DATA_DESC1")));

					} else {
						arrMISCol.add("");
					}

				} else {
					arrMISCol.add("");
					arrMISCol.add("");
					arrMISCol.add("");

				}
				if (rs1 != null) {
					rs1.close();
				}
				arrMISCol.add(Helper.correctNull(rs.getString("app_plantval")));
				arrMISCol.add(Helper.correctNull(rs.getString("app_indname")));
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "12"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_AGRICULTURE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_INVESTMENT_DATE")));
				rs2 = DBUtils.executeLAPSQuery("selmiscust^248^"
						+ Helper.correctNull((String) rs
								.getString("APP_CRITERIA_INVESTMENT")));
				if (rs2.next()) {
					arrMISCol.add(Helper.correctNull(rs2
							.getString("STAT_DATA_DESC1")));

				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("facility")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "9"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_weakersec")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_MINISTRY_INDUSTRY")));
				if (rs6 != null) {
					rs6.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_minorityconstitutionchk^"
						+ strAppId);
				rs6 = DBUtils.executeQuery(strQuery);
				if (rs6.next()) {
					arrMISCol.add("Y");

				} else {
					arrMISCol.add("");
				}
				arrMISRow.add(arrMISCol);
			}
			hshValues.put("arrMISRow", arrMISRow);

			// Group Concen Exposure
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("comgroupconcernsselect_NEW^"
					+ strOldAppId + "^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				dblGrpExposure = Double.parseDouble(Helper.correctDouble(rs
						.getString("exposure")))
						+ dblGrpExposure;

				arrOutCol.add(correctNull(rs.getString("comapp_divisiontype")));
				arrOutCol.add(correctNull(rs.getString("comapp_div_name")));
				arrOutCol.add(Helper.correctDouble(rs.getString("exposure")));

				arrOutRow.add(arrOutCol);
			}

			dblTotalExposure = dblGrpExposure
					+ Double.parseDouble((String) hshFacVal.get("dblTotExp"));
			hshValues.put("arrGroupRow", arrOutRow);
			hshValues.put("dblGrpExposure", String.valueOf(dblGrpExposure));
			hshValues.put("dblTotalExposure", String.valueOf(dblTotalExposure));

			// External Rating
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}

			// String max_perappid="";
			// rs = DBUtils.executeLAPSQuery("sel_externalRating^"+strAppNo);

			/*
			 * rs = DBUtils.executeLAPSQuery("sel_max_perappid^"+strAppId);
			 * if(rs.next()) { max_perappid =
			 * Helper.correctInt(rs.getString("max_appid")); }
			 */

			if (rs != null) {
				rs.close();
			}
			String rating_type = "N";
			rs = DBUtils.executeLAPSQuery("cusratingnew_sel^" + strAppId);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("rat_agency")));// 0
				arrOutCol.add(correctNull(rs.getString("rat_particulars")));// 1
				arrOutCol.add(Helper.correctDouble(rs.getString("rat_amount")));// 2
				arrOutCol.add(correctNull(rs.getString("rat_symbol")));// 3
				arrOutCol.add(correctNull(Helper.CLOBToString(rs
						.getClob(("rat_desc")))));// 4
				arrOutCol.add(correctNull(rs.getString("rat_duedate")));// 5
				arrOutCol.add(Helper.correctNull(rs.getString("RATE_DATE")));// 6
				arrOutCol.add(Helper.correctNull(rs
						.getString("RAT_RISK_WEIGHT")));// 7
				hshValues.put("rating_type", "Y");
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrERatingRow", arrOutRow);

			// External Rating Comments
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppId
					+ "^cusratingnew");
			if (rs.next()) {
				hshValues.put("ExternalRatingComments", correctNull(Helper
						.CLOBToString(rs.getClob(("cmt_comments")))));
				hshValues.put("ExternalRatingComments1", correctNull(Helper
						.CLOBToString(rs.getClob(("cmt_intercomments")))));
			}

			// Banking Arrangement - Sole from Facility
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_SolefromFAC^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				strVal = correctNull(rs.getString("facility_propbanktype"));

				if (strVal.equals("S")) {
					strVal = "Sole";
				} else {
					strVal = "";
				}

				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(strVal);

				arrOutRow.add(arrOutCol);
			}

			// Sole from BA
			if (rs != null) {
				rs.close();
			}
			String strQuery2 = SQLParser.getSqlQuery("sel_SolefromBA^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery2);
			while (rs.next()) {
				String strFacility = Helper.correctNull((String) rs
						.getString("combk_facility"));
				String strFacilityCode[] = strFacility.split("~");
				String strFacilityId = strFacilityCode[1];
				String strFacilityFor = Helper.correctNull((String) rs
						.getString("combk_modtype"));
				String strFacilityDesc = "";
				if (rs1 != null) {
					rs1.close();

				}
				if (strFacilityFor.equalsIgnoreCase("r")) {
					rs1 = DBUtils.executeLAPSQuery("selLoanPurpose^"
							+ strFacilityId);
					if (rs1.next()) {
						strFacilityDesc = Helper.correctNull((String) rs1
								.getString("prddesc"));
					}
				} else {
					rs1 = DBUtils.executeLAPSQuery("sel_facilitycorp^"
							+ strFacilityId);
					if (rs1.next()) {
						strFacilityDesc = Helper.correctNull((String) rs1
								.getString("prddesc"));
					}
				}

				arrOutCol = new ArrayList();
				strVal = correctNull(rs.getString("combk_bnktype"));

				if (strVal.equals("S")) {
					strVal = "Sole";
				} else {
					strVal = "";
				}

				arrOutCol.add(strFacilityDesc);
				arrOutCol.add(strVal);

				arrOutRow.add(arrOutCol);
			}

			hshValues.put("arrSoleBARow", arrOutRow);

			if (rs != null) {
				rs.close();
			}

			String strProposalWC = "", strAnnxWC = "", strProposalMB = "", strAnnxMB = "", strProposalTL = "", strAnnxTL = "";
			/*
			 * by Kishan rs =
			 * DBUtils.executeLAPSQuery("sel_proposalNoteCheck^"+strAppNo);
			 * while(rs.next()) {
			 * if(Helper.correctNull((String)rs.getString("com_pagename"
			 * )).equalsIgnoreCase("WC")) { strProposalWC =
			 * Helper.correctNull((String)rs.getString("com_proposalnote")); }
			 * if(Helper.correctNull((String)rs.getString("com_pagename")).
			 * equalsIgnoreCase("MB")) { strProposalMB =
			 * Helper.correctNull((String)rs.getString("com_proposalnote")); }
			 * if(Helper.correctNull((String)rs.getString("com_pagename")).
			 * equalsIgnoreCase("TL")) { strProposalTL =
			 * Helper.correctNull((String)rs.getString("com_proposalnote")); } }
			 */
			// For Consortium by DINESH on 25/04/2014
			BankAppBean bankapp = new BankAppBean();

			HashMap hshReqVal = new HashMap();
			hshReqVal.put("hidAppNo", strAppNo);
			hshReqVal.put("PageType", "PROPOSAL");
			hshReqVal = bankapp.getConsortiumDetails(hshReqVal);
			hshReqVal.put("page", "PROCESS NOTE");
			hshValues.put("PROPOSAL", hshReqVal);

			// Banking Arrangment
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_BankingArrangementOther^"
					+ strAppNo);

			while (rs.next()) {
				arrOutCol = new ArrayList();

				arrOutCol.add(Helper.correctInt(rs.getString("com_facsno")));
				arrOutCol.add(correctNull(rs.getString("combk_facility")));
				arrOutCol.add("");
				arrOutCol.add("");
				arrOutCol.add(correctNull(rs.getString("com_memberbank")));
				arrOutCol.add("");

				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_existfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share1")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_existnonfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share2")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_proposedfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share3")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_proposednonfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share4")));

				arrOutCol.add(Helper.correctDouble(rs.getString("com_limit")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_outstanding")));
				arrOutCol.add(correctNull(rs.getString("com_osason")));

				strVal1 = correctNull(rs.getString("com_facvalue"));

				if (!strVal1.equals("")) {
					strVal1 = strVal1.substring(strVal1.indexOf('~') + 1,
							strVal1.indexOf('~') + 2);
				}

				arrOutCol.add(strVal1);

				arrOutRow.add(arrOutCol);
			}

			hshValues.put("arrBARow", arrOutRow);

			// Comments
			if (rs != null) {
				rs.close();
			}
			String strpgType[] = { "secoverage", "secoverage1", "BDCOM1",
					"BDCOM2", "brief", "brief2" };
			for (int i = 0; i < 6; i++) {
				rs = DBUtils.executeLAPSQuery("sel_comments^" + strpgType[i]
						+ "^" + strAppNo);
				if (rs.next()) {
					hshValues.put("com_comments" + strpgType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("com_comments")))));
				}
			}

			// Agri Comments
			if (rs != null) {
				rs.close();
			}
			String strAgrType[] = { "cropincome", "physicalfin",
					"agrifarmbudget", "croploan", "cropass" };
			for (int i = 0; i < strAgrType.length; i++) {
				rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppNo
						+ "^" + strAgrType[i]);
				if (rs.next()) {
					hshValues.put("cmt_comments" + strAgrType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("cmt_comments")))));
					hshValues.put("cmt_intercomments" + strAgrType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob("cmt_intercomments"))));
				}
			}

			// DSS Comments
			if (rs != null) {
				rs.close();
			}
			String strAgrType1[] = { "cropass", "assdss" };
			for (int i = 0; i < strAgrType1.length; i++) {
				rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
						+ "^" + strAgrType1[i]);
				if (rs.next())
					hshValues.put("cmt_comments" + strAgrType1[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("fin_comments")))));
			}
			// BA Fund Total
			/*
			 * if(rs!=null){rs.close();} rs =
			 * DBUtils.executeLAPSQuery("sel_BAFundTot^"+strAppNo);
			 * if(rs.next()) { hshValues.put("fundtotal",
			 * Helper.correctDouble(rs.getString("fundtotal"))); }
			 */
			hshValues.put("fundtotal", "0.00");

			// Financial Comments
			for (int i = 0; i < strCommentSno.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils
						.executeLAPSQuery("sel_financial_comments^FPComments^"
								+ strCommentSno[i] + "^" + strAppNo);

				if (rs.next()) {
					hshValues.put("FIComments"
							+ correctNull(rs.getString("com_sno")),
							correctNull(Helper.CLOBToString(rs
									.getClob("com_comments"))));
				}
			}

			// Assessment Comments
			String strassmntCommentsno[] = { "1", "2" };
			for (int i = 0; i < strassmntCommentsno.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils
						.executeLAPSQuery("sel_financial_comments^assmntcomments^"
								+ strassmntCommentsno[i] + "^" + strAppNo);

				if (rs.next()) {
					hshValues.put("AssmntComments"
							+ correctNull(rs.getString("com_sno")),
							correctNull(Helper.CLOBToString(rs
									.getClob("com_comments"))));
				}
			}

			// Other Assessment Comments
			String strFlowType[] = { "35", "37" };
			for (int i = 0; i < strFlowType.length; i++) {
				if (strFlowType[i].equalsIgnoreCase("35")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_assessment_tl^"
							+ strAppNo + "^" + strFlowType[i]);
					if (rs.next()) {
						hshValues.put("com_assessment_comments"
								+ strFlowType[i], correctNull(Helper
								.CLOBToString(rs
										.getClob("com_assessment_comments"))));
					}
				}
				if (strFlowType[i].equalsIgnoreCase("37")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_assessment_tl^"
							+ strAppNo + "^" + strFlowType[i]);
					if (rs.next()) {
						hshValues.put("strAdhocFacAssessment",
								correctNull(Helper.CLOBToString(rs
										.getClob("com_assessment_comments"))));
					}
				}
			}

			// Assessment Inland , Turnover comments , Repayment Schd.
			String strpage = "";
			String strpageAsmt[] = { "inlandComments", "turnover",
					"expenditure", "cashbudget", "assdscr", "repaycomment",
					"bankargmnt" };
			for (int i = 0; i < strpageAsmt.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
						+ "^" + strpageAsmt[i]);
				if (rs.next()) {
					hshValues.put("fin_comments" + strpageAsmt[i], Helper
							.CLOBToString(rs.getClob("fin_comments")));
					hshValues.put("fin_comments1" + strpageAsmt[i], Helper
							.CLOBToString(rs.getClob("fin_comments1")));
				}
			}

			// Delegation
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_delegation^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();

				arrOutCol.add(correctNull(rs.getString("com_userid")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_CBSStaticDataPassingCode^27^"
								+ correctNull((String) rs
										.getString("com_userdes")));
				if (rs1.next()) {
					// if(correctNull((String)rs1.getString("cbs_static_data_code")).trim().equals(correctNull((String)rs.getString("com_userdes")).trim()))
					// {
					arrOutCol.add(correctNull(rs1
							.getString("cbs_static_data_desc")));
					// break;
					// }
				} else {
					arrOutCol.add(correctNull(rs.getString("com_userdes")));
				}
				arrOutCol.add(correctNull(rs.getString("com_userdes")));
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrDeleRow", arrOutRow);

			if (str_arr.contains("EXPORTCF@")) {
				ArrayList arrCOPNewRow = new ArrayList();
				// Assessment of TL: COP
				dblTotCOP = 0.00;
				int m = 0, z = 0;
				arrOutRow = new ArrayList();
				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					arrCOPCol = new ArrayList();

					int termSno = Integer.parseInt(Helper.correctInt(rs2
							.getString("term_sno")));
					arrCOPCol.add(Helper.correctInt(rs2.getString("term_sno")));
					arrCOPCol.add(correctNull(rs2.getString("term_desc")));
					arrCOPCol
							.add(jtn.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_sancamt")))));// 10
					dblTotCOP = 0.00;
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_desc^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrOutCol = new ArrayList();

						if (correctNull(rs.getString("com_type"))
								.equalsIgnoreCase("C")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils
									.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
							while (rs1.next()) {
								if (correctNull(
										(String) rs1
												.getString("stat_data_desc"))
										.trim()
										.equals(
												correctNull(
														(String) rs
																.getString("com_desc_sno"))
														.trim())) {
									arrOutCol.add(correctNull(rs1
											.getString("stat_data_desc1")));
									break;
								}
							}

							arrOutCol.add(Helper.correctDouble(rs
									.getString("com_totalvalue")));
							arrOutCol.add(Helper.correctInt(rs
									.getString("com_facsno")));
							dblTotCOP = dblTotCOP
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("com_totalvalue")));
						}

						if (arrOutCol.size() > 0) {
							arrOutRow.add(arrOutCol);
						}
					}
					arrCOPCol.add(String.valueOf(dblTotCOP));
					if (arrOutRow.size() > 0) {
						arrCOPRow.add(arrCOPCol);
					}

					arrCOPNewRow.add(arrCOPCol);

					String strFacilities = Helper.correctInt(rs2
							.getString("term_sno"));

					if (strFacilities != "s" && strFacilities != "") {
						if (rs != null)
							rs.close();
						rs = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL"
										+ "^" + strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_COP" + termSno, Helper
									.CLOBToString(rs.getClob("COM_COMMENTS")));
							hshValues.put("COM_DATE_COP" + termSno, Helper
									.correctNull((String) rs
											.getString("COM_DATE")));
							hshValues.put("COM_PROJECTLOAN" + termSno, Helper
									.correctNull((String) rs
											.getString("com_projectloan")));
							z = m;
						}
						if (rs != null)
							rs.close();
						rs = DBUtils
								.executeLAPSQuery("sel_comcomments^ExistingTerm^"
										+ strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_ETL" + termSno, Helper
									.CLOBToString(rs.getClob("com_comments")));
							z = m;
						}
						if (rs != null)
							rs.close();
						rs = DBUtils.executeLAPSQuery("sel_comcomments^SOM^"
								+ strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_SOM" + termSno, Helper
									.CLOBToString(rs.getClob("com_comments")));
							z = m;
						}
						if (rs != null)
							rs.close();
						strQuery = SQLParser
								.getSqlQuery("sel_comcomments1^CommentsProj^"
										+ strFacilities + "^" + strAppNo
										+ "^12");
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_COProj" + termSno,
									Helper.CLOBToString(rs
											.getClob("com_comments")));
						}
						for (int c = 1; c < 12; c++) {
							strQuery = SQLParser
									.getSqlQuery("sel_comcomments1^CommentsProj^"
											+ strFacilities
											+ "^"
											+ strAppNo
											+ "^" + c);
							rs = DBUtils.executeQuery(strQuery);
							if (rs.next()) {
								hshValues.put("COM_COMMENTS_" + c + "_COProj"
										+ termSno, Helper.CLOBToString(rs
										.getClob("com_comments")));
							}
						}

						ArrayList arrMechRow = new ArrayList();
						ArrayList arrMechcol = new ArrayList();
						strQuery = SQLParser.getSqlQuery("selcom_machineryDet^"
								+ strAppNo + "^" + termSno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							arrMechcol = new ArrayList();
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_particulars")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_supplier")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_quantity")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_unitpercost")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_amount")));
							arrMechRow.add(arrMechcol);
						}
						hshValues.put("arrMechRow" + termSno, arrMechRow);

					}
					if (rs != null) {
						rs.close();
					}
					m++;
				}
				hshValues.put("ValofM", String.valueOf(z));
				hshValues.put("arrCOPMjrRow", arrCOPRow);
				hshValues.put("arrCOPRow", arrOutRow);
				hshValues.put("dblTotCOP", String.valueOf(dblTotCOP));
				hshValues.put("arrCOPNewRow", arrCOPNewRow);

				// Assessment of TL: MOF
				String strFlag = "false", strdescSno = "";
				double dbl_BankSubLoan = 0.00;
				double dbl_Othermfinance = 0.00;
				double dbl_Debit = 0.00;
				m = 0;
				dblTotCOP = 0.00;
				arrOutRow = new ArrayList();
				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					arrMOFCol = new ArrayList();
					dbl_Debit = 0.00;
					dbl_Othermfinance = 0.00;
					dbl_BankSubLoan = 0.00;
					dblTotCOP = 0.00;
					arrMOFCol.add(Helper.correctInt(rs2.getString("term_sno")));
					arrMOFCol.add(correctNull(rs2.getString("term_desc")));
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_desc^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrOutCol = new ArrayList();
						strdescSno = Helper.correctNull(rs
								.getString("COM_DESC_SNO"));

						if (correctNull(rs.getString("com_type"))
								.equalsIgnoreCase("M")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils
									.executeLAPSQuery("SelStaticDataCorpQuestionMast^137");
							while (rs1.next()) {
								if (correctNull(
										(String) rs1
												.getString("stat_data_desc"))
										.trim()
										.equals(
												correctNull(
														(String) rs
																.getString("com_desc_sno"))
														.trim())) {
									strFlag = "true";
									arrOutCol.add(correctNull(rs1
											.getString("stat_data_desc1")));
									break;
								}
							}

							arrOutCol.add(Helper.correctDouble(rs
									.getString("com_totalvalue")));
							arrOutCol.add(Helper.correctInt(rs
									.getString("com_facsno")));
							dblTotCOP = dblTotCOP
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("com_totalvalue")));
						}

						if ((strdescSno.endsWith("1"))
								|| (strdescSno.endsWith("2"))) {
							if (correctNull(rs.getString("com_type"))
									.equalsIgnoreCase("M")) {
								dbl_BankSubLoan += Double.parseDouble(Helper
										.correctDouble(rs
												.getString("COM_TOTALVALUE")));
							}
						} else {
							if (correctNull(rs.getString("com_type"))
									.equalsIgnoreCase("M")) {
								dbl_Othermfinance += Double.parseDouble(Helper
										.correctDouble(rs
												.getString("COM_TOTALVALUE")));
							}
						}

						if (arrOutCol.size() > 0) {
							arrOutRow.add(arrOutCol);
						}

					}
					arrMOFCol.add(String.valueOf(dblTotCOP));
					if (dbl_Othermfinance != 0.0) {
						dbl_Debit = dbl_BankSubLoan / dbl_Othermfinance;
					} else {
						dbl_Debit = dbl_BankSubLoan;
					}
					hshValues.put("dbl_Debit"
							+ correctNull(rs2.getString("term_sno")), ""
							+ dc.format(dbl_Debit));
					if (arrOutRow.size() > 0) {
						arrMOFRow.add(arrMOFCol);
					}
					m++;
				}

				hshValues.put("arrMOFMjrRow", arrMOFRow);
				hshValues.put("arrMOFRow", arrOutRow);
				hshValues.put("dblTotMOF", String.valueOf(dblTotCOP));

				// Release Pattern

				ArrayList arrReleaseRow = new ArrayList();
				ArrayList arrRowPattern = new ArrayList();

				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				int y = 0;
				int x = 0;
				dblRPTotCost = 0.0;
				dblRPTotMargin = 0.0;
				dblRPTotLoan = 0.0;
				boolean boorelflag = true;
				int abc = 0;
				while (rs2.next()) {
					boorelflag = true;
					arrImplSchRow = new ArrayList();
					ArrayList arrReleaseCol = new ArrayList();
					ArrayList arrColPattern = new ArrayList();
					String strTermSno = Helper.correctInt(rs2
							.getString("term_sno"));

					arrReleaseCol.add(correctNull(rs2.getString("term_sno"))); // 0
					arrReleaseCol.add(correctNull(rs2.getString("term_desc"))); // 1
					arrFinSnoRow.add(arrReleaseCol);
					abc++;
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_margin1_new^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrColPattern = new ArrayList();
						if (boorelflag) {
							arrReleaseCol.add("ReleasePattern");// 2
						}

						boorelflag = false;
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
						while (rs1.next()) {
							if (correctNull(
									(String) rs1.getString("stat_data_desc"))
									.trim()
									.equals(
											correctNull(
													(String) rs
															.getString("com_sno"))
													.trim())) {
								arrColPattern.add(correctNull(rs1
										.getString("stat_data_desc1")));// 0
								break;
							}
						}

						dblRPTotCost = dblRPTotCost
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_amount")));
						dblRPTotMargin = dblRPTotMargin
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_margin")));
						dblRPTotLoan = dblRPTotLoan
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_bankloan")));

						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_amount")));// 1
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_margin")));// 2
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_marginamt")));// 3
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_bankloan")));// 4
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_bankloanamt")));// 5
						arrColPattern.add(Helper.correctInt(rs
								.getString("com_facsno")));// 6
						arrRowPattern.add(arrColPattern);
					}
					if (boorelflag) {
						arrReleaseCol.add("0");// 2
						boorelflag = true;
					}

					hshValues.put("arrRowPattern" + x, arrRowPattern);
					arrRowPattern = new ArrayList();
					hshValues.put("dblRPTotCost" + x, String
							.valueOf(dblRPTotCost));
					hshValues.put("dblRPTotMargin" + x, String
							.valueOf(dblRPTotMargin));
					hshValues.put("dblRPTotLoan" + x, String
							.valueOf(dblRPTotLoan));
					dblRPTotCost = 0.0;
					dblRPTotMargin = 0.0;
					dblRPTotLoan = 0.0;
					if (strTermSno != "s" && strTermSno != "") {
						rs = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL"
										+ "^" + strTermSno + "^" + strAppNo);
						if (rs.next()) {
							arrReleaseCol.add(correctNull(rs
									.getString("com_date"))); // 8
							arrReleaseCol.add("Estimate"); // 9
						} else {
							arrReleaseCol.add("0");// 8
							arrReleaseCol.add("0");// 9
						}

					}
					arrReleaseCol.add(jtn.format(Double
							.parseDouble((String) Helper.correctDouble(rs2
									.getString("facility_sancamt")))));// 10
					arrReleaseRow.add(arrReleaseCol);
					x++;
				}

				hshValues.put("arrReleaseRow", arrReleaseRow);

				// Implementation schedule
				/*
				 * if(rs!=null){rs.close();} String strTermSno = "";
				 * if(arrFinSnoRow!= null && arrFinSnoRow.size()>0) { for(int
				 * i=0;i<arrFinSnoRow.size();i++) { arrFinSnoCol = (ArrayList)
				 * arrFinSnoRow.get(i); arrImplSchRow.add((String)
				 * arrFinSnoCol.get(0)); arrImplSchRow.add((String)
				 * arrFinSnoCol.get(1)); arrOutRow = new ArrayList(); String
				 * strQuery5 =
				 * SQLParser.getSqlQuery("sel_implnschedulesno^"+strAppNo
				 * +"^"+"^"+(String) arrFinSnoCol.get(0)); rs =
				 * DBUtils.executeQuery(strQuery5); //rs =
				 * DBUtils.executeLAPSQuery
				 * ("sel_implnschedulesno^"+strAppNo+"^"+"^"+strTermSno);
				 * while(rs.next()) { arrImplSchCol = new ArrayList();
				 * arrReleaseCol.add(correctNull(rs.getString("com_desc"))); //3
				 * arrReleaseCol
				 * .add(correctNull(rs.getString("com_commencedate"))); //4
				 * arrReleaseCol
				 * .add(correctNull(rs.getString("com_completiondate"))); //5
				 * arrReleaseCol.add(correctNull(rs.getString("com_status")));
				 * //6 arrReleaseCol.add("Implement");//78
				 * 
				 * arrImplSchCol.add(correctNull(rs.getString("com_desc"))); //3
				 * arrImplSchCol
				 * .add(correctNull(rs.getString("com_commencedate"))); //4
				 * arrImplSchCol
				 * .add(correctNull(rs.getString("com_completiondate"))); //5
				 * arrImplSchCol.add(correctNull(rs.getString("com_status")));
				 * //6 arrImplSchCol.add("Implement");//7
				 * arrImplSchRow.add(arrImplSchCol); }
				 * hshValues.put("arrImpSchRow"+strTermSno, arrImplSchRow); } }
				 */
				if (rs != null) {
					rs.close();
				}

				// Implementation end

				// hshValues.put("arrImpScheRow"+x, arrOutRow);
				// Schedule of Implementation
				if (rs != null) {
					rs.close();
				}
				if (rs2 != null) {
					rs.close();
				}

				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					boorelflag = true;
					arrImplSchCol = new ArrayList();
					arrOutRow = new ArrayList();
					String strTermSno = Helper.correctInt(rs2
							.getString("term_sno"));
					arrImplSchCol.add(strTermSno);
					arrImplSchCol.add(correctNull(rs2.getString("term_desc")));
					rs = DBUtils.executeLAPSQuery("sel_implnschedulesno^"
							+ strAppNo + "^" + "^" + strTermSno);
					while (rs.next()) {
						// arrOutRow = new ArrayList();
						arrOutCol = new ArrayList();
						arrOutCol.add(correctNull(rs2.getString("term_desc")));
						arrOutCol.add(correctNull(rs.getString("com_desc")));
						arrOutCol.add(correctNull(rs
								.getString("com_commencedate")));
						arrOutCol.add(correctNull(rs
								.getString("com_completiondate")));
						arrOutCol.add(correctNull(rs.getString("com_status")));

						arrOutRow.add(arrOutCol);
					}
					arrImplSchCol.add(arrOutRow);
					arrImplSchCol
							.add(jtn.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_sancamt")))));
					arrImplSchRow.add(arrImplSchCol);
				}
				hshValues.put("arrImplSchRow", arrImplSchRow);

				// Source of Margin
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_comments^SOM^" + strAppNo);
				if (rs.next()) {
					hshValues.put("SOMComments", correctNull(Helper
							.CLOBToString(rs.getClob(("com_comments")))));
				}
			}
			//e-Krishik Bhandarchanges end
			String strFacilitySno="";
			String strQuery3="";
			double dblExist=0.00,dblProposed=0.00,dblMargin=0.00;
			
			strQuery = SQLParser.getSqlQuery("sel_agrenwrassessment^"+strAppNo);	
			if(rs != null)
			{rs.close();}
			rs = DBUtils.executeQuery(strQuery);
			while(rs.next())
			{	
				strFacilitySno=correctNull((String)rs.getString("ENWR_SNO"));			
				strQuery2=SQLParser.getSqlQuery("selagreNWRdetails^"+strFacilitySno+"^"+strAppNo);	
				
				rs1 = DBUtils.executeQuery(strQuery2);
				if(rs1.next())
				{	
					hshValues.put("croporcommodity",correctNull((String)rs1.getString("ENWR_CROPNAME")));
					hshValues.put("noofpackages",correctNull((String)rs1.getString("ENWR_NOOFPACKAGES")));
					hshValues.put("netquantity",correctNull((String)rs1.getString("ENWR_NET_QTY")));
					hshValues.put("estimatedvalue",correctNull((String)rs1.getString("ENWR_ESTIMATEVALUE")));
					hshValues.put("totalvalue",correctNull((String)rs1.getString("ENWR_TOTALVALUE")));
					hshValues.put("loansanctionamt",correctNull((String)rs1.getString("ENWR_LOANSANCTIONAMT")));				
				}
				strQuery3= SQLParser.getSqlQuery("selfacilityproposedmt^" + strAppNo+"^"+strFacilitySno);					
				rs2 = DBUtils.executeQuery(strQuery3);
				if(rs2.next())
				{
					dblExist = rs2.getDouble("facility_existing");
					dblProposed =rs2.getDouble("facility_proposed");
					dblMargin =rs2.getDouble("facility_margin");
					hshValues.put("headid",correctNull(rs2.getString("facility_headid")));
					hshValues.put("facdid",correctNull(rs2.getString("facility_id")));
					hshValues.put("facdesc",correctNull(rs2.getString("facility_desc")));
					hshValues.put("facexist",jtn.format(dblExist));
					hshValues.put("facproposed",jtn.format(dblProposed));
					hshValues.put("facmargin",jtn.format(dblMargin));
					hshValues.put("facinterest",correctNull(rs2.getString("facility_interest")));
					hshValues.put("facapplication",correctNull(rs2.getString("facility_application")));
					}
			}	
			//e-Krishik Bhandarchanges end
			
			// Release Pattern
			dblTotCOP = 0.00;
			String termSno = "";
			int abc = 1;
			arrOutRow = new ArrayList();
			if (rs2 != null) {
				rs.close();
			}
			rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}

			while (rs2.next()) {
				arrRelPatCol = new ArrayList();
				termSno = Helper.correctInt(rs2.getString("term_sno"));
				arrRelPatCol.add(Helper.correctInt(rs2.getString("term_sno")));
				arrRelPatCol.add(correctNull(rs2.getString("term_desc")));

				rs = DBUtils.executeLAPSQuery("sel_com_copmof_margin1_new^"
						+ strAppNo + "^"
						+ correctNull(rs2.getString("term_sno")));
				while (rs.next()) {
					arrOutCol = new ArrayList();

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
					while (rs1.next()) {
						if (correctNull(
								(String) rs1.getString("stat_data_desc"))
								.trim().equals(
										correctNull(
												(String) rs
														.getString("com_sno"))
												.trim())) {
							arrOutCol.add(correctNull(rs1
									.getString("stat_data_desc1")));
							break;
						}
					}

					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_amount")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_margin")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_marginamt")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_bankloan")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_bankloanamt")));
					arrOutCol
							.add(Helper.correctInt(rs.getString("com_facsno")));

					dblRPTotCost = dblRPTotCost
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_amount")));
					dblRPTotMargin = dblRPTotMargin
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_margin")));
					dblRPTotLoan = dblRPTotLoan
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_bankloan")));
					abc++;
					if (arrOutCol.size() > 0) {
						arrOutRow.add(arrOutCol);
					}
				}

			}
			if (arrOutRow.size() > 0) {
				arrRelPatRow.add(arrRelPatCol);
			}
			hshValues.put("dblRPTotCost", String.valueOf(dblRPTotCost));
			hshValues.put("dblRPTotMargin", String.valueOf(dblRPTotMargin));
			hshValues.put("dblRPTotLoan", String.valueOf(dblRPTotLoan));
			hshValues.put("arrRelPatrnMjrRow", arrRelPatRow);
			hshValues.put("arrRelPatrnRow", arrOutRow);
			hshValues.put("arrRelPatColNew", arrRelPatCol);

			// DSCR
			if (str_arr.contains("DSCR@")) {
				hshFinValues = new HashMap();
				hshFinValues.put("appno", strAppNo);
				hshFinValues = dscrobj.getPrintValues(hshFinValues);
				hshValues.put("DSCRhshFinValues", hshFinValues);

				// SENSITIVITY - Added by DINESH on 31/03/2014
				hshFinSenValues = new HashMap();
				hshFinSenValues.put("appno", strAppNo);
				hshFinSenValues = dscrobj
						.getPrintSensitivityVal(hshFinSenValues);
				hshValues.put("SENSITIVITYhshFinValues", hshFinSenValues);
			}

			// For Security Coverage display by Guhan T
			HashMap hshsec = new HashMap();
			SecurityMasterBean sec = new SecurityMasterBean();
			hshReqValues.put("hidapplicantid", strOldAppId);
			hshsec = sec.getCollateralSecurityDisplaynew(hshReqValues);
			ArrayList arrRow = new ArrayList();
			arrRow = (ArrayList) hshsec.get("arrRow");
			hshValues.put("arrRow", arrRow);
			hshValues.put("dbl_exifundostot", hshsec.get("dbl_exifundostot"));
			hshValues.put("dbl_exinonfundostot", hshsec
					.get("dbl_exinonfundostot"));
			hshValues.put("dbl_propfundostot", hshsec.get("dbl_propfundostot"));
			hshValues.put("dbl_propnonfundostot", hshsec
					.get("dbl_propnonfundostot"));
			hshValues.put("dbl_totvalexis", hshsec.get("dbl_totvalexis"));
			hshValues.put("dbl_totvalproposed", hshsec
					.get("dbl_totvalproposed"));
			hshValues.put("dbl_secexitot", hshsec.get("dbl_secexitot"));
			hshValues.put("dbl_secexicoverage", hshsec
					.get("dbl_secexicoverage"));
			hshValues.put("dbl_secpropcoverage", hshsec
					.get("dbl_secpropcoverage"));

			// For Comments by Guhan T
			if (rs != null)
				rs.close();
			String strQuery5 = SQLParser.getSqlQuery("selexistingfaccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery5);
			while (rs.next()) {
				hshValues.put("existing_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			String strQuery6 = SQLParser.getSqlQuery("selpriseccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery6);
			while (rs.next()) {
				hshValues.put("prisec_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			String strQuery7 = SQLParser.getSqlQuery("selcollseccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery7);
			while (rs.next()) {
				hshValues.put("collsec_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}

			if (rs != null)
				rs.close();
			strQuery5 = SQLParser
					.getSqlQuery("sel_comcommentscopmof^COPMOF^20^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery5);
			if (rs.next()) {
				hshValues.put("copmofcomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			ArrayList arrCol = new ArrayList();
			arrRow = new ArrayList();
			// com_assessmentselection_select
			FinancialBean financial = new FinancialBean();
			ComProposalBean comproposal = new ComProposalBean();
			HashMap hshRequestValues = new HashMap();

			if (str_arr.contains("TO@")) {
				/*
				 * 
				 * TO@Exp@CFS@MED1@MED2@WCGMED@EXPORTCF@DSCR@CASHBUD@NFA@AOA@ASR@
				 */

				arrRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_turnoverMethod^" + strAppNo);
				while (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("COM_TO_YEAR")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ACPTPROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PERCENTACPTPROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_MINMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ELIGIBLEFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ACTUALMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ELIGIBLEBANKFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PERMISIBLEFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_LIMITSOUGHT")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_LIMITPROPOSED")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_REQMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_SURPLUS")));
					arrRow.add(arrCol);
				}
				hshValues.put("TurnOver", arrRow);
			}
			if (str_arr.contains("Exp@")) {
				// Expenditure Method
				arrOutRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_expenditureMethod^"
						+ strAppNo);
				while (rs.next()) {
					arrOutCol = new ArrayList();

					arrOutCol.add(correctNull(rs.getString("com_exp_year")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_projexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_acptprojexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_operationcycle")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_eligibleexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_permisiblefin")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_limitsought")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_limitproposed")));

					arrOutRow.add(arrOutCol);
				}
				hshValues.put("arrExpRow", arrOutRow);
			}
			if (str_arr.contains("CFS@")) {
				if (rs != null) {
					rs.close();
				}
				int c = 1, d = 0, n = 1;
				rs1 = DBUtils.executeLAPSQuery("sel_finYear^" + strAppNo);
				while (rs1.next()) {
					d++;
					n = 2;
					arrRow = new ArrayList();
					rs = DBUtils.executeLAPSQuery("sel_cashflowMethod^"
							+ strAppNo + "^"
							+ Helper.correctNull(rs1.getString(1)));
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_YEAR")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OPENINGBAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PROMOTEREQUITY")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_BANKFINANCE")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_UNSECLOAN")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_SALEPROCEEDS")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OTHER")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_SOF_TOTAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_COSTOFLAND")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PREMIUMFSI")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_CONSTRUCTCOST")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_MARKETEXPENSES")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_ADMINEXPENSES")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OTHERFIN")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_INTEREST")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_REPAYMENT")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PROVISIONTAX")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_APPFIN_TOTAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_CLOSINGBALANCE")));
						arrRow.add(arrCol);
						if (!Helper.correctNull(rs.getString("COM_CF_YEAR"))
								.equalsIgnoreCase(""))// 0)
						{
							hshValues.put("rowcount" + (d), "" + (n++));
						}
						hshValues.put("finyear" + (d), Helper.correctNull(rs
								.getString("COM_CF_FINYEAR")));
					}
					for (int h = 0; arrRow.size() < 15; h++) {
						arrCol = new ArrayList();
						for (int k = 0; k < 16; k++) {
							arrCol.add("");
						}
						arrRow.add(arrCol);
					}
					hshValues.put("CashFlow" + (c), arrRow);
					c++;
				}
				hshValues.put("CashCount", "" + (d));

				rs = DBUtils.executeLAPSQuery("sel_cashflow_projTot^"
						+ strAppNo + "^" + "1");
				while (rs.next()) {
					dbl_opnBal = Double.parseDouble((String) rs
							.getString("COM_CF_OPENINGBAL"));
					dbl_allopnBal = dbl_allopnBal + dbl_opnBal;

					dbl_proEqt = Double.parseDouble((String) rs
							.getString("COM_CF_PROMOTEREQUITY"));
					dbl_allproEqt = dbl_allproEqt + dbl_proEqt;

					dbl_bnkFin = Double.parseDouble((String) rs
							.getString("COM_CF_BANKFINANCE"));
					dbl_allbnkFin = dbl_allbnkFin + dbl_bnkFin;

					dbl_unsec = Double.parseDouble((String) rs
							.getString("COM_CF_UNSECLOAN"));
					dbl_allunsec = dbl_allunsec + dbl_unsec;

					dbl_saleProc = Double.parseDouble((String) rs
							.getString("COM_CF_SALEPROCEEDS"));
					dbl_allsaleProc = dbl_allsaleProc + dbl_saleProc;

					dbl_other = Double.parseDouble((String) rs
							.getString("COM_CF_OTHER"));
					dbl_allother = dbl_allother + dbl_other;

					dbl_sofTot = Double.parseDouble((String) rs
							.getString("COM_CF_SOF_TOTAL"));
					dbl_allsofTot = dbl_allsofTot + dbl_sofTot;

					dbl_costLand = Double.parseDouble((String) rs
							.getString("COM_CF_COSTOFLAND"));
					dbl_allcostLand = dbl_allcostLand + dbl_costLand;

					dbl_premiumfsi = Double.parseDouble((String) rs
							.getString("COM_CF_PREMIUMFSI"));
					dbl_allpremiumfsi = dbl_allpremiumfsi + dbl_premiumfsi;

					dbl_constcost = Double.parseDouble((String) rs
							.getString("COM_CF_CONSTRUCTCOST"));
					dbl_allconstcost = dbl_allconstcost + dbl_constcost;

					dbl_marketexp = Double.parseDouble((String) rs
							.getString("COM_CF_MARKETEXPENSES"));
					dbl_allmarketexp = dbl_allmarketexp + dbl_marketexp;

					dbl_adminexp = Double.parseDouble((String) rs
							.getString("COM_CF_ADMINEXPENSES"));
					dbl_alladminexp = dbl_alladminexp + dbl_adminexp;

					dbl_interest = Double.parseDouble((String) rs
							.getString("COM_CF_INTEREST"));
					dbl_allinterest = dbl_allinterest + dbl_interest;

					dbl_repayment = Double.parseDouble((String) rs
							.getString("COM_CF_REPAYMENT"));
					dbl_allrepayment = dbl_allrepayment + dbl_repayment;

					dbl_provTax = Double.parseDouble((String) rs
							.getString("COM_CF_PROVISIONTAX"));
					dbl_allprovTax = dbl_allprovTax + dbl_provTax;

					dbl_otherFin = Double.parseDouble((String) rs
							.getString("COM_CF_OTHERFIN"));
					dbl_allotherFin = dbl_allotherFin + dbl_otherFin;

					dbl_appfinTot = Double.parseDouble((String) rs
							.getString("COM_CF_APPFIN_TOTAL"));
					dbl_allappfinTot = dbl_allappfinTot + dbl_appfinTot;

					dbl_closingBal = Double.parseDouble((String) rs
							.getString("COM_CF_CLOSINGBALANCE"));
					dbl_allclosingBal = dbl_allclosingBal + dbl_closingBal;

				}
				arrRow = new ArrayList();
				arrCol = new ArrayList();
				arrCol.add("Projected");
				arrCol.add("" + dc.format(dbl_allopnBal));
				arrCol.add("" + dc.format(dbl_allproEqt));
				arrCol.add("" + dc.format(dbl_allbnkFin));
				arrCol.add("" + dc.format(dbl_allunsec));
				arrCol.add("" + dc.format(dbl_allsaleProc));
				arrCol.add("" + dc.format(dbl_allother));
				arrCol.add("" + dc.format(dbl_allsofTot));
				arrCol.add("" + dc.format(dbl_allcostLand));
				arrCol.add("" + dc.format(dbl_allpremiumfsi));
				arrCol.add("" + dc.format(dbl_allconstcost));
				arrCol.add("" + dc.format(dbl_allmarketexp));
				arrCol.add("" + dc.format(dbl_alladminexp));
				arrCol.add("" + dc.format(dbl_allotherFin));
				arrCol.add("" + dc.format(dbl_allinterest));
				arrCol.add("" + dc.format(dbl_allrepayment));
				arrCol.add("" + dc.format(dbl_allprovTax));
				arrCol.add("" + dc.format(dbl_allappfinTot));
				arrCol.add("" + dc.format(dbl_allclosingBal));
				arrRow.add(arrCol);

				hshValues.put("CashFlowTOT", arrRow);

			}
			if (str_arr.contains("MED1@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "MU");
				hshRequestValues.put("pagefrom1", "M1");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Method I of lending other than export limits");
				hshValues.put("method1", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "M1");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewM1", hshassess);
			}
			if (str_arr.contains("MED2@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "MU");
				hshRequestValues.put("pagefrom1", "M2");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Method II of lending other than export limits");
				hshValues.put("method2", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "M2");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewM2", hshassess);
			}
			if (str_arr.contains("WCGMED@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "FL");
				hshRequestValues.put("pagefrom1", "AFL");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Assessment of working capital limits");
				hshValues.put("method3", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "AFL");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewAFL", hshassess);
			}

			if (str_arr.contains("AOI@")) {
				if (rs != null) {
					rs.close();
				}
				int c = 1, d = 0, n = 1;
				String strDate = "";
				arrOutRowCons = new ArrayList();
				rs1 = DBUtils
						.executeLAPSQuery("sel_inland_finYear^" + strAppNo);
				while (rs1.next()) {

					strDate = "";
					strDate = Helper.correctNull(rs1.getString("com_ia_year"));
					if (!strDate.equalsIgnoreCase("")) {
						d++;
						n = 2;
						arrRow = new ArrayList();
						rs = DBUtils
								.executeLAPSQuery("sel_fin_inlandAssessment^"
										+ strAppNo + "^" + strDate);
						while (rs.next()) {
							arrCol = new ArrayList();
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_YEAR")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_SALES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_PURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_PROJPURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_AVGMONPURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_CREDITPERIOD")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_TRANSITPERIOD")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_LCREQUIRED")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_APPLIEDLIMIT")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_RECOMMLIMIT")));
							// arrCol.add(Helper.correctNull(rs.getString("COM_IA_YEAR")));
							arrRow.add(arrCol);
						}
						arrOutRowCons.add(arrRow);
					}
				}
				hshValues.put("Inland", arrOutRowCons);
				hshValues.put("InlandCount", "" + (d));
			}
			if (str_arr.contains("CASHBUD@")) {
				int i = 0, j = 1, k = 0;
				arrRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_count_cashbudgetyear^"
						+ strAppNo);
				while (rs.next()) {
					i += 1;
					j = 2;
					arrRow = new ArrayList();
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("com_cash_budget_method_sel^"
									+ strAppNo
									+ "^"
									+ Helper.correctNull(rs
											.getString("CCBM_YEAR")));
					while (rs1.next()) {
						arrCol = new ArrayList();
						hshValues.put("rowtype" + (i), Helper.correctNull(rs1
								.getString("CCBM_TYPE")));
						if (rs1.isLast()) {
							arrCol.add("Total");// 0}
						} else {
							arrCol.add(Helper.correctNull(rs1
									.getString("CCBM_VAL")));// 0
						}
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_NT_CONTRCT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SB_CONTRCT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TOT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_MATERIALS"))));// 5
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SAL_WGS"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SB_CONTRCT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_HIRE_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_LBR_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_DSL_PTRL_CHRG"))));// 10
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_RPR_MNT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TRVL_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_OPRTNG_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_BNK_INT_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TAX_PAY"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_ADMN_EXP"))));// 16
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TOT_OFLW"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SRPLS_DFCT"))));
						// arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1.getString("CCBM_OPN_CRDT_CSH"))));
						// arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1.getString("CCBM_SRPLS_DFTC_TOT"))));//21
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_BNK_FIN"))));
						arrRow.add(arrCol);
						if (!Helper.correctNull(rs1.getString("CCBM_VAL"))
								.equalsIgnoreCase(""))// 0)
						{
							hshValues.put("rowcount" + (i), "" + (j++));
						}
						k++;

						hshValues.put("cb_finyear" + (i), Helper
								.correctNull(rs1.getString("CCBM_FIN_YEAR")));
					}
					hshValues.put("y" + (i), arrRow);
				}
				hshValues.put("count", "" + (i));
			}
			if (str_arr.contains("AOW@")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^20");
				if (rs1.next()) {
					hshValues.put("com_wcassessment_comments", Helper
							.CLOBToString(rs1
									.getClob("com_assessment_comments")));
				}
			}
			if (str_arr.contains("AOA@")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^6");
				if (rs1.next()) {
					hshValues.put("com_tlassessment_comments", Helper
							.CLOBToString(rs1
									.getClob("com_assessment_comments")));
				}
			}
			hshRequestValues = new HashMap();
			hshRequestValues.put("appno", strAppNo);
			hshValues.put("sensitiveAnalysis", financial
					.getSensitiveData(hshRequestValues));
			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_tlothers^" + strAppNo);
			while (rs1.next()) {
				hshValues.put("estimated_date", Helper.correctNull(rs1
						.getString("com_date")));
				hshValues.put("estimated_remarks", Helper.CLOBToString(rs1
						.getClob("com_comments")));
			}
			strQuery2 = SQLParser.getSqlQuery("combankingselectNEW^" + strAppNo
					+ "^ ");
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery2);
			while (rs.next()) {

				String strcombk_modtype = Helper.correctNull((String) rs
						.getString("combk_modtype"));
				String strFacility = Helper.correctNull((String) rs
						.getString("combk_facility"));
				String[] strFacilityArr = strFacility.split("~");
				if (strFacilityArr.length > 0) {
					if (strcombk_modtype.equalsIgnoreCase("r")) {
						strQuery2 = SQLParser.getSqlQuery("sel_retProductDesc^"
								+ strFacilityArr[0]);
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}

					} else if (strcombk_modtype.equalsIgnoreCase("c")) {
						strQuery2 = SQLParser
								.getSqlQuery("sel_FacilityCorpDesc^"
										+ strFacilityArr[0] + "^c");
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}
					} else if (strcombk_modtype.equalsIgnoreCase("a")) {
						strQuery2 = SQLParser
								.getSqlQuery("sel_FacilityCorpDesc^"
										+ strFacilityArr[0] + "^a");
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}
					}
				}
				Helper.correctDouble((String) rs.getString("combk_limit"));
				Helper.correctDouble((String) rs.getString("combk_limit"));
				Helper.correctDouble((String) rs.getString("combk_sancrefno"));
				Helper.correctDouble((String) rs.getString("combk_inttype"));
				Helper.correctDouble((String) rs.getString("combk_spread"));
				Helper.correctDouble((String) rs.getString("combk_os"));
				Helper.correctDouble((String) rs.getString("combk_duedate"));
				Helper.correctDouble((String) rs.getString("combk_arrears"));
			}
			strQuery = SQLParser.getSqlQuery("sel_combankingdetails^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COM_ASSETCLASS", correctNull(rs
						.getString("COM_ASSETCLASS")));
			}
			if (rs != null) {
				rs.close();
			}

			// Added by bhaskar for income from cropsfor agriculture
			arrRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("seldistfinayearsofcropincome^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CRP_FINYR")));// 0
				if (rs2 != null) {
					rs2.close();
				}
				if (!Helper.correctNull((String) rs.getString("AGR_CRP_FINYR"))
						.equalsIgnoreCase("")) {
					rs2 = DBUtils.executeLAPSQuery("selincomefromcrops^"
							+ strAppNo
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("AGR_CRP_FINYR")));
					arrIncomeFromCropRow = new ArrayList();
					while (rs2.next()) {
						arrIncomeFromCropCol = new ArrayList();
						strSeasonType = rs2.getString("agr_crp_season");// 0
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("getstaticdatavaldispcorporate^"
										+ "131" + '^' + strSeasonType);
						if (rs1.next()) {
							strSeasonName = Helper.correctNull((String) rs1
									.getString("stat_data_desc1"));
						}
						arrIncomeFromCropCol.add(strSeasonName);// 0
						strSeasonName = "";
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_cropname"));// 1
						arrIncomeFromCropCol.add(rs2.getString("agr_crp_area"));// 2
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_yieldperacre"));// 3
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totalyield"));// 4
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_priceperqtl"));// 5
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totalinc"));// 6
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_costofcult"));// 7
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totcostofcult"));// 8
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_surplus"));// 9
						String strTotal = rs2.getString("agr_crp_surplus");
						dblTotal = Double.parseDouble(strTotal);
						dblTotalAmt += dblTotal;
						strTotalAmt = dc.format(dblTotalAmt);
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_season"));// 10
						arrIncomeFromCropCol.add(rs2.getString("agr_crp_sno"));// 11
						strCropType = rs2.getString("agr_crp_cropname");
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("getstaticdatavaldispcorporate^"
										+ "130" + '^' + strCropType);
						if (rs1.next()) {
							strCropName = Helper.correctNull((String) rs1
									.getString("stat_data_desc1"));
						}
						arrIncomeFromCropCol.add(strCropName);// 12
						strexiprotype = Helper.correctNull(rs2
								.getString("agr_crp_exiprotype"));
						arrIncomeFromCropCol.add(strexiprotype);// 13 added by
																// ganesan for
																// the type

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
								+ "135"
								+ '^'
								+ Helper.correctNull((String) rs2
										.getString("agr_crp_areaunit")));
						if (rs1.next()) {
							arrIncomeFromCropCol.add(Helper
									.correctNull((String) rs1
											.getString("stat_data_desc1")));
						} else {
							arrIncomeFromCropCol.add("");
						}

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
								+ "136"
								+ '^'
								+ Helper.correctNull((String) rs2
										.getString("agr_crp_yieldunit")));
						if (rs1.next()) {
							arrIncomeFromCropCol.add(Helper
									.correctNull((String) rs1
											.getString("stat_data_desc1")));
						} else {
							arrIncomeFromCropCol.add("");
						}

						if (Helper.correctNull(strexiprotype).equalsIgnoreCase(
								"1")) {

							// rs1=DBUtils.executeLAPSQuery("sel_exiproagr_croppingpattern^"+strAppNo+'^'+strexiprotype);
							dbl_exitot = Double.parseDouble((String) rs2
									.getString("agr_crp_surplus"));
							dbl_exialltot = dbl_exialltot + dbl_exitot;

						} else if (Helper.correctNull(strexiprotype)
								.equalsIgnoreCase("2")) {
							// rs1=DBUtils.executeLAPSQuery("sel_exiproagr_croppingpattern^"+strAppNo+'^'+strexiprotype);

							dbl_protot = Double.parseDouble((String) rs2
									.getString("agr_crp_surplus"));
							dbl_proalltot = dbl_proalltot + dbl_protot;

						}
						strCropName = "";
						arrIncomeFromCropRow.add(arrIncomeFromCropCol);
					}
				}
				arrCol.add(arrIncomeFromCropRow);// 1
				arrRow.add(arrCol);
			}
			hshValues.put("total", strTotalAmt);
			hshValues.put("arrData", arrRow);
			hshValues.put("Exis_Tootal", dc.format(dbl_exialltot));
			hshValues.put("prop_Tootal", dc.format(dbl_proalltot));
			hshValues.put("strLoanTypeNew", strLoanType);

			HashMap hshFarmBudget = new HashMap();
			ComProposalBean cpb = new ComProposalBean();
			hshReqValues.put("callform", "Processnote");
			hshFarmBudget = cpb.getFarmBudget(hshReqValues);
			hshValues.put("hshFarm", hshFarmBudget);

			arrRow = new ArrayList();
			rs = DBUtils
					.executeLAPSQuery("selcropassementforappno^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_SEASON")));// 0
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_CROP")));// 1
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_AREACUL")));// 2
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_AMOUNT")));// 3
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_ELIGIBILITY")));// 4
				arrRow.add(arrCol);
			}
			hshValues.put("arrCropAssessment", arrRow);

			/**
			 * Added by: Vinoth kumar Date : March 08 2014 Purpose : Display
			 * Physical and Financial Programe and DSS page Details in Appraisal
			 * Note
			 */

			String modtype = Helper.correctNull((String) hshReqValues
					.get("sessionModuleType"));
			if (modtype.equalsIgnoreCase("AGR")) {
				hshPhysicsAndFinValues = (HashMap) EJBInvoker.executeStateLess(
						"lapsReport", hshReqValues, "getFinProgrammePrint");
				hshValues.put("hshPhysicsAndFinValues", hshPhysicsAndFinValues);

				hshReqValues.put("hidapplicantid", strAppId);
				hshReqValues.put("strPrintFlag", "Y");
				hshDSSData = (HashMap) EJBInvoker.executeStateLess(
						"comproposal", hshReqValues, "getDSS");
				hshValues.put("hshDSSData", hshDSSData);
			}
			// added by bhaskar for Crop Loan Aseesment

			// Added by DINESH for Introduction : Remarks on 10/03/2014

			String strPage = "gist";
			strQuery = SQLParser.getSqlQuery("sel_comments^" + strPage + "^"
					+ strAppNo);

			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_comments" + strPage, correctNull(Helper
						.CLOBToString(rs.getClob("com_comments"))));
			}

			// For Benchmark Values by DINESH on 11/03/2014
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("com_demographics_cma_sel^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (correctNull((String) rs.getString("demo_finstandard"))
						.equalsIgnoreCase("")
						|| correctNull(
								(String) rs.getString("demo_finstandard"))
								.equalsIgnoreCase("null")) {
					cma = "0";
				} else {
					cma = correctNull((String) rs.getString("demo_finstandard"));
				}
			}

			String yearselect = "";

			/** Take last audited year in Bench Mark Ratio */
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("com_finappvalues_audit_select^"
					+ strAppNo + "^<=^<");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				yearselect = correctNull((String) rs.getString("audityear"));
			} else {
				yearselect = "";
			}
			if (rs1 != null)
				rs1.close();

			String strDSCRYear = null, desc = "a", formuladesc = "";
			rs = DBUtils.executeLAPSQuery("com_benchmarkrows^" + strAppNo + "^"
					+ cma);
			while (rs.next()) {
				vecRec = new ArrayList();
				vecRec.add(correctNull(rs.getString("BENCH_ROWID")));
				vecRec.add(correctNull(rs.getString("BENCH_CMANO")));
				vecRec.add(correctNull(rs.getString("BENCH_ROWDESC")));
				vecRec.add(correctNull(rs.getString("BENCH_POLICY")));
				vecRec.add(correctNull(rs.getString("BENCH_DEPENDSON")));
				formuladesc = (correctNull(rs.getString("BENCH_FORMULA")));

				if (Helper.correctNull(rs.getString("BENCH_DEPENDSON"))
						.equalsIgnoreCase("FI")) {
					if (!yearselect.trim().equalsIgnoreCase("")) {
						HashMap hshformula = new HashMap();
						hshformula.put("appno", strAppNo);
						hshformula.put("formulaid", formuladesc);
						hshformula.put("curryear", yearselect);
						hshformula.put("prevyear", "");
						hshformula.put("currfinancialtype", desc);
						hshformula.put("prevfinancialtype", "a");
						hshformula.put("internalcalc", "N");
						hshformula.put("hshdata", new HashMap());
						hshRes = (HashMap) EJBInvoker.executeStateLess(
								"comformula", hshformula, "GetFinValue");
						vecRec.add(Helper.correctNull((String) hshRes
								.get("strTotalValue")));
					} else {
						vecRec.add("0.00");
					}
				} else if (Helper.correctNull(rs.getString("BENCH_DEPENDSON"))
						.equalsIgnoreCase("DSCR")) {
					/**
					 * Take Minimum DSCR value of all the financial year in
					 * Bench Mark Ratio
					 */
					// vecRec.add("0.0");
				}

				else {
					vecRec.add("0.00");
				}

				vecRec.add(correctNull(rs
						.getString("BENCHMARK_FINVALUES_STATUS")));
				vecData.add(vecRec);
			}
			hshValues.put("vecData", vecData);

			// For Ratification
			String strsel = "";
			strpage = "ratification";
			int i = 0;
			String strstatecode = "133";
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("selstaticdata^" + strstatecode);

			while (rs.next()) {
				hshValues.put("rati_desc" + i, Helper.correctNull(rs
						.getString("stat_data_desc1")));

				strsel = Helper.correctNull(rs.getString("stat_data_sno"));
				if (rs1 != null)
					rs1.close();

				strQuery = SQLParser.getSqlQuery("sel_ratification_comments^"
						+ strpage + "^" + strsel + "^" + strAppNo);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					hshValues.put("rati_comments" + i, Helper.CLOBToString(rs1
							.getClob("com_comments")));
					i++;
				}

			}
			hshValues.put("rati_Count", "" + i);
			// For T&C - Specific , Inst. to the Branch

			String strFacsno[] = { "97" };
			String srModuleType = "", mode = "", strFacCode = "", termType = "", strQuery1 = "";
			String strPrePost = "s";
			hshValues.put("strPrePost", strPrePost);

			for (i = 0; i < strFacsno.length; i++) {
				if (strFacsno[i].equals("0"))
					mode = "G";
				else if (strFacsno[i].equals("99")) {
					mode = "O";
				} else if (strFacsno[i].equals("98")) {
					mode = "B";
				} else if (strFacsno[i].equals("97")) {
					mode = "P";
				} else {
					mode = "S";
				}
				if (strSessionModuleType.equalsIgnoreCase("AGR")) {
					srModuleType = "A";
				} else {
					srModuleType = "C";
				}

				arrFacilityTerm = new ArrayList();
				arrFacilityTermType = new ArrayList();
				arrFacilityId = new ArrayList();
				arrFacilityTermStatus = new ArrayList();
				arrFacilityPrepost = new ArrayList();
				arrParentID = new ArrayList();
				arrFacilityTermStatusapp = new ArrayList();

				termType = "P";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				boolean boolresultflag = rs.next();
				if (boolresultflag) {
					do {
						arrFacilityTerm.add(correctNull(rs.getString(1)));
						arrFacilityTermType.add(correctNull(rs.getString(2)));
						arrFacilityId.add(correctNull(rs.getString(3)));
						arrFacilityTermStatus.add(correctNull(rs.getString(4)));
						arrParentID.add(correctNull(rs.getString(5)));
						strPatentid = Integer.parseInt(Helper
								.correctInt((String) rs.getString(3)));

						strQuery1 = SQLParser
								.getSqlQuery("sel_termscond_specific^"
										+ strAppNo + "^" + termType + "^"
										+ mode + "^" + srModuleType + "^"
										+ strPatentid);
						rs1 = DBUtils.executeQuery(strQuery1);
						while (rs1.next()) {
							arrFacilityTerm.add(correctNull(rs1.getString(1)));
							arrFacilityTermType.add(correctNull(rs1
									.getString(2)));
							arrFacilityId.add(correctNull(rs1.getString(3)));
							arrFacilityTermStatus.add(correctNull(rs1
									.getString(4)));
							arrParentID.add(correctNull(rs1.getString(5)));
						}
						if (rs1 != null)
							rs1.close();

					} while (rs.next());
				}
				hshValues.put("arrFacilityTerm" + i, arrFacilityTerm);
				hshValues.put("arrFacilityTermType" + i, arrFacilityTermType);
				hshValues.put("arrFacilityIdVal" + i, arrFacilityId);
				hshValues.put("arrFacilityId" + i, strFacsno[i]);
				hshValues.put("arrFacilityTermStatus" + i,
						arrFacilityTermStatus);
				hshValues.put("arrParentID" + i, arrParentID);
				if (rs != null)
					rs.close();
				termType = "A";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					arrFacilityTermApp.add(correctNull(rs.getString(1)));
					arrFacilityTermTypeApp.add(correctNull(rs.getString(2)));
					arrFacilityIdApp.add(correctNull(rs.getString(3)));
					arrFacilityTermStatusapp.add(correctNull(rs.getString(4)));
				}

				hshValues.put("arrFacilityTermApp" + i, arrFacilityTermApp);
				hshValues.put("arrFacilityTermTypeApp" + i,
						arrFacilityTermTypeApp);
				hshValues.put("arrFacilityIdAppVal" + i, arrFacilityIdApp);
				hshValues.put("arrFacilityTermStatusapp" + i,
						arrFacilityTermStatusapp);
			}

			// For Financial & Business Performance by DINESH on 31/03/2014

			ArrayList vecVal = new ArrayList();
			ArrayList vecRec1 = new ArrayList();
			ArrayList vecRec2 = new ArrayList();
			String strcomappid = correctNull((String) hshValues.get("comappid"));
			String strCompanyname = "0";
			String strindtype = correctNull((String) hshValues
					.get("industryType"));

			if (strcomappid.equalsIgnoreCase("")) {
				rs = DBUtils.executeLAPSQuery("comfunsel3^" + strAppNo);
				if (rs.next()) {
					strcomappid = Helper.correctNull((String) rs
							.getString("demo_appid"));
				}
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("com_interfirm_select^" + strindtype
					+ "^" + strcomappid);
			while (rs.next()) {
				vecRec1.add(correctNull((String) rs
						.getString("comapp_id")));
				vecRec2.add(correctNull((String) rs
						.getString("comapp_companyname")));
			}

			vecVal.add(vecRec1);
			vecVal.add(vecRec2);
			hshValues.put("vecVal", vecVal);
			hshValues.put("vecname", vecRec2);
			hshValues.put("vecid", vecRec1);

			if (!strCompanyname.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selfingrpconcernval^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("intcompfreetxt_txt1", correctNull(rs
							.getString("COM_FREETEXT1"))); // 1
					hshValues.put("intcompfreetxt_txt2", correctNull(rs
							.getString("COM_FREETEXT2")));// 2
					hshValues.put("intcompfreetxt_txt3", correctNull(rs
							.getString("COM_FREETEXT3")));// 3
					hshValues.put("COM_FREETEXT4", correctNull(rs
							.getString("COM_FREETEXT4")));// 4
				}

				strQuery = SQLParser.getSqlQuery("selfingrpconcerncompare^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				int k = 0;
				while (rs.next()) {
					k = k + 1;
					hshValues.put("txt_compname" + k, correctNull(rs
							.getString("fingrpconcern_comname"))); // 1
					hshValues.put("txt_year" + k, correctNull(rs
							.getString("fingrpconcern_year")));// 2
					hshValues.put("txt_type" + k, correctNull(rs
							.getString("fingrpconcern_fintype")));// 3
					hshValues.put("txt_gross" + k, correctNull(rs
							.getString("fingrpconcern_grosssales")));// 4
					hshValues.put("txt_netsales" + k, correctNull(rs
							.getString("fingrpconcern_netsales")));// 5
					hshValues.put("txt_netprofit" + k, correctNull(rs
							.getString("fingrpconcern_netprofit"))); // 6
					hshValues.put("txt_capital" + k, correctNull(rs
							.getString("fingrpconcern_capital")));// 7
					hshValues.put("txt_tangnet" + k, correctNull(rs
							.getString("fingrpconcern_tangnetworth")));// 8
					hshValues.put("txt_network" + k, correctNull(rs
							.getString("fingrpconcern_networkcap"))); // 9
					hshValues.put("txt_toltnw" + k, correctNull(rs
							.getString("fingrpconcern_toltnw")));// 10

					hshValues.put("txt_currratio" + k, correctNull(rs
							.getString("fingrpconcern_currratio"))); // 11
					hshValues.put("txt_estproturn" + k, correctNull(rs
							.getString("fingrpconcern_estproturn")));// 12
					hshValues.put("txt_totwork" + k, correctNull(rs
							.getString("fingrpconcern_totcapital")));// 13
					hshValues.put("txt_seccoverinclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverinclude")));// 14
					hshValues.put("txt_seccoverexclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverexclude")));// 15
					hshValues.put("txt_lastcredit" + k, correctNull(rs
							.getString("fingrpconcern_lastcredit")));// 16
					hshValues.put("txt_freetext" + k, correctNull(rs
							.getString("fingrpconcern_freetext1")));// 17
					hshValues.put("txt_freetext1" + k, correctNull(rs
							.getString("fingrpconcern_freetext2")));// 18
					hshValues.put("txt_freetext2" + k, correctNull(rs
							.getString("fingrpconcern_freetext3")));// 19
					hshValues.put("FINGRPCONCERN_FREETEXT4" + k, correctNull(rs
							.getString("FINGRPCONCERN_FREETEXT4")));// 19
				}
			}
			hshValues.put("companyname", strCompanyname);

			// For Security Coverage by DINESH on 31/03/2014
			HashMap hshsecdet = new HashMap();
			HashMap hshsecdetFrom = new HashMap();
			hshsecdetFrom.put("valuesin", strValuesIn1);
			hshsecdetFrom.put("appno", strAppNo);
			hshsecdetFrom.put("hidapplicantid", strOldAppId);
			hshsecdet = new SecurityMasterBean()
					.getCollateralSecurityDisplaynew(hshsecdetFrom);
			hshValues.put("hshsecdet", hshsecdet);

			hshValues.put("arrNewRow", (ArrayList) hshsecdet.get("arrNewRow"));

			hshValues.put("dbl_totvalexis", (String) hshsecdet
					.get("dbl_totvalexis"));
			hshValues.put("dbl_totvalproposed", (String) hshsecdet
					.get("dbl_totvalproposed"));

			hshValues.put("dbl_secexitot", (String) hshsecdet
					.get("dbl_secexitot"));
			hshValues.put("dbl_secproptot", (String) hshsecdet
					.get("dbl_secproptot"));

			hshValues.put("dbl_secexicoverage", (String) hshsecdet
					.get("dbl_secexicoverage"));
			hshValues.put("dbl_secpropcoverage", (String) hshsecdet
					.get("dbl_secpropcoverage"));

			// Customer Banking Arrangement Info by DINESH on 01/04/2014

			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			if (rs.next()) {
				strVal = correctNull(rs.getString("indinfo_bankarrangement"));
				hshValues.put("info_bankArng", Helper.correctInt((String) rs
						.getString("indinfo_bankarrangement")));

				if (strVal.equals("2")) {
					strVal = "Multiple";
				} else if (strVal.equals("3")) {
					strVal = "Consortium";
				} else {
					strVal = "Sole";
				}
				hshValues.put("presentBankArng", strVal);
			}

			ArrayList arrRow12 = new ArrayList();
			ArrayList arrCol12 = new ArrayList();
			String strBreakup = "", strInv = "", strExpd = "", strReceiv = "", strTurnover = "", strCreditors = "", strProfit = "", strOtherAssets = "", strOthr = "", strCashmargin = "", strStockAss = "", strDebitorAnalysis = "", strPeerconcerns = "", strRetireCapacity = "", strPerformCapacity = "", strOfferCashMargin = "", strExpiredBG = "";
			;
			String strQuery12 = SQLParser
					.getSqlQuery("sel_assessmnt_comments^assmntcomments^"
							+ strAppNo);
			ResultSet rs12 = DBUtils.executeQuery(strQuery12);
			while (rs12.next()) {
				arrCol12 = new ArrayList();
				String strComment = "";
				String strsno = Helper.correctNull((String) rs12
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("1")) {
					strComment = "Break up of limits";
					strBreakup = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("2")) {
					strComment = "Cash Margin";
					strCashmargin = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("3")) {
					strComment = "Inventory";
					strInv = Helper.CLOBToString(rs12.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("4")) {
					strComment = "Expenditure";
					strExpd = Helper.CLOBToString(rs12.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("5")) {
					strComment = "Receivables";
					strReceiv = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("6")) {
					strComment = "Turnover";
					strTurnover = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("7")) {
					strComment = "Creditors";
					strCreditors = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("8")) {
					strComment = "Profit and Loss";
					strProfit = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("9")) {
					strComment = "Other Current Assets and Liabilitie";
					strOtherAssets = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("12")) {
					strComment = "Others";
					strOthr = Helper.CLOBToString(rs12.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("13")) {
					strComment = "comments on stock of work in process/progress";
					strStockAss = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("16")) {
					strComment = "Age wise Debtor Analysis";
					strDebitorAnalysis = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("14")) {
					strComment = "Comment on Comparison with Peer Concerns";
					strPeerconcerns = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("17")) {
					strComment = "Capacity to retire the obligations under LC/BG/Buyers’ Credit";
					strRetireCapacity = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("18")) {
					strComment = "Capacity to Perform under Bank Guarantee";
					strPerformCapacity = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("19")) {
					strComment = "Offer comments about Cash margin";
					strOfferCashMargin = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("20")) {
					strComment = "Comments on Expired BG’s";
					strExpiredBG = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				}
				arrCol12.add(strComment);
				arrCol12.add(Helper.CLOBToString(rs12.getClob("COM_COMMENTS")));
				arrRow12.add(arrCol12);
			}

			if (rs12 != null)
				rs12.close();
			rs12 = DBUtils.executeLAPSQuery("sel_assessmnt_comments^Industry^"
					+ strAppNo);
			if (rs12.next()) {
				hshValues.put("strIndustryAnalysis", Helper.correctNull(Helper
						.CLOBToString(rs12.getClob("COM_COMMENTS"))));
			}

			hshValues.put("arrAssmntRow", arrRow12);
			hshValues.put("strBreakup", strBreakup);
			hshValues.put("strInv", strInv);
			hshValues.put("strExpd", strExpd);
			hshValues.put("strReceiv", strReceiv);
			hshValues.put("strTurnover", strTurnover);
			hshValues.put("strCreditors", strCreditors);
			hshValues.put("strProfit", strProfit);
			hshValues.put("strOtherAssets", strOtherAssets);
			hshValues.put("strOthr", strOthr);
			hshValues.put("strCashmargin", strCashmargin);
			hshValues.put("strStockAss", strStockAss);
			hshValues.put("strDebitorAnalysis", strDebitorAnalysis);
			hshValues.put("strPeerconcerns", strPeerconcerns);
			hshValues.put("strRetireCapacity", strRetireCapacity);
			hshValues.put("strPerformCapacity", strPerformCapacity);
			hshValues.put("strOfferCashMargin", strOfferCashMargin);
			hshValues.put("strExpiredBG", strExpiredBG);

			String strQuery13 = SQLParser
					.getSqlQuery("sel_assessmnt_comments^Management^"
							+ strAppNo);
			ResultSet rs13 = DBUtils.executeQuery(strQuery13);
			while (rs13.next()) {
				String strsno = Helper.correctNull((String) rs13
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("8"))
					hshValues.put("MgmtComments8", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("9"))
					hshValues.put("MgmtComments9", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("10"))
					hshValues.put("MgmtComments10", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("11"))
					hshValues.put("MgmtComments11", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("12"))
					hshValues.put("MgmtComments12", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("13"))
					hshValues.put("MgmtComments13", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("16"))
					hshValues.put("MgmtComments16", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("18"))
					hshValues.put("MgmtComments18", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("19"))
					hshValues.put("MgmtComments19", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("20"))
					hshValues.put("MgmtComments20", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("21"))
					hshValues.put("MgmtComments21", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("22"))
					hshValues.put("strEmailDate", Helper.correctNull(rs13
							.getString("COM_DACCODATE")));
				else if (strsno.equalsIgnoreCase("23"))
					hshValues.put("MgmtComments23", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("24"))
					hshValues.put("MgmtComments24", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));

				hshValues.put("OtherRelevantInfo", "1");
			}

			// BG Assessment

			if (str_arr.contains("BGA@")) {
				if (rs12 != null)
					rs12.close();
				String strbnkGurnt = "";
				strQuery = SQLParser
						.getSqlQuery("sel_assessmnt_comments^bgassessment^"
								+ strAppNo);
				rs12 = DBUtils.executeQuery(strQuery);
				while (rs12.next()) {
					String strComment = "";
					String strsno = Helper.correctNull((String) rs12
							.getString("COM_SNO"));
					if (strsno.equalsIgnoreCase("1")) {
						strComment = "Bank Guarantee";
						strbnkGurnt = Helper.CLOBToString(rs12
								.getClob("COM_COMMENTS"));
					}
				}
				hshValues.put("strbnkGurnt", strbnkGurnt);
			}
			if (str_arr.contains("AOR@")) {
				rs = DBUtils.executeLAPSQuery("sel_com_restr_assessment^"
						+ strAppNo);
				if (rs.next()) {
					hshValues.put("com_proj_details", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("com_proj_details"))));
					hshValues.put("com_restr_reasons", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_restr_reasons"))));
					hshValues.put("com_restr_justification", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_restr_justification"))));
					hshValues.put("com_exi_repayschedule", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_exi_repayschedule"))));
					hshValues.put("com_revised_repayschedule", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_revised_repayschedule"))));
					hshValues.put("strRestrAss", "true");
				} else {
					hshValues.put("strRestrAss", "false");
				}
			}

			// Sales Justification

			if (rs12 != null)
				rs12.close();
			String strLastYrEst = "", strCurrYrEst = "", strJustification = "";
			strQuery = SQLParser
					.getSqlQuery("sel_assessmnt_comments^salesjustify^"
							+ strAppNo);
			rs12 = DBUtils.executeQuery(strQuery);
			while (rs12.next()) {
				String strComment = "";
				String strsno = Helper.correctNull((String) rs12
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("1")) {
					strComment = "Estimates and actual for last three years";
					strLastYrEst = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("2")) {
					strComment = "Estimates of sales for the current year & for the next year I and II";
					strCurrYrEst = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("3")) {
					strComment = "Justification for sales";
					strJustification = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				}
			}
			hshValues.put("strLastYrEst", strLastYrEst);
			hshValues.put("strCurrYrEst", strCurrYrEst);
			hshValues.put("strJustification", strJustification);

			// Other Non Funded Assessment

			strQuery = SQLParser.getSqlQuery("sel_nonfundassessment^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_nonfund_comments", correctNull(Helper
						.CLOBToString(rs.getClob("com_nonfund_comments"))));
			}

			// Term of sanction

			strQuery = SQLParser.getSqlQuery("sel_comments^commentsTrans^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("term_com_comments", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_comments^presentproposal^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("presentproposal_comment", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "assdscr");
			if (rs.next()) {
				hshValues.put("fin_comments_dscr", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_dscr", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "cashflow");
			if (rs.next()) {
				hshValues.put("fin_comments_cashflow", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_cashflow", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "dscrsensvty");
			if (rs.next()) {
				hshValues.put("fin_comments_sensitive", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_sensitive", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Method1");
			if (rs.next()) {
				hshValues.put("fin_comments_method1", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_method1", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Method2");
			if (rs.next()) {
				hshValues.put("fin_comments_method2", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_method2", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion1^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm1", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Assessmentofwc");
			if (rs.next()) {
				hshValues.put("fin_comments_wcg", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_wcg", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}

			if (rs != null)
				rs.close();
			String strProjection = "";
			rs = DBUtils.executeLAPSQuery("sel_projectiondata^" + strAppNo);
			if (rs.next()) {
				strProjection = "Projection";
			}
			if (rs != null) {
				rs.close();
			}
			hshValues.put("strProjection", strProjection);

			// added by bhaskar for non base rate facilities
			if (rs != null) {
				rs.close();
			}
			String strComments = "";
			rs = DBUtils.executeLAPSQuery("sel_faclityforcommentsonintrate^"
					+ strAppNo);
			while (rs.next()) {

				strFacSno = Helper.correctNull(rs.getString("term_sno"));
				arrColNonBr = new ArrayList();
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate"
								+ "^" + strFacSno + "^" + strAppNo);
				if (rs1.next()) {
					strComments = correctNull(Helper.CLOBToString(rs1
							.getClob("COM_COMMENTS")));
					if (!strComments.equalsIgnoreCase("")) {
						arrColNonBr.add(Helper.correctNull(rs
								.getString("term_desc")));
						arrColNonBr.add(correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS"))));
						if (correctNull(rs.getString("com_headfac"))
								.equalsIgnoreCase("1")) {
							double dblAmt = Double.parseDouble(Helper
									.correctDouble(rs
											.getString("facility_sancamt")));
							dblAmt = dblAmt / 50;
							arrColNonBr.add(String.valueOf(dblAmt));
						} else {
							arrColNonBr.add(Helper.correctDouble(rs
									.getString("facility_sancamt")));
						}
					}
					if (rs1 != null) {
						rs1.close();
					}
				}
				if (arrColNonBr.size() > 0)
					arrRowNonBr.add(arrColNonBr);
			}
			hshValues.put("arrRowNonBr", arrRowNonBr);

			// exposure for group concerns

			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_grpexpgorgrpconcerns^"
					+ strAppNo + "^" + strAppNo);
			while (rs1.next()) {
				arrcolGrpExpDet = new ArrayList();
				arrcolGrpExpDet.add(Helper.changetoTitlecase(Helper
						.correctNull(rs1.getString("perapp_title")))
						+ "."
						+ Helper.changetoTitlecase(Helper.correctNull(rs1
								.getString("perapp_fname"))));
				if (Helper.correctNull(rs1.getString("rate_grade")).equals("")) {
					arrcolGrpExpDet.add("NA");
				} else {
					arrcolGrpExpDet.add(Helper.correctNull(rs1
							.getString("rate_grade")));
				}
				if (Helper.correctNull(rs1.getString("rate_type")).equals("")
						|| Helper.correctNull(rs1.getString("rate_type"))
								.equals("s")) {
					arrcolGrpExpDet.add("NA");
				} else {
					arrcolGrpExpDet.add(Helper.correctNull(rs1
							.getString("rate_date"))
							+ " ("
							+ Helper.correctNull(rs1.getString("rate_type"))
							+ ")");
				}
				arrcolGrpExpDet.add(Helper.correctDouble(rs1.getString("exp")));
				dblGrpExp += Double.parseDouble(Helper.correctDouble(rs1
						.getString("exp")));
				arrGrpExpDet.add(arrcolGrpExpDet);

			}

			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("com_ind_grp_permit^" + strAppNo);
			if (rs1.next()) {
				hshValues.put("dblIndVal", Helper.correctDouble(rs1
						.getString("com_individual")));
				hshValues.put("dblGrpVal", Helper.correctDouble(rs1
						.getString("com_group")));
			}

			hshValues.put("dblGrpExpVal", jtn.format(dblGrpExp));
			hshValues.put("arrGrpExpDet", arrGrpExpDet);

			ComAssetsLiabBean comassestsliab = new ComAssetsLiabBean();
			hshValues.put("strAppno", strAppNo);
			hshReqVal = comassestsliab.getFinangrpconcern(hshValues);
			hshValues.put("hshFinlValues", hshReqVal);
			// Financial Print

			String pgType = Helper.correctNull((String) hshReqValues
					.get("pgType"));
			boolean finacial_flag = false;

			if (strLoanType.equalsIgnoreCase("a")) {
				if (strFinancialrequired.equalsIgnoreCase("Y")) {
					finacial_flag = true;

				}

			} else {
				finacial_flag = true;
			}

			if (pgType.equalsIgnoreCase("MCFD")) {

				if (finacial_flag) {
					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("appidnew", strAppId);
					hshRequestValues.put("pageval", "LIABILITIES");
					hshRequestValues.put("printtype", "Y1");
					hshRequestValues = financial
							.getAnnexureIX(hshRequestValues);
					hshValues.put("hshReqValues", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pageval", "ASSETS");
					hshRequestValues.put("printtype", "Y1");
					hshRequestValues = financial
							.getAnnexureIX(hshRequestValues);
					hshValues.put("hshReqValues1", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pageval", "PROFIT AND LOSS ACCOUNT");
					hshRequestValues.put("printtype", "Y1");
					hshRequestValues = financial
							.getAnnexureIX(hshRequestValues);
					hshRequestValues.put("page", "PROFIT AND LOSS ACCOUNT");
					hshValues.put("hshReqValues2", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pagefrom", "RA1");
					hshRequestValues.put("pageType", "MCFD");
					hshRequestValues.put("printYear", "Y");
					hshRequestValues = financial.getDataRatio(hshRequestValues);
					hshRequestValues.put("page",
							"CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
					hshValues.put("hshReqValues3", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pagefrom", "RA2");
					hshRequestValues.put("pageType", "MCFD");
					hshRequestValues.put("printYear", "Y");
					hshRequestValues = financial.getDataRatio(hshRequestValues);
					hshRequestValues.put("page",
							"PROFITABILITY/TURN OVER/ OPERATING");
					hshValues.put("hshReqValues4", hshRequestValues);

				}
				// For Applicant's Profile by DINESH

				CommDocumentBean commdocument = new CommDocumentBean();

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "PROPOSALLC");
				hshReqVal.put("strPageType", "annexure");
				hshReqVal = commdocument.getAnnexureII(hshReqVal);
				hshReqVal.put("page", "PROPOSAL LC");
				hshValues.put("PROPOSALLC", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "ecboard");
				hshReqVal.put("strPageType", "annexure");
				hshReqVal = commdocument.getAnnexureII(hshReqVal);
				hshReqVal.put("page", "ecboard");
				hshValues.put("PROPOSALLC", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "PROPOSALLC");
				hshReqVal = commdocument.getAnnexureIII(hshReqVal);
				hshReqVal.put("page", "AN3");
				hshValues.put("AN3", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("hidAppNo", strAppNo);
				hshReqVal.put("PageType", "ANN3");
				hshReqVal = bankapp.getConsortiumDetails(hshReqVal);
				hshReqVal.put("page", "ANNEXUREIII");
				hshValues.put("ANN3", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "ANN5");
				hshReqVal = commdocument.getAnnexureV(hshReqVal);
				hshReqVal.put("page", "ANN5");
				hshValues.put("ANN5", hshReqVal);

				// Takeover Norms

				boolean flag = false;
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("takeovertermsel^" + strAppNo);
				rs = DBUtils.executeQuery(strQuery);
				flag = rs.next();

				if (flag == true) {
					do {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull((String) rs
								.getString("term_slno")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("TERM_NORMS")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("TERM_STATUS")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("TERM_REASON")));
						arrRow.add(arrCol);
					} while (rs.next());
				} else {
					if (rs != null) {
						rs.close();
					}

					String strModuleType = Helper
							.correctNull((String) hshReqValues
									.get("sessionModuleType"));
					if (strModuleType.equalsIgnoreCase("CORP")) {
						strModuleType = "C";
					} else if (strModuleType.equalsIgnoreCase("AGR")) {
						strModuleType = "A";
					}
					rs = DBUtils.executeLAPSQuery("sel_TakeOverNorms_Active^"
							+ strModuleType);
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull((String) rs
								.getString("ston_sno")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("ston_takeovernorm")));
						arrCol.add("S");
						arrCol.add("");
						arrRow.add(arrCol);
					}
				}
				hshValues.put("arrTakeOver", arrRow);

				if (rs != null) {
					rs.close();
				}
				String fincommcheck = "N";
				ArrayList arrFinRow = new ArrayList();
				rs = DBUtils.executeLAPSQuery("sel_com_comments^FPComments^"
						+ strAppNo);
				while (rs.next()) {
					arrCol = new ArrayList();
					String finsno = Helper.correctNull((String) rs
							.getString("com_sno"));
					// if(finsno.equalsIgnoreCase("1"))
					// {
					// arrCol.add("Inter Locking of Funds");
					// }
					// else if(finsno.equalsIgnoreCase("2"))
					// {
					// arrCol.add("Sales & Profits");
					// }
					// else if(finsno.equalsIgnoreCase("3"))
					// {
					// arrCol.add("Networth");
					// }
					// else if(finsno.equalsIgnoreCase("4"))
					// {
					// arrCol.add("Current Ratio / Net Working capital");
					// }
					// else if(finsno.equalsIgnoreCase("5"))
					// {
					// arrCol.add("TOL/TNW");
					// }
					// else if(finsno.equalsIgnoreCase("6"))
					// {
					// arrCol.add("Debt Equity");
					// }
					// else if(finsno.equalsIgnoreCase("7"))
					// {
					// arrCol.add("Debtors Turnover");
					// }
					// else if(finsno.equalsIgnoreCase("8"))
					// {
					// arrCol.add("Important notes from Directors/auditors report");
					// }
					// else if(finsno.equalsIgnoreCase("9"))
					// {
					// arrCol.add("Profitability ratio");
					// }

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("getstaticdatavaldispcorporate^141^"
									+ finsno);
					if (rs1.next()) {
						arrCol.add(Helper.correctNull(rs1
								.getString("stat_data_desc1")));
					} else {
						arrCol.add("");
					}
					arrCol.add(Helper.correctNull(Helper.CLOBToString(rs
							.getClob(("com_comments")))));
					hshValues.put("fincommcheck", "Y");
					arrFinRow.add(arrCol);
				}
				hshValues.put("arrfinComments", arrFinRow);
			} else {
				CommDocumentBean commdocument = new CommDocumentBean();

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "PROPOSALLC");
				hshReqVal.put("strPageType", "annexure");
				hshReqVal.put("strProcessNoteFlag", Helper
						.correctNull((String) hshReqValues.get("pgname")));
				hshReqVal = commdocument.getAnnexureII(hshReqVal);
				hshReqVal.put("page", "PROPOSAL LC");
				hshValues.put("PROPOSALLC", hshReqVal);

				arrOutRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("perbankingselectNewOldId^"
						+ strOldAppId);
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs.getString("perbank_facility"))); // 0
					arrOutCol.add(""); // 1
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_limit"))); // 2
					arrOutCol.add(""); // 3
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_intrate"))); // 4
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_spread"))); // 5
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_os"))); // 6
					arrOutCol.add(correctNull(rs
							.getString("perbank_osasondate"))); // 7
					arrOutCol.add(correctNull(rs.getString("perbank_duedate"))); // 8
					arrOutCol.add(correctNull(Helper.CLOBToString(rs
							.getClob("perbank_arrears")))); // 9
					if (Helper.correctNull(rs.getString("perbank_type"))
							.equalsIgnoreCase("2"))
						arrOutCol.add("Term Loan"); // 10
					else if (Helper.correctNull(rs.getString("perbank_type"))
							.equalsIgnoreCase("1"))
						arrOutCol.add("Working Capital"); // 10
					else
						arrOutCol.add(""); // 10

					if (rs2 != null) {
						rs2.close();
					}
					rs2 = DBUtils.executeLAPSQuery("getstaticdescription^147^"
							+ correctNull(rs.getString("perbank_bnkname")));
					if (rs2.next())
						arrOutCol.add(correctNull(rs2
								.getString("STAT_DATA_DESC1")));// 11
					else
						arrOutCol.add("");// 11
					if (Helper.correctNull(rs.getString("perbank_loanpurpose"))
							.equalsIgnoreCase("1"))
						arrOutCol.add("Agro processing"); // 12
					else if (Helper.correctNull(
							rs.getString("perbank_loanpurpose"))
							.equalsIgnoreCase("2"))
						arrOutCol.add("Agriculture Infrastructure"); // 12
					else if (Helper.correctNull(
							rs.getString("perbank_loanpurpose"))
							.equalsIgnoreCase("3"))
						arrOutCol.add("Others"); // 12
					else
						arrOutCol.add(""); // 12
					arrOutCol
							.add(correctNull(rs.getString("perbank_startdate"))); // 13

					arrOutRow.add(arrOutCol);
				}
				hshValues.put("arrBAOtherRowNew", arrOutRow);
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_takeover_details^" + strAppNo);
			if (rs.next()) {
				if (Helper.correctNull(
						(String) rs.getString("comtak_istakeover"))
						.equalsIgnoreCase("1")) {
					hshValues.put("strTakeOvercheck", "y");
				} else {
					hshValues.put("strTakeOvercheck", "n");
				}
			} else {
				hshValues.put("strTakeOvercheck", "n");
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("takeovertermsel^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrColTakeover = new ArrayList();
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("term_slno")));
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("TERM_NORMS")));
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("TERM_STATUS")));
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("TERM_REASON")));
				arrRowTakeover.add(arrColTakeover);
			}
			hshValues.put("arrTakeoverVal", arrRowTakeover);

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^" + strAppNo
					+ "^Takeover");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strTakeoverComments", Helper.correctNull(Helper
						.CLOBToString(rs.getClob("cmt_comments"))));
			}

			if (rs != null) {
				rs.close();
			}
			String strGoodsFlag = "";
			if (strLoanType.equalsIgnoreCase("a")) {
				rs = DBUtils.executeLAPSQuery("sel_agr_facilities^" + strAppNo);
				while (rs.next()) {

					String strFacAgrSchem = Helper.correctNull((String) rs
							.getString("facscheme"));
					if (strFacAgrSchem.equalsIgnoreCase("aK")) {
						strGoodsFlag = "Y";
					}
				}

			}

			hshValues.put("strGoodsFlag", strGoodsFlag);

			// added by bhaskar for Crop Loan Aseesment

			if (strGoodsFlag.equalsIgnoreCase("Y")) {

				hshReqValues.put("hidapplicantid", strAppId);
				hshGoods = (HashMap) EJBInvoker.executeStateLess("agriculture",
						hshReqValues, "getcaplGoodsdata");
				hshValues.put("hshGoods", hshGoods);
			}

			// Added by Kishan for Repayment Schedule for Non-EMI
			ArrayList arrCodeDescCol = new ArrayList();
			ArrayList arrCodeDescRow = new ArrayList();
			arrRow = new ArrayList();
			String strValue = "'NE','OD','LC','CO','BG','DD','PC','PS'";
			String strLoanaccount = "";
			strQuery = SQLParser.getSqlQuery("seltermfinfac_NE^" + strAppNo
					+ "^" + strValue);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrCodeDescCol = new ArrayList();
				strLoanaccount = "";
				String strCode = correctNull((String) rs.getString(1));
				String strName = correctNull((String) rs.getString(2));
				/*
				 * String strFaccode= correctNull((String)rs.getString(4));
				 * strQuery1 =
				 * SQLParser.getSqlQuery("sel_otherdetails^"+strFaccode); rs1 =
				 * DBUtils.executeQuery(strQuery1); if(rs1.next()) {
				 * strLoanaccount
				 * =Helper.correctNull((String)rs1.getString("COM_LOANACC")); }
				 * if(strLoanaccount.equalsIgnoreCase("Y")) {
				 * arrCodeDescCol.add(strCode); arrCodeDescCol.add(strName);
				 * arrCodeDescRow.add(arrCodeDescCol); }
				 */
				arrCodeDescCol.add(strCode);
				arrCodeDescCol.add(strName);
				arrCodeDescRow.add(arrCodeDescCol);
			}
			arrRow = new ArrayList();
			arrCol = new ArrayList();
			HashMap hshRepayNE = new HashMap();
			String schCode = "";
			boolean flag1 = false;
			if (arrCodeDescRow != null) {
				for (i = 0; i < arrCodeDescRow.size(); i++) {
					arrRow = new ArrayList();
					arrCol = new ArrayList();
					arrCodeDescCol = (ArrayList) arrCodeDescRow.get(i);
					schCode = (String) arrCodeDescCol.get(0);
					String strQuery8 = SQLParser
							.getSqlQuery("sel_tl_repayschedule^" + strAppNo
									+ "^" + schCode);
					rs = DBUtils.executeQuery(strQuery8);
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(correctNull(rs.getString(1)));
						arrCol.add(correctNull(rs.getString(2)));
						arrCol.add(correctNull(rs.getString(3)));
						arrCol.add(correctNull(rs.getString(4)));
						arrCol.add(correctNull(rs.getString(5)));
						arrCol.add(correctNull(rs.getString(6)));
						String strQuery9 = SQLParser
								.getSqlQuery("sel_tl_spfac^" + strAppNo + "^"
										+ correctNull((String) rs.getString(2)));
						rs1 = DBUtils.executeQuery(strQuery9);
						if (rs1.next()) {
							arrCol.add(correctNull(rs1.getString("fac_desc")));
						} else {
							arrCol.add("");
						}
						arrCol.add((String) arrCodeDescCol.get(1));
						arrRow.add(arrCol);
					}
					hshRepayNE.put(schCode, arrRow);
				}
			}
			hshValues.put("arrCodeDescRow", arrCodeDescRow);
			hshValues.put("hshRepayNE", hshRepayNE);

			// Get Presanction Security Comments
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverage^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("cmt_presanccomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			// Get Postsanction Security Comments
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverage1^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("cmt_postsanccomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}
			arrRow = new ArrayList();
			String strFacno = "";
			rs = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("term_desc")));
				strFacno = correctNull(rs.getString("term_sno"));
				strQuery = SQLParser
						.getSqlQuery("sel_comcomments1^CommentsProj^"
								+ strFacno + "^" + strAppNo + "^12");
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrCol
							.add(Helper.CLOBToString(rs1
									.getClob("com_comments")));
				} else {
					arrCol.add("Nil");
				}
				arrRow.add(arrCol);
			}
			hshValues.put("COP_comments", arrRow);

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_seccomments^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COMSEC_APPCOVERAGE", Helper.correctNull(rs
						.getString("COMSEC_APPCOVERAGE")));
				hshValues.put("COMSEC_APPCOMMENTS", correctNull(Helper
						.CLOBToString(rs.getClob("COMSEC_APPCOMMENTS"))));
				hshValues.put("COMSEC_GROUPCOVERAGE", Helper.correctNull(rs
						.getString("COMSEC_GROUPCOVERAGE")));
				hshValues.put("COMSEC_GROUPCOMMENTS", correctNull(Helper
						.CLOBToString(rs.getClob("COMSEC_GROUPCOMMENTS"))));
				hshValues.put("COMSEC_ADDITIONALSECCOVERAGE", Helper
						.correctNull(rs
								.getString("COMSEC_ADDITIONALSECCOVERAGE")));
				hshValues.put("COMSEC_ADDITIONALSECCOMMENTS",
						correctNull(Helper.CLOBToString(rs
								.getClob("COMSEC_ADDITIONALSECCOMMENTS"))));
				hshValues.put("COMSEC_SECTYPE", Helper.correctNull(rs
						.getString("COMSEC_SECTYPE")));
				hshValues.put("COMSEC_FACGROUPCONCERN", Helper.correctNull(rs
						.getString("COMSEC_FACGROUPCONCERN")));
				hshValues.put("COMSEC_FACGROUPCONCERNCOMMENTS",
						correctNull(Helper.CLOBToString(rs
								.getClob("COMSEC_FACGROUPCONCERNCOMMENTS"))));
			}
			if ((modtype.equalsIgnoreCase("CORP") || (modtype
					.equalsIgnoreCase("AGR") && strFinancialrequired
					.equalsIgnoreCase("Y")))
					&& strFinid != 0) {
				hshBenchValues = new HashMap();
				hshBenchValues.put("appno", strAppNo);
				hshBenchValues = financial.getBenchMarkParam(hshBenchValues);
				hshValues.put("hshBenchValues", hshBenchValues);
			}
			strpage = "benchmark";
			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ strpage);

			if (rs.next()) {
				hshValues.put("fin_benchmarkcmts", Helper.CLOBToString(rs
						.getClob("fin_comments")));
			}

			arrRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("rbiguidelines_restr_processnote^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("restr_rbi_slno")));
				arrCol.add(Helper.correctNull(rs
						.getString("restr_rbi_guidelines")));
				arrCol.add(Helper.correctNull(rs
						.getString("restr_rbi_compliance")));
				arrCol.add(Helper.correctNull(rs
						.getString("restr_rbi_comments")));
				arrCol.add(Helper.correctNull(rs.getString("restr_pagetype")));
				arrRow.add(arrCol);
			}

			hshValues.put("arrRBIGuidliness", arrRow);

			if (rs != null)
				rs.close();
			strpage = "fvccmts";
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppNo
					+ "^" + strpage);
			if (rs.next()) {
				hshValues.put("strFVCComments", Helper.CLOBToString(rs
						.getClob("cmt_comments")));
			}

			arrRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_rating_year_audited^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshValues.put("IntRat", "Y");
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("rdr_year")));
				if (Helper.correctNull(rs.getString("rdr_financial")).equals(
						"a")) {
					arrCol.add("Audited");
				} else if (Helper.correctNull(rs.getString("rdr_financial"))
						.equals("e")) {
					arrCol.add("Estimated");
				} else if (Helper.correctNull(rs.getString("rdr_financial"))
						.equals("u")) {
					arrCol.add("Unaudited");
				} else if (Helper.correctNull(rs.getString("rdr_financial"))
						.equals("p")) {
					arrCol.add("Projection");
				} else {
					arrCol.add(" ");
				}
				arrCol.add(Helper.correctNull(rs.getString("rdr_rating")));
				arrRow.add(arrCol);
			}
			hshValues.put("arrRowRatingRMD", arrRow);

			// To get the inward proposed amount
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_inward_proposed_values^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("INWARD_TERMLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_TERMLOANAMT")));
				hshValues.put("INWARD_WCLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_WCLOANAMT")));
				hshValues.put("INWARD_NONWCLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_NONWCLOANAMT")));
			}

			if (rs != null) {
				rs.close();
			}

			ArrayList arrCol2 = new ArrayList();
			ArrayList arrRow2 = new ArrayList();
			strQuery1 = "";
			strQuery1 = SQLParser.getSqlQuery("sel_appdetails_hunterscore^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {
				arrCol2.add(Helper.correctNull((String) rs
						.getString("DEMO_COMAPPID")));
				arrCol2.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));
				arrCol2.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow2.add(arrCol2);
			}
			if (rs != null) {
				rs.close();
			}

			ArrayList arrCol1 = new ArrayList();
			// ArrayList arrCol2 = new ArrayList();
			// boolean flag=false;
			strQuery1 = SQLParser.getSqlQuery("sel_coappdetails^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery1);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("COM_COMPDTID")));
				arrCol.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));

				arrCol.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow2.add(arrCol);
			}
			hshValues.put("arrRow2", arrRow2);

			if (rs1 != null) {
				rs1.close();
			}
			strQuery = SQLParser.getSqlQuery("selQueryraised^" + strAppNo);
			rs1 = DBUtils.executeQuery(strQuery);

			if (rs1.next()) {
				hshValues.put("strQRaisedOn", correctNull(rs1
						.getString("queryraiseddate")));
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^7^"
					+ strAppNo);
			if (rs.next()) {
				hshValues.put("cesComments", correctNull(Helper.CLOBToString(rs
						.getClob("com_comments"))));

			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_comcommentscopmof^Management^17^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("strGovtPolicy", correctNull(Helper
						.CLOBToString(rs.getClob("com_comments"))));

			}
			arrRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_swot^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				String value = Helper.correctNull(rs.getString("com_selswot"));
				if (value.equalsIgnoreCase("1")) {
					desc = "Strength";
				} else if (value.equalsIgnoreCase("2")) {
					desc = "Weakness";
				} else if (value.equalsIgnoreCase("3")) {
					desc = "Opportunities";
				} else if (value.equalsIgnoreCase("5")) {
					desc = "Mitigation of Weakness & Threats";
				} else {
					desc = "Threats";
				}
				arrCol.add(desc);
				arrCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("com_comments"))));
				arrRow.add(arrCol);
			}
			hshValues.put("arrSwotAnalysis", arrRow);

			// Draw Down Schedule

			arrRow = new ArrayList();
			double dblSancAmt = 0.0, dblDisbAmt = 0.0;
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils.executeLAPSQuery("sel_dds^" + strAppNo);
			while (rs1.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs1.getString("facility_sno")));
				arrCol.add(Helper.correctNull(rs1.getString("facility_desc")));
				arrCol.add(Helper.correctNull(rs1
						.getString("facility_sanctioned")));
				arrOutRow = new ArrayList();
				if (rs != null)
					rs.close();
				if (strAppStatus.equalsIgnoreCase("op")
						|| strAppStatus.equalsIgnoreCase("ol"))
					rs = DBUtils.executeLAPSQuery("drawdownsclt^" + strAppNo
							+ "^"
							+ Helper.correctInt(rs1.getString("facility_sno")));
				else
					rs = DBUtils.executeLAPSQuery("sel_drawdown_history^"
							+ strAppNo + "^"
							+ Helper.correctInt(rs1.getString("facility_sno")));
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrOutCol.add(Helper.correctNull(rs
							.getString("qtr_start_date")));
					arrOutCol.add(Helper.correctNull(rs
							.getString("qtr_end_date")));
					arrOutCol.add(jtn.format(Double.parseDouble(Helper
							.correctDouble(rs.getString("tot_qtr")))));
					arrOutCol.add(jtn.format(Double.parseDouble(Helper
							.correctDouble(rs.getString("amt_qtr")))));
					arrOutRow.add(arrOutCol);
				}
				arrCol.add(arrOutRow);
				arrRow.add(arrCol);

				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sel_comcommentscopmof^DRAWDOWN^"
						+ Helper.correctInt(rs1.getString("facility_sno"))
						+ "^" + strAppNo);
				if (rs.next()) {
					hshValues.put("strDrawDownCmts"
							+ Helper.correctInt(rs1.getString("facility_sno")),
							Helper.CLOBToString(rs.getClob("com_comments")));
				}

			}

			hshValues.put("arrDrawDown", arrRow);

			// External Rating Details of the applicant

			arrRow = new ArrayList();
			ArrayList arrRow11 = new ArrayList();
			ArrayList arrCol11 = new ArrayList();
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils
					.executeLAPSQuery("sel_distinctratingtype^" + strAppId);
			while (rs1.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs1.getString("agency")));
				arrOutRow = new ArrayList();
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("cusratingnew_select^" + strAppId
						+ "^" + Helper.correctInt(rs1.getString("agency")));
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrRow11 = new ArrayList();
					arrOutCol.add(Helper.correctNull(rs1.getString("agency")));// 0
					arrOutCol.add(Helper.correctNull(rs
							.getString("RAT_PARTICULARS")));// 1
					arrOutCol
							.add(Helper.correctNull(rs.getString("RATE_DATE")));// 2
					arrOutCol.add(jtn.format(Double.parseDouble(Helper
							.correctDouble(rs.getString("RAT_AMOUNT")))));// 3
					arrOutCol.add(Helper.correctNull(rs
							.getString("RAT_RISK_WEIGHT")));// 4
					if (Helper.correctNull(rs.getString("RAT_TERMTYPE"))
							.equalsIgnoreCase("L"))
						arrOutCol.add("Long-Term");// 5
					else
						arrOutCol.add("Short-Term");// 5
					arrOutCol.add(Helper.correctNull(rs
							.getString("EXTERNAL_DEFINITION")));// 6

					if (rs2 != null)
						rs2.close();
					rs2 = DBUtils.executeLAPSQuery("sel_existingratingvalues^"
							+ strOldAppId + "^" + strAppId + "^"
							+ Helper.correctInt(rs1.getString("agency")) + "^"
							+ Helper.correctNull(rs.getString("RAT_TERMTYPE")));
					while (rs2.next()) {
						if (Double.parseDouble(Helper.correctDouble(rs
								.getString("RAT_AMOUNT"))) != Double
								.parseDouble(Helper.correctDouble(rs2
										.getString("RAT_AMOUNT")))
								&& !Helper
										.correctNull(rs.getString("RAT_SYMBOL"))
										.equalsIgnoreCase(
												Helper
														.correctNull(rs2
																.getString("RAT_SYMBOL")))) {
							arrCol11 = new ArrayList();
							arrCol11.add(jtn.format(Double
									.parseDouble(Helper.correctDouble(rs2
											.getString("RAT_AMOUNT")))));
							arrCol11.add(Helper.correctNull(rs2
									.getString("RAT_SYMBOL")));
							arrCol11.add(Helper.correctNull(rs2
									.getString("EXTERNAL_DEFINITION")));
							arrRow11.add(arrCol11);
						}

					}

					arrOutCol.add(arrRow11);// 7
					arrOutCol.add(Helper
							.correctNull(rs.getString("RAT_SYMBOL")));// 8

					arrOutRow.add(arrOutCol);
				}
				arrCol.add(arrOutRow);
				arrRow.add(arrCol);

			}

			hshValues.put("arrRating", arrRow);

			// Assets Classification
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_combankingdetails^" + strAppNo);
			if (rs.next()) {
				String strAssetClassification = correctNull(rs
						.getString("com_assetclass"));
				if (strAssetClassification.equalsIgnoreCase("S")) {
					strAssetClassification = "Standard";
				} else if (strAssetClassification.equalsIgnoreCase("SS")) {
					strAssetClassification = "Sub Standard";
				} else if (strAssetClassification.equalsIgnoreCase("D")) {
					strAssetClassification = "Doubtful";
				} else if (strAssetClassification.equalsIgnoreCase("L")) {
					strAssetClassification = "Loss";
				} else {
					strAssetClassification = "NIL";
				}

				hshValues.put("strAssetClassification", strAssetClassification);
				hshValues.put("com_asscladate", correctNull(rs
						.getString("com_asscladate")));
			}

			// Defaulter Det
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_defid^" + strAppId);
			if (rs.next()) {
				if (Helper.correctNull(rs.getString("DEF_SUITFILED"))
						.equalsIgnoreCase("Y")) {
					hshValues.put("strSuitFiled", "Yes");
					hshValues.put("strSuitFiledCmts", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("DEF_SUITFILEDCOMM"))));
				} else if (Helper.correctNull(rs.getString("DEF_SUITFILED"))
						.equalsIgnoreCase("N")) {
					hshValues.put("strSuitFiled", "No");
				}
				if (Helper.correctNull(rs.getString("DEF_PROBE"))
						.equalsIgnoreCase("Y")) {
					hshValues.put("strProbe", "Yes");
					hshValues.put("strProbeCmts", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("DEF_PROBECMT"))));
				} else if (Helper.correctNull(rs.getString("DEF_PROBE"))
						.equalsIgnoreCase("N")) {
					hshValues.put("strProbe", "No");
				}
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selcom_Rbiloanpolicyguide^"
					+ strAppNo);

			while (rs.next()) {
				hshValues.put(correctNull(rs.getString("comrbi_pagetype"))
						+ "CMDPROCESSNOTE", Helper.correctNull(Helper
						.CLOBToString(rs.getClob("COMRBI_CMDPROCESS"))));
			}

			arrRow = new ArrayList();
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("selcom_cust_profit^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("COM_YEARFROM")));
				arrCol.add(Helper.correctNull(rs.getString("COM_YEARTO")));
				arrCol.add(Helper.correctNull(rs.getString("COM_FTP_PROFIT")));
				arrCol.add(Helper.correctNull(rs.getString("COM_FTP_YIELD")));
				arrCol.add(Helper.correctNull(rs.getString("COM_RAROC")));
				arrRow.add(arrCol);
			}

			hshValues.put("arrProfitability", arrRow);

			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("sel_com_ftp_breakupoflimits^"
					+ strAppNo);
			while (rs.next()) {
				hshValues.put("strFTPAmt"
						+ Helper.correctNull(rs.getString("COM_ftp_desc")),
						Helper.correctNull(rs.getString("COM_FTP_amount")));
			}

			if (rs != null) {
				rs.close();
			}// s.no-->facilityNo
			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^assmntcomments^15^"
							+ strAppNo);
			while (rs.next()) {
				hshValues.put("strAssCmts"
						+ Helper.correctNull(rs.getString("ASSEMENT_COMMENT")),
						Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));
			}

			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^salesjustify^2^"
							+ strAppNo);
			while (rs.next()) {
				String[] strArr = Helper.correctNull(
						rs.getString("assess_comments3")).split("-");
				if (strArr != null && strArr.length > 1) {
					if (Helper.correctNull(rs.getString("ASSEMENT_COMMENT"))
							.equalsIgnoreCase("CEXPORT")) {
						hshValues.put("strCYearFrom", strArr[0]);
						hshValues.put("strCYearTo", strArr[1]);
					} else if (Helper.correctNull(
							rs.getString("ASSEMENT_COMMENT")).equalsIgnoreCase(
							"NEXPORT")) {
						hshValues.put("strNYearFrom", strArr[0]);
						hshValues.put("strNYearTo", strArr[1]);
					} else if (Helper.correctNull(
							rs.getString("ASSEMENT_COMMENT")).equalsIgnoreCase(
							"IINEXPORT")) {
						hshValues.put("txt_IINyearfrom", strArr[0]);
						hshValues.put("txt_IINyearTo", strArr[1]);
					}
				}

				hshValues.put("strEstimated"
						+ Helper.correctNull(rs.getString("ASSEMENT_COMMENT")),
						Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));
				hshValues.put("strAccepted"
						+ Helper.correctNull(rs.getString("ASSEMENT_COMMENT")),
						Helper.correctNull(rs.getString("assess_comments2")));
			}

			ArrayList arrSalesAct = new ArrayList();
			ArrayList arrSalesProj = new ArrayList();
			ArrayList arrYear = new ArrayList();
			ArrayList arrGrowth = new ArrayList();
			ArrayList arrAchievement = new ArrayList();

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^salesjustify^1^"
							+ strAppNo);
			while (rs.next()) {
				arrSalesAct.add(Helper.correctNull(rs
						.getString("ASSESS_COMMENTS2")));
				arrSalesProj.add(Helper.correctNull(rs
						.getString("ASSEMENT_COMMENT1")));
				arrYear.add(Helper
						.correctNull(rs.getString("ASSEMENT_COMMENT")));
				arrGrowth.add(Helper.correctNull(rs
						.getString("ASSESS_COMMENT4")));
				arrAchievement.add(Helper.correctNull(rs
						.getString("ASSESS_COMMENTS3")));
			}

			hshValues.put("arrYear", arrYear);
			hshValues.put("arrGrowth", arrGrowth);
			hshValues.put("arrAchievement", arrAchievement);
			hshValues.put("arrSalesProj", arrSalesProj);
			hshValues.put("arrSalesAct", arrSalesAct);

			arrRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^SecCoverage^1^"
							+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol
						.add(Helper.correctNull(rs
								.getString("ASSEMENT_COMMENT")));
				arrCol.add(Helper.correctNull(rs.getString("ASSESS_CMT5")));
				arrCol.add(Helper
						.correctNull(rs.getString("ASSEMENT_COMMENT1")));
				arrCol
						.add(Helper.correctNull(rs
								.getString("ASSESS_COMMENTS2")));
				arrCol
						.add(Helper.correctNull(rs
								.getString("ASSESS_COMMENTS3")));
				arrCol.add(Helper.correctNull(rs.getString("ASSESS_COMMENT4")));
				arrRow.add(arrCol);
			}

			hshValues.put("arrSecMovement", arrRow);

			if (rs != null) {
				rs.close();
			}
			strQuery2 = SQLParser.getSqlQuery("sel_summultiplebanking_appno^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery2);
			if (rs.next()) {
				hshValues.put("FbSum1", Helper.correctDouble((String) rs
						.getString("FbSum")));
				hshValues.put("ProFbSum1", Helper.correctDouble((String) rs
						.getString("ProFbSum")));
			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_comcomments^RBICOM^2^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshValues.put("strConductOffAcccmts", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_comcomments^RBICOM^3^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshValues.put("strFTPcmts", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}

			ArrayList listRow = new ArrayList();
			ArrayList listCol = new ArrayList();
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
					+ strAppNo + "^MMithra");
			while (rs.next()) {
				listCol = new ArrayList();
				listCol
						.add(Helper
								.correctNull(rs.getString("com_description")));
				listCol.add(Helper.correctNull(rs.getString("com_details")));
				listRow.add(listCol);
			}
			hshValues.put("listMMithra", listRow);
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_app_perm_no^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("APP_PERM_NO", Helper.correctNull(rs
						.getString("APP_PERM_NO")));
				hshValues.put("APP_LOANSUBTYPE_DIGI", Helper.correctNull(rs
						.getString("APP_LOANSUBTYPE_DIGI")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_corporate_breifbackground^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_interest_refno", correctNull(rs
						.getString("com_interest_refno")));

			}
			strQuery = SQLParser.getSqlQuery("sel_facno^" + strAppNo);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				strfacno = Helper.correctNull(rs1.getString("facility_sno"));
				strQuery = SQLParser.getSqlQuery("sel_cgssd_asses^" + strAppNo
						+ "^" + strfacno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {

					/*
					 * hshValues.put("com_capita",correctNull(rs.getString("com_capita"
					 * )));
					 * hshValues.put("com_promoter",correctNull(rs.getString
					 * ("com_promoter")));
					 * hshValues.put("com_eligamount",correctNull
					 * (rs.getString("com_eligamount")));
					 * hshValues.put("com_amountappl"
					 * ,correctNull(rs.getString("com_amountappl")));
					 * hshValues.put
					 * ("com_liability",correctNull(rs.getString("com_liability"
					 * )));
					 * hshValues.put("com_maxloan",correctNull(rs.getString(
					 * "com_maxloan")));
					 * hshValues.put("com_recamount",correctNull
					 * (rs.getString("com_recamount")));
					 * hshValues.put("com_entiry_name"
					 * ,correctNull(rs.getString("com_entiry_name")));
					 * hshValues.
					 * put("com_operaccountnum",correctNull(rs.getString
					 * ("com_operaccountnum")));
					 * hshValues.put("com_status",correctNull
					 * (rs.getString("com_status")));
					 * hshValues.put("com_npadate"
					 * ,correctNull(rs.getString("com_npadate")));
					 */
					arrColCgssd = new ArrayList();
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_capita")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_promoter")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_eligamount")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_amountappl")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_liability")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_maxloan")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_recamount")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_entiry_name")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_operaccountnum")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_status")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_npadate")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("COM_MSME_CBSID")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("COM_MSME_DPDNO")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("COM_ENTITY_RESTRUCTURE")));
					arrRowcgssd.add(arrColCgssd);

				}
				hshValues.put("arrRowcgssd", arrRowcgssd);
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_cgssdperc^" + strAppNo
						+ "^" + strfacno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					hshValues.put("COM_CGSSDPERC", correctNull(rs
							.getString("COM_CGSSDPERC")));
					hshValues.put("COM_RANGETO", correctNull(rs
							.getString("COM_RANGETO")));
					// hshRecord.put("com_eligamount",correctNull(rs.getString("com_eligamount")));
				}
			}
			arrRow = new ArrayList();
			String strUser = "", strUserdesig = "";
			strQuery = SQLParser.getSqlQuery("sel_delegation^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("COM_APPNO"))); // 0
				strUser = correctNull(rs.getString("COM_USERID"));
				arrCol.add(strUser);// 1
				strUserdesig = correctNull(rs.getString("COM_USERDES"));
				arrCol.add(strUserdesig);// 2
				arrCol.add(correctNull(rs.getString("COM_SNO")));// 3

				if (Helper.isNumeric(strUserdesig)) {
					strQuery = SQLParser
							.getSqlQuery("sel_CBSStaticDataPassingCode^"
									+ "27^" + strUserdesig);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						arrCol.add(Helper.correctNull((String) rs1
								.getString("CBS_STATIC_DATA_DESC")));// 13
					} else {
						arrCol.add(strUserdesig);
					}
				} else {
					if (strUserdesig.equals("adm")) {
						arrCol.add("Administrator");
					} else if (strUserdesig.equals("999")) {
						arrCol.add("DGM Admin");
					} else if (strUserdesig.equals("001")) {
						arrCol.add("Officer");
					} else if (strUserdesig.equals("002")) {
						arrCol.add("General Manager");
					} else if (strUserdesig.equals("003")) {
						arrCol.add("Chief Manager");
					} else {
						arrCol.add(strUserdesig);
					}
				}
				arrCol.add(correctNull(rs.getString("COM_USER")));// 5
				strQuery = SQLParser.getSqlQuery("setusername_byuserid^"
						+ correctNull(rs.getString("COM_USER")));
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrCol.add(Helper.correctNull((String) rs1
							.getString("usrname")));// 13
				} else {
					arrCol.add("");
				}
				arrCol.add(correctNull(rs.getString("COM_DETAILS")));
				arrCol.add(correctNull(rs.getString("COM_DATE")));

				arrRow.add(arrCol);
			}
			hshValues.put("arrRowprop", arrRow);

			ArrayList arrDigiRating = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_digi_rate_score^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {

				arrDigiRating.add(correctNull(rs
						.getString("COMMERCIAL_BUREAU_SCORE")));
				arrDigiRating.add(correctNull(rs
						.getString("CONSUMER_IND_SCORE")));
				arrDigiRating.add(correctNull(rs
						.getString("CONSUMER_PARTY_SCORE")));
				arrDigiRating
						.add(correctNull(rs.getString("OD_ACCOUNT_SCORE")));
				arrDigiRating.add(correctNull(rs
						.getString("CURRENT_ACCOUNT_SCORE")));
				arrDigiRating.add(correctNull(rs.getString("FSA_SCORE")));
				arrDigiRating.add(correctNull(rs.getString("BAND_RATING")));
				arrDigiRating.add(correctNull(rs.getString("BAND_PATH")));
				arrDigiRating.add(correctNull(rs.getString("KB_RATING")));

			} else {
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");

			}

			hshValues.put("arrDigiRating", arrDigiRating);

			if (rs != null) {
				rs.close();
			}
			String corprestructureval = "N";
			strQuery = SQLParser.getSqlQuery("sel_rest_assess_selection^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				corprestructureval = "Y";

			}
			hshValues.put("corprestructureval", corprestructureval);
		}

		catch (Exception ce) {
			throw new EJBException("Error in getProcessNote login  "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshValues;
	}

	public HashMap getFacilityDetails(String strAppNo)  {
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		ResultSet rs = null, rs1 = null, rs2 = null;
		HashMap hshValues = new HashMap();
		String strQuery = "", strFac = "";

		ArrayList arrOutCol = new ArrayList();
		ArrayList arrOutRow = new ArrayList();
		String strLoanType = "";
		String strCheck = "", strType = "";
		String strOutstandingDate = "";
		String strFacilityFC = "";
		double strBankLimit = 0.00, strBankOS = 0.00;

		double dblExposureVal = 0.00, dblLimitBorrower = 0.00, dblTotExposure = 0.00, dblLimitBor = 0.00, dblProposedVal = 0.00, dblFBLimitTot = 0.00, dblFBOutstandTot = 0.00, dblFBExposureTot = 0.00, dblFBBorrLimit = 0.00, dblFBPropLiimitTot = 0.00, dblFBTotExp = 0.00, dblNFBLimitTot = 0.00, dblNFBOutstandTot = 0.00, dblNFBExposureTot = 0.00, dblNFBBorrLimit = 0.00, dblNFBPropLiimitTot = 0.00, dblNFBTotExp = 0.00, dblLimitTot = 0.00, dblOutstandTot = 0.00, dblExposureTot = 0.00, dblBorrLimit = 0.00, dblPropLimitTot = 0.00, dblTotExp = 0.00, dblFBfresh = 0.00, dblNFBfresh = 0.00, dblFBfreshprop = 0.00, dblNFBfreshprop = 0.00, dblFreshLimit = 0.00, dblPropExpstot = 0.00, dblFBProplimit = 0.00, dblNFBProplimit = 0.00, dblFACExposure = 0.00, dblTemp = 0.00, dblExisiting = 0.00, dblOutstanding = 0.00;
		String strFacilityNature = "", strFacilityType = "", strModType = "", strFacType = "", strSchemeCode = "";
		try {
			// Facility - Proposed only from Facilities
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_appstatus^" + strAppNo);
			if (rs.next()) {
				strLoanType = Helper.correctNull((String) rs
						.getString("app_loantype"));
				strLoanType = strLoanType.toLowerCase();
			}
			String strVal = "", strVal1 = "", strVal3 = "";
			String strlimit = "";
			/*
			 * if(rs!=null){rs.close();} strQuery =
			 * SQLParser.getSqlQuery("com_FACSel^"+
			 * strAppNo+"^"+strLoanType+"^0"); rs =
			 * DBUtils.executeQuery(strQuery); while(rs.next()) { dblExposureVal
			 * = 0.00;dblLimitBorrower=0.00; strOutstandingDate=""; strType="";
			 * if
			 * (correctNull(rs.getString("facility_renew_flag")).equalsIgnoreCase
			 * ("Y")) { if(rs1!=null){rs1.close();} rs1 =
			 * DBUtils.executeLAPSQuery
			 * ("sel_Combk_Type^"+strAppNo+"^"+Helper.correctInt
			 * (rs.getString("facility_sno")));
			 * 
			 * if(rs1.next()) {
			 * if(correctNull(rs1.getString("combk_type")).equalsIgnoreCase
			 * ("1")){dblExposureVal =
			 * Double.parseDouble(Helper.correctDouble(rs1
			 * .getString("combk_limit")));} else
			 * if(correctNull(rs1.getString("combk_type"
			 * )).equalsIgnoreCase("2")){dblExposureVal =
			 * Double.parseDouble(Helper
			 * .correctDouble(rs1.getString("combk_os")));}
			 * dblOutstanding=Double
			 * .parseDouble(Helper.correctDouble(rs1.getString("combk_os")));
			 * strOutstandingDate
			 * =Helper.correctNull((String)rs1.getString("combk_osasondate")); }
			 * } dblLimitBorrower =
			 * Double.parseDouble(Helper.correctDouble(rs.getString
			 * ("facility_proposed"
			 * )))-Double.parseDouble(Helper.correctDouble(rs
			 * .getString("facility_existing"))); String strVal = ""; String
			 * strVal1 = Helper.correctInt(rs.getString("facility_group"));
			 * String strVal3 = Helper.correctInt(rs.getString("facheaddesc"));
			 * String strlimit="";
			 * strFacilityFC=Helper.correctNull(rs.getString("com_headfac"));
			 * if(strVal1.equals("0")) { strVal1 = "Main-Limit";
			 * strlimit="Main-Limit"; strFac =
			 * correctNull(rs.getString("FACILITY_DISPLAYDESC")); }
			 * 
			 * 
			 * arrOutCol = new ArrayList();
			 * 
			 * 
			 * arrOutCol.add(correctNull(rs.getString("FACILITY_DISPLAYDESC")));
			 * //0
			 * if(correctNull(rs.getString("facility_renew_flag")).equalsIgnoreCase
			 * ("Y")) { if(strFacilityFC.equalsIgnoreCase("1"))
			 * dblTemp=Double.parseDouble
			 * (Helper.correctDouble(rs.getString("facility_existing")))/50;
			 * else
			 * dblTemp=Double.parseDouble(Helper.correctDouble(rs.getString(
			 * "facility_existing")));
			 * 
			 * arrOutCol.add(String.valueOf(dblTemp));
			 * 
			 * if(strFacilityFC.equalsIgnoreCase("1"))
			 * dblTemp=dblOutstanding/50; else dblTemp=dblOutstanding;
			 * arrOutCol.add(String.valueOf(dblTemp));
			 * 
			 * arrOutCol.add(strOutstandingDate);//3
			 * 
			 * if(strFacilityFC.equalsIgnoreCase("1"))
			 * dblExposureVal=dblExposureVal/50;
			 * arrOutCol.add(String.valueOf(dblExposureVal));//4 }else{
			 * arrOutCol.add("0.00");//1 arrOutCol.add("0.00");//2
			 * arrOutCol.add("");//3 arrOutCol.add("0.00");//4 }
			 * if(strFacilityFC.equalsIgnoreCase("1")){
			 * dblTemp=Double.parseDouble
			 * (Helper.correctDouble(rs.getString("facility_freshlimit")))/50;
			 * arrOutCol.add(String.valueOf(dblTemp));//5
			 * dblLimitBorrower=dblLimitBorrower/50;
			 * arrOutCol.add(String.valueOf(dblLimitBorrower));//6
			 * dblTemp=Double
			 * .parseDouble(Helper.correctDouble(rs.getString("facility_proposed"
			 * )))/50; arrOutCol.add(String.valueOf(dblTemp));//7 }else{
			 * arrOutCol
			 * .add(Helper.correctDouble(rs.getString("facility_freshlimit"
			 * )));//5 arrOutCol.add(String.valueOf(dblLimitBorrower));//6
			 * arrOutCol
			 * .add(Helper.correctDouble(rs.getString("facility_proposed")));//7
			 * //Existing exposure + Fresh Limit Proposed }
			 * arrOutCol.add(correctNull(rs.getString("facility_for")));//8
			 * arrOutCol.add(strlimit);//9
			 * 
			 * arrOutRow.add(arrOutCol); strQuery =
			 * SQLParser.getSqlQuery("com_FACSel^"+
			 * strAppNo+"^"+strLoanType+"^"+
			 * Helper.correctInt(rs.getString("facility_sno"))); rs2 =
			 * DBUtils.executeQuery(strQuery); while(rs2.next()) {
			 * 
			 * dblExposureVal = 0.00;dblLimitBorrower=0.00;
			 * strOutstandingDate="";
			 * if(correctNull(rs2.getString("facility_renew_flag"
			 * )).equalsIgnoreCase("Y")) { if(rs1!=null){rs1.close();} rs1 =
			 * DBUtils
			 * .executeLAPSQuery("sel_Combk_Type^"+strAppNo+"^"+Helper.correctInt
			 * (rs2.getString("facility_sno")));
			 * 
			 * if(rs1.next()) { dblExposureVal=0.0;
			 * if(correctNull(rs1.getString(
			 * "combk_type")).equalsIgnoreCase("1")){dblExposureVal =
			 * Double.parseDouble
			 * (Helper.correctDouble(rs1.getString("combk_limit")));} else
			 * if(correctNull
			 * (rs1.getString("combk_type")).equalsIgnoreCase("2"))
			 * {dblExposureVal =
			 * Double.parseDouble(Helper.correctDouble(rs1.getString
			 * ("combk_os")));}
			 * dblOutstanding=Double.parseDouble(Helper.correctDouble
			 * (rs1.getString("combk_os")));
			 * strOutstandingDate=Helper.correctNull
			 * ((String)rs1.getString("combk_osasondate")); } } dblLimitBorrower
			 * =Double.parseDouble(Helper.correctDouble(rs2.getString(
			 * "facility_proposed"
			 * )))-Double.parseDouble(Helper.correctDouble(rs2
			 * .getString("facility_existing"))); strVal = ""; strVal1 =
			 * Helper.correctInt(rs2.getString("facility_group")); strVal3 =
			 * Helper.correctInt(rs2.getString("facheaddesc")); strlimit="";
			 * strFacilityFC=Helper.correctNull(rs2.getString("com_headfac"));
			 * strVal1 = "Sub-Limit"; strlimit="Sub-Limit";
			 * if(rs1!=null){rs1.close();} rs1 =
			 * DBUtils.executeLAPSQuery("sel_sublimitVal^"
			 * +strAppNo+"^"+Helper.correctInt
			 * (rs2.getString("facility_group")));
			 * 
			 * if(rs1.next()) { strVal1 =
			 * strVal1+" -> "+correctNull(rs1.getString("com_facdesc")); }
			 * 
			 * 
			 * arrOutCol = new ArrayList();
			 * 
			 * if(rs1!=null){rs1.close();} rs1 =
			 * DBUtils.executeLAPSQuery("getfacdetforsanction^"
			 * +strAppNo+"^"+Helper
			 * .correctInt(rs2.getString("facility_group")));
			 * 
			 * if(rs1.next()) { strFac =
			 * correctNull(rs1.getString("FACILITY_DISPLAYDESC")); }
			 * arrOutCol.add(correctNull(rs2.getString("FACILITY_DISPLAYDESC"))
			 * + " (Sublimit of "+strFac+")"); //0
			 * if(correctNull(rs2.getString("facility_renew_flag"
			 * )).equalsIgnoreCase("Y")) {
			 * if(strFacilityFC.equalsIgnoreCase("1"))
			 * dblTemp=Double.parseDouble
			 * (Helper.correctDouble(rs2.getString("facility_existing")))/50;
			 * else
			 * dblTemp=Double.parseDouble(Helper.correctDouble(rs2.getString
			 * ("facility_existing")));
			 * 
			 * arrOutCol.add(String.valueOf(dblTemp));
			 * 
			 * if(strFacilityFC.equalsIgnoreCase("1"))
			 * dblTemp=dblOutstanding/50; else dblTemp=dblOutstanding;
			 * arrOutCol.add(String.valueOf(dblTemp));
			 * 
			 * arrOutCol.add(strOutstandingDate);//3
			 * 
			 * if(strFacilityFC.equalsIgnoreCase("1"))
			 * dblExposureVal=dblExposureVal/50;
			 * arrOutCol.add(String.valueOf(dblExposureVal));//4 }else{
			 * arrOutCol.add("0.00");//1 arrOutCol.add("0.00");//2
			 * arrOutCol.add("");//3 arrOutCol.add("0.00");//4 }
			 * if(strFacilityFC.equalsIgnoreCase("1")){
			 * dblTemp=Double.parseDouble
			 * (Helper.correctDouble(rs2.getString("facility_freshlimit")))/50;
			 * arrOutCol.add(String.valueOf(dblTemp));//5
			 * dblLimitBorrower=dblLimitBorrower/50;
			 * arrOutCol.add(String.valueOf(dblLimitBorrower));//6
			 * dblTemp=Double
			 * .parseDouble(Helper.correctDouble(rs2.getString("facility_proposed"
			 * )))/50; arrOutCol.add(String.valueOf(dblTemp));//7 }else{
			 * arrOutCol
			 * .add(Helper.correctDouble(rs2.getString("facility_freshlimit"
			 * )));//5 arrOutCol.add(String.valueOf(dblLimitBorrower));//6
			 * arrOutCol
			 * .add(Helper.correctDouble(rs2.getString("facility_proposed"
			 * )));//7 //Existing exposure + Fresh Limit Proposed }
			 * arrOutCol.add(correctNull(rs2.getString("facility_for")));//8
			 * arrOutCol.add(strlimit);//9
			 * 
			 * arrOutRow.add(arrOutCol);
			 * 
			 * }
			 * 
			 * }
			 */

			// Facility - Existing - Our from Banking Arrangement
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("selectprocessnotefacilities^"
					+ strLoanType + "^" + strAppNo + "^" + strLoanType + "^0^"
					+ strAppNo);
			while (rs.next()) {
				dblExposureVal = 0.00;
				strModType = Helper.correctNull(rs.getString("fac_tab"));
				// if(correctNull(rs.getString("combk_type")).equalsIgnoreCase("1")){dblExposureVal
				// =
				// Double.parseDouble(Helper.correctDouble(rs.getString("facility_proposed")));}
				// else
				// if(correctNull(rs.getString("combk_type")).equalsIgnoreCase("2")){dblExposureVal
				// =
				// Double.parseDouble(Helper.correctDouble(rs.getString("combk_os")));}

				strBankLimit = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_existing")));
				strBankOS = Double.parseDouble(Helper.correctDouble(rs
						.getString("combk_os")));
				dblFACExposure = Double.parseDouble(Helper.correctDouble(rs
						.getString("com_exposure")));
				if (!correctNull(rs.getString("combk_osasondate"))
						.equalsIgnoreCase("")
						&& Helper.correctNull(rs.getString("credittype"))
								.equalsIgnoreCase("E"))
					strOutstandingDate = correctNull(rs
							.getString("combk_osasondate"));
				strFacilityFC = Helper.correctNull((String) rs
						.getString("com_headfac"));
				strSchemeCode = Helper.correctNull((String) rs
						.getString("com_bankscheme"));
				dblTemp = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_proposed")));

				if (correctNull(rs.getString("facility_renew_flag"))
						.equalsIgnoreCase("Y")) {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_Combk_Type^" + strAppNo
							+ "^"
							+ Helper.correctInt(rs.getString("facility_sno")));

					if (rs1.next()) {
						if (correctNull(rs1.getString("combk_type"))
								.equalsIgnoreCase("1")) {
							dblExposureVal = Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("combk_limit")));
						} else if (correctNull(rs1.getString("combk_type"))
								.equalsIgnoreCase("2")) {
							dblExposureVal = Double.parseDouble(Helper
									.correctDouble(rs1.getString("combk_os")));
						}
						dblFACExposure = Double.parseDouble(Helper
								.correctDouble(rs1.getString("com_exposure")));
						strBankOS = Double.parseDouble(Helper.correctDouble(rs1
								.getString("combk_os")));
						if (!correctNull(rs.getString("combk_osasondate"))
								.equalsIgnoreCase("")
								&& Helper.correctNull(
										rs.getString("credittype"))
										.equalsIgnoreCase("E"))
							strOutstandingDate = Helper
									.correctNull((String) rs1
											.getString("combk_osasondate"));
					}
				}

				dblLimitBorrower = dblTemp - strBankLimit;
				dblProposedVal = dblLimitBorrower + dblFACExposure;

				if (strFacilityFC.equalsIgnoreCase("1")) {
					dblExposureVal = dblExposureVal / 50;
					dblLimitBorrower = dblLimitBorrower / 50;
					dblFACExposure = dblFACExposure / 50;
					strBankLimit = strBankLimit / 50;
					strBankOS = strBankOS / 50;
					dblTemp = dblTemp / 50;
					dblProposedVal = dblProposedVal / 50;
				}

				arrOutCol = new ArrayList();
				strFacilityNature = Helper.correctNull((String) rs
						.getString("combk_type"));

				// if(strFacilityNature.equalsIgnoreCase("2")&&
				// strModType.equalsIgnoreCase("C"))
				// {
				// arrOutCol.add("Term Loan");//0
				// }else{
				arrOutCol.add(Helper.correctNull((String) rs
						.getString("facility_displaydesc")));// 0
				// }
				arrOutCol.add(jtn.format(strBankLimit));// 1
				arrOutCol.add(jtn.format(strBankOS));// 2
				arrOutCol.add(strOutstandingDate);// 3
				arrOutCol.add(jtn.format(dblFACExposure));// 4

				if (strModType.equalsIgnoreCase("C")) {
					arrOutCol.add("0.00");// 5
					arrOutCol.add("0.00");// 6
					// if(strFacilityNature.equalsIgnoreCase("2"))
					// {
					// arrOutCol.add(String.valueOf(dblFACExposure));//7
					// }
					// else
					// {
					// if(strBankLimit>=strBankOS)
					// {
					// arrOutCol.add(String.valueOf(strBankLimit));//7
					// }else{
					// arrOutCol.add(String.valueOf(strBankOS));//7
					// }
					// }
				} else {
					arrOutCol.add(jtn.format(Double
							.parseDouble(Helper.correctDouble(rs
									.getString("facility_freshlimit")))));// 5
					arrOutCol.add(jtn.format(dblLimitBorrower));// 6
				}
				arrOutCol.add(jtn.format(dblProposedVal));// 7
				strFacilityType = Helper.correctNull(rs
						.getString("facility_for"));
				arrOutCol.add(strFacilityType);// 8

				strFacType = Helper.correctNull(rs.getString("combk_factype"));
				if (strFacType.equalsIgnoreCase("M")) {
					arrOutCol.add("Main-Limit");// 9
				} else if (strFacType.equalsIgnoreCase("S")) {
					arrOutCol.add("Sub-Limit");// 9
				} else {
					arrOutCol.add("");// 9
				}
				arrOutCol.add(Helper.correctNull(rs.getString("arrears")));// 10
				arrOutCol
						.add(jtn.format(Double.parseDouble(Helper
								.correctDouble(rs
										.getString("facility_sancinterest")))));// 11

				if (!strSchemeCode.equalsIgnoreCase("")) {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("selmisschemflagdetails^1^"
							+ strSchemeCode);

					if (rs1.next()) {
						arrOutCol.add(Helper.correctNull(rs1
								.getString("mis_schematic")));// 12
					} else {
						arrOutCol.add("n");
					}
				} else {
					arrOutCol.add("n");
				}
				arrOutCol.add(Helper.correctNull((rs
						.getString("facility_renewaljustif"))));
				arrOutRow.add(arrOutCol);

				// Used no where in the proposal format
				if (strFacilityType.equalsIgnoreCase("F")
						&& strModType.equalsIgnoreCase("C")) {
					dblFBTotExp = dblFBTotExp
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("facility_proposed")));
					dblFBLimitTot = dblFBLimitTot
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("facility_proposed")));
					dblFBOutstandTot = dblFBOutstandTot
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("combk_os")));
					dblFBExposureTot = dblFBExposureTot + dblExposureVal;
				} else if (strFacilityType.equalsIgnoreCase("NF")
						&& strModType.equalsIgnoreCase("C")) {
					dblNFBLimitTot = dblNFBLimitTot
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("facility_proposed")));
					dblNFBOutstandTot = dblNFBOutstandTot
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("combk_os")));
					dblNFBExposureTot = dblNFBExposureTot + dblExposureVal;
					dblNFBTotExp = dblNFBTotExp
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("facility_proposed")));
				}
				// End

				// Excluded Adhoc & Additional limits if any
				{
					strQuery = SQLParser
							.getSqlQuery("select_comfacility_details^"
									+ Helper.correctNull(rs
											.getString("facility_appno"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("facility_sno"))
									+ "^"
									+ Helper.correctInt(rs
											.getString("facility_appno"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("facility_appno"))
									+ "^"
									+ Helper.correctInt(rs
											.getString("facility_sno")));
					rs2 = DBUtils.executeQuery(strQuery);
					while (rs2.next()) {

						strVal = "";
						strVal1 = Helper.correctInt(rs2
								.getString("facility_category"));
						strlimit = "Sub-Limit";
						strFacilityFC = Helper.correctNull(rs2
								.getString("com_headfac"));
						if (strVal1.equalsIgnoreCase("A")) {
							if (Helper.correctNull(rs2.getString("facflag"))
									.equalsIgnoreCase("P"))
								strlimit = "Adhoc-Limit";
							strVal1 = "Adhoc-Limit";
						} else if (strVal1.equalsIgnoreCase("D")) {
							strVal1 = "Additional-Limit";
						} else if (strVal1.equalsIgnoreCase("R")) {
							strVal1 = "Regular Limit";
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_sublimitVal^"
								+ Helper.correctNull(rs2
										.getString("fac_baseappno"))
								+ "^"
								+ Helper.correctInt(rs2
										.getString("fac_baseappsno")));

						if (rs1.next()) {
							strFac = correctNull(rs1.getString("com_facdesc"));
						}
						arrOutCol = new ArrayList();

						arrOutCol.add(correctNull(rs2
								.getString("FACILITY_DISPLAYDESC"))
								+ " (" + strVal1 + " of " + strFac + ")"); // 0
						if (strFacilityFC.equalsIgnoreCase("1"))
							dblTemp = Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("FACILITY_SANCAMT"))) / 50;
						else
							dblTemp = Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("FACILITY_SANCAMT")));
						arrOutCol.add(Helper.formatDoubleValue(dblTemp));// 2
						arrOutCol.add("0.00");// 2
						arrOutCol.add("");// 3
						arrOutCol.add("0.00");// 4
						arrOutCol.add("0.00");// 5
						arrOutCol.add("0.00");// 6
						arrOutCol.add("0.00");// 7
						arrOutCol.add("0.00");// 8
						arrOutCol.add(strlimit);// 9
						arrOutCol.add("");
						arrOutCol.add(jtn.format(Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_sancinterest")))));
						arrOutCol.add("n");
						arrOutCol.add("");
						arrOutRow.add(arrOutCol);

					}
				}

				// Sublimit if any
				if (strModType.equalsIgnoreCase("F")) {
					strQuery = SQLParser.getSqlQuery("com_FACSel^" + strAppNo
							+ "^" + strLoanType + "^"
							+ Helper.correctInt(rs.getString("facility_sno")));
					rs2 = DBUtils.executeQuery(strQuery);
					while (rs2.next()) {

						dblExposureVal = 0.00;
						dblLimitBorrower = 0.00;
						strOutstandingDate = "";
						if (correctNull(rs2.getString("facility_renew_flag"))
								.equalsIgnoreCase("Y")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils.executeLAPSQuery("sel_Combk_Type^"
									+ strAppNo
									+ "^"
									+ Helper.correctInt(rs2
											.getString("facility_sno")));

							if (rs1.next()) {
								dblExposureVal = 0.0;
								if (correctNull(rs1.getString("combk_type"))
										.equalsIgnoreCase("1")) {
									dblExposureVal = Double.parseDouble(Helper
											.correctDouble(rs1
													.getString("combk_limit")));
								} else if (correctNull(
										rs1.getString("combk_type"))
										.equalsIgnoreCase("2")) {
									dblExposureVal = Double.parseDouble(Helper
											.correctDouble(rs1
													.getString("combk_os")));
								}
								dblOutstanding = Double.parseDouble(Helper
										.correctDouble(rs1
												.getString("combk_os")));
								strOutstandingDate = Helper
										.correctNull((String) rs1
												.getString("combk_osasondate"));
							}
						}
						dblLimitBorrower = Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_proposed")))
								- Double.parseDouble(Helper.correctDouble(rs2
										.getString("facility_existing")));
						strVal = "";
						strVal1 = Helper.correctInt(rs2
								.getString("facility_group"));
						strVal3 = Helper.correctInt(rs2
								.getString("facheaddesc"));
						strlimit = "";
						strFacilityFC = Helper.correctNull(rs2
								.getString("com_headfac"));
						strVal1 = "Sub-Limit";
						strlimit = "Sub-Limit";
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_sublimitVal^"
								+ strAppNo
								+ "^"
								+ Helper.correctInt(rs2
										.getString("facility_group")));

						if (rs1.next()) {
							strVal1 = strVal1 + " -> "
									+ correctNull(rs1.getString("com_facdesc"));
						}

						arrOutCol = new ArrayList();

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getfacdetforsanction^"
								+ strAppNo
								+ "^"
								+ Helper.correctInt(rs2
										.getString("facility_group")));

						if (rs1.next()) {
							strFac = correctNull(rs1
									.getString("FACILITY_DISPLAYDESC"));
						}
						arrOutCol.add(correctNull(rs2
								.getString("FACILITY_DISPLAYDESC"))
								+ " (Sublimit of " + strFac + ")"); // 0
						if (correctNull(rs2.getString("facility_renew_flag"))
								.equalsIgnoreCase("Y")) {
							if (strFacilityFC.equalsIgnoreCase("1"))
								dblTemp = Double
										.parseDouble(Helper
												.correctDouble(rs2
														.getString("facility_existing"))) / 50;
							else
								dblTemp = Double
										.parseDouble(Helper
												.correctDouble(rs2
														.getString("facility_existing")));

							arrOutCol.add(String.valueOf(dblTemp));// 1

							if (strFacilityFC.equalsIgnoreCase("1"))
								dblTemp = dblOutstanding / 50;
							else
								dblTemp = dblOutstanding;
							arrOutCol.add(String.valueOf(dblTemp));// 2

							arrOutCol.add(strOutstandingDate);// 3

							if (strFacilityFC.equalsIgnoreCase("1"))
								dblExposureVal = dblExposureVal / 50;
							arrOutCol.add(String.valueOf(dblExposureVal));// 4
						} else {
							arrOutCol.add("0.00");// 1
							arrOutCol.add("0.00");// 2
							arrOutCol.add("");// 3
							arrOutCol.add("0.00");// 4
						}
						if (strFacilityFC.equalsIgnoreCase("1")) {
							dblTemp = Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_freshlimit"))) / 50;
							arrOutCol.add(String.valueOf(dblTemp));// 5
							dblLimitBorrower = dblLimitBorrower / 50;
							arrOutCol.add(String.valueOf(dblLimitBorrower));// 6
							dblTemp = Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_proposed"))) / 50;
							arrOutCol.add(String.valueOf(dblTemp));// 7
						} else {
							arrOutCol.add(Helper.correctDouble(rs2
									.getString("facility_freshlimit")));// 5
							arrOutCol.add(String.valueOf(dblLimitBorrower));// 6
							arrOutCol.add(Helper.correctDouble(rs2
									.getString("facility_proposed")));// 7
																		// //Existing
																		// exposure
																		// +
																		// Fresh
																		// Limit
																		// Proposed
						}
						arrOutCol
								.add(correctNull(rs2.getString("facility_for")));// 8
						arrOutCol.add(strlimit);// 9
						arrOutCol.add("");
						arrOutCol.add(jtn.format(Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_sancinterest")))));
						arrOutCol.add("n");
						arrOutCol.add(Helper.correctNull(rs2
								.getString("facility_renewaljustif")));
						arrOutRow.add(arrOutCol);

					}
				} else {

					strQuery = SQLParser
							.getSqlQuery("selectprocessnotesublimfacilities^"
									+ strAppNo
									+ "^"
									+ Helper.correctInt(rs
											.getString("facility_appno"))
									+ "^"
									+ Helper.correctInt(rs
											.getString("facility_sno")));
					rs2 = DBUtils.executeQuery(strQuery);
					while (rs2.next()) {
						dblExposureVal = 0.00;

						strBankLimit = Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_existing")));
						strBankOS = Double.parseDouble(Helper.correctDouble(rs2
								.getString("combk_os")));
						dblFACExposure = Double.parseDouble(Helper
								.correctDouble(rs2.getString("com_exposure")));
						strFacilityFC = Helper.correctNull((String) rs2
								.getString("com_headfac"));
						strSchemeCode = Helper.correctNull((String) rs2
								.getString("com_bankscheme"));
						dblTemp = Double.parseDouble(Helper.correctDouble(rs2
								.getString("combk_limit")));

						dblLimitBorrower = dblTemp - strBankLimit;
						dblProposedVal = dblLimitBorrower + dblFACExposure;

						if (strFacilityFC.equalsIgnoreCase("1")) {
							dblExposureVal = dblExposureVal / 50;
							dblLimitBorrower = dblLimitBorrower / 50;
							dblFACExposure = dblFACExposure / 50;
							strBankLimit = strBankLimit / 50;
							strBankOS = strBankOS / 50;
							dblTemp = dblTemp / 50;
							dblProposedVal = dblProposedVal / 50;
						}

						arrOutCol = new ArrayList();
						strFac = "";
						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("getfacdetforsanction^"
								+ Helper.correctInt(rs
										.getString("facility_appno"))
								+ "^"
								+ Helper.correctInt(rs2
										.getString("facility_sno")));

						if (rs1.next()) {
							strFac = correctNull(rs1
									.getString("FACILITY_DISPLAYDESC"));
						}

						strFacilityNature = Helper.correctNull((String) rs2
								.getString("combk_type"));

						arrOutCol.add(correctNull(rs2
								.getString("FACILITY_DISPLAYDESC"))
								+ " (Sublimit of " + strFac + ")"); // 0

						arrOutCol.add(jtn.format(strBankLimit));// 1
						arrOutCol.add(jtn.format(strBankOS));// 2
						arrOutCol.add(strOutstandingDate);// 3
						arrOutCol.add(jtn.format(dblFACExposure));// 4

						arrOutCol.add(jtn.format(Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_freshlimit")))));// 5
						arrOutCol.add(jtn.format(dblLimitBorrower));// 6
						arrOutCol.add(jtn.format(dblProposedVal));// 7
						strFacilityType = Helper.correctNull(rs2
								.getString("facility_for"));
						arrOutCol.add(strFacilityType);// 8

						strFacType = Helper.correctNull(rs2
								.getString("combk_factype"));
						if (strFacType.equalsIgnoreCase("M")) {
							arrOutCol.add("Main-Limit");// 9
						} else if (strFacType.equalsIgnoreCase("S")) {
							arrOutCol.add("Sub-Limit");// 9
						} else {
							arrOutCol.add("");// 9
						}
						arrOutCol.add(Helper.correctNull(rs2
								.getString("COMBK_ARREARS")));// 10
						arrOutCol.add(jtn.format(Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("combk_interestrate")))));// 11

						arrOutCol.add("n");
						arrOutCol.add("");
						arrOutRow.add(arrOutCol);
					}

				}
			}

			// Facility - Existing - Other from Banking Arrangement
			/*
			 * if(rs!=null){rs.close();} rs =
			 * DBUtils.executeLAPSQuery("com_BAOther^"+strAppNo);
			 * while(rs.next()) { dblExposureVal = 0.00;
			 * 
			 * 
			 * if(correctNull(rs.getString("combk_type")).equalsIgnoreCase("W")){
			 * dblExposureVal =
			 * Double.parseDouble(Helper.correctDouble(rs.getString
			 * ("combk_limit")));} else
			 * if(correctNull(rs.getString("combk_type")
			 * ).equalsIgnoreCase("T")){dblExposureVal =
			 * Double.parseDouble(Helper
			 * .correctDouble(rs.getString("combk_os")));}
			 * 
			 * dblTotExposure = dblExposureVal;
			 * 
			 * 
			 * if(correctNull(rs.getString("combk_fundtype")).equalsIgnoreCase("F"
			 * )) { dblFBLimitTot =
			 * dblFBLimitTot+Double.parseDouble(Helper.correctDouble
			 * (rs.getString("combk_limit"))); dblFBOutstandTot =
			 * dblFBOutstandTot
			 * +Double.parseDouble(Helper.correctDouble(rs.getString
			 * ("combk_os"))); dblFBExposureTot =
			 * dblFBExposureTot+dblExposureVal; dblFBTotExp =
			 * dblFBTotExp+dblTotExposure; } else
			 * if(correctNull(rs.getString("combk_fundtype"
			 * )).equalsIgnoreCase("N")) { dblNFBLimitTot =
			 * dblNFBLimitTot+Double
			 * .parseDouble(Helper.correctDouble(rs.getString("combk_limit")));
			 * dblNFBOutstandTot =
			 * dblNFBOutstandTot+Double.parseDouble(Helper.correctDouble
			 * (rs.getString("combk_os"))); dblNFBExposureTot =
			 * dblNFBExposureTot+dblExposureVal; dblNFBTotExp =
			 * dblNFBTotExp+dblTotExposure; }
			 * 
			 * arrOutCol = new ArrayList();
			 * 
			 * arrOutCol.add(correctNull(rs.getString("combk_facility")));
			 * arrOutCol.add(Helper.correctDouble(rs.getString("combk_limit")));
			 * arrOutCol.add(Helper.correctDouble(rs.getString("combk_os")));
			 * arrOutCol.add(correctNull(rs.getString("combk_osasondate")));
			 * arrOutCol.add(String.valueOf(dblExposureVal));
			 * arrOutCol.add("0.00"); arrOutCol.add("0.00");
			 * arrOutCol.add(String.valueOf(dblTotExposure));
			 * arrOutCol.add(correctNull(rs.getString("combk_fundtype")));
			 * 
			 * arrOutRow.add(arrOutCol); }
			 */

			dblLimitTot = dblFBLimitTot + dblNFBLimitTot;
			dblOutstandTot = dblFBOutstandTot + dblNFBOutstandTot;
			dblExposureTot = dblFBExposureTot + dblNFBExposureTot;
			dblBorrLimit = dblFBBorrLimit + dblNFBBorrLimit;

			dblPropLimitTot = dblLimitBor + dblFBProplimit + dblNFBProplimit;
			dblTotExp = dblNFBTotExp + dblFBTotExp + dblPropExpstot
					+ dblNFBProplimit + dblFBProplimit;
			dblFreshLimit = dblFBfresh + dblNFBfresh + dblFBfreshprop
					+ dblNFBfreshprop;

			hshValues.put("dblFBLimitTot", String.valueOf(dblFBLimitTot));
			hshValues.put("dblFBOutstandTot", String.valueOf(dblFBOutstandTot));
			hshValues.put("dblFBExposureTot", String.valueOf(dblFBExposureTot));
			hshValues.put("dblFBBorrLimit", String.valueOf(dblFBBorrLimit));
			hshValues.put("dblFBPropLiimitTot", String
					.valueOf(dblFBPropLiimitTot));

			hshValues.put("dblNFBLimitTot", String.valueOf(dblNFBLimitTot));
			hshValues.put("dblNFBOutstandTot", String
					.valueOf(dblNFBOutstandTot));
			hshValues.put("dblNFBExposureTot", String
					.valueOf(dblNFBExposureTot));
			hshValues.put("dblNFBBorrLimit", String.valueOf(dblNFBBorrLimit));
			hshValues.put("dblNFBPropLiimitTot", String
					.valueOf(dblNFBPropLiimitTot));

			hshValues.put("dblLimitTot", String.valueOf(dblLimitTot));
			hshValues.put("dblOutstandTot", String.valueOf(dblOutstandTot));
			hshValues.put("dblExposureTot", String.valueOf(dblExposureTot));
			hshValues.put("dblBorrLimit", String.valueOf(dblBorrLimit));
			hshValues.put("dblPropLimitTot", String.valueOf(dblPropLimitTot));
			hshValues.put("dblTotExp", String.valueOf(dblTotExp));
			hshValues.put("dblFreshLimit", String.valueOf(dblFreshLimit));

			hshValues.put("arrFacRow", arrOutRow);
			hshValues.put("strOutstandingDate", strOutstandingDate);

		} catch (Exception ce) {
			throw new EJBException("Error in getProcessNote login  "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshValues;

	}

	public HashMap getFinProgrammePrint(HashMap hshValues)  {

		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		String strQuery = "";
		ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null, rs4 = null, rs5 = null, rsbl = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrVal = new ArrayList();
		ArrayList arrRow = new ArrayList();
		String str_parent = "";
		String str_Sno = "";
		String secid = "", secname = "", seccbssecurity = "", seccollatflag = "";
		String appno = correctNull((String) hshValues.get("appno"));
		double dblTotalBankLoan = 0.00;
		double dblTotalProjectCost = 0.00, dblTotalMargin = 0.00;
		String strYear = "";
		String strFirstYearAvail = "";
		double dblYearAmt = 0, dblTotalCost = 0;
		ArrayList arrYears = new ArrayList();
		ArrayList arrAmount = new ArrayList();
		double dblconsbl = 0.00, dblconsmargin = 0.00;
		java.text.NumberFormat nf = java.text.NumberFormat.getNumberInstance();
		nf.setMaximumFractionDigits(2);
		nf.setGroupingUsed(false);
		String strScheme = "", strfacsno = "", strSelectScheme = "";
		ArrayList arrCol = new ArrayList();
		boolean Flag = false;
		try {
			strSelectScheme = Helper.correctNull((String) hshValues
					.get("strFacilityAgr"));
			if (!strSelectScheme.equalsIgnoreCase("")) {
				String strSelectScheme1[] = strSelectScheme.split("@");
				strScheme = strSelectScheme1[0];
			}
			HashMap hshScheme = new HashMap();
			hshScheme = Helper.splitScheme(strScheme);

			if (hshScheme != null) {
				strfacsno = Helper.correctNull((String) hshScheme
						.get("facility_sno"));
				strScheme = Helper.correctNull((String) hshScheme
						.get("facility_schemetype"));
			}

			int g = 0;
			arrRow = new ArrayList();
			str_parent = "0";
			if (rs2 != null) {
				rs2.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_distinctpfyears_facno1^"
					+ appno);
			rs5 = DBUtils.executeQuery(strQuery);
			while (rs5.next()) {
				Flag = true;
				dblTotalBankLoan = 0.0;
				dblTotalProjectCost = 0.0;
				dblTotalMargin = 0.0;
				strQuery = SQLParser
						.getSqlQuery("sel_distinctpfyears^" + appno);
				rs4 = DBUtils.executeQuery(strQuery);
				while (rs4.next()) {

					dblYearAmt = 0;
					dblTotalCost = 0;
					arrCol = new ArrayList();
					strYear = Helper.correctNull((String) rs4
							.getString("afp_year"));
					String strfacno = Helper.correctInt((String) rs5
							.getString("afp_facsno"));
					strQuery = SQLParser
							.getSqlQuery("sel_agr_finprogrammeyears_facno1^"
									+ appno + "^" + strfacno);
					rs2 = DBUtils.executeQuery(strQuery);
					while (rs2.next()) {
						arrVal = new ArrayList();
						arrVal.add("Year"
								+ Helper.correctNull((String) rs2
										.getString("afp_year")));// 0
						if ((Helper.correctNull(rs2.getString("afp_parent"))
								.equalsIgnoreCase("0"))) {
							strQuery = SQLParser
									.getSqlQuery("sel_activitymasterdata_sno^"
											+ correctNull(rs2
													.getString("afp_activityid")));
							rs3 = DBUtils.executeQuery(strQuery);
							if (rs3.next()) {
								arrVal.add(correctNull(rs3
										.getString("ACT_DESC")));// 1
							} else {
								arrVal.add("");// 1

							}
						} else {
							arrVal.add(Helper.correctNull(rs2
									.getString("afp_activityid")));// 1
						}
						arrVal.add(correctNull(rs2.getString("afp_area")));// 2
						String strAreaId = Helper.correctNull(rs2
								.getString("afp_areaunit"));
						if (!strAreaId.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery = SQLParser
									.getSqlQuery("sel_areadescbyid^" + "121"
											+ "^" + strAreaId);
							rs3 = DBUtils.executeQuery(strQuery);
							if (rs3.next()) {
								arrVal.add(Helper.correctNull(rs3
										.getString("stat_data_desc1")));// 3
							} else {
								arrVal.add("");// 3
							}
						} else {
							arrVal.add("");// 3
						}
						arrVal.add(correctNull(rs2.getString("afp_adpcost")));// 4
						arrVal.add(correctNull(rs2.getString("afp_totcost")));// 5
						arrVal.add(correctNull(rs2.getString("afp_margin")));// 6
						arrVal.add(correctNull(rs2.getString("afp_bankloan")));// 7
						arrVal.add(correctNull(rs2.getString("afp_year")));// 8
						arrVal.add(correctNull(rs2.getString("facdesc")));// 9
						arrVal.add(strfacno);// 10

						dblYearAmt = dblYearAmt
								+ Double.parseDouble(Helper.correctDouble(rs2
										.getString("afp_bankloan")));
						dblTotalCost = dblTotalCost
								+ Double.parseDouble(Helper.correctDouble(rs2
										.getString("afp_totcost")));
						
						arrVal.add(correctNull(rs2.getString("agr_specifications")));//11
						arrCol.add(arrVal);
						if (Flag == true) {
							dblTotalBankLoan = dblTotalBankLoan
									+ Double
											.parseDouble((String) Helper
													.correctDouble((String) rs2
															.getString("afp_bankloan")));
							dblTotalProjectCost = dblTotalProjectCost
									+ Double.parseDouble((String) Helper
											.correctDouble((String) rs2
													.getString("afp_totcost")));
							if (dblTotalProjectCost != 0.0) {
								dblTotalMargin = ((dblTotalBankLoan / dblTotalProjectCost) * 100);
							} else {
								dblTotalMargin = 0.0;
							}
						}

					}
					Flag = false;
					hshRecord.put("totalbankloan" + (strfacno), nf
							.format(dblTotalBankLoan));
					hshRecord.put("totalprojectcost" + (strfacno), nf
							.format(dblTotalProjectCost));
					hshRecord.put("totalmarg" + (strfacno), nf
							.format(dblTotalMargin));
					dblTotalMargin = 100 - dblTotalMargin;
					hshRecord.put("count", "1");

					if (rsbl != null) {
						rsbl.close();
					}
					strQuery = SQLParser.getSqlQuery("sel_agr_finprogbankloan^"
							+ strfacno + "^" + appno);
					rsbl = DBUtils.executeQuery(strQuery);
					if (rsbl.next()) {
						dblconsbl = Double
								.parseDouble(Helper
										.checkDecimal(Helper
												.correctDouble((String) rsbl
														.getString("afp_consbankloan"))));
					}
					if (dblconsbl != 0.00 && dblTotalProjectCost != 0.00) {
						dblconsbl = dblconsbl;
						dblTotalProjectCost = dblTotalProjectCost;
					} else {
						dblconsbl = 0.00;
						dblTotalProjectCost = 1;
					}
					dblconsmargin = ((dblconsbl / dblTotalProjectCost) * 100);
					dblconsmargin = (100 - dblconsmargin);
					hshRecord.put("consbl" + (strfacno), nf.format(dblconsbl));
					hshRecord.put("consmargin" + (strfacno), nf
							.format(dblconsmargin));
				}
				arrRow.add(arrCol);
				/*
				 * arrVal = new ArrayList();
				 * arrVal.add(correctNull(rs2.getString("afp_sno"))); str_Sno =
				 * Helper.correctNull(rs2.getString("afp_sno"));
				 * arrVal.add(correctNull(rs2.getString("afp_year")));
				 * arrVal.add(correctNull(rs2.getString("afp_activityid")));
				 * arrVal.add(correctNull(rs2.getString("afp_costunit")));
				 * arrVal.add(correctNull(rs2.getString("afp_area")));
				 * arrVal.add(correctNull(rs2.getString("afp_totcost")));
				 * arrVal.add(correctNull(rs2.getString("afp_margin")));
				 * arrVal.add(correctNull(rs2.getString("afp_bankloan")));
				 * arrVal.add(correctNull(rs2.getString("afp_parent")));
				 * arrVal.add(correctNull(rs2.getString("afp_adpcost")));
				 * if((Helper
				 * .correctNull(rs2.getString("afp_parent")).equalsIgnoreCase
				 * ("0")) &&
				 * (!Helper.correctNull(rs2.getString("afp_activityid")
				 * ).equalsIgnoreCase(""))) { strQuery =
				 * SQLParser.getSqlQuery("sel_activitymasterdata_sno^"
				 * +correctNull(rs2.getString("afp_activityid"))); rs3 =
				 * DBUtils.executeQuery(strQuery); if(rs3.next()) {
				 * arrVal.add(correctNull(rs3.getString("ACT_DESC")));
				 * strFirstYearAvail
				 * =Helper.correctNull((String)rs3.getString("act_available"));
				 * } } else {
				 * arrVal.add(Helper.correctNull(rs2.getString("afp_activityid"
				 * ))); } arrVal.add("Year ");
				 * 
				 * //String strAreaId =
				 * Helper.correctNull(rs2.getString("afp_areaunit"));
				 * if(!strAreaId.equalsIgnoreCase("")) { if(rs!=null) {
				 * rs.close(); } strQuery =
				 * SQLParser.getSqlQuery("sel_areadescbyid^"
				 * +"121"+"^"+strAreaId); rs = DBUtils.executeQuery(strQuery);
				 * if(rs.next()) {
				 * arrVal.add(Helper.correctNull(rs.getString("stat_data_desc1"
				 * ))); } else { arrVal.add(""); } }
				 * arrVal.add(correctNull(rs2.getString("afp_areaunit")));
				 * arrVal.add(correctNull(rs2.getString("afp_costunitto")));
				 * arrVal.add(strFirstYearAvail); arrRow.add(arrVal);
				 */
				arrAmount = new ArrayList();
				arrAmount.add(strYear);
				arrAmount.add("Subtotal");
				arrAmount.add(jtn.format(dblYearAmt));
				arrAmount.add(jtn.format(dblTotalCost));
				arrYears.add(arrAmount);
			}
			hshRecord.put("arrRow", arrRow);
			hshRecord.put("arrYears", arrYears);

		} catch (Exception ce) {
			log.error(ce.toString());
			throw new EJBException("Error in getSecurityMaster "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}
				if (rs3 != null) {
					rs3.close();
				}
				if (rs4 != null) {
					rs4.close();
				}
				if (rsbl != null) {
					rsbl.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}

		return hshRecord;
	}

	public HashMap getProposalLC(HashMap hshValues)  {
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		ResultSet rs = null, rs1 = null, rs2 = null, rs12 = null, rs3 = null, rs4 = null, rs09 = null, rs6 = null, rs5 = null;
		HashMap hshResult = new HashMap();
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		HashMap hshReqValues = new HashMap();
		HashMap hshCropAss = new HashMap();
		HashMap hshkccIntSubVen = new HashMap();
		HashMap hshFinValues = new HashMap();
		HashMap hshFinSenValues = new HashMap();
		HashMap hshPhysicsAndFinValues = new HashMap();
		HashMap hshDSSData = new HashMap();

		DscrBean dscrobj = new DscrBean();
		String strQuery = "", strLoanType = "", strFac = "", strfacno = "";
		String strVal = "", strValuesIn = "", strVal1 = "", strVal2 = "", strVal3 = "", str_arr = "", strValuesIn1 = "", strAmountValue = "", strAmtValueIn = "";
		String strCommentMgmtSno[] = { "8", "11", "12", "13", "14", "15", "16" };
		String strCommentSno[] = { "1", "3", "5", "6" };
		String strTotalAmt = "", strSeasonType = "", strSeasonName = "", strCropType = "", strexiprotype = "", strCropName = "";

		double dblTotal = 0.0, dbl_exitot = 0.0, dbl_protot = 0.0, dblTotalAmt = 0.0, dbl_exialltot = 0.0, dbl_proalltot = 0.0;

		ArrayList arrValues = new ArrayList();
		ArrayList arrOutRow = new ArrayList();
		ArrayList arrOutCol = new ArrayList();
		ArrayList arrFacilityTermApp = new ArrayList();
		ArrayList arrFacilityTerm = new ArrayList();
		ArrayList arrFacilityTermType = new ArrayList();
		ArrayList arrParentID = new ArrayList();
		ArrayList arrFacilityId = new ArrayList();
		ArrayList arrFacilityTermStatus = new ArrayList();
		ArrayList arrFacilityPrepost = new ArrayList();
		ArrayList arrFacilityTermTypeApp = new ArrayList();
		ArrayList arrFacilityIdApp = new ArrayList();
		ArrayList arrFacilityTermStatusapp = new ArrayList();
		String strFinancialrequired = "";
		ArrayList arrPresentTL = new ArrayList();
		ArrayList arrPresentWC = new ArrayList();
		ArrayList arrExistingWC = new ArrayList();
		ArrayList arrCOPCol = new ArrayList();
		ArrayList arrCOPRow = new ArrayList();
		ArrayList arrMOFCol = new ArrayList();
		ArrayList arrMOFRow = new ArrayList();
		ArrayList arrImplSchRow = new ArrayList();
		ArrayList arrFinSnoRow = new ArrayList();
		ArrayList arrImplSchCol = new ArrayList();
		ArrayList arrRelPatCol = new ArrayList();
		ArrayList arrRelPatRow = new ArrayList();
		ArrayList arrOutRowCons = new ArrayList();
		ArrayList arrIncomeFromCropRow = new ArrayList();
		ArrayList arrIncomeFromCropCol = new ArrayList();
		ArrayList arrRowcgssd = new ArrayList();
		ArrayList arrColCgssd = new ArrayList();
		double dblBaseRate = 0.00, dblInterestRate = 0.00, dblDiffIntRate = 0.00, dblRPTotCost = 0.0, dblRPTotMargin = 0.0;
		double dblRPTotLoan = 0.0, dblTotCOP = 0.0;
		DecimalFormat dc = new DecimalFormat();
		dc.setGroupingUsed(false);
		dc.setMaximumFractionDigits(2);
		dc.setMinimumFractionDigits(2);
		FinancialBean financial = new FinancialBean();
		String strAppOldId = "";
		String strVerifyWithCFR = "", strNamApprCFR = "", strStatusVer = "", ApprUserid = "";

		double dbl_allopnBal = 0.00, dbl_opnBal = 0.00, dbl_allproEqt = 0.00, dbl_proEqt = 0.00, dbl_bnkFin = 0.00, dbl_allbnkFin = 0.00, dbl_unsec = 0.00, dbl_allunsec = 0.00;
		double dbl_allsaleProc = 0.00, dbl_saleProc = 0.00, dbl_other = 0.00, dbl_allother = 0.00, dbl_allsofTot = 0.00, dbl_sofTot = 0.00, dbl_costLand = 0.00, dbl_allcostLand = 0.00;
		double dbl_adminexp = 0.00, dbl_alladminexp = 0.00, dbl_marketexp = 0.00, dbl_allmarketexp = 0.00, dbl_constcost = 0.00, dbl_allconstcost = 0.00, dbl_premiumfsi = 0.00;
		double dbl_allpremiumfsi = 0.00, dbl_provTax = 0.00, dbl_allprovTax = 0.00, dbl_allrepayment = 0.00, dbl_repayment = 0.00, dbl_allinterest = 0.00, dbl_interest = 0.00;
		double dbl_allotherFin = 0.00, dbl_otherFin = 0.00, dbl_allappfinTot = 0.00, dbl_appfinTot = 0.00, dbl_closingBal = 0.00, dbl_allclosingBal = 0.00;
		String strRoiType = "", StrInsCompanyName = "";
		try {
			String strAppNo = correctNull((String) hshValues.get("appno"));
			String strAppId = correctNull((String) hshValues.get("appid"));
			String strAppType = correctNull((String) hshValues
					.get("strAppType"));
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_applicantiddemo^" + strAppNo);
			if (rs.next()) {
				strAppOldId = correctNull(rs.getString("demo_comappid"));
			}

			if (strAppNo.length() == 0)
				strAppNo = correctNull((String) hshValues.get("strappno"));

			// For Applicant's Profile by DINESH on 06/05/2014

			String strMCLRFlag = "Y";
			strQuery = SQLParser.getSqlQuery("sanctiondate_mclr^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshResult.put("processdate", Helper.correctNull((String) rs
						.getString("app_processdate")));
				if (Integer.parseInt(Helper
						.correctInt(rs.getString("datediff"))) < 0) {
					strMCLRFlag = "N";
				}
			}

			CommDocumentBean commdocument = new CommDocumentBean();

			HashMap hshReqVal = new HashMap();
			hshReqVal.put("appno", strAppNo);
			hshReqVal.put("appid", strAppId);
			hshReqVal.put("PageType", "PROPOSALLC");
			hshReqVal.put("strPageType", "annexure");
			hshReqVal = commdocument.getAnnexureII(hshReqVal);
			hshReqVal.put("page", "PROPOSAL LC");
			hshValues.put("PROPOSALLC", hshReqVal);

			appraisalBean appraisal = new appraisalBean();

			HashMap hshReqVal1 = new HashMap();
			hshReqVal1.put("appno", strAppNo);
			hshReqVal1.put("appid", strAppId);
			hshReqVal1.put("PageType", "PROPOSALLC");
			hshReqVal1.put("strPageType", "annexure");
			hshReqVal1 = appraisal.getRestruceAnnexure(hshReqVal1);
			hshReqVal1.put("page", "PROPOSAL LC");
			hshReqVal1.put("PROPOSALLC", hshReqVal1);
			// Brief Background--2
			String strsancdept = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
					+ strAppNo);
			if (rs.next()) {
				strVal = correctNull(rs.getString("com_submittedto"));
				strsancdept = correctNull(rs.getString("com_sancdept"));
				hshValues.put("com_sancdeptcode", strsancdept);
				if (strsancdept.equalsIgnoreCase("011")) {
					hshValues.put("com_sancdept", "Central Processing Centre");
				} else if (strsancdept.equalsIgnoreCase("008")) {
					hshValues.put("com_sancdept", "Credit A ");
				} else if (strsancdept.equalsIgnoreCase("010")) {
					hshValues.put("com_sancdept", "Credit B ");
				} else if (strsancdept.equalsIgnoreCase("007")) {
					hshValues.put("com_sancdept", "Branch");
				} else if (strsancdept.equalsIgnoreCase("006")) {
					hshValues.put("com_sancdept", "Regional Office");
				}

				if (rs1 != null) {
					rs1.close();
				}
				if (!strsancdept.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "26" + "^" + strsancdept);
					if (rs1.next()) {
						hshValues.put("strSanctiondept", Helper.correctNull(rs1
								.getString("cbs_static_data_desc")));
					}
				}

				if (!strVal.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"
							+ "21" + "^" + strVal);
					if (rs1.next()) {
						strVal = Helper.correctNull(rs1
								.getString("stat_data_desc1"));
					} else {
						strVal = "";
					}
				} else {
					strVal = "";
				}

				hshValues.put("com_partyfileno", correctNull(rs
						.getString("com_partyfileno")));
				hshValues.put("com_meeting", correctNull(rs
						.getString("com_meeting")));
				hshValues.put("com_meetingdate", correctNull(rs
						.getString("com_meetingdate")));
				hshValues.put("com_submittedto", strVal);
				hshValues.put("com_branchrcvddate", correctNull(rs
						.getString("com_branchrcvddate")));
				hshValues.put("com_branchcompletedate", correctNull(rs
						.getString("com_branchcompletedate")));
				hshValues.put("com_sancauthority", correctNull(rs
						.getString("com_sancauthority")));
				hshValues.put("com_processnotedate", correctNull(rs
						.getString("com_processnotedate")));
				hshValues
						.put("com_roho", correctNull(rs.getString("com_roho")));
				hshValues.put("com_griddate", correctNull(rs
						.getString("com_griddate")));
				hshValues.put("com_sancbranchcode", correctNull(rs
						.getString("com_sancbranch")));
				String strSancBranch = correctNull(rs
						.getString("com_sancbranch"));
				if (strSancBranch.equalsIgnoreCase("RFD")) {
					hshValues
							.put("com_sancbranch", "Retail Finance Department");
				} else if (strSancBranch.equalsIgnoreCase("MCFD")) {
					hshValues.put("com_sancbranch",
							"MID CORPORATE FINANCE DIVISION");
				} else if (strSancBranch.equalsIgnoreCase("ASG")) {
					hshValues
							.put("com_sancbranch", "AGRICULTURE SUPPORT GROUP");
				} else if (strSancBranch.equalsIgnoreCase("LCFD")) {
					hshValues.put("com_sancbranch", "LCFD");
				} else if (strSancBranch.equalsIgnoreCase("FS")) {
					hshValues.put("com_sancbranch", "FOREX SUPPORT");
				}
				hshValues.put("com_processingfee", jtn.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("com_processingfee")))));

				hshValues.put("COM_CFR_VERIFIED", correctNull(rs
						.getString("COM_CFR_VERIFIED")));
				hshValues.put("COM_CFR_BORNAME", correctNull(rs
						.getString("COM_CFR_BORNAME")));
				hshValues.put("COM_CFR_DEV_RENFO", correctNull(rs
						.getString("COM_CFR_DEV_RENFO")));

				hshValues.put("STATUS_VERIFIED", correctNull(rs
						.getString("STATUS_VERIFIED")));

				if (correctNull(rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("A")) {
					strStatusVer = "APPROVED";
				} else if (correctNull(rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("R")) {
					strStatusVer = "REJECTED";
				}

				hshValues.put("LOAN_APPR_DATE", correctNull(rs
						.getString("COM_APPR_DATE")));
				ApprUserid = correctNull(rs.getString("COM_USERID2"));

				if (ApprUserid != "") {
					if (rs1 != null) {
						rs1.close();
					}

					strQuery = SQLParser.getSqlQuery("selectusername^"
							+ ApprUserid);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshValues.put("appuserid", correctNull((String) rs1
								.getString("name")));
					}
				}

				hshValues.put("strStatusVer", strStatusVer);

				hshValues.put("com_sancauthorityVal", Helper.CLOBToString(rs
						.getClob("com_comments")));

			}
			if (rs1 != null) {
				rs1.close();
			}

			/*
			 * if(strVal.equalsIgnoreCase("adm")){strVal = "Administrator";}
			 * else if(strVal.equalsIgnoreCase("999")){strVal = "DGM Admin";}
			 * else if(strVal.equalsIgnoreCase("001")){strVal = "Officer";} else
			 * if(strVal.equalsIgnoreCase("002")){strVal = "General Manager";}
			 * else if(strVal.equalsIgnoreCase("003")){strVal =
			 * "Chief Manager";} else{strVal = "";}
			 */

			// Orgcode
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_appstatus^" + strAppNo);
			if (rs.next()) {
				strLoanType = Helper.correctNull((String) rs
						.getString("app_loantype"));
				strLoanType = strLoanType.toLowerCase();
			}

			// Recommendations
			String strType = "", strfacsel = "", strInterestType = "", strInterestRate = "", strWhetherBRAvail = "", strHoliday = "", strFacSno = "", strAdhocFac = "";
			/* String strVal="",,strVal1="",strVal2=""; */
			String strAdhocArr[] = null;
			arrOutRow = new ArrayList();
			ArrayList arrMCLR = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				arrOutCol = new ArrayList();
				strVal = "";
				strType = "";
				strFacSno = Helper.correctInt(rs.getString("facility_sno"));
				strVal1 = Helper.correctInt(rs.getString("facility_group"));
				strVal2 = Helper.correctInt(rs.getString("facility_repaytype"));

				dblBaseRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_baserate")));
				dblInterestRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_sancinterest")));
				strInterestType = Helper.correctNull((String) rs
						.getString("facility_intsubtype"));
				strAdhocFac = Helper.correctNull(rs
						.getString("facility_adhocfac"));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facility_mclrspread^"
						+ Helper.correctInt(rs.getString("facility_sno")) + "^"
						+ strAppNo);

				if (rs1.next()) {
					dblDiffIntRate = dblInterestRate - dblBaseRate;
					String strTemp = Helper.correctNull(rs1
							.getString("facility_mclrtype"));
					String strTempforfbil=Helper.correctNull(rs1.getString("facility_mclrtype"));
					String strfbildate=Helper.correctNull(rs1.getString("FBILL_DATE"));
					if (!strTemp.equalsIgnoreCase("")) {
						String[] strArr = strTemp.split("@");
						if (strArr.length > 1) {
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selcbsiddatadesc^34^"
											+ strArr[0]);
							if (rs3.next()) {
								strTemp = Helper.correctNull(rs3
										.getString("cbs_static_data_desc"));
							}
						} else {
							strTemp = "";
						}
					} else {
						strTemp = "";
					}
					strInterestRate = strTemp + " + "
							+ dc.format(dblDiffIntRate) + "% p.a presently at "
							+ dc.format(dblInterestRate) + "% p.a";
					strWhetherBRAvail = "Y";
					if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
					{
						if(strTempforfbil.contains("FD")||strTempforfbil.contains("FM"))
						{
					    arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"+ " as on "+ strfbildate);
						}
						else
						{
						arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");		
						}
					}
				} else {
					if (strInterestType.equalsIgnoreCase("BR")) {
						dblDiffIntRate = dblInterestRate - dblBaseRate;
						strInterestRate = "BR + " + dc.format(dblDiffIntRate)
								+ "% p.a presently at "
								+ dc.format(dblInterestRate) + "% p.a";
						strWhetherBRAvail = "Y";
					} else {
						strInterestRate = Helper.correctDouble(rs
								.getString("facility_interest"));
					}
				}
				strAdhocArr = strAdhocFac.split("~");

				strVal1 = "Main-Limit";

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
						+ Helper.correctInt(rs.getString("facility_sel_type")));
				if (rs1.next()) {
					strfacsel = Helper.correctNull(rs1
							.getString("STAT_DATA_DESC1"));
				}

				if (strVal2.equalsIgnoreCase("E")) {
					strVal2 = "EMI";
				} else if (strVal2.equalsIgnoreCase("NE")) {
					strVal2 = "Non EMI";
				} else if (strVal2.equalsIgnoreCase("OD")) {
					strVal2 = "On Demand";
				} else if (strVal2.equalsIgnoreCase("LC")) {
					strVal2 = "As Per LC Terms";
				} else if (strVal2.equalsIgnoreCase("CO")) {
					strVal2 = "As Per Contract Terms";
				} else if (strVal2.equalsIgnoreCase("BG")) {
					strVal2 = "As Per BG Rules";
				} else if (strVal2.equalsIgnoreCase("DD")) {
					strVal2 = "On Due Date";
				} else if (strVal2.equalsIgnoreCase("PC")) {
					strVal2 = "From the proceeds of PSC / by realization of bill";
				} else if (strVal2.equalsIgnoreCase("PS")) {
					strVal2 = "By Realization of Export Bills";
				} else if (strVal2.equalsIgnoreCase("PR")) {
					strVal2 = "By Realization of Respective Bills";
				} else if (strVal2.equalsIgnoreCase("TG")) {
					strVal2 = "As per TCBG Rules";
				} else {
					strVal2 = "";
				}

				// if(strType.equalsIgnoreCase("1"))
				// {
				// arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				// }
				// else
				// {
				arrOutCol.add(correctNull(rs.getString("facility_desc")));
				// }

				if (correctNull(rs.getString("com_headfac")).equalsIgnoreCase(
						"1")) {
					double dblAmt = Double.parseDouble(Helper.correctDouble(rs
							.getString("facility_sancamt")));
					dblAmt = dblAmt / 50;
					arrOutCol.add(String.valueOf(dblAmt));
				} else {
					arrOutCol.add(Helper.correctDouble(rs
							.getString("facility_sancamt")));// 1
				}
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_existing")));
				arrOutCol.add(strInterestRate);
				arrOutCol.add(Helper.correctInt(rs.getString("facility_sno")));
				arrOutCol.add(strVal1);
				arrOutCol.add(Helper
						.correctInt(rs.getString("facility_months")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));
				// arrOutCol.add(strVal);
				arrOutCol.add(strfacsel);
				arrOutCol.add(strVal2);
				arrOutCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("facility_margin"))));
				strHoliday = Helper.correctInt(rs
						.getString("facility_holidayperiod"));
				if (strHoliday.equalsIgnoreCase("0"))
					arrOutCol.add("Not Applicable");
				else
					arrOutCol.add(Helper.correctInt(rs
							.getString("facility_holidayperiod")));
				arrOutCol.add(strInterestType);
				arrOutCol.add(Helper.correctDouble(rs
						.getString("fac_metlifepremiumamt")));
				// for CBS Branch display
				String strOrg_Name = "";
				strQuery = SQLParser.getSqlQuery("sel_cbsdetails^" + strAppNo
						+ "^" + strFacSno);
				if (rs3 != null)
					rs3.close();
				rs3 = DBUtils.executeQuery(strQuery);
				if (rs3.next()) {
					String strOrg_Code = Helper.correctNull(rs3
							.getString("LOANDISBBRANCH"));
					strOrg_Name = "";
					if (!strOrg_Code.equalsIgnoreCase("")) {
						if (rs4 != null) {
							rs4.close();
						}
						strQuery = SQLParser.getSqlQuery("selectorgname^"
								+ strOrg_Code);
						rs4 = DBUtils.executeQuery(strQuery);
						if (rs4.next()) {
							strOrg_Name = Helper.correctNull((String) rs4
									.getString("org_name"));
							arrOutCol.add(strOrg_Name);
							// hshRecord.put("strOrg_Name", strOrg_Name);
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				strRoiType = Helper.correctNull(rs
						.getString("FAC_INS_COMPANY_NAME"));
				if (rs4 != null) {
					rs4.close();
				}
				if (!strRoiType.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"
							+ strRoiType);
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 15
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				arrOutCol.add(strRoiType);// 16

				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_TENOR")));// 17
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_LOAN_AMOUNT")));// 18
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_INS_ACCOUNT_NO")));// 19
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_AMOUNT")));// 20
				StrInsCompanyName = Helper.correctNull(rs
						.getString("FAC_INS_FUNDED_COMPANY_NAME"));
				if (rs4 != null) {
					rs4.close();
				}
				if (!StrInsCompanyName.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"
							+ StrInsCompanyName);
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 21
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				// end

				if (Helper.correctDouble(rs.getString("facility_category"))
						.equalsIgnoreCase("R"))
					arrOutCol.add("Regular Limit");
				else if (Helper
						.correctDouble(rs.getString("facility_category"))
						.equalsIgnoreCase("D"))
					arrOutCol.add("Additional Limit");
				else if (Helper
						.correctDouble(rs.getString("facility_category"))
						.equalsIgnoreCase("O"))
					arrOutCol.add("One Time Limit");
				else if (Helper
						.correctDouble(rs.getString("facility_category"))
						.equalsIgnoreCase("A"))
					arrOutCol.add("Adhoc Limit");
				else
					arrOutCol.add(" ");

				if (rs4 != null) {
					rs4.close();
				}
				if (!Helper.correctNull(rs.getString("fac_actualmargin"))
						.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^235^"
							+ Helper.correctNull(rs
									.getString("fac_actualmargin")));
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				if (rs4 != null) {
					rs4.close();
				}
				if (!Helper.correctNull(rs.getString("fac_actualrelaxed"))
						.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^236^"
							+ Helper.correctNull(rs
									.getString("fac_actualrelaxed")));
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				if (Helper.correctNull(rs.getString("fac_marginrelax"))
						.equalsIgnoreCase("Y"))
					arrOutCol.add("Yes");
				else if (Helper.correctNull(rs.getString("fac_marginrelax"))
						.equalsIgnoreCase("N"))
					arrOutCol.add("No");
				else
					arrOutCol.add("");

				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_duedate")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_freshlimit")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_existing")));

				arrOutRow.add(arrOutCol);

				if (rs2 != null) {
					rs2.close();
				}
				rs2 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strFacSno);
				while (rs2.next()) {

					arrOutCol = new ArrayList();
					strVal = "";
					strType = "";
					strVal1 = Helper
							.correctInt(rs2.getString("facility_group"));
					strVal2 = Helper.correctInt(rs2
							.getString("facility_repaytype"));

					dblBaseRate = Double.parseDouble(Helper
							.correctDouble((String) rs2
									.getString("facility_baserate")));
					dblInterestRate = Double.parseDouble(Helper
							.correctDouble((String) rs2
									.getString("facility_sancinterest")));
					strInterestType = Helper.correctNull((String) rs2
							.getString("facility_intsubtype"));
					strAdhocFac = Helper.correctNull(rs2
							.getString("facility_adhocfac"));

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_facility_mclrspread^"
							+ Helper.correctInt(rs2.getString("facility_sno"))
							+ "^" + strAppNo);

					if (rs1.next()) {
						dblDiffIntRate = dblInterestRate - dblBaseRate;
						String strTemp = Helper.correctNull(rs1
								.getString("facility_mclrtype"));
						if (!strTemp.equalsIgnoreCase("")) {
							String[] strArr = strTemp.split("@");
							if (strArr.length > 1) {
								if (rs3 != null)
									rs3.close();
								rs3 = DBUtils
										.executeLAPSQuery("selcbsiddatadesc^34^"
												+ strArr[0]);
								if (rs3.next()) {
									strTemp = Helper.correctNull(rs3
											.getString("cbs_static_data_desc"));
								}
							} else {
								strTemp = "";
							}
						} else {
							strTemp = "";
						}
						strInterestRate = strTemp + " + "
								+ dc.format(dblDiffIntRate)
								+ "% p.a presently at "
								+ dc.format(dblInterestRate) + "% p.a";
						strWhetherBRAvail = "Y";
						if (!arrMCLR
								.contains("Rate of interest is subject to change from time to time.Present applicable "
										+ strTemp
										+ " is "
										+ dc.format(dblBaseRate) + " %"))
							arrMCLR
									.add("Rate of interest is subject to change from time to time.Present applicable "
											+ strTemp
											+ " is "
											+ dc.format(dblBaseRate) + " %");
					} else {
						if (strInterestType.equalsIgnoreCase("BR")) {
							dblDiffIntRate = dblInterestRate - dblBaseRate;
							strInterestRate = "BR + "
									+ dc.format(dblDiffIntRate)
									+ "% p.a presently at "
									+ dc.format(dblInterestRate) + "% p.a";
							strWhetherBRAvail = "Y";
						} else {
							strInterestRate = Helper.correctDouble(rs2
									.getString("facility_interest"));
						}
					}
					strAdhocArr = strAdhocFac.split("~");
					{
						strVal1 = "Sub-Limit";

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_sublimitVal^"
								+ strAppNo
								+ "^"
								+ Helper.correctInt(rs2
										.getString("facility_group")));

						if (rs1.next()) {
							strVal1 = strVal1 + " -> "
									+ correctNull(rs1.getString("com_facdesc"));
						}
					}

					strType = "1";

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
							+ Helper.correctInt(rs2
									.getString("facility_sel_type")));
					if (rs1.next()) {
						strfacsel = Helper.correctNull(rs1
								.getString("STAT_DATA_DESC1"));
					}

					if (strVal2.equalsIgnoreCase("E")) {
						strVal2 = "EMI";
					} else if (strVal2.equalsIgnoreCase("NE")) {
						strVal2 = "Non EMI";
					} else if (strVal2.equalsIgnoreCase("OD")) {
						strVal2 = "On Demand";
					} else if (strVal2.equalsIgnoreCase("LC")) {
						strVal2 = "As Per LC Terms";
					} else if (strVal2.equalsIgnoreCase("CO")) {
						strVal2 = "As Per Contract Terms";
					} else if (strVal2.equalsIgnoreCase("BG")) {
						strVal2 = "As Per BG Rules";
					} else if (strVal2.equalsIgnoreCase("DD")) {
						strVal2 = "On Due Date";
					} else if (strVal2.equalsIgnoreCase("PC")) {
						strVal2 = "From the proceeds of PSC / by realization of bill";
					} else if (strVal2.equalsIgnoreCase("PS")) {
						strVal2 = "By Realization of Export Bills";
					} else if (strVal2.equalsIgnoreCase("PR")) {
						strVal2 = "By Realization of Respective Bills";
					} else if (strVal2.equalsIgnoreCase("TG")) {
						strVal2 = "As per TCBG Rules";
					} else {
						strVal2 = "";
					}

					// if(strType.equalsIgnoreCase("1"))
					// {
					// arrOutCol.add(correctNull(rs2.getString("com_facdesc")));
					// }
					// else
					// {
					arrOutCol.add(correctNull(rs2.getString("facility_desc")));
					// }
					if (correctNull(rs2.getString("com_headfac"))
							.equalsIgnoreCase("1")) {
						double dblAmt = Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_sancamt")));
						dblAmt = dblAmt / 50;
						arrOutCol.add(String.valueOf(dblAmt));
					} else {
						arrOutCol.add(Helper.correctDouble(rs2
								.getString("facility_sancamt")));// 1
					}
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("facility_existing")));
					arrOutCol.add(strInterestRate);
					arrOutCol.add(Helper.correctInt(rs2
							.getString("facility_sno")));
					arrOutCol.add(strVal1);
					arrOutCol.add(Helper.correctInt(rs2
							.getString("facility_months")));
					arrOutCol.add(correctNull(rs2.getString("facility_for")));
					// arrOutCol.add(strVal);
					arrOutCol.add(strfacsel);
					arrOutCol.add(strVal2);
					arrOutCol.add(correctNull(Helper.CLOBToString(rs2
							.getClob("facility_margin"))));
					strHoliday = Helper.correctInt(rs2
							.getString("facility_holidayperiod"));
					if (strHoliday.equalsIgnoreCase("0"))
						arrOutCol.add("Not Applicable");
					else
						arrOutCol.add(Helper.correctInt(rs2
								.getString("facility_holidayperiod")));
					arrOutCol.add(strInterestType);
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("fac_metlifepremiumamt")));
					// for CBS Branch display
					// String strOrg_Name="";
					strQuery = SQLParser.getSqlQuery("sel_cbsdetails^"
							+ strAppNo + "^" + strFacSno);
					if (rs3 != null)
						rs3.close();
					rs3 = DBUtils.executeQuery(strQuery);
					if (rs3.next()) {
						String strOrg_Code = Helper.correctNull(rs3
								.getString("LOANDISBBRANCH"));
						strOrg_Name = "";
						if (!strOrg_Code.equalsIgnoreCase("")) {
							if (rs4 != null) {
								rs4.close();
							}
							strQuery = SQLParser.getSqlQuery("selectorgname^"
									+ strOrg_Code);
							rs4 = DBUtils.executeQuery(strQuery);
							if (rs4.next()) {
								strOrg_Name = Helper.correctNull((String) rs4
										.getString("org_name"));
								arrOutCol.add(strOrg_Name);
								// hshRecord.put("strOrg_Name", strOrg_Name);
							} else {
								arrOutCol.add("");
							}
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					strRoiType = Helper.correctNull(rs2
							.getString("FAC_INS_COMPANY_NAME"));
					if (rs4 != null) {
						rs4.close();
					}
					if (!strRoiType.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^223^"
										+ strRoiType);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 19
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					arrOutCol.add(strRoiType);// 20

					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_TENOR")));// 21
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_LOAN_AMOUNT")));// 22
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_INS_ACCOUNT_NO")));// 23
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_AMOUNT")));// 24
					StrInsCompanyName = Helper.correctNull(rs2
							.getString("FAC_INS_FUNDED_COMPANY_NAME"));
					if (rs4 != null) {
						rs4.close();
					}
					if (!StrInsCompanyName.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^223^"
										+ StrInsCompanyName);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 25
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					// end

					if (Helper
							.correctDouble(rs2.getString("facility_category"))
							.equalsIgnoreCase("R"))
						arrOutCol.add("Regular Limit");
					else if (Helper.correctDouble(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("D"))
						arrOutCol.add("Additional Limit");
					else if (Helper.correctDouble(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("O"))
						arrOutCol.add("One Time Limit");
					else if (Helper.correctDouble(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("A"))
						arrOutCol.add("Adhoc Limit");
					else
						arrOutCol.add(" ");

					if (rs4 != null) {
						rs4.close();
					}
					if (!Helper.correctNull(rs2.getString("fac_actualmargin"))
							.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^235^"
										+ Helper.correctNull(rs2
												.getString("fac_actualmargin")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 25
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					if (rs4 != null) {
						rs4.close();
					}
					if (!Helper.correctNull(rs2.getString("fac_actualrelaxed"))
							.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^236^"
										+ Helper
												.correctNull(rs2
														.getString("fac_actualrelaxed")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 25
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					if (Helper.correctNull(rs2.getString("fac_marginrelax"))
							.equalsIgnoreCase("Y"))
						arrOutCol.add("Yes");
					else if (Helper.correctNull(
							rs2.getString("fac_marginrelax")).equalsIgnoreCase(
							"N"))
						arrOutCol.add("No");
					else
						arrOutCol.add("");
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("facility_duedate")));
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("facility_freshlimit")));
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("facility_existing")));

					arrOutRow.add(arrOutCol);

				}
			}

			hshValues.put("arrRecommRow", arrOutRow);
			hshValues.put("arrMCLR", arrMCLR);
			hshValues.put("strWhetherBRAvail", strWhetherBRAvail);

			ArrayList vecNcgtcRow=new ArrayList();
			ArrayList vecNcgtcCol=new ArrayList();
			rs = DBUtils.executeLAPSQuery("select_corp_ncgtc_all^" + strAppNo);
			while (rs.next()) {
				vecNcgtcCol=new ArrayList();
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_APPNO")));//1
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_FACILITY")));//2
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_TYPEOFPROJECT")));//3
				if (Helper.correctNull(rs.getString("CORP_TYPEOFPROJECT"))
						.equals("1")) {
					vecNcgtcCol.add("Green Field");//4
				} else if (Helper.correctNull(
						rs.getString("CORP_TYPEOFPROJECT")).equals("2")) {
					vecNcgtcCol.add("Brown Field");//4
				}
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_GREENFIELD")));//5
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_BROWNFIELD")));//6
				if (Helper.correctNull(rs.getString("CORP_METROPROJECT"))
						.equals("1")) {
					vecNcgtcCol.add("Yes");//7
					vecNcgtcCol.add("No");//8
				} else if (Helper
						.correctNull(rs.getString("CORP_METROPROJECT")).equals(
								"2")) {
					vecNcgtcCol.add("No");//7
					vecNcgtcCol.add("Yes");//8
				}
				
				if (Helper.correctNull(rs.getString("CORP_INDUSTRYSECTOR")).equals("1")) {
					vecNcgtcCol.add("Healthcare");//9
					vecNcgtcCol.add("No");//10
				} else if (Helper.correctNull(rs.getString("CORP_INDUSTRYSECTOR")).equals("2")) {
					vecNcgtcCol.add("Others");//9
					vecNcgtcCol.add("Yes");//10
				}
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_UDYOGAADHAAR")));//11
				vecNcgtcCol.add(Helper.correctNull(rs.getString("CORP_PROJECTUNITPIN")));//12
				if (Helper.correctNull(rs.getString("CORP_PROJECTNATURE"))
						.equals("1")) {
					vecNcgtcCol.add("Vaccine Manufacturing.");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("2")) {
					vecNcgtcCol.add("Import / Supply of vaccines and priority medical devices.");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("3")) {
					vecNcgtcCol.add("Hospitals/Dispensaries.");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("4")) {
					vecNcgtcCol.add("Pathology Labs and Diagnostic Centres");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("5")) {
					vecNcgtcCol.add("Manufacturing and Supply of Oxygen and Ventilators");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("6")) {
					vecNcgtcCol.add("COVID related drugs");//13
				} else if (Helper.correctNull(
						rs.getString("CORP_PROJECTNATURE")).equals("7")) {
					vecNcgtcCol.add("COVID Related Logistics Firms");//13
				}
				vecNcgtcCol.add(Helper.correctNull(
						rs.getString("com_facdesc")));
				vecNcgtcCol.add(Helper.correctNull(
						rs.getString("facility_sno")));
				vecNcgtcRow.add(vecNcgtcCol);
			}
			hshValues.put("vecNcgtcRow", vecNcgtcRow);

			// Customer Profile
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			strVal = "";

			if (rs.next()) {
				hshValues.put("perapp_name", correctNull(rs
						.getString("perapp_fname")));
				hshValues.put("perapp_banksince", correctNull(rs
						.getString("perapp_banksince")));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selCBSstaticdatanew^1");
				while (rs1.next()) {
					if (correctNull(
							(String) rs1.getString("cbs_static_data_code"))
							.trim().equals(
									correctNull(
											(String) rs
													.getString("perapp_title"))
											.trim())) {
						hshValues.put("perapp_title", correctNull(rs1
								.getString("cbs_static_data_desc")));
						break;
					}
				}

				// Values In
				String strOrgCode = "";
				// strValuesIn="",strValuesIn1="";
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("selorgno^" + strAppNo);
				if (rs.next()) {
					strOrgCode = correctNull(rs.getString("app_orgcode"));
					strValuesIn = correctNull(rs.getString("app_valuesin"));
					strValuesIn1 = correctNull(rs.getString("app_valuesin"));
					strValuesIn1 = correctNull(rs.getString("app_valuesin"));
					strFinancialrequired = correctNull(rs
							.getString("APP_FACILITYREQUIRED"));
				}
				hshValues.put("Financialrequired", strFinancialrequired);
				hshValues.put("valuesin", strValuesIn1);

				if (strValuesIn.equals("C")) {
					strValuesIn = "Crore";
				} else if (strValuesIn.equals("L")) {
					strValuesIn = "Lacs";
				} else if (strValuesIn.equals("R")) {
					strValuesIn = "Rs";
				}

				hshValues.put("strValuesIn", strValuesIn);
				rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strAppNo);
				if (rs.next()) {
					hshValues.put("com_amountvalue", Helper.correctNull(rs
							.getString("com_amountvalue")));
					strAmountValue = Helper.correctNull(rs
							.getString("com_amountvalue"));
				}

				if (strAmountValue.equalsIgnoreCase("C")) {
					strAmtValueIn = "Crore";
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					strAmtValueIn = "Lacs";
				} else {
					strAmtValueIn = "Rs";
				}

				hshValues.put("strAmountValue", strAmountValue);
				hshValues.put("strAmtValueIn", strAmtValueIn);

			}
			// For T&C - Specific , Inst. to the Branch

			String strFacsno[] = { "97", "98" };
			String srModuleType = "", mode = "", strFacCode = "", termType = "", strQuery1 = "";
			String strPrePost = "s";
			int strPatentid = 0;
			hshValues.put("strPrePost", strPrePost);

			for (int i = 0; i < strFacsno.length; i++) {
				if (strFacsno[i].equals("0"))
					mode = "G";
				else if (strFacsno[i].equals("99")) {
					mode = "O";
				} else if (strFacsno[i].equals("98")) {
					mode = "B";
				} else if (strFacsno[i].equals("97")) {
					mode = "P";
				} else {
					mode = "S";
				}
				srModuleType = "C";

				arrFacilityTerm = new ArrayList();
				arrFacilityTermType = new ArrayList();
				arrFacilityId = new ArrayList();
				arrFacilityTermStatus = new ArrayList();
				arrFacilityPrepost = new ArrayList();
				arrParentID = new ArrayList();
				arrFacilityTermStatusapp = new ArrayList();

				termType = "P";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				boolean boolresultflag = rs.next();
				if (boolresultflag) {
					do {
						arrFacilityTerm.add(correctNull(rs.getString(1)));
						arrFacilityTermType.add(correctNull(rs.getString(2)));
						arrFacilityId.add(correctNull(rs.getString(3)));
						arrFacilityTermStatus.add(correctNull(rs.getString(4)));
						arrParentID.add(correctNull(rs.getString(5)));
						strPatentid = Integer.parseInt(Helper
								.correctInt((String) rs.getString(3)));

						strQuery1 = SQLParser
								.getSqlQuery("sel_termscond_specific^"
										+ strAppNo + "^" + termType + "^"
										+ mode + "^" + srModuleType + "^"
										+ strPatentid);
						rs1 = DBUtils.executeQuery(strQuery1);
						while (rs1.next()) {
							arrFacilityTerm.add(correctNull(rs1.getString(1)));
							arrFacilityTermType.add(correctNull(rs1
									.getString(2)));
							arrFacilityId.add(correctNull(rs1.getString(3)));
							arrFacilityTermStatus.add(correctNull(rs1
									.getString(4)));
							arrParentID.add(correctNull(rs1.getString(5)));
						}
						if (rs1 != null)
							rs1.close();

					} while (rs.next());
				}
				hshValues.put("arrFacilityTerm" + i, arrFacilityTerm);
				hshValues.put("arrFacilityTermType" + i, arrFacilityTermType);
				hshValues.put("arrFacilityIdVal" + i, arrFacilityId);
				hshValues.put("arrFacilityId" + i, strFacsno[i]);
				hshValues.put("arrFacilityTermStatus" + i,
						arrFacilityTermStatus);
				hshValues.put("arrParentID" + i, arrParentID);
				if (rs != null)
					rs.close();
				termType = "A";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					arrFacilityTermApp.add(correctNull(rs.getString(1)));
					arrFacilityTermTypeApp.add(correctNull(rs.getString(2)));
					arrFacilityIdApp.add(correctNull(rs.getString(3)));
					arrFacilityTermStatusapp.add(correctNull(rs.getString(4)));
				}

				hshValues.put("arrFacilityTermApp" + i, arrFacilityTermApp);
				hshValues.put("arrFacilityTermTypeApp" + i,
						arrFacilityTermTypeApp);
				hshValues.put("arrFacilityIdAppVal" + i, arrFacilityIdApp);
				hshValues.put("arrFacilityTermStatusapp" + i,
						arrFacilityTermStatusapp);
			}

			// Delegation
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_delegation^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();

				arrOutCol.add(correctNull(rs.getString("com_userid")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_CBSStaticDataPassingCode^27^"
								+ correctNull((String) rs
										.getString("com_userdes")));
				if (rs1.next()) {
					arrOutCol.add(correctNull(rs1
							.getString("cbs_static_data_desc")));
				} else {
					arrOutCol.add(correctNull(rs.getString("com_userdes")));
				}
				arrOutCol.add(correctNull(rs.getString("com_userdes")));

				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrDeleRow", arrOutRow);

			// Banking Arrangement - Our Bank

			String strFacilityFC = "";
			double strBankLimit = 0.0, strBankOS = 0.0, dblExposure = 0.0;

			String strOutstandingDate = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("selectprocessnoteexistingfacilities^"
							+ strAppNo + "^" + strAppNo);
			while (rs.next()) {
				strFacilityFC = correctNull(rs.getString("com_headfac"));
				strBankLimit = Double.parseDouble(Helper.correctDouble(rs
						.getString("combk_limit")));
				strBankOS = Double.parseDouble(Helper.correctDouble(rs
						.getString("combk_os")));
				dblExposure = Double.parseDouble(Helper.correctDouble(rs
						.getString("com_exposure")));
				if (strFacilityFC.equalsIgnoreCase("1")) {
					strBankLimit = strBankLimit / 50;
					strBankOS = strBankOS / 50;
					dblExposure = dblExposure / 50;
				}
				arrOutCol = new ArrayList();
				if (correctNull(rs.getString("facdesc")).equalsIgnoreCase("TL"))
					arrOutCol.add("Term Loan");
				else if (correctNull(rs.getString("facdesc")).equalsIgnoreCase(
						"DL"))
					arrOutCol.add("DPN Loan");
				else if (correctNull(rs.getString("facdesc")).equalsIgnoreCase(
						"OD"))
					arrOutCol.add("Overdraft");
				else
					arrOutCol.add(correctNull(rs.getString("facdesc")));
				arrOutCol.add("");// 1
				arrOutCol.add(String.valueOf(strBankLimit));// 2
				arrOutCol.add(correctNull(rs.getString("combk_sancrefno")));// 3
				arrOutCol.add(correctNull(rs.getString("combk_sancdate")));// 4
				arrOutCol.add(correctNull(rs.getString("combk_spread")));// 5
				arrOutCol.add(String.valueOf(strBankOS));// 6
				arrOutCol.add(correctNull(rs.getString("combk_osasondate")));// 7
				arrOutCol.add(correctNull(rs.getString("combk_duedate")));// 8
				arrOutCol.add(correctNull(rs.getString("combk_arrears")));// 9
				arrOutCol.add(correctNull(rs.getString("combk_purpose")));// 10
				arrOutCol.add(correctNull(rs.getString("combk_inttype")));// 11
				arrOutCol.add(correctNull(rs.getString("combk_interestrate")));// 12
				arrOutCol.add(correctNull(rs.getString("combk_fac_grp")));// 13
				strType = Helper.correctNull(rs.getString("combk_factype"));
				if (strType.equalsIgnoreCase("M")) {
					strType = "Main Limit";
				} else if (strType.equalsIgnoreCase("S")) {
					strType = "Sub Limit";
				}
				arrOutCol.add(strType);// 14
				arrOutCol.add(correctNull(rs.getString("combk_remarks")));// 15
				arrOutCol.add(correctNull(rs.getString("combk_factype")));// 16
				arrOutCol.add(correctNull(rs.getString("combk_repaymentcmt")));// 17
				arrOutCol.add(dblExposure + "");// 18
				arrOutRow.add(arrOutCol);
				if (strOutstandingDate.equalsIgnoreCase(""))
					strOutstandingDate = correctNull(rs
							.getString("combk_osasondate"));

				if (Helper.correctNull(rs.getString("fac_type"))
						.equalsIgnoreCase("P")) {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("selectprocessnoteproposedsublimfacilities^"
									+ Helper.correctNull(rs
											.getString("combk_parentappno"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("combk_parentfacsno")));
					while (rs1.next()) {
						strFacilityFC = correctNull(rs1
								.getString("com_headfac"));
						strBankLimit = Double.parseDouble(Helper
								.correctDouble(rs1.getString("combk_limit")));
						strBankOS = Double.parseDouble(Helper.correctDouble(rs1
								.getString("combk_os")));
						dblExposure = Double.parseDouble(Helper
								.correctDouble(rs1.getString("com_exposure")));
						if (strFacilityFC.equalsIgnoreCase("1")) {
							strBankLimit = strBankLimit / 50;
							strBankOS = strBankOS / 50;
							dblExposure = dblExposure / 50;
						}
						arrOutCol = new ArrayList();

						if (rs2 != null)
							rs2.close();
						rs2 = DBUtils.executeLAPSQuery("getfacdetforsanction^"
								+ Helper.correctInt(rs
										.getString("combk_parentappno"))
								+ "^"
								+ Helper.correctInt(rs
										.getString("combk_parentfacsno")));

						if (rs2.next()) {
							arrOutCol.add(correctNull(rs1.getString("facdesc"))
									+ "(Sub Limit of "
									+ correctNull(rs2
											.getString("FACILITY_DISPLAYDESC"))
									+ ")");
						} else {
							arrOutCol
									.add(correctNull(rs1.getString("facdesc")));
						}
						arrOutCol.add("");// 1
						arrOutCol.add(String.valueOf(strBankLimit));// 2
						arrOutCol.add(correctNull(rs1
								.getString("combk_sancrefno")));// 3
						arrOutCol.add(correctNull(rs1
								.getString("combk_sancdate")));// 4
						arrOutCol
								.add(correctNull(rs1.getString("combk_spread")));// 5
						arrOutCol.add(String.valueOf(strBankOS));// 6
						arrOutCol.add(correctNull(rs1
								.getString("combk_osasondate")));// 7
						arrOutCol.add(correctNull(rs1
								.getString("combk_duedate")));// 8
						arrOutCol.add(correctNull(rs1
								.getString("combk_arrears")));// 9
						arrOutCol.add(correctNull(rs1
								.getString("combk_purpose")));// 10
						arrOutCol.add(correctNull(rs1
								.getString("combk_inttype")));// 11
						arrOutCol.add(correctNull(rs1
								.getString("combk_interestrate")));// 12
						arrOutCol.add(correctNull(rs1
								.getString("combk_fac_grp")));// 13
						strType = Helper.correctNull(rs1
								.getString("combk_factype"));
						if (strType.equalsIgnoreCase("M")) {
							strType = "Main Limit";
						} else if (strType.equalsIgnoreCase("S")) {
							strType = "Sub Limit";
						}
						arrOutCol.add(strType);// 14
						arrOutCol.add(correctNull(rs1
								.getString("combk_remarks")));// 15
						arrOutCol.add(correctNull(rs1
								.getString("combk_factype")));// 16
						arrOutCol.add(correctNull(rs1
								.getString("combk_repaymentcmt")));// 17
						arrOutCol.add(dblExposure + "");// 18
						arrOutRow.add(arrOutCol);
					}
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("selectprocessnoteexistingsublimfacilities^"
									+ strAppNo
									+ "^"
									+ Helper.correctNull(rs
											.getString("combk_parentappno"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("combk_parentfacsno")));
					while (rs1.next()) {
						strFacilityFC = correctNull(rs1
								.getString("com_headfac"));
						strBankLimit = Double.parseDouble(Helper
								.correctDouble(rs1.getString("combk_limit")));
						strBankOS = Double.parseDouble(Helper.correctDouble(rs1
								.getString("combk_os")));
						dblExposure = Double.parseDouble(Helper
								.correctDouble(rs1.getString("com_exposure")));
						if (strFacilityFC.equalsIgnoreCase("1")) {
							strBankLimit = strBankLimit / 50;
							strBankOS = strBankOS / 50;
							dblExposure = dblExposure / 50;
						}
						arrOutCol = new ArrayList();

						if (rs2 != null)
							rs2.close();
						rs2 = DBUtils.executeLAPSQuery("getfacdetforsanction^"
								+ Helper.correctInt(rs
										.getString("combk_parentappno"))
								+ "^"
								+ Helper.correctInt(rs
										.getString("combk_parentfacsno")));

						if (rs2.next()) {
							arrOutCol.add(correctNull(rs1.getString("facdesc"))
									+ "(Sub Limit of "
									+ correctNull(rs2
											.getString("FACILITY_DISPLAYDESC"))
									+ ")");
						} else {
							arrOutCol
									.add(correctNull(rs1.getString("facdesc")));
						}

						arrOutCol.add("");// 1
						arrOutCol.add(String.valueOf(strBankLimit));// 2
						arrOutCol.add(correctNull(rs1
								.getString("combk_sancrefno")));// 3
						arrOutCol.add(correctNull(rs1
								.getString("combk_sancdate")));// 4
						arrOutCol
								.add(correctNull(rs1.getString("combk_spread")));// 5
						arrOutCol.add(String.valueOf(strBankOS));// 6
						arrOutCol.add(correctNull(rs1
								.getString("combk_osasondate")));// 7
						arrOutCol.add(correctNull(rs1
								.getString("combk_duedate")));// 8
						arrOutCol.add(correctNull(rs1
								.getString("combk_arrears")));// 9
						arrOutCol.add(correctNull(rs1
								.getString("combk_purpose")));// 10
						arrOutCol.add(correctNull(rs1
								.getString("combk_inttype")));// 11
						arrOutCol.add(correctNull(rs1
								.getString("combk_interestrate")));// 12
						arrOutCol.add(correctNull(rs1
								.getString("combk_fac_grp")));// 13
						strType = Helper.correctNull(rs1
								.getString("combk_factype"));
						if (strType.equalsIgnoreCase("M")) {
							strType = "Main Limit";
						} else if (strType.equalsIgnoreCase("S")) {
							strType = "Sub Limit";
						}
						arrOutCol.add(strType);// 14
						arrOutCol.add(correctNull(rs1
								.getString("combk_remarks")));// 15
						arrOutCol.add(correctNull(rs1
								.getString("combk_factype")));// 16
						arrOutCol.add(correctNull(rs1
								.getString("combk_repaymentcmt")));// 17
						arrOutCol.add(dblExposure + "");// 18
						arrOutRow.add(arrOutCol);
					}
				}
			}
			hshValues.put("arrBAOurRow", arrOutRow);
			hshValues.put("strOutstandingDate", strOutstandingDate);

			// For Financial & Business Performance

			ArrayList vecVal = new ArrayList();
			ArrayList vecRec1 = new ArrayList();
			ArrayList vecRec2 = new ArrayList();
			String strcomappid = correctNull((String) hshValues.get("comappid"));
			String strCompanyname = "0";
			String strindtype = correctNull((String) hshValues
					.get("industryType"));

			if (strcomappid.equalsIgnoreCase("")) {
				rs = DBUtils.executeLAPSQuery("comfunsel3^" + strAppNo);
				if (rs.next()) {
					strcomappid = Helper.correctNull((String) rs
							.getString("demo_comappnewid"));
				}
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("com_interfirm_select^" + strindtype
					+ "^" + strcomappid);
			while (rs.next()) {
				vecRec1.add(correctNull((String) rs
						.getString("comapp_id")));
				vecRec2.add(correctNull((String) rs
						.getString("comapp_companyname")));
			}

			vecVal.add(vecRec1);
			vecVal.add(vecRec2);
			hshValues.put("vecVal", vecVal);
			hshValues.put("vecname", vecRec2);
			hshValues.put("vecid", vecRec1);

			if (!strCompanyname.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selfingrpconcernval^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("intcompfreetxt_txt1", correctNull(rs
							.getString("COM_FREETEXT1"))); // 1
					hshValues.put("intcompfreetxt_txt2", correctNull(rs
							.getString("COM_FREETEXT2")));// 2
					hshValues.put("intcompfreetxt_txt3", correctNull(rs
							.getString("COM_FREETEXT3")));// 3
					hshValues.put("COM_FREETEXT4", correctNull(rs
							.getString("COM_FREETEXT4")));// 4
				}

				strQuery = SQLParser.getSqlQuery("selfingrpconcerncompare^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				int k = 0;
				while (rs.next()) {
					k = k + 1;
					hshValues.put("txt_compname" + k, correctNull(rs
							.getString("fingrpconcern_comname"))); // 1
					hshValues.put("txt_year" + k, correctNull(rs
							.getString("fingrpconcern_year")));// 2
					hshValues.put("txt_type" + k, correctNull(rs
							.getString("fingrpconcern_fintype")));// 3
					hshValues.put("txt_gross" + k, correctNull(rs
							.getString("fingrpconcern_grosssales")));// 4
					hshValues.put("txt_netsales" + k, correctNull(rs
							.getString("fingrpconcern_netsales")));// 5
					hshValues.put("txt_netprofit" + k, correctNull(rs
							.getString("fingrpconcern_netprofit"))); // 6
					hshValues.put("txt_capital" + k, correctNull(rs
							.getString("fingrpconcern_capital")));// 7
					hshValues.put("txt_tangnet" + k, correctNull(rs
							.getString("fingrpconcern_tangnetworth")));// 8
					hshValues.put("txt_network" + k, correctNull(rs
							.getString("fingrpconcern_networkcap"))); // 9
					hshValues.put("txt_toltnw" + k, correctNull(rs
							.getString("fingrpconcern_toltnw")));// 10

					hshValues.put("txt_currratio" + k, correctNull(rs
							.getString("fingrpconcern_currratio"))); // 11
					hshValues.put("txt_estproturn" + k, correctNull(rs
							.getString("fingrpconcern_estproturn")));// 12
					hshValues.put("txt_totwork" + k, correctNull(rs
							.getString("fingrpconcern_totcapital")));// 13
					hshValues.put("txt_seccoverinclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverinclude")));// 14
					hshValues.put("txt_seccoverexclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverexclude")));// 15
					hshValues.put("txt_lastcredit" + k, correctNull(rs
							.getString("fingrpconcern_lastcredit")));// 16
					hshValues.put("txt_freetext" + k, correctNull(rs
							.getString("fingrpconcern_freetext1")));// 17
					hshValues.put("txt_freetext1" + k, correctNull(rs
							.getString("fingrpconcern_freetext2")));// 18
					hshValues.put("txt_freetext2" + k, correctNull(rs
							.getString("fingrpconcern_freetext3")));// 19
					hshValues.put("FINGRPCONCERN_FREETEXT4" + k, correctNull(rs
							.getString("FINGRPCONCERN_FREETEXT4")));// 19
				}
			}
			hshValues.put("companyname", strCompanyname);

			// For T&C - General
			HashMap hshTermsandcond = new HashMap();
			HashMap hshTermsval = new HashMap();
			hshTermsval.put("appno", strAppNo);
			hshTermsandcond = new CommDocumentBean()
					.getAnnexureVII(hshTermsval);
			hshValues.put("hshTermsandcond", hshTermsandcond);

			double dblAmount = 0.00;
			// Existing Proposal
			/*
			 * String strExiWC ="",strExiWClimit=""; arrOutRow = new
			 * ArrayList(); if(rs!=null){rs.close();} rs =
			 * DBUtils.executeLAPSQuery
			 * ("com_FACSel_existing^"+strAppNo+"^"+strLoanType);
			 * while(rs.next()) { strExiWC =""; arrOutCol = new ArrayList();
			 * arrOutCol.add(correctNull(rs.getString("com_facdesc")));
			 * arrOutCol.add("");
			 * arrOutCol.add(Helper.correctDouble(rs.getString
			 * ("facility_proposed")));
			 * arrOutCol.add(correctNull(rs.getString("facility_for")));
			 * 
			 * arrOutRow.add(arrOutCol);
			 * 
			 * dblAmount=Double.parseDouble(Helper.correctDouble(rs.getString(
			 * "facility_proposed"))); if(strAmountValue.equalsIgnoreCase("C"))
			 * {dblAmount =dblAmount/10000000;} else
			 * if(strAmountValue.equalsIgnoreCase("L")){dblAmount
			 * =dblAmount/100000;} strExiWC =
			 * correctNull(rs.getString("com_facdesc"
			 * ))+" - "+dc.format(dblAmount); strExiWClimit =
			 * strExiWClimit+strExiWC+"@";
			 * 
			 * } hshValues.put("strExiWClimit",strExiWClimit);
			 * hshValues.put("arrFACexistingRow",arrOutRow);
			 */

			// Present Proposal
			String strPresentWC = "", strPreWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				strPresentWC = "";
				arrOutCol = new ArrayList();
				strFacSno = Helper.correctInt(rs.getString("facility_sno"));
				strVal = correctNull(rs.getString("facility_repaytype"));

				if (strVal.equalsIgnoreCase("E")) {
					strVal = "EMI";
				} else if (strVal.equalsIgnoreCase("NE")) {
					strVal = "Non EMI";
				} else if (strVal.equalsIgnoreCase("OD")) {
					strVal = "On Demand";
				} else if (strVal.equalsIgnoreCase("LC")) {
					strVal = "As Per LC Terms";
				} else if (strVal.equalsIgnoreCase("CO")) {
					strVal = "As Per Contract Terms";
				} else if (strVal.equalsIgnoreCase("BG")) {
					strVal = "As Per BG Rules";
				} else if (strVal.equalsIgnoreCase("DD")) {
					strVal = "On Due Date";
				} else if (strVal.equalsIgnoreCase("PC")) {
					strVal = "From the proceeds of PSC / by realization of bill";
				} else if (strVal.equalsIgnoreCase("PS")) {
					strVal = "By Realization of Export Bills";
				} else if (strVal.equalsIgnoreCase("PR")) {
					strVal = "By Realization of Respective Bills";
				} else if (strVal.equalsIgnoreCase("TG")) {
					strVal = "As per TCBG Rules";
				} else {
					strVal = "";
				}

				arrOutCol.add(correctNull(rs.getString("facility_desc")));
				arrOutCol.add(strVal);
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));
				arrOutCol.add(correctNull(rs.getString("facility_facnature")));

				arrOutRow.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble((String) rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strPresentWC = correctNull(rs.getString("facility_desc"))
						+ " - " + dc.format(dblAmount);
				strPreWClimit = strPreWClimit + strPresentWC + "@";

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strFacSno);
				while (rs1.next()) {
					arrOutCol = new ArrayList();

					strVal = correctNull(rs1.getString("facility_repaytype"));

					if (strVal.equalsIgnoreCase("E")) {
						strVal = "EMI";
					} else if (strVal.equalsIgnoreCase("NE")) {
						strVal = "Non EMI";
					} else if (strVal.equalsIgnoreCase("OD")) {
						strVal = "On Demand";
					} else if (strVal.equalsIgnoreCase("LC")) {
						strVal = "As Per LC Terms";
					} else if (strVal.equalsIgnoreCase("CO")) {
						strVal = "As Per Contract Terms";
					} else if (strVal.equalsIgnoreCase("BG")) {
						strVal = "As Per BG Rules";
					} else if (strVal.equalsIgnoreCase("DD")) {
						strVal = "On Due Date";
					} else if (strVal.equalsIgnoreCase("PC")) {
						strVal = "From the proceeds of PSC / by realization of bill";
					} else if (strVal.equalsIgnoreCase("PS")) {
						strVal = "By Realization of Export Bills";
					} else if (strVal.equalsIgnoreCase("PR")) {
						strVal = "By Realization of Respective Bills";
					} else if (strVal.equalsIgnoreCase("TG")) {
						strVal = "As per TCBG Rules";
					} else {
						strVal = "";
					}

					arrOutCol.add(correctNull(rs1.getString("facility_desc")));
					arrOutCol.add(strVal);
					arrOutCol.add(Helper.correctDouble(rs1
							.getString("facility_proposed")));
					arrOutCol.add(correctNull(rs1.getString("facility_for")));
					arrOutCol.add(correctNull(rs1
							.getString("facility_facnature")));

					arrOutRow.add(arrOutCol);
					dblAmount = Double.parseDouble(Helper
							.correctDouble((String) rs1
									.getString("facility_proposed")));
					if (strAmountValue.equalsIgnoreCase("C")) {
						dblAmount = dblAmount / 10000000;
					} else if (strAmountValue.equalsIgnoreCase("L")) {
						dblAmount = dblAmount / 100000;
					}
					strPresentWC = correctNull(rs1.getString("facility_desc"))
							+ " - " + dc.format(dblAmount);
					strPreWClimit = strPreWClimit + strPresentWC + "@";
				}
			}
			hshValues.put("strPreWClimit", strPreWClimit);
			hshValues.put("arrFAConlyRow", arrOutRow);

			// Assets Classification
			String strAssetClassification = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_combankingdetails^" + strAppNo);
			if (rs.next()) {
				strAssetClassification = correctNull(rs
						.getString("com_assetclass"));
				hshValues.put("com_asscladate", correctNull(rs
						.getString("com_asscladate")));
			}

			if (strAssetClassification.equalsIgnoreCase("S")) {
				strAssetClassification = "Standard";
			} else if (strAssetClassification.equalsIgnoreCase("SS")) {
				strAssetClassification = "Sub Standard";
			} else if (strAssetClassification.equalsIgnoreCase("D")) {
				strAssetClassification = "Doubtful";
			} else if (strAssetClassification.equalsIgnoreCase("L")) {
				strAssetClassification = "Loss";
			} else {
				strAssetClassification = "NIL";
			}

			hshValues.put("strAssetClassification", strAssetClassification);

			// Existing facilities security details
			ArrayList arrfacwisecol = new ArrayList();
			ArrayList arrfacwisecollateral = new ArrayList();
			ArrayList arrfacwiseRow = new ArrayList();
			ArrayList arrOutCol1 = new ArrayList();
			ArrayList arrOutRow1 = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_banking^" + strAppNo);
			while (rs1.next()) {
				arrOutRow = new ArrayList();
				arrOutCol = new ArrayList();
				String strbnkFac = Helper.correctNull((String) rs1
						.getString("combk_facility"));
				String str_modtype = Helper.correctNull((String) rs1
						.getString("combk_modtype"));
				String[] bankFac = strbnkFac.split("~");
				rs = DBUtils.executeLAPSQuery("selExistingFacilitySecDetails^"
						+ strAppNo + "^" + "E^E" + "^" + bankFac[0] + "^"
						+ bankFac[1]);
				if (rs.next()) {
					if (correctNull(rs.getString("app_sec_securitytype"))
							.equalsIgnoreCase("1")) {
						if (str_modtype.equalsIgnoreCase("c")
								|| str_modtype.equalsIgnoreCase("a")) {
							rs1 = DBUtils
									.executeLAPSQuery("sel_facilitycorp_desc^"
											+ bankFac[0]);
							if (rs1.next()) {
								arrOutCol.add(correctNull(rs1
										.getString("com_facdesc")));// 1 //arr0
							} else {
								arrOutCol.add("");// 1 //arr0
							}
						} else if (str_modtype.equalsIgnoreCase("r")) {
							rs1 = DBUtils
									.executeLAPSQuery("sel_retProductDesc^"
											+ bankFac[0]);
							if (rs1.next()) {
								arrOutCol.add(correctNull(rs1
										.getString("com_facdesc")));// 1 //arr0
							} else {
								arrOutCol.add("");// 1 //arr0
							}
						} else {
							arrOutCol.add("");// 1 //arr0
						}

						arrOutCol.add(""); // 2
						arrOutCol.add("");// 3
						arrOutRow.add(arrOutCol);
					}
				}

				rs = DBUtils.executeLAPSQuery("selExistingFacilitySecDetails^"
						+ strAppNo + "^" + "E^E" + "^" + bankFac[0] + "^"
						+ bankFac[1]);
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrOutCol1 = new ArrayList();
					if (correctNull(rs.getString("app_sec_securitytype"))
							.equalsIgnoreCase("1")) {
						arrOutCol.add(correctNull(Helper.CLOBToString(rs
								.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
						arrOutCol.add(correctNull(rs
								.getString("app_sec_securityvalue"))); // 2
						arrOutCol.add(correctNull(rs
								.getString("cus_sec_valuation_date")));// 3
						arrOutRow.add(arrOutCol);
					}
				}
				if (arrOutRow.size() > 0)
					arrfacwisecol.add(arrOutRow);
			}

			arrfacwisecol = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_SECUTYPE='E' and app_sec_loantype='E' ^A^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {

				arrOutRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				strQuery1 = SQLParser
						.getSqlQuery("seluniqueprimarysec_facilitydetails^A^"
								+ correctNull(rs.getString("secid")) + "^"
								+ strAppOldId + "^" + strAppNo + "^A^"
								+ correctNull(rs.getString("secid")) + "^"
								+ strAppOldId + "^" + strAppNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs1.getString("facility_catdesc")));// 0
					arrOutCol.add(correctNull(rs1
							.getString("facility_proposed")));// 1
					arrOutCol.add(correctNull(rs.getString("secdescription")));// 2
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 3
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 4
					arrOutRow.add(arrOutCol);
				}

				if (arrOutRow.size() > 0) {
					arrfacwisecol.add(arrOutRow);
				}

			}
			hshValues.put("arrExistingSecfacwise", arrfacwisecol);
			hshValues.put("strLoanTypeNew", strLoanType);

			if (rs != null)
				rs.close();
			arrOutRow1 = new ArrayList();
			strQuery1 = SQLParser
					.getSqlQuery("secExisFacilityDetailsView_existing^"
							+ strAppNo + "^" + strAppNo + "^" + "E"
							+ "^ and app_sec_customerid='" + strAppOldId + "'");
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				arrOutCol1 = new ArrayList();
				arrOutCol1.add(correctNull(Helper.CLOBToString(rs
						.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
				arrOutCol1
						.add(correctNull(rs.getString("cus_sec_netsecurity"))); // 2
				arrOutCol1.add(correctNull(rs
						.getString("cus_sec_valuation_date")));// 3
				arrOutRow1.add(arrOutCol1);
			}
			hshValues.put("arrcollateralforEF", arrOutRow1);

			String pgType = Helper
					.correctNull((String) hshValues.get("pgType"));
			boolean finacial_flag = false;

			if (strLoanType.equalsIgnoreCase("a")) {
				if (strFinancialrequired.equalsIgnoreCase("Y")) {
					finacial_flag = true;

				}

			} else {
				finacial_flag = true;
			}
			if (pgType.equalsIgnoreCase("Shortnte")) {
				if (finacial_flag) {
					hshQueryValues = new HashMap();
					hshQueryValues.put("appno", strAppNo);
					hshQueryValues.put("pageval", "LIABILITIES");
					hshQueryValues.put("printtype", "Y");
					hshQueryValues = financial.getData(hshQueryValues);
					hshValues.put("hshReqValues", hshQueryValues);

					hshQueryValues = new HashMap();
					hshQueryValues.put("appno", strAppNo);
					hshQueryValues.put("pageval", "ASSETS");
					hshQueryValues.put("printtype", "Y");
					hshQueryValues = financial.getData(hshQueryValues);
					hshValues.put("hshReqValues1", hshQueryValues);

					hshQueryValues = new HashMap();
					hshQueryValues.put("appno", strAppNo);
					hshQueryValues.put("pageval", "PROFIT AND LOSS ACCOUNT");
					hshQueryValues.put("printtype", "Y");
					hshQueryValues = financial.getData(hshQueryValues);
					hshQueryValues.put("page", "PROFIT AND LOSS ACCOUNT");
					hshValues.put("hshReqValues2", hshQueryValues);

					hshQueryValues = new HashMap();
					hshQueryValues.put("appno", strAppNo);
					hshQueryValues.put("pagefrom", "RA1");
					hshQueryValues.put("pageType", "AN4");
					hshQueryValues = financial.getDataRatio(hshQueryValues);
					hshQueryValues.put("page",
							"CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
					hshValues.put("hshReqValues3", hshQueryValues);

					hshQueryValues = new HashMap();
					hshQueryValues.put("appno", strAppNo);
					hshQueryValues.put("pagefrom", "RA2");
					hshQueryValues.put("pageType", "AN4");
					hshQueryValues = financial.getDataRatio(hshQueryValues);
					hshQueryValues.put("page",
							"PROFITABILITY/TURN OVER/ OPERATING");
					hshValues.put("hshReqValues4", hshQueryValues);
				}
			}
			String strFinvaluesIn = "";
			int strFinid = 0;
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_financeid^" + strAppNo);
			if (rs.next()) {
				strFinid = Integer.parseInt(Helper.correctInt((String) rs
						.getString("DEMO_FINSTANDARD")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("comfinance_finappid^" + strFinid);
			if (rs.next()) {
				strValuesIn = correctNull(rs.getString("fin_valuesarein"));
			}
			hshValues.put("strFinvalues", strValuesIn);

			hshReqVal = new HashMap();
			hshReqVal.put("appno", strAppNo);
			hshReqVal.put("appid", strAppId);
			hshReqVal.put("PageType", "ANN5");
			hshReqVal = commdocument.getAnnexureV(hshReqVal);
			hshReqVal.put("page", "ANN5");
			hshValues.put("ANN5", hshReqVal);

			if (rs != null)
				rs.close();
			arrOutRow = new ArrayList();
			String strInterLockSno = "", strInterLockValue = "", strInterLockDesc = "";
			rs = DBUtils
					.executeLAPSQuery("sel_comments^FPComments^" + strAppNo);
			while (rs.next()) {
				strInterLockSno = Helper.correctNull((String) rs
						.getString("com_sno"));
				arrOutCol = new ArrayList();
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^" + "141^"
						+ Helper.correctNull((String) rs.getString("COM_SNO")));
				if (rs1.next()) {
					arrOutCol.add(Helper.correctNull((String) rs1
							.getString("STAT_DATA_DESC1")));
					arrOutCol.add(Helper.correctNull(Helper.CLOBToString(rs
							.getClob("COM_COMMENTS"))));
				}
				if (!strInterLockSno.equalsIgnoreCase("1"))
					arrOutRow.add(arrOutCol);
				else {
					strInterLockDesc = Helper.correctNull((String) rs1
							.getString("STAT_DATA_DESC1"));
					strInterLockValue = Helper.correctNull(Helper
							.CLOBToString(rs.getClob("COM_COMMENTS")));
				}
			}
			arrOutCol = new ArrayList();
			arrOutCol.add(strInterLockDesc);
			arrOutCol.add(strInterLockValue);
			arrOutRow.add(arrOutCol);
			hshValues.put("arrCommentsRow", arrOutRow);

			hshReqVal = new HashMap();
			hshReqVal.put("appno", strAppNo);
			hshReqVal.put("appid", strAppId);
			hshReqVal.put("PageType", "PROPOSALLC");
			hshReqVal = commdocument.getAnnexureIII(hshReqVal);
			hshReqVal.put("page", "AN3");
			hshValues.put("AN3", hshReqVal);

			rs = DBUtils.executeLAPSQuery("selmcbReportprint^" + strAppNo);

			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
			}
			String strAppOrgCode = "";
			if (rs != null) {
				rs.close();
			}

			String livedate = ApplicationParams.getStrCLPHdate();
			String postsanctionflag = "";
			String applicationStatus = "";
			// check when application is created
			String appcreatedate = "";

			strQuery = SQLParser.getSqlQuery("getcreatedate^" + strAppNo);
			rs5 = DBUtils.executeQuery(strQuery);
			if (rs5.next()) {

				appcreatedate = rs5.getString("createddate");
				applicationStatus = rs5.getString("APP_STATUS");
			}
			System.out.println("Application created date-->" + appcreatedate);
			System.out.println("Sanction  Live Date-->" + livedate);
			if (!livedate.equalsIgnoreCase("")
					&& !appcreatedate.equalsIgnoreCase("")) {
				String Pattern = "dd/MM/yyyy";
				DateFormat df = new SimpleDateFormat(Pattern);
				Date appcreationdate = df.parse(appcreatedate);
				Date postsanclivedate = df.parse(livedate);

				if (appcreationdate.before(postsanclivedate)
						&& applicationStatus.equalsIgnoreCase("pa")) {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranch^"
							+ strAppNo);
				} else {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranchnewchk^"
							+ strAppNo);
				}
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
				strAppOrgCode = Helper.correctNull(rs.getString("org_code"));
				hshValues.put("strLodgedDate", correctNull(rs
						.getString("app_lodgeddate")));
				hshValues.put("strDelodgedDate", correctNull(rs
						.getString("app_delodgeddate")));
				hshValues.put("inward_appliedon", correctNull(rs
						.getString("inward_appliedon")));

				if (Helper.correctNull(rs.getString("APP_ORGLEVEL"))
						.equalsIgnoreCase("C")
						|| Helper.correctNull(rs.getString("APP_ORGLEVEL"))
								.equalsIgnoreCase("D")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_pertainingbr^"
							+ strAppNo);
					if (rs.next()) {
						hshValues.put("org_name", correctNull(rs
								.getString("org_name")));
						strAppOrgCode = Helper.correctNull(rs
								.getString("org_code"));
					}
				}
			}

			if (!strAppOrgCode.equals("")) {
				strAppOrgCode = strAppOrgCode.substring(0, 6) + "%";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_region^" + strAppOrgCode);
			if (rs.next()) {
				hshValues.put("Reg_org_name", correctNull(rs
						.getString("org_name")));
			}

			// Get Presanction Security Comments
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverage^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("cmt_presanccomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			// Get Postsanction Security Comments
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverage1^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("cmt_postsanccomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}

			// Gist of Proposal
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_comments^gist^" + strAppNo);
			if (rs.next()) {
				hshValues.put("GistOfProp", correctNull(Helper.CLOBToString(rs
						.getClob(("com_comments")))));
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_comments^presentproposal^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("presentproposal_comment", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^" + strAppNo
					+ "^" + "existcreditfac");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strExistingFacAbove", Helper.CLOBToString(rs
						.getClob("cmt_comments")));
				hshValues.put("strExistingFacBelow", Helper.CLOBToString(rs
						.getClob("cmt_intercomments")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser
					.getSqlQuery("sel_comcomments^InterFirmComparsion^0^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strGroupFinancialAbovecmts", Helper
						.CLOBToString(rs.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser
					.getSqlQuery("sel_comcomments^InterFirmComparsion1^0^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strGroupFinancialbelowcmts", Helper
						.CLOBToString(rs.getClob("com_comments")));
			}

			// Assessments selected
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_assessmentselection_select^"
					+ strAppNo);

			if (rs.next()) {
				str_arr = Helper
						.correctNull(rs.getString("COM_ASSESSMENTTYPE"));
			}
			hshValues.put("str_arr", str_arr);

			dblAmount = 0.00;
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_fundbasedfacility^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_proposed"))));
				arrPresentWC.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble((String) rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strPresentWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ jtn.format(dblAmount);
				strPreWClimit = strPreWClimit + strPresentWC + "@";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_fundbasedfacilityTL^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_proposed"))));
				arrPresentTL.add(arrOutCol);
			}
			hshValues.put("strPreWClimit", strPreWClimit);
			hshValues.put("arrFAConlyRow", arrOutRow);
			hshValues.put("arrPresentWC", arrPresentWC);
			hshValues.put("arrPresentTL", arrPresentTL);

			if (rs != null) {
				rs.close();
			}
			String strKccFlag = "";
			if (strLoanType.equalsIgnoreCase("a")) {
				rs = DBUtils.executeLAPSQuery("sel_agr_facilities^" + strAppNo);
				while (rs.next()) {

					String strFacAgrSchem = Helper.correctNull((String) rs
							.getString("facscheme"));
					if (strFacAgrSchem.equalsIgnoreCase("aQ")) {
						strKccFlag = "Y";
					}
				}

			}

			hshValues.put("strKccFlag", strKccFlag);

			hshValues.put("username", correctNull((String) hshValues
					.get("strOrgName")));
			// added by bhaskar for Crop Loan Aseesment

			if (strKccFlag.equalsIgnoreCase("Y")) {

				hshValues.put("hidapplicantid", strAppId);
				hshCropAss = (HashMap) EJBInvoker.executeStateLess(
						"comproposal", hshValues, "getCropLoan");
				hshValues.put("hshCropAss", hshCropAss);

				// added for interest subvention details

				hshValues.put("hidapplicantid", strAppId);
				hshkccIntSubVen = (HashMap) EJBInvoker.executeStateLess(
						"agrcrops", hshValues, "getInterestSubventionDetails");
				hshValues.put("hshkccIntSubVen", hshkccIntSubVen);

			}

			// Existing Proposal
			String strExiWC = "", strExiWClimit = "", strProcnoteExiWC = "", strProcnoteWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("com_FACSel_existing^" + strAppNo
					+ "^" + strLoanType);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				dblAmount = 0.00;
				strExiWC = "";
				arrOutCol = new ArrayList();
				arrOutCol
						.add(correctNull(rs.getString("facility_displaydesc")));
				arrOutCol.add("");
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));

				arrOutRow.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				arrOutCol = new ArrayList();
				strExiWC = correctNull(rs.getString("facility_displaydesc"))
						+ " - " + jtn.format(dblAmount);
				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_existing")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strProcnoteExiWC = correctNull(rs
						.getString("facility_displaydesc"))
						+ " - " + jtn.format(dblAmount);
				strExiWClimit = strExiWClimit + strExiWC + "@";
				strProcnoteWClimit = strProcnoteWClimit + strProcnoteExiWC
						+ "@";
				arrOutCol
						.add(correctNull(rs.getString("facility_displaydesc")));
				arrOutCol.add(Helper.checkDecimal(Helper.correctInt(rs
						.getString("facility_existing"))));
				arrExistingWC.add(arrOutCol);

			}
			hshValues.put("strExiWClimit", strExiWClimit);
			hshValues.put("arrFACexistingRow", arrOutRow);
			hshValues.put("strProcnoteWClimit", strProcnoteWClimit);
			hshValues.put("arrExistingWC", arrExistingWC);

			// Comments
			if (rs != null) {
				rs.close();
			}
			String strpgType[] = { "secoverage", "secoverage1", "BDCOM1",
					"BDCOM2", "brief" };
			for (int i = 0; i < 5; i++) {
				rs = DBUtils.executeLAPSQuery("sel_comments^" + strpgType[i]
						+ "^" + strAppNo);
				if (rs.next()) {
					hshValues.put("com_comments" + strpgType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("com_comments")))));
				}
			}

			// Agri Comments
			if (rs != null) {
				rs.close();
			}
			String strAgrType[] = { "cropincome", "physicalfin",
					"agrifarmbudget", "croploan", "cropass" };
			for (int i = 0; i < strAgrType.length; i++) {
				rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppNo
						+ "^" + strAgrType[i]);
				if (rs.next()) {
					hshValues.put("cmt_comments" + strAgrType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("cmt_comments")))));
					hshValues.put("cmt_intercomments" + strAgrType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob("cmt_intercomments"))));
				}
			}

			// DSS Comments
			if (rs != null) {
				rs.close();
			}
			String strAgrType1[] = { "cropass", "assdss" };
			for (int i = 0; i < strAgrType1.length; i++) {
				rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
						+ "^" + strAgrType1[i]);
				if (rs.next())
					hshValues.put("cmt_comments" + strAgrType1[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("fin_comments")))));
			}
			// BA Fund Total
			/*
			 * if(rs!=null){rs.close();} rs =
			 * DBUtils.executeLAPSQuery("sel_BAFundTot^"+strAppNo);
			 * if(rs.next()) { hshValues.put("fundtotal",
			 * Helper.correctDouble(rs.getString("fundtotal"))); }
			 */
			hshValues.put("fundtotal", "0.00");

			// Financial Comments
			for (int i = 0; i < strCommentSno.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils
						.executeLAPSQuery("sel_financial_comments^FPComments^"
								+ strCommentSno[i] + "^" + strAppNo);

				if (rs.next()) {
					hshValues.put("FIComments"
							+ correctNull(rs.getString("com_sno")),
							correctNull(Helper.CLOBToString(rs
									.getClob("com_comments"))));
				}
			}

			// Assessment Comments
			String strassmntCommentsno[] = { "1", "2" };
			for (int i = 0; i < strassmntCommentsno.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils
						.executeLAPSQuery("sel_financial_comments^assmntcomments^"
								+ strassmntCommentsno[i] + "^" + strAppNo);

				if (rs.next()) {
					hshValues.put("AssmntComments"
							+ correctNull(rs.getString("com_sno")),
							correctNull(Helper.CLOBToString(rs
									.getClob("com_comments"))));
				}
			}

			// Other Assessment Comments
			String strFlowType[] = { "35", "37" };
			for (int i = 0; i < strFlowType.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^" + strFlowType[i]);
				if (rs.next()) {
					hshValues.put("com_assessment_comments" + strFlowType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob("com_assessment_comments"))));
				}
				if (strFlowType[i].equalsIgnoreCase("37")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_assessment_tl^"
							+ strAppNo + "^" + strFlowType[i]);
					if (rs.next()) {
						hshValues.put("strAdhocFacAssessment",
								correctNull(Helper.CLOBToString(rs
										.getClob("com_assessment_comments"))));
					}
				}
			}

			// Assessment Inland , Turnover comments , Repayment Schd.
			String strpage = "";
			String strpageAsmt[] = { "inlandComments", "turnover",
					"expenditure", "cashbudget", "assdscr", "repaycomment",
					"bankargmnt" };
			for (int i = 0; i < strpageAsmt.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
						+ "^" + strpageAsmt[i]);
				if (rs.next()) {
					hshValues.put("fin_comments" + strpageAsmt[i], Helper
							.CLOBToString(rs.getClob("fin_comments")));
					hshValues.put("fin_comments1" + strpageAsmt[i], Helper
							.CLOBToString(rs.getClob("fin_comments1")));
				}
			}

			if (str_arr.contains("EXPORTCF@")) {
				ArrayList arrCOPNewRow = new ArrayList();
				// Assessment of TL: COP
				dblTotCOP = 0.00;
				int m = 0, z = 0;
				arrOutRow = new ArrayList();
				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					arrCOPCol = new ArrayList();

					int termSno = Integer.parseInt(Helper.correctInt(rs2
							.getString("term_sno")));
					arrCOPCol.add(Helper.correctInt(rs2.getString("term_sno")));
					arrCOPCol.add(correctNull(rs2.getString("term_desc")));
					arrCOPCol
							.add(jtn.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_sancamt")))));// 10
					dblTotCOP = 0.00;
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_desc^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrOutCol = new ArrayList();

						if (correctNull(rs.getString("com_type"))
								.equalsIgnoreCase("C")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils
									.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
							while (rs1.next()) {
								if (correctNull(
										(String) rs1
												.getString("stat_data_desc"))
										.trim()
										.equals(
												correctNull(
														(String) rs
																.getString("com_desc_sno"))
														.trim())) {
									arrOutCol.add(correctNull(rs1
											.getString("stat_data_desc1")));
									break;
								}
							}

							arrOutCol.add(Helper.correctDouble(rs
									.getString("com_totalvalue")));
							arrOutCol.add(Helper.correctInt(rs
									.getString("com_facsno")));
							dblTotCOP = dblTotCOP
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("com_totalvalue")));
						}

						if (arrOutCol.size() > 0) {
							arrOutRow.add(arrOutCol);
						}
					}
					arrCOPCol.add(String.valueOf(dblTotCOP));
					if (arrOutRow.size() > 0) {
						arrCOPRow.add(arrCOPCol);
					}

					arrCOPNewRow.add(arrCOPCol);

					String strFacilities = Helper.correctInt(rs2
							.getString("term_sno"));

					if (strFacilities != "s" && strFacilities != "") {
						rs = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL"
										+ "^" + strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_COP" + termSno, Helper
									.CLOBToString(rs.getClob("COM_COMMENTS")));
							hshValues.put("COM_DATE_COP" + termSno, Helper
									.correctNull((String) rs
											.getString("COM_DATE")));
							z = m;
						}

						rs = DBUtils.executeLAPSQuery("sel_comcomments^SOM^"
								+ strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_SOM" + termSno, Helper
									.CLOBToString(rs.getClob("com_comments")));
							z = m;
						}
						strQuery = SQLParser
								.getSqlQuery("sel_comcomments1^CommentsProj^"
										+ strFacilities + "^" + strAppNo
										+ "^12");
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_COProj" + termSno,
									Helper.CLOBToString(rs
											.getClob("com_comments")));
						}

					}
					if (rs != null) {
						rs.close();
					}
					m++;
				}
				hshValues.put("ValofM", String.valueOf(z));
				hshValues.put("arrCOPMjrRow", arrCOPRow);
				hshValues.put("arrCOPRow", arrOutRow);
				hshValues.put("dblTotCOP", String.valueOf(dblTotCOP));
				hshValues.put("arrCOPNewRow", arrCOPNewRow);

				// Assessment of TL: MOF
				String strFlag = "false", strdescSno = "";
				double dbl_BankSubLoan = 0.00;
				double dbl_Othermfinance = 0.00;
				double dbl_Debit = 0.00;
				m = 0;
				dblTotCOP = 0.00;
				arrOutRow = new ArrayList();
				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					arrMOFCol = new ArrayList();
					dbl_Debit = 0.00;
					dbl_Othermfinance = 0.00;
					dbl_BankSubLoan = 0.00;
					dblTotCOP = 0.00;
					arrMOFCol.add(Helper.correctInt(rs2.getString("term_sno")));
					arrMOFCol.add(correctNull(rs2.getString("term_desc")));
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_desc^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrOutCol = new ArrayList();
						strdescSno = Helper.correctNull(rs
								.getString("COM_DESC_SNO"));

						if (correctNull(rs.getString("com_type"))
								.equalsIgnoreCase("M")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils
									.executeLAPSQuery("SelStaticDataCorpQuestionMast^137");
							while (rs1.next()) {
								if (correctNull(
										(String) rs1
												.getString("stat_data_desc"))
										.trim()
										.equals(
												correctNull(
														(String) rs
																.getString("com_desc_sno"))
														.trim())) {
									strFlag = "true";
									arrOutCol.add(correctNull(rs1
											.getString("stat_data_desc1")));
									break;
								}
							}

							arrOutCol.add(Helper.correctDouble(rs
									.getString("com_totalvalue")));
							arrOutCol.add(Helper.correctInt(rs
									.getString("com_facsno")));
							dblTotCOP = dblTotCOP
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("com_totalvalue")));
						}

						if ((strdescSno.endsWith("1"))
								|| (strdescSno.endsWith("2"))) {
							if (correctNull(rs.getString("com_type"))
									.equalsIgnoreCase("M")) {
								dbl_BankSubLoan += Double.parseDouble(Helper
										.correctDouble(rs
												.getString("COM_TOTALVALUE")));
							}
						} else {
							if (correctNull(rs.getString("com_type"))
									.equalsIgnoreCase("M")) {
								dbl_Othermfinance += Double.parseDouble(Helper
										.correctDouble(rs
												.getString("COM_TOTALVALUE")));
							}
						}

						if (arrOutCol.size() > 0) {
							arrOutRow.add(arrOutCol);
						}

					}
					arrMOFCol.add(String.valueOf(dblTotCOP));
					if (dbl_Othermfinance != 0.0) {
						dbl_Debit = dbl_BankSubLoan / dbl_Othermfinance;
					} else {
						dbl_Debit = dbl_BankSubLoan;
					}
					hshValues.put("dbl_Debit"
							+ correctNull(rs2.getString("term_sno")), ""
							+ dc.format(dbl_Debit));
					if (arrOutRow.size() > 0) {
						arrMOFRow.add(arrMOFCol);
					}
					m++;
				}

				hshValues.put("arrMOFMjrRow", arrMOFRow);
				hshValues.put("arrMOFRow", arrOutRow);
				hshValues.put("dblTotMOF", String.valueOf(dblTotCOP));

				// Release Pattern

				ArrayList arrReleaseRow = new ArrayList();
				ArrayList arrRowPattern = new ArrayList();

				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				int y = 0;
				int x = 0;
				dblRPTotCost = 0.0;
				dblRPTotMargin = 0.0;
				dblRPTotLoan = 0.0;
				boolean boorelflag = true;
				int abc = 0;
				while (rs2.next()) {
					boorelflag = true;
					arrImplSchRow = new ArrayList();
					ArrayList arrReleaseCol = new ArrayList();
					ArrayList arrColPattern = new ArrayList();
					String strTermSno = Helper.correctInt(rs2
							.getString("term_sno"));

					arrReleaseCol.add(correctNull(rs2.getString("term_sno"))); // 0
					arrReleaseCol.add(correctNull(rs2.getString("term_desc"))); // 1
					arrFinSnoRow.add(arrReleaseCol);
					abc++;
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_margin1_new^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrColPattern = new ArrayList();
						if (boorelflag) {
							arrReleaseCol.add("ReleasePattern");// 2
						}

						boorelflag = false;
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
						while (rs1.next()) {
							if (correctNull(
									(String) rs1.getString("stat_data_desc"))
									.trim()
									.equals(
											correctNull(
													(String) rs
															.getString("com_sno"))
													.trim())) {
								arrColPattern.add(correctNull(rs1
										.getString("stat_data_desc1")));// 0
								break;
							}
						}

						dblRPTotCost = dblRPTotCost
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_amount")));
						dblRPTotMargin = dblRPTotMargin
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_margin")));
						dblRPTotLoan = dblRPTotLoan
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_bankloan")));

						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_amount")));// 1
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_margin")));// 2
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_marginamt")));// 3
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_bankloan")));// 4
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_bankloanamt")));// 5
						arrColPattern.add(Helper.correctInt(rs
								.getString("com_facsno")));// 6
						arrRowPattern.add(arrColPattern);
					}
					if (boorelflag) {
						arrReleaseCol.add("0");// 2
						boorelflag = true;
					}

					hshValues.put("arrRowPattern" + x, arrRowPattern);
					arrRowPattern = new ArrayList();
					hshValues.put("dblRPTotCost" + x, String
							.valueOf(dblRPTotCost));
					hshValues.put("dblRPTotMargin" + x, String
							.valueOf(dblRPTotMargin));
					hshValues.put("dblRPTotLoan" + x, String
							.valueOf(dblRPTotLoan));
					dblRPTotCost = 0.0;
					dblRPTotMargin = 0.0;
					dblRPTotLoan = 0.0;
					if (strTermSno != "s" && strTermSno != "") {
						rs = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL"
										+ "^" + strTermSno + "^" + strAppNo);
						if (rs.next()) {
							arrReleaseCol.add(correctNull(rs
									.getString("com_date"))); // 8
							arrReleaseCol.add("Estimate"); // 9
						} else {
							arrReleaseCol.add("0");// 8
							arrReleaseCol.add("0");// 9
						}

					}
					arrReleaseCol.add(jtn.format(Double
							.parseDouble((String) Helper.correctDouble(rs2
									.getString("facility_sancamt")))));// 10
					arrReleaseRow.add(arrReleaseCol);
					x++;
				}

				hshValues.put("arrReleaseRow", arrReleaseRow);

				// Implementation schedule
				/*
				 * if(rs!=null){rs.close();} String strTermSno = "";
				 * if(arrFinSnoRow!= null && arrFinSnoRow.size()>0) { for(int
				 * i=0;i<arrFinSnoRow.size();i++) { arrFinSnoCol = (ArrayList)
				 * arrFinSnoRow.get(i); arrImplSchRow.add((String)
				 * arrFinSnoCol.get(0)); arrImplSchRow.add((String)
				 * arrFinSnoCol.get(1)); arrOutRow = new ArrayList(); String
				 * strQuery5 =
				 * SQLParser.getSqlQuery("sel_implnschedulesno^"+strAppNo
				 * +"^"+"^"+(String) arrFinSnoCol.get(0)); rs =
				 * DBUtils.executeQuery(strQuery5); //rs =
				 * DBUtils.executeLAPSQuery
				 * ("sel_implnschedulesno^"+strAppNo+"^"+"^"+strTermSno);
				 * while(rs.next()) { arrImplSchCol = new ArrayList();
				 * arrReleaseCol.add(correctNull(rs.getString("com_desc"))); //3
				 * arrReleaseCol
				 * .add(correctNull(rs.getString("com_commencedate"))); //4
				 * arrReleaseCol
				 * .add(correctNull(rs.getString("com_completiondate"))); //5
				 * arrReleaseCol.add(correctNull(rs.getString("com_status")));
				 * //6 arrReleaseCol.add("Implement");//78
				 * 
				 * arrImplSchCol.add(correctNull(rs.getString("com_desc"))); //3
				 * arrImplSchCol
				 * .add(correctNull(rs.getString("com_commencedate"))); //4
				 * arrImplSchCol
				 * .add(correctNull(rs.getString("com_completiondate"))); //5
				 * arrImplSchCol.add(correctNull(rs.getString("com_status")));
				 * //6 arrImplSchCol.add("Implement");//7
				 * arrImplSchRow.add(arrImplSchCol); }
				 * hshValues.put("arrImpSchRow"+strTermSno, arrImplSchRow); } }
				 */
				if (rs != null) {
					rs.close();
				}

				// Implementation end

				// hshValues.put("arrImpScheRow"+x, arrOutRow);
				// Schedule of Implementation
				if (rs != null) {
					rs.close();
				}
				if (rs2 != null) {
					rs.close();
				}

				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					boorelflag = true;
					arrImplSchCol = new ArrayList();
					arrOutRow = new ArrayList();
					String strTermSno = Helper.correctInt(rs2
							.getString("term_sno"));
					arrImplSchCol.add(strTermSno);
					arrImplSchCol.add(correctNull(rs2.getString("term_desc")));
					rs = DBUtils.executeLAPSQuery("sel_implnschedulesno^"
							+ strAppNo + "^" + "^" + strTermSno);
					while (rs.next()) {
						// arrOutRow = new ArrayList();
						arrOutCol = new ArrayList();
						arrOutCol.add(correctNull(rs2.getString("term_desc")));
						arrOutCol.add(correctNull(rs.getString("com_desc")));
						arrOutCol.add(correctNull(rs
								.getString("com_commencedate")));
						arrOutCol.add(correctNull(rs
								.getString("com_completiondate")));
						arrOutCol.add(correctNull(rs.getString("com_status")));

						arrOutRow.add(arrOutCol);
					}
					arrImplSchCol.add(arrOutRow);
					arrImplSchCol
							.add(jtn.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_sancamt")))));
					arrImplSchRow.add(arrImplSchCol);
				}
				hshValues.put("arrImplSchRow", arrImplSchRow);

				// Source of Margin
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_comments^SOM^" + strAppNo);
				if (rs.next()) {
					hshValues.put("SOMComments", correctNull(Helper
							.CLOBToString(rs.getClob(("com_comments")))));
				}
			}

			// Release Pattern
			dblTotCOP = 0.00;
			String termSno = "";
			int abc = 1;
			arrOutRow = new ArrayList();
			if (rs2 != null) {
				rs.close();
			}
			rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}

			while (rs2.next()) {
				arrRelPatCol = new ArrayList();
				termSno = Helper.correctInt(rs2.getString("term_sno"));
				arrRelPatCol.add(Helper.correctInt(rs2.getString("term_sno")));
				arrRelPatCol.add(correctNull(rs2.getString("term_desc")));

				rs = DBUtils.executeLAPSQuery("sel_com_copmof_margin1_new^"
						+ strAppNo + "^"
						+ correctNull(rs2.getString("term_sno")));
				while (rs.next()) {
					arrOutCol = new ArrayList();

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
					while (rs1.next()) {
						if (correctNull(
								(String) rs1.getString("stat_data_desc"))
								.trim().equals(
										correctNull(
												(String) rs
														.getString("com_sno"))
												.trim())) {
							arrOutCol.add(correctNull(rs1
									.getString("stat_data_desc1")));
							break;
						}
					}

					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_amount")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_margin")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_marginamt")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_bankloan")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_bankloanamt")));
					arrOutCol
							.add(Helper.correctInt(rs.getString("com_facsno")));

					dblRPTotCost = dblRPTotCost
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_amount")));
					dblRPTotMargin = dblRPTotMargin
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_margin")));
					dblRPTotLoan = dblRPTotLoan
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_bankloan")));
					abc++;
					if (arrOutCol.size() > 0) {
						arrOutRow.add(arrOutCol);
					}
				}

			}
			if (arrOutRow.size() > 0) {
				arrRelPatRow.add(arrRelPatCol);
			}
			hshValues.put("dblRPTotCost", String.valueOf(dblRPTotCost));
			hshValues.put("dblRPTotMargin", String.valueOf(dblRPTotMargin));
			hshValues.put("dblRPTotLoan", String.valueOf(dblRPTotLoan));
			hshValues.put("arrRelPatrnMjrRow", arrRelPatRow);
			hshValues.put("arrRelPatrnRow", arrOutRow);
			hshValues.put("arrRelPatColNew", arrRelPatCol);

			// DSCR
			if (str_arr.contains("DSCR@")) {
				hshFinValues = new HashMap();
				hshFinValues.put("appno", strAppNo);
				hshFinValues = dscrobj.getPrintValues(hshFinValues);
				hshValues.put("DSCRhshFinValues", hshFinValues);

				// SENSITIVITY - Added by DINESH on 31/03/2014
				hshFinSenValues = new HashMap();
				hshFinSenValues.put("appno", strAppNo);
				hshFinSenValues = dscrobj
						.getPrintSensitivityVal(hshFinSenValues);
				hshValues.put("SENSITIVITYhshFinValues", hshFinSenValues);
			}

			// For Comments by Guhan T
			if (rs != null)
				rs.close();
			String strQuery5 = SQLParser.getSqlQuery("selexistingfaccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery5);
			while (rs.next()) {
				hshValues.put("existing_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			String strQuery6 = SQLParser.getSqlQuery("selpriseccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery6);
			while (rs.next()) {
				hshValues.put("prisec_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			String strQuery7 = SQLParser.getSqlQuery("selcollseccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery7);
			while (rs.next()) {
				hshValues.put("collsec_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}

			if (rs != null)
				rs.close();
			strQuery5 = SQLParser
					.getSqlQuery("sel_comcommentscopmof^COPMOF^20^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery5);
			if (rs.next()) {
				hshValues.put("copmofcomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			ArrayList arrCol = new ArrayList();
			ArrayList arrRow = new ArrayList();
			// com_assessmentselection_select
			ComProposalBean comproposal = new ComProposalBean();
			HashMap hshRequestValues = new HashMap();

			if (str_arr.contains("TO@")) {

				arrRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_turnoverMethod^" + strAppNo);
				while (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("COM_TO_YEAR")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ACPTPROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PERCENTACPTPROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_MINMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ELIGIBLEFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ACTUALMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ELIGIBLEBANKFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PERMISIBLEFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_LIMITSOUGHT")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_LIMITPROPOSED")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_REQMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_SURPLUS")));
					arrRow.add(arrCol);
				}
				hshValues.put("TurnOver", arrRow);
			}
			if (str_arr.contains("Exp@")) {
				// Expenditure Method
				arrOutRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_expenditureMethod^"
						+ strAppNo);
				while (rs.next()) {
					arrOutCol = new ArrayList();

					arrOutCol.add(correctNull(rs.getString("com_exp_year")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_projexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_acptprojexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_operationcycle")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_eligibleexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_permisiblefin")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_limitsought")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_limitproposed")));

					arrOutRow.add(arrOutCol);
				}
				hshValues.put("arrExpRow", arrOutRow);
			}
			if (str_arr.contains("CFS@")) {
				if (rs != null) {
					rs.close();
				}
				int c = 1, d = 0, n = 1;
				rs1 = DBUtils.executeLAPSQuery("sel_finYear^" + strAppNo);
				while (rs1.next()) {
					d++;
					n = 2;
					arrRow = new ArrayList();
					rs = DBUtils.executeLAPSQuery("sel_cashflowMethod^"
							+ strAppNo + "^"
							+ Helper.correctNull(rs1.getString(1)));
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_YEAR")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OPENINGBAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PROMOTEREQUITY")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_BANKFINANCE")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_UNSECLOAN")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_SALEPROCEEDS")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OTHER")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_SOF_TOTAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_COSTOFLAND")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PREMIUMFSI")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_CONSTRUCTCOST")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_MARKETEXPENSES")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_ADMINEXPENSES")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OTHERFIN")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_INTEREST")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_REPAYMENT")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PROVISIONTAX")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_APPFIN_TOTAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_CLOSINGBALANCE")));
						arrRow.add(arrCol);
						if (!Helper.correctNull(rs.getString("COM_CF_YEAR"))
								.equalsIgnoreCase(""))// 0)
						{
							hshValues.put("rowcount" + (d), "" + (n++));
						}
						hshValues.put("finyear" + (d), Helper.correctNull(rs
								.getString("COM_CF_FINYEAR")));
					}
					for (int h = 0; arrRow.size() < 15; h++) {
						arrCol = new ArrayList();
						for (int k = 0; k < 16; k++) {
							arrCol.add("");
						}
						arrRow.add(arrCol);
					}
					hshValues.put("CashFlow" + (c), arrRow);
					c++;
				}
				hshValues.put("CashCount", "" + (d));

				rs = DBUtils.executeLAPSQuery("sel_cashflow_projTot^"
						+ strAppNo + "^" + "1");
				while (rs.next()) {
					dbl_opnBal = Double.parseDouble((String) rs
							.getString("COM_CF_OPENINGBAL"));
					dbl_allopnBal = dbl_allopnBal + dbl_opnBal;

					dbl_proEqt = Double.parseDouble((String) rs
							.getString("COM_CF_PROMOTEREQUITY"));
					dbl_allproEqt = dbl_allproEqt + dbl_proEqt;

					dbl_bnkFin = Double.parseDouble((String) rs
							.getString("COM_CF_BANKFINANCE"));
					dbl_allbnkFin = dbl_allbnkFin + dbl_bnkFin;

					dbl_unsec = Double.parseDouble((String) rs
							.getString("COM_CF_UNSECLOAN"));
					dbl_allunsec = dbl_allunsec + dbl_unsec;

					dbl_saleProc = Double.parseDouble((String) rs
							.getString("COM_CF_SALEPROCEEDS"));
					dbl_allsaleProc = dbl_allsaleProc + dbl_saleProc;

					dbl_other = Double.parseDouble((String) rs
							.getString("COM_CF_OTHER"));
					dbl_allother = dbl_allother + dbl_other;

					dbl_sofTot = Double.parseDouble((String) rs
							.getString("COM_CF_SOF_TOTAL"));
					dbl_allsofTot = dbl_allsofTot + dbl_sofTot;

					dbl_costLand = Double.parseDouble((String) rs
							.getString("COM_CF_COSTOFLAND"));
					dbl_allcostLand = dbl_allcostLand + dbl_costLand;

					dbl_premiumfsi = Double.parseDouble((String) rs
							.getString("COM_CF_PREMIUMFSI"));
					dbl_allpremiumfsi = dbl_allpremiumfsi + dbl_premiumfsi;

					dbl_constcost = Double.parseDouble((String) rs
							.getString("COM_CF_CONSTRUCTCOST"));
					dbl_allconstcost = dbl_allconstcost + dbl_constcost;

					dbl_marketexp = Double.parseDouble((String) rs
							.getString("COM_CF_MARKETEXPENSES"));
					dbl_allmarketexp = dbl_allmarketexp + dbl_marketexp;

					dbl_adminexp = Double.parseDouble((String) rs
							.getString("COM_CF_ADMINEXPENSES"));
					dbl_alladminexp = dbl_alladminexp + dbl_adminexp;

					dbl_interest = Double.parseDouble((String) rs
							.getString("COM_CF_INTEREST"));
					dbl_allinterest = dbl_allinterest + dbl_interest;

					dbl_repayment = Double.parseDouble((String) rs
							.getString("COM_CF_REPAYMENT"));
					dbl_allrepayment = dbl_allrepayment + dbl_repayment;

					dbl_provTax = Double.parseDouble((String) rs
							.getString("COM_CF_PROVISIONTAX"));
					dbl_allprovTax = dbl_allprovTax + dbl_provTax;

					dbl_otherFin = Double.parseDouble((String) rs
							.getString("COM_CF_OTHERFIN"));
					dbl_allotherFin = dbl_allotherFin + dbl_otherFin;

					dbl_appfinTot = Double.parseDouble((String) rs
							.getString("COM_CF_APPFIN_TOTAL"));
					dbl_allappfinTot = dbl_allappfinTot + dbl_appfinTot;

					dbl_closingBal = Double.parseDouble((String) rs
							.getString("COM_CF_CLOSINGBALANCE"));
					dbl_allclosingBal = dbl_allclosingBal + dbl_closingBal;

				}
				arrRow = new ArrayList();
				arrCol = new ArrayList();
				arrCol.add("Projected");
				arrCol.add("" + dc.format(dbl_allopnBal));
				arrCol.add("" + dc.format(dbl_allproEqt));
				arrCol.add("" + dc.format(dbl_allbnkFin));
				arrCol.add("" + dc.format(dbl_allunsec));
				arrCol.add("" + dc.format(dbl_allsaleProc));
				arrCol.add("" + dc.format(dbl_allother));
				arrCol.add("" + dc.format(dbl_allsofTot));
				arrCol.add("" + dc.format(dbl_allcostLand));
				arrCol.add("" + dc.format(dbl_allpremiumfsi));
				arrCol.add("" + dc.format(dbl_allconstcost));
				arrCol.add("" + dc.format(dbl_allmarketexp));
				arrCol.add("" + dc.format(dbl_alladminexp));
				arrCol.add("" + dc.format(dbl_allotherFin));
				arrCol.add("" + dc.format(dbl_allinterest));
				arrCol.add("" + dc.format(dbl_allrepayment));
				arrCol.add("" + dc.format(dbl_allprovTax));
				arrCol.add("" + dc.format(dbl_allappfinTot));
				arrCol.add("" + dc.format(dbl_allclosingBal));
				arrRow.add(arrCol);

				hshValues.put("CashFlowTOT", arrRow);

			}
			if (str_arr.contains("MED1@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "MU");
				hshRequestValues.put("pagefrom1", "M1");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Method I of lending other than export limits");
				hshValues.put("method1", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "M1");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewM1", hshassess);
			}
			if (str_arr.contains("MED2@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "MU");
				hshRequestValues.put("pagefrom1", "M2");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Method II of lending other than export limits");
				hshValues.put("method2", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "M2");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewM2", hshassess);
			}
			if (str_arr.contains("WCGMED@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "FL");
				hshRequestValues.put("pagefrom1", "AFL");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Assessment of working capital limits");
				hshValues.put("method3", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "AFL");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewAFL", hshassess);
			}

			if (str_arr.contains("AOI@")) {
				if (rs != null) {
					rs.close();
				}
				int c = 1, d = 0, n = 1;
				String strDate = "";
				arrOutRowCons = new ArrayList();
				rs1 = DBUtils
						.executeLAPSQuery("sel_inland_finYear^" + strAppNo);
				while (rs1.next()) {

					strDate = "";
					strDate = Helper.correctNull(rs1.getString("com_ia_year"));
					if (!strDate.equalsIgnoreCase("")) {
						d++;
						n = 2;
						arrRow = new ArrayList();
						rs = DBUtils
								.executeLAPSQuery("sel_fin_inlandAssessment^"
										+ strAppNo + "^" + strDate);
						while (rs.next()) {
							arrCol = new ArrayList();
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_YEAR")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_SALES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_PURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_PROJPURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_AVGMONPURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_CREDITPERIOD")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_TRANSITPERIOD")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_LCREQUIRED")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_APPLIEDLIMIT")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_RECOMMLIMIT")));
							// arrCol.add(Helper.correctNull(rs.getString("COM_IA_YEAR")));
							arrRow.add(arrCol);
						}
						arrOutRowCons.add(arrRow);
					}
				}
				hshValues.put("Inland", arrOutRowCons);
				hshValues.put("InlandCount", "" + (d));
			}
			if (str_arr.contains("CASHBUD@")) {
				int i = 0, j = 1, k = 0;
				arrRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_count_cashbudgetyear^"
						+ strAppNo);
				while (rs.next()) {
					i += 1;
					j = 2;
					arrRow = new ArrayList();
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("com_cash_budget_method_sel^"
									+ strAppNo
									+ "^"
									+ Helper.correctNull(rs
											.getString("CCBM_YEAR")));
					while (rs1.next()) {
						arrCol = new ArrayList();
						hshValues.put("rowtype" + (i), Helper.correctNull(rs1
								.getString("CCBM_TYPE")));
						if (rs1.isLast()) {
							arrCol.add("Total");// 0}
						} else {
							arrCol.add(Helper.correctNull(rs1
									.getString("CCBM_VAL")));// 0
						}
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_NT_CONTRCT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SB_CONTRCT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TOT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_MATERIALS"))));// 5
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SAL_WGS"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SB_CONTRCT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_HIRE_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_LBR_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_DSL_PTRL_CHRG"))));// 10
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_RPR_MNT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TRVL_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_OPRTNG_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_BNK_INT_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TAX_PAY"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_ADMN_EXP"))));// 16
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TOT_OFLW"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SRPLS_DFCT"))));
						// arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1.getString("CCBM_OPN_CRDT_CSH"))));
						// arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1.getString("CCBM_SRPLS_DFTC_TOT"))));//21
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_BNK_FIN"))));
						arrRow.add(arrCol);
						if (!Helper.correctNull(rs1.getString("CCBM_VAL"))
								.equalsIgnoreCase(""))// 0)
						{
							hshValues.put("rowcount" + (i), "" + (j++));
						}
						k++;

						hshValues.put("cb_finyear" + (i), Helper
								.correctNull(rs1.getString("CCBM_FIN_YEAR")));
					}
					hshValues.put("y" + (i), arrRow);
				}
				hshValues.put("count", "" + (i));
			}
			if (str_arr.contains("AOW@")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^20");
				if (rs1.next()) {
					hshValues.put("com_wcassessment_comments", Helper
							.CLOBToString(rs1
									.getClob("com_assessment_comments")));
				}
			}
			if (str_arr.contains("AOA@")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^6");
				if (rs1.next()) {
					hshValues.put("com_tlassessment_comments", Helper
							.CLOBToString(rs1
									.getClob("com_assessment_comments")));
				}
			}
			hshRequestValues = new HashMap();
			hshRequestValues.put("appno", strAppNo);
			hshValues.put("sensitiveAnalysis", financial
					.getSensitiveData(hshRequestValues));
			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_tlothers^" + strAppNo);
			while (rs1.next()) {
				hshValues.put("estimated_date", Helper.correctNull(rs1
						.getString("com_date")));
				hshValues.put("estimated_remarks", Helper.CLOBToString(rs1
						.getClob("com_comments")));
			}
			String strQuery2 = SQLParser.getSqlQuery("combankingselectNEW^"
					+ strAppNo + "^ ");
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery2);
			while (rs.next()) {

				String strcombk_modtype = Helper.correctNull((String) rs
						.getString("combk_modtype"));
				String strFacility = Helper.correctNull((String) rs
						.getString("combk_facility"));
				String[] strFacilityArr = strFacility.split("~");
				if (strFacilityArr.length > 0) {
					if (strcombk_modtype.equalsIgnoreCase("r")) {
						strQuery2 = SQLParser.getSqlQuery("sel_retProductDesc^"
								+ strFacilityArr[0]);
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}

					} else if (strcombk_modtype.equalsIgnoreCase("c")) {
						strQuery2 = SQLParser
								.getSqlQuery("sel_FacilityCorpDesc^"
										+ strFacilityArr[0] + "^c");
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}
					} else if (strcombk_modtype.equalsIgnoreCase("a")) {
						strQuery2 = SQLParser
								.getSqlQuery("sel_FacilityCorpDesc^"
										+ strFacilityArr[0] + "^a");
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}
					}
				}
				Helper.correctDouble((String) rs.getString("combk_limit"));
				Helper.correctDouble((String) rs.getString("combk_limit"));
				Helper.correctDouble((String) rs.getString("combk_sancrefno"));
				Helper.correctDouble((String) rs.getString("combk_inttype"));
				Helper.correctDouble((String) rs.getString("combk_spread"));
				Helper.correctDouble((String) rs.getString("combk_os"));
				Helper.correctDouble((String) rs.getString("combk_duedate"));
				Helper.correctDouble((String) rs.getString("combk_arrears"));
			}
			strQuery = SQLParser.getSqlQuery("sel_combankingdetails^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COM_ASSETCLASS", correctNull(rs
						.getString("COM_ASSETCLASS")));
			}
			if (rs != null) {
				rs.close();
			}

			// Added by bhaskar for income from cropsfor agriculture
			arrRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("seldistfinayearsofcropincome^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CRP_FINYR")));// 0
				if (rs2 != null) {
					rs2.close();
				}
				if (!Helper.correctNull((String) rs.getString("AGR_CRP_FINYR"))
						.equalsIgnoreCase("")) {
					rs2 = DBUtils.executeLAPSQuery("selincomefromcrops^"
							+ strAppNo
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("AGR_CRP_FINYR")));
					arrIncomeFromCropRow = new ArrayList();
					while (rs2.next()) {
						arrIncomeFromCropCol = new ArrayList();
						strSeasonType = rs2.getString("agr_crp_season");// 0
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("getstaticdatavaldispcorporate^"
										+ "131" + '^' + strSeasonType);
						if (rs1.next()) {
							strSeasonName = Helper.correctNull((String) rs1
									.getString("stat_data_desc1"));
						}
						arrIncomeFromCropCol.add(strSeasonName);// 0
						strSeasonName = "";
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_cropname"));// 1
						arrIncomeFromCropCol.add(rs2.getString("agr_crp_area"));// 2
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_yieldperacre"));// 3
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totalyield"));// 4
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_priceperqtl"));// 5
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totalinc"));// 6
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_costofcult"));// 7
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totcostofcult"));// 8
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_surplus"));// 9
						String strTotal = rs2.getString("agr_crp_surplus");
						dblTotal = Double.parseDouble(strTotal);
						dblTotalAmt += dblTotal;
						strTotalAmt = dc.format(dblTotalAmt);
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_season"));// 10
						arrIncomeFromCropCol.add(rs2.getString("agr_crp_sno"));// 11
						strCropType = rs2.getString("agr_crp_cropname");
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("getstaticdatavaldispcorporate^"
										+ "130" + '^' + strCropType);
						if (rs1.next()) {
							strCropName = Helper.correctNull((String) rs1
									.getString("stat_data_desc1"));
						}
						arrIncomeFromCropCol.add(strCropName);// 12
						strexiprotype = Helper.correctNull(rs2
								.getString("agr_crp_exiprotype"));
						arrIncomeFromCropCol.add(strexiprotype);// 13 added by
																// ganesan for
																// the type

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
								+ "135"
								+ '^'
								+ Helper.correctNull((String) rs2
										.getString("agr_crp_areaunit")));
						if (rs1.next()) {
							arrIncomeFromCropCol.add(Helper
									.correctNull((String) rs1
											.getString("stat_data_desc1")));
						} else {
							arrIncomeFromCropCol.add("");
						}

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
								+ "136"
								+ '^'
								+ Helper.correctNull((String) rs2
										.getString("agr_crp_yieldunit")));
						if (rs1.next()) {
							arrIncomeFromCropCol.add(Helper
									.correctNull((String) rs1
											.getString("stat_data_desc1")));
						} else {
							arrIncomeFromCropCol.add("");
						}

						if (Helper.correctNull(strexiprotype).equalsIgnoreCase(
								"1")) {

							// rs1=DBUtils.executeLAPSQuery("sel_exiproagr_croppingpattern^"+strAppNo+'^'+strexiprotype);
							dbl_exitot = Double.parseDouble((String) rs2
									.getString("agr_crp_surplus"));
							dbl_exialltot = dbl_exialltot + dbl_exitot;

						} else if (Helper.correctNull(strexiprotype)
								.equalsIgnoreCase("2")) {
							// rs1=DBUtils.executeLAPSQuery("sel_exiproagr_croppingpattern^"+strAppNo+'^'+strexiprotype);

							dbl_protot = Double.parseDouble((String) rs2
									.getString("agr_crp_surplus"));
							dbl_proalltot = dbl_proalltot + dbl_protot;

						}
						strCropName = "";
						arrIncomeFromCropRow.add(arrIncomeFromCropCol);
					}
				}
				arrCol.add(arrIncomeFromCropRow);// 1
				arrRow.add(arrCol);
			}
			hshValues.put("total", strTotalAmt);
			hshValues.put("arrData", arrRow);
			hshValues.put("Exis_Tootal", dc.format(dbl_exialltot));
			hshValues.put("prop_Tootal", dc.format(dbl_proalltot));
			hshValues.put("strLoanTypeNew", strLoanType);

			HashMap hshFarmBudget = new HashMap();
			ComProposalBean cpb = new ComProposalBean();
			hshValues.put("callform", "Processnote");
			hshFarmBudget = cpb.getFarmBudget(hshValues);
			hshValues.put("hshFarm", hshFarmBudget);

			arrRow = new ArrayList();
			rs = DBUtils
					.executeLAPSQuery("selcropassementforappno^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_SEASON")));// 0
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_CROP")));// 1
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_AREACUL")));// 2
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_AMOUNT")));// 3
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_ELIGIBILITY")));// 4
				arrRow.add(arrCol);
			}
			hshValues.put("arrCropAssessment", arrRow);

			/**
			 * Added by: Vinoth kumar Date : March 08 2014 Purpose : Display
			 * Physical and Financial Programe and DSS page Details in Appraisal
			 * Note
			 */

			String modtype = Helper.correctNull((String) hshValues
					.get("sessionModuleType"));
			if (modtype.equalsIgnoreCase("AGR")) {
				hshPhysicsAndFinValues = (HashMap) EJBInvoker.executeStateLess(
						"lapsReport", hshValues, "getFinProgrammePrint");
				hshValues.put("hshPhysicsAndFinValues", hshPhysicsAndFinValues);

				hshValues.put("hidapplicantid", strAppId);
				hshValues.put("strPrintFlag", "Y");
				hshDSSData = (HashMap) EJBInvoker.executeStateLess(
						"comproposal", hshValues, "getDSS");
				hshValues.put("hshDSSData", hshDSSData);
			}

			String strQuery13 = SQLParser
					.getSqlQuery("sel_assessmnt_comments^Management^"
							+ strAppNo);
			ResultSet rs13 = DBUtils.executeQuery(strQuery13);
			while (rs13.next()) {
				String strsno = Helper.correctNull((String) rs13
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("8"))
					hshValues.put("MgmtComments8", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("9"))
					hshValues.put("MgmtComments9", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("10"))
					hshValues.put("MgmtComments10", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("11"))
					hshValues.put("MgmtComments11", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("12"))
					hshValues.put("MgmtComments12", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("13"))
					hshValues.put("MgmtComments13", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("16"))
					hshValues.put("MgmtComments16", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));

				hshValues.put("OtherRelevantInfo", "1");
			}

			// BG Assessment

			if (str_arr.contains("BGA@")) {
				if (rs12 != null)
					rs12.close();
				String strbnkGurnt = "";
				strQuery = SQLParser
						.getSqlQuery("sel_assessmnt_comments^bgassessment^"
								+ strAppNo);
				rs12 = DBUtils.executeQuery(strQuery);
				while (rs12.next()) {
					String strComment = "";
					String strsno = Helper.correctNull((String) rs12
							.getString("COM_SNO"));
					if (strsno.equalsIgnoreCase("1")) {
						strComment = "Bank Guarantee";
						strbnkGurnt = Helper.CLOBToString(rs12
								.getClob("COM_COMMENTS"));
					}
				}
				hshValues.put("strbnkGurnt", strbnkGurnt);
			}
			if (str_arr.contains("AOR@")) {
				rs = DBUtils.executeLAPSQuery("sel_com_restr_assessment^"
						+ strAppNo);
				if (rs.next()) {
					hshValues.put("com_proj_details", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("com_proj_details"))));
					hshValues.put("com_restr_reasons", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_restr_reasons"))));
					hshValues.put("com_restr_justification", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_restr_justification"))));
					hshValues.put("com_exi_repayschedule", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_exi_repayschedule"))));
					hshValues.put("com_revised_repayschedule", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_revised_repayschedule"))));
					hshValues.put("strRestrAss", "true");
				} else {
					hshValues.put("strRestrAss", "false");
				}
			}

			// Sales Justification

			if (rs12 != null)
				rs12.close();
			String strLastYrEst = "", strCurrYrEst = "", strJustification = "";
			strQuery = SQLParser
					.getSqlQuery("sel_assessmnt_comments^salesjustify^"
							+ strAppNo);
			rs12 = DBUtils.executeQuery(strQuery);
			while (rs12.next()) {
				String strComment = "";
				String strsno = Helper.correctNull((String) rs12
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("1")) {
					strComment = "Estimates and actual for last three years";
					strLastYrEst = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("2")) {
					strComment = "Estimates of sales for the current year & for the next year";
					strCurrYrEst = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("3")) {
					strComment = "Justification for sales";
					strJustification = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				}
			}
			hshValues.put("strLastYrEst", strLastYrEst);
			hshValues.put("strCurrYrEst", strCurrYrEst);
			hshValues.put("strJustification", strJustification);

			// Other Non Funded Assessment

			strQuery = SQLParser.getSqlQuery("sel_nonfundassessment^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_nonfund_comments", correctNull(Helper
						.CLOBToString(rs.getClob("com_nonfund_comments"))));
			}

			// Term of sanction

			strQuery = SQLParser.getSqlQuery("sel_comments^commentsTrans^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("term_com_comments", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_comments^presentproposal^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("presentproposal_comment", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "assdscr");
			if (rs.next()) {
				hshValues.put("fin_comments_dscr", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_dscr", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "cashflow");
			if (rs.next()) {
				hshValues.put("fin_comments_cashflow", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_cashflow", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "dscrsensvty");
			if (rs.next()) {
				hshValues.put("fin_comments_sensitive", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_sensitive", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Method1");
			if (rs.next()) {
				hshValues.put("fin_comments_method1", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_method1", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Method2");
			if (rs.next()) {
				hshValues.put("fin_comments_method2", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_method2", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion1^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm1", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Assessmentofwc");
			if (rs.next()) {
				hshValues.put("fin_comments_wcg", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_wcg", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			/*
			 * if(rs!=null) {rs.close();}
			 * 
			 * rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo +
			 * "^"+ "repaycomment"); if (rs.next()) {
			 * hshValues.put("fin_comments_repay",
			 * Helper.CLOBToString(rs.getClob("fin_comments"))); }
			 */
			if (rs != null)
				rs.close();
			String strProjection = "";
			rs = DBUtils.executeLAPSQuery("sel_projectiondata^" + strAppNo);
			if (rs.next()) {
				strProjection = "Projection";
			}
			if (rs != null) {
				rs.close();
			}
			hshValues.put("strProjection", strProjection);

			// MIS information
			String strSector = "", strSubSector = "", mainactivity = "", subactivity = "", strcrtsales = "";
			if (rs != null) {
				rs.close();
			}
			ArrayList arrMISRow = new ArrayList();
			ArrayList arrMISCol = new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_misapp_desc^" + strAppNo + "^"
					+ strLoanType);
			while (rs.next()) {
				arrMISCol = new ArrayList();
				arrMISCol.add(Helper.correctNull(rs
						.getString("FACILITY_DISPLAYDESC")));
				mainactivity = Helper.correctNull(rs
						.getString("app_mainactivity"));
				subactivity = Helper.correctNull(rs
						.getString("app_subactivity"));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "7"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_subsector")));
				if (rs1.next()) {
					strSubSector = Helper.correctNull((String) rs1
							.getString("mis_static_data_desc"));
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
							+ "8"
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("app_subsector")));
					if (rs1.next()) {
						strSubSector = Helper.correctNull((String) rs1
								.getString("mis_static_data_desc"));
					} else {
						strSubSector = "";
					}
				}

				if (mainactivity.equalsIgnoreCase("01")
						|| mainactivity.equalsIgnoreCase("02")) {
					arrMISCol.add(strSubSector);
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
							+ "2" + "^" + mainactivity);
					if (rs1.next()) {
						arrMISCol.add(Helper.correctNull(rs1
								.getString("mis_static_data_desc")));
					} else {
						arrMISCol.add("");
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}

				rs1 = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
						+ mainactivity + "^" + subactivity);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("mis_subactdesc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("app_activitycode")));
				strSector = Helper.correctNull((String) rs
						.getString("app_sector"));
				if (strSector.equalsIgnoreCase("01")
						|| strSector.equalsIgnoreCase("1")) {
					arrMISCol.add("Priority Sector");
				} else if (strSector.equalsIgnoreCase("02")
						|| strSector.equalsIgnoreCase("2")) {
					arrMISCol.add("Non Priority Sector");
				} else {
					arrMISCol.add(" ");
				}
				arrMISCol.add(strSubSector);

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "11"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_sensitivesector")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("Y"))
					arrMISCol.add("Yes");
				else if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("N"))
					arrMISCol.add("No");
				else
					arrMISCol.add("");

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "23"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GOVTANNOUNCESCHEME")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "17"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GUARANTEE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}

				arrMISCol
						.add(Helper.correctNull(rs.getString("app_guarantee")));
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_GUARANTEEAMT")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_cusdetails^" + strAppId);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_UDYAM_REGNO")));
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_SALES_TURNOVER")));
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_SALES_TURNOVER_DATE")));

					strcrtsales = Helper.correctNull((String) rs1
							.getString("PERAPP_CRITERIA_SALES_TURNOVER"));
					rs2 = DBUtils.executeLAPSQuery("selmiscust^243^"
							+ strcrtsales);
					if (rs2.next()) {
						arrMISCol.add(Helper.correctNull(rs2
								.getString("STAT_DATA_DESC1")));

					} else {
						arrMISCol.add("");
					}

				} else {
					arrMISCol.add("");
					arrMISCol.add("");
					arrMISCol.add("");

				}
				if (rs1 != null) {
					rs1.close();
				}
				arrMISCol.add(Helper.correctNull(rs.getString("app_plantval")));
				arrMISCol.add(Helper.correctNull(rs.getString("app_indname")));
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "12"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_AGRICULTURE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_INVESTMENT_DATE")));
				rs2 = DBUtils.executeLAPSQuery("selmiscust^248^"
						+ Helper.correctNull((String) rs
								.getString("APP_CRITERIA_INVESTMENT")));
				if (rs2.next()) {
					arrMISCol.add(Helper.correctNull(rs2
							.getString("STAT_DATA_DESC1")));

				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("facility")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "9"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_weakersec")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_MINISTRY_INDUSTRY")));
				if (rs6 != null) {
					rs6.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_minorityconstitutionchk^"
						+ strAppId);
				rs6 = DBUtils.executeQuery(strQuery);
				if (rs6.next()) {
					arrMISCol.add("Y");

				} else {
					arrMISCol.add("");
				}
				arrMISRow.add(arrMISCol);
			}
			hshValues.put("arrMISRow", arrMISRow);

			if (rs != null)
				rs.close();
			arrRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("selgroupConcernDetailsCustomer^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				String strId = Helper.correctInt(rs
						.getString("comapp_div_appid"));
				rs1 = DBUtils.executeLAPSQuery("selcustomerdetails^" + strId);
				if (rs1.next()) {
					arrCol.add(correctNull(rs1.getString("perapp_fname")));// 0
					arrCol.add(correctNull(rs1.getString("Perapp_TITLE"))
							+ " . ");// 1
				} else {
					arrCol.add(correctNull(rs.getString("comapp_div_name")));// 0
					arrCol.add("");// 1
				}
				if (correctNull(rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("O")) {
					arrCol.add("Share Holders");// 2
				} else if (correctNull(rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("D")) {
					arrCol.add("Directors"); // 2
				} else if (correctNull(rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("SP")) {
					arrCol.add("Sole Proprietor");// 2
				} else if (correctNull(rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("PT")) {
					arrCol.add("Partner");// 2
				} else if (correctNull(rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("OT")) {
					arrCol.add("Others");// 2
				} else {
					arrCol
							.add(correctNull(rs
									.getString("comapp_divisiontype")));// 2
				}
				arrRow.add(arrCol);
			}

			hshValues.put("arrGroupConcerns", arrRow);

			// For non base rate facilities
			if (rs != null) {
				rs.close();
			}
			String strComments = "";
			ArrayList arrColNonBr = new ArrayList();
			ArrayList arrRowNonBr = new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_faclityforcommentsonintrate^"
					+ strAppNo);
			while (rs.next()) {
				strFacSno = Helper.correctNull(rs.getString("term_sno"));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate^"
								+ strFacSno + "^" + strAppNo);
				if (rs1.next()) {
					arrColNonBr = new ArrayList();
					strComments = correctNull(Helper.CLOBToString(rs1
							.getClob("COM_COMMENTS")));
					if (!strComments.equalsIgnoreCase("")) {
						arrColNonBr.add(Helper.correctNull(
								rs.getString("facility_displaydesc"))
								.toUpperCase());
						arrColNonBr.add(correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS"))));
						arrRowNonBr.add(arrColNonBr);
					}
				}
			}
			hshValues.put("arrRowNonBr", arrRowNonBr);

			// To get the inward proposed amount
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_inward_proposed_values^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("INWARD_TERMLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_TERMLOANAMT")));
				hshValues.put("INWARD_WCLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_WCLOANAMT")));
				hshValues.put("INWARD_NONWCLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_NONWCLOANAMT")));
			}

			if (rs != null) {
				rs.close();
			}
			ArrayList arrOutCol2 = new ArrayList();
			ArrayList arrOutRow2 = new ArrayList();

			strQuery = SQLParser.getSqlQuery("sel_facility_allcomments^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (rs1 != null) {
					rs1.close();
				}
				String str_repay = "repaycomment";
				rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^" + strAppNo
						+ "^repaycomment^"
						+ Helper.correctNull(rs.getString("facility_sno")));
				if (rs1.next()) {
					arrOutCol2 = new ArrayList();
					arrOutCol2.add(Helper.correctNull(rs
							.getString("facility_sno")));
					arrOutCol2
							.add(Helper.correctNull(rs.getString("fac_desc")));
					arrOutCol2.add(Helper.CLOBToString(rs1
							.getClob("fin_comments")));
					arrOutCol2.add(Helper.correctNull(rs1
							.getString("FIN_STAGEWISE_RELEASE")));
					arrOutRow2.add(arrOutCol2);
				}
			}
			hshValues.put("arrOutRow2", arrOutRow2);

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
					+ "^repaycomment");
			if (rs.next()) {
				hshValues.put("fin_comments_repay", Helper.CLOBToString(rs
						.getClob("fin_comments")));
			}
			if (rs != null) {
				rs.close();
			}

			ArrayList arrCol2 = new ArrayList();
			ArrayList arrRow2 = new ArrayList();
			strQuery1 = "";
			strQuery1 = SQLParser.getSqlQuery("sel_appdetails_hunterscore^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {
				arrCol2.add(Helper.correctNull((String) rs
						.getString("DEMO_COMAPPID")));
				arrCol2.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));
				arrCol2.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow2.add(arrCol2);
			}
			if (rs != null) {
				rs.close();
			}

			ArrayList arrCol1 = new ArrayList();
			// ArrayList arrCol2 = new ArrayList();
			// boolean flag=false;
			strQuery1 = SQLParser.getSqlQuery("sel_coappdetails^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery1);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("COM_COMPDTID")));
				arrCol.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));

				arrCol.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow2.add(arrCol);
			}
			hshValues.put("arrRow2", arrRow2);

			arrRow2 = new ArrayList();
			arrCol1 = new ArrayList();
			String strGECLEligible = "";
			if (rs != null)
				rs.close();
			String strinputval = "";
			strQuery = SQLParser.getSqlQuery("sel_com_ksaeassessment^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrCol1 = new ArrayList();
				arrCol1.add(Helper.correctNull(rs.getString("question")));
				if (Helper.correctNull(rs.getString("com_comments"))
						.equalsIgnoreCase("Y"))
					arrCol1.add("Yes");
				else if (Helper.correctNull(rs.getString("com_comments"))
						.equalsIgnoreCase("N"))
					arrCol1.add("No");
				else
					arrCol1.add(Helper
							.correctNull(rs.getString("com_comments")));
				if (Helper.correctNull(rs.getString("com_eligible"))
						.equalsIgnoreCase("Y"))
					arrCol1.add("Yes");
				else if (Helper.correctNull(rs.getString("com_eligible"))
						.equalsIgnoreCase("N"))
					arrCol1.add("No");
				else
					arrCol1.add("");
				arrCol1.add(Helper.correctNull(rs.getString("com_comments1")));
				arrCol1.add(Helper.correctNull(rs
						.getString("STAT_DATA_VALUEDESC")));
				strinputval = Helper.correctNull(rs
						.getString("STAT_DATA_VALUEDESC"));
				if (strinputval.equalsIgnoreCase("NS")) {
					rs09 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
							+ Helper.correctNull(rs
									.getString("STATIC_DATA_SECTOR")) + "^"
							+ Helper.correctNull(rs.getString("com_comments")));
					if (rs09.next()) {
						arrCol1.add(Helper.correctNull(rs09
								.getString("stat_data_desc1")));

					}

				} else {
					arrCol1.add("");
				}
				arrRow2.add(arrCol1);
				strGECLEligible = Helper.correctNull(rs
						.getString("com_eligiblebasedon"));
			}

			if (!strGECLEligible.equalsIgnoreCase("")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("getstaticdata_soldid^233^"
						+ strGECLEligible);
				if (rs.next()) {
					hshValues.put("strGECLEligBasedon", Helper.correctNull(rs
							.getString("stat_data_desc1")));
				}

			}

			hshValues.put("arrGECL", arrRow2);

			ArrayList listRow = new ArrayList();
			ArrayList listCol = new ArrayList();
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
					+ strAppNo + "^MMithra");
			while (rs.next()) {
				listCol = new ArrayList();
				listCol
						.add(Helper
								.correctNull(rs.getString("com_description")));
				listCol.add(Helper.correctNull(rs.getString("com_details")));
				listRow.add(listCol);
			}
			hshValues.put("listMMithra", listRow);

			ArrayList listGRow = new ArrayList();
			ArrayList listGCol = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			if (!strAppType.equalsIgnoreCase("S")) {
				rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
						+ strAppNo + "^GECL");
			} else {
				rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
						+ strAppNo + "^GECL-Restructure");
			}
			while (rs.next()) {
				listGCol = new ArrayList();
				listGCol.add(Helper
						.correctNull(rs.getString("com_description")));
				listGCol.add(Helper.correctNull(rs.getString("com_details")));
				listGRow.add(listGCol);
			}
			hshValues.put("arrGECL1", listGRow);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_geclidentchk^" + strAppNo);
			if (rs.next()) {
				hshValues.put("COM_GECLTYPE", Helper.correctNull(rs
						.getString("COM_GECLTYPE")));
			}
			ArrayList listAcc = new ArrayList();
			ArrayList listAccRow = new ArrayList();
			ArrayList listAccCol = new ArrayList();
			double dblValue = 0.0;
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_dpnfacilities^" + strAppNo);
			while (rs.next()) {
				listAccCol = new ArrayList();
				listAccCol
						.add(Helper.correctNull(rs.getString("facility_sno")));
				listAccCol.add(Helper.correctNull(rs.getString("com_facdesc")));
				listAccCol.add(Helper.correctNull(rs
						.getString("fac_intdefermentdetails")));
				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("sel_facilitysancDetails^"
						+ Helper.correctNull(rs
								.getString("fac_intdefermentdetails"))
						+ "^"
						+ Helper.correctNull(rs
								.getString("fac_intdefermentdetails")));
				if (rs1.next()) {
					listAccCol.add(Helper.correctNull(rs1
							.getString("facility_sancamt")));
				} else {
					listAccCol.add("");
				}

				if (rs1 != null)
					rs1.close();

				listRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("sel_dpn_assesmentdetails^"
						+ strAppNo + "^FIDPN^"
						+ Helper.correctNull(rs.getString("facility_sno")));
				while (rs1.next()) {
					listCol = new ArrayList();
					listCol.add(Helper.correctNull(rs1
							.getString("com_description")));
					listCol.add(Helper
							.correctNull(rs1.getString("com_details")));
					listRow.add(listCol);
				}

				listAccCol.add(listRow);
				listAccRow.add(listAccCol);
				if (rs1 != null)
					rs1.close();
				strQuery = SQLParser.getSqlQuery("sel_app_perm_no^" + strAppNo);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("APP_PERM_NO", Helper.correctNull(rs
							.getString("APP_PERM_NO")));
				}
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser
						.getSqlQuery("sel_corporate_breifbackground^"
								+ strAppNo);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("com_interest_refno", correctNull(rs
							.getString("com_interest_refno")));

				}
			}
			strQuery = SQLParser.getSqlQuery("sel_facno^" + strAppNo);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				strfacno = Helper.correctNull(rs1.getString("facility_sno"));

				strQuery = SQLParser.getSqlQuery("sel_cgssd_asses^" + strAppNo
						+ "^" + strfacno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {

					/*
					 * hshValues.put("com_capita",correctNull(rs.getString("com_capita"
					 * )));
					 * hshValues.put("com_promoter",correctNull(rs.getString
					 * ("com_promoter")));
					 * hshValues.put("com_eligamount",correctNull
					 * (rs.getString("com_eligamount")));
					 * hshValues.put("com_amountappl"
					 * ,correctNull(rs.getString("com_amountappl")));
					 * hshValues.put
					 * ("com_liability",correctNull(rs.getString("com_liability"
					 * )));
					 * hshValues.put("com_maxloan",correctNull(rs.getString(
					 * "com_maxloan")));
					 * hshValues.put("com_recamount",correctNull
					 * (rs.getString("com_recamount")));
					 * hshValues.put("com_entiry_name"
					 * ,correctNull(rs.getString("com_entiry_name")));
					 * hshValues.
					 * put("com_operaccountnum",correctNull(rs.getString
					 * ("com_operaccountnum")));
					 * hshValues.put("com_status",correctNull
					 * (rs.getString("com_status")));
					 * hshValues.put("com_npadate"
					 * ,correctNull(rs.getString("com_npadate")));
					 */
					arrColCgssd = new ArrayList();
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_capita")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_promoter")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_eligamount")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_amountappl")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_liability")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_maxloan")));
					arrColCgssd.add(Helper.correctDouble(rs
							.getString("com_recamount")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_entiry_name")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_operaccountnum")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_status")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("com_npadate")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("COM_MSME_CBSID")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("COM_MSME_DPDNO")));
					arrColCgssd.add(Helper.correctNull(rs
							.getString("COM_ENTITY_RESTRUCTURE")));
					arrRowcgssd.add(arrColCgssd);

				}
				hshValues.put("arrRowcgssd", arrRowcgssd);
				strQuery = SQLParser.getSqlQuery("sel_cgssdperc^" + strAppNo
						+ "^" + strfacno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					hshValues.put("COM_CGSSDPERC", correctNull(rs
							.getString("COM_CGSSDPERC")));
					hshValues.put("COM_RANGETO", correctNull(rs
							.getString("COM_RANGETO")));
					// hshRecord.put("com_eligamount",correctNull(rs.getString("com_eligamount")));
				}
			}
			String strUser = "", strUserdesig = "";

			arrRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_delegation^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("COM_APPNO"))); // 0
				strUser = correctNull(rs.getString("COM_USERID"));
				arrCol.add(strUser);// 1
				strUserdesig = correctNull(rs.getString("COM_USERDES"));
				arrCol.add(strUserdesig);// 2
				arrCol.add(correctNull(rs.getString("COM_SNO")));// 3

				if (Helper.isNumeric(strUserdesig)) {
					strQuery = SQLParser
							.getSqlQuery("sel_CBSStaticDataPassingCode^"
									+ "27^" + strUserdesig);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						arrCol.add(Helper.correctNull((String) rs1
								.getString("CBS_STATIC_DATA_DESC")));// 13
					} else {
						arrCol.add(strUserdesig);
					}
				} else {
					if (strUserdesig.equals("adm")) {
						arrCol.add("Administrator");
					} else if (strUserdesig.equals("999")) {
						arrCol.add("DGM Admin");
					} else if (strUserdesig.equals("001")) {
						arrCol.add("Officer");
					} else if (strUserdesig.equals("002")) {
						arrCol.add("General Manager");
					} else if (strUserdesig.equals("003")) {
						arrCol.add("Chief Manager");
					} else {
						arrCol.add(strUserdesig);
					}
				}
				arrCol.add(correctNull(rs.getString("COM_USER")));// 5
				strQuery = SQLParser.getSqlQuery("setusername_byuserid^"
						+ correctNull(rs.getString("COM_USER")));
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrCol.add(Helper.correctNull((String) rs1
							.getString("usrname")));// 13
				} else {
					arrCol.add("");
				}
				arrCol.add(correctNull(rs.getString("COM_DETAILS")));
				arrCol.add(correctNull(rs.getString("COM_DATE")));

				arrRow.add(arrCol);
			}
			hshValues.put("listAccRow", listAccRow);

			hshValues.put("arrRowprop", arrRow);

			ArrayList arrDigiRating = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_digi_rate_score^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {

				arrDigiRating.add(correctNull(rs
						.getString("COMMERCIAL_BUREAU_SCORE")));
				arrDigiRating.add(correctNull(rs
						.getString("CONSUMER_IND_SCORE")));
				arrDigiRating.add(correctNull(rs
						.getString("CONSUMER_PARTY_SCORE")));
				arrDigiRating
						.add(correctNull(rs.getString("OD_ACCOUNT_SCORE")));
				arrDigiRating.add(correctNull(rs
						.getString("CURRENT_ACCOUNT_SCORE")));
				arrDigiRating.add(correctNull(rs.getString("FSA_SCORE")));
				arrDigiRating.add(correctNull(rs.getString("BAND_RATING")));
				arrDigiRating.add(correctNull(rs.getString("BAND_PATH")));
				arrDigiRating.add(correctNull(rs.getString("KB_RATING")));

			} else {
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");
				arrDigiRating.add("");

			}

			hshValues.put("arrDigiRating", arrDigiRating);

			String loanType = "";
			strQuery = SQLParser.getSqlQuery("seldigiprd_appl^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				loanType = correctNull(rs.getString("APP_LOANSUBTYPE_DIGI"));
			}

			hshValues.put("prd_purpose", loanType);

			if (rs1 != null) {
				rs1.close();
			}

			ArrayList arrfacwiseCersaicol = new ArrayList();
			arrfacwiseCersaicol = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("seluniqueprimary_sec_cersai^and  a.APP_SEC_LOANTYPE='P'^A^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {

				arrOutRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				strQuery1 = SQLParser
						.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P'^A^"
								+ correctNull(rs.getString("secid"))
								+ "^"
								+ strAppNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					String cus_sec_type = correctNull(rs
							.getString("CUS_SEC_TYPE"));
					if (cus_sec_type.equalsIgnoreCase("10")
							|| cus_sec_type.equalsIgnoreCase("11")
							|| cus_sec_type.equalsIgnoreCase("12")
							|| cus_sec_type.equalsIgnoreCase("13")
							|| cus_sec_type.equalsIgnoreCase("15")
							|| cus_sec_type.equalsIgnoreCase("16")
							|| cus_sec_type.equalsIgnoreCase("17")) {
						arrOutCol = new ArrayList();
						arrOutCol.add(correctNull(rs1
								.getString("facility_catdesc")));// 0
						arrOutCol.add(correctNull(rs1
								.getString("facility_proposed")));// 1
						arrOutCol.add(correctNull(rs
								.getString("secdescription")));// 2
						arrOutCol.add(correctNull(rs
								.getString("app_sec_securityvalue"))); // 3
						arrOutCol.add(correctNull(rs
								.getString("cus_sec_valuation_date")));// 4
						arrOutCol.add(correctNull(rs.getString("secid")));// 5
						if (Integer.parseInt(Helper.correctInt(rs
								.getString("CUS_SEC_TYPE"))) >= 10
								&& Integer.parseInt(Helper.correctInt(rs
										.getString("CUS_SEC_TYPE"))) < 18) {
							if (rs2 != null)
								rs2.close();
							rs2 = DBUtils
									.executeLAPSQuery("sel_CERSAIID^"
											+ Helper.correctNull(rs
													.getString("secid")));
							if (rs2.next()) {
								arrOutCol.add(correctNull(rs2
										.getString("CERSAIID")));// 5
							} else {
								arrOutCol.add("");
							}

						} else {
							arrOutCol
									.add(correctNull(rs.getString("CERSAIID")));// 5
						}
						arrOutCol.add(correctNull(rs
								.getString("SEC_CERSAIREFNO")));// 6
						arrOutCol.add(correctNull(rs
								.getString("SEC_SEARCHPERFORM_DATE")));// 7
						arrOutRow.add(arrOutCol);
					}

					if (arrOutRow.size() > 0) {
						arrfacwiseCersaicol.add(arrOutRow);
					}
				}
			}

			hshValues.put("arrRowCersaiPri", arrfacwiseCersaicol);

			if (rs != null)
				rs.close();

			ArrayList arrOutCersaiCol = new ArrayList();
			ArrayList arrOutCersaiRow = new ArrayList();

			strQuery1 = SQLParser
					.getSqlQuery("secExisFacilityDetailsView_existing_cersai_coll^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				String appsecsecuritytype = correctNull(rs
						.getString("app_sec_securitytype"));
				arrOutCersaiCol = new ArrayList();
				arrOutCersaiCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
				arrOutCersaiCol.add(correctNull(rs
						.getString("cus_sec_netsecurity"))); // 2
				arrOutCersaiCol.add(correctNull(rs
						.getString("cus_sec_valuation_date")));// 3

				if (Integer.parseInt(Helper.correctInt(rs
						.getString("CUS_SEC_TYPE"))) >= 10
						&& Integer.parseInt(Helper.correctInt(rs
								.getString("CUS_SEC_TYPE"))) < 18) {
					if (rs2 != null)
						rs2.close();
					rs2 = DBUtils.executeLAPSQuery("sel_CERSAIID^"
							+ Helper.correctNull(rs.getString("cus_sec_id")));
					if (rs2.next()) {
						arrOutCersaiCol.add(correctNull(rs2
								.getString("CERSAIID")));// 4
					} else {
						arrOutCersaiCol.add("");
					}

				} else {
					arrOutCersaiCol.add(correctNull(rs.getString("CERSAIID")));// 4
				}
				arrOutCersaiCol.add(correctNull(rs.getString("cus_sec_id")));// 5
				arrOutCersaiCol
						.add(correctNull(rs.getString("SEC_CERSAIREFNO")));// 5
				arrOutCersaiCol.add(correctNull(rs
						.getString("sec_searchperform_date")));// 6

				arrOutCersaiRow.add(arrOutCersaiCol);
			}

			hshValues.put("arrcollateralforcersai", arrOutCersaiRow);

			if (rs != null)
				rs.close();

			ArrayList arrOutCersaiQuesCol = new ArrayList();
			ArrayList arrOutCersaiQuesRow = new ArrayList();

			strQuery1 = SQLParser
					.getSqlQuery("secExisFacilityDetailsView_existing_cersai_Ques^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				arrOutCersaiQuesCol = new ArrayList();
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("cus_sec_type")));// 1
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_ALREADY_MORTG")));// 2
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_CHARG_REFLECT")));// 3
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_OTHERBNK_REMARK")));// 4
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_REMARK_NOT_REFLECT")));// 5
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_PROP_OBSERVED")));// 6
				arrOutCersaiQuesCol
						.add(correctNull(rs.getString("SEC_REMARKS")));// 7
				arrOutCersaiQuesCol
						.add(correctNull(rs.getString("cus_sec_id")));// 8
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_CERSAI_ID")));// 9
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_CERSAIREFNO")));// 10
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_SEARCHPERFORM_DATE")));// 11
				arrOutCersaiQuesCol.add(correctNull(rs
						.getString("SEC_CERSAI_DATE")));// 12

				arrOutCersaiQuesRow.add(arrOutCersaiQuesCol);
			}

			hshValues.put("arrOutCersaiQues", arrOutCersaiQuesRow);
			if (rs != null) {
				rs.close();
			}
			String corprestructureval = "N";
			strQuery = SQLParser.getSqlQuery("sel_rest_assess_selection^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				corprestructureval = "Y";

			}
			hshValues.put("corprestructureval", corprestructureval);
		} catch (Exception e) {
			log.error("Error in getProposalLC = " + e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshValues;
	}

	public HashMap getPostSancShortnote(HashMap hshValues)  {
		ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null, rs4 = null, rs5 = null;
		HashMap hshResult = new HashMap();
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		String strQuery = "", strLoanType = "", strFac = "";
		String strVal = "", strValuesIn = "", strVal1 = "", strVal2 = "", strVal3 = "", str_arr = "", strValuesIn1 = "", strAmountValue = "", strAmtValueIn = "";
		String strCommentMgmtSno[] = { "8", "11", "12", "13", "14", "15", "16" };

		ArrayList arrValues = new ArrayList();
		ArrayList arrOutRow = new ArrayList();
		ArrayList arrOutCol = new ArrayList();
		ArrayList arrFacilityTermApp = new ArrayList();
		ArrayList arrFacilityTerm = new ArrayList();
		ArrayList arrFacilityTermType = new ArrayList();
		ArrayList arrParentID = new ArrayList();
		ArrayList arrFacilityId = new ArrayList();
		ArrayList arrFacilityTermStatus = new ArrayList();
		ArrayList arrFacilityPrepost = new ArrayList();
		ArrayList arrFacilityTermTypeApp = new ArrayList();
		ArrayList arrFacilityIdApp = new ArrayList();
		ArrayList arrFacilityTermStatusapp = new ArrayList();
		String strFinancialrequired = "";
		String strAppOrgCode = "";
		String strsancdept = "";
		String strFacSno = "";

		double dblBaseRate = 0.00, dblInterestRate = 0.00, dblDiffIntRate = 0.00;

		DecimalFormat dc = new DecimalFormat();
		dc.setGroupingUsed(false);
		dc.setMaximumFractionDigits(2);
		dc.setMinimumFractionDigits(2);
		FinancialBean financial = new FinancialBean();
		String strAppOldId = "";
		try {
			String strAppNo = correctNull((String) hshValues.get("appno"));
			String strOldAppId = correctNull((String) hshValues.get("appid"));
			String strAppId = "0";

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_applicantiddemo^" + strAppNo);
			if (rs.next()) {
				strAppOldId = correctNull(rs.getString("demo_comappid"));
			}

			// Orgcode
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("UniqAppidList^" + strOldAppId);
			if (rs.next()) {
				strAppId = Helper.correctInt(rs.getString("perapp_id"));
			}

			if (strAppNo.length() == 0)
				strAppNo = correctNull((String) hshValues.get("strappno"));

			// For Applicant's Profile by
			CommDocumentBean commdocument = new CommDocumentBean();

			HashMap hshReqVal = new HashMap();
			hshReqVal.put("appno", strAppNo);
			hshReqVal.put("appid", strAppId);
			hshReqVal.put("PageType", "PROPOSALLC");
			hshReqVal.put("strPageType", "annexure");
			hshReqVal = commdocument.getAnnexureII(hshReqVal);
			hshReqVal.put("page", "PROPOSAL LC");
			hshValues.put("PROPOSALLC", hshReqVal);

			hshReqVal = new HashMap();
			hshReqVal.put("appno", strAppNo);
			hshReqVal.put("appid", strAppId);
			hshReqVal.put("PageType", "ANN5");
			hshReqVal = commdocument.getAnnexureV(hshReqVal);
			hshReqVal.put("page", "ANN5");
			hshValues.put("ANN5", hshReqVal);

			// For T&C - General
			HashMap hshTermsandcond = new HashMap();
			HashMap hshTermsval = new HashMap();
			hshTermsval.put("appno", strAppNo);
			hshTermsandcond = new CommDocumentBean()
					.getAnnexureVII(hshTermsval);
			hshValues.put("hshTermsandcond", hshTermsandcond);

			// Orgcode
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_appstatus^" + strAppNo);
			if (rs.next()) {
				strLoanType = Helper.correctNull((String) rs
						.getString("app_loantype"));
				strLoanType = strLoanType.toLowerCase();
			}

			// Customer Profile
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			strVal = "";

			if (rs.next()) {
				hshValues.put("perapp_name", correctNull(rs
						.getString("perapp_fname")));
				hshValues.put("perapp_banksince", correctNull(rs
						.getString("perapp_banksince")));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selCBSstaticdatanew^1");
				while (rs1.next()) {
					if (correctNull(
							(String) rs1.getString("cbs_static_data_code"))
							.trim().equals(
									correctNull(
											(String) rs
													.getString("perapp_title"))
											.trim())) {
						hshValues.put("perapp_title", correctNull(rs1
								.getString("cbs_static_data_desc")));
						break;
					}
				}

				// Values In
				String strOrgCode = "";
				// strValuesIn="",strValuesIn1="";
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("selorgno^" + strAppNo);
				if (rs.next()) {
					strOrgCode = correctNull(rs.getString("app_orgcode"));
					strValuesIn = correctNull(rs.getString("app_valuesin"));
					strValuesIn1 = correctNull(rs.getString("app_valuesin"));
					strValuesIn1 = correctNull(rs.getString("app_valuesin"));
					strFinancialrequired = correctNull(rs
							.getString("APP_FACILITYREQUIRED"));
				}
				hshValues.put("Financialrequired", strFinancialrequired);
				hshValues.put("valuesin", strValuesIn1);

				if (strValuesIn.equals("C")) {
					strValuesIn = "Crore";
				} else if (strValuesIn.equals("L")) {
					strValuesIn = "Lacs";
				} else if (strValuesIn.equals("R")) {
					strValuesIn = "Rs";
				}

				hshValues.put("strValuesIn", strValuesIn);
			}

			rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strAppNo);
			if (rs.next()) {
				strAmountValue = Helper.correctNull(rs
						.getString("com_amountvalue"));

			}
			if (strAmountValue.equalsIgnoreCase("C")) {
				strAmtValueIn = "Crore";
			} else if (strAmountValue.equalsIgnoreCase("L")) {
				strAmtValueIn = "Lacs";
			} else {
				strAmtValueIn = "Rs";
			}

			hshValues.put("strAmountValue", strAmountValue);
			hshValues.put("strAmtValueIn", strAmtValueIn);

			// For T&C - Specific , Inst. to the Branch

			String strFacsno[] = { "97", "98" };
			String srModuleType = "", mode = "", strFacCode = "", termType = "", strQuery1 = "";
			String strPrePost = "s";
			int strPatentid = 0;
			hshValues.put("strPrePost", strPrePost);

			for (int i = 0; i < strFacsno.length; i++) {
				if (strFacsno[i].equals("0"))
					mode = "G";
				else if (strFacsno[i].equals("99")) {
					mode = "O";
				} else if (strFacsno[i].equals("98")) {
					mode = "B";
				} else if (strFacsno[i].equals("97")) {
					mode = "P";
				} else {
					mode = "S";
				}
				srModuleType = "C";

				arrFacilityTerm = new ArrayList();
				arrFacilityTermType = new ArrayList();
				arrFacilityId = new ArrayList();
				arrFacilityTermStatus = new ArrayList();
				arrFacilityPrepost = new ArrayList();
				arrParentID = new ArrayList();
				arrFacilityTermStatusapp = new ArrayList();

				termType = "P";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				boolean boolresultflag = rs.next();
				if (boolresultflag) {
					do {
						arrFacilityTerm.add(correctNull(rs.getString(1)));
						arrFacilityTermType.add(correctNull(rs.getString(2)));
						arrFacilityId.add(correctNull(rs.getString(3)));
						arrFacilityTermStatus.add(correctNull(rs.getString(4)));
						arrParentID.add(correctNull(rs.getString(5)));
						strPatentid = Integer.parseInt(Helper
								.correctInt((String) rs.getString(3)));

						strQuery1 = SQLParser
								.getSqlQuery("sel_termscond_specific^"
										+ strAppNo + "^" + termType + "^"
										+ mode + "^" + srModuleType + "^"
										+ strPatentid);
						rs1 = DBUtils.executeQuery(strQuery1);
						while (rs1.next()) {
							arrFacilityTerm.add(correctNull(rs1.getString(1)));
							arrFacilityTermType.add(correctNull(rs1
									.getString(2)));
							arrFacilityId.add(correctNull(rs1.getString(3)));
							arrFacilityTermStatus.add(correctNull(rs1
									.getString(4)));
							arrParentID.add(correctNull(rs1.getString(5)));
						}
						if (rs1 != null)
							rs1.close();

					} while (rs.next());
				}
				hshValues.put("arrFacilityTerm" + i, arrFacilityTerm);
				hshValues.put("arrFacilityTermType" + i, arrFacilityTermType);
				hshValues.put("arrFacilityIdVal" + i, arrFacilityId);
				hshValues.put("arrFacilityId" + i, strFacsno[i]);
				hshValues.put("arrFacilityTermStatus" + i,
						arrFacilityTermStatus);
				hshValues.put("arrParentID" + i, arrParentID);

				arrFacilityTermApp = new ArrayList();
				arrFacilityTermTypeApp = new ArrayList();
				arrFacilityIdApp = new ArrayList();
				arrFacilityTermStatusapp = new ArrayList();

				if (rs != null)
					rs.close();
				termType = "A";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					arrFacilityTermApp.add(correctNull(rs.getString(1)));
					arrFacilityTermTypeApp.add(correctNull(rs.getString(2)));
					arrFacilityIdApp.add(correctNull(rs.getString(3)));
					arrFacilityTermStatusapp.add(correctNull(rs.getString(4)));
				}

				hshValues.put("arrFacilityTermApp" + i, arrFacilityTermApp);
				hshValues.put("arrFacilityTermTypeApp" + i,
						arrFacilityTermTypeApp);
				hshValues.put("arrFacilityIdAppVal" + i, arrFacilityIdApp);
				hshValues.put("arrFacilityTermStatusapp" + i,
						arrFacilityTermStatusapp);
			}

			// Delegation
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_delegation^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();

				arrOutCol.add(correctNull(rs.getString("com_userid")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_CBSStaticDataPassingCode^27^"
								+ correctNull(rs.getString("COM_USERDES"))
										.trim());
				if (rs1.next()) {
					arrOutCol.add(correctNull(rs1
							.getString("cbs_static_data_desc")));
				} else {
					arrOutCol.add(correctNull(rs.getString("COM_USERDES")));
				}

				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrDeleRow", arrOutRow);

			// Banking Arrangement - Our Bank

			String strOutstandingDate = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_BAOur_all^" + strAppNo);
			while (rs.next()) {
				/*
				 * String strFacility =
				 * correctNull((String)rs.getString("combk_facility")); String
				 * strFacilityCode[]=strFacility.split("~"); String
				 * strFacilityId=strFacilityCode[0]; String strFacilityFor =
				 * correctNull((String)rs.getString("combk_modtype")); String
				 * strFacilityDesc="";
				 * 
				 * if(strFacilityFor.equalsIgnoreCase("r")) { rs1 =
				 * DBUtils.executeLAPSQuery("selLoanPurpose^"+strFacilityId);
				 * if(rs1.next()) { strFacilityDesc =
				 * correctNull((String)rs1.getString("prddesc")); } } else { rs1
				 * =
				 * DBUtils.executeLAPSQuery("sel_facilitycorp^"+strFacilityId);
				 * if(rs1.next()) { strFacilityDesc =
				 * correctNull((String)rs1.getString("prddesc")); } }
				 */

				arrOutCol = new ArrayList();

				arrOutCol
						.add(correctNull(rs.getString("facility_displaydesc")));// 0
				arrOutCol.add("");
				arrOutCol
						.add(Helper.correctDouble(rs.getString("combk_limit")));
				arrOutCol.add(correctNull(rs.getString("combk_sancrefno")));
				arrOutCol.add(correctNull(rs.getString("combk_sancdate")));
				arrOutCol.add(Helper
						.correctDouble(rs.getString("combk_spread")));// 5
				arrOutCol.add(Helper.correctDouble(rs.getString("combk_os")));
				arrOutCol.add(correctNull(rs.getString("combk_osasondate")));
				arrOutCol.add(correctNull(rs.getString("combk_duedate")));
				arrOutCol.add(correctNull(rs.getString("combk_arrears")));
				arrOutCol.add(correctNull(rs.getString("combk_purpose")));
				arrOutCol.add(correctNull(rs.getString("combk_inttype")));// 11
				arrOutCol.add(Helper.correctDouble(rs
						.getString("combk_interestrate")));// 12
				arrOutCol.add(correctNull(rs.getString("combk_fac_grp")));// 13
				arrOutCol
						.add(Helper.correctNull(rs.getString("combk_remarks")));// 14
				arrOutCol.add(correctNull(rs.getString("combk_repaymentcmt")));// 15
				arrOutRow.add(arrOutCol);
				if (strOutstandingDate.equalsIgnoreCase(""))
					strOutstandingDate = correctNull(rs
							.getString("combk_osasondate"));
			}
			hshValues.put("arrBAOurRow", arrOutRow);
			hshValues.put("strOutstandingDate", strOutstandingDate);

			// For Financial & Business Performance

			ArrayList vecVal = new ArrayList();
			ArrayList vecRec1 = new ArrayList();
			ArrayList vecRec2 = new ArrayList();
			String strcomappid = correctNull((String) hshValues.get("comappid"));
			String strCompanyname = "0";
			String strindtype = correctNull((String) hshValues
					.get("industryType"));

			if (strcomappid.equalsIgnoreCase("")) {
				rs = DBUtils.executeLAPSQuery("comfunsel3^" + strAppNo);
				if (rs.next()) {
					strcomappid = Helper.correctNull((String) rs
							.getString("demo_comappnewid"));
				}
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("com_interfirm_select^" + strindtype
					+ "^" + strcomappid);
			while (rs.next()) {
				vecRec1.add(correctNull((String) rs
						.getString("comapp_id")));
				vecRec2.add(correctNull((String) rs
						.getString("comapp_companyname")));
			}

			vecVal.add(vecRec1);
			vecVal.add(vecRec2);
			hshValues.put("vecVal", vecVal);
			hshValues.put("vecname", vecRec2);
			hshValues.put("vecid", vecRec1);

			if (!strCompanyname.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selfingrpconcernval^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("intcompfreetxt_txt1", correctNull(rs
							.getString("COM_FREETEXT1"))); // 1
					hshValues.put("intcompfreetxt_txt2", correctNull(rs
							.getString("COM_FREETEXT2")));// 2
					hshValues.put("intcompfreetxt_txt3", correctNull(rs
							.getString("COM_FREETEXT3")));// 3
					hshValues.put("COM_FREETEXT4", correctNull(rs
							.getString("COM_FREETEXT4")));// 4
				}

				strQuery = SQLParser.getSqlQuery("selfingrpconcerncompare^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				int k = 0;
				while (rs.next()) {
					k = k + 1;
					hshValues.put("txt_compname" + k, correctNull(rs
							.getString("fingrpconcern_comname"))); // 1
					hshValues.put("txt_year" + k, correctNull(rs
							.getString("fingrpconcern_year")));// 2
					hshValues.put("txt_type" + k, correctNull(rs
							.getString("fingrpconcern_fintype")));// 3
					hshValues.put("txt_gross" + k, correctNull(rs
							.getString("fingrpconcern_grosssales")));// 4
					hshValues.put("txt_netsales" + k, correctNull(rs
							.getString("fingrpconcern_netsales")));// 5
					hshValues.put("txt_netprofit" + k, correctNull(rs
							.getString("fingrpconcern_netprofit"))); // 6
					hshValues.put("txt_capital" + k, correctNull(rs
							.getString("fingrpconcern_capital")));// 7
					hshValues.put("txt_tangnet" + k, correctNull(rs
							.getString("fingrpconcern_tangnetworth")));// 8
					hshValues.put("txt_network" + k, correctNull(rs
							.getString("fingrpconcern_networkcap"))); // 9
					hshValues.put("txt_toltnw" + k, correctNull(rs
							.getString("fingrpconcern_toltnw")));// 10

					hshValues.put("txt_currratio" + k, correctNull(rs
							.getString("fingrpconcern_currratio"))); // 11
					hshValues.put("txt_estproturn" + k, correctNull(rs
							.getString("fingrpconcern_estproturn")));// 12
					hshValues.put("txt_totwork" + k, correctNull(rs
							.getString("fingrpconcern_totcapital")));// 13
					hshValues.put("txt_seccoverinclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverinclude")));// 14
					hshValues.put("txt_seccoverexclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverexclude")));// 15
					hshValues.put("txt_lastcredit" + k, correctNull(rs
							.getString("fingrpconcern_lastcredit")));// 16
					hshValues.put("txt_freetext" + k, correctNull(rs
							.getString("fingrpconcern_freetext1")));// 17
					hshValues.put("txt_freetext1" + k, correctNull(rs
							.getString("fingrpconcern_freetext2")));// 18
					hshValues.put("txt_freetext2" + k, correctNull(rs
							.getString("fingrpconcern_freetext3")));// 19
					hshValues.put("FINGRPCONCERN_FREETEXT4" + k, correctNull(rs
							.getString("FINGRPCONCERN_FREETEXT4")));// 19
				}
			}
			hshValues.put("companyname", strCompanyname);

			double dblAmount = 0.00;
			// Existing Proposal
			String strExiWC = "", strExiWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_existing^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				strExiWC = "";
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add("");
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));

				arrOutRow.add(arrOutCol);

				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strExiWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ dc.format(dblAmount);
				strExiWClimit = strExiWClimit + strExiWC + "@";

			}
			hshValues.put("strExiWClimit", strExiWClimit);
			hshValues.put("arrFACexistingRow", arrOutRow);

			// Present Proposal
			String strPresentWC = "", strPreWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				strPresentWC = "";
				arrOutCol = new ArrayList();
				strFacSno = Helper.correctInt(rs.getString("facility_sno"));
				strVal = correctNull(rs.getString("facility_repaytype"));

				if (strVal.equalsIgnoreCase("E")) {
					strVal = "EMI";
				} else if (strVal.equalsIgnoreCase("NE")) {
					strVal = "Non EMI";
				} else if (strVal.equalsIgnoreCase("OD")) {
					strVal = "On Demand";
				} else if (strVal.equalsIgnoreCase("LC")) {
					strVal = "As Per LC Terms";
				} else if (strVal.equalsIgnoreCase("CO")) {
					strVal = "As Per Contract Terms";
				} else if (strVal.equalsIgnoreCase("BG")) {
					strVal = "As Per BG Rules";
				} else if (strVal.equalsIgnoreCase("DD")) {
					strVal = "On Due Date";
				} else if (strVal.equalsIgnoreCase("PC")) {
					strVal = "From the proceeds of PSC / by realization of bill";
				} else if (strVal.equalsIgnoreCase("PS")) {
					strVal = "By Realization of Export Bills";
				} else if (strVal.equalsIgnoreCase("PR")) {
					strVal = "By Realization of Respective Bills";
				} else if (strVal.equalsIgnoreCase("TG")) {
					strVal = "As per TCBG Rules";
				} else {
					strVal = "";
				}

				arrOutCol.add(correctNull(rs.getString("facility_desc")));
				arrOutCol.add(strVal);
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));
				arrOutCol.add(correctNull(rs.getString("facility_facnature")));

				arrOutRow.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble((String) rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strPresentWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ dc.format(dblAmount);
				strPreWClimit = strPreWClimit + strPresentWC + "@";

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strFacSno);
				while (rs1.next()) {
					arrOutCol = new ArrayList();

					strVal = correctNull(rs1.getString("facility_repaytype"));

					if (strVal.equalsIgnoreCase("E")) {
						strVal = "EMI";
					} else if (strVal.equalsIgnoreCase("NE")) {
						strVal = "Non EMI";
					} else if (strVal.equalsIgnoreCase("OD")) {
						strVal = "On Demand";
					} else if (strVal.equalsIgnoreCase("LC")) {
						strVal = "As Per LC Terms";
					} else if (strVal.equalsIgnoreCase("CO")) {
						strVal = "As Per Contract Terms";
					} else if (strVal.equalsIgnoreCase("BG")) {
						strVal = "As Per BG Rules";
					} else if (strVal.equalsIgnoreCase("DD")) {
						strVal = "On Due Date";
					} else if (strVal.equalsIgnoreCase("PC")) {
						strVal = "From the proceeds of PSC / by realization of bill";
					} else if (strVal.equalsIgnoreCase("PS")) {
						strVal = "By Realization of Export Bills";
					} else if (strVal.equalsIgnoreCase("PR")) {
						strVal = "By Realization of Respective Bills";
					} else if (strVal.equalsIgnoreCase("TG")) {
						strVal = "As per TCBG Rules";
					} else {
						strVal = "";
					}

					arrOutCol.add(correctNull(rs1.getString("facility_desc")));
					arrOutCol.add(strVal);
					arrOutCol.add(Helper.correctDouble(rs1
							.getString("facility_proposed")));
					arrOutCol.add(correctNull(rs1.getString("facility_for")));
					arrOutCol.add(correctNull(rs1
							.getString("facility_facnature")));

					arrOutRow.add(arrOutCol);
					dblAmount = Double.parseDouble(Helper
							.correctDouble((String) rs1
									.getString("facility_proposed")));
					if (strAmountValue.equalsIgnoreCase("C")) {
						dblAmount = dblAmount / 10000000;
					} else if (strAmountValue.equalsIgnoreCase("L")) {
						dblAmount = dblAmount / 100000;
					}
					strPresentWC = correctNull(rs1.getString("com_facdesc"))
							+ " - " + dc.format(dblAmount);
					strPreWClimit = strPreWClimit + strPresentWC + "@";
				}
			}
			hshValues.put("strPreWClimit", strPreWClimit);
			hshValues.put("arrFAConlyRow", arrOutRow);

			int k = 0, j = 0;
			String strtemp = " ", strSecid = "";
			// Existing facilities security details
			ArrayList arrfacwisecol = new ArrayList();
			ArrayList arrfacwisecol1 = new ArrayList();
			ArrayList arrfacwisecollateral = new ArrayList();
			ArrayList arrfacwiseRow = new ArrayList();
			ArrayList arrOutCol1 = new ArrayList();
			ArrayList arrOutRow1 = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_banking^" + strAppNo);
			while (rs1.next()) {
				k = 0;
				j = 0;
				arrOutRow = new ArrayList();
				arrOutRow1 = new ArrayList();
				arrOutCol = new ArrayList();
				String strbnkFac = Helper.correctNull((String) rs1
						.getString("combk_facility"));
				String str_modtype = Helper.correctNull((String) rs1
						.getString("combk_modtype"));
				String[] bankFac = strbnkFac.split("~");
				strtemp = " ";
				strQuery1 = SQLParser
						.getSqlQuery("selExistingFacilitySecDetails^"
								+ strAppNo + "^" + "E^E" + "^" + bankFac[0]
								+ "^" + bankFac[1]);
				rs = DBUtils.executeQuery(strQuery1);
				while (rs.next()) {
					if (correctNull(rs.getString("app_sec_securitytype"))
							.equalsIgnoreCase("1")) {
						if (k == 0) {
							k++;
							arrOutCol = new ArrayList();
							if (str_modtype.equalsIgnoreCase("c")
									|| str_modtype.equalsIgnoreCase("a")) {
								rs2 = DBUtils
										.executeLAPSQuery("sel_facilitycorp_desc^"
												+ bankFac[0]);
								if (rs2.next()) {
									arrOutCol.add(correctNull(rs2
											.getString("com_facdesc")));// 1
																		// //arr0
								} else {
									arrOutCol.add(correctNull(rs2
											.getString("com_facdesc")));// 1
																		// //arr0
								}
							} else if (str_modtype.equalsIgnoreCase("r")) {
								rs2 = DBUtils
										.executeLAPSQuery("sel_retProductDesc^"
												+ bankFac[0]);
								if (rs2.next()) {
									arrOutCol.add(correctNull(rs2
											.getString("com_facdesc")));// 1
																		// //arr0
								} else {
									arrOutCol.add(correctNull(rs2
											.getString("com_facdesc")));// 1
																		// //arr0
								}
							} else {
								arrOutCol.add("");// 1 //arr0
							}

							arrOutCol.add(""); // 2
							arrOutCol.add("");// 3
							arrOutRow.add(arrOutCol);
						}
						arrOutCol = new ArrayList();
						arrOutCol.add(correctNull(Helper.CLOBToString(rs
								.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
						arrOutCol.add(correctNull(rs
								.getString("app_sec_securityvalue"))); // 2
						arrOutCol.add(correctNull(rs
								.getString("cus_sec_valuation_date")));// 3
						arrOutRow.add(arrOutCol);
					}
				}
				if (arrOutRow.size() > 0)
					arrfacwisecol.add(arrOutRow);
			}

			arrfacwisecol = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_SECUTYPE='E' and APP_SEC_LOANTYPE='E' ^A^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {

				arrOutRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				strQuery1 = SQLParser
						.getSqlQuery("seluniqueprimarysec_facilitydetails^A^"
								+ correctNull(rs.getString("secid")) + "^"
								+ strAppOldId + "^" + strAppNo + "^A^"
								+ correctNull(rs.getString("secid")) + "^"
								+ strAppOldId + "^" + strAppNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs1.getString("facility_catdesc")));// 0
					arrOutCol.add(correctNull(rs1
							.getString("facility_proposed")));// 1
					arrOutCol.add(correctNull(rs.getString("secdescription")));// 2
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 3
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 4
					arrOutRow.add(arrOutCol);
				}

				if (arrOutRow.size() > 0) {
					arrfacwisecol.add(arrOutRow);
				}

			}
			hshValues.put("arrExistingSecfacwise", arrfacwisecol);

			if (rs != null)
				rs.close();
			arrOutRow1 = new ArrayList();
			strQuery1 = SQLParser
					.getSqlQuery("secExisFacilityDetailsView_existing^"
							+ strAppNo + "^" + strAppNo + "^" + "E"
							+ "^ and APP_SEC_ATTACHED='A'");
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				arrOutCol1 = new ArrayList();
				arrOutCol1.add(correctNull(Helper.CLOBToString(rs
						.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
				arrOutCol1
						.add(correctNull(rs.getString("cus_sec_netsecurity"))); // 2
				arrOutCol1.add(correctNull(rs
						.getString("cus_sec_valuation_date")));// 3
				arrOutRow1.add(arrOutCol1);
			}

			hshValues.put("arrcollateralforEF", arrOutRow1);

			ArrayList arrproposed = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_LOANTYPE='P' and  a.APP_SEC_SECUTYPE='F' ^A^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {

				arrOutRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				strQuery1 = SQLParser
						.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P' and  a.APP_SEC_SECUTYPE='F' ^A^"
								+ correctNull(rs.getString("secid"))
								+ "^"
								+ strAppNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs1.getString("facility_catdesc")));// 0
					arrOutCol.add(correctNull(rs1
							.getString("facility_proposed")));// 1
					arrOutCol.add(correctNull(rs.getString("secdescription")));// 2
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 3
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 4
					arrOutRow.add(arrOutCol);
				}

				if (arrOutRow.size() > 0) {
					arrproposed.add(arrOutRow);
				}

			}
			ArrayList arrOutColPro = new ArrayList();
			ArrayList arrOutRowPro = new ArrayList();
			strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"
					+ strAppNo + "^" + strAppNo + "^" + "P"
					+ "^ AND APP_SEC_SECUTYPE='F' and APP_SEC_ATTACHED='A'");
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				arrOutCol1 = new ArrayList();
				arrOutCol1.add(correctNull(Helper.CLOBToString(rs
						.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
				arrOutCol1
						.add(correctNull(rs.getString("cus_sec_netsecurity"))); // 2
				arrOutCol1.add(correctNull(rs
						.getString("cus_sec_valuation_date")));// 3
				arrOutRow1.add(arrOutCol1);
			}
			hshValues.put("arrproposedFacility", arrproposed);
			hshValues.put("arrproposedCollateralSec", arrOutRow1);

			// proposed facilities details
			arrfacwisecol = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_LOANTYPE='P'^A^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {

				arrOutRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				strQuery1 = SQLParser
						.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P'^A^"
								+ correctNull(rs.getString("secid"))
								+ "^"
								+ strAppNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs1.getString("facility_catdesc")));// 0
					arrOutCol.add(correctNull(rs1
							.getString("facility_proposed")));// 1
					arrOutCol.add(correctNull(rs.getString("secdescription")));// 2
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 3
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 4
					arrOutRow.add(arrOutCol);
				}

				if (arrOutRow.size() > 0) {
					arrfacwisecol.add(arrOutRow);
				}

			}

			hshValues.put("arrproposedSecfacwise", arrfacwisecol);

			arrOutColPro = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"
					+ strAppNo + "^" + strAppNo + "^" + "P"
					+ "^and app_sec_attached='A' ");
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				arrOutCol1 = new ArrayList();
				arrOutCol1.add(correctNull(Helper.CLOBToString(rs
						.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
				arrOutCol1
						.add(correctNull(rs.getString("cus_sec_netsecurity"))); // 2
				arrOutCol1.add(correctNull(rs
						.getString("cus_sec_valuation_date")));// 3
				arrOutColPro.add(arrOutCol1);
			}
			hshValues.put("arrRowCollSec", arrOutColPro);

			HashMap hshsecdet = new HashMap();
			HashMap hshsecdetFrom = new HashMap();
			hshsecdetFrom.put("valuesin", strAmountValue);
			hshsecdetFrom.put("appno", strAppNo);
			hshsecdetFrom.put("hidapplicantid", strAppId);
			hshsecdet = new SecurityMasterBean()
					.getCollateralSecurityDisplaynew(hshsecdetFrom);
			hshValues.put("hshsecdet", hshsecdet);

			// String pgType =
			// Helper.correctNull((String)hshValues.get("pgType"));
			// boolean finacial_flag=false;
			//			
			// if(strLoanType.equalsIgnoreCase("a"))
			// {
			// if(strFinancialrequired.equalsIgnoreCase("Y"))
			// {
			// finacial_flag=true;
			//							
			// }
			//				
			// }
			// else
			// {
			// finacial_flag=true;
			// }
			// if(pgType.equalsIgnoreCase("Shortnte"))
			// {
			// if(finacial_flag)
			// {
			// hshQueryValues = new HashMap();
			// hshQueryValues.put("appno",strAppNo);
			// hshQueryValues.put("pageval","LIABILITIES");
			// hshQueryValues.put("printtype","Y");
			// hshQueryValues=financial.getData(hshQueryValues);
			// hshValues.put("hshReqValues",hshQueryValues);
			//				
			// hshQueryValues = new HashMap();
			// hshQueryValues.put("appno",strAppNo);
			// hshQueryValues.put("pageval","ASSETS");
			// hshQueryValues.put("printtype","Y");
			// hshQueryValues=financial.getData(hshQueryValues);
			// hshValues.put("hshReqValues1",hshQueryValues);
			//		
			// hshQueryValues = new HashMap();
			// hshQueryValues.put("appno",strAppNo);
			// hshQueryValues.put("pageval","PROFIT AND LOSS ACCOUNT");
			// hshQueryValues.put("printtype","Y");
			// hshQueryValues=financial.getData(hshQueryValues);
			// hshQueryValues.put("page","PROFIT AND LOSS ACCOUNT");
			// hshValues.put("hshReqValues2",hshQueryValues);
			//				
			//		
			// hshQueryValues = new HashMap();
			// hshQueryValues.put("appno",strAppNo);
			// hshQueryValues.put("pagefrom","RA1");
			// hshQueryValues.put("pageType","AN4");
			// hshQueryValues=financial.getDataRatio(hshQueryValues);
			// hshQueryValues.put("page","CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
			// hshValues.put("hshReqValues3",hshQueryValues);
			//				
			// hshQueryValues = new HashMap();
			// hshQueryValues.put("appno",strAppNo);
			// hshQueryValues.put("pagefrom","RA2");
			// hshQueryValues.put("pageType","AN4");
			// hshQueryValues=financial.getDataRatio(hshQueryValues);
			// hshQueryValues.put("page","PROFITABILITY/TURN OVER/ OPERATING");
			// hshValues.put("hshReqValues4",hshQueryValues);
			// }
			// }
			// String strFinvaluesIn="";
			// int strFinid=0;
			// if(rs!=null){rs.close();}
			// rs = DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			// if(rs.next())
			// {
			// strFinid =
			// Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			// }
			// if(rs!=null){rs.close();}
			//			
			// rs = DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			// if(rs.next())
			// {
			// strValuesIn = correctNull(rs.getString("fin_valuesarein"));
			// }
			// hshValues.put("strFinvalues", strValuesIn);

			// Brief Background
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
					+ strAppNo);
			if (rs.next()) {
				hshValues.put("com_partyfileno", correctNull(rs
						.getString("com_partyfileno")));
				hshValues
						.put("com_roho", correctNull(rs.getString("com_roho")));
				hshValues.put("com_processingfee", correctNull(rs
						.getString("com_processingfee")));

				strVal = correctNull(rs.getString("com_submittedto"));
				if (!strVal.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"
							+ "21" + "^" + strVal);
					if (rs1.next()) {
						strVal = Helper.correctNull(rs1
								.getString("stat_data_desc1"));
					} else {
						strVal = "";
					}
				} else {
					strVal = "";
				}
				hshValues.put("com_submittedto", strVal);

				strsancdept = correctNull(rs.getString("com_sancdept"));
				hshValues.put("com_sancdeptcode", strsancdept);
				if (strsancdept.equalsIgnoreCase("011")) {
					hshValues.put("com_sancdept", "Central Processing Centre");
				} else if (strsancdept.equalsIgnoreCase("008")) {
					hshValues.put("com_sancdept", "Credit A ");
				} else if (strsancdept.equalsIgnoreCase("010")) {
					hshValues.put("com_sancdept", "Credit B ");
				} else if (strsancdept.equalsIgnoreCase("007")) {
					hshValues.put("com_sancdept", "Branch");
				} else if (strsancdept.equalsIgnoreCase("006")) {
					hshValues.put("com_sancdept", "Regional Office");
				}

				if (rs1 != null) {
					rs1.close();
				}
				if (!strsancdept.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "26" + "^" + strsancdept);
					if (rs1.next()) {
						hshValues.put("strSanctiondept", Helper.correctNull(rs1
								.getString("cbs_static_data_desc")));
					}
				}
				if (rs1 != null) {
					rs1.close();
				}

				hshValues.put("com_sancbranchcode", correctNull(rs
						.getString("com_sancbranch")));
				String strSancBranch = correctNull(rs
						.getString("com_sancbranch"));
				if (strSancBranch.equalsIgnoreCase("RFD")) {
					hshValues
							.put("com_sancbranch", "Retail Finance Department");
				} else if (strSancBranch.equalsIgnoreCase("MCFD")) {
					hshValues.put("com_sancbranch",
							"MID CORPORATE FINANCE DIVISION");
				} else if (strSancBranch.equalsIgnoreCase("ASG")) {
					hshValues
							.put("com_sancbranch", "AGRICULTURE SUPPORT GROUP");
				} else if (strSancBranch.equalsIgnoreCase("LCFD")) {
					hshValues.put("com_sancbranch", "LCFD");
				} else if (strSancBranch.equalsIgnoreCase("FS")) {
					hshValues.put("com_sancbranch", "FOREX SUPPORT");
				}
			}

			// Region
			if (rs != null) {
				rs.close();
			}
			String livedate = ApplicationParams.getStrCLPHdate();
			String postsanctionflag = "";
			String applicationStatus = "";
			// check when application is created
			String appcreatedate = "";

			strQuery = SQLParser.getSqlQuery("getcreatedate^" + strAppNo);
			rs5 = DBUtils.executeQuery(strQuery);
			if (rs5.next()) {

				appcreatedate = rs5.getString("createddate");
				applicationStatus = rs5.getString("APP_STATUS");
			}
			System.out.println("Application created date-->" + appcreatedate);
			System.out.println("Sanction  Live Date-->" + livedate);
			if (!livedate.equalsIgnoreCase("")
					&& !appcreatedate.equalsIgnoreCase("")) {
				String Pattern = "dd/MM/yyyy";
				DateFormat df = new SimpleDateFormat(Pattern);
				Date appcreationdate = df.parse(appcreatedate);
				Date postsanclivedate = df.parse(livedate);

				if (appcreationdate.before(postsanclivedate)
						&& applicationStatus.equalsIgnoreCase("pa")) {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranch^"
							+ strAppNo);
				} else {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranchnewchk^"
							+ strAppNo);
				}
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
				strAppOrgCode = Helper.correctNull(rs.getString("org_code"));
				hshValues.put("strLodgedDate", correctNull(rs
						.getString("app_lodgeddate")));
				hshValues.put("strDelodgedDate", correctNull(rs
						.getString("app_delodgeddate")));

				if (Helper.correctNull(rs.getString("APP_ORGLEVEL"))
						.equalsIgnoreCase("C")
						|| Helper.correctNull(rs.getString("APP_ORGLEVEL"))
								.equalsIgnoreCase("D")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_pertainingbr^"
							+ strAppNo);
					if (rs.next()) {
						hshValues.put("org_name", correctNull(rs
								.getString("org_name")));
					}
				}
			}

			if (!strAppOrgCode.equals("")) {
				strAppOrgCode = strAppOrgCode.substring(0, 6) + "%";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_region^" + strAppOrgCode);
			if (rs.next()) {
				hshValues.put("Reg_org_name", correctNull(rs
						.getString("org_name")));
			}
			// Gist of Proposal
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_comments^gist^" + strAppNo);
			if (rs.next()) {
				hshValues.put("GistOfProp", correctNull(Helper.CLOBToString(rs
						.getClob(("com_comments")))));
			}
			// subject & Recommendations
			String hshName = "OTHERPARAMS";
			String hshName1 = hshName;
			String strPage = "otherparams";
			String strPage1 = strPage;
			int ji = 6;
			for (int loop = 0; loop < ji; loop++) {
				if (loop > 0) {
					hshName = hshName1 + loop;
					strPage = strPage1 + loop;
				}
				strQuery = SQLParser.getSqlQuery("sel_comments^" + strPage
						+ "^" + strAppNo);

				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put(hshName, correctNull(Helper.CLOBToString(rs
							.getClob("COM_COMMENTS"))));
				}
			}

			if (rs != null) {
				rs.close();
			}
			String fincommcheck = "N";
			ArrayList arrFinRow = new ArrayList();
			ArrayList arrCol = new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_com_comments^FPComments^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				String finsno = Helper.correctNull((String) rs
						.getString("com_sno"));
				if (finsno.equalsIgnoreCase("1")) {
					arrCol.add("Inter Locking of Funds");
				} else if (finsno.equalsIgnoreCase("2")) {
					arrCol.add("Sales & Profits");
				} else if (finsno.equalsIgnoreCase("3")) {
					arrCol.add("Networth");
				} else if (finsno.equalsIgnoreCase("4")) {
					arrCol.add("Current Ratio / Net Working capital");
				} else if (finsno.equalsIgnoreCase("5")) {
					arrCol.add("TOL/TNW");
				} else if (finsno.equalsIgnoreCase("6")) {
					arrCol.add("Debt Equity");
				} else if (finsno.equalsIgnoreCase("7")) {
					arrCol.add("Debtors Turnover");
				} else if (finsno.equalsIgnoreCase("8")) {
					arrCol
							.add("Important notes from Directors/auditors report");
				} else if (finsno.equalsIgnoreCase("9")) {
					arrCol.add("Profitability ratio");
				} else {
					arrCol.add("");
				}
				arrCol.add(Helper.correctNull(Helper.CLOBToString(rs
						.getClob(("com_comments")))));
				hshValues.put("fincommcheck", "Y");
				arrFinRow.add(arrCol);
			}
			hshValues.put("arrfinComments", arrFinRow);

			// Recommendations
			String strType = "", strFacilitysel = "", strFacility = "", StrIntType = "", strFacilityGroup = "";
			String strInterestType = "", strInterestRate = "", strWhetherBRAvail = "", strHoliday = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selPostsanctionedFac^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				strVal = "";
				strType = "";
				strFacilityGroup = Helper.correctInt(rs
						.getString("facility_sno"));
				strVal1 = Helper.correctInt(rs.getString("facility_group"));
				strVal2 = Helper.correctInt(rs.getString("facility_repaytype"));

				dblBaseRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_baserate")));
				dblInterestRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_sancinterest")));
				strInterestType = Helper.correctNull((String) rs
						.getString("facility_intsubtype"));

				if (strInterestType.equalsIgnoreCase("BR")) {
					dblDiffIntRate = dblInterestRate - dblBaseRate;
					strInterestRate = "BR + " + dc.format(dblDiffIntRate)
							+ "% p.a presently at "
							+ dc.format(dblInterestRate) + "% p.a";
					strWhetherBRAvail = "Y";
				} else {
					strInterestRate = Helper.correctDouble(rs
							.getString("facility_interest"));
				}

				if (strVal1.equals("0")) {
					strVal1 = "Main-Limit";
					strFacility = correctNull(rs.getString("facility_desc"));
				} else {
					strVal1 = "Sub-Limit";

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("sel_sublimitVal^"
									+ strAppNo
									+ "^"
									+ Helper.correctInt(rs
											.getString("facility_group")));

					if (rs1.next()) {
						strVal1 = strVal1
								+ " -> "
								+ correctNull(rs1.getString("com_facdesc"))
										.toUpperCase();
					}

					strType = "1";
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
						+ Helper.correctInt(rs.getString("facility_sel_type")));
				if (rs1.next()) {
					strFacilitysel = Helper.correctNull(rs1
							.getString("STAT_DATA_DESC1"));
				}

				if (strVal2.equalsIgnoreCase("E")) {
					strVal2 = "EMI";
				} else if (strVal2.equalsIgnoreCase("NE")) {
					strVal2 = "Non EMI";
				} else if (strVal2.equalsIgnoreCase("OD")) {
					strVal2 = "On Demand";
				} else if (strVal2.equalsIgnoreCase("LC")) {
					strVal2 = "As Per LC Terms";
				} else if (strVal2.equalsIgnoreCase("CO")) {
					strVal2 = "As Per Contract Terms";
				} else if (strVal2.equalsIgnoreCase("BG")) {
					strVal2 = "As Per BG Rules";
				} else if (strVal2.equalsIgnoreCase("DD")) {
					strVal2 = "On Due Date";
				} else if (strVal2.equalsIgnoreCase("PC")) {
					strVal2 = "From the proceeds of PSC / by realization of bill";
				} else if (strVal2.equalsIgnoreCase("PS")) {
					strVal2 = "By Realization of Export Bills";
				} else if (strVal2.equalsIgnoreCase("PR")) {
					strVal2 = "By Realization of Respective Bills";
				} else if (strVal2.equalsIgnoreCase("TG")) {
					strVal2 = "As per TCBG Rules";
				} else {
					strVal2 = "";
				}

				if (strType.equalsIgnoreCase("1")) {
					arrOutCol.add(correctNull(rs.getString("facility_desc")));
				} else {
					arrOutCol.add(correctNull(rs.getString("facility_desc")));
				}
				if (correctNull(rs.getString("com_headfac")).equalsIgnoreCase(
						"1")) {
					double dblAmt = Double.parseDouble(Helper.correctDouble(rs
							.getString("facility_sancamt")));
					dblAmt = dblAmt / 50;
					arrOutCol.add(String.valueOf(dblAmt));
				} else {
					arrOutCol.add(Helper.correctDouble(rs
							.getString("facility_sancamt")));// 1
				}
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_existing")));// 2
				arrOutCol.add(strInterestRate);// 3
				arrOutCol.add(Helper.correctInt(rs.getString("facility_sno")));// 4
				arrOutCol.add(strVal1);// 5
				arrOutCol.add(Helper
						.correctInt(rs.getString("facility_months")));// 6
				arrOutCol.add(correctNull(rs.getString("facility_for")));// 7
				arrOutCol.add(strFacilitysel);// 8
				arrOutCol.add(strVal2);// 9
				arrOutCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("facility_margin"))));// 10
				strHoliday = Helper.correctInt(rs
						.getString("facility_holidayperiod"));
				if (strHoliday.equalsIgnoreCase("0"))
					arrOutCol.add("Not Applicable");// 11
				else
					arrOutCol.add(Helper.correctInt(rs
							.getString("facility_holidayperiod")));
				arrOutCol.add(strInterestType);// 12
				arrOutCol.add(correctNull(rs.getString("facility_duedate"))); // 13
				String strComments = "";
				String strFacilitySno = Helper.correctNull(rs
						.getString("facility_sno"));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate^"
								+ strFacilitySno + "^" + strAppNo);
				if (rs1.next()) {
					strComments = correctNull(Helper.CLOBToString(rs1
							.getClob("COM_COMMENTS")));
					if (!strComments.equalsIgnoreCase("")) {
						arrOutCol.add(correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS"))));// 14
					}
				} else {
					arrOutCol.add("");// 14
				}
				arrOutCol.add(Helper.correctNull(rs
						.getString("facility_duedate"))); // 15
				StrIntType = Helper.correctNull(rs
						.getString("facility_inttype"));
				if (StrIntType.equalsIgnoreCase("flo")) {
					StrIntType = "Floating";
				} else if (StrIntType.equalsIgnoreCase("fix")) {
					StrIntType = "Fixed";
				}
				arrOutCol.add(StrIntType);// 16
				arrOutRow.add(arrOutCol);

			}

			hshValues.put("arrRecommRow", arrOutRow);
			hshValues.put("strWhetherBRAvail", strWhetherBRAvail);

			arrfacwisecol = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_LOANTYPE='P' ^D^"
							+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {

				arrOutRow = new ArrayList();
				if (rs1 != null)
					rs1.close();
				strQuery1 = SQLParser
						.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P'  ^D^"
								+ correctNull(rs.getString("secid"))
								+ "^"
								+ strAppNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs1.getString("facility_catdesc")));// 0
					arrOutCol.add(correctNull(rs1
							.getString("facility_proposed")));// 1
					arrOutCol.add(correctNull(rs.getString("secdescription")));// 2
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 3
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 4
					arrOutRow.add(arrOutCol);
				}

				if (arrOutRow.size() > 0) {
					arrfacwisecol.add(arrOutRow);
				}

			}

			hshValues.put("arrReleasedSecPrime", arrfacwisecol);

			arrOutColPro = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"
					+ strAppNo + "^" + strAppNo + "^" + "P"
					+ "^and app_sec_attached='D' ");
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				arrOutCol1 = new ArrayList();
				arrOutCol1.add(correctNull(Helper.CLOBToString(rs
						.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
				arrOutCol1
						.add(correctNull(rs.getString("cus_sec_netsecurity"))); // 2
				arrOutCol1.add(correctNull(rs
						.getString("cus_sec_valuation_date")));// 3
				arrOutColPro.add(arrOutCol1);
			}
			hshValues.put("arrReleasedSecCollateral", arrOutColPro);

			String strGuarId = "";
			arrOutColPro = new ArrayList();
			String strEmpstatus = "";
			if (rs != null) {
				rs.close();
			}
			strQuery1 = SQLParser.getSqlQuery("selpromotorslist^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			while (rs.next()) {
				if (strGuarId.equalsIgnoreCase("")) {
					strGuarId = correctNull(rs.getString("com_oldlapsid"));
				} else {
					if (strGuarId.contains(correctNull(rs
							.getString("com_oldlapsid")))) {
						continue;
					} else {
						strGuarId = strGuarId + ","
								+ correctNull(rs.getString("com_oldlapsid"));
					}
				}
				arrOutCol1 = new ArrayList();
				arrOutCol1.add(Helper.changetoTitlecase(correctNull(rs
						.getString("com_compdtfname"))));// 0
				arrOutCol1.add(correctNull(rs.getString("age"))); // 1
				strEmpstatus = correctNull(rs.getString("perapp_employment"));
				if (strEmpstatus.equals("1") || strEmpstatus.equals("9"))
					arrOutCol1.add(Helper.convertSetupToApplicationValues(
							strValuesIn, Double.parseDouble(Helper
									.correctDouble(rs
											.getString("perinc_takehome")))));// 2
				else
					arrOutCol1
							.add(Helper
									.convertSetupToApplicationValues(
											strValuesIn,
											Double
													.parseDouble(Helper
															.correctDouble(rs
																	.getString("perinc_year1_income")))));// 2
				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils
						.executeLAPSQuery("sel_CBSStaticDataPassingCode^32^"
								+ Helper.correctInt(rs
										.getString("com_comprelationship")));
				if (rs1.next()) {
					arrOutCol1.add(Helper.correctNull(rs1
							.getString("CBS_STATIC_DATA_DESC")));// 3
				} else {
					arrOutCol1.add("");// 3
				}

				arrOutCol1.add(Helper.convertSetupToApplicationValues(
						strValuesIn, Double.parseDouble(Helper.correctDouble(rs
								.getString("perapp_networth")))));// 4
				arrOutCol1
						.add(correctNull(rs.getString("perapp_networthason")));// 5
				arrOutCol1.add(correctNull(rs.getString("com_compdttype")));// 6
				arrOutCol1.add(Helper.correctNull(rs
						.getString("PERINC_YEAREND1")));// 7
				arrOutCol1.add(Helper.correctNull(rs
						.getString("com_compborrname")));// 8
				arrOutColPro.add(arrOutCol1);
			}
			hshValues.put("arrGuaRow1", arrOutColPro);

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			if (rs.next()) {
				strVal = correctNull(rs.getString("indinfo_bankarrangement"));
				hshValues.put("info_bankArng", Helper.correctInt((String) rs
						.getString("indinfo_bankarrangement")));

				if (strVal.equals("2")) {
					strVal = "Multiple";
				} else if (strVal.equals("3")) {
					strVal = "Consortium";
				} else {
					strVal = "Sole";
				}
				hshValues.put("presentBankArng", strVal);
			}

			BankAppBean bankapp = new BankAppBean();

			hshReqVal = new HashMap();
			hshReqVal.put("hidAppNo", strAppNo);
			hshReqVal.put("PageType", "PROPOSAL");
			hshReqVal = bankapp.getConsortiumDetails(hshReqVal);
			hshReqVal.put("page", "PROCESS NOTE");
			hshValues.put("PROPOSAL", hshReqVal);

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^" + strAppNo
					+ "^" + "existcreditfac");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strExistingFacAbove", Helper.CLOBToString(rs
						.getClob("cmt_comments")));
				hshValues.put("strExistingFacBelow", Helper.CLOBToString(rs
						.getClob("cmt_intercomments")));
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
					+ "^bankargmnt");
			if (rs.next()) {
				hshValues.put("fin_commentsbankargmnt", Helper.CLOBToString(rs
						.getClob("fin_comments")));
			}

			ComAssetsLiabBean comassestsliab = new ComAssetsLiabBean();
			hshValues.put("strAppno", strAppNo);
			hshReqVal = comassestsliab.getFinangrpconcern(hshValues);
			hshValues.put("hshFinlValues", hshReqVal);

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion1^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm1", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}

			// External Rating Comments
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppId
					+ "^cusratingnew");
			if (rs.next()) {
				hshValues.put("ExternalRatingComments", correctNull(Helper
						.CLOBToString(rs.getClob(("cmt_comments")))));
				hshValues.put("ExternalRatingComments1", correctNull(Helper
						.CLOBToString(rs.getClob(("cmt_intercomments")))));
			}

			// Assets Classification
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_combankingdetails^" + strAppNo);
			if (rs.next()) {
				String strAssetClassification = correctNull(rs
						.getString("com_assetclass"));
				if (strAssetClassification.equalsIgnoreCase("S")) {
					strAssetClassification = "Standard";
				} else if (strAssetClassification.equalsIgnoreCase("SS")) {
					strAssetClassification = "Sub Standard";
				} else if (strAssetClassification.equalsIgnoreCase("D")) {
					strAssetClassification = "Doubtful";
				} else if (strAssetClassification.equalsIgnoreCase("L")) {
					strAssetClassification = "Loss";
				} else {
					strAssetClassification = "NIL";
				}

				hshValues.put("strAssetClassification", strAssetClassification);
				hshValues.put("com_asscladate", correctNull(rs
						.getString("com_asscladate")));
			}

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_seccomments^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COMSEC_APPCOVERAGE", Helper.correctNull(rs
						.getString("COMSEC_APPCOVERAGE")));
				hshValues.put("COMSEC_APPCOMMENTS", correctNull(Helper
						.CLOBToString(rs.getClob("COMSEC_APPCOMMENTS"))));
				hshValues.put("COMSEC_GROUPCOVERAGE", Helper.correctNull(rs
						.getString("COMSEC_GROUPCOVERAGE")));
				hshValues.put("COMSEC_GROUPCOMMENTS", correctNull(Helper
						.CLOBToString(rs.getClob("COMSEC_GROUPCOMMENTS"))));
				hshValues.put("strProposedSecurity", Helper.correctNull(rs
						.getString("COMSEC_ADDITIONALSECCOVERAGE")));
				hshValues.put("strProposedSecurityComments", correctNull(Helper
						.CLOBToString(rs
								.getClob("COMSEC_ADDITIONALSECCOMMENTS"))));
				hshValues.put("COMSEC_SECTYPE", Helper.correctNull(rs
						.getString("COMSEC_SECTYPE")));
				hshValues.put("COMSEC_FACGROUPCONCERN", Helper.correctNull(rs
						.getString("COMSEC_FACGROUPCONCERN")));
				hshValues.put("COMSEC_FACGROUPCONCERNCOMMENTS",
						correctNull(Helper.CLOBToString(rs
								.getClob("COMSEC_FACGROUPCONCERNCOMMENTS"))));
			}

			String strReviewDate = "", strModifiedTerms = "";
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_facilityreviewdate^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (strReviewDate.equalsIgnoreCase(""))
					strReviewDate = Helper.correctNull(rs
							.getString("facility_reviewdate"));
				else {
					if (!strReviewDate.contains(Helper.correctNull(rs
							.getString("facility_reviewdate"))))
						strReviewDate = strReviewDate
								+ ","
								+ Helper.correctNull(rs
										.getString("facility_reviewdate"));
				}
			}

			hshValues.put("strReviewDate", strReviewDate);

			ArrayList arrRownew = new ArrayList();
			ArrayList arrColnew = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_postsanctionfacilitydet^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrColnew = new ArrayList();
				arrColnew.add(Helper.correctNull(rs.getString("facility_sno")));
				arrColnew.add(Helper.correctNull(rs
						.getString("stat_data_desc1")));
				arrColnew.add(Helper.correctNull(rs
						.getString("ps_modify_terms")));
				arrRownew.add(arrColnew);

				strModifiedTerms = "@"
						+ Helper.correctNull(rs.getString("ps_modify_terms"));
			}

			hshValues.put("strModifiedTerms", strModifiedTerms);
			hshValues.put("arrPostSancTerms", arrRownew);
			hshValues.put("username", correctNull((String) hshValues
					.get("strOrgName")));

			if (rs != null) {
				rs.close();
			}
			if (rs1 != null) {
				rs1.close();
			}
			String strnewapplicantid = "";
			rs1 = DBUtils.executeLAPSQuery("UniqAppidList^" + strOldAppId);
			if (rs1.next()) {
				strnewapplicantid = Helper.correctInt(rs1
						.getString("perapp_id"));
			}
			if (rs1 != null) {
				rs1.close();
			}
			// Customer Profile
			hshValues.put("strnewapplicantid", strnewapplicantid);
			log.info("strnewapplicantid=====>>>" + strnewapplicantid);
			rs = DBUtils.executeLAPSQuery("sel_common_customer^"
					+ strnewapplicantid);
			if (rs.next()) {
				hshValues.put("perapp_title", Helper.changetoTitlecase(Helper
						.correctNull(rs.getString("perapp_title"))));
				hshValues.put("perapp_name", Helper.correctNull(rs
						.getString("perapp_fname")));
				hshValues.put("cominfo_commencement_date", correctNull(rs
						.getString("cominfo_commencement_date")));
				hshValues.put("cominfo_incorporation_date", correctNull(rs
						.getString("cominfo_incorporation_date")));
				hshValues.put("perapp_dob", correctNull(rs
						.getString("perapp_dob")));
				hshValues.put("perapp_banksince", correctNull(rs
						.getString("perapp_banksince")));
				hshValues.put("COMINFO_GSTINREG", correctNull(rs
						.getString("COMINFO_GSTINREG")));
				hshValues.put("PERAPP_MSE_REGNO", correctNull(rs
						.getString("PERAPP_MSE_REGNO")));
				hshValues.put("COMINFO_GSTIN", correctNull(rs
						.getString("COMINFO_GSTIN")));
				hshValues.put("PERAPP_UDYOG_AADHAR", correctNull(rs
						.getString("PERAPP_UDYOG_AADHAR")));
				hshValues.put("perapp_panno", Helper.correctNull(rs
						.getString("perapp_panno")));
				hshValues.put("cominfo_cin", Helper.correctNull(rs
						.getString("cominfo_cin")));
				hshValues.put("PERAPP_LEGAL_ENTITYID", Helper.correctNull(rs
						.getString("PERAPP_LEGAL_ENTITYID")));
				hshValues.put("PERAPP_LEGAL_EXPIRYDATE", Helper.correctNull(rs
						.getString("PERAPP_LEGAL_EXPIRYDATE")));
				hshValues.put("COMINFO_IEC", Helper.correctNull(rs
						.getString("COMINFO_IEC")));
				hshValues.put("cominfo_employees_asondate",
						Helper.correctNull(rs
								.getString("cominfo_employees_asondate")));
				hshValues.put("cominfo_total_employees", Helper.correctNull(rs
						.getString("cominfo_total_employees")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_CBSStaticDataPassingCode^2^"
								+ correctNull(rs
										.getString("perapp_constitution")));
				if (rs1.next()) {
					// if(correctNull((String)rs1.getString("cbs_static_data_code")).trim().equals(correctNull(rs.getString("perapp_constitution")).trim()))
					// {
					hshValues.put("cbs_static_data_desc", correctNull(rs1
							.getString("cbs_static_data_desc")));
					// }
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("selstatdatabyiddesc^110^"
								+ correctNull(rs
										.getString("perapp_relation_bankstaff")));
				if (rs1.next()) {
					// if(correctNull((String)rs1.getString("stat_data_desc")).trim().equals(correctNull(rs.getString("perapp_relation_bankstaff")).trim()))
					// {
					hshValues.put("stat_data_desc1", Helper.correctNull(rs1
							.getString("stat_data_desc1")));
					// }
				}
				hshValues.put("PERAPP_UDYAM_REGNO", Helper
						.correctNull((String) rs
								.getString("PERAPP_UDYAM_REGNO")));
				hshValues.put("PERAPP_SALES_TURNOVER", Helper
						.correctNull((String) rs
								.getString("PERAPP_SALES_TURNOVER")));
				hshValues.put("PERAPP_SALES_TURNOVER_DATE", Helper
						.correctNull((String) rs
								.getString("PERAPP_SALES_TURNOVER_DATE")));
				hshValues.put("PERAPP_CRITERIA_SALES_TURNOVER", Helper
						.correctNull((String) rs
								.getString("PERAPP_CRITERIA_SALES_TURNOVER")));
				rs2 = DBUtils.executeLAPSQuery("selmiscust^243^"
						+ Helper.correctNull((String) rs
								.getString("PERAPP_CRITERIA_SALES_TURNOVER")));
				if (rs2.next()) {
					hshValues.put("PERAPP_CRITERIA_SALES_TURNOVER", Helper
							.correctNull(rs2.getString("stat_data_desc1")));

				}
				hshValues.put("PERAPP_CERTIFICATION_DATE", Helper
						.correctNull((String) rs
								.getString("PERAPP_CERTIFICATION_DATE")));
				rs2 = DBUtils.executeLAPSQuery("selmiscust^249^"
						+ Helper.correctNull((String) rs
								.getString("PERAPP_MSME_CLASSIFICATION")));
				if (rs2.next()) {
					hshValues.put("PERAPP_MSME_CLASSIFICATION", Helper
							.correctNull(rs2.getString("stat_data_desc1")));

				}
				rs2 = DBUtils.executeLAPSQuery("selmiscust^109^"
						+ Helper.correctNull((String) rs
								.getString("perapp_status")));
				if (rs2.next()) {
					hshValues.put("perapp_status", Helper.correctNull(rs2
							.getString("stat_data_desc1")));

				}
				hshValues.put("perapp_relat_staffid", Helper
						.correctNull((String) rs
								.getString("perapp_relat_staffid")));
				rs3 = DBUtils.executeLAPSQuery("selmiscust^110^"
						+ Helper.correctNull((String) rs
								.getString("perapp_relation_bankstaff")));
				if (rs3.next()) {
					hshValues.put("perapp_relation_bankstaff", Helper
							.correctNull(rs3.getString("stat_data_desc1")));

				}
				if (Helper.correctNull(
						(String) rs.getString("perapp_relation_bankstaff"))
						.equalsIgnoreCase("005")
						|| Helper
								.correctNull(
										(String) rs
												.getString("perapp_relation_bankstaff"))
								.equalsIgnoreCase("006")) {
					hshValues.put("perapp_relation_staffname", Helper
							.correctNull((String) rs
									.getString("perapp_relation_staffname")));

				} else {
					rs4 = DBUtils.executeLAPSQuery("selmiscust^153^"
							+ Helper.correctNull((String) rs
									.getString("perapp_relation_staffname")));
					if (rs4.next()) {
						hshValues.put("perapp_relation_staffname", Helper
								.correctNull(rs4.getString("stat_data_desc1")));

					}
				}
				rs1 = DBUtils.executeLAPSQuery("selmiscust^111^"
						+ Helper.correctNull((String) rs
								.getString("perapp_blood_relation")));
				if (rs1.next()) {
					hshValues.put("perapp_blood_relation", Helper
							.correctNull(rs1.getString("stat_data_desc1")));

				}
				hshValues.put("PEREMP_ID", Helper.correctNull((String) rs
						.getString("PEREMP_ID")));
				hshValues
						.put("PEREMP_ESTABLISH", Helper.correctNull((String) rs
								.getString("PEREMP_ESTABLISH")));
				hshValues.put("peremp_department",
						Helper.correctNull((String) rs
								.getString("peremp_department")));
				hshValues.put("peremp_retdate", Helper.correctNull((String) rs
						.getString("peremp_retdate")));
				hshValues.put("perapp_relation_bankstaff_val", Helper
						.correctNull((String) rs
								.getString("perapp_relation_bankstaff")));
				hshValues
						.put("indinfo_is_staff", Helper.correctNull((String) rs
								.getString("indinfo_is_staff")));
				hshValues
						.put("PERAPP_INVOCDATE", Helper.correctNull((String) rs
								.getString("PERAPP_INVOCDATE")));

				hshValues.put("indinfo_dateof_joining", Helper
						.correctNull((String) rs
								.getString("indinfo_dateof_joining")));
				hshValues
						.put("indinfo_staff_id", Helper.correctNull((String) rs
								.getString("indinfo_staff_id")));
			}

			// end
		} catch (Exception e) {

			throw new EJBException("Error in getPostSancShortnote "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshValues;
	}

	public HashMap getProposalMDSanction(HashMap hshValues)  {
		ResultSet rs = null, rs1 = null, rs2 = null;
		String strVal = "", strAppNo = "", strOrgCode = "", strValuesIn = "", strValuesIn1 = "";
		String strAppId = "";
		HashMap hshAnnexureII = new HashMap();
		HashMap hshFinValues = new HashMap();
		HashMap hshReqDetails = new HashMap();
		HashMap hshRespDetails = new HashMap();
		HashMap hshProfitLossAct = new HashMap();
		HashMap hshGroupConcern = new HashMap();
		FinancialBean financial = new FinancialBean();
		CommDocumentBean commDoc = new CommDocumentBean();
		String strFinancialrequired = "";
		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = new ArrayList();
		ArrayList arrPromoterRow = new ArrayList();
		ArrayList arrOutCol = new ArrayList();
		ArrayList arrFacCol = new ArrayList();
		ArrayList arrFacRow = new ArrayList();
		String strQuery = "", strQuery1 = "";
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);
		ArrayList year1 = new ArrayList();
		ArrayList year2 = new ArrayList();
		ArrayList year3 = new ArrayList();
		ArrayList year4 = new ArrayList();
		ArrayList year5 = new ArrayList();
		ArrayList year = new ArrayList();
		ArrayList yearvalue = new ArrayList();
		String[] strProfitLossPart = { "Year", "",
				"Sales/Contract receipt/fee income", "Other income",
				"Raw material consumed / purchase", "Direct expenses",
				"Selling & Administration Expenses", "Interest",
				"Depreciation", "Provision for tax", "Net profit" };
		String assetClass = "";
		try {
			strAppId = correctNull((String) hshValues.get("appid"));
			strAppNo = correctNull((String) hshValues.get("appno"));

			// Brief Background, PF No
			String strsancdept = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
					+ strAppNo);
			if (rs.next()) {
				strVal = correctNull(rs.getString("com_submittedto"));
				strsancdept = correctNull(rs.getString("com_sancdept"));
				if (strsancdept.equalsIgnoreCase("AGM")) {
					hshValues.put("com_sancdept", "Assitant General Manager");
				} else if (strsancdept.equalsIgnoreCase("CPC")) {
					hshValues.put("com_sancdept", "Cenrtral Processing Centre");
				} else if (strsancdept.equalsIgnoreCase("CREA")) {
					hshValues.put("com_sancdept", "HO Credit A Wing");
				} else if (strsancdept.equalsIgnoreCase("CREB")) {
					hshValues.put("com_sancdept", "HO Credit B Wing");
				} else if (strsancdept.equalsIgnoreCase("DGMR")) {
					hshValues.put("com_sancdept", "Branch");
				} else if (strsancdept.equalsIgnoreCase("RO")) {
					hshValues.put("com_sancdept", "Regional Office");
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (!strVal.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"
							+ "21" + "^" + strVal);
					if (rs1.next()) {
						strVal = Helper.correctNull(rs1
								.getString("stat_data_desc1"));
					} else {
						strVal = "";
					}
				} else {
					strVal = "";
				}

				/*
				 * if(strVal.equalsIgnoreCase("adm")){strVal = "Administrator";}
				 * else if(strVal.equalsIgnoreCase("999")){strVal =
				 * "DGM Admin";} else if(strVal.equalsIgnoreCase("001")){strVal
				 * = "Officer";} else if(strVal.equalsIgnoreCase("002")){strVal
				 * = "General Manager";} else
				 * if(strVal.equalsIgnoreCase("003")){strVal = "Chief Manager";}
				 * else{strVal = "";}
				 */

				hshValues.put("com_partyfileno", correctNull(rs
						.getString("com_partyfileno")));
				hshValues.put("com_meeting", correctNull(rs
						.getString("com_meeting")));
				hshValues.put("com_meetingdate", correctNull(rs
						.getString("com_meetingdate")));
				hshValues.put("com_submittedto", strVal);
				hshValues.put("com_branchrcvddate", correctNull(rs
						.getString("com_branchrcvddate")));
				hshValues.put("com_branchcompletedate", correctNull(rs
						.getString("com_branchcompletedate")));
				hshValues.put("com_sancauthority", correctNull(rs
						.getString("com_sancauthority")));
				hshValues.put("com_processnotedate", correctNull(rs
						.getString("com_processnotedate")));
				hshValues.put("com_sancauthorityVal", Helper.CLOBToString(rs
						.getClob("com_comments")));
				hshValues
						.put("com_roho", correctNull(rs.getString("com_roho")));
				hshValues.put("com_sector", correctNull(rs
						.getString("com_sector")));
			}

			// Branch Name
			rs = DBUtils.executeLAPSQuery("selmcbReportprint^" + strAppNo);
			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
			}

			// Org Code
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selorgno^" + strAppNo);
			if (rs.next()) {
				strOrgCode = correctNull(rs.getString("app_orgcode"));
				strValuesIn = correctNull(rs.getString("app_valuesin"));
				strValuesIn1 = correctNull(rs.getString("app_valuesin"));
				strFinancialrequired = correctNull(rs
						.getString("APP_FACILITYREQUIRED"));

			}

			hshValues.put("Financialrequired", strFinancialrequired);
			// Values In
			if (strValuesIn.equals("C")) {
				strValuesIn = "Crore";
			} else if (strValuesIn.equals("L")) {
				strValuesIn = "Lacs";
			} else if (strValuesIn.equals("R")) {
				strValuesIn = "Rs";
			}

			hshValues.put("strValuesIn", strValuesIn);

			if (!strOrgCode.equals("")) {
				strOrgCode = strOrgCode.substring(0, 6) + "%";
			}

			// Region
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_region^" + strOrgCode);
			if (rs.next()) {
				hshValues.put("Reg_org_name", correctNull(rs
						.getString("org_name")));
			}

			strQuery = SQLParser.getSqlQuery("sel_combankingdetails^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_asscladate", Helper.correctNull(rs
						.getString("com_asscladate")));
				assetClass = Helper.correctNull(rs.getString("COM_ASSETCLASS"));
				if (assetClass.equalsIgnoreCase("S"))
					assetClass = "Standard";
				else if (assetClass.equalsIgnoreCase("SS"))
					assetClass = "Sub Standard";
				else if (assetClass.equalsIgnoreCase("D"))
					assetClass = "Doubtful";
				else if (assetClass.equalsIgnoreCase("L"))
					assetClass = "Loss";
				else
					assetClass = "";
				hshValues.put("assetClass", assetClass);
			}

			// Customer Profile
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			if (rs.next()) {
				hshValues.put("perapp_title", Helper.changetoTitlecase(Helper
						.correctNull(rs.getString("perapp_title"))));
				hshValues.put("perapp_name", Helper.changetoTitlecase(Helper
						.correctNull(rs.getString("perapp_fname"))));
				hshValues.put("cominfo_commencement_date", correctNull(rs
						.getString("cominfo_commencement_date")));
				hshValues.put("cominfo_incorporation_date", correctNull(rs
						.getString("cominfo_incorporation_date")));
				hshValues.put("perapp_dob", correctNull(rs
						.getString("perapp_dob")));
				hshValues.put("perapp_banksince", correctNull(rs
						.getString("perapp_banksince")));
				hshValues.put("PERAPP_NETWORTH", correctNull(rs
						.getString("PERAPP_NETWORTH")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selCBSstaticdatanew^2");
				while (rs1.next()) {
					if (correctNull(
							(String) rs1.getString("cbs_static_data_code"))
							.trim()
							.equals(
									correctNull(
											(String) rs
													.getString("perapp_constitution"))
											.trim())) {
						hshValues.put("cbs_static_data_desc", correctNull(rs1
								.getString("cbs_static_data_desc")));
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstaticdatanew^110");
				while (rs1.next()) {
					if (correctNull((String) rs1.getString("stat_data_desc"))
							.trim()
							.equals(
									correctNull(
											(String) rs
													.getString("perapp_relation_bankstaff"))
											.trim())) {
						hshValues.put("stat_data_desc1", Helper.correctNull(rs1
								.getString("stat_data_desc1")));
					}
				}
			}

			// Address of the customer Admin office/Registerd office
			String Address = "", strAd1 = "", strAd2 = "", strAd3 = "", strCity = "";
			String strDis = "", strState = "", app_constitution = "";
			MastApplicantBean msb = new MastApplicantBean();
			hshReqDetails = new HashMap();
			hshReqDetails.put("strPageType", "annexure");
			hshReqDetails.put("hidapplicantnewid", strAppId);
			hshRespDetails = msb.getAddressDetails(hshReqDetails);
			hshValues.put("hshRespDetails", hshRespDetails);

			// Nature of Activity
			String strNewId = "0";
			rs = DBUtils.executeLAPSQuery("get_perdemographics_newid_renew^"
					+ strAppId);
			if (rs.next()) {
				strNewId = Helper.correctNull((String) rs
						.getString("perapp_id"));
				// arrColPrmo.add(strNewId);
				// arrColPrmo.add(Helper.changetoTitlecase(Helper.correctNull(rs.getString("perapp_fname"))));
				// arrColPrmo.add("A");
				// arrRowPrmo.add(arrColPrmo);
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_CustDetails^" + strNewId);
			if (rs.next()) {
				hshValues.put("NatureofActivity", rs
						.getString("kyc_kycactivity"));
			}

			hshAnnexureII = (HashMap) EJBInvoker.executeStateLess(
					"commdocument", hshValues, "getAnnexureII");
			arrPromoterRow = (ArrayList) hshAnnexureII.get("arrPromoterRow");
			hshValues.put("arrPromoterRow", arrPromoterRow);
			hshValues.put("cmt_ratingcomments", (String) hshAnnexureII
					.get("cmt_ratingcomments"));

			// for Proprietor
			String borrowerType = "";
			String partnerDirDetails = "";
			String coObligantDetails = "";
			if (arrPromoterRow != null && arrPromoterRow.size() > 0) {
				for (int i = 0; i < arrPromoterRow.size(); i++) {
					arrOutCol = (ArrayList) arrPromoterRow.get(i);
					borrowerType = Helper
							.correctNull((String) arrOutCol.get(6));
					if (borrowerType.equalsIgnoreCase("SP"))
						borrowerType = "Sole Proprietor";
					else if (borrowerType.equalsIgnoreCase("PT"))
						borrowerType = "Partner";
					else if (borrowerType.equalsIgnoreCase("D"))
						borrowerType = "Director";
					else if (borrowerType.equalsIgnoreCase("G"))
						borrowerType = "Guarantor";
					else if (borrowerType.equalsIgnoreCase("CO"))
						borrowerType = "Co Obligant";
					if (Helper.correctNull((String) arrOutCol.get(6))
							.equalsIgnoreCase("G")
							|| Helper.correctNull((String) arrOutCol.get(6))
									.equalsIgnoreCase("CO"))
						coObligantDetails = coObligantDetails
								+ Helper.correctNull((String) arrOutCol.get(0))
								+ "-" + borrowerType + ",<br>";
					else
						partnerDirDetails = partnerDirDetails
								+ Helper.correctNull((String) arrOutCol.get(0))
								+ "-" + borrowerType + ",<br>";
				}
			}
			if (!partnerDirDetails.equals(""))
				if (partnerDirDetails.indexOf("-") != -1)
					partnerDirDetails = partnerDirDetails.substring(0,
							partnerDirDetails.length() - 5);
			if (!coObligantDetails.equals(""))
				if (coObligantDetails.indexOf("-") != -1)
					coObligantDetails = coObligantDetails.substring(0,
							coObligantDetails.length() - 5);
			hshValues.put("partnerDirDetails", partnerDirDetails);
			hshValues.put("coObligantDetails", coObligantDetails);

			// Get Facilities Details
			int intGroup = 0;
			String facMainLimitDesc = "", facSubLimitDesc = "";
			strQuery = SQLParser.getSqlQuery("selfacilitylist^" + strAppNo
					+ "^" + intGroup);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrFacCol = new ArrayList();
				intGroup = rs.getInt("facility_sno");
				facMainLimitDesc = correctNull(rs.getString("facheaddesc"));
				arrFacCol.add(correctNull(rs.getString("facility_headid")));
				arrFacCol.add(facMainLimitDesc);
				arrFacCol.add(correctNull(rs.getString("facility_id")));
				arrFacCol.add(correctNull(rs.getString("facdesc")));
				arrFacCol.add(jtn.format(rs.getDouble("facility_proposed")));
				arrFacCol.add(facMainLimitDesc);
				arrFacCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("facility_purpose"))));
				String strFacHeadId = correctNull(rs
						.getString("facility_headid"));
				String strFacId = correctNull(rs.getString("facility_id"));
				String strFaccode = Helper.correctNull((String) rs
						.getString("facility_code"));
				String strfacilityDesc = "";
				arrFacRow.add(arrFacCol);
				strQuery1 = SQLParser.getSqlQuery("selfacilitylist^" + strAppNo
						+ "^" + intGroup);
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					facSubLimitDesc = correctNull(rs1.getString("facheaddesc"));
					arrFacCol = new ArrayList();
					arrFacCol
							.add(correctNull(rs1.getString("facility_headid")));
					arrFacCol.add(correctNull(rs1.getString("facheaddesc")));
					arrFacCol.add(correctNull(rs1.getString("facility_id")));
					arrFacCol.add(correctNull(rs1.getString("facdesc")));
					arrFacCol.add(jtn
							.format(rs1.getDouble("facility_proposed")));
					arrFacCol.add(facSubLimitDesc + " (Sublimit of "
							+ facMainLimitDesc + ")");
					arrFacCol.add(correctNull(Helper.CLOBToString(rs1
							.getClob("facility_purpose"))));
					arrFacRow.add(arrFacCol);
				}
			}
			hshValues.put("arrFacRow", arrFacRow);
			// Sanctioned Details
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_letersanc^" + strAppNo);
			rs2 = DBUtils.executeQuery(strQuery);
			if (rs2.next()) {
				hshValues.put("apprisal_date", correctNull(rs2
						.getString("apprisal_date")));
				hshValues.put("apprised_by", correctNull(rs2
						.getString("apprised_by")));
				hshValues.put("emi_lastrepay_Dt", correctNull(rs2
						.getString("emi_lastrepay_Dt")));
				hshValues.put("sanction_date", correctNull(rs2
						.getString("sanction_date")));
				hshValues.put("sanc_auth_level", correctNull(rs2
						.getString("sanc_auth_level")));
				hshValues.put("sanc_ref_no", correctNull(rs2
						.getString("sanc_ref_no")));
				hshValues.put("code_no", correctNull(rs2.getString("code_no")));
				hshValues.put("sanction_amount", correctNull(rs2
						.getString("sanction_amount")));
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("selperprdintrate^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshValues.put("loan_modintrate", jtn.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("loan_modintrate")))));
				hshValues.put("loan_inttype", Helper.correctNull(rs
						.getString("loan_inttype")));
				// hshValues.put("loan_reqterms",correctNull(rs.getString("loan_reqterms")));
				hshValues.put("loan_recmdamt", correctNull(rs
						.getString("loan_recmdamt")));
				// hshValues.put("loan_purposeofloan",correctNull(rs.getString("prd_desc")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_emiabcdlogic^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("emi_totalcost", correctNull(rs
						.getString("emi_totalcost")));
			}

			// CAPITALISATION/COVERAGE/LIQUIDITY RATIOS
			hshFinValues.put("appno", strAppNo);
			hshFinValues.put("pagefrom", "RA1");
			hshFinValues = financial.getDataRatio(hshFinValues);
			hshFinValues
					.put("page", "CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
			// hshValues.put("hshFinValues", hshFinValues);

			ArrayList vecid1 = (ArrayList) hshFinValues.get("vecid1");
			int p = 0, sizeyear = 0, from = 0, to = 0, vecModSize = 0, finLen = 0;
			String temp = "", totcount = "", upto = "", pageval = "", strCurModule = "";

			totcount = Helper.correctNull((String) hshFinValues
					.get("totalyear"));
			finLen = Integer.parseInt(Helper.correctInt(totcount));
			upto = Helper.correctNull((String) hshFinValues.get("upto"));
			pageval = Helper.correctNull((String) hshFinValues.get("page"));
			// strCurModule = pageval;

			year1 = (ArrayList) hshFinValues.get("year1");
			year2 = (ArrayList) hshFinValues.get("year2");
			year3 = (ArrayList) hshFinValues.get("year3");
			year4 = (ArrayList) hshFinValues.get("year4");
			year5 = (ArrayList) hshFinValues.get("year5");
			yearvalue = (ArrayList) hshFinValues.get("yearvalue");

			if (yearvalue != null) {
				for (int i = 0; i < 5; i++) {
					arrCol = new ArrayList();
					year = (ArrayList) hshFinValues.get("year" + (i + 1));
					if (year != null && year.size() > 0) {
						arrCol.add(yearvalue.get(i * 2));
						arrCol.add(year.get(10));
						arrCol.add(year.get(11));
						arrCol.add(year.get(13));
						arrCol.add(year.get(3));
						arrRow.add(arrCol);
					}
				}
			} else {
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrRow.add(arrCol);
			}
			ArrayList arrFinValResultsRow = new ArrayList();
			ArrayList arrFinValResultsCol = new ArrayList();
			int colSize = 0;
			if (arrRow != null && arrRow.size() > 0) {
				arrCol = (ArrayList) arrRow.get(0);
				colSize = arrCol.size();
				for (int i = 0; i < colSize; i++) {
					arrFinValResultsCol = new ArrayList();
					for (int j = 0; j < arrRow.size(); j++) {
						arrCol = (ArrayList) arrRow.get(j);
						arrFinValResultsCol.add(arrCol.get(i));
					}
					arrFinValResultsRow.add(arrFinValResultsCol);
				}
			}
			hshValues.put("arrFinRow", arrFinValResultsRow);

			// PROFIT AND LOSS A/C
			hshProfitLossAct = new HashMap();
			hshProfitLossAct.put("appno", strAppNo);
			hshProfitLossAct.put("pageval", "PROFIT AND LOSS ACCOUNT");
			hshProfitLossAct = financial.getData(hshProfitLossAct);
			hshProfitLossAct.put("page", "PROFIT AND LOSS ACCOUNT");
			// hshProfitLossAct.put("hshReqValues2",hshProfitLossAct);

			vecid1 = (ArrayList) hshProfitLossAct.get("vecid1");
			totcount = Helper.correctNull((String) hshProfitLossAct
					.get("totalyear"));
			finLen = Integer.parseInt(Helper.correctInt(totcount));
			upto = Helper.correctNull((String) hshProfitLossAct.get("upto"));
			pageval = Helper.correctNull((String) hshProfitLossAct.get("page"));
			String type = "";
			year1 = (ArrayList) hshProfitLossAct.get("year1");
			year2 = (ArrayList) hshProfitLossAct.get("year2");
			year3 = (ArrayList) hshProfitLossAct.get("year3");
			year4 = (ArrayList) hshProfitLossAct.get("year4");
			year5 = (ArrayList) hshProfitLossAct.get("year5");
			yearvalue = (ArrayList) hshProfitLossAct.get("yearvalue");
			ArrayList arrYearRow = new ArrayList();
			ArrayList arrYearCol = new ArrayList();
			for (int i = 0; i < yearvalue.size(); i++) {
				arrYearCol = new ArrayList();
				arrYearCol.add(yearvalue.get(i));
			}

			arrRow = new ArrayList();
			if (yearvalue != null) {
				for (int i = 0; i < 5; i++) {
					arrCol = new ArrayList();
					year = (ArrayList) hshProfitLossAct.get("year" + (i + 1));
					if (year != null && year.size() > 0) {
						arrCol.add(yearvalue.get(i * 2));
						type = (String) yearvalue.get((i * 2) + 1);
						if (type.equals("fin_audit"))
							type = "Audited";
						else if (type.equals("fin_unaudit"))
							type = "Un Audited";
						else if (type.equals("fin_estimated"))
							type = "Estimated";
						else if (type.equals("fin_projection"))
							type = "Projection";
						arrCol.add(type);
						arrCol.add("0.00");
						arrCol.add(year.get(14));
						arrCol.add(year.get(7));
						arrCol.add(year.get(8));
						arrCol.add(year.get(10));
						arrCol.add(year.get(12));
						arrCol.add(year.get(15));
						arrCol.add(year.get(18));
						arrCol.add(year.get(19));
						arrRow.add(arrCol);
					}
				}
			} else {
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrCol.add("");
				arrRow.add(arrCol);
			}
			arrFinValResultsRow = new ArrayList();
			arrFinValResultsCol = new ArrayList();
			colSize = 0;
			if (arrRow != null && arrRow.size() > 0) {
				arrCol = (ArrayList) arrRow.get(0);
				colSize = arrCol.size();
				for (int i = 0; i < colSize; i++) {
					arrFinValResultsCol = new ArrayList();
					arrFinValResultsCol.add(strProfitLossPart[i]);
					for (int j = 0; j < arrRow.size(); j++) {
						arrCol = (ArrayList) arrRow.get(j);
						arrFinValResultsCol.add(arrCol.get(i));
					}
					arrFinValResultsRow.add(arrFinValResultsCol);
				}
			}
			hshValues.put("arrProfitLossAct", arrFinValResultsRow);

			// DSCR
			if (rs != null) {
				rs.close();
			}

			strQuery = SQLParser.getSqlQuery("com_finappdscr_Avg_sel^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("DscrAvg", jtn.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("com_avgdscr")))));
			} else {
				hshValues.put("DscrAvg", "0.00");
			}

			// Group Concerns
			hshGroupConcern = new HashMap();
			hshGroupConcern.put("appno", strAppNo);
			hshGroupConcern.put("appid", strAppId);
			hshGroupConcern = commDoc.getAnnexureIII(hshGroupConcern);
			hshValues.put("hshGroupConcern", hshGroupConcern);
			hshValues.put("ANN3", (HashMap) hshGroupConcern.get("ANN3"));

			// MD Sanction to EC
			strQuery = SQLParser.getSqlQuery("sel_mdsancitontoec^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("MD_ESTIMATEFOR", Helper.correctNull(rs
						.getString("MD_ESTIMATEFOR")));
				hshValues.put("MD_PROVISIONALASON", Helper.correctNull(rs
						.getString("MD_PROVISIONALASON")));
				hshValues.put("MD_ACTUALSUPTO", Helper.correctNull(rs
						.getString("MD_ACTUALSUPTO")));
				hshValues.put("MD_PROJECTIONFOR", Helper.correctNull(rs
						.getString("MD_PROJECTIONFOR")));
				hshValues.put("MD_ACCEPTEDFOR", Helper.correctNull(rs
						.getString("MD_ACCEPTEDFOR")));
				hshValues.put("MD_REMARKS", Helper.correctNull(rs
						.getString("MD_REMARKS")));
				hshValues.put("MD_SHIFTINGREASON", Helper.correctNull(rs
						.getString("MD_SHIFTINGREASON")));
				hshValues
						.put("MD_WHETHERTAKEOVER_FULFIL", Helper.correctNull(rs
								.getString("MD_WHETHERTAKEOVER_FULFIL")));
				hshValues.put("MD_DEVIATIONCOMMENTS", Helper.correctNull(rs
						.getString("MD_DEVIATIONCOMMENTS")));
				hshValues.put("MD_JUSTIFICATION", Helper.correctNull(rs
						.getString("MD_JUSTIFICATION")));
				hshValues.put("MD_ANYOTHERINFO", Helper.correctNull(rs
						.getString("MD_ANYOTHERINFO")));
				hshValues.put("MD_DEALING", Helper.correctNull(rs
						.getString("MD_DEALING")));
			}

			// Consortium
			BankAppBean bankapp = new BankAppBean();

			HashMap hshReqVal = new HashMap();
			hshReqVal.put("hidAppNo", strAppNo);
			hshReqVal.put("PageType", "PROPOSAL");
			hshReqVal = bankapp.getConsortiumDetails(hshReqVal);
			hshReqVal.put("page", "PROCESS NOTE");
			hshValues.put("PROPOSAL", hshReqVal);

		} catch (Exception e) {
			log.error("Error in getProposalLC = " + e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}

		return hshValues;
	}

	public HashMap getMCLRPermissionLetter(HashMap hshValues)
			 {
		ResultSet rs = null, rs1 = null, rs2 = null, rs5 = null;
		HashMap hshQueryValues = new HashMap();
		String strQuery = "", strAppno = "", strAppID = "";
		String strSessionModuleType = Helper.correctNull((String) hshValues
				.get("sessionModuleType"));
		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = new ArrayList();

		ArrayList arrRowNames = new ArrayList();
		ArrayList arrColNames = new ArrayList();
		StringBuilder st = new StringBuilder();
		String strOrgName = "", strAppName = "";
		try {
			strAppno = Helper.correctNull((String) hshValues.get("appno"));

			String livedate = ApplicationParams.getStrCLPHdate();
			String postsanctionflag = "";
			String applicationStatus = "";
			// check when application is created
			String appcreatedate = "";

			strQuery = SQLParser.getSqlQuery("getcreatedate^" + strAppno);
			rs5 = DBUtils.executeQuery(strQuery);
			if (rs5.next()) {

				appcreatedate = rs5.getString("createddate");
				applicationStatus = rs5.getString("APP_STATUS");
			}
			System.out.println("Application created date-->" + appcreatedate);
			System.out.println("Sanction  Live Date-->" + livedate);
			if (!livedate.equalsIgnoreCase("")
					&& !appcreatedate.equalsIgnoreCase("")) {
				String Pattern = "dd/MM/yyyy";
				DateFormat df = new SimpleDateFormat(Pattern);
				Date appcreationdate = df.parse(appcreatedate);
				Date postsanclivedate = df.parse(livedate);

				if (appcreationdate.before(postsanclivedate)
						&& applicationStatus.equalsIgnoreCase("pa")) {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranch^"
							+ strAppno);
				} else {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranchnewchk^"
							+ strAppno);
				}
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strInwardCreatedDate", Helper.correctNull(rs
						.getString("inward_appliedon")));
				hshValues.put("strAppSancDate", Helper.correctNull(rs
						.getString("processdate")));
				hshValues.put("strInwardOrgname", Helper.correctNull(rs
						.getString("org_name")));

				if (Helper.correctNull(rs.getString("APP_ORGLEVEL"))
						.equalsIgnoreCase("C")
						|| Helper.correctNull(rs.getString("APP_ORGLEVEL"))
								.equalsIgnoreCase("D")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_pertainingbr^"
							+ strAppno);
					if (rs.next()) {
						strOrgName = correctNull(rs.getString("org_name"));
						hshValues.put("strInwardOrgname", strOrgName);
					}
				}
			}
			StringBuffer strAddress = new StringBuffer();
			if (rs != null)
				rs.close();
			if (!strSessionModuleType.equalsIgnoreCase("RET"))
				strQuery = SQLParser
						.getSqlQuery("select_customerdetails^com_demographics^DEMO_COMAPPNEWID^"
								+ strAppno);
			else
				strQuery = SQLParser
						.getSqlQuery("select_customerdetails^per_demographics^DEMO_APPID^"
								+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strAppName", Helper.correctNull(rs
						.getString("appname")));
				strAppName = Helper.correctNull(rs.getString("perapp_fname"));
				if (Helper.correctNull(rs.getString("INDINFO_RESIDENT_STATUS"))
						.equalsIgnoreCase("N")) {
					if (!Helper.correctNull(rs.getString("con_comaddr1"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper
										.correctNull(rs
												.getString("con_comaddr1")))
								.append(",<br/>");
					if (!Helper.correctNull(rs.getString("con_comaddr2"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper
										.correctNull(rs
												.getString("con_comaddr2")))
								.append(",<br/>");
					if (!Helper.correctNull(rs.getString("con_comvillage"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs
										.getString("con_comvillage"))).append(
								",<br/>");
					if (!Helper.correctNull(rs.getString("district_desc"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs
										.getString("district_desc"))).append(
								",<br/>");
					if (!Helper.correctNull(rs.getString("cityname"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs.getString("cityname")))
								.append(",<br/>");
					if (!Helper.correctNull(rs.getString("state_name"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs.getString("state_name")))
								.append("");
					if (!Helper.correctNull(rs.getString("con_comzip"))
							.equalsIgnoreCase(""))
						strAddress.append("-").append(
								Helper.correctNull(rs.getString("con_comzip")))
								.append(".<br/>");

					hshValues.put("strAppAddress", strAddress.toString());
				} else {
					if (!Helper.correctNull(rs.getString("CON_PERMADDR1"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs
										.getString("CON_PERMADDR1"))).append(
								",<br/>");
					if (!Helper.correctNull(rs.getString("CON_PERMADDR2"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs
										.getString("CON_PERMADDR2"))).append(
								",<br/>");
					if (!Helper.correctNull(rs.getString("CON_PERMVILLAGE"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs
										.getString("CON_PERMVILLAGE"))).append(
								",<br/>");
					if (!Helper.correctNull(rs.getString("permdist"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs.getString("permdist")))
								.append(",<br/>");
					if (!Helper.correctNull(rs.getString("permcity"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs.getString("permcity")))
								.append(",<br/>");
					if (!Helper.correctNull(rs.getString("permstate"))
							.equalsIgnoreCase(""))
						strAddress.append(
								Helper.correctNull(rs.getString("permstate")))
								.append("");
					if (!Helper.correctNull(rs.getString("CON_PERMZIP"))
							.equalsIgnoreCase(""))
						strAddress.append("-")
								.append(
										Helper.correctNull(rs
												.getString("CON_PERMZIP")))
								.append(".<br/>");

					hshValues.put("strAppAddress", strAddress.toString());
				}
			}

			if (rs != null)
				rs.close();

			if (strSessionModuleType.equalsIgnoreCase("RET")) {
				strQuery = SQLParser
						.getSqlQuery("select_loanaccdetails_retail^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper
							.correctNull(rs.getString("loan_recmdamt")));

					// CBS account no
					if (rs1 != null)
						rs1.close();

					rs1 = DBUtils.executeLAPSQuery("sel_cbsaccno^"
							+ Helper.correctNull(rs
									.getString("APP_PARENT_APPNO")));
					if (rs1.next())
						arrCol.add(Helper.correctNull(rs1
								.getString("CBS_ACCOUNTNO")));
					else
						arrCol.add(Helper.correctNull(rs
								.getString("CBS_ACCOUNTNO")));
					arrCol.add(Helper
							.correctNull(rs.getString("LOAN_MCLRTYPE")));
					arrCol.add(Helper.correctNull(rs
							.getString("LOAN_MODINTRATE")));
					arrCol.add(Helper.correctNull(rs
							.getString("loan_mclr_migration_date")));
					arrCol.add(Helper.correctNull(rs
							.getString("loan_creditrskval")));
					arrCol.add(Helper.correctNull(rs
							.getString("loan_busstatval")));

					st.append(Helper.correctNull(rs.getString("CBS_ACCOUNTNO"))
							+ ",");

					if (strOrgName.equalsIgnoreCase("")) {
						if (rs1 != null)
							rs1.close();

						rs1 = DBUtils.executeLAPSQuery("sel_disbbranchname^"
								+ strAppno + "^1");
						if (rs1.next()) {
							arrCol.add(Helper.correctNull(rs1
									.getString("org_name")));
						} else {
							arrCol.add(strOrgName);
						}

					} else {
						arrCol.add(strOrgName);
					}

					arrRowNames = new ArrayList();
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_cusdetails_ret_KFS^"
							+ strAppno);
					while (rs1.next()) {
						if (Helper.correctNull(rs1.getString("DEMO_TYPE"))
								.equalsIgnoreCase("a")
								|| Helper.correctNull(
										rs1.getString("DEMO_TYPE"))
										.equalsIgnoreCase("c")
								|| Helper.correctNull(
										rs1.getString("DEMO_TYPE"))
										.equalsIgnoreCase("o")
								|| Helper.correctNull(
										rs1.getString("DEMO_TYPE"))
										.equalsIgnoreCase("g")) {
							arrColNames = new ArrayList();
							arrColNames.add(Helper.correctNull(rs1
									.getString("DEMO_TYPE")));
							arrColNames.add(Helper.correctNull(rs1
									.getString("PERAPP_FNAME")));
							arrRowNames.add(arrColNames);
						}
					}
					arrCol.add(arrRowNames);
					arrRow.add(arrCol);
				}
			} else {
				if (Helper.correctNull((String) hshValues.get("strDetails"))
						.equalsIgnoreCase("MCLR"))
					strQuery = SQLParser
							.getSqlQuery("select_loanaccdetails_corpagri^"
									+ strAppno);
				else
					strQuery = SQLParser
							.getSqlQuery("select_loanaccdetails_corpagri_eblr^"
									+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull(rs
							.getString("facility_sancamt")));
					arrCol.add(Helper
							.correctNull(rs.getString("cbs_Accountno")));
					arrCol.add(Helper.correctNull(rs
							.getString("facility_mclrType")));
					arrCol.add(Helper.correctNull(rs
							.getString("facility_sancinterest")));
					arrCol.add(Helper.correctNull(rs
							.getString("fac_mclr_migration_date")));
					arrCol.add(Helper.correctNull(rs
							.getString("MCLR_CRP_TOTAL")));
					arrCol.add(Helper.correctNull(rs
							.getString("MCLR_BSP_TOTAL")));

					if (strOrgName.equalsIgnoreCase("")) {
						if (rs1 != null)
							rs1.close();

						rs1 = DBUtils.executeLAPSQuery("sel_disbbranchname^"
								+ strAppno
								+ "^"
								+ Helper.correctNull(rs
										.getString("facility_sno")));
						if (rs1.next()) {
							arrCol.add(Helper.correctNull(rs1
									.getString("org_name")));
						} else {
							arrCol.add(strOrgName);
						}

					} else {
						arrCol.add(strOrgName);
					}

					arrRowNames = new ArrayList();

					arrColNames = new ArrayList();
					arrColNames.add("a");
					arrColNames.add(strAppName);
					arrRowNames.add(arrColNames);

					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_coappguardetails_corp^"
							+ strAppno + "^"
							+ Helper.correctNull(rs.getString("facility_sno")));
					while (rs1.next()) {
						if (Helper.correctNull(rs1.getString("com_compdttype"))
								.equalsIgnoreCase("G")
								|| Helper.correctNull(
										rs1.getString("com_compdttype"))
										.equalsIgnoreCase("C")
								|| Helper.correctNull(
										rs1.getString("com_compdttype"))
										.equalsIgnoreCase("CO")) {
							arrColNames = new ArrayList();
							arrColNames.add(Helper.correctNull(rs1
									.getString("com_compdttype")));
							arrColNames.add(Helper.correctNull(rs1
									.getString("com_compdtfname")));
							arrRowNames.add(arrColNames);
						}
					}
					arrCol.add(arrRowNames);

					arrRow.add(arrCol);

					st.append(Helper.correctNull(rs.getString("CBS_ACCOUNTNO"))
							+ ",");
				}
			}

			hshValues.put("arrRow", arrRow);
			if (st.length() > 1)
				hshValues.put("strAccNo", st.subSequence(0, st.length() - 1)
						.toString());

		} catch (Exception e) {

			throw new EJBException("Error in getMCLRPermissionLetter "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshValues;
	}

	public HashMap getRenewalProcessNote(HashMap hshReqValues)
			 {

		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		ResultSet rs = null, rs1 = null, rs2 = null, rscmmt = null, rscmtdesc = null, rs3 = null, rs4 = null, rs6 = null, rs5 = null;
		HashMap hshValues = new HashMap();
		HashMap hshFacVal = new HashMap();
		HashMap hshFinValues = new HashMap();
		HashMap hshFinSenValues = new HashMap();
		HashMap hshBenchValues = new HashMap();
		DscrBean dscrobj = new DscrBean();
		double dblGrpExp = 0;
		int strFinid = 0;
		String strAppId = "", strAppNo = "", strOrgCode = "";
		String strVal = "", strValuesIn = "", strVal1 = "", strVal2 = "", strVal3 = "", str_arr = "", strValuesIn1 = "", strFinvaluesIn = "", strAmountValue = "", strAmtValueIn = "";
		String strCommentMgmtSno[] = { "8", "11", "12", "13", "14", "15", "16" };
		String strProposalType = "", strAppStatus = "";

		ArrayList arrOutCol = new ArrayList();
		ArrayList arrOutRow = new ArrayList();
		ArrayList arrOutRowCons = new ArrayList();
		ArrayList arrCOPCol = new ArrayList();
		ArrayList arrCOPRow = new ArrayList();
		ArrayList arrMOFCol = new ArrayList();
		ArrayList arrMOFRow = new ArrayList();
		ArrayList arrRelPatCol = new ArrayList();
		ArrayList arrRelPatRow = new ArrayList();
		ArrayList arrImplSchRow = new ArrayList();
		ArrayList arrImplSchCol = new ArrayList();
		ArrayList arrColTakeover = new ArrayList();
		ArrayList arrRowTakeover = new ArrayList();

		ArrayList arrIncomeFromCropRow = new ArrayList();
		ArrayList arrIncomeFromCropCol = new ArrayList();

		ArrayList arrGrpExpDet = new ArrayList();
		ArrayList arrcolGrpExpDet = new ArrayList();
		ArrayList arrExistingWC = new ArrayList();
		ArrayList arrPresentWC = new ArrayList();
		ArrayList arrPresentTL = new ArrayList();

		DecimalFormat dc = new DecimalFormat();
		dc.setGroupingUsed(false);
		dc.setMaximumFractionDigits(2);
		dc.setMinimumFractionDigits(2);

		String strSeasonType = "", strSeasonName = "", ApprUserid = "";
		String strQuery = "";
		double dblGrpExposure = 0.00, dblTotalExposure = 0.00;

		double dblTotal = 0.00, dblTotalAmt = 0.00, dbl_exitot = 0.00, dbl_exialltot = 0.00, dbl_protot = 0.00, dbl_proalltot = 0.00;
		String strTotalAmt = "", strCropType = "", strCropName = "", strexiprotype = "";

		String strCommentSno[] = { "1", "3", "5", "6" };
		double dblTotCOP = 0.00, dblRPTotCost = 0.00, dblRPTotMargin = 0.00, dblRPTotLoan = 0.00;

		String strLoanType = "", cma = "";

		ArrayList arrLimit = new ArrayList();
		ArrayList arrRowLimit = new ArrayList();

		ArrayList arrInland = new ArrayList();
		ArrayList arrRowInland = new ArrayList();
		ArrayList arrInlandYr = new ArrayList();
		ArrayList arrRowInlandYr = new ArrayList();

		// Added by vinoth kumar on March 08 2014
		HashMap hshPhysicsAndFinValues = new HashMap();
		HashMap hshDSSData = new HashMap();
		HashMap hshCropAss = new HashMap();
		HashMap hshkccIntSubVen = new HashMap();
		ArrayList vecData = new ArrayList();
		ArrayList vecRec = new ArrayList();
		HashMap hshRes = new HashMap();

		ArrayList arrFacilityTermApp = new ArrayList();
		ArrayList arrFacilityTerm = new ArrayList();
		ArrayList arrFacilityTermType = new ArrayList();
		ArrayList arrParentID = new ArrayList();
		ArrayList arrFacilityId = new ArrayList();
		ArrayList arrFacilityTermStatus = new ArrayList();
		ArrayList arrFacilityPrepost = new ArrayList();
		ArrayList arrFacilityTermTypeApp = new ArrayList();
		ArrayList arrFacilityIdApp = new ArrayList();
		ArrayList arrFacilityTermStatusapp = new ArrayList();

		ArrayList arrRowNonBr = new ArrayList();
		ArrayList arrColNonBr = new ArrayList();

		int strPatentid = 0;
		String[] peakDeficit = null;

		double dbl_allopnBal = 0.00, dbl_opnBal = 0.00, dbl_allproEqt = 0.00, dbl_proEqt = 0.00, dbl_bnkFin = 0.00, dbl_allbnkFin = 0.00, dbl_unsec = 0.00, dbl_allunsec = 0.00;
		double dbl_allsaleProc = 0.00, dbl_saleProc = 0.00, dbl_other = 0.00, dbl_allother = 0.00, dbl_allsofTot = 0.00, dbl_sofTot = 0.00, dbl_costLand = 0.00, dbl_allcostLand = 0.00;
		double dbl_adminexp = 0.00, dbl_alladminexp = 0.00, dbl_marketexp = 0.00, dbl_allmarketexp = 0.00, dbl_constcost = 0.00, dbl_allconstcost = 0.00, dbl_premiumfsi = 0.00;
		double dbl_allpremiumfsi = 0.00, dbl_provTax = 0.00, dbl_allprovTax = 0.00, dbl_allrepayment = 0.00, dbl_repayment = 0.00, dbl_allinterest = 0.00, dbl_interest = 0.00;
		double dbl_allotherFin = 0.00, dbl_otherFin = 0.00, dbl_allappfinTot = 0.00, dbl_appfinTot = 0.00, dbl_closingBal = 0.00, dbl_allclosingBal = 0.00;

		String srrBaseRate = "", strInterestType = "", strInterestRate = "", strWhetherBRAvail = "N", strHoliday = "0";
		double dblBaseRate = 0.00, dblInterestRate = 0.00, dblDiffIntRate = 0.00;
		String mainactivity = "", subactivity = "";
		String strFinancialrequired = "";

		ArrayList arrMISRow = new ArrayList();
		ArrayList arrMISCol = new ArrayList();
		HashMap hshGoods = new HashMap();
		String strusername = "";
		ArrayList arrFinSnoRow = new ArrayList();
		ArrayList arrFinSnoCol = new ArrayList();
		String strSancBranch = "", strAppOrgCode = "", strMCLRFlag = "Y";
		String strVerifyWithCFR = "", strNamApprCFR = "", strStatusVer = "";
		String strRoiType = "", StrInsCompanyName = "";

		try {
			strAppId = correctNull((String) hshReqValues.get("appid"));
			strAppNo = correctNull((String) hshReqValues.get("appno"));
			strusername = Helper.correctNull((String) hshReqValues
					.get("strUserId"));
			String strSessionModuleType = Helper
					.correctNull((String) hshReqValues.get("sessionModuleType"));

			rs = DBUtils.executeLAPSQuery("sanctiondate_mclr^" + strAppNo);
			if (rs.next()) {
				if (Integer.parseInt(Helper
						.correctInt(rs.getString("datediff"))) < 0) {
					strMCLRFlag = "N";
				}
			}

			String strOldAppId = "";
			rs = DBUtils.executeLAPSQuery("selgetveryoldid^" + strAppId);
			if (rs.next()) {
				strOldAppId = Helper.correctNull((String) rs
						.getString("perapp_oldid"));
			}
			// Assessments selected
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_assessmentselection_select^"
					+ strAppNo);

			if (rs.next()) {
				str_arr = Helper
						.correctNull(rs.getString("COM_ASSESSMENTTYPE"));
			}
			hshValues.put("str_arr", str_arr);

			// Branch Name
			rs = DBUtils.executeLAPSQuery("selmcbReportprint^" + strAppNo);

			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
			}

			// Orgcode
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_appstatus^" + strAppNo);
			if (rs.next()) {
				strLoanType = Helper.correctNull((String) rs
						.getString("app_loantype"));
				strLoanType = strLoanType.toLowerCase();
				hshValues.put("app_renew_flag", Helper.correctNull((String) rs
						.getString("app_renew_flag")));
				if (Helper.correctNull((String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("F"))
					strProposalType = "Fresh";
				else if (Helper.correctNull(
						(String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("R"))
					strProposalType = "Renewal";
				else if (Helper.correctNull(
						(String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("S"))
					strProposalType = "Restructuring";
				else if (Helper.correctNull(
						(String) rs.getString("app_renew_flag"))
						.equalsIgnoreCase("P"))
					strProposalType = "Post Sanction";

				hshValues.put("strProposalType", strProposalType);

				strAppStatus = Helper.correctNull(rs.getString("app_status"));
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selorgno^" + strAppNo);
			if (rs.next()) {
				strOrgCode = correctNull(rs.getString("app_orgcode"));
				strValuesIn = correctNull(rs.getString("app_valuesin"));
				strValuesIn1 = correctNull(rs.getString("app_valuesin"));
				strFinancialrequired = correctNull(rs
						.getString("APP_FACILITYREQUIRED"));
			}
			hshReqValues.put("valuesin", strValuesIn1);
			hshReqValues.put("Financialrequired", strFinancialrequired);
			hshValues.put("Financialrequired", strFinancialrequired);
			if (rs != null) {
				rs.close();
			}
			String strKccFlag = "";
			if (strLoanType.equalsIgnoreCase("a")) {
				rs = DBUtils.executeLAPSQuery("sel_agr_facilities^" + strAppNo);
				while (rs.next()) {

					String strFacAgrSchem = Helper.correctNull((String) rs
							.getString("facscheme"));
					if (strFacAgrSchem.equalsIgnoreCase("aQ")) {
						strKccFlag = "Y";
					}
				}

			}

			hshValues.put("strKccFlag", strKccFlag);

			hshValues.put("username", correctNull((String) hshReqValues
					.get("strOrgName")));
			// added by bhaskar for Crop Loan Aseesment

			if (strKccFlag.equalsIgnoreCase("Y")) {

				hshReqValues.put("hidapplicantid", strAppId);
				hshCropAss = (HashMap) EJBInvoker.executeStateLess(
						"comproposal", hshReqValues, "getCropLoan");
				hshValues.put("hshCropAss", hshCropAss);

				// added for interest subvention details

				hshReqValues.put("hidapplicantid", strAppId);
				hshkccIntSubVen = (HashMap) EJBInvoker.executeStateLess(
						"agrcrops", hshReqValues,
						"getInterestSubventionDetails");
				hshValues.put("hshkccIntSubVen", hshkccIntSubVen);

			}

			// Values In
			if (strValuesIn.equals("C")) {
				strValuesIn = "Crore";
			} else if (strValuesIn.equals("L")) {
				strValuesIn = "Lacs";
			} else if (strValuesIn.equals("R")) {
				strValuesIn = "Rs";
			}

			hshValues.put("strValuesIn", strValuesIn);
			rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strAppNo);
			if (rs.next()) {
				hshValues.put("com_amountvalue", Helper.correctNull(rs
						.getString("com_amountvalue")));
				strAmountValue = Helper.correctNull(rs
						.getString("com_amountvalue"));
			}

			if (strAmountValue.equalsIgnoreCase("C")) {
				strAmtValueIn = "Crore";
			} else if (strAmountValue.equalsIgnoreCase("L")) {
				strAmtValueIn = "Lacs";
			} else {
				strAmtValueIn = "Rs";
			}

			hshValues.put("strAmountValue", strAmountValue);
			hshValues.put("strAmtValueIn", strAmtValueIn);

			if (!strOrgCode.equals("")) {
				strOrgCode = strOrgCode.substring(0, 6) + "%";
			}
			rs = DBUtils.executeLAPSQuery("sel_financeid^" + strAppNo);
			if (rs.next()) {
				strFinid = Integer.parseInt(Helper.correctInt((String) rs
						.getString("DEMO_FINSTANDARD")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("comfinance_finappid^" + strFinid);
			if (rs.next()) {
				strFinvaluesIn = correctNull(rs.getString("fin_valuesarein"));
			} else {
				strFinvaluesIn = "R";
			}
			if (rs != null) {
				rs.close();
			}

			// Financail Values In
			if (strFinvaluesIn.equals("C")) {
				strFinvaluesIn = "Crore";
			} else if (strFinvaluesIn.equals("L")) {
				strFinvaluesIn = "Lacs";
			} else if (strFinvaluesIn.equals("R")) {
				strFinvaluesIn = "Rs";
			}
			hshValues.put("strFinvaluesIn", strFinvaluesIn);
			// Region
			if (rs != null) {
				rs.close();
			}
			String livedate = ApplicationParams.getStrCLPHdate();
			String postsanctionflag = "";
			String applicationStatus = "";
			// check when application is created
			String appcreatedate = "";

			strQuery = SQLParser.getSqlQuery("getcreatedate^" + strAppNo);
			rs5 = DBUtils.executeQuery(strQuery);
			if (rs5.next()) {

				appcreatedate = rs5.getString("createddate");
				applicationStatus = rs5.getString("APP_STATUS");
			}
			System.out.println("Application created date-->" + appcreatedate);
			System.out.println("Sanction  Live Date-->" + livedate);
			if (!livedate.equalsIgnoreCase("")
					&& !appcreatedate.equalsIgnoreCase("")) {
				String Pattern = "dd/MM/yyyy";
				DateFormat df = new SimpleDateFormat(Pattern);
				Date appcreationdate = df.parse(appcreatedate);
				Date postsanclivedate = df.parse(livedate);

				if (appcreationdate.before(postsanclivedate)
						&& applicationStatus.equalsIgnoreCase("pa")) {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranch^"
							+ strAppNo);
				} else {
					strQuery = SQLParser.getSqlQuery("sel_ApplnBranchnewchk^"
							+ strAppNo);
				}
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues
						.put("org_name", correctNull(rs.getString("org_name")));
				hshValues.put("org_scode", correctNull(rs
						.getString("org_scode")));
				strAppOrgCode = Helper.correctNull(rs.getString("org_code"));
				hshValues.put("strLodgedDate", correctNull(rs
						.getString("app_lodgeddate")));
				hshValues.put("strDelodgedDate", correctNull(rs
						.getString("app_delodgeddate")));

				if (Helper.correctNull(rs.getString("APP_ORGLEVEL"))
						.equalsIgnoreCase("C")
						|| Helper.correctNull(rs.getString("APP_ORGLEVEL"))
								.equalsIgnoreCase("D")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_pertainingbr^"
							+ strAppNo);
					if (rs.next()) {
						hshValues.put("org_name", correctNull(rs
								.getString("org_name")));
						strAppOrgCode = Helper.correctNull(rs
								.getString("org_code"));
					}
				}
			}

			if (!strAppOrgCode.equals("")) {
				strAppOrgCode = strAppOrgCode.substring(0, 6) + "%";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_region^" + strAppOrgCode);
			if (rs.next()) {
				hshValues.put("Reg_org_name", correctNull(rs
						.getString("org_name")));
			}

			// Date of Credit Application
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_selectinwardcusttype^"
					+ strAppNo);
			if (rs.next()) {
				hshValues.put("inward_appliedon", correctNull(rs
						.getString("inward_appliedon")));
				hshValues.put("INW_LEADNO", correctNull(rs
						.getString("INW_LEADNO")));
			}

			// Internal RMD Rating
			if (rs != null) {
				rs.close();
			}
			String cre_weight = "";
			rs = DBUtils.executeLAPSQuery("sel_rate_userid^" + strAppNo);
			if (rs.next()) {
				hshValues.put("cre_rating", correctNull(rs
						.getString("cre_rating")));
				cre_weight = correctNull(rs.getString("cre_weight"));
				if (cre_weight.equalsIgnoreCase("KB1")) {
					cre_weight += " - Minimal Risk";
				} else if (cre_weight.equalsIgnoreCase("KB2")) {
					cre_weight += " - Lowest Risk";
				} else if (cre_weight.equalsIgnoreCase("KB3")) {
					cre_weight += " - Lower Risk";
				} else if (cre_weight.equalsIgnoreCase("KB4")) {
					cre_weight += " - Low Risk";
				} else if (cre_weight.equalsIgnoreCase("KB5")) {
					cre_weight += " - Moderate Risk";
				} else if (cre_weight.equalsIgnoreCase("KB6")) {
					cre_weight += " - Average Risk";
				} else if (cre_weight.equalsIgnoreCase("KB7")) {
					cre_weight += " - High Risk";
				} else if (cre_weight.equalsIgnoreCase("KB8")) {
					cre_weight += " - Very high Risk";
				} else if (cre_weight.equalsIgnoreCase("KB9")) {
					cre_weight += " - Sub standard (highest)";
				} else if (cre_weight.equalsIgnoreCase("KB10")) {
					cre_weight += " - Doubt full/ loss (critical)";
				}
				hshValues.put("cre_weight", cre_weight);
				hshValues.put("crermd_rating", correctNull(rs
						.getString("cre_rating")));
				hshValues.put("crermd_rating_year", correctNull(rs
						.getString("rating_year")));

				if (correctNull(rs.getString("rating_yeartype"))
						.equalsIgnoreCase("A"))
					hshValues.put("crermd_rating_yeartype", "Audited");
				else if (correctNull(rs.getString("rating_yeartype"))
						.equalsIgnoreCase("U"))
					hshValues.put("crermd_rating_yeartype", "Unaudited");
				else if (correctNull(rs.getString("rating_yeartype"))
						.equalsIgnoreCase("E"))
					hshValues.put("crermd_rating_yeartype", "Estimated");
				else
					hshValues.put("crermd_rating_yeartype", " ");
			}

			if (rs != null) {
				rs.close();
			}
			cre_weight = "";
			rs = DBUtils.executeLAPSQuery("sel_crerating^" + strAppNo);
			if (rs.next()) {
				cre_weight = correctNull(rs.getString("cre_weight"));
				if (cre_weight.equalsIgnoreCase("KB1")) {
					cre_weight += " - Minimal Risk";
				} else if (cre_weight.equalsIgnoreCase("KB2")) {
					cre_weight += " - Lowest Risk";
				} else if (cre_weight.equalsIgnoreCase("KB3")) {
					cre_weight += " - Lower Risk";
				} else if (cre_weight.equalsIgnoreCase("KB4")) {
					cre_weight += " - Low Risk";
				} else if (cre_weight.equalsIgnoreCase("KB5")) {
					cre_weight += " - Moderate Risk";
				} else if (cre_weight.equalsIgnoreCase("KB6")) {
					cre_weight += " - Average Risk";
				} else if (cre_weight.equalsIgnoreCase("KB7")) {
					cre_weight += " - High Risk";
				} else if (cre_weight.equalsIgnoreCase("KB8")) {
					cre_weight += " - Very high Risk";
				} else if (cre_weight.equalsIgnoreCase("KB9")) {
					cre_weight += " - Sub standard (highest)";
				} else if (cre_weight.equalsIgnoreCase("KB10")) {
					cre_weight += " - Doubt full/ loss (critical)";
				}
				hshValues.put("creweight_recent", cre_weight);
				hshValues.put("creratyear_recent", correctNull(rs
						.getString("rating_year")));
				String cre_ratingType = correctNull(rs
						.getString("rating_yeartype"));

				if (cre_ratingType.equalsIgnoreCase("A")) {
					cre_ratingType = "AUDITED";
				} else if (cre_ratingType.equalsIgnoreCase("U")) {
					cre_ratingType = "UNAUDITED";
				} else if (cre_ratingType.equalsIgnoreCase("E")) {
					cre_ratingType = "ESTIMATED";
				} else if (cre_ratingType.equalsIgnoreCase("P")) {
					cre_ratingType = "PROJECTION";
				} else {
					cre_ratingType = "";
				}
				hshValues.put("crerattype_recent", cre_ratingType);
			}

			// Brief Background
			String strsancdept = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
					+ strAppNo);
			if (rs.next()) {
				strVal = correctNull(rs.getString("com_submittedto"));
				strsancdept = correctNull(rs.getString("com_sancdept"));
				hshValues.put("com_sancdeptcode", strsancdept);
				if (strsancdept.equalsIgnoreCase("011")) {
					hshValues.put("com_sancdept", "Central Processing Centre");
				} else if (strsancdept.equalsIgnoreCase("008")) {
					hshValues.put("com_sancdept", "Credit A ");
				} else if (strsancdept.equalsIgnoreCase("010")) {
					hshValues.put("com_sancdept", "Credit B ");
				} else if (strsancdept.equalsIgnoreCase("007")) {
					hshValues.put("com_sancdept", "Branch");
				} else if (strsancdept.equalsIgnoreCase("006")) {
					hshValues.put("com_sancdept", "Regional Office");
				}

				if (rs1 != null) {
					rs1.close();
				}
				if (!strsancdept.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "26" + "^" + strsancdept);
					if (rs1.next()) {
						hshValues.put("strSanctiondept", Helper.correctNull(rs1
								.getString("cbs_static_data_desc")));
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (!strVal.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"
							+ "21" + "^" + strVal);
					if (rs1.next()) {
						strVal = Helper.correctNull(rs1
								.getString("stat_data_desc1"));
					} else {
						strVal = "";
					}
				} else {
					strVal = "";
				}

				/*
				 * if(strVal.equalsIgnoreCase("adm")){strVal = "Administrator";}
				 * else if(strVal.equalsIgnoreCase("999")){strVal =
				 * "DGM Admin";} else if(strVal.equalsIgnoreCase("001")){strVal
				 * = "Officer";} else if(strVal.equalsIgnoreCase("002")){strVal
				 * = "General Manager";} else
				 * if(strVal.equalsIgnoreCase("003")){strVal = "Chief Manager";}
				 * else{strVal = "";}
				 */

				hshValues.put("com_partyfileno", correctNull(rs
						.getString("com_partyfileno")));
				hshValues.put("com_meeting", correctNull(rs
						.getString("com_meeting")));
				hshValues.put("com_meetingdate", correctNull(rs
						.getString("com_meetingdate")));
				hshValues.put("com_submittedto", strVal);
				hshValues.put("com_branchrcvddate", correctNull(rs
						.getString("com_branchrcvddate")));
				hshValues.put("com_branchcompletedate", correctNull(rs
						.getString("com_branchcompletedate")));
				hshValues.put("com_sancauthority", correctNull(rs
						.getString("com_sancauthority")));
				hshValues.put("com_processnotedate", correctNull(rs
						.getString("com_processnotedate")));
				hshValues.put("com_sancauthorityVal", Helper.CLOBToString(rs
						.getClob("com_comments")));
				hshValues
						.put("com_roho", correctNull(rs.getString("com_roho")));
				hshValues.put("com_sancbranchcode", correctNull(rs
						.getString("com_sancbranch")));
				strSancBranch = correctNull(rs.getString("com_sancbranch"));
				if (strSancBranch.equalsIgnoreCase("RFD")) {
					hshValues
							.put("com_sancbranch", "Retail Finance Department");
				} else if (strSancBranch.equalsIgnoreCase("MCFD")) {
					hshValues.put("com_sancbranch",
							"MID CORPORATE FINANCE DIVISION");
				} else if (strSancBranch.equalsIgnoreCase("ASG")) {
					hshValues
							.put("com_sancbranch", "AGRICULTURE SUPPORT GROUP");
				} else if (strSancBranch.equalsIgnoreCase("LCFD")) {
					hshValues.put("com_sancbranch", "LCFD");
				} else if (strSancBranch.equalsIgnoreCase("FS")) {
					hshValues.put("com_sancbranch", "FOREX SUPPORT");
				}

				hshValues.put("com_griddate", correctNull(rs
						.getString("com_griddate")));
				hshValues.put("com_processingfee", jtn.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("com_processingfee")))));

				hshValues.put("COM_CFR_VERIFIED", correctNull(rs
						.getString("COM_CFR_VERIFIED")));
				hshValues.put("COM_CFR_BORNAME", correctNull(rs
						.getString("COM_CFR_BORNAME")));
				hshValues.put("COM_CFR_DEV_RENFO", correctNull(rs
						.getString("COM_CFR_DEV_RENFO")));

				hshValues.put("STATUS_VERIFIED", correctNull(rs
						.getString("STATUS_VERIFIED")));

				if (correctNull(rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("A")) {
					strStatusVer = "APPROVED";
				} else if (correctNull(rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("R")) {
					strStatusVer = "REJECTED";
				}

				hshValues.put("LOAN_APPR_DATE", correctNull(rs
						.getString("COM_APPR_DATE")));
				ApprUserid = correctNull(rs.getString("COM_USERID2"));

				if (ApprUserid != "") {
					if (rs1 != null) {
						rs1.close();
					}

					strQuery = SQLParser.getSqlQuery("selectusername^"
							+ ApprUserid);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshValues.put("appuserid", correctNull((String) rs1
								.getString("name")));
					}
				}

				hshValues.put("strStatusVer", strStatusVer);
				if (rs1 != null) {
					rs1.close();
				}
				if (!Helper.correctNull(rs.getString("com_sancauthority"))
						.equalsIgnoreCase("")) {
					rs1 = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "15" + "^" + rs.getString("com_sancauthority"));
					if (rs1.next()) {
						hshValues.put("strSanctionAuthDesc", Helper
								.correctNull(rs1
										.getString("cbs_static_data_desc")));
					}
				}
				hshValues.put("COM_CSLMSNO", correctNull(rs
						.getString("COM_CSLMSNO")));
			}

			hshFacVal = getFacilityDetails(strAppNo);

			hshValues.put("dblFBLimitTot", hshFacVal.get("dblFBLimitTot"));
			hshValues
					.put("dblFBOutstandTot", hshFacVal.get("dblFBOutstandTot"));
			hshValues
					.put("dblFBExposureTot", hshFacVal.get("dblFBExposureTot"));
			hshValues.put("dblFBBorrLimit", hshFacVal.get("dblFBBorrLimit"));
			hshValues.put("dblFBPropLiimitTot", hshFacVal
					.get("dblFBPropLiimitTot"));

			hshValues.put("dblNFBLimitTot", hshFacVal.get("dblNFBLimitTot"));
			hshValues.put("dblNFBOutstandTot", hshFacVal
					.get("dblNFBOutstandTot"));
			hshValues.put("dblNFBExposureTot", hshFacVal
					.get("dblNFBExposureTot"));
			hshValues.put("dblNFBBorrLimit", hshFacVal.get("dblNFBBorrLimit"));
			hshValues.put("dblNFBPropLiimitTot", hshFacVal
					.get("dblNFBPropLiimitTot"));

			hshValues.put("dblLimitTot", hshFacVal.get("dblLimitTot"));
			hshValues.put("dblOutstandTot", hshFacVal.get("dblOutstandTot"));
			hshValues.put("dblExposureTot", hshFacVal.get("dblExposureTot"));
			hshValues.put("dblBorrLimit", hshFacVal.get("dblBorrLimit"));
			hshValues
					.put("dblPropLiimitTot", hshFacVal.get("dblPropLiimitTot"));
			hshValues.put("dblTotExp", hshFacVal.get("dblTotExp"));
			hshValues.put("strOutstandingDate", hshFacVal
					.get("strOutstandingDate"));
			hshValues.put("dblFreshLimit", hshFacVal.get("dblFreshLimit"));
			hshValues.put("dblPropLimitTot", hshFacVal.get("dblPropLimitTot"));

			hshValues.put("arrFacRow", hshFacVal.get("arrFacRow"));

			// For Finding Main or Sub Limit by DINESH

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				arrLimit = new ArrayList();
				strVal = Helper.correctInt(rs.getString("facility_sno"));
				strVal1 = Helper.correctInt(rs.getString("facility_group"));
				strVal2 = Helper.correctInt(rs.getString("facility_repaytype"));
				strVal3 = Helper.correctInt(rs.getString("facheaddesc"));

				if (strVal1.equals("0")) {
					strVal1 = "Main-Limit";
				} else {
					strVal1 = "Sub-Limit";
				}

				arrLimit.add(strVal1);
				arrRowLimit.add(arrLimit);

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strVal);
				while (rs1.next()) {
					arrLimit = new ArrayList();
					strVal = "";
					strVal1 = Helper
							.correctInt(rs1.getString("facility_group"));
					strVal2 = Helper.correctInt(rs1
							.getString("facility_repaytype"));
					strVal3 = Helper.correctInt(rs1.getString("facheaddesc"));

					if (strVal1.equals("0")) {
						strVal1 = "Main-Limit";
					} else {
						strVal1 = "Sub-Limit";
					}

					arrLimit.add(strVal1);
					arrRowLimit.add(arrLimit);

				}

			}
			hshValues.put("arrRowLimit", arrRowLimit);

			// Present Proposal
			String strPresentWC = "", strPreWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_modeofrepay^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				strPresentWC = "";
				arrOutCol = new ArrayList();

				strVal = correctNull(rs.getString("facility_repaytype"));

				if (strVal.equalsIgnoreCase("E")) {
					strVal = "EMI";
				} else if (strVal.equalsIgnoreCase("NE")) {
					strVal = "Non EMI";
				} else if (strVal.equalsIgnoreCase("OD")) {
					strVal = "On Demand";
				} else if (strVal.equalsIgnoreCase("LC")) {
					strVal = "As Per LC Terms";
				} else if (strVal.equalsIgnoreCase("CO")) {
					strVal = "As Per Contract Terms";
				} else if (strVal.equalsIgnoreCase("BG")) {
					strVal = "As Per BG Rules";
				} else if (strVal.equalsIgnoreCase("DD")) {
					strVal = "On Due Date";
				} else if (strVal.equalsIgnoreCase("PC")) {
					strVal = "From the proceeds of PSC / by realization of bill";
				} else if (strVal.equalsIgnoreCase("PS")) {
					strVal = "By Realization of Export Bills";
				} else if (strVal.equalsIgnoreCase("PR")) {
					strVal = "By Realization of Respective Bills";
				} else if (strVal.equalsIgnoreCase("TG")) {
					strVal = "As per TCBG Rules";
				} else {
					strVal = "";
				}

				arrOutCol
						.add(correctNull(rs.getString("facility_displaydesc")));
				arrOutCol.add(strVal);
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));
				arrOutCol.add(correctNull(rs.getString("facility_facnature")));
				arrOutRow.add(arrOutCol);
			}
			double dblAmount = 0.00;
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_fundbasedfacility^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_proposed"))));
				arrPresentWC.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble((String) rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strPresentWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ jtn.format(dblAmount);
				strPreWClimit = strPreWClimit + strPresentWC + "@";
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_fundbasedfacilityTL^" + strAppNo
					+ "^" + strLoanType);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_proposed"))));
				arrPresentTL.add(arrOutCol);
			}
			hshValues.put("strPreWClimit", strPreWClimit);
			hshValues.put("arrFAConlyRow", arrOutRow);
			hshValues.put("arrPresentWC", arrPresentWC);
			hshValues.put("arrPresentTL", arrPresentTL);

			// Existing Proposal
			String strExiWC = "", strExiWClimit = "", strProcnoteExiWC = "", strProcnoteWClimit = "";
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			// String strQuery="";
			strQuery = SQLParser.getSqlQuery("com_FACSel_existing^" + strAppNo
					+ "^" + strLoanType);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				dblAmount = 0.00;
				strExiWC = "";
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add("");
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_proposed")));
				arrOutCol.add(correctNull(rs.getString("facility_for")));

				arrOutRow.add(arrOutCol);
				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_proposed")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				arrOutCol = new ArrayList();
				strExiWC = correctNull(rs.getString("com_facdesc")) + " - "
						+ jtn.format(dblAmount);
				dblAmount = Double.parseDouble(Helper.correctDouble(rs
						.getString("facility_existing")));
				if (strAmountValue.equalsIgnoreCase("C")) {
					dblAmount = dblAmount / 10000000;
				} else if (strAmountValue.equalsIgnoreCase("L")) {
					dblAmount = dblAmount / 100000;
				}
				strProcnoteExiWC = correctNull(rs.getString("com_facdesc"))
						+ " - " + jtn.format(dblAmount);
				strExiWClimit = strExiWClimit + strExiWC + "@";
				strProcnoteWClimit = strProcnoteWClimit + strProcnoteExiWC
						+ "@";
				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(Helper.checkDecimal(Helper.correctInt(rs
						.getString("facility_existing"))));
				arrExistingWC.add(arrOutCol);

			}
			hshValues.put("strExiWClimit", strExiWClimit);
			hshValues.put("arrFACexistingRow", arrOutRow);
			hshValues.put("strProcnoteWClimit", strProcnoteWClimit);
			hshValues.put("arrExistingWC", arrExistingWC);
			// Gist of Proposal
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_comments^gist^" + strAppNo);
			if (rs.next()) {
				hshValues.put("GistOfProp", correctNull(Helper.CLOBToString(rs
						.getClob(("com_comments")))));
			}

			// Customer Profile
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			strVal = "";

			if (rs.next()) {
				hshValues.put("perapp_name", correctNull(rs
						.getString("perapp_fname")));
				hshValues.put("perapp_banksince", correctNull(rs
						.getString("perapp_banksince")));
				hshValues.put("perapp_bank", correctNull(rs
						.getString("perapp_bank")));
				hshValues.put("perapp_dob", correctNull(rs
						.getString("perapp_dob")));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selCBSstaticdatanew^1");
				while (rs1.next()) {
					if (correctNull(
							(String) rs1.getString("cbs_static_data_code"))
							.trim().equals(
									correctNull(
											(String) rs
													.getString("perapp_title"))
											.trim())) {
						hshValues.put("perapp_title", correctNull(rs1
								.getString("cbs_static_data_desc")));
						break;
					}
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selCBSstaticdatanew^2");
				while (rs1.next()) {
					if (correctNull(
							(String) rs1.getString("cbs_static_data_code"))
							.trim()
							.equals(
									correctNull(
											(String) rs
													.getString("perapp_constitution"))
											.trim())) {
						hshValues.put("perapp_constitution", correctNull(rs1
								.getString("cbs_static_data_desc")));
					}
				}
			}

			// Recommendations
			ArrayList arrMCLR = new ArrayList();
			ArrayList arrBanking = new ArrayList();
			String strType = "", strfacsel = "", strFac = "", StrIntType = "", strFacGroup = "", strAdhocFac = "";
			String strAdhocArr[] = null;
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo + "^"
					+ strLoanType + "^0");
			while (rs.next()) {
				arrOutCol = new ArrayList();
				strVal = "";
				strType = "";
				strFacGroup = Helper.correctInt(rs.getString("facility_sno"));
				strVal1 = Helper.correctInt(rs.getString("facility_group"));
				strVal2 = Helper.correctInt(rs.getString("facility_repaytype"));

				dblBaseRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_baserate")));
				dblInterestRate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("facility_sancinterest")));
				strInterestType = Helper.correctNull((String) rs
						.getString("facility_intsubtype"));
				strAdhocFac = Helper.correctNull(rs
						.getString("facility_adhocfac"));
				strAdhocArr = strAdhocFac.split("~");

				if (!arrBanking.contains(Helper.correctNull(rs
						.getString("FACILITY_PROPBANKTYPE"))))
					arrBanking.add(Helper.correctNull(rs
							.getString("FACILITY_PROPBANKTYPE")));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facility_mclrspread^"
						+ strFacGroup + "^" + strAppNo);

				if (rs1.next()) {
					dblDiffIntRate = dblInterestRate - dblBaseRate;
					String strTemp = Helper.correctNull(rs1
							.getString("facility_mclrtype"));
					String strTempforfbil=Helper.correctNull(rs1.getString("facility_mclrtype"));
					String strfbildate=Helper.correctNull(rs1.getString("FBILL_DATE"));
					if (!strTemp.equalsIgnoreCase("")) {
						String[] strArr = strTemp.split("@");
						if (strArr.length > 1) {
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selcbsiddatadesc^34^"
											+ strArr[0]);
							if (rs3.next()) {
								strTemp = Helper.correctNull(rs3
										.getString("cbs_static_data_desc"));
							}
						} else {
							strTemp = "";
						}
					} else {
						strTemp = "";
					}
					strInterestRate = strTemp + " + "
							+ dc.format(dblDiffIntRate) + "% p.a presently at "
							+ dc.format(dblInterestRate) + "% p.a";
					strWhetherBRAvail = "Y";

					if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
					{
						if(strTempforfbil.contains("FD")||strTempforfbil.contains("FM"))
						{
					    arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"+ " as on "+ strfbildate);
						}
						else
						{
						arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");		
						}
					}
				} else {
					if (strInterestType.equalsIgnoreCase("BR")) {
						dblDiffIntRate = dblInterestRate - dblBaseRate;
						strInterestRate = "BR + " + dc.format(dblDiffIntRate)
								+ "% p.a presently at "
								+ dc.format(dblInterestRate) + "% p.a";
						strWhetherBRAvail = "Y";
					} else {
						strInterestRate = Helper.correctDouble(rs
								.getString("facility_interest"));
					}
				}
				if (strVal1.equals("0")) {
					strVal1 = "Main-Limit";
					strFac = correctNull(rs.getString("facility_desc"));
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
						+ Helper.correctInt(rs.getString("facility_sel_type")));
				if (rs1.next()) {
					strfacsel = Helper.correctNull(rs1
							.getString("STAT_DATA_DESC1"));
				}

				if (strVal2.equalsIgnoreCase("E")) {
					strVal2 = "EMI";
				} else if (strVal2.equalsIgnoreCase("NE")) {
					strVal2 = "Non EMI";
				} else if (strVal2.equalsIgnoreCase("OD")) {
					strVal2 = "On Demand";
				} else if (strVal2.equalsIgnoreCase("LC")) {
					strVal2 = "As Per LC Terms";
				} else if (strVal2.equalsIgnoreCase("CO")) {
					strVal2 = "As Per Contract Terms";
				} else if (strVal2.equalsIgnoreCase("BG")) {
					strVal2 = "As Per BG Rules";
				} else if (strVal2.equalsIgnoreCase("DD")) {
					strVal2 = "On Due Date";
				} else if (strVal2.equalsIgnoreCase("PC")) {
					strVal2 = "From the proceeds of PSC / by realization of bill";
				} else if (strVal2.equalsIgnoreCase("PS")) {
					strVal2 = "By Realization of Export Bills";
				} else if (strVal2.equalsIgnoreCase("PR")) {
					strVal2 = "By Realization of Respective Bills";
				} else if (strVal2.equalsIgnoreCase("TG")) {
					strVal2 = "As per TCBG Rules";
				} else {
					strVal2 = "";
				}

				/*
				 * if(strType.equalsIgnoreCase("1")) {
				 * arrOutCol.add(correctNull(rs.getString("com_facdesc")));//0 }
				 * else {
				 * arrOutCol.add(correctNull(rs.getString("com_facdesc")));//0 }
				 */
				// if(strType.equalsIgnoreCase("1"))
				// {
				// arrOutCol.add(correctNull(rs.getString("facility_desc")));
				// }
				// else
				// {
				arrOutCol.add(correctNull(rs.getString("facility_desc")));
				// }
				if (correctNull(rs.getString("com_headfac")).equalsIgnoreCase(
						"1")) {
					double dblAmt = Double.parseDouble(Helper.correctDouble(rs
							.getString("facility_sancamt")));
					dblAmt = dblAmt / 50;
					arrOutCol.add(String.valueOf(dblAmt));
				} else {
					arrOutCol.add(Helper.correctDouble(rs
							.getString("facility_sancamt")));// 1
				}
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_existing")));// 2
				arrOutCol.add(strInterestRate);// 3
				arrOutCol.add(Helper.correctInt(rs.getString("facility_sno")));// 4
				arrOutCol.add(strVal1);// 5
				arrOutCol.add(Helper
						.correctInt(rs.getString("facility_months")));// 6
				arrOutCol.add(correctNull(rs.getString("facility_for")));// 7
				// arrOutCol.add(strVal);
				arrOutCol.add(strfacsel);// 8
				arrOutCol.add(strVal2);// 9
				arrOutCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("facility_margin"))));// 10
				strHoliday = Helper.correctInt(rs
						.getString("facility_holidayperiod"));
				if (strHoliday.equalsIgnoreCase("0"))
					arrOutCol.add("Not Applicable");// 11
				else
					arrOutCol.add(Helper.correctInt(rs
							.getString("facility_holidayperiod")));
				arrOutCol.add(strInterestType);// 12
				arrOutCol.add(correctNull(rs.getString("facility_duedate"))); // 13
				String strComments = "";
				String strFacSno = Helper.correctNull(rs
						.getString("facility_sno"));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate^"
								+ strFacSno + "^" + strAppNo);
				if (rs1.next()) {
					strComments = correctNull(Helper.CLOBToString(rs1
							.getClob("COM_COMMENTS")));
					if (true) {
						arrOutCol.add(correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS"))));// 14
					}
				} else {
					arrOutCol.add("");// 14
				}
				arrOutCol.add(Helper.correctNull(rs
						.getString("facility_duedate"))); // 15
				StrIntType = Helper.correctNull(rs
						.getString("facility_inttype"));
				if (StrIntType.equalsIgnoreCase("flo")) {
					StrIntType = "Floating";
				} else if (StrIntType.equalsIgnoreCase("fix")) {
					StrIntType = "Fixed";
				}
				arrOutCol.add(StrIntType);// 16
				arrOutCol.add(Helper.correctDouble(rs
						.getString("fac_metlifepremiumamt")));// 17
				// for CBS Branch display
				String strOrg_Name = "";
				strQuery = SQLParser.getSqlQuery("sel_cbsdetails^" + strAppNo
						+ "^" + strFacSno);
				if (rs3 != null)
					rs3.close();
				rs3 = DBUtils.executeQuery(strQuery);
				if (rs3.next()) {
					strOrgCode = Helper.correctNull(rs3
							.getString("LOANDISBBRANCH"));
					strOrg_Name = "";
					if (!strOrgCode.equalsIgnoreCase("")) {
						if (rs4 != null) {
							rs4.close();
						}
						strQuery = SQLParser.getSqlQuery("selectorgname^"
								+ strOrgCode);
						rs4 = DBUtils.executeQuery(strQuery);
						if (rs4.next()) {
							strOrg_Name = Helper.correctNull((String) rs4
									.getString("org_name"));
							arrOutCol.add(strOrg_Name);
							// hshRecord.put("strOrg_Name", strOrg_Name);
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				strRoiType = Helper.correctNull(rs
						.getString("FAC_INS_COMPANY_NAME"));
				if (rs4 != null) {
					rs4.close();
				}
				if (!strRoiType.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"
							+ strRoiType);
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 19
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				arrOutCol.add(strRoiType);// 20

				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_TENOR")));// 21
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_LOAN_AMOUNT")));// 22
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_INS_ACCOUNT_NO")));// 23
				arrOutCol.add(Helper.correctDouble(rs
						.getString("FAC_PREMIUM_AMOUNT")));// 24
				StrInsCompanyName = Helper.correctNull(rs
						.getString("FAC_INS_FUNDED_COMPANY_NAME"));
				if (rs4 != null) {
					rs4.close();
				}
				if (!StrInsCompanyName.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"
							+ StrInsCompanyName);
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				// end

				if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("A"))
					arrOutCol.add("Adhoc Limit");
				else if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("R"))
					arrOutCol.add("Regular Limit");
				else if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("O"))
					arrOutCol.add("One Time Limit");
				else if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("D"))
					arrOutCol.add("Additional Limit");
				else
					arrOutCol.add(" ");

				if (rs4 != null) {
					rs4.close();
				}
				if (!Helper.correctNull(rs.getString("fac_actualmargin"))
						.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^235^"
							+ Helper.correctNull(rs
									.getString("fac_actualmargin")));
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}
				if (rs4 != null) {
					rs4.close();
				}
				if (!Helper.correctNull(rs.getString("fac_actualrelaxed"))
						.equalsIgnoreCase("")) {
					rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^236^"
							+ Helper.correctNull(rs
									.getString("fac_actualrelaxed")));
					if (rs4.next()) {
						arrOutCol.add(Helper.correctNull(rs4
								.getString("STAT_DATA_DESC1")));// 25
					} else {
						arrOutCol.add("");
					}
				} else {
					arrOutCol.add("");
				}

				if (Helper.correctNull(rs.getString("fac_marginrelax"))
						.equalsIgnoreCase("Y"))
					arrOutCol.add("Yes");
				else if (Helper.correctNull(rs.getString("fac_marginrelax"))
						.equalsIgnoreCase("N"))
					arrOutCol.add("No");
				else
					arrOutCol.add("");

				arrOutRow.add(arrOutCol);

				if (rs2 != null) {
					rs2.close();
				}
				rs2 = DBUtils.executeLAPSQuery("com_FACSel_new^" + strAppNo
						+ "^" + strLoanType + "^" + strFacGroup);
				while (rs2.next()) {

					arrOutCol = new ArrayList();
					strVal = "";
					strType = "";
					strVal1 = Helper
							.correctInt(rs2.getString("facility_group"));
					strVal2 = Helper.correctInt(rs2
							.getString("facility_repaytype"));

					dblBaseRate = Double.parseDouble(Helper
							.correctDouble((String) rs2
									.getString("facility_baserate")));
					dblInterestRate = Double.parseDouble(Helper
							.correctDouble((String) rs2
									.getString("facility_sancinterest")));
					strInterestType = Helper.correctNull((String) rs2
							.getString("facility_intsubtype"));
					strAdhocFac = Helper.correctNull(rs2
							.getString("facility_adhocfac"));
					strAdhocArr = strAdhocFac.split("~");

					if (!arrBanking.contains(Helper.correctNull(rs2
							.getString("FACILITY_PROPBANKTYPE"))))
						arrBanking.add(Helper.correctNull(rs2
								.getString("FACILITY_PROPBANKTYPE")));

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_facility_mclrspread^"
							+ Helper.correctInt(rs2.getString("facility_sno"))
							+ "^" + strAppNo);

					if (rs1.next()) {
						dblDiffIntRate = dblInterestRate - dblBaseRate;
						String strTemp = Helper.correctNull(rs1
								.getString("facility_mclrtype"));
						String strTempforfbil=Helper.correctNull(rs1.getString("facility_mclrtype"));
						String strfbildate=Helper.correctNull(rs1.getString("FBILL_DATE"));
						if (!strTemp.equalsIgnoreCase("")) {
							String[] strArr = strTemp.split("@");
							if (strArr.length > 1) {
								if (rs3 != null)
									rs3.close();
								rs3 = DBUtils
										.executeLAPSQuery("selcbsiddatadesc^34^"
												+ strArr[0]);
								if (rs3.next()) {
									strTemp = Helper.correctNull(rs3
											.getString("cbs_static_data_desc"));
								}
							} else {
								strTemp = "";
							}
						} else {
							strTemp = "";
						}
						strInterestRate = strTemp + " + "
								+ dc.format(dblDiffIntRate)
								+ "% p.a presently at "
								+ dc.format(dblInterestRate) + "% p.a";
						strWhetherBRAvail = "Y";
						if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
						{
							if(strTempforfbil.contains("FD")||strTempforfbil.contains("FM"))
							{
						    arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"+ " as on "+ strfbildate);
							}
							else
							{
							arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");		
							}
						}
					} else {
						if (strInterestType.equalsIgnoreCase("BR")) {
							dblDiffIntRate = dblInterestRate - dblBaseRate;
							strInterestRate = "BR + "
									+ dc.format(dblDiffIntRate)
									+ "% p.a presently at "
									+ dc.format(dblInterestRate) + "% p.a";
							strWhetherBRAvail = "Y";
						} else {
							strInterestRate = Helper.correctDouble(rs2
									.getString("facility_interest"));
						}
					}

					{
						strVal1 = "Sub-Limit";

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_sublimitVal^"
								+ strAppNo
								+ "^"
								+ Helper.correctInt(rs2
										.getString("facility_group")));

						if (rs1.next()) {
							strVal1 = strVal1
									+ " -> "
									+ correctNull(rs1.getString("com_facdesc"))
											.toUpperCase();
						}

						strType = "1";
					}

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_facilityremarks^"
							+ Helper.correctInt(rs2
									.getString("facility_sel_type")));
					if (rs1.next()) {
						strfacsel = Helper.correctNull(rs1
								.getString("STAT_DATA_DESC1"));
					}

					if (strVal2.equalsIgnoreCase("E")) {
						strVal2 = "EMI";
					} else if (strVal2.equalsIgnoreCase("NE")) {
						strVal2 = "Non EMI";
					} else if (strVal2.equalsIgnoreCase("OD")) {
						strVal2 = "On Demand";
					} else if (strVal2.equalsIgnoreCase("LC")) {
						strVal2 = "As Per LC Terms";
					} else if (strVal2.equalsIgnoreCase("CO")) {
						strVal2 = "As Per Contract Terms";
					} else if (strVal2.equalsIgnoreCase("BG")) {
						strVal2 = "As Per BG Rules";
					} else if (strVal2.equalsIgnoreCase("DD")) {
						strVal2 = "On Due Date";
					} else if (strVal2.equalsIgnoreCase("PC")) {
						strVal2 = "From the proceeds of PSC / by realization of bill";
					} else if (strVal2.equalsIgnoreCase("PS")) {
						strVal2 = "By Realization of Export Bills";
					} else if (strVal2.equalsIgnoreCase("PR")) {
						strVal2 = "By Realization of Respective Bills";
					} else if (strVal2.equalsIgnoreCase("TG")) {
						strVal2 = "As per TCBG Rules";
					} else {
						strVal2 = "";
					}

					/*
					 * if(strType.equalsIgnoreCase("1")) {
					 * arrOutCol.add(correctNull
					 * (rs.getString("com_facdesc")));//0 } else {
					 * arrOutCol.add(
					 * correctNull(rs.getString("com_facdesc")));//0 }
					 */
					// if(strType.equalsIgnoreCase("1"))
					// {
					// arrOutCol.add(correctNull(rs2.getString("facility_desc")));
					// }
					// else
					// {
					arrOutCol.add(correctNull(rs2.getString("facility_desc")));
					// }
					if (correctNull(rs2.getString("com_headfac"))
							.equalsIgnoreCase("1")) {
						double dblAmt = Double.parseDouble(Helper
								.correctDouble(rs2
										.getString("facility_sancamt")));
						dblAmt = dblAmt / 50;
						arrOutCol.add(String.valueOf(dblAmt));
					} else {
						arrOutCol.add(Helper.correctDouble(rs2
								.getString("facility_sancamt")));// 1
					}
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("facility_existing")));// 2
					arrOutCol.add(strInterestRate);// 3
					arrOutCol.add(Helper.correctInt(rs2
							.getString("facility_sno")));// 4
					arrOutCol.add(strVal1);// 5
					arrOutCol.add(Helper.correctInt(rs2
							.getString("facility_months")));// 6
					arrOutCol.add(correctNull(rs2.getString("facility_for")));// 7
					// arrOutCol.add(strVal);
					arrOutCol.add(strfacsel);// 8
					arrOutCol.add(strVal2);// 9
					arrOutCol.add(correctNull(Helper.CLOBToString(rs2
							.getClob("facility_margin"))));// 10
					strHoliday = Helper.correctInt(rs2
							.getString("facility_holidayperiod"));
					if (strHoliday.equalsIgnoreCase("0"))
						arrOutCol.add("Not Applicable");// 11
					else
						arrOutCol.add(Helper.correctInt(rs2
								.getString("facility_holidayperiod")));
					arrOutCol.add(strInterestType);// 12
					arrOutCol
							.add(correctNull(rs2.getString("facility_duedate"))); // 13
					strComments = "";
					strFacSno = Helper.correctNull(rs2
							.getString("facility_sno"));
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate^"
									+ strFacSno + "^" + strAppNo);
					if (rs1.next()) {
						strComments = correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS")));
						if (true) {
							arrOutCol.add(correctNull(Helper.CLOBToString(rs1
									.getClob("COM_COMMENTS"))));// 14
						}
					} else {
						arrOutCol.add("");// 14
					}
					arrOutCol.add(Helper.correctNull(rs2
							.getString("facility_duedate"))); // 15
					StrIntType = Helper.correctNull(rs2
							.getString("facility_inttype"));
					if (StrIntType.equalsIgnoreCase("flo")) {
						StrIntType = "Floating";
					} else if (StrIntType.equalsIgnoreCase("fix")) {
						StrIntType = "Fixed";
					}
					arrOutCol.add(StrIntType);// 16
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("fac_metlifepremiumamt")));
					// for CBS Branch display
					// String strOrg_Name="";
					strQuery = SQLParser.getSqlQuery("sel_cbsdetails^"
							+ strAppNo + "^" + strFacSno);
					if (rs3 != null)
						rs3.close();
					rs3 = DBUtils.executeQuery(strQuery);
					if (rs3.next()) {
						strOrgCode = Helper.correctNull(rs3
								.getString("LOANDISBBRANCH"));
						strOrg_Name = "";
						if (!strOrgCode.equalsIgnoreCase("")) {
							if (rs4 != null) {
								rs4.close();
							}
							strQuery = SQLParser.getSqlQuery("selectorgname^"
									+ strOrgCode);
							rs4 = DBUtils.executeQuery(strQuery);
							if (rs4.next()) {
								strOrg_Name = Helper.correctNull((String) rs4
										.getString("org_name"));
								arrOutCol.add(strOrg_Name);
								// hshRecord.put("strOrg_Name", strOrg_Name);
							} else {
								arrOutCol.add("");
							}
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					strRoiType = Helper.correctNull(rs2
							.getString("FAC_INS_COMPANY_NAME"));
					if (rs4 != null) {
						rs4.close();
					}
					if (!strRoiType.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^223^"
										+ strRoiType);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 19
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					arrOutCol.add(strRoiType);// 20

					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_TENOR")));// 21
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_LOAN_AMOUNT")));// 22
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_INS_ACCOUNT_NO")));// 23
					arrOutCol.add(Helper.correctDouble(rs2
							.getString("FAC_PREMIUM_AMOUNT")));// 24
					StrInsCompanyName = Helper.correctNull(rs2
							.getString("FAC_INS_FUNDED_COMPANY_NAME"));
					if (rs4 != null) {
						rs4.close();
					}
					if (!StrInsCompanyName.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^223^"
										+ StrInsCompanyName);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 25
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					if (Helper.correctNull(rs2.getString("facility_category"))
							.equalsIgnoreCase("A"))
						arrOutCol.add("Adhoc Limit");
					else if (Helper.correctNull(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("R"))
						arrOutCol.add("Regular Limit");
					else if (Helper.correctNull(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("O"))
						arrOutCol.add("One Time Limit");
					else if (Helper.correctNull(
							rs2.getString("facility_category"))
							.equalsIgnoreCase("D"))
						arrOutCol.add("Additional Limit");
					else
						arrOutCol.add(" ");

					if (rs4 != null) {
						rs4.close();
					}
					if (!Helper.correctNull(rs2.getString("fac_actualmargin"))
							.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^235^"
										+ Helper.correctNull(rs2
												.getString("fac_actualmargin")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 27
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}
					if (rs4 != null) {
						rs4.close();
					}
					if (!Helper.correctNull(rs2.getString("fac_actualrelaxed"))
							.equalsIgnoreCase("")) {
						rs4 = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^236^"
										+ Helper
												.correctNull(rs2
														.getString("fac_actualrelaxed")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4
									.getString("STAT_DATA_DESC1")));// 28
						} else {
							arrOutCol.add("");
						}
					} else {
						arrOutCol.add("");
					}

					if (Helper.correctNull(rs2.getString("fac_marginrelax"))
							.equalsIgnoreCase("Y"))
						arrOutCol.add("Yes");
					else if (Helper.correctNull(
							rs2.getString("fac_marginrelax")).equalsIgnoreCase(
							"N"))
						arrOutCol.add("No");
					else
						arrOutCol.add("");

					// end

					arrOutRow.add(arrOutCol);
				}
			}

			if (rs != null) {
				rs.close();
			}
			ArrayList arrOutCol1 = new ArrayList();
			ArrayList arrOutRow1 = new ArrayList();

			strQuery = SQLParser.getSqlQuery("sel_facility_allcomments^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (rs1 != null) {
					rs1.close();
				}
				String str_repay = "repaycomment";
				rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^" + strAppNo
						+ "^repaycomment^"
						+ Helper.correctNull(rs.getString("facility_sno")));
				if (rs1.next()) {
					arrOutCol1 = new ArrayList();
					arrOutCol1.add(Helper.correctNull(rs
							.getString("facility_sno")));
					arrOutCol1
							.add(Helper.correctNull(rs.getString("fac_desc")));
					arrOutCol1.add(Helper.CLOBToString(rs1
							.getClob("fin_comments")));
					arrOutRow1.add(arrOutCol1);
				}
			}
			hshValues.put("arrOutRow1", arrOutRow1);

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
					+ "^repaycomment");
			if (rs.next()) {
				hshValues.put("fin_comments_repay", Helper.CLOBToString(rs
						.getClob("fin_comments")));
			}

			hshValues.put("arrRecommRow", arrOutRow);
			hshValues.put("arrMCLR", arrMCLR);
			hshValues.put("arrBanking", arrBanking);
			hshValues.put("strWhetherBRAvail", strWhetherBRAvail);

			// MIS information
			String strSector = "", strSubSector = "";
			if (rs != null) {
				rs.close();
			}
			arrMISRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_misapp_desc^" + strAppNo + "^"
					+ strLoanType);
			while (rs.next()) {
				arrMISCol = new ArrayList();
				arrMISCol.add(Helper.correctNull(rs
						.getString("FACILITY_DISPLAYDESC")));
				mainactivity = Helper.correctNull(rs
						.getString("app_mainactivity"));
				subactivity = Helper.correctNull(rs
						.getString("app_subactivity"));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "7"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_subsector")));
				if (rs1.next()) {
					strSubSector = Helper.correctNull((String) rs1
							.getString("mis_static_data_desc"));
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
							+ "8"
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("app_subsector")));
					if (rs1.next()) {
						strSubSector = Helper.correctNull((String) rs1
								.getString("mis_static_data_desc"));
					} else {
						strSubSector = "";
					}
				}

				if (mainactivity.equalsIgnoreCase("01")
						|| mainactivity.equalsIgnoreCase("02")) {
					arrMISCol.add(strSubSector);
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
							+ "2" + "^" + mainactivity);
					if (rs1.next()) {
						arrMISCol.add(Helper.correctNull(rs1
								.getString("mis_static_data_desc")));
					} else {
						arrMISCol.add("");
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}

				rs1 = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
						+ mainactivity + "^" + subactivity);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("mis_subactdesc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("app_activitycode")));
				strSector = Helper.correctNull((String) rs
						.getString("app_sector"));
				if (strSector.equalsIgnoreCase("01")
						|| strSector.equalsIgnoreCase("1")) {
					arrMISCol.add("Priority Sector");
				} else if (strSector.equalsIgnoreCase("02")
						|| strSector.equalsIgnoreCase("2")) {
					arrMISCol.add("Non Priority Sector");
				} else {
					arrMISCol.add(" ");
				}
				arrMISCol.add(strSubSector);

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "11"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_sensitivesector")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("Y"))
					arrMISCol.add("Yes");
				else if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("N"))
					arrMISCol.add("No");
				else
					arrMISCol.add("");

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "23"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GOVTANNOUNCESCHEME")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "17"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GUARANTEE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}

				arrMISCol
						.add(Helper.correctNull(rs.getString("app_guarantee")));
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_GUARANTEEAMT")));
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("facility")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "9"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_weakersec")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_MINISTRY_INDUSTRY")));
				if (rs6 != null) {
					rs6.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_minorityconstitutionchk^"
						+ strAppId);
				rs6 = DBUtils.executeQuery(strQuery);
				if (rs6.next()) {
					arrMISCol.add("Y");

				} else {
					arrMISCol.add("");
				}
				arrMISRow.add(arrMISCol);
			}
			hshValues.put("arrMISRow", arrMISRow);

			// Group Concen Exposure
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("comgroupconcernsselect_NEW^"
					+ strOldAppId + "^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				dblGrpExposure = Double.parseDouble(Helper.correctDouble(rs
						.getString("exposure")))
						+ dblGrpExposure;

				arrOutCol.add(correctNull(rs.getString("comapp_divisiontype")));
				arrOutCol.add(correctNull(rs.getString("comapp_div_name")));
				arrOutCol.add(Helper.correctDouble(rs.getString("exposure")));

				arrOutRow.add(arrOutCol);
			}

			dblTotalExposure = dblGrpExposure
					+ Double.parseDouble((String) hshFacVal.get("dblTotExp"));
			hshValues.put("arrGroupRow", arrOutRow);
			hshValues.put("dblGrpExposure", String.valueOf(dblGrpExposure));
			hshValues.put("dblTotalExposure", String.valueOf(dblTotalExposure));

			// External Rating
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}

			// String max_perappid="";
			// rs = DBUtils.executeLAPSQuery("sel_externalRating^"+strAppNo);

			/*
			 * rs = DBUtils.executeLAPSQuery("sel_max_perappid^"+strAppId);
			 * if(rs.next()) { max_perappid =
			 * Helper.correctInt(rs.getString("max_appid")); }
			 */

			if (rs != null) {
				rs.close();
			}
			String rating_type = "N";
			rs = DBUtils.executeLAPSQuery("cusratingnew_sel^" + strAppId);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(correctNull(rs.getString("rat_agency")));// 0
				arrOutCol.add(correctNull(rs.getString("rat_particulars")));// 1
				arrOutCol.add(Helper.correctDouble(rs.getString("rat_amount")));// 2
				arrOutCol.add(correctNull(rs.getString("rat_symbol")));// 3
				arrOutCol.add(correctNull(Helper.CLOBToString(rs
						.getClob(("rat_desc")))));// 4
				arrOutCol.add(correctNull(rs.getString("rat_duedate")));// 5
				arrOutCol.add(Helper.correctNull(rs.getString("RATE_DATE")));// 6
				arrOutCol.add(Helper.correctNull(rs
						.getString("RAT_RISK_WEIGHT")));// 7
				hshValues.put("rating_type", "Y");
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrERatingRow", arrOutRow);

			// External Rating Comments
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppId
					+ "^cusratingnew");
			if (rs.next()) {
				hshValues.put("ExternalRatingComments", correctNull(Helper
						.CLOBToString(rs.getClob(("cmt_comments")))));
				hshValues.put("ExternalRatingComments1", correctNull(Helper
						.CLOBToString(rs.getClob(("cmt_intercomments")))));
			}

			// Banking Arrangement - Sole from Facility
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_SolefromFAC^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				strVal = correctNull(rs.getString("facility_propbanktype"));

				if (strVal.equals("S")) {
					strVal = "Sole";
				} else {
					strVal = "";
				}

				arrOutCol.add(correctNull(rs.getString("com_facdesc")));
				arrOutCol.add(strVal);

				arrOutRow.add(arrOutCol);
			}

			// Sole from BA
			if (rs != null) {
				rs.close();
			}
			String strQuery2 = SQLParser.getSqlQuery("sel_SolefromBA^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery2);
			while (rs.next()) {
				String strFacility = Helper.correctNull((String) rs
						.getString("combk_facility"));
				String strFacilityCode[] = strFacility.split("~");
				String strFacilityId = strFacilityCode[1];
				String strFacilityFor = Helper.correctNull((String) rs
						.getString("combk_modtype"));
				String strFacilityDesc = "";
				if (rs1 != null) {
					rs1.close();

				}
				if (strFacilityFor.equalsIgnoreCase("r")) {
					rs1 = DBUtils.executeLAPSQuery("selLoanPurpose^"
							+ strFacilityId);
					if (rs1.next()) {
						strFacilityDesc = Helper.correctNull((String) rs1
								.getString("prddesc"));
					}
				} else {
					rs1 = DBUtils.executeLAPSQuery("sel_facilitycorp^"
							+ strFacilityId);
					if (rs1.next()) {
						strFacilityDesc = Helper.correctNull((String) rs1
								.getString("prddesc"));
					}
				}

				arrOutCol = new ArrayList();
				strVal = correctNull(rs.getString("combk_bnktype"));

				if (strVal.equals("S")) {
					strVal = "Sole";
				} else {
					strVal = "";
				}

				arrOutCol.add(strFacilityDesc);
				arrOutCol.add(strVal);

				arrOutRow.add(arrOutCol);
			}

			hshValues.put("arrSoleBARow", arrOutRow);

			if (rs != null) {
				rs.close();
			}

			String strProposalWC = "", strAnnxWC = "", strProposalMB = "", strAnnxMB = "", strProposalTL = "", strAnnxTL = "";
			/*
			 * by Kishan rs =
			 * DBUtils.executeLAPSQuery("sel_proposalNoteCheck^"+strAppNo);
			 * while(rs.next()) {
			 * if(Helper.correctNull((String)rs.getString("com_pagename"
			 * )).equalsIgnoreCase("WC")) { strProposalWC =
			 * Helper.correctNull((String)rs.getString("com_proposalnote")); }
			 * if(Helper.correctNull((String)rs.getString("com_pagename")).
			 * equalsIgnoreCase("MB")) { strProposalMB =
			 * Helper.correctNull((String)rs.getString("com_proposalnote")); }
			 * if(Helper.correctNull((String)rs.getString("com_pagename")).
			 * equalsIgnoreCase("TL")) { strProposalTL =
			 * Helper.correctNull((String)rs.getString("com_proposalnote")); } }
			 */
			// For Consortium by DINESH on 25/04/2014
			BankAppBean bankapp = new BankAppBean();

			HashMap hshReqVal = new HashMap();
			hshReqVal.put("hidAppNo", strAppNo);
			hshReqVal.put("PageType", "PROPOSAL");
			hshReqVal = bankapp.getConsortiumDetails(hshReqVal);
			hshReqVal.put("page", "PROCESS NOTE");
			hshValues.put("PROPOSAL", hshReqVal);

			// Banking Arrangment
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_BankingArrangementOther^"
					+ strAppNo);

			while (rs.next()) {
				arrOutCol = new ArrayList();

				arrOutCol.add(Helper.correctInt(rs.getString("com_facsno")));
				arrOutCol.add(correctNull(rs.getString("combk_facility")));
				arrOutCol.add("");
				arrOutCol.add("");
				arrOutCol.add(correctNull(rs.getString("com_memberbank")));
				arrOutCol.add("");

				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_existfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share1")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_existnonfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share2")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_proposedfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share3")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_proposednonfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share4")));

				arrOutCol.add(Helper.correctDouble(rs.getString("com_limit")));
				arrOutCol.add(Helper.correctDouble(rs
						.getString("com_outstanding")));
				arrOutCol.add(correctNull(rs.getString("com_osason")));

				strVal1 = correctNull(rs.getString("com_facvalue"));

				if (!strVal1.equals("")) {
					strVal1 = strVal1.substring(strVal1.indexOf('~') + 1,
							strVal1.indexOf('~') + 2);
				}

				arrOutCol.add(strVal1);

				arrOutRow.add(arrOutCol);
			}

			hshValues.put("arrBARow", arrOutRow);

			// Comments
			if (rs != null) {
				rs.close();
			}
			String strpgType[] = { "secoverage", "secoverage1", "BDCOM1",
					"BDCOM2", "brief", "brief2" };
			for (int i = 0; i < 6; i++) {
				rs = DBUtils.executeLAPSQuery("sel_comments^" + strpgType[i]
						+ "^" + strAppNo);
				if (rs.next()) {
					hshValues.put("com_comments" + strpgType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("com_comments")))));
				}
			}

			// Agri Comments
			if (rs != null) {
				rs.close();
			}
			String strAgrType[] = { "cropincome", "physicalfin",
					"agrifarmbudget", "croploan", "cropass" };
			for (int i = 0; i < strAgrType.length; i++) {
				rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppNo
						+ "^" + strAgrType[i]);
				if (rs.next()) {
					hshValues.put("cmt_comments" + strAgrType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("cmt_comments")))));
					hshValues.put("cmt_intercomments" + strAgrType[i],
							correctNull(Helper.CLOBToString(rs
									.getClob("cmt_intercomments"))));
				}
			}

			// DSS Comments
			if (rs != null) {
				rs.close();
			}
			String strAgrType1[] = { "cropass", "assdss" };
			for (int i = 0; i < strAgrType1.length; i++) {
				rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
						+ "^" + strAgrType1[i]);
				if (rs.next())
					hshValues.put("cmt_comments" + strAgrType1[i],
							correctNull(Helper.CLOBToString(rs
									.getClob(("fin_comments")))));
			}
			// BA Fund Total
			/*
			 * if(rs!=null){rs.close();} rs =
			 * DBUtils.executeLAPSQuery("sel_BAFundTot^"+strAppNo);
			 * if(rs.next()) { hshValues.put("fundtotal",
			 * Helper.correctDouble(rs.getString("fundtotal"))); }
			 */
			hshValues.put("fundtotal", "0.00");

			// Financial Comments
			for (int i = 0; i < strCommentSno.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils
						.executeLAPSQuery("sel_financial_comments^FPComments^"
								+ strCommentSno[i] + "^" + strAppNo);

				if (rs.next()) {
					hshValues.put("FIComments"
							+ correctNull(rs.getString("com_sno")),
							correctNull(Helper.CLOBToString(rs
									.getClob("com_comments"))));
				}
			}

			// Assessment Comments
			String strassmntCommentsno[] = { "1", "2" };
			for (int i = 0; i < strassmntCommentsno.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils
						.executeLAPSQuery("sel_financial_comments^assmntcomments^"
								+ strassmntCommentsno[i] + "^" + strAppNo);

				if (rs.next()) {
					hshValues.put("AssmntComments"
							+ correctNull(rs.getString("com_sno")),
							correctNull(Helper.CLOBToString(rs
									.getClob("com_comments"))));
				}
			}

			// Other Assessment Comments
			String strFlowType[] = { "35", "37" };
			for (int i = 0; i < strFlowType.length; i++) {
				if (strFlowType[i].equalsIgnoreCase("35")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_assessment_tl^"
							+ strAppNo + "^" + strFlowType[i]);
					if (rs.next()) {
						hshValues.put("com_assessment_comments"
								+ strFlowType[i], correctNull(Helper
								.CLOBToString(rs
										.getClob("com_assessment_comments"))));
					}
				}
				if (strFlowType[i].equalsIgnoreCase("37")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_assessment_tl^"
							+ strAppNo + "^" + strFlowType[i]);
					if (rs.next()) {
						hshValues.put("strAdhocFacAssessment",
								correctNull(Helper.CLOBToString(rs
										.getClob("com_assessment_comments"))));
					}
				}
			}

			// Assessment Inland , Turnover comments , Repayment Schd.
			String strpage = "";
			String strpageAsmt[] = { "inlandComments", "turnover",
					"expenditure", "cashbudget", "assdscr", "repaycomment",
					"bankargmnt" };
			for (int i = 0; i < strpageAsmt.length; i++) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo
						+ "^" + strpageAsmt[i]);
				if (rs.next()) {
					hshValues.put("fin_comments" + strpageAsmt[i], Helper
							.CLOBToString(rs.getClob("fin_comments")));
					hshValues.put("fin_comments1" + strpageAsmt[i], Helper
							.CLOBToString(rs.getClob("fin_comments1")));
				}
			}

			// Delegation
			arrOutRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_delegation^" + strAppNo);
			while (rs.next()) {
				arrOutCol = new ArrayList();

				arrOutCol.add(correctNull(rs.getString("com_userid")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_CBSStaticDataPassingCode^27^"
								+ correctNull((String) rs
										.getString("com_userdes")));
				if (rs1.next()) {
					// if(correctNull((String)rs1.getString("cbs_static_data_code")).trim().equals(correctNull((String)rs.getString("com_userdes")).trim()))
					// {
					arrOutCol.add(correctNull(rs1
							.getString("cbs_static_data_desc")));
					// break;
					// }
				} else {
					arrOutCol.add(correctNull(rs.getString("com_userdes")));
				}
				arrOutCol.add(correctNull(rs.getString("com_userdes")));
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrDeleRow", arrOutRow);

			if (str_arr.contains("EXPORTCF@")) {
				ArrayList arrCOPNewRow = new ArrayList();
				// Assessment of TL: COP
				dblTotCOP = 0.00;
				int m = 0, z = 0;
				arrOutRow = new ArrayList();
				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					arrCOPCol = new ArrayList();

					int termSno = Integer.parseInt(Helper.correctInt(rs2
							.getString("term_sno")));
					arrCOPCol.add(Helper.correctInt(rs2.getString("term_sno")));
					arrCOPCol.add(correctNull(rs2.getString("term_desc")));
					arrCOPCol
							.add(jtn.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_sancamt")))));// 10
					dblTotCOP = 0.00;
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_desc^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrOutCol = new ArrayList();

						if (correctNull(rs.getString("com_type"))
								.equalsIgnoreCase("C")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils
									.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
							while (rs1.next()) {
								if (correctNull(
										(String) rs1
												.getString("stat_data_desc"))
										.trim()
										.equals(
												correctNull(
														(String) rs
																.getString("com_desc_sno"))
														.trim())) {
									arrOutCol.add(correctNull(rs1
											.getString("stat_data_desc1")));
									break;
								}
							}

							arrOutCol.add(Helper.correctDouble(rs
									.getString("com_totalvalue")));
							arrOutCol.add(Helper.correctInt(rs
									.getString("com_facsno")));
							dblTotCOP = dblTotCOP
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("com_totalvalue")));
						}

						if (arrOutCol.size() > 0) {
							arrOutRow.add(arrOutCol);
						}
					}
					arrCOPCol.add(String.valueOf(dblTotCOP));
					if (arrOutRow.size() > 0) {
						arrCOPRow.add(arrCOPCol);
					}

					arrCOPNewRow.add(arrCOPCol);

					String strFacilities = Helper.correctInt(rs2
							.getString("term_sno"));

					if (strFacilities != "s" && strFacilities != "") {
						if (rs != null)
							rs.close();
						rs = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL"
										+ "^" + strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_COP" + termSno, Helper
									.CLOBToString(rs.getClob("COM_COMMENTS")));
							hshValues.put("COM_DATE_COP" + termSno, Helper
									.correctNull((String) rs
											.getString("COM_DATE")));
							hshValues.put("COM_PROJECTLOAN" + termSno, Helper
									.correctNull((String) rs
											.getString("com_projectloan")));
							z = m;
						}
						if (rs != null)
							rs.close();
						rs = DBUtils
								.executeLAPSQuery("sel_comcomments^ExistingTerm^"
										+ strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_ETL" + termSno, Helper
									.CLOBToString(rs.getClob("com_comments")));
							z = m;
						}
						if (rs != null)
							rs.close();
						rs = DBUtils.executeLAPSQuery("sel_comcomments^SOM^"
								+ strFacilities + "^" + strAppNo);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_SOM" + termSno, Helper
									.CLOBToString(rs.getClob("com_comments")));
							z = m;
						}
						if (rs != null)
							rs.close();
						strQuery = SQLParser
								.getSqlQuery("sel_comcomments1^CommentsProj^"
										+ strFacilities + "^" + strAppNo
										+ "^12");
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							hshValues.put("COM_COMMENTS_COProj" + termSno,
									Helper.CLOBToString(rs
											.getClob("com_comments")));
						}
						for (int c = 1; c < 12; c++) {
							strQuery = SQLParser
									.getSqlQuery("sel_comcomments1^CommentsProj^"
											+ strFacilities
											+ "^"
											+ strAppNo
											+ "^" + c);
							rs = DBUtils.executeQuery(strQuery);
							if (rs.next()) {
								hshValues.put("COM_COMMENTS_" + c + "_COProj"
										+ termSno, Helper.CLOBToString(rs
										.getClob("com_comments")));
							}
						}

						ArrayList arrMechRow = new ArrayList();
						ArrayList arrMechcol = new ArrayList();
						strQuery = SQLParser.getSqlQuery("selcom_machineryDet^"
								+ strAppNo + "^" + termSno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							arrMechcol = new ArrayList();
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_particulars")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_supplier")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_quantity")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_unitpercost")));
							arrMechcol.add(Helper.correctNull(rs
									.getString("COM_amount")));
							arrMechRow.add(arrMechcol);
						}
						hshValues.put("arrMechRow" + termSno, arrMechRow);

					}
					if (rs != null) {
						rs.close();
					}
					m++;
				}
				hshValues.put("ValofM", String.valueOf(z));
				hshValues.put("arrCOPMjrRow", arrCOPRow);
				hshValues.put("arrCOPRow", arrOutRow);
				hshValues.put("dblTotCOP", String.valueOf(dblTotCOP));
				hshValues.put("arrCOPNewRow", arrCOPNewRow);

				// Assessment of TL: MOF
				String strFlag = "false", strdescSno = "";
				double dbl_BankSubLoan = 0.00;
				double dbl_Othermfinance = 0.00;
				double dbl_Debit = 0.00;
				m = 0;
				dblTotCOP = 0.00;
				arrOutRow = new ArrayList();
				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					arrMOFCol = new ArrayList();
					dbl_Debit = 0.00;
					dbl_Othermfinance = 0.00;
					dbl_BankSubLoan = 0.00;
					dblTotCOP = 0.00;
					arrMOFCol.add(Helper.correctInt(rs2.getString("term_sno")));
					arrMOFCol.add(correctNull(rs2.getString("term_desc")));
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_desc^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrOutCol = new ArrayList();
						strdescSno = Helper.correctNull(rs
								.getString("COM_DESC_SNO"));

						if (correctNull(rs.getString("com_type"))
								.equalsIgnoreCase("M")) {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils
									.executeLAPSQuery("SelStaticDataCorpQuestionMast^137");
							while (rs1.next()) {
								if (correctNull(
										(String) rs1
												.getString("stat_data_desc"))
										.trim()
										.equals(
												correctNull(
														(String) rs
																.getString("com_desc_sno"))
														.trim())) {
									strFlag = "true";
									arrOutCol.add(correctNull(rs1
											.getString("stat_data_desc1")));
									break;
								}
							}

							arrOutCol.add(Helper.correctDouble(rs
									.getString("com_totalvalue")));
							arrOutCol.add(Helper.correctInt(rs
									.getString("com_facsno")));
							dblTotCOP = dblTotCOP
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("com_totalvalue")));
						}

						if ((strdescSno.endsWith("1"))
								|| (strdescSno.endsWith("2"))) {
							if (correctNull(rs.getString("com_type"))
									.equalsIgnoreCase("M")) {
								dbl_BankSubLoan += Double.parseDouble(Helper
										.correctDouble(rs
												.getString("COM_TOTALVALUE")));
							}
						} else {
							if (correctNull(rs.getString("com_type"))
									.equalsIgnoreCase("M")) {
								dbl_Othermfinance += Double.parseDouble(Helper
										.correctDouble(rs
												.getString("COM_TOTALVALUE")));
							}
						}

						if (arrOutCol.size() > 0) {
							arrOutRow.add(arrOutCol);
						}

					}
					arrMOFCol.add(String.valueOf(dblTotCOP));
					if (dbl_Othermfinance != 0.0) {
						dbl_Debit = dbl_BankSubLoan / dbl_Othermfinance;
					} else {
						dbl_Debit = dbl_BankSubLoan;
					}
					hshValues.put("dbl_Debit"
							+ correctNull(rs2.getString("term_sno")), ""
							+ dc.format(dbl_Debit));
					if (arrOutRow.size() > 0) {
						arrMOFRow.add(arrMOFCol);
					}
					m++;
				}

				hshValues.put("arrMOFMjrRow", arrMOFRow);
				hshValues.put("arrMOFRow", arrOutRow);
				hshValues.put("dblTotMOF", String.valueOf(dblTotCOP));

				// Release Pattern

				ArrayList arrReleaseRow = new ArrayList();
				ArrayList arrRowPattern = new ArrayList();

				if (rs2 != null) {
					rs.close();
				}
				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				int y = 0;
				int x = 0;
				dblRPTotCost = 0.0;
				dblRPTotMargin = 0.0;
				dblRPTotLoan = 0.0;
				boolean boorelflag = true;
				int abc = 0;
				while (rs2.next()) {
					boorelflag = true;
					arrImplSchRow = new ArrayList();
					ArrayList arrReleaseCol = new ArrayList();
					ArrayList arrColPattern = new ArrayList();
					String strTermSno = Helper.correctInt(rs2
							.getString("term_sno"));

					arrReleaseCol.add(correctNull(rs2.getString("term_sno"))); // 0
					arrReleaseCol.add(correctNull(rs2.getString("term_desc"))); // 1
					arrFinSnoRow.add(arrReleaseCol);
					abc++;
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_com_copmof_margin1_new^"
							+ strAppNo + "^"
							+ correctNull(rs2.getString("term_sno")));
					while (rs.next()) {
						arrColPattern = new ArrayList();
						if (boorelflag) {
							arrReleaseCol.add("ReleasePattern");// 2
						}

						boorelflag = false;
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
						while (rs1.next()) {
							if (correctNull(
									(String) rs1.getString("stat_data_desc"))
									.trim()
									.equals(
											correctNull(
													(String) rs
															.getString("com_sno"))
													.trim())) {
								arrColPattern.add(correctNull(rs1
										.getString("stat_data_desc1")));// 0
								break;
							}
						}

						dblRPTotCost = dblRPTotCost
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_amount")));
						dblRPTotMargin = dblRPTotMargin
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_margin")));
						dblRPTotLoan = dblRPTotLoan
								+ Double.parseDouble(Helper.correctDouble(rs
										.getString("com_bankloan")));

						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_amount")));// 1
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_margin")));// 2
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_marginamt")));// 3
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_bankloan")));// 4
						arrColPattern.add(Helper.correctDouble(rs
								.getString("com_bankloanamt")));// 5
						arrColPattern.add(Helper.correctInt(rs
								.getString("com_facsno")));// 6
						arrRowPattern.add(arrColPattern);
					}
					if (boorelflag) {
						arrReleaseCol.add("0");// 2
						boorelflag = true;
					}

					hshValues.put("arrRowPattern" + x, arrRowPattern);
					arrRowPattern = new ArrayList();
					hshValues.put("dblRPTotCost" + x, String
							.valueOf(dblRPTotCost));
					hshValues.put("dblRPTotMargin" + x, String
							.valueOf(dblRPTotMargin));
					hshValues.put("dblRPTotLoan" + x, String
							.valueOf(dblRPTotLoan));
					dblRPTotCost = 0.0;
					dblRPTotMargin = 0.0;
					dblRPTotLoan = 0.0;
					if (strTermSno != "s" && strTermSno != "") {
						rs = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL"
										+ "^" + strTermSno + "^" + strAppNo);
						if (rs.next()) {
							arrReleaseCol.add(correctNull(rs
									.getString("com_date"))); // 8
							arrReleaseCol.add("Estimate"); // 9
						} else {
							arrReleaseCol.add("0");// 8
							arrReleaseCol.add("0");// 9
						}

					}
					arrReleaseCol.add(jtn.format(Double
							.parseDouble((String) Helper.correctDouble(rs2
									.getString("facility_sancamt")))));// 10
					arrReleaseRow.add(arrReleaseCol);
					x++;
				}

				hshValues.put("arrReleaseRow", arrReleaseRow);

				// Implementation schedule
				/*
				 * if(rs!=null){rs.close();} String strTermSno = "";
				 * if(arrFinSnoRow!= null && arrFinSnoRow.size()>0) { for(int
				 * i=0;i<arrFinSnoRow.size();i++) { arrFinSnoCol = (ArrayList)
				 * arrFinSnoRow.get(i); arrImplSchRow.add((String)
				 * arrFinSnoCol.get(0)); arrImplSchRow.add((String)
				 * arrFinSnoCol.get(1)); arrOutRow = new ArrayList(); String
				 * strQuery5 =
				 * SQLParser.getSqlQuery("sel_implnschedulesno^"+strAppNo
				 * +"^"+"^"+(String) arrFinSnoCol.get(0)); rs =
				 * DBUtils.executeQuery(strQuery5); //rs =
				 * DBUtils.executeLAPSQuery
				 * ("sel_implnschedulesno^"+strAppNo+"^"+"^"+strTermSno);
				 * while(rs.next()) { arrImplSchCol = new ArrayList();
				 * arrReleaseCol.add(correctNull(rs.getString("com_desc"))); //3
				 * arrReleaseCol
				 * .add(correctNull(rs.getString("com_commencedate"))); //4
				 * arrReleaseCol
				 * .add(correctNull(rs.getString("com_completiondate"))); //5
				 * arrReleaseCol.add(correctNull(rs.getString("com_status")));
				 * //6 arrReleaseCol.add("Implement");//78
				 * 
				 * arrImplSchCol.add(correctNull(rs.getString("com_desc"))); //3
				 * arrImplSchCol
				 * .add(correctNull(rs.getString("com_commencedate"))); //4
				 * arrImplSchCol
				 * .add(correctNull(rs.getString("com_completiondate"))); //5
				 * arrImplSchCol.add(correctNull(rs.getString("com_status")));
				 * //6 arrImplSchCol.add("Implement");//7
				 * arrImplSchRow.add(arrImplSchCol); }
				 * hshValues.put("arrImpSchRow"+strTermSno, arrImplSchRow); } }
				 */
				if (rs != null) {
					rs.close();
				}

				// Implementation end

				// hshValues.put("arrImpScheRow"+x, arrOutRow);
				// Schedule of Implementation
				if (rs != null) {
					rs.close();
				}
				if (rs2 != null) {
					rs.close();
				}

				rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
						+ strAppNo);
				while (rs2.next()) {
					boorelflag = true;
					arrImplSchCol = new ArrayList();
					arrOutRow = new ArrayList();
					String strTermSno = Helper.correctInt(rs2
							.getString("term_sno"));
					arrImplSchCol.add(strTermSno);
					arrImplSchCol.add(correctNull(rs2.getString("term_desc")));
					rs = DBUtils.executeLAPSQuery("sel_implnschedulesno^"
							+ strAppNo + "^" + "^" + strTermSno);
					while (rs.next()) {
						// arrOutRow = new ArrayList();
						arrOutCol = new ArrayList();
						arrOutCol.add(correctNull(rs2.getString("term_desc")));
						arrOutCol.add(correctNull(rs.getString("com_desc")));
						arrOutCol.add(correctNull(rs
								.getString("com_commencedate")));
						arrOutCol.add(correctNull(rs
								.getString("com_completiondate")));
						arrOutCol.add(correctNull(rs.getString("com_status")));

						arrOutRow.add(arrOutCol);
					}
					arrImplSchCol.add(arrOutRow);
					arrImplSchCol
							.add(jtn.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("facility_sancamt")))));
					arrImplSchRow.add(arrImplSchCol);
				}
				hshValues.put("arrImplSchRow", arrImplSchRow);

				// Source of Margin
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_comments^SOM^" + strAppNo);
				if (rs.next()) {
					hshValues.put("SOMComments", correctNull(Helper
							.CLOBToString(rs.getClob(("com_comments")))));
				}
			}

			// Release Pattern
			dblTotCOP = 0.00;
			String termSno = "";
			int abc = 1;
			arrOutRow = new ArrayList();
			if (rs2 != null) {
				rs.close();
			}
			rs2 = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}

			while (rs2.next()) {
				arrRelPatCol = new ArrayList();
				termSno = Helper.correctInt(rs2.getString("term_sno"));
				arrRelPatCol.add(Helper.correctInt(rs2.getString("term_sno")));
				arrRelPatCol.add(correctNull(rs2.getString("term_desc")));

				rs = DBUtils.executeLAPSQuery("sel_com_copmof_margin1_new^"
						+ strAppNo + "^"
						+ correctNull(rs2.getString("term_sno")));
				while (rs.next()) {
					arrOutCol = new ArrayList();

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("SelStaticDataCorpQuestionMast^132");
					while (rs1.next()) {
						if (correctNull(
								(String) rs1.getString("stat_data_desc"))
								.trim().equals(
										correctNull(
												(String) rs
														.getString("com_sno"))
												.trim())) {
							arrOutCol.add(correctNull(rs1
									.getString("stat_data_desc1")));
							break;
						}
					}

					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_amount")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_margin")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_marginamt")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_bankloan")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_bankloanamt")));
					arrOutCol
							.add(Helper.correctInt(rs.getString("com_facsno")));

					dblRPTotCost = dblRPTotCost
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_amount")));
					dblRPTotMargin = dblRPTotMargin
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_margin")));
					dblRPTotLoan = dblRPTotLoan
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("com_bankloan")));
					abc++;
					if (arrOutCol.size() > 0) {
						arrOutRow.add(arrOutCol);
					}
				}

			}
			if (arrOutRow.size() > 0) {
				arrRelPatRow.add(arrRelPatCol);
			}
			hshValues.put("dblRPTotCost", String.valueOf(dblRPTotCost));
			hshValues.put("dblRPTotMargin", String.valueOf(dblRPTotMargin));
			hshValues.put("dblRPTotLoan", String.valueOf(dblRPTotLoan));
			hshValues.put("arrRelPatrnMjrRow", arrRelPatRow);
			hshValues.put("arrRelPatrnRow", arrOutRow);
			hshValues.put("arrRelPatColNew", arrRelPatCol);

			// DSCR
			if (str_arr.contains("DSCR@")) {
				hshFinValues = new HashMap();
				hshFinValues.put("appno", strAppNo);
				hshFinValues = dscrobj.getPrintValues(hshFinValues);
				hshValues.put("DSCRhshFinValues", hshFinValues);

				// SENSITIVITY - Added by DINESH on 31/03/2014
				hshFinSenValues = new HashMap();
				hshFinSenValues.put("appno", strAppNo);
				hshFinSenValues = dscrobj
						.getPrintSensitivityVal(hshFinSenValues);
				hshValues.put("SENSITIVITYhshFinValues", hshFinSenValues);
			}

			// For Security Coverage display by Guhan T
			HashMap hshsec = new HashMap();
			SecurityMasterBean sec = new SecurityMasterBean();
			hshReqValues.put("hidapplicantid", strOldAppId);
			hshsec = sec.getCollateralSecurityDisplaynew(hshReqValues);
			ArrayList arrRow = new ArrayList();
			arrRow = (ArrayList) hshsec.get("arrRow");
			hshValues.put("arrRow", arrRow);
			hshValues.put("dbl_exifundostot", hshsec.get("dbl_exifundostot"));
			hshValues.put("dbl_exinonfundostot", hshsec
					.get("dbl_exinonfundostot"));
			hshValues.put("dbl_propfundostot", hshsec.get("dbl_propfundostot"));
			hshValues.put("dbl_propnonfundostot", hshsec
					.get("dbl_propnonfundostot"));
			hshValues.put("dbl_totvalexis", hshsec.get("dbl_totvalexis"));
			hshValues.put("dbl_totvalproposed", hshsec
					.get("dbl_totvalproposed"));
			hshValues.put("dbl_secexitot", hshsec.get("dbl_secexitot"));
			hshValues.put("dbl_secexicoverage", hshsec
					.get("dbl_secexicoverage"));
			hshValues.put("dbl_secpropcoverage", hshsec
					.get("dbl_secpropcoverage"));

			// For Comments by Guhan T
			if (rs != null)
				rs.close();
			String strQuery5 = SQLParser.getSqlQuery("selexistingfaccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery5);
			while (rs.next()) {
				hshValues.put("existing_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			String strQuery6 = SQLParser.getSqlQuery("selpriseccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery6);
			while (rs.next()) {
				hshValues.put("prisec_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			String strQuery7 = SQLParser.getSqlQuery("selcollseccomm^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery7);
			while (rs.next()) {
				hshValues.put("collsec_comments", Helper.CLOBToString(rs
						.getClob("CMT_COMMENTS")));
			}

			if (rs != null)
				rs.close();
			strQuery5 = SQLParser
					.getSqlQuery("sel_comcommentscopmof^COPMOF^20^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery5);
			if (rs.next()) {
				hshValues.put("copmofcomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			ArrayList arrCol = new ArrayList();
			arrRow = new ArrayList();
			// com_assessmentselection_select
			FinancialBean financial = new FinancialBean();
			ComProposalBean comproposal = new ComProposalBean();
			HashMap hshRequestValues = new HashMap();

			if (str_arr.contains("TO@")) {
				/*
				 * 
				 * TO@Exp@CFS@MED1@MED2@WCGMED@EXPORTCF@DSCR@CASHBUD@NFA@AOA@ASR@
				 */

				arrRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_turnoverMethod^" + strAppNo);
				while (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("COM_TO_YEAR")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ACPTPROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PERCENTACPTPROJSALES")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_MINMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ELIGIBLEFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ACTUALMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_ELIGIBLEBANKFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_PERMISIBLEFIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_LIMITSOUGHT")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_LIMITPROPOSED")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_REQMARGIN")));
					arrCol.add(Helper.correctNull(rs
							.getString("COM_TO_SURPLUS")));
					arrRow.add(arrCol);
				}
				hshValues.put("TurnOver", arrRow);
			}
			if (str_arr.contains("Exp@")) {
				// Expenditure Method
				arrOutRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_expenditureMethod^"
						+ strAppNo);
				while (rs.next()) {
					arrOutCol = new ArrayList();

					arrOutCol.add(correctNull(rs.getString("com_exp_year")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_projexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_acptprojexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_operationcycle")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_eligibleexpnd")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_permisiblefin")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_limitsought")));
					arrOutCol.add(Helper.correctDouble(rs
							.getString("com_exp_limitproposed")));

					arrOutRow.add(arrOutCol);
				}
				hshValues.put("arrExpRow", arrOutRow);
			}
			if (str_arr.contains("CFS@")) {
				if (rs != null) {
					rs.close();
				}
				int c = 1, d = 0, n = 1;
				rs1 = DBUtils.executeLAPSQuery("sel_finYear^" + strAppNo);
				while (rs1.next()) {
					d++;
					n = 2;
					arrRow = new ArrayList();
					rs = DBUtils.executeLAPSQuery("sel_cashflowMethod^"
							+ strAppNo + "^"
							+ Helper.correctNull(rs1.getString(1)));
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_YEAR")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OPENINGBAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PROMOTEREQUITY")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_BANKFINANCE")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_UNSECLOAN")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_SALEPROCEEDS")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OTHER")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_SOF_TOTAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_COSTOFLAND")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PREMIUMFSI")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_CONSTRUCTCOST")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_MARKETEXPENSES")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_ADMINEXPENSES")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_OTHERFIN")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_INTEREST")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_REPAYMENT")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_PROVISIONTAX")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_APPFIN_TOTAL")));
						arrCol.add(Helper.correctNull(rs
								.getString("COM_CF_CLOSINGBALANCE")));
						arrRow.add(arrCol);
						if (!Helper.correctNull(rs.getString("COM_CF_YEAR"))
								.equalsIgnoreCase(""))// 0)
						{
							hshValues.put("rowcount" + (d), "" + (n++));
						}
						hshValues.put("finyear" + (d), Helper.correctNull(rs
								.getString("COM_CF_FINYEAR")));
					}
					for (int h = 0; arrRow.size() < 15; h++) {
						arrCol = new ArrayList();
						for (int k = 0; k < 16; k++) {
							arrCol.add("");
						}
						arrRow.add(arrCol);
					}
					hshValues.put("CashFlow" + (c), arrRow);
					c++;
				}
				hshValues.put("CashCount", "" + (d));

				rs = DBUtils.executeLAPSQuery("sel_cashflow_projTot^"
						+ strAppNo + "^" + "1");
				while (rs.next()) {
					dbl_opnBal = Double.parseDouble((String) rs
							.getString("COM_CF_OPENINGBAL"));
					dbl_allopnBal = dbl_allopnBal + dbl_opnBal;

					dbl_proEqt = Double.parseDouble((String) rs
							.getString("COM_CF_PROMOTEREQUITY"));
					dbl_allproEqt = dbl_allproEqt + dbl_proEqt;

					dbl_bnkFin = Double.parseDouble((String) rs
							.getString("COM_CF_BANKFINANCE"));
					dbl_allbnkFin = dbl_allbnkFin + dbl_bnkFin;

					dbl_unsec = Double.parseDouble((String) rs
							.getString("COM_CF_UNSECLOAN"));
					dbl_allunsec = dbl_allunsec + dbl_unsec;

					dbl_saleProc = Double.parseDouble((String) rs
							.getString("COM_CF_SALEPROCEEDS"));
					dbl_allsaleProc = dbl_allsaleProc + dbl_saleProc;

					dbl_other = Double.parseDouble((String) rs
							.getString("COM_CF_OTHER"));
					dbl_allother = dbl_allother + dbl_other;

					dbl_sofTot = Double.parseDouble((String) rs
							.getString("COM_CF_SOF_TOTAL"));
					dbl_allsofTot = dbl_allsofTot + dbl_sofTot;

					dbl_costLand = Double.parseDouble((String) rs
							.getString("COM_CF_COSTOFLAND"));
					dbl_allcostLand = dbl_allcostLand + dbl_costLand;

					dbl_premiumfsi = Double.parseDouble((String) rs
							.getString("COM_CF_PREMIUMFSI"));
					dbl_allpremiumfsi = dbl_allpremiumfsi + dbl_premiumfsi;

					dbl_constcost = Double.parseDouble((String) rs
							.getString("COM_CF_CONSTRUCTCOST"));
					dbl_allconstcost = dbl_allconstcost + dbl_constcost;

					dbl_marketexp = Double.parseDouble((String) rs
							.getString("COM_CF_MARKETEXPENSES"));
					dbl_allmarketexp = dbl_allmarketexp + dbl_marketexp;

					dbl_adminexp = Double.parseDouble((String) rs
							.getString("COM_CF_ADMINEXPENSES"));
					dbl_alladminexp = dbl_alladminexp + dbl_adminexp;

					dbl_interest = Double.parseDouble((String) rs
							.getString("COM_CF_INTEREST"));
					dbl_allinterest = dbl_allinterest + dbl_interest;

					dbl_repayment = Double.parseDouble((String) rs
							.getString("COM_CF_REPAYMENT"));
					dbl_allrepayment = dbl_allrepayment + dbl_repayment;

					dbl_provTax = Double.parseDouble((String) rs
							.getString("COM_CF_PROVISIONTAX"));
					dbl_allprovTax = dbl_allprovTax + dbl_provTax;

					dbl_otherFin = Double.parseDouble((String) rs
							.getString("COM_CF_OTHERFIN"));
					dbl_allotherFin = dbl_allotherFin + dbl_otherFin;

					dbl_appfinTot = Double.parseDouble((String) rs
							.getString("COM_CF_APPFIN_TOTAL"));
					dbl_allappfinTot = dbl_allappfinTot + dbl_appfinTot;

					dbl_closingBal = Double.parseDouble((String) rs
							.getString("COM_CF_CLOSINGBALANCE"));
					dbl_allclosingBal = dbl_allclosingBal + dbl_closingBal;

				}
				arrRow = new ArrayList();
				arrCol = new ArrayList();
				arrCol.add("Projected");
				arrCol.add("" + dc.format(dbl_allopnBal));
				arrCol.add("" + dc.format(dbl_allproEqt));
				arrCol.add("" + dc.format(dbl_allbnkFin));
				arrCol.add("" + dc.format(dbl_allunsec));
				arrCol.add("" + dc.format(dbl_allsaleProc));
				arrCol.add("" + dc.format(dbl_allother));
				arrCol.add("" + dc.format(dbl_allsofTot));
				arrCol.add("" + dc.format(dbl_allcostLand));
				arrCol.add("" + dc.format(dbl_allpremiumfsi));
				arrCol.add("" + dc.format(dbl_allconstcost));
				arrCol.add("" + dc.format(dbl_allmarketexp));
				arrCol.add("" + dc.format(dbl_alladminexp));
				arrCol.add("" + dc.format(dbl_allotherFin));
				arrCol.add("" + dc.format(dbl_allinterest));
				arrCol.add("" + dc.format(dbl_allrepayment));
				arrCol.add("" + dc.format(dbl_allprovTax));
				arrCol.add("" + dc.format(dbl_allappfinTot));
				arrCol.add("" + dc.format(dbl_allclosingBal));
				arrRow.add(arrCol);

				hshValues.put("CashFlowTOT", arrRow);

			}
			if (str_arr.contains("MED1@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "MU");
				hshRequestValues.put("pagefrom1", "M1");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Method I of lending other than export limits");
				hshValues.put("method1", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "M1");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewM1", hshassess);
			}
			if (str_arr.contains("MED2@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "MU");
				hshRequestValues.put("pagefrom1", "M2");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Method II of lending other than export limits");
				hshValues.put("method2", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "M2");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewM2", hshassess);
			}
			if (str_arr.contains("WCGMED@")) {
				hshRequestValues = new HashMap();
				hshRequestValues.put("appno", strAppNo);
				hshRequestValues.put("page", "FL");
				hshRequestValues.put("pagefrom1", "AFL");
				hshRequestValues.put("printYear", "Y");
				hshRequestValues = financial.getDataRatio(hshRequestValues);
				hshRequestValues.put("page",
						"Assessment of working capital limits");
				hshValues.put("method3", hshRequestValues);

				HashMap hshassess = new HashMap();
				hshassess.put("appno", strAppNo);
				hshassess.put("page", "INV");
				hshassess.put("pagefrom1", "I1");
				hshassess.put("printYear", "Y");
				hshassess.put("pagename", "AFL");
				hshassess = financial.getDataAssessment(hshassess);
				hshassess.put("pageType", "processnote");
				hshValues.put("hshnewAFL", hshassess);
			}

			if (str_arr.contains("AOI@")) {
				if (rs != null) {
					rs.close();
				}
				int c = 1, d = 0, n = 1;
				String strDate = "";
				arrOutRowCons = new ArrayList();
				rs1 = DBUtils
						.executeLAPSQuery("sel_inland_finYear^" + strAppNo);
				while (rs1.next()) {

					strDate = "";
					strDate = Helper.correctNull(rs1.getString("com_ia_year"));
					if (!strDate.equalsIgnoreCase("")) {
						d++;
						n = 2;
						arrRow = new ArrayList();
						rs = DBUtils
								.executeLAPSQuery("sel_fin_inlandAssessment^"
										+ strAppNo + "^" + strDate);
						while (rs.next()) {
							arrCol = new ArrayList();
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_YEAR")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_SALES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_PURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_PROJPURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_AVGMONPURCHASES")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_CREDITPERIOD")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_TRANSITPERIOD")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_LCREQUIRED")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_APPLIEDLIMIT")));
							arrCol.add(Helper.correctNull(rs
									.getString("COM_IA_RECOMMLIMIT")));
							// arrCol.add(Helper.correctNull(rs.getString("COM_IA_YEAR")));
							arrRow.add(arrCol);
						}
						arrOutRowCons.add(arrRow);
					}
				}
				hshValues.put("Inland", arrOutRowCons);
				hshValues.put("InlandCount", "" + (d));
			}
			if (str_arr.contains("CASHBUD@")) {
				int i = 0, j = 1, k = 0;
				arrRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_count_cashbudgetyear^"
						+ strAppNo);
				while (rs.next()) {
					i += 1;
					j = 2;
					arrRow = new ArrayList();
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("com_cash_budget_method_sel^"
									+ strAppNo
									+ "^"
									+ Helper.correctNull(rs
											.getString("CCBM_YEAR")));
					while (rs1.next()) {
						arrCol = new ArrayList();
						hshValues.put("rowtype" + (i), Helper.correctNull(rs1
								.getString("CCBM_TYPE")));
						if (rs1.isLast()) {
							arrCol.add("Total");// 0}
						} else {
							arrCol.add(Helper.correctNull(rs1
									.getString("CCBM_VAL")));// 0
						}
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_NT_CONTRCT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SB_CONTRCT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TOT_RCPT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_MATERIALS"))));// 5
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SAL_WGS"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SB_CONTRCT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_HIRE_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_LBR_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_DSL_PTRL_CHRG"))));// 10
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_RPR_MNT"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TRVL_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_OPRTNG_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_BNK_INT_CHRG"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TAX_PAY"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_ADMN_EXP"))));// 16
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_OTHR_EXP"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_TOT_OFLW"))));
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_SRPLS_DFCT"))));
						// arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1.getString("CCBM_OPN_CRDT_CSH"))));
						// arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1.getString("CCBM_SRPLS_DFTC_TOT"))));//21
						arrCol.add(Helper.checkDecimal(Helper.correctNull(rs1
								.getString("CCBM_BNK_FIN"))));
						arrRow.add(arrCol);
						if (!Helper.correctNull(rs1.getString("CCBM_VAL"))
								.equalsIgnoreCase(""))// 0)
						{
							hshValues.put("rowcount" + (i), "" + (j++));
						}
						k++;

						hshValues.put("cb_finyear" + (i), Helper
								.correctNull(rs1.getString("CCBM_FIN_YEAR")));
					}
					hshValues.put("y" + (i), arrRow);
				}
				hshValues.put("count", "" + (i));
			}
			if (str_arr.contains("AOW@")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^20");
				if (rs1.next()) {
					hshValues.put("com_wcassessment_comments", Helper
							.CLOBToString(rs1
									.getClob("com_assessment_comments")));
				}
			}
			if (str_arr.contains("AOA@")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_assessment_tl^" + strAppNo
						+ "^6");
				if (rs1.next()) {
					hshValues.put("com_tlassessment_comments", Helper
							.CLOBToString(rs1
									.getClob("com_assessment_comments")));
				}
			}
			hshRequestValues = new HashMap();
			hshRequestValues.put("appno", strAppNo);
			hshValues.put("sensitiveAnalysis", financial
					.getSensitiveData(hshRequestValues));
			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_tlothers^" + strAppNo);
			while (rs1.next()) {
				hshValues.put("estimated_date", Helper.correctNull(rs1
						.getString("com_date")));
				hshValues.put("estimated_remarks", Helper.CLOBToString(rs1
						.getClob("com_comments")));
			}
			strQuery2 = SQLParser.getSqlQuery("combankingselectNEW^" + strAppNo
					+ "^ ");
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery2);
			while (rs.next()) {

				String strcombk_modtype = Helper.correctNull((String) rs
						.getString("combk_modtype"));
				String strFacility = Helper.correctNull((String) rs
						.getString("combk_facility"));
				String[] strFacilityArr = strFacility.split("~");
				if (strFacilityArr.length > 0) {
					if (strcombk_modtype.equalsIgnoreCase("r")) {
						strQuery2 = SQLParser.getSqlQuery("sel_retProductDesc^"
								+ strFacilityArr[0]);
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}

					} else if (strcombk_modtype.equalsIgnoreCase("c")) {
						strQuery2 = SQLParser
								.getSqlQuery("sel_FacilityCorpDesc^"
										+ strFacilityArr[0] + "^c");
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}
					} else if (strcombk_modtype.equalsIgnoreCase("a")) {
						strQuery2 = SQLParser
								.getSqlQuery("sel_FacilityCorpDesc^"
										+ strFacilityArr[0] + "^a");
						rs1 = DBUtils.executeQuery(strQuery2);
						if (rs1.next()) {
							Helper.correctNull(rs1.getString("com_facdesc"));// 18
						}
					}
				}
				Helper.correctDouble((String) rs.getString("combk_limit"));
				Helper.correctDouble((String) rs.getString("combk_limit"));
				Helper.correctDouble((String) rs.getString("combk_sancrefno"));
				Helper.correctDouble((String) rs.getString("combk_inttype"));
				Helper.correctDouble((String) rs.getString("combk_spread"));
				Helper.correctDouble((String) rs.getString("combk_os"));
				Helper.correctDouble((String) rs.getString("combk_duedate"));
				Helper.correctDouble((String) rs.getString("combk_arrears"));
			}
			strQuery = SQLParser.getSqlQuery("sel_combankingdetails^"
					+ strAppNo);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COM_ASSETCLASS", correctNull(rs
						.getString("COM_ASSETCLASS")));
			}
			if (rs != null) {
				rs.close();
			}

			// Added by bhaskar for income from cropsfor agriculture
			arrRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("seldistfinayearsofcropincome^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CRP_FINYR")));// 0
				if (rs2 != null) {
					rs2.close();
				}
				if (!Helper.correctNull((String) rs.getString("AGR_CRP_FINYR"))
						.equalsIgnoreCase("")) {
					rs2 = DBUtils.executeLAPSQuery("selincomefromcrops^"
							+ strAppNo
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("AGR_CRP_FINYR")));
					arrIncomeFromCropRow = new ArrayList();
					while (rs2.next()) {
						arrIncomeFromCropCol = new ArrayList();
						strSeasonType = rs2.getString("agr_crp_season");// 0
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("getstaticdatavaldispcorporate^"
										+ "131" + '^' + strSeasonType);
						if (rs1.next()) {
							strSeasonName = Helper.correctNull((String) rs1
									.getString("stat_data_desc1"));
						}
						arrIncomeFromCropCol.add(strSeasonName);// 0
						strSeasonName = "";
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_cropname"));// 1
						arrIncomeFromCropCol.add(rs2.getString("agr_crp_area"));// 2
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_yieldperacre"));// 3
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totalyield"));// 4
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_priceperqtl"));// 5
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totalinc"));// 6
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_costofcult"));// 7
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_totcostofcult"));// 8
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_surplus"));// 9
						String strTotal = rs2.getString("agr_crp_surplus");
						dblTotal = Double.parseDouble(strTotal);
						dblTotalAmt += dblTotal;
						strTotalAmt = dc.format(dblTotalAmt);
						arrIncomeFromCropCol.add(rs2
								.getString("agr_crp_season"));// 10
						arrIncomeFromCropCol.add(rs2.getString("agr_crp_sno"));// 11
						strCropType = rs2.getString("agr_crp_cropname");
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("getstaticdatavaldispcorporate^"
										+ "130" + '^' + strCropType);
						if (rs1.next()) {
							strCropName = Helper.correctNull((String) rs1
									.getString("stat_data_desc1"));
						}
						arrIncomeFromCropCol.add(strCropName);// 12
						strexiprotype = Helper.correctNull(rs2
								.getString("agr_crp_exiprotype"));
						arrIncomeFromCropCol.add(strexiprotype);// 13 added by
																// ganesan for
																// the type

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
								+ "135"
								+ '^'
								+ Helper.correctNull((String) rs2
										.getString("agr_crp_areaunit")));
						if (rs1.next()) {
							arrIncomeFromCropCol.add(Helper
									.correctNull((String) rs1
											.getString("stat_data_desc1")));
						} else {
							arrIncomeFromCropCol.add("");
						}

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("getstaticdata_soldid^"
								+ "136"
								+ '^'
								+ Helper.correctNull((String) rs2
										.getString("agr_crp_yieldunit")));
						if (rs1.next()) {
							arrIncomeFromCropCol.add(Helper
									.correctNull((String) rs1
											.getString("stat_data_desc1")));
						} else {
							arrIncomeFromCropCol.add("");
						}

						if (Helper.correctNull(strexiprotype).equalsIgnoreCase(
								"1")) {

							// rs1=DBUtils.executeLAPSQuery("sel_exiproagr_croppingpattern^"+strAppNo+'^'+strexiprotype);
							dbl_exitot = Double.parseDouble((String) rs2
									.getString("agr_crp_surplus"));
							dbl_exialltot = dbl_exialltot + dbl_exitot;

						} else if (Helper.correctNull(strexiprotype)
								.equalsIgnoreCase("2")) {
							// rs1=DBUtils.executeLAPSQuery("sel_exiproagr_croppingpattern^"+strAppNo+'^'+strexiprotype);

							dbl_protot = Double.parseDouble((String) rs2
									.getString("agr_crp_surplus"));
							dbl_proalltot = dbl_proalltot + dbl_protot;

						}
						strCropName = "";
						arrIncomeFromCropRow.add(arrIncomeFromCropCol);
					}
				}
				arrCol.add(arrIncomeFromCropRow);// 1
				arrRow.add(arrCol);
			}
			hshValues.put("total", strTotalAmt);
			hshValues.put("arrData", arrRow);
			hshValues.put("Exis_Tootal", dc.format(dbl_exialltot));
			hshValues.put("prop_Tootal", dc.format(dbl_proalltot));
			hshValues.put("strLoanTypeNew", strLoanType);

			HashMap hshFarmBudget = new HashMap();
			ComProposalBean cpb = new ComProposalBean();
			hshReqValues.put("callform", "Processnote");
			hshFarmBudget = cpb.getFarmBudget(hshReqValues);
			hshValues.put("hshFarm", hshFarmBudget);

			arrRow = new ArrayList();
			rs = DBUtils
					.executeLAPSQuery("selcropassementforappno^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_SEASON")));// 0
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_CROP")));// 1
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_AREACUL")));// 2
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_AMOUNT")));// 3
				arrCol.add(Helper.correctNull((String) rs
						.getString("AGR_CAS_ELIGIBILITY")));// 4
				arrRow.add(arrCol);
			}
			hshValues.put("arrCropAssessment", arrRow);

			/**
			 * Added by: Vinoth kumar Date : March 08 2014 Purpose : Display
			 * Physical and Financial Programe and DSS page Details in Appraisal
			 * Note
			 */

			String modtype = Helper.correctNull((String) hshReqValues
					.get("sessionModuleType"));
			if (modtype.equalsIgnoreCase("AGR")) {
				hshPhysicsAndFinValues = (HashMap) EJBInvoker.executeStateLess(
						"lapsReport", hshReqValues, "getFinProgrammePrint");
				hshValues.put("hshPhysicsAndFinValues", hshPhysicsAndFinValues);

				hshReqValues.put("hidapplicantid", strAppId);
				hshReqValues.put("strPrintFlag", "Y");
				hshDSSData = (HashMap) EJBInvoker.executeStateLess(
						"comproposal", hshReqValues, "getDSS");
				hshValues.put("hshDSSData", hshDSSData);
			}
			// added by bhaskar for Crop Loan Aseesment

			// Added by DINESH for Introduction : Remarks on 10/03/2014

			String strPage = "gist";
			strQuery = SQLParser.getSqlQuery("sel_comments^" + strPage + "^"
					+ strAppNo);

			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_comments" + strPage, correctNull(Helper
						.CLOBToString(rs.getClob("com_comments"))));
			}

			// For Benchmark Values by DINESH on 11/03/2014
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("com_demographics_cma_sel^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (correctNull((String) rs.getString("demo_finstandard"))
						.equalsIgnoreCase("")
						|| correctNull(
								(String) rs.getString("demo_finstandard"))
								.equalsIgnoreCase("null")) {
					cma = "0";
				} else {
					cma = correctNull((String) rs.getString("demo_finstandard"));
				}
			}

			String yearselect = "";

			/** Take last audited year in Bench Mark Ratio */
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("com_finappvalues_audit_select^"
					+ strAppNo + "^<=^<");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				yearselect = correctNull((String) rs.getString("audityear"));
			} else {
				yearselect = "";
			}
			if (rs1 != null)
				rs1.close();

			String strDSCRYear = null, desc = "a", formuladesc = "";
			rs = DBUtils.executeLAPSQuery("com_benchmarkrows^" + strAppNo + "^"
					+ cma);
			while (rs.next()) {
				vecRec = new ArrayList();
				vecRec.add(correctNull(rs.getString("BENCH_ROWID")));
				vecRec.add(correctNull(rs.getString("BENCH_CMANO")));
				vecRec.add(correctNull(rs.getString("BENCH_ROWDESC")));
				vecRec.add(correctNull(rs.getString("BENCH_POLICY")));
				vecRec.add(correctNull(rs.getString("BENCH_DEPENDSON")));
				formuladesc = (correctNull(rs.getString("BENCH_FORMULA")));

				if (Helper.correctNull(rs.getString("BENCH_DEPENDSON"))
						.equalsIgnoreCase("FI")) {
					if (!yearselect.trim().equalsIgnoreCase("")) {
						HashMap hshformula = new HashMap();
						hshformula.put("appno", strAppNo);
						hshformula.put("formulaid", formuladesc);
						hshformula.put("curryear", yearselect);
						hshformula.put("prevyear", "");
						hshformula.put("currfinancialtype", desc);
						hshformula.put("prevfinancialtype", "a");
						hshformula.put("internalcalc", "N");
						hshformula.put("hshdata", new HashMap());
						hshRes = (HashMap) EJBInvoker.executeStateLess(
								"comformula", hshformula, "GetFinValue");
						vecRec.add(Helper.correctNull((String) hshRes
								.get("strTotalValue")));
					} else {
						vecRec.add("0.00");
					}
				} else if (Helper.correctNull(rs.getString("BENCH_DEPENDSON"))
						.equalsIgnoreCase("DSCR")) {
					/**
					 * Take Minimum DSCR value of all the financial year in
					 * Bench Mark Ratio
					 */
					// vecRec.add("0.0");
				}

				else {
					vecRec.add("0.00");
				}

				vecRec.add(correctNull(rs
						.getString("BENCHMARK_FINVALUES_STATUS")));
				vecData.add(vecRec);
			}
			hshValues.put("vecData", vecData);

			// For Ratification
			String strsel = "";
			strpage = "ratification";
			int i = 0;
			String strstatecode = "133";
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("selstaticdata^" + strstatecode);

			while (rs.next()) {
				hshValues.put("rati_desc" + i, Helper.correctNull(rs
						.getString("stat_data_desc1")));

				strsel = Helper.correctNull(rs.getString("stat_data_sno"));
				if (rs1 != null)
					rs1.close();

				strQuery = SQLParser.getSqlQuery("sel_ratification_comments^"
						+ strpage + "^" + strsel + "^" + strAppNo);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					hshValues.put("rati_comments" + i, Helper.CLOBToString(rs1
							.getClob("com_comments")));
					i++;
				}

			}
			hshValues.put("rati_Count", "" + i);
			// For T&C - Specific , Inst. to the Branch

			String strFacsno[] = { "97" };
			String srModuleType = "", mode = "", strFacCode = "", termType = "", strQuery1 = "";
			String strPrePost = "s";
			hshValues.put("strPrePost", strPrePost);

			for (i = 0; i < strFacsno.length; i++) {
				if (strFacsno[i].equals("0"))
					mode = "G";
				else if (strFacsno[i].equals("99")) {
					mode = "O";
				} else if (strFacsno[i].equals("98")) {
					mode = "B";
				} else if (strFacsno[i].equals("97")) {
					mode = "P";
				} else {
					mode = "S";
				}
				if (strSessionModuleType.equalsIgnoreCase("AGR")) {
					srModuleType = "A";
				} else {
					srModuleType = "C";
				}

				arrFacilityTerm = new ArrayList();
				arrFacilityTermType = new ArrayList();
				arrFacilityId = new ArrayList();
				arrFacilityTermStatus = new ArrayList();
				arrFacilityPrepost = new ArrayList();
				arrParentID = new ArrayList();
				arrFacilityTermStatusapp = new ArrayList();

				termType = "P";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				boolean boolresultflag = rs.next();
				if (boolresultflag) {
					do {
						arrFacilityTerm.add(correctNull(rs.getString(1)));
						arrFacilityTermType.add(correctNull(rs.getString(2)));
						arrFacilityId.add(correctNull(rs.getString(3)));
						arrFacilityTermStatus.add(correctNull(rs.getString(4)));
						arrParentID.add(correctNull(rs.getString(5)));
						strPatentid = Integer.parseInt(Helper
								.correctInt((String) rs.getString(3)));

						strQuery1 = SQLParser
								.getSqlQuery("sel_termscond_specific^"
										+ strAppNo + "^" + termType + "^"
										+ mode + "^" + srModuleType + "^"
										+ strPatentid);
						rs1 = DBUtils.executeQuery(strQuery1);
						while (rs1.next()) {
							arrFacilityTerm.add(correctNull(rs1.getString(1)));
							arrFacilityTermType.add(correctNull(rs1
									.getString(2)));
							arrFacilityId.add(correctNull(rs1.getString(3)));
							arrFacilityTermStatus.add(correctNull(rs1
									.getString(4)));
							arrParentID.add(correctNull(rs1.getString(5)));
						}
						if (rs1 != null)
							rs1.close();

					} while (rs.next());
				}
				hshValues.put("arrFacilityTerm" + i, arrFacilityTerm);
				hshValues.put("arrFacilityTermType" + i, arrFacilityTermType);
				hshValues.put("arrFacilityIdVal" + i, arrFacilityId);
				hshValues.put("arrFacilityId" + i, strFacsno[i]);
				hshValues.put("arrFacilityTermStatus" + i,
						arrFacilityTermStatus);
				hshValues.put("arrParentID" + i, arrParentID);
				if (rs != null)
					rs.close();
				termType = "A";
				strQuery = SQLParser.getSqlQuery("sel_termscond_specific^"
						+ strAppNo + "^" + termType + "^" + mode + "^"
						+ srModuleType + "^" + "0");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					arrFacilityTermApp.add(correctNull(rs.getString(1)));
					arrFacilityTermTypeApp.add(correctNull(rs.getString(2)));
					arrFacilityIdApp.add(correctNull(rs.getString(3)));
					arrFacilityTermStatusapp.add(correctNull(rs.getString(4)));
				}

				hshValues.put("arrFacilityTermApp" + i, arrFacilityTermApp);
				hshValues.put("arrFacilityTermTypeApp" + i,
						arrFacilityTermTypeApp);
				hshValues.put("arrFacilityIdAppVal" + i, arrFacilityIdApp);
				hshValues.put("arrFacilityTermStatusapp" + i,
						arrFacilityTermStatusapp);
			}

			// For Financial & Business Performance by DINESH on 31/03/2014

			ArrayList vecVal = new ArrayList();
			ArrayList vecRec1 = new ArrayList();
			ArrayList vecRec2 = new ArrayList();
			String strcomappid = correctNull((String) hshValues.get("comappid"));
			String strCompanyname = "0";
			String strindtype = correctNull((String) hshValues
					.get("industryType"));

			if (strcomappid.equalsIgnoreCase("")) {
				rs = DBUtils.executeLAPSQuery("comfunsel3^" + strAppNo);
				if (rs.next()) {
					strcomappid = Helper.correctNull((String) rs
							.getString("demo_appid"));
				}
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("com_interfirm_select^" + strindtype
					+ "^" + strcomappid);
			while (rs.next()) {
				vecRec1.add(correctNull((String) rs
						.getString("comapp_id")));
				vecRec2.add(correctNull((String) rs
						.getString("comapp_companyname")));
			}

			vecVal.add(vecRec1);
			vecVal.add(vecRec2);
			hshValues.put("vecVal", vecVal);
			hshValues.put("vecname", vecRec2);
			hshValues.put("vecid", vecRec1);

			if (!strCompanyname.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("selfingrpconcernval^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("intcompfreetxt_txt1", correctNull(rs
							.getString("COM_FREETEXT1"))); // 1
					hshValues.put("intcompfreetxt_txt2", correctNull(rs
							.getString("COM_FREETEXT2")));// 2
					hshValues.put("intcompfreetxt_txt3", correctNull(rs
							.getString("COM_FREETEXT3")));// 3
					hshValues.put("COM_FREETEXT4", correctNull(rs
							.getString("COM_FREETEXT4")));// 4
				}

				strQuery = SQLParser.getSqlQuery("selfingrpconcerncompare^"
						+ strAppNo + "^" + strCompanyname);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				int k = 0;
				while (rs.next()) {
					k = k + 1;
					hshValues.put("txt_compname" + k, correctNull(rs
							.getString("fingrpconcern_comname"))); // 1
					hshValues.put("txt_year" + k, correctNull(rs
							.getString("fingrpconcern_year")));// 2
					hshValues.put("txt_type" + k, correctNull(rs
							.getString("fingrpconcern_fintype")));// 3
					hshValues.put("txt_gross" + k, correctNull(rs
							.getString("fingrpconcern_grosssales")));// 4
					hshValues.put("txt_netsales" + k, correctNull(rs
							.getString("fingrpconcern_netsales")));// 5
					hshValues.put("txt_netprofit" + k, correctNull(rs
							.getString("fingrpconcern_netprofit"))); // 6
					hshValues.put("txt_capital" + k, correctNull(rs
							.getString("fingrpconcern_capital")));// 7
					hshValues.put("txt_tangnet" + k, correctNull(rs
							.getString("fingrpconcern_tangnetworth")));// 8
					hshValues.put("txt_network" + k, correctNull(rs
							.getString("fingrpconcern_networkcap"))); // 9
					hshValues.put("txt_toltnw" + k, correctNull(rs
							.getString("fingrpconcern_toltnw")));// 10

					hshValues.put("txt_currratio" + k, correctNull(rs
							.getString("fingrpconcern_currratio"))); // 11
					hshValues.put("txt_estproturn" + k, correctNull(rs
							.getString("fingrpconcern_estproturn")));// 12
					hshValues.put("txt_totwork" + k, correctNull(rs
							.getString("fingrpconcern_totcapital")));// 13
					hshValues.put("txt_seccoverinclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverinclude")));// 14
					hshValues.put("txt_seccoverexclude" + k, correctNull(rs
							.getString("fingrpconcern_seccoverexclude")));// 15
					hshValues.put("txt_lastcredit" + k, correctNull(rs
							.getString("fingrpconcern_lastcredit")));// 16
					hshValues.put("txt_freetext" + k, correctNull(rs
							.getString("fingrpconcern_freetext1")));// 17
					hshValues.put("txt_freetext1" + k, correctNull(rs
							.getString("fingrpconcern_freetext2")));// 18
					hshValues.put("txt_freetext2" + k, correctNull(rs
							.getString("fingrpconcern_freetext3")));// 19
					hshValues.put("FINGRPCONCERN_FREETEXT4" + k, correctNull(rs
							.getString("FINGRPCONCERN_FREETEXT4")));// 19
				}
			}
			hshValues.put("companyname", strCompanyname);

			// For Security Coverage by DINESH on 31/03/2014
			HashMap hshsecdet = new HashMap();
			HashMap hshsecdetFrom = new HashMap();
			hshsecdetFrom.put("valuesin", strValuesIn1);
			hshsecdetFrom.put("appno", strAppNo);
			hshsecdetFrom.put("hidapplicantid", strOldAppId);
			hshsecdet = new SecurityMasterBean()
					.getCollateralSecurityDisplaynew(hshsecdetFrom);
			hshValues.put("hshsecdet", hshsecdet);

			hshValues.put("arrNewRow", (ArrayList) hshsecdet.get("arrNewRow"));

			hshValues.put("dbl_totvalexis", (String) hshsecdet
					.get("dbl_totvalexis"));
			hshValues.put("dbl_totvalproposed", (String) hshsecdet
					.get("dbl_totvalproposed"));

			hshValues.put("dbl_secexitot", (String) hshsecdet
					.get("dbl_secexitot"));
			hshValues.put("dbl_secproptot", (String) hshsecdet
					.get("dbl_secproptot"));

			hshValues.put("dbl_secexicoverage", (String) hshsecdet
					.get("dbl_secexicoverage"));
			hshValues.put("dbl_secpropcoverage", (String) hshsecdet
					.get("dbl_secpropcoverage"));

			// Customer Banking Arrangement Info by DINESH on 01/04/2014

			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + strAppId);
			if (rs.next()) {
				strVal = correctNull(rs.getString("indinfo_bankarrangement"));
				hshValues.put("info_bankArng", Helper.correctInt((String) rs
						.getString("indinfo_bankarrangement")));

				if (strVal.equals("2")) {
					strVal = "Multiple";
				} else if (strVal.equals("3")) {
					strVal = "Consortium";
				} else {
					strVal = "Sole";
				}
				hshValues.put("presentBankArng", strVal);
			}

			ArrayList arrRow12 = new ArrayList();
			ArrayList arrCol12 = new ArrayList();
			String strBreakup = "", strInv = "", strExpd = "", strReceiv = "", strTurnover = "", strCreditors = "", strProfit = "", strOtherAssets = "", strOthr = "", strCashmargin = "", strStockAss = "", strDebitorAnalysis = "", strPeerconcerns = "", strRetireCapacity = "", strPerformCapacity = "", strOfferCashMargin = "", strExpiredBG = "";
			;
			String strQuery12 = SQLParser
					.getSqlQuery("sel_assessmnt_comments^assmntcomments^"
							+ strAppNo);
			ResultSet rs12 = DBUtils.executeQuery(strQuery12);
			while (rs12.next()) {
				arrCol12 = new ArrayList();
				String strComment = "";
				String strsno = Helper.correctNull((String) rs12
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("1")) {
					strComment = "Break up of limits";
					strBreakup = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("2")) {
					strComment = "Cash Margin";
					strCashmargin = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("3")) {
					strComment = "Inventory";
					strInv = Helper.CLOBToString(rs12.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("4")) {
					strComment = "Expenditure";
					strExpd = Helper.CLOBToString(rs12.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("5")) {
					strComment = "Receivables";
					strReceiv = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("6")) {
					strComment = "Turnover";
					strTurnover = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("7")) {
					strComment = "Creditors";
					strCreditors = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("8")) {
					strComment = "Profit and Loss";
					strProfit = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("9")) {
					strComment = "Other Current Assets and Liabilitie";
					strOtherAssets = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("12")) {
					strComment = "Others";
					strOthr = Helper.CLOBToString(rs12.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("13")) {
					strComment = "comments on stock of work in process/progress";
					strStockAss = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("16")) {
					strComment = "Age wise Debtor Analysis";
					strDebitorAnalysis = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("14")) {
					strComment = "Comment on Comparison with Peer Concerns";
					strPeerconcerns = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("17")) {
					strComment = "Capacity to retire the obligations under LC/BG/Buyers’ Credit";
					strRetireCapacity = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("18")) {
					strComment = "Capacity to Perform under Bank Guarantee";
					strPerformCapacity = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("19")) {
					strComment = "Offer comments about Cash margin";
					strOfferCashMargin = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("20")) {
					strComment = "Comments on Expired BG’s";
					strExpiredBG = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				}
				arrCol12.add(strComment);
				arrCol12.add(Helper.CLOBToString(rs12.getClob("COM_COMMENTS")));
				arrRow12.add(arrCol12);
			}

			if (rs12 != null)
				rs12.close();
			rs12 = DBUtils.executeLAPSQuery("sel_assessmnt_comments^Industry^"
					+ strAppNo);
			if (rs12.next()) {
				hshValues.put("strIndustryAnalysis", Helper.correctNull(Helper
						.CLOBToString(rs12.getClob("COM_COMMENTS"))));
			}

			hshValues.put("arrAssmntRow", arrRow12);
			hshValues.put("strBreakup", strBreakup);
			hshValues.put("strInv", strInv);
			hshValues.put("strExpd", strExpd);
			hshValues.put("strReceiv", strReceiv);
			hshValues.put("strTurnover", strTurnover);
			hshValues.put("strCreditors", strCreditors);
			hshValues.put("strProfit", strProfit);
			hshValues.put("strOtherAssets", strOtherAssets);
			hshValues.put("strOthr", strOthr);
			hshValues.put("strCashmargin", strCashmargin);
			hshValues.put("strStockAss", strStockAss);
			hshValues.put("strDebitorAnalysis", strDebitorAnalysis);
			hshValues.put("strPeerconcerns", strPeerconcerns);
			hshValues.put("strRetireCapacity", strRetireCapacity);
			hshValues.put("strPerformCapacity", strPerformCapacity);
			hshValues.put("strOfferCashMargin", strOfferCashMargin);
			hshValues.put("strExpiredBG", strExpiredBG);

			String strQuery13 = SQLParser
					.getSqlQuery("sel_assessmnt_comments^Management^"
							+ strAppNo);
			ResultSet rs13 = DBUtils.executeQuery(strQuery13);
			while (rs13.next()) {
				String strsno = Helper.correctNull((String) rs13
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("8"))
					hshValues.put("MgmtComments8", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("9"))
					hshValues.put("MgmtComments9", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("10"))
					hshValues.put("MgmtComments10", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("11"))
					hshValues.put("MgmtComments11", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("12"))
					hshValues.put("MgmtComments12", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("13"))
					hshValues.put("MgmtComments13", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("16"))
					hshValues.put("MgmtComments16", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("18"))
					hshValues.put("MgmtComments18", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("19"))
					hshValues.put("MgmtComments19", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("20"))
					hshValues.put("MgmtComments20", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("21"))
					hshValues.put("MgmtComments21", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("22"))
					hshValues.put("strEmailDate", Helper.correctNull(rs13
							.getString("COM_DACCODATE")));
				else if (strsno.equalsIgnoreCase("23"))
					hshValues.put("MgmtComments23", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));
				else if (strsno.equalsIgnoreCase("24"))
					hshValues.put("MgmtComments24", Helper.CLOBToString(rs13
							.getClob("COM_COMMENTS")));

				hshValues.put("OtherRelevantInfo", "1");
			}

			// BG Assessment

			if (str_arr.contains("BGA@")) {
				if (rs12 != null)
					rs12.close();
				String strbnkGurnt = "";
				strQuery = SQLParser
						.getSqlQuery("sel_assessmnt_comments^bgassessment^"
								+ strAppNo);
				rs12 = DBUtils.executeQuery(strQuery);
				while (rs12.next()) {
					String strComment = "";
					String strsno = Helper.correctNull((String) rs12
							.getString("COM_SNO"));
					if (strsno.equalsIgnoreCase("1")) {
						strComment = "Bank Guarantee";
						strbnkGurnt = Helper.CLOBToString(rs12
								.getClob("COM_COMMENTS"));
					}
				}
				hshValues.put("strbnkGurnt", strbnkGurnt);
			}
			if (str_arr.contains("AOR@")) {
				rs = DBUtils.executeLAPSQuery("sel_com_restr_assessment^"
						+ strAppNo);
				if (rs.next()) {
					hshValues.put("com_proj_details", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("com_proj_details"))));
					hshValues.put("com_restr_reasons", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_restr_reasons"))));
					hshValues.put("com_restr_justification", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_restr_justification"))));
					hshValues.put("com_exi_repayschedule", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_exi_repayschedule"))));
					hshValues.put("com_revised_repayschedule", Helper
							.correctNull(Helper.CLOBToString(rs
									.getClob("com_revised_repayschedule"))));
					hshValues.put("strRestrAss", "true");
				} else {
					hshValues.put("strRestrAss", "false");
				}
			}

			// Sales Justification

			if (rs12 != null)
				rs12.close();
			String strLastYrEst = "", strCurrYrEst = "", strJustification = "";
			strQuery = SQLParser
					.getSqlQuery("sel_assessmnt_comments^salesjustify^"
							+ strAppNo);
			rs12 = DBUtils.executeQuery(strQuery);
			while (rs12.next()) {
				String strComment = "";
				String strsno = Helper.correctNull((String) rs12
						.getString("COM_SNO"));
				if (strsno.equalsIgnoreCase("1")) {
					strComment = "Estimates and actual for last three years";
					strLastYrEst = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("2")) {
					strComment = "Estimates of sales for the current year & for the next year I and II";
					strCurrYrEst = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				} else if (strsno.equalsIgnoreCase("3")) {
					strComment = "Justification for sales";
					strJustification = Helper.CLOBToString(rs12
							.getClob("COM_COMMENTS"));
				}
			}
			hshValues.put("strLastYrEst", strLastYrEst);
			hshValues.put("strCurrYrEst", strCurrYrEst);
			hshValues.put("strJustification", strJustification);

			// Other Non Funded Assessment

			strQuery = SQLParser.getSqlQuery("sel_nonfundassessment^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("com_nonfund_comments", correctNull(Helper
						.CLOBToString(rs.getClob("com_nonfund_comments"))));
			}

			// Term of sanction

			strQuery = SQLParser.getSqlQuery("sel_comments^commentsTrans^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("term_com_comments", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_comments^presentproposal^"
					+ strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("presentproposal_comment", correctNull(Helper
						.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "assdscr");
			if (rs.next()) {
				hshValues.put("fin_comments_dscr", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_dscr", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "cashflow");
			if (rs.next()) {
				hshValues.put("fin_comments_cashflow", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_cashflow", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "dscrsensvty");
			if (rs.next()) {
				hshValues.put("fin_comments_sensitive", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_sensitive", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Method1");
			if (rs.next()) {
				hshValues.put("fin_comments_method1", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_method1", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Method2");
			if (rs.next()) {
				hshValues.put("fin_comments_method2", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_method2", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils
					.executeLAPSQuery("sel_comcomments^InterFirmComparsion1^0^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("fin_comments_interfirm1", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ "Assessmentofwc");
			if (rs.next()) {
				hshValues.put("fin_comments_wcg", Helper.CLOBToString(rs
						.getClob("fin_comments")));

				hshValues.put("fin_comments1_wcg", Helper.CLOBToString(rs
						.getClob("fin_comments1")));
			}

			if (rs != null)
				rs.close();
			String strProjection = "";
			rs = DBUtils.executeLAPSQuery("sel_projectiondata^" + strAppNo);
			if (rs.next()) {
				strProjection = "Projection";
			}
			if (rs != null) {
				rs.close();
			}
			hshValues.put("strProjection", strProjection);

			// added by bhaskar for non base rate facilities
			if (rs != null) {
				rs.close();
			}
			String strComments = "";
			rs = DBUtils.executeLAPSQuery("sel_faclityforcommentsonintrate^"
					+ strAppNo);
			while (rs.next()) {

				String strFacSno = Helper.correctNull(rs.getString("term_sno"));
				arrColNonBr = new ArrayList();
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils
						.executeLAPSQuery("sel_commentsoninterestrate^commentsonintrestrate"
								+ "^" + strFacSno + "^" + strAppNo);
				if (rs1.next()) {
					strComments = correctNull(Helper.CLOBToString(rs1
							.getClob("COM_COMMENTS")));
					if (!strComments.equalsIgnoreCase("")) {
						arrColNonBr.add(Helper.correctNull(rs
								.getString("term_desc")));
						arrColNonBr.add(correctNull(Helper.CLOBToString(rs1
								.getClob("COM_COMMENTS"))));
						if (correctNull(rs.getString("com_headfac"))
								.equalsIgnoreCase("1")) {
							double dblAmt = Double.parseDouble(Helper
									.correctDouble(rs
											.getString("facility_sancamt")));
							dblAmt = dblAmt / 50;
							arrColNonBr.add(String.valueOf(dblAmt));
						} else {
							arrColNonBr.add(Helper.correctDouble(rs
									.getString("facility_sancamt")));
						}
					}
					if (rs1 != null) {
						rs1.close();
					}
				}
				if (arrColNonBr.size() > 0)
					arrRowNonBr.add(arrColNonBr);
			}
			hshValues.put("arrRowNonBr", arrRowNonBr);

			// exposure for group concerns

			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_grpexpgorgrpconcerns^"
					+ strAppNo + "^" + strAppNo);
			while (rs1.next()) {
				arrcolGrpExpDet = new ArrayList();
				arrcolGrpExpDet.add(Helper.changetoTitlecase(Helper
						.correctNull(rs1.getString("perapp_title")))
						+ "."
						+ Helper.changetoTitlecase(Helper.correctNull(rs1
								.getString("perapp_fname"))));
				if (Helper.correctNull(rs1.getString("rate_grade")).equals("")) {
					arrcolGrpExpDet.add("NA");
				} else {
					arrcolGrpExpDet.add(Helper.correctNull(rs1
							.getString("rate_grade")));
				}
				if (Helper.correctNull(rs1.getString("rate_type")).equals("")
						|| Helper.correctNull(rs1.getString("rate_type"))
								.equals("s")) {
					arrcolGrpExpDet.add("NA");
				} else {
					arrcolGrpExpDet.add(Helper.correctNull(rs1
							.getString("rate_date"))
							+ " ("
							+ Helper.correctNull(rs1.getString("rate_type"))
							+ ")");
				}
				arrcolGrpExpDet.add(Helper.correctDouble(rs1.getString("exp")));
				dblGrpExp += Double.parseDouble(Helper.correctDouble(rs1
						.getString("exp")));
				arrGrpExpDet.add(arrcolGrpExpDet);

			}

			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("com_ind_grp_permit^" + strAppNo);
			if (rs1.next()) {
				hshValues.put("dblIndVal", Helper.correctDouble(rs1
						.getString("com_individual")));
				hshValues.put("dblGrpVal", Helper.correctDouble(rs1
						.getString("com_group")));
			}

			hshValues.put("dblGrpExpVal", jtn.format(dblGrpExp));
			hshValues.put("arrGrpExpDet", arrGrpExpDet);

			ComAssetsLiabBean comassestsliab = new ComAssetsLiabBean();
			hshValues.put("strAppno", strAppNo);
			hshReqVal = comassestsliab.getFinangrpconcern(hshValues);
			hshValues.put("hshFinlValues", hshReqVal);
			// Financial Print

			String pgType = Helper.correctNull((String) hshReqValues
					.get("pgType"));
			boolean finacial_flag = false;

			if (strLoanType.equalsIgnoreCase("a")) {
				if (strFinancialrequired.equalsIgnoreCase("Y")) {
					finacial_flag = true;

				}

			} else {
				finacial_flag = true;
			}

			if (pgType.equalsIgnoreCase("MCFD")) {

				if (finacial_flag) {
					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("appidnew", strAppId);
					hshRequestValues.put("pageval", "LIABILITIES");
					hshRequestValues.put("printtype", "Y1");
					hshRequestValues = financial
							.getAnnexureIX(hshRequestValues);
					hshValues.put("hshReqValues", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pageval", "ASSETS");
					hshRequestValues.put("printtype", "Y1");
					hshRequestValues = financial
							.getAnnexureIX(hshRequestValues);
					hshValues.put("hshReqValues1", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pageval", "PROFIT AND LOSS ACCOUNT");
					hshRequestValues.put("printtype", "Y1");
					hshRequestValues = financial
							.getAnnexureIX(hshRequestValues);
					hshRequestValues.put("page", "PROFIT AND LOSS ACCOUNT");
					hshValues.put("hshReqValues2", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pagefrom", "RA1");
					hshRequestValues.put("pageType", "MCFD");
					hshRequestValues.put("printYear", "Y");
					hshRequestValues = financial.getDataRatio(hshRequestValues);
					hshRequestValues.put("page",
							"CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
					hshValues.put("hshReqValues3", hshRequestValues);

					hshRequestValues = new HashMap();
					hshRequestValues.put("appno", strAppNo);
					hshRequestValues.put("pagefrom", "RA2");
					hshRequestValues.put("pageType", "MCFD");
					hshRequestValues.put("printYear", "Y");
					hshRequestValues = financial.getDataRatio(hshRequestValues);
					hshRequestValues.put("page",
							"PROFITABILITY/TURN OVER/ OPERATING");
					hshValues.put("hshReqValues4", hshRequestValues);

				}
				// For Applicant's Profile by DINESH

				CommDocumentBean commdocument = new CommDocumentBean();

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "PROPOSALLC");
				hshReqVal.put("strPageType", "annexure");
				hshReqVal = commdocument.getAnnexureII(hshReqVal);
				hshReqVal.put("page", "PROPOSAL LC");
				hshValues.put("PROPOSALLC", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "PROPOSALLC");
				hshReqVal = commdocument.getAnnexureIII(hshReqVal);
				hshReqVal.put("page", "AN3");
				hshValues.put("AN3", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("hidAppNo", strAppNo);
				hshReqVal.put("PageType", "ANN3");
				hshReqVal = bankapp.getConsortiumDetails(hshReqVal);
				hshReqVal.put("page", "ANNEXUREIII");
				hshValues.put("ANN3", hshReqVal);

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "ANN5");
				hshReqVal = commdocument.getAnnexureV(hshReqVal);
				hshReqVal.put("page", "ANN5");
				hshValues.put("ANN5", hshReqVal);

				// Takeover Norms

				boolean flag = false;
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("takeovertermsel^" + strAppNo);
				rs = DBUtils.executeQuery(strQuery);
				flag = rs.next();

				if (flag == true) {
					do {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull((String) rs
								.getString("term_slno")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("TERM_NORMS")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("TERM_STATUS")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("TERM_REASON")));
						arrRow.add(arrCol);
					} while (rs.next());
				} else {
					if (rs != null) {
						rs.close();
					}

					String strModuleType = Helper
							.correctNull((String) hshReqValues
									.get("sessionModuleType"));
					if (strModuleType.equalsIgnoreCase("CORP")) {
						strModuleType = "C";
					} else if (strModuleType.equalsIgnoreCase("AGR")) {
						strModuleType = "A";
					}
					rs = DBUtils.executeLAPSQuery("sel_TakeOverNorms_Active^"
							+ strModuleType);
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull((String) rs
								.getString("ston_sno")));
						arrCol.add(Helper.correctNull((String) rs
								.getString("ston_takeovernorm")));
						arrCol.add("S");
						arrCol.add("");
						arrRow.add(arrCol);
					}
				}
				hshValues.put("arrTakeOver", arrRow);

				if (rs != null) {
					rs.close();
				}
				String fincommcheck = "N";
				ArrayList arrFinRow = new ArrayList();
				rs = DBUtils.executeLAPSQuery("sel_com_comments^FPComments^"
						+ strAppNo);
				while (rs.next()) {
					arrCol = new ArrayList();
					String finsno = Helper.correctNull((String) rs
							.getString("com_sno"));
					// if(finsno.equalsIgnoreCase("1"))
					// {
					// arrCol.add("Inter Locking of Funds");
					// }
					// else if(finsno.equalsIgnoreCase("2"))
					// {
					// arrCol.add("Sales & Profits");
					// }
					// else if(finsno.equalsIgnoreCase("3"))
					// {
					// arrCol.add("Networth");
					// }
					// else if(finsno.equalsIgnoreCase("4"))
					// {
					// arrCol.add("Current Ratio / Net Working capital");
					// }
					// else if(finsno.equalsIgnoreCase("5"))
					// {
					// arrCol.add("TOL/TNW");
					// }
					// else if(finsno.equalsIgnoreCase("6"))
					// {
					// arrCol.add("Debt Equity");
					// }
					// else if(finsno.equalsIgnoreCase("7"))
					// {
					// arrCol.add("Debtors Turnover");
					// }
					// else if(finsno.equalsIgnoreCase("8"))
					// {
					// arrCol.add("Important notes from Directors/auditors report");
					// }
					// else if(finsno.equalsIgnoreCase("9"))
					// {
					// arrCol.add("Profitability ratio");
					// }

					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("getstaticdatavaldispcorporate^141^"
									+ finsno);
					if (rs1.next()) {
						arrCol.add(Helper.correctNull(rs1
								.getString("stat_data_desc1")));
					} else {
						arrCol.add("");
					}
					arrCol.add(Helper.correctNull(Helper.CLOBToString(rs
							.getClob(("com_comments")))));
					hshValues.put("fincommcheck", "Y");
					arrFinRow.add(arrCol);
				}
				hshValues.put("arrfinComments", arrFinRow);
			} else {
				CommDocumentBean commdocument = new CommDocumentBean();

				hshReqVal = new HashMap();
				hshReqVal.put("appno", strAppNo);
				hshReqVal.put("appid", strAppId);
				hshReqVal.put("PageType", "PROPOSALLC");
				hshReqVal.put("strPageType", "annexure");
				hshReqVal.put("strProcessNoteFlag", Helper
						.correctNull((String) hshReqValues.get("pgname")));
				hshReqVal = commdocument.getAnnexureII(hshReqVal);
				hshReqVal.put("page", "PROPOSAL LC");
				hshValues.put("PROPOSALLC", hshReqVal);

				arrOutRow = new ArrayList();
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("perbankingselectNewOldId^"
						+ strOldAppId);
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrOutCol
							.add(correctNull(rs.getString("perbank_facility"))); // 0
					arrOutCol.add(""); // 1
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_limit"))); // 2
					arrOutCol.add(""); // 3
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_intrate"))); // 4
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_spread"))); // 5
					arrOutCol.add(Helper.correctDouble(rs
							.getString("perbank_os"))); // 6
					arrOutCol.add(correctNull(rs
							.getString("perbank_osasondate"))); // 7
					arrOutCol.add(correctNull(rs.getString("perbank_duedate"))); // 8
					arrOutCol.add(correctNull(Helper.CLOBToString(rs
							.getClob("perbank_arrears")))); // 9
					if (Helper.correctNull(rs.getString("perbank_type"))
							.equalsIgnoreCase("2"))
						arrOutCol.add("Term Loan"); // 10
					else if (Helper.correctNull(rs.getString("perbank_type"))
							.equalsIgnoreCase("1"))
						arrOutCol.add("Working Capital"); // 10
					else
						arrOutCol.add(""); // 10

					if (rs2 != null) {
						rs2.close();
					}
					rs2 = DBUtils.executeLAPSQuery("getstaticdescription^147^"
							+ correctNull(rs.getString("perbank_bnkname")));
					if (rs2.next())
						arrOutCol.add(correctNull(rs2
								.getString("STAT_DATA_DESC1")));// 11
					else
						arrOutCol.add("");// 11
					if (Helper.correctNull(rs.getString("perbank_loanpurpose"))
							.equalsIgnoreCase("1"))
						arrOutCol.add("Agro processing"); // 12
					else if (Helper.correctNull(
							rs.getString("perbank_loanpurpose"))
							.equalsIgnoreCase("2"))
						arrOutCol.add("Agriculture Infrastructure"); // 12
					else if (Helper.correctNull(
							rs.getString("perbank_loanpurpose"))
							.equalsIgnoreCase("3"))
						arrOutCol.add("Others"); // 12
					else
						arrOutCol.add(""); // 12
					arrOutCol
							.add(correctNull(rs.getString("perbank_startdate"))); // 13

					arrOutRow.add(arrOutCol);
				}
				hshValues.put("arrBAOtherRowNew", arrOutRow);
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_takeover_details^" + strAppNo);
			if (rs.next()) {
				if (Helper.correctNull(
						(String) rs.getString("comtak_istakeover"))
						.equalsIgnoreCase("1")) {
					hshValues.put("strTakeOvercheck", "y");
				} else {
					hshValues.put("strTakeOvercheck", "n");
				}
			} else {
				hshValues.put("strTakeOvercheck", "n");
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("takeovertermsel^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrColTakeover = new ArrayList();
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("term_slno")));
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("TERM_NORMS")));
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("TERM_STATUS")));
				arrColTakeover.add(Helper.correctNull((String) rs
						.getString("TERM_REASON")));
				arrRowTakeover.add(arrColTakeover);
			}
			hshValues.put("arrTakeoverVal", arrRowTakeover);

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^" + strAppNo
					+ "^Takeover");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strTakeoverComments", Helper.correctNull(Helper
						.CLOBToString(rs.getClob("cmt_comments"))));
			}

			if (rs != null) {
				rs.close();
			}
			String strGoodsFlag = "";
			if (strLoanType.equalsIgnoreCase("a")) {
				rs = DBUtils.executeLAPSQuery("sel_agr_facilities^" + strAppNo);
				while (rs.next()) {

					String strFacAgrSchem = Helper.correctNull((String) rs
							.getString("facscheme"));
					if (strFacAgrSchem.equalsIgnoreCase("aK")) {
						strGoodsFlag = "Y";
					}
				}

			}

			hshValues.put("strGoodsFlag", strGoodsFlag);

			// added by bhaskar for Crop Loan Aseesment

			if (strGoodsFlag.equalsIgnoreCase("Y")) {

				hshReqValues.put("hidapplicantid", strAppId);
				hshGoods = (HashMap) EJBInvoker.executeStateLess("agriculture",
						hshReqValues, "getcaplGoodsdata");
				hshValues.put("hshGoods", hshGoods);
			}

			// Added by Kishan for Repayment Schedule for Non-EMI
			ArrayList arrCodeDescCol = new ArrayList();
			ArrayList arrCodeDescRow = new ArrayList();
			arrRow = new ArrayList();
			String strValue = "'NE','OD','LC','CO','BG','DD','PC','PS'";
			String strLoanaccount = "";
			strQuery = SQLParser.getSqlQuery("seltermfinfac_NE^" + strAppNo
					+ "^" + strValue);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrCodeDescCol = new ArrayList();
				strLoanaccount = "";
				String strCode = correctNull((String) rs.getString(1));
				String strName = correctNull((String) rs.getString(2));
				/*
				 * String strFaccode= correctNull((String)rs.getString(4));
				 * strQuery1 =
				 * SQLParser.getSqlQuery("sel_otherdetails^"+strFaccode); rs1 =
				 * DBUtils.executeQuery(strQuery1); if(rs1.next()) {
				 * strLoanaccount
				 * =Helper.correctNull((String)rs1.getString("COM_LOANACC")); }
				 * if(strLoanaccount.equalsIgnoreCase("Y")) {
				 * arrCodeDescCol.add(strCode); arrCodeDescCol.add(strName);
				 * arrCodeDescRow.add(arrCodeDescCol); }
				 */
				arrCodeDescCol.add(strCode);
				arrCodeDescCol.add(strName);
				arrCodeDescRow.add(arrCodeDescCol);
			}
			arrRow = new ArrayList();
			arrCol = new ArrayList();
			HashMap hshRepayNE = new HashMap();
			String schCode = "";
			boolean flag1 = false;
			if (arrCodeDescRow != null) {
				for (i = 0; i < arrCodeDescRow.size(); i++) {
					arrRow = new ArrayList();
					arrCol = new ArrayList();
					arrCodeDescCol = (ArrayList) arrCodeDescRow.get(i);
					schCode = (String) arrCodeDescCol.get(0);
					String strQuery8 = SQLParser
							.getSqlQuery("sel_tl_repayschedule^" + strAppNo
									+ "^" + schCode);
					rs = DBUtils.executeQuery(strQuery8);
					while (rs.next()) {
						arrCol = new ArrayList();
						arrCol.add(correctNull(rs.getString(1)));
						arrCol.add(correctNull(rs.getString(2)));
						arrCol.add(correctNull(rs.getString(3)));
						arrCol.add(correctNull(rs.getString(4)));
						arrCol.add(correctNull(rs.getString(5)));
						arrCol.add(correctNull(rs.getString(6)));
						String strQuery9 = SQLParser
								.getSqlQuery("sel_tl_spfac^" + strAppNo + "^"
										+ correctNull((String) rs.getString(2)));
						rs1 = DBUtils.executeQuery(strQuery9);
						if (rs1.next()) {
							arrCol.add(correctNull(rs1.getString("fac_desc")));
						} else {
							arrCol.add("");
						}
						arrCol.add((String) arrCodeDescCol.get(1));
						arrRow.add(arrCol);
					}
					hshRepayNE.put(schCode, arrRow);
				}
			}
			hshValues.put("arrCodeDescRow", arrCodeDescRow);
			hshValues.put("hshRepayNE", hshRepayNE);

			// Get Presanction Security Comments
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverage^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("cmt_presanccomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			// Get Postsanction Security Comments
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverage1^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("cmt_postsanccomments", Helper.CLOBToString(rs
						.getClob("com_comments")));
			}
			if (rs != null) {
				rs.close();
			}
			arrRow = new ArrayList();
			String strFacno = "";
			rs = DBUtils.executeLAPSQuery("sel_termloan_facilities_fund^"
					+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("term_desc")));
				strFacno = correctNull(rs.getString("term_sno"));
				strQuery = SQLParser
						.getSqlQuery("sel_comcomments1^CommentsProj^"
								+ strFacno + "^" + strAppNo + "^12");
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrCol
							.add(Helper.CLOBToString(rs1
									.getClob("com_comments")));
				} else {
					arrCol.add("Nil");
				}
				arrRow.add(arrCol);
			}
			hshValues.put("COP_comments", arrRow);

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_seccomments^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COMSEC_APPCOVERAGE", Helper.correctNull(rs
						.getString("COMSEC_APPCOVERAGE")));
				hshValues.put("COMSEC_APPCOMMENTS", correctNull(Helper
						.CLOBToString(rs.getClob("COMSEC_APPCOMMENTS"))));
				hshValues.put("COMSEC_GROUPCOVERAGE", Helper.correctNull(rs
						.getString("COMSEC_GROUPCOVERAGE")));
				hshValues.put("COMSEC_GROUPCOMMENTS", correctNull(Helper
						.CLOBToString(rs.getClob("COMSEC_GROUPCOMMENTS"))));
				hshValues.put("COMSEC_ADDITIONALSECCOVERAGE", Helper
						.correctNull(rs
								.getString("COMSEC_ADDITIONALSECCOVERAGE")));
				hshValues.put("COMSEC_ADDITIONALSECCOMMENTS",
						correctNull(Helper.CLOBToString(rs
								.getClob("COMSEC_ADDITIONALSECCOMMENTS"))));
				hshValues.put("COMSEC_SECTYPE", Helper.correctNull(rs
						.getString("COMSEC_SECTYPE")));
				hshValues.put("COMSEC_FACGROUPCONCERN", Helper.correctNull(rs
						.getString("COMSEC_FACGROUPCONCERN")));
				hshValues.put("COMSEC_FACGROUPCONCERNCOMMENTS",
						correctNull(Helper.CLOBToString(rs
								.getClob("COMSEC_FACGROUPCONCERNCOMMENTS"))));
			}
			if ((modtype.equalsIgnoreCase("CORP") || (modtype
					.equalsIgnoreCase("AGR") && strFinancialrequired
					.equalsIgnoreCase("Y")))
					&& strFinid != 0) {
				hshBenchValues = new HashMap();
				hshBenchValues.put("appno", strAppNo);
				hshBenchValues = financial.getBenchMarkParam(hshBenchValues);
				hshValues.put("hshBenchValues", hshBenchValues);
			}
			strpage = "benchmark";
			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"
					+ strpage);

			if (rs.next()) {
				hshValues.put("fin_benchmarkcmts", Helper.CLOBToString(rs
						.getClob("fin_comments")));
			}

			arrRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("rbiguidelines_restr_processnote^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("restr_rbi_slno")));
				arrCol.add(Helper.correctNull(rs
						.getString("restr_rbi_guidelines")));
				arrCol.add(Helper.correctNull(rs
						.getString("restr_rbi_compliance")));
				arrCol.add(Helper.correctNull(rs
						.getString("restr_rbi_comments")));
				arrCol.add(Helper.correctNull(rs.getString("restr_pagetype")));
				arrRow.add(arrCol);
			}

			hshValues.put("arrRBIGuidliness", arrRow);

			if (rs != null)
				rs.close();
			strpage = "fvccmts";
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^" + strAppNo
					+ "^" + strpage);
			if (rs.next()) {
				hshValues.put("strFVCComments", Helper.CLOBToString(rs
						.getClob("cmt_comments")));
			}

			arrRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_rating_year_audited^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshValues.put("IntRat", "Y");
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("rdr_year")));
				if (Helper.correctNull(rs.getString("rdr_financial")).equals(
						"a")) {
					arrCol.add("Audited");
				} else if (Helper.correctNull(rs.getString("rdr_financial"))
						.equals("e")) {
					arrCol.add("Estimated");
				} else if (Helper.correctNull(rs.getString("rdr_financial"))
						.equals("u")) {
					arrCol.add("Unaudited");
				} else if (Helper.correctNull(rs.getString("rdr_financial"))
						.equals("p")) {
					arrCol.add("Projection");
				} else {
					arrCol.add(" ");
				}
				arrCol.add(Helper.correctNull(rs.getString("rdr_rating")));
				arrRow.add(arrCol);
			}
			hshValues.put("arrRowRatingRMD", arrRow);

			// To get the inward proposed amount
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_inward_proposed_values^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("INWARD_TERMLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_TERMLOANAMT")));
				hshValues.put("INWARD_WCLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_WCLOANAMT")));
				hshValues.put("INWARD_NONWCLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_NONWCLOANAMT")));
			}

			if (rs != null) {
				rs.close();
			}

			ArrayList arrCol2 = new ArrayList();
			ArrayList arrRow2 = new ArrayList();
			strQuery1 = "";
			strQuery1 = SQLParser.getSqlQuery("sel_appdetails_hunterscore^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {
				arrCol2.add(Helper.correctNull((String) rs
						.getString("DEMO_COMAPPID")));
				arrCol2.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));
				arrCol2.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow2.add(arrCol2);
			}
			if (rs != null) {
				rs.close();
			}

			ArrayList arrCol1 = new ArrayList();
			// ArrayList arrCol2 = new ArrayList();
			// boolean flag=false;
			strQuery1 = SQLParser.getSqlQuery("sel_coappdetails^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery1);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("COM_COMPDTID")));
				arrCol.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));

				arrCol.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow2.add(arrCol);
			}
			hshValues.put("arrRow2", arrRow2);

			if (rs1 != null) {
				rs1.close();
			}
			strQuery = SQLParser.getSqlQuery("selQueryraised^" + strAppNo);
			rs1 = DBUtils.executeQuery(strQuery);

			if (rs1.next()) {
				hshValues.put("strQRaisedOn", correctNull(rs1
						.getString("queryraiseddate")));
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^7^"
					+ strAppNo);
			if (rs.next()) {
				hshValues.put("cesComments", correctNull(Helper.CLOBToString(rs
						.getClob("com_comments"))));

			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_comcommentscopmof^Management^17^"
							+ strAppNo);
			if (rs.next()) {
				hshValues.put("strGovtPolicy", correctNull(Helper
						.CLOBToString(rs.getClob("com_comments"))));

			}
			arrRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_swot^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				String value = Helper.correctNull(rs.getString("com_selswot"));
				if (value.equalsIgnoreCase("1")) {
					desc = "Strength";
				} else if (value.equalsIgnoreCase("2")) {
					desc = "Weakness";
				} else if (value.equalsIgnoreCase("3")) {
					desc = "Opportunities";
				} else if (value.equalsIgnoreCase("5")) {
					desc = "Mitigation of Weakness & Threats";
				} else {
					desc = "Threats";
				}
				arrCol.add(desc);
				arrCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("com_comments"))));
				arrRow.add(arrCol);
			}
			hshValues.put("arrSwotAnalysis", arrRow);

			// Draw Down Schedule

			arrRow = new ArrayList();
			double dblSancAmt = 0.0, dblDisbAmt = 0.0;
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils.executeLAPSQuery("sel_dds^" + strAppNo);
			while (rs1.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs1.getString("facility_sno")));
				arrCol.add(Helper.correctNull(rs1.getString("facility_desc")));
				arrCol.add(Helper.correctNull(rs1
						.getString("facility_sanctioned")));
				arrOutRow = new ArrayList();
				if (rs != null)
					rs.close();
				if (strAppStatus.equalsIgnoreCase("op")
						|| strAppStatus.equalsIgnoreCase("ol"))
					rs = DBUtils.executeLAPSQuery("drawdownsclt^" + strAppNo
							+ "^"
							+ Helper.correctInt(rs1.getString("facility_sno")));
				else
					rs = DBUtils.executeLAPSQuery("sel_drawdown_history^"
							+ strAppNo + "^"
							+ Helper.correctInt(rs1.getString("facility_sno")));
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrOutCol.add(Helper.correctNull(rs
							.getString("qtr_start_date")));
					arrOutCol.add(Helper.correctNull(rs
							.getString("qtr_end_date")));
					arrOutCol.add(jtn.format(Double.parseDouble(Helper
							.correctDouble(rs.getString("tot_qtr")))));
					arrOutCol.add(jtn.format(Double.parseDouble(Helper
							.correctDouble(rs.getString("amt_qtr")))));
					arrOutRow.add(arrOutCol);
				}
				arrCol.add(arrOutRow);
				arrRow.add(arrCol);

				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sel_comcommentscopmof^DRAWDOWN^"
						+ Helper.correctInt(rs1.getString("facility_sno"))
						+ "^" + strAppNo);
				if (rs.next()) {
					hshValues.put("strDrawDownCmts"
							+ Helper.correctInt(rs1.getString("facility_sno")),
							Helper.CLOBToString(rs.getClob("com_comments")));
				}

			}

			hshValues.put("arrDrawDown", arrRow);

			// External Rating Details of the applicant

			arrRow = new ArrayList();
			ArrayList arrRow11 = new ArrayList();
			ArrayList arrCol11 = new ArrayList();
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils
					.executeLAPSQuery("sel_distinctratingtype^" + strAppId);
			while (rs1.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs1.getString("agency")));
				arrOutRow = new ArrayList();
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("cusratingnew_select^" + strAppId
						+ "^" + Helper.correctInt(rs1.getString("agency")));
				while (rs.next()) {
					arrOutCol = new ArrayList();
					arrRow11 = new ArrayList();
					arrOutCol.add(Helper.correctNull(rs1.getString("agency")));// 0
					arrOutCol.add(Helper.correctNull(rs
							.getString("RAT_PARTICULARS")));// 1
					arrOutCol
							.add(Helper.correctNull(rs.getString("RATE_DATE")));// 2
					arrOutCol.add(jtn.format(Double.parseDouble(Helper
							.correctDouble(rs.getString("RAT_AMOUNT")))));// 3
					arrOutCol.add(Helper.correctNull(rs
							.getString("RAT_RISK_WEIGHT")));// 4
					if (Helper.correctNull(rs.getString("RAT_TERMTYPE"))
							.equalsIgnoreCase("L"))
						arrOutCol.add("Long-Term");// 5
					else
						arrOutCol.add("Short-Term");// 5
					arrOutCol.add(Helper.correctNull(rs
							.getString("EXTERNAL_DEFINITION")));// 6

					if (rs2 != null)
						rs2.close();
					rs2 = DBUtils.executeLAPSQuery("sel_existingratingvalues^"
							+ strOldAppId + "^" + strAppId + "^"
							+ Helper.correctInt(rs1.getString("agency")) + "^"
							+ Helper.correctNull(rs.getString("RAT_TERMTYPE")));
					while (rs2.next()) {
						if (Double.parseDouble(Helper.correctDouble(rs
								.getString("RAT_AMOUNT"))) != Double
								.parseDouble(Helper.correctDouble(rs2
										.getString("RAT_AMOUNT")))
								&& !Helper
										.correctNull(rs.getString("RAT_SYMBOL"))
										.equalsIgnoreCase(
												Helper
														.correctNull(rs2
																.getString("RAT_SYMBOL")))) {
							arrCol11 = new ArrayList();
							arrCol11.add(jtn.format(Double
									.parseDouble(Helper.correctDouble(rs2
											.getString("RAT_AMOUNT")))));
							arrCol11.add(Helper.correctNull(rs2
									.getString("RAT_SYMBOL")));
							arrCol11.add(Helper.correctNull(rs2
									.getString("EXTERNAL_DEFINITION")));
							arrRow11.add(arrCol11);
						}

					}

					arrOutCol.add(arrRow11);// 7
					arrOutCol.add(Helper
							.correctNull(rs.getString("RAT_SYMBOL")));// 8

					arrOutRow.add(arrOutCol);
				}
				arrCol.add(arrOutRow);
				arrRow.add(arrCol);

			}

			hshValues.put("arrRating", arrRow);

			// Assets Classification
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_combankingdetails^" + strAppNo);
			if (rs.next()) {
				String strAssetClassification = correctNull(rs
						.getString("com_assetclass"));
				if (strAssetClassification.equalsIgnoreCase("S")) {
					strAssetClassification = "Standard";
				} else if (strAssetClassification.equalsIgnoreCase("SS")) {
					strAssetClassification = "Sub Standard";
				} else if (strAssetClassification.equalsIgnoreCase("D")) {
					strAssetClassification = "Doubtful";
				} else if (strAssetClassification.equalsIgnoreCase("L")) {
					strAssetClassification = "Loss";
				} else {
					strAssetClassification = "NIL";
				}

				hshValues.put("strAssetClassification", strAssetClassification);
				hshValues.put("com_asscladate", correctNull(rs
						.getString("com_asscladate")));
			}

			// Defaulter Det
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_defid^" + strAppId);
			if (rs.next()) {
				if (Helper.correctNull(rs.getString("DEF_SUITFILED"))
						.equalsIgnoreCase("Y")) {
					hshValues.put("strSuitFiled", "Yes");
					hshValues.put("strSuitFiledCmts", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("DEF_SUITFILEDCOMM"))));
				} else if (Helper.correctNull(rs.getString("DEF_SUITFILED"))
						.equalsIgnoreCase("N")) {
					hshValues.put("strSuitFiled", "No");
				}
				if (Helper.correctNull(rs.getString("DEF_PROBE"))
						.equalsIgnoreCase("Y")) {
					hshValues.put("strProbe", "Yes");
					hshValues.put("strProbeCmts", Helper.correctNull(Helper
							.CLOBToString(rs.getClob("DEF_PROBECMT"))));
				} else if (Helper.correctNull(rs.getString("DEF_PROBE"))
						.equalsIgnoreCase("N")) {
					hshValues.put("strProbe", "No");
				}
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selcom_Rbiloanpolicyguide^"
					+ strAppNo);

			while (rs.next()) {
				hshValues.put(correctNull(rs.getString("comrbi_pagetype"))
						+ "CMDPROCESSNOTE", Helper.correctNull(Helper
						.CLOBToString(rs.getClob("COMRBI_CMDPROCESS"))));
			}

			arrRow = new ArrayList();
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("selcom_cust_profit^" + strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("COM_YEARFROM")));
				arrCol.add(Helper.correctNull(rs.getString("COM_YEARTO")));
				arrCol.add(Helper.correctNull(rs.getString("COM_FTP_PROFIT")));
				arrCol.add(Helper.correctNull(rs.getString("COM_FTP_YIELD")));
				arrCol.add(Helper.correctNull(rs.getString("COM_RAROC")));
				arrRow.add(arrCol);
			}

			hshValues.put("arrProfitability", arrRow);

			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("sel_com_ftp_breakupoflimits^"
					+ strAppNo);
			while (rs.next()) {
				hshValues.put("strFTPAmt"
						+ Helper.correctNull(rs.getString("COM_ftp_desc")),
						Helper.correctNull(rs.getString("COM_FTP_amount")));
			}

			if (rs != null) {
				rs.close();
			}// s.no-->facilityNo
			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^assmntcomments^15^"
							+ strAppNo);
			while (rs.next()) {
				hshValues.put("strAssCmts"
						+ Helper.correctNull(rs.getString("ASSEMENT_COMMENT")),
						Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));
			}

			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^salesjustify^2^"
							+ strAppNo);
			while (rs.next()) {
				String[] strArr = Helper.correctNull(
						rs.getString("assess_comments3")).split("-");
				if (strArr != null && strArr.length > 1) {
					if (Helper.correctNull(rs.getString("ASSEMENT_COMMENT"))
							.equalsIgnoreCase("CEXPORT")) {
						hshValues.put("strCYearFrom", strArr[0]);
						hshValues.put("strCYearTo", strArr[1]);
					} else if (Helper.correctNull(
							rs.getString("ASSEMENT_COMMENT")).equalsIgnoreCase(
							"NEXPORT")) {
						hshValues.put("strNYearFrom", strArr[0]);
						hshValues.put("strNYearTo", strArr[1]);
					} else if (Helper.correctNull(
							rs.getString("ASSEMENT_COMMENT")).equalsIgnoreCase(
							"IINEXPORT")) {
						hshValues.put("txt_IINyearfrom", strArr[0]);
						hshValues.put("txt_IINyearTo", strArr[1]);
					}
				}

				hshValues.put("strEstimated"
						+ Helper.correctNull(rs.getString("ASSEMENT_COMMENT")),
						Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));
				hshValues.put("strAccepted"
						+ Helper.correctNull(rs.getString("ASSEMENT_COMMENT")),
						Helper.correctNull(rs.getString("assess_comments2")));
			}

			ArrayList arrSalesAct = new ArrayList();
			ArrayList arrSalesProj = new ArrayList();
			ArrayList arrYear = new ArrayList();
			ArrayList arrGrowth = new ArrayList();
			ArrayList arrAchievement = new ArrayList();

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^salesjustify^1^"
							+ strAppNo);
			while (rs.next()) {
				arrSalesAct.add(Helper.correctNull(rs
						.getString("ASSESS_COMMENTS2")));
				arrSalesProj.add(Helper.correctNull(rs
						.getString("ASSEMENT_COMMENT1")));
				arrYear.add(Helper
						.correctNull(rs.getString("ASSEMENT_COMMENT")));
				arrGrowth.add(Helper.correctNull(rs
						.getString("ASSESS_COMMENT4")));
				arrAchievement.add(Helper.correctNull(rs
						.getString("ASSESS_COMMENTS3")));
			}

			hshValues.put("arrYear", arrYear);
			hshValues.put("arrGrowth", arrGrowth);
			hshValues.put("arrAchievement", arrAchievement);
			hshValues.put("arrSalesProj", arrSalesProj);
			hshValues.put("arrSalesAct", arrSalesAct);

			arrRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_management_Assement^SecCoverage^1^"
							+ strAppNo);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol
						.add(Helper.correctNull(rs
								.getString("ASSEMENT_COMMENT")));
				arrCol.add(Helper.correctNull(rs.getString("ASSESS_CMT5")));
				arrCol.add(Helper
						.correctNull(rs.getString("ASSEMENT_COMMENT1")));
				arrCol
						.add(Helper.correctNull(rs
								.getString("ASSESS_COMMENTS2")));
				arrCol
						.add(Helper.correctNull(rs
								.getString("ASSESS_COMMENTS3")));
				arrCol.add(Helper.correctNull(rs.getString("ASSESS_COMMENT4")));
				arrRow.add(arrCol);
			}

			hshValues.put("arrSecMovement", arrRow);

			if (rs != null) {
				rs.close();
			}
			strQuery2 = SQLParser.getSqlQuery("sel_summultiplebanking_appno^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery2);
			if (rs.next()) {
				hshValues.put("FbSum1", Helper.correctDouble((String) rs
						.getString("FbSum")));
				hshValues.put("ProFbSum1", Helper.correctDouble((String) rs
						.getString("ProFbSum")));
			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_comcomments^RBICOM^2^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshValues.put("strConductOffAcccmts", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_comcomments^RBICOM^3^"
					+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshValues.put("strFTPcmts", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}

			ArrayList listRow = new ArrayList();
			ArrayList listCol = new ArrayList();
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
					+ strAppNo + "^MMithra");
			while (rs.next()) {
				listCol = new ArrayList();
				listCol
						.add(Helper
								.correctNull(rs.getString("com_description")));
				listCol.add(Helper.correctNull(rs.getString("com_details")));
				listRow.add(listCol);
			}
			hshValues.put("listMMithra", listRow);

			HashMap hshReqDetails = new HashMap();
			HashMap hshRespDetails = new HashMap();

			MastApplicantBean msb = new MastApplicantBean();
			hshReqDetails = new HashMap();
			hshReqDetails.put("strPageType", "annexure");
			hshReqDetails.put("hidapplicantnewid", strAppId);
			hshRespDetails = msb.getAddressDetails(hshReqDetails);
			hshValues.put("hshRespDetails", hshRespDetails);

		} catch (Exception ce) {
			throw new EJBException("Error in getProcessNote login  "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return hshValues;
	}
	
	public HashMap getinwarddetails(HashMap hshReqValues)  {
		
		HashMap hshValues = new HashMap();
		ArrayList arrCol=new ArrayList();
		ArrayList arrRow=null;
		ResultSet rs = null;
		String strQuery="";
		try
		{
			
			String category=Helper.correctNull((String)hshReqValues.get("Category"));
			if(category.equalsIgnoreCase("Prposal"))
			{
				if(rs != null)
				{
					rs.close();
				}
				strQuery=SQLParser.getSqlQuery("getinwardpropsal");		
				rs = DBUtils.executeQuery(strQuery);
				arrRow=new ArrayList();
				while(rs.next())
				{
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REF_NO")));//0
					arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_LAR")));//2
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFINWARD")));//8
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_DTLSOFINWARDRECEIVED")));//9
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REMARKS")));//10
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//11
					arrCol.add(Helper.correctNull((String)rs.getString("datediff")));//12
					
					arrRow.add(arrCol);
				}
			} else if(category.equalsIgnoreCase("shortnotes"))
					{
				if(rs != null)
				{
					rs.close();
				}
				strQuery=SQLParser.getSqlQuery("getinwardshortnote");		
				rs = DBUtils.executeQuery(strQuery);
				arrRow=new ArrayList();
				while(rs.next())
				{
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REF_NO")));//0
					arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_LAR")));//2
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFINWARD")));//8
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_DTLSOFINWARDRECEIVED")));//9
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REMARKS")));//10
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//11
					arrCol.add(Helper.correctNull((String)rs.getString("datediff")));//12
					
					arrRow.add(arrCol);
				}
					}
			else
			{
				if(rs != null)
				{
					rs.close();
				}
			strQuery=SQLParser.getSqlQuery("getallinwarddetails");		
			rs = DBUtils.executeQuery(strQuery);
			arrRow=new ArrayList();
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REF_NO")));//0
				arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_LAR")));//2
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFINWARD")));//8
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_DTLSOFINWARDRECEIVED")));//9
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REMARKS")));//10
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//11
				arrCol.add(Helper.correctNull((String)rs.getString("ACT_FLG")));//12
				
				arrRow.add(arrCol);
			}
			if(rs != null)
			{
				rs.close();
			}	
			String maxval="";
			strQuery=SQLParser.getSqlQuery("getmaxinwardnum");		
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				maxval=Helper.correctNull((String)rs.getString("MAXVAL"));
			}
		  if(maxval.equalsIgnoreCase(""))
		  {
			  hshValues.put("maxval","1");	
		  }
		  else
		  {
			  hshValues.put("maxval",Helper.correctNull((String)rs.getString("MAXVAL")));	
		  }
			
			}
			hshValues.put("arrRow",arrRow);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getgeclidentification "+ce.toString());
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());					
			}
		}
			

		
		return hshValues;
		
	}
	public void updateinwarddetails(HashMap hshReqValues) throws EJBException 
	{
		HashMap hshQueryValues = new HashMap();
		HashMap hshValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		ResultSet rs = null;
		String strQuery = "";
		try
		{
			String action = (String)correctNull((String)hshReqValues.get("hidAction"));
			if(action.equalsIgnoreCase("Insert"))
			{
				hshQueryValues.put("size","1");
				hshValues.put("strQueryId","insertintoinwardtable");
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddate")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_LAR")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_solid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_BranchName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_RegionName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_custid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_Name")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_typeofinward")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddetailsreceived")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_type")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("active_flag")));
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("1",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				
			}
			if(action.equalsIgnoreCase("Update"))
			{
				hshQueryValues.put("size","1");
				hshValues.put("strQueryId","updateintoinwardtable");
				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddate")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_LAR")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_solid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_BranchName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_RegionName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_custid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_Name")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_typeofinward")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddetailsreceived")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_type")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("active_flag")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("1",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			}
		}
		catch (Exception e)
		{
			throw new EJBException("Error in bean "+e.toString());
		}
		finally
		{
			try
			{				
				if(rs != null)
				{
					rs.close();
				}
				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}	
		//return hshValues;
	}
	
	public HashMap getinwardoutwardproposaldetails(HashMap hshReqValues)  {
		
		HashMap hshValues = new HashMap();
		ArrayList arrCol=new ArrayList();
		ArrayList arrRow=null;
		ResultSet rs = null;
		String strQuery="";
		try
		{

			
			strQuery=SQLParser.getSqlQuery("getallinwardoutwardproposal");		
			rs = DBUtils.executeQuery(strQuery);
			arrRow=new ArrayList();
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REF_NO")));//0
				
				arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//2
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
				
				arrCol.add(Helper.correctNull((String)rs.getString("PROPOSED_FBLIMIT")));//8
				arrCol.add(Helper.correctNull((String)rs.getString("PROPOSED_NFBLIMIT")));//9
				arrCol.add(Helper.correctNull((String)rs.getString("TOTAL_EXPOSURE")));//10
				arrCol.add(Helper.correctNull((String)rs.getString("EXPOSURE_BRACKET")));//11
				arrCol.add(Helper.correctNull((String)rs.getString("PROPOSAL_HANDLED_AT")));//12
				arrCol.add(Helper.correctNull((String)rs.getString("LOAN_PROCESSOFFICERNAME")));//13
				arrCol.add(Helper.correctNull((String)rs.getString("STATUS_OFPROPOSAL")));//14
				arrCol.add(Helper.correctNull((String)rs.getString("TAT")));//15
				arrCol.add(Helper.correctNull((String)rs.getString("REMARKS")));//16
				arrCol.add(Helper.correctNull((String)rs.getString("TYPE_OF_PROPOSAL")));//17
				arrCol.add(Helper.correctNull((String)rs.getString("DUE_DATEOF_WC")));//18
				arrCol.add(Helper.correctNull((String)rs.getString("SANCTIONING_AUTH")));//19
				arrCol.add(Helper.correctNull((String)rs.getString("SANCTION_REF_NO")));//20
				arrCol.add(Helper.correctNull((String)rs.getString("SANCTION_DATE")));//21
				arrCol.add(Helper.correctNull((String)rs.getString("LODGE_REF_NO")));//22
				arrCol.add(Helper.correctNull((String)rs.getString("LODGE_DATE")));//23
				arrCol.add(Helper.correctNull((String)rs.getString("DROPPED_REF_NO")));//24
				arrCol.add(Helper.correctNull((String)rs.getString("DROPPED_DATE")));//25
				arrCol.add(Helper.correctNull((String)rs.getString("DEFFERRED_DETAILS")));//26
				arrCol.add(Helper.correctNull((String)rs.getString("DEFERRED_DATE")));//27
				
				arrCol.add(Helper.correctNull((String)rs.getString("ACT_FLAG_PRO")));//28
				
				
				
				
				
				
				arrRow.add(arrCol);
			}
			hshValues.put("arrRow",arrRow);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getgeclidentification "+ce.toString());
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());					
			}
		}
			

		
		return hshValues;
		
	}
	
public HashMap getoutwarddetails(HashMap hshReqValues)  {
		
		HashMap hshValues = new HashMap();
		ArrayList arrCol=new ArrayList();
		ArrayList arrRow=null;
		ResultSet rs = null;
		String strQuery="";
		
		
		try
		{
			String category=Helper.correctNull((String)hshReqValues.get("Category"));
			/*if(category.equalsIgnoreCase("Prposal"))
			{
				if(rs != null)
				{
					rs.close();
				}
				strQuery=SQLParser.getSqlQuery("getinwardpropsal");		
				rs = DBUtils.executeQuery(strQuery);
				arrRow=new ArrayList();
				while(rs.next())
				{
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REF_NO")));//0
					arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_LAR")));//2
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFINWARD")));//8
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_DTLSOFINWARDRECEIVED")));//9
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REMARKS")));//10
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//11
					arrCol.add(Helper.correctNull((String)rs.getString("datediff")));//12
					
					arrRow.add(arrCol);
				}
			} else if(category.equalsIgnoreCase("shortnotes"))
					{
				if(rs != null)
				{
					rs.close();
				}
				strQuery=SQLParser.getSqlQuery("getinwardshortnote");		
				rs = DBUtils.executeQuery(strQuery);
				arrRow=new ArrayList();
				while(rs.next())
				{
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REF_NO")));//0
					arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_LAR")));//2
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFINWARD")));//8
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_DTLSOFINWARDRECEIVED")));//9
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REMARKS")));//10
					arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//11
					arrCol.add(Helper.correctNull((String)rs.getString("datediff")));//12
					
					arrRow.add(arrCol);
				}
					}
			else
			{*/
				if(rs != null)
				{
					rs.close();
				}
			strQuery=SQLParser.getSqlQuery("getalloutwarddetails");		
			rs = DBUtils.executeQuery(strQuery);
			arrRow=new ArrayList();
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_REF_NO")));//0
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_Date")));//1
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_LAR")));//2
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_SOL_ID")));//3
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_BRANCH_NAME")));//4
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_REGION_NAME")));//5
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_CUST_ID")));//6
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_BORROWER_NAME")));//7
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_TYPEOFINWARD")));//8
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_DTLSOFINWARDRECEIVED")));//9
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_REMARKS")));//10
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_TYPEOFBORROWER")));//11
				arrCol.add(Helper.correctNull((String)rs.getString("OUTWARD_ACT_FLG")));//12
				
				arrRow.add(arrCol);
			}
			if(rs != null)
			{
				rs.close();
			}	
			String maxval="";
			strQuery=SQLParser.getSqlQuery("getmaxoutwardnum");		
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				maxval=Helper.correctNull((String)rs.getString("MAXVAL"));
			}
		  if(maxval.equalsIgnoreCase(""))
		  {
			  hshValues.put("maxval","1");	
		  }
		  else
		  {
			  hshValues.put("maxval",Helper.correctNull((String)rs.getString("MAXVAL")));	
		  }
			
		//	}
			hshValues.put("arrRow",arrRow);
			
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getgeclidentification "+ce.toString());
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());					
			}
		}
			

		
		return hshValues;
		
	}
	public void updateoutwarddetails(HashMap hshReqValues) throws EJBException 
	{
		HashMap hshQueryValues = new HashMap();
		HashMap hshValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		ResultSet rs = null;
		String strQuery = "";
		try
		{
			String action = (String)correctNull((String)hshReqValues.get("hidAction"));
			if(action.equalsIgnoreCase("Insert"))
			{
				hshQueryValues.put("size","1");
				hshValues.put("strQueryId","insertintooutwardtable");
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddate")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_LAR")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_solid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_BranchName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_RegionName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_custid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_Name")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_typeofinward")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddetailsreceived")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_type")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("active_flag")));
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("1",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				
			}
			if(action.equalsIgnoreCase("Update"))
			{
				hshQueryValues.put("size","1");
				hshValues.put("strQueryId","updateintooutwardtable");
				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddate")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_LAR")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_solid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_BranchName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_RegionName")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_custid")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_Name")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_typeofinward")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwarddetailsreceived")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_type")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("active_flag")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("1",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			}
		}
		catch (Exception e)
		{
			throw new EJBException("Error in bean "+e.toString());
		}
		finally
		{
			try
			{				
				if(rs != null)
				{
					rs.close();
				}
				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}	
		
	}
	public HashMap getbrachlist(HashMap hshReqValues)  {

		
		HashMap hshValues = new HashMap();
		ArrayList arrCol=new ArrayList();
		ArrayList arrRow=null;
		ResultSet rs = null;
		String strQuery="";
		try
		{
			
			strQuery=SQLParser.getSqlQuery("getbrachlistwithregionwise");		
			rs = DBUtils.executeQuery(strQuery);
			arrRow=new ArrayList();
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull((String)rs.getString("ORG_SCODE")));//0
				arrCol.add(Helper.correctNull((String)rs.getString("ORG_NAME")));//1
				arrCol.add(Helper.correctNull((String)rs.getString("REGIONAL_OFFICE")));//2
				
				arrRow.add(arrCol);
			}
			hshValues.put("arrRow",arrRow);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getgeclidentification "+ce.toString());
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());					
			}
		}
			

		
		return hshValues;
		
	
		
	}
	public void updateinwardoutwardproposaldetails(HashMap hshReqValues) throws EJBException 
	{
		HashMap hshQueryValues = new HashMap();
		HashMap hshValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		ResultSet rs = null;
		String strQuery = "";
		try
		{
			String action = (String)correctNull((String)hshReqValues.get("hidAction"));
			if(action.equalsIgnoreCase("Insert"))
			{
				
				hshQueryValues = new HashMap();
				hshValues = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshValues.put("strQueryId", "deleteinwardproposal");
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));
				hshValues.put("arrValues",arrValues);
				hshQueryValues.put("1",hshValues);
				
				
				arrValues=new ArrayList();
				hshValues = new HashMap();
				hshQueryValues.put("size","2");
				hshValues.put("strQueryId","insertinwardoutwardproposal");
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposedfblimit")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposednfblimit")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_totalexposure")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("exposurebracket")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposedhandledat")));		
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_loanprocessofficername")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposalstatus")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_TAT")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposal")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_duedatewc")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_sanctioningauth")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctionrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctiondate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgerefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgedate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppedrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppeddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddetails")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("activity_flagin_proposal")));
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("2",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				
			}
			if(action.equalsIgnoreCase("Update"))
			{
				hshQueryValues.put("size","1");
				hshValues.put("strQueryId","updateinwardoutwardproposal");			
					
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposedfblimit")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposednfblimit")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_totalexposure")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("exposurebracket")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposedhandledat")));		
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_loanprocessofficername")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposalstatus")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_TAT")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposal")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_duedatewc")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_sanctioningauth")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctionrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctiondate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgerefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgedate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppedrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppeddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddetails")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("activity_flagin_proposal")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("1",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			}
		}
		catch (Exception e)
		{
			throw new EJBException("Error in bean "+e.toString());
		}
		finally
		{
			try
			{				
				if(rs != null)
				{
					rs.close();
				}
				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}	
		
	}
	
	
	public HashMap getinwardoutwardshortnotedetails(HashMap hshReqValues)
	{

		
		HashMap hshValues = new HashMap();
		ArrayList arrCol=new ArrayList();
		ArrayList arrRow=null;
		ResultSet rs = null;
		String strQuery="";
		try
		{

			
			strQuery=SQLParser.getSqlQuery("getallinwardoutwardshortnotes");		
			rs = DBUtils.executeQuery(strQuery);
			arrRow=new ArrayList();
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull((String)rs.getString("SN_INWARD_REF_NO")));//0
				
				arrCol.add(Helper.correctNull((String)rs.getString("Inward_Date")));//1
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_TYPEOFBORROWER")));//2
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_SOL_ID")));//3
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BRANCH_NAME")));//4
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_REGION_NAME")));//5
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_CUST_ID")));//6
				arrCol.add(Helper.correctNull((String)rs.getString("INWARD_BORROWER_NAME")));//7
				
				arrCol.add(Helper.correctNull((String)rs.getString("SN_FBLIMIT")));//8
				arrCol.add(Helper.correctNull((String)rs.getString("SN_NFBLIMIT")));//9
				arrCol.add(Helper.correctNull((String)rs.getString("SN_TOTAL_EXPOSURE")));//10
				arrCol.add(Helper.correctNull((String)rs.getString("SN_EXPOSURE_BRACKET")));//11
				arrCol.add(Helper.correctNull((String)rs.getString("SN_HANDLED_AT")));//12
				arrCol.add(Helper.correctNull((String)rs.getString("SN_LOAN_PROCESSOFFICERNAME")));//13
				arrCol.add(Helper.correctNull((String)rs.getString("SN_STATUS_OFPROPOSAL")));//14
				arrCol.add(Helper.correctNull((String)rs.getString("SN_TAT")));//15
				arrCol.add(Helper.correctNull((String)rs.getString("SN_REMARKS")));//16
				arrCol.add(Helper.correctNull((String)rs.getString("SN_TYPE_OF_PROPOSAL")));//17
				arrCol.add(Helper.correctNull((String)rs.getString("SN_DUE_DATEOF_WC")));//18
				arrCol.add(Helper.correctNull((String)rs.getString("SN_SANCTIONING_AUTH")));//19
				arrCol.add(Helper.correctNull((String)rs.getString("SN_SANCTION_REF_NO")));//20
				arrCol.add(Helper.correctNull((String)rs.getString("SN_SANCTION_DATE")));//21
				arrCol.add(Helper.correctNull((String)rs.getString("SN_LODGE_REF_NO")));//22
				arrCol.add(Helper.correctNull((String)rs.getString("SN_LODGE_DATE")));//23
				arrCol.add(Helper.correctNull((String)rs.getString("SN_DROPPED_REF_NO")));//24
				arrCol.add(Helper.correctNull((String)rs.getString("SN_DROPPED_DATE")));//25
				arrCol.add(Helper.correctNull((String)rs.getString("SN_DEFFERRED_DETAILS")));//26
				arrCol.add(Helper.correctNull((String)rs.getString("SN_DEFERRED_DATE")));//27
				
				arrCol.add(Helper.correctNull((String)rs.getString("ACT_FLAG_SN")));//28
				
				
				
				
				
				
				arrRow.add(arrCol);
			}
			hshValues.put("arrRow",arrRow);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getgeclidentification "+ce.toString());
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());					
			}
		}
			

		
		return hshValues;
		
	}
	
	
	
	public void updateinwardoutwardshortnotedetails(HashMap hshReqValues) throws EJBException 
	{
		HashMap hshQueryValues = new HashMap();
		HashMap hshValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		ResultSet rs = null;
		String strQuery = "";
		try
		{
			String action = (String)correctNull((String)hshReqValues.get("hidAction"));
			if(action.equalsIgnoreCase("Insert"))
			{
				
				hshQueryValues = new HashMap();
				hshValues = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshValues.put("strQueryId", "deleteinwardshortnotes");
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));
				hshValues.put("arrValues",arrValues);
				hshQueryValues.put("1",hshValues);
				
				
				arrValues=new ArrayList();
				hshValues = new HashMap();
				hshQueryValues.put("size","2");
				hshValues.put("strQueryId","insertinwardoutwardshortnotes");
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposedfblimit")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposednfblimit")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_totalexposure")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("exposurebracket")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposedhandledat")));		
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_loanprocessofficername")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposalstatus")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_TAT")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposal")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_duedatewc")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_sanctioningauth")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctionrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctiondate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgerefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgedate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppedrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppeddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddetails")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("activity_flagin_proposal")));
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("2",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				
			}
			if(action.equalsIgnoreCase("Update"))
			{
				hshQueryValues.put("size","1");
				hshValues.put("strQueryId","updateinwardoutwardshortnotes");			
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposedfblimit")));				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_proposednfblimit")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_totalexposure")));	
				arrValues.add(Helper.correctNull((String)hshReqValues.get("exposurebracket")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposedhandledat")));		
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_loanprocessofficername")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposalstatus")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_TAT")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_remarks")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_proposal")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_duedatewc")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("sel_sanctioningauth")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctionrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_sanctiondate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgerefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_lodgedate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppedrefno")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_droppeddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddetails")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_deferreddate")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("strUserId")));
				
				arrValues.add(Helper.correctNull((String)hshReqValues.get("activity_flagin_proposal")));
				arrValues.add(Helper.correctNull((String)hshReqValues.get("txt_inwardrefno")));	
				hshValues.put("arrValues",arrValues);							
				hshQueryValues.put("1",hshValues);
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			}
		}
		catch (Exception e)
		{
			throw new EJBException("Error in bean "+e.toString());
		}
		finally
		{
			try
			{				
				if(rs != null)
				{
					rs.close();
				}
				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}	
		
	}
	
	
	public HashMap proposalsummeryRet(HashMap hshValues) 
	{
		java.text.NumberFormat nf = java.text.NumberFormat.getInstance();
		nf.setMinimumFractionDigits(2);
		nf.setMaximumFractionDigits(2);
		nf.setGroupingUsed(false);
		HashMap hshRecord = new HashMap();
		HashMap hshResult = new HashMap();
		HashMap hshFinValues = new HashMap();
		HashMap hshReqValues = new HashMap();
		ArrayList arrayCol = new ArrayList();
		ArrayList arrayRow = new ArrayList();
		ArrayList arrayRow1 = new ArrayList();
		ArrayList arrAppLiabRow = new ArrayList();
		ArrayList arrAppLiabCol = new ArrayList();
		ArrayList arrJAppLiabRow = new ArrayList();
		ArrayList arrJAppLiabCol = new ArrayList();
		ArrayList arrGuarLiabRow = new ArrayList();
		ArrayList arrGuarLiabCol = new ArrayList();
		ArrayList arrGuardetails = new ArrayList();
		ArrayList arrGuardetailsRow = new ArrayList();
		ArrayList arrProperitierdetails = new ArrayList();
		ArrayList arrProperitierdetailsRow = new ArrayList();
		ArrayList arrRowBor=new ArrayList();
		ArrayList arrColBor= null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		ResultSet rs3 = null,rs4=null;
		ArrayList arrVal = new ArrayList();
		ArrayList arrRow = new ArrayList();
		String strApplicationNo = "", strOrgCode = "";
		String strQuery = "", strQuery1 = "", strQuery2 = "", strQuery3 = "";
		String strappId = "";
		String strtake = "";
		String strOrgRegion = "";
		String strOrgRegionName = "";
		String strAppReceivedDate = "";
		String strCLPUdate = "";
		String strSanctioningAuth = "";
		String strConstitution = "", strConstCode = "";
		String strBanking = "", strBankingSince = "", strConstCode1 = "";
		String strCoAppID = "";
		String strGuarID = "";
		int intInstallmentExcHoliday = 0;
		String strAppid = Helper
				.correctNull((String) hshValues.get("comappid"));
		String strProductType = Helper.correctNull((String) hshValues
				.get("strProductType"));
		String strCity = "", strState = "", strCountry = "", strdistrict = "";
		String strPrdcode = Helper
				.correctInt((String) hshValues.get("prdcode"));
		String strCustId = "", strOccuCode = "", strOccuCode1 = "";
		String strEmpStatus = "", strRepayType = "";
		String strinw_orgcode = "";
		ArrayList vecData = new ArrayList();
		ArrayList vecVal = new ArrayList();
		ArrayList vecDataSchl = new ArrayList();
		String staffproduct = "";
		String strNewEmployment = "";
		String strDemoRelation = "";
		String strRelDesc = "", strAppType = "";
		String strVerifyWithCFR = "", strNamApprCFR = "", strRefNoCFR = "", ApprUserid = "", strStatusVer = "";
		double MonthlyIncome = 0.00, Monthlydeduction = 0.00;
		String strgstnumber="",srwhethergstn="",strexempted="";
		String strborrower="",strpurposeloan="",stragriallied="",strpermact="",strpermactelig="",
		strexposueelig="",strborroweravailed="",strborroweravailedelig="",strmsmerestscheme="",strmsmerestschemeelig="",strframework="",strframeworkelig="";
		
		DscrBean dscrobj = new DscrBean();
		try {
			String strAmountForm = Helper.correctNull((String) hshValues
					.get("strAmountVal"));

			strNewEmployment = correctNull((String) hshValues
					.get("strNewEmployment"));
			strApplicationNo = correctNull((String) hshValues.get("appno"));
			strappId = Helper.correctNull((String) hshValues.get("comappid"));
			strOrgCode = Helper.correctNull((String) hshValues
					.get("strOrgCode"));
		
			
			

			strOrgCode = Helper.correctNull((String) hshValues
					.get("strOrgCode"));
			strQuery = SQLParser.getSqlQuery("selBranchCityName^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord
						.put("orgcity", correctNull(rs.getString("city_name")));
				hshRecord.put("orgstate", correctNull(rs
						.getString("state_name")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
				hshRecord.put("orgphone",
						correctNull(rs.getString("org_phone")));
			}
			if (rs != null) {
				rs.close();
			}
			
			
			
			strQuery=SQLParser.getSqlQuery("selcusidnewforcheckben^"+strApplicationNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				strAppid=Helper.correctNull((rs.getString("DEMO_APPID")));
				strappId=Helper.correctNull((rs.getString("DEMO_APPID")));
				hshValues.put("hidapplicantid", strappId);
				hshValues.put("comappid",strappId);
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getPerapplicantdetails^"+strAppid);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("borrowername", Helper.correctNull((rs.getString("FULL_NAME"))));
				hshRecord.put("PERAPP_CBSID", Helper.correctNull((rs.getString("PERAPP_CBSID"))));
				hshRecord.put("CONSTITUTION", Helper.correctNull((rs.getString("CBS_STATIC_DATA_DESC"))));
				hshRecord.put("PERAPP_PANNO", Helper.correctNull((rs.getString("PERAPP_PANNO"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getbranchnamesolid^"+strApplicationNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("ORG_SCODE", Helper.correctNull((rs.getString("ORG_SCODE"))));
				hshRecord.put("ORG_NAME", Helper.correctNull((rs.getString("ORG_NAME"))));
				hshRecord.put("Typeofproposal", Helper.correctNull((rs.getString("Typeofproposal"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("sel_applKYCNorms^"+strAppid);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("KYC_natofBussActivity", Helper.correctNull((rs.getString("kyc_kycActivity"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getsanctioningAuthorityRet^"+strApplicationNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("sanctionauthority", Helper.correctNull((rs.getString("CBS_STATIC_DATA_DESC"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getsanctioningdeptRet^"+strApplicationNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("sanctiondept", Helper.correctNull((rs.getString("CBS_STATIC_DATA_DESC"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_appl_details^"
					+ strApplicationNo);
			
			
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppType = Helper.correctNull(rs.getString("app_renew_flag"));
				if (strAppType.equalsIgnoreCase("S"))
					strAppType = "Restructure";
				else if (strAppType.equalsIgnoreCase("R"))
					strAppType = "Renew";
				else if (strAppType.equalsIgnoreCase("P"))
					strAppType = "Postsanction";
				else
					strAppType = "Fresh";

				hshRecord.put("strAppType", strAppType);
			
			
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_facdetails_KFS^"
					+ strApplicationNo + "^" + "1");
			if (rs.next()) {
				hshRecord.put("strIntIndexid",correctNull(rs.getString("facility_intsubtype")));
			}
			
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("selworkflow^" + strApplicationNo);
			if (rs.next()) {
				hshRecord.put("strInwardBranch", Helper.correctNull(rs
						.getString("org_name")));
			}
			
			String strMCLRtype="";
			strQuery = SQLParser
					.getSqlQuery("selectretail_KFS^" + strApplicationNo);
					if (rs != null)
						rs.close();
					rs = DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						hshRecord.put("strSancAmt", nf.format(Double
								.parseDouble(Helper.correctDouble(rs
										.getString("loan_recmdamt")))));
						hshRecord.put("strInterestType", Helper.correctNull(rs
								.getString("loan_inttype")));
						strMCLRtype = correctNull(rs.getString("mclr_type"));
						
						hshRecord.put("strMCLRtype_ID", strMCLRtype);
						if (strMCLRtype.equalsIgnoreCase("O"))
							hshRecord.put("strMCLRtype", "One day MCLR");
						else if (strMCLRtype.equalsIgnoreCase("M"))
							hshRecord.put("strMCLRtype", "Monthly MCLR");
						else if (strMCLRtype.equalsIgnoreCase("Q"))
							hshRecord.put("strMCLRtype", "Quartely MCLR");
						else if (strMCLRtype.equalsIgnoreCase("H"))
							hshRecord.put("strMCLRtype", "Half yearly MCLR");
						else if (strMCLRtype.equalsIgnoreCase("Y"))
							hshRecord.put("strMCLRtype", "Yearly MCLR");
						
						
						hshRecord.put("strInterestType", Helper.correctNull(rs
								.getString("loan_inttype")));
					}
					int intTenor=0;
					int HolidayPeriod=0;
					double dblIntrRate = 0.00;
					String strMCLRPercnt="";
					strQuery = SQLParser
							.getSqlQuery("selectretail_KFS^" + strApplicationNo);
					if (rs != null)
						rs.close();
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						
						intTenor = Integer.parseInt(Helper.correctInt(rs
								.getString("loan_reqterms")));
						HolidayPeriod = Integer.parseInt(Helper.correctInt(rs
								.getString("loan_noofinstallment")));
						intTenor = intTenor - HolidayPeriod;
						
						dblIntrRate = Double.parseDouble(Helper.correctDouble(rs
								.getString("loan_modintrate")));
						hshRecord
								.put("strModifiedInterest", nf.format(dblIntrRate));
						
						
						strMCLRtype = correctNull(rs.getString("mclr_type"));
						if (!correctNull(rs.getString("LOAN_MCLRTYPE"))
								.equalsIgnoreCase("")) {
							strMCLRPercnt = correctNull(
									rs.getString("LOAN_MCLRTYPE")).split("@")[1];
						}
						hshRecord.put("strMCLRpercent", strMCLRPercnt);
						hshRecord.put("strMCLRsplit", nf.format(Double
								.parseDouble(Helper.correctDouble(rs
										.getString("loan_modintrate")))
								- Double.parseDouble(Helper
										.correctDouble(strMCLRPercnt))));
						hshRecord.put("strMCLRtype_ID", strMCLRtype);
					}
					hshRecord.put("strTenor", String.valueOf(intTenor));
					hshRecord.put("strHolidayPeriod", String
							.valueOf(HolidayPeriod));
			
			
					strQuery = SQLParser
							.getSqlQuery("selectretail_KFS^" + strApplicationNo);
					if (rs != null)
						rs.close();
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("strDesc", Helper.correctNull(rs
								.getString("category"))
								+ "-"
								+ Helper.correctNull(rs.getString("subcategory")));
					}
			
			
			
			
			strQuery = SQLParser.getSqlQuery("selBranchCityName^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("orgname", correctNull(rs.getString("org_name")));
				hshRecord.put("orgadd1", correctNull(rs.getString("org_add1")));
				hshRecord.put("orgadd2", correctNull(rs.getString("org_add2")));
				hshRecord
						.put("orgcity", correctNull(rs.getString("city_name")));
				hshRecord.put("orgstate", correctNull(rs
						.getString("state_name")));
				hshRecord.put("orgzip", correctNull(rs.getString("org_zip")));
				hshRecord.put("orgphone",
						correctNull(rs.getString("org_phone")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("selapprecdate^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppReceivedDate = Helper.correctNull((String) rs
						.getString("inward_appliedon"));
				hshRecord.put("clpudate", Helper.correctNull((String) rs
						.getString("inward_clpudate")));
				// strCLPUdate=Helper.correctNull((String)rs.getString("inward_clpudate"));
			}

			if (rs != null) {
				rs.close();
			}
			/*
			 * strQuery=SQLParser.getSqlQuery("sel_sanctionbranch^"+strApplicationNo
			 * +"^"+strApplicationNo); rs=DBUtils.executeQuery(strQuery);
			 * if(rs.next()) {
			 * hshRecord.put("homebranch",Helper.correctNull((String
			 * )rs.getString("org_name"))); } if(rs !=null) { rs.close(); }
			 */
			strQuery = SQLParser.getSqlQuery("sel_branchname^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strPrdcode = Helper.correctNull(rs.getString("app_prdcode"));

				if (Helper.correctNull(rs.getString("inward_applnprocessat"))
						.equalsIgnoreCase("6"))
					hshRecord.put("homebranch", Helper.correctNull((String) rs
							.getString("org_name"))
							+ " [RLPC]");
				else if (Helper.correctNull(
						rs.getString("inward_applnprocessat"))
						.equalsIgnoreCase("3"))
					hshRecord.put("homebranch", Helper.correctNull((String) rs
							.getString("org_name"))
							+ " [CLPU]");
				else
					hshRecord.put("homebranch", Helper.correctNull((String) rs
							.getString("org_name")));

				strinw_orgcode = Helper.correctNull((String) rs
						.getString("org_code"));
				
				if(Helper.correctNull(rs.getString("app_orglevel")).equalsIgnoreCase("C")||Helper.correctNull(rs.getString("app_orglevel")).equalsIgnoreCase("D"))
				{
					strQuery = SQLParser.getSqlQuery("sel_pertainingbr_ret^"
							+ strApplicationNo);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("homebranch", correctNull(rs.getString("org_name")));
						strinw_orgcode=Helper.correctNull(rs.getString("org_code"));
					}
				}
			}
			if (rs != null) {
				rs.close();
			}
			if (!strinw_orgcode.equalsIgnoreCase("")) {
				strOrgRegion = strinw_orgcode.substring(0, 6);
			}
			strOrgRegion = strOrgRegion + "000000000";
			strQuery = SQLParser.getSqlQuery("selorgname^" + strOrgRegion);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strOrgRegionName = Helper.correctNull((String) rs
						.getString("org_name"));
			}
			if (rs != null) {
				rs.close();
			}
			hshRecord.put("strOrgRegionName", strOrgRegionName);
			hshRecord.put("strAppReceivedDate", strAppReceivedDate);
			/*
			 * For getting the Personal Information of the Applicant / Joint
			 * Applicant
			 */
			if(strappId.equalsIgnoreCase(""))
			{
				
				if (rs != null) {
					rs.close();
				}
				
				
				
				strQuery=SQLParser.getSqlQuery("selcusidnewforcheckben^"+strApplicationNo);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					strAppid=Helper.correctNull((rs.getString("DEMO_APPID")));
					strappId=Helper.correctNull((rs.getString("DEMO_APPID")));
					hshValues.put("hidapplicantid", strappId);
					hshValues.put("comappid",strappId);
				}
				
				
				
				
			}
			
			strQuery=SQLParser.getSqlQuery("selbeneficial^"+strappId);
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				arrColBor=new ArrayList();
				arrColBor.add(Helper.correctNull((String)rs.getString("BEN_OWN_ID")));
				arrColBor.add(Helper.correctNull((String)rs.getString("BEN_OWN")));
				String identidoc=Helper.correctNull((String)rs.getString("ID_DOC"));
				strQuery=SQLParser.getSqlQuery("selectidentificationdoc^"+identidoc);
				rs2=DBUtils.executeQuery(strQuery);
				if(rs2.next())
				{
				arrColBor.add(Helper.correctNull((String)rs2.getString("STAT_DATA_DESC1")));
				}
				if(rs2!=null)
				{
					rs2.close();
				}
				arrColBor.add(Helper.correctNull((String)rs.getString("ID_DOC_NUM")));
				arrColBor.add(Helper.correctNull((String)rs.getString("PERC_SHARES_HELD")));
				String relatborr=Helper.correctNull((String)rs.getString("RELA_BORR"));
				strQuery=SQLParser.getSqlQuery("selectrelationshipwithborrower^"+relatborr);
				rs2=DBUtils.executeQuery(strQuery);
				if(rs2.next())
				{
				arrColBor.add(Helper.correctNull((String)rs2.getString("CBS_STATIC_DATA_DESC")));
				}
				if(rs2!=null)
				{
					rs2.close();
				}
				arrColBor.add(Helper.correctNull((String)rs.getString("NO_SHARES_HELD")));
				arrColBor.add(Helper.correctNull((String)rs.getString("GUART_AVB")));
				arrRowBor.add(arrColBor);
			}
			hshRecord.put("arrRowBor", arrRowBor);
			strQuery = SQLParser.getSqlQuery("sel_appl_details^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("cus_id", Helper.correctNull((String) rs
						.getString("perapp_id")));
				hshRecord.put("app_processdate", Helper.correctNull((String) rs
						.getString("app_processdate")));
				hshRecord.put("perapp_employment",
						Helper.correctNull((String) rs
								.getString("perapp_employment")));
				strCustId = Helper.correctNull((String) rs
						.getString("perapp_id"));
				hshRecord.put("cus_name", Helper.correctNull((String) rs
						.getString("fullname")));
				hshRecord.put("app_cpcdate", Helper.correctNull((String) rs
						.getString("app_cpcdate")));
				hshRecord.put("app_clpudate", Helper.correctNull((String) rs
						.getString("app_clpudate")));
				hshRecord.put("APP_ROHODATE", Helper.correctNull((String) rs
						.getString("APP_ROHODATE")));
				hshRecord.put("cus_dob", Helper.correctNull((String) rs
						.getString("dob")));
				hshRecord.put("PERAPP_MSE_REGNO", Helper.correctNull((String) rs
						.getString("PERAPP_MSE_REGNO")));
				hshRecord.put("PERAPP_UDYOG_AADHAR", Helper.correctNull((String) rs
						.getString("PERAPP_UDYOG_AADHAR")));
				strConstCode = Helper.correctNull((String) rs
						.getString("perapp_constitution"));
				strEmpStatus = Helper.correctNull((String) rs
						.getString("empemployment"));
				strAppType = Helper.correctNull(rs.getString("app_renew_flag"));
				if (strAppType.equalsIgnoreCase("S"))
					strAppType = "Restructure";
				else if (strAppType.equalsIgnoreCase("R"))
					strAppType = "Renew";
				else if (strAppType.equalsIgnoreCase("P"))
					strAppType = "Postsanction";
				else
					strAppType = "Fresh";

				hshRecord.put("strAppType", strAppType);
				hshRecord.put("strConstCode", strConstCode);
				if (!strConstCode.equalsIgnoreCase("")) {
					strQuery1 = SQLParser
							.getSqlQuery("sel_cbsstaticdescbycode^2^"
									+ strConstCode);
					rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						strConstitution = Helper.correctNull((String) rs1
								.getString("cbs_static_data_desc"));
					}
				}
				hshRecord.put("strConstitution", strConstitution);
				strBanking = Helper.correctNull((String) rs
						.getString("perapp_bank"));
				if (strBanking.equalsIgnoreCase("1")) {
					strBankingSince = Helper.correctNull((String) rs
							.getString("perapp_banksince"));
				} else {
					strBankingSince = "No";
				}
				hshRecord.put("strBankingSince", strBankingSince);
				hshRecord.put("strNetworth", nf.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("perapp_networth")))));
				hshRecord.put("strNetworthAson", Helper.correctNull(rs
						.getString("perapp_networthason")));
				strQuery2 = SQLParser.getSqlQuery("sel_customerdetail^"
						+ strappId);
				rs2 = DBUtils.executeQuery(strQuery2);
				if (rs2.next()) {
					String residentType = correctNull(rs2
							.getString("INDINFO_RESIDENT_STATUS"));
					hshRecord.put("residentType", residentType);
					if (residentType.equals("N")) {
						hshRecord.put("txtperapp_address1", correctNull(rs2
								.getString("CON_COMADDR1")));
						hshRecord.put("txtperapp_address2", correctNull(rs2
								.getString("CON_COMADDR2")));
						hshRecord.put("txtperapp_address3", correctNull(rs2
								.getString("CON_COMVILLAGE")));
						hshRecord.put("txtperapp_zip", correctNull(rs2
								.getString("CON_COMZIP")));
						strCity = Helper.correctNull(rs2
								.getString("CON_COMCITY"));
						strState = Helper.correctNull(rs2
								.getString("CON_COMSTATE"));
						strCountry = Helper.correctNull(rs2
								.getString("CON_COMCOUNTRY"));
						strdistrict = Helper.correctNull(rs2
								.getString("CON_COMDIST"));
					} else {
						hshRecord.put("txtperapp_address1", correctNull(rs2
								.getString("CON_PERMADDR1")));
						hshRecord.put("txtperapp_address2", correctNull(rs2
								.getString("CON_PERMADDR2")));
						hshRecord.put("txtperapp_address3", correctNull(rs2
								.getString("CON_PERMVILLAGE")));
						hshRecord.put("txtperapp_zip", correctNull(rs2
								.getString("CON_PERMZIP")));
						strCity = Helper.correctNull(rs2
								.getString("CON_PERMCITY"));
						strState = Helper.correctNull(rs2
								.getString("CON_PERMSTATE"));
						strCountry = Helper.correctNull(rs2
								.getString("CON_PERMCOUNTRY"));
						strdistrict = Helper.correctNull(rs2
								.getString("CON_PERMDIST"));
					}

					if (!strCity.equalsIgnoreCase("")) {
						if (rs != null) {
							rs.close();
						}
						strQuery2 = SQLParser.getSqlQuery("sel_cityname^"
								+ strCity);
						rs = DBUtils.executeQuery(strQuery2);
						if (rs.next()) {
							hshRecord.put("txtperapp_city", correctNull(rs
									.getString("city_name")));
							strCity = Helper.correctNull(rs
									.getString("city_name"));
						}
					}

					if (!strState.equalsIgnoreCase("")) {
						if (rs != null) {
							rs.close();
						}
						strQuery2 = SQLParser.getSqlQuery("sel_statename^"
								+ strState);
						rs = DBUtils.executeQuery(strQuery2);
						if (rs.next()) {
							hshRecord.put("txtperapp_state", correctNull(rs
									.getString("state_name")));
							strState = Helper.correctNull(rs
									.getString("state_name"));
						}
					}

					if (!strCountry.equalsIgnoreCase("")) {
						if (rs != null) {
							rs.close();
						}
						strQuery2 = SQLParser
								.getSqlQuery("sel_countrynamebycode^"
										+ strCountry);
						rs = DBUtils.executeQuery(strQuery2);
						if (rs.next()) {
							hshRecord.put("txtperapp_country", correctNull(rs
									.getString("con_country")));
							strCountry = Helper.correctNull(rs
									.getString("con_country"));
						}
					}
					if (rs != null)
						rs.close();
					strQuery2 = SQLParser.getSqlQuery("sel_districtmaster^"
							+ strdistrict);
					rs = DBUtils.executeQuery(strQuery2);
					if (rs.next()) {
						hshRecord.put("txtperapp_district", correctNull(rs
								.getString("district_desc")));
					}

				}
				if (rs2 != null)
					rs2.close();
				strQuery2 = SQLParser.getSqlQuery("sel_perdemo^" + strappId);
				rs2 = DBUtils.executeQuery(strQuery2);
				if (rs2.next()) {
					hshRecord.put("perinc_yearsalary", nf.format(Double
							.parseDouble(Helper.correctDouble(rs2
									.getString("perinc_yearsalary")))));
					hshRecord.put("perinc_year1_income", nf.format(Double
							.parseDouble(Helper.correctDouble(rs2
									.getString("perinc_year1_income")))));
					hshRecord.put("perinc_yearend1", Helper.correctNull(rs2
							.getString("perinc_yearend1")));
				}
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_CustDetails^" + strCustId);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strOccuCode1 = Helper.correctNull((String) rs
						.getString("kyc_kycactivity"));
				hshRecord.put("per_occupation", strOccuCode1);
			}
			
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_company_info^" + strCustId);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("COMINFO_GSTIN", Helper.correctNull(rs.getString("COMINFO_GSTIN")));
				hshRecord.put("COMINFO_GSTINREG", Helper.correctNull(rs.getString("COMINFO_GSTINREG")));
			}

			/*
			 * if(rs !=null) { rs.close(); }
			 * if(!strOccuCode.equalsIgnoreCase("")) {
			 * strQuery1=SQLParser.getSqlQuery
			 * ("getstaticdatavaldispcorporatenew^70^"+strOccuCode);
			 * rs=DBUtils.executeQuery(strQuery1); if(rs.next()) {
			 * hshRecord.put("per_occupation",
			 * Helper.correctNull((String)rs.getString("stat_data_desc1"))); } }
			 */
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("pergetfinancialliab^a" + strappId
					+ "^" + strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrAppLiabCol = new ArrayList();
				arrAppLiabCol.add(Helper.correctNull((String) rs
						.getString("liab_loantype")));
				arrAppLiabCol.add(Helper.correctNull((String) rs
						.getString("liab_accountno")));
				arrAppLiabCol.add(Helper.correctDouble((String) rs
						.getString("liab_crdlimit")));
				arrAppLiabCol.add(Helper.correctNull((String) rs
						.getString("liab_sancrefno")));
				arrAppLiabCol.add(Helper.correctDouble((String) rs
						.getString("liab_balance")));
				arrAppLiabCol.add(Helper.correctNull((String) rs
						.getString("liab_presentstatus")));
				arrAppLiabCol.add(Helper.correctNull((String) rs
						.getString("per_securities")));
				arrAppLiabRow.add(arrAppLiabCol);
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_CoApp_details^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strCoAppID = Helper.correctNull((String) rs
						.getString("perapp_id"));
				arrayCol = new ArrayList();
				arrayCol.add(Helper.correctNull((String) rs
						.getString("fullname")));
				strConstCode = Helper.correctNull((String) rs
						.getString("perapp_constitution"));
				strDemoRelation = Helper.correctNull((String) rs
						.getString("demo_relation"));
				if (!strConstCode.equalsIgnoreCase("")) {
					strQuery1 = SQLParser
							.getSqlQuery("sel_cbsstaticdescbycode^2^"
									+ strConstCode);
					rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						strConstitution = Helper.correctNull((String) rs1
								.getString("cbs_static_data_desc"));
					}
				}
				if (!strCoAppID.equalsIgnoreCase("")) {
					strQuery2 = SQLParser.getSqlQuery("sel_customerdetails^"
							+ strCoAppID);
					rs2 = DBUtils.executeQuery(strQuery2);
					if (rs2.next()) {

						String residentType = correctNull(rs2
								.getString("INDINFO_RESIDENT_STATUS"));

						if (residentType.equals("N")) {
							strCity = Helper.correctNull(rs2
									.getString("CON_COMCITY"));
							strState = Helper.correctNull(rs2
									.getString("CON_COMSTATE"));
							strCountry = Helper.correctNull(rs2
									.getString("CON_COMCOUNTRY"));
						} else {
							strCity = Helper.correctNull(rs2
									.getString("CON_PERMCITY"));
							strState = Helper.correctNull(rs2
									.getString("CON_PERMSTATE"));
							strCountry = Helper.correctNull(rs2
									.getString("CON_PERMCOUNTRY"));
						}

						if (!strCity.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser.getSqlQuery("sel_cityname^"
									+ strCity);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strCity = Helper.correctNull(rs3
										.getString("city_name"));
							}
						}
						if (!strState.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser.getSqlQuery("sel_statename^"
									+ strState);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strState = Helper.correctNull(rs3
										.getString("state_name"));
							}
						}
						if (!strCountry.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser
									.getSqlQuery("sel_countrynamebycode^"
											+ strCountry);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strCountry = Helper.correctNull(rs3
										.getString("con_country"));
							}
						}

						String strAddress = "";
						if (residentType.equals("N")) {
							strAddress = Helper.correctNull(rs2
									.getString("CON_COMADDR1"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_COMADDR2"))
									+ "&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_COMVILLAGE"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_COMDIST"))
									+ ",&nbsp;<br>"
									+ strCity
									+ ",&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_COMZIP"))
									+ "<br>"
									+ strState + ",&nbsp;" + strCountry;
						} else {
							strAddress = Helper.correctNull(rs2
									.getString("CON_PERMADDR1"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_PERMADDR2"))
									+ "&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_PERMVILLAGE"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_PERMDIST"))
									+ ",&nbsp;<br>"
									+ strCity
									+ ",&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_PERMZIP"))
									+ "<br>"
									+ strState + ",&nbsp;" + strCountry;
						}

						arrayCol.add(strAddress);
					} else {
						arrayCol.add("");
					}
				} else {
					arrayCol.add("");
				}
				arrayCol.add(strConstitution);

				if (rs1 != null) {
					rs1.close();
				}
				strOccuCode = "";
				strQuery = SQLParser.getSqlQuery("sel_CustDetails^"
						+ strCoAppID);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					strOccuCode1 = Helper.correctNull((String) rs1
							.getString("kyc_kycactivity"));
				}
				/*
				 * if(rs1 !=null) { rs1.close(); }
				 * if(!strOccuCode.equalsIgnoreCase("")) {
				 * strQuery1=SQLParser.getSqlQuery
				 * ("getstaticdatavaldispcorporatenew^70^"+strOccuCode);
				 * rs1=DBUtils.executeQuery(strQuery1); if(rs1.next()) {
				 * strOccuCode1
				 * =Helper.correctNull((String)rs1.getString("stat_data_desc1"
				 * )); } }
				 */

				arrayCol.add(strOccuCode1);
				arrayCol.add(Helper.correctNull((String) rs.getString("dob")));
				// Getting Co-Applicant Relationship value
				if (!strDemoRelation.equalsIgnoreCase("")) {
					rs2 = DBUtils
							.executeLAPSQuery("sel_CBSStaticDataPassingCode^"
									+ "32" + "^" + strDemoRelation);
					if (rs2.next()) {
						strRelDesc = Helper.correctNull(rs2
								.getString("CBS_STATIC_DATA_DESC"));
					}
				}
				if (rs2 != null) {
					rs2.close();
				}
				arrayCol.add(strRelDesc);
				arrayCol.add(nf.format(Double
						.parseDouble(Helper.correctDouble((String) rs
								.getString("perapp_networth")))));
				if (Helper.correctNull(rs.getString("empemployment"))
						.equalsIgnoreCase("1")
						|| Helper.correctNull(rs.getString("empemployment"))
								.equalsIgnoreCase("9"))
					arrayCol.add(Helper.converAmount(nf.format(Double
							.parseDouble(Helper.correctDouble(rs
									.getString("perinc_yearsalary")))),
							strAmountForm));
				else
					arrayCol.add(Helper.converAmount(nf.format(Double
							.parseDouble(Helper.correctDouble(rs
									.getString("perinc_year1_income")))),
							strAmountForm)
							+ "- ("
							+ Helper.correctNull(rs
									.getString("perinc_yearend1")) + ")");
				arrayRow.add(arrayCol);
				if (rs3 != null) {
					rs3.close();
				}
				strQuery3 = SQLParser.getSqlQuery("pergetfinancialliab^c"
						+ strCoAppID + "^" + strApplicationNo);
				rs3 = DBUtils.executeQuery(strQuery3);
				while (rs3.next()) {
					arrJAppLiabCol = new ArrayList();
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_loantype")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_accountno")));
					arrJAppLiabCol.add(Helper.correctDouble((String) rs3
							.getString("liab_crdlimit")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_sancrefno")));
					arrJAppLiabCol.add(Helper.correctDouble((String) rs3
							.getString("liab_balance")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_presentstatus")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("per_securities")));
					arrJAppLiabRow.add(arrJAppLiabCol);
				}
			}
			if (rs != null) {
				rs.close();
			}
			strRelDesc = strDemoRelation = "";
			// for gur..
			strQuery = SQLParser.getSqlQuery("sel_GrApp_details^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strCoAppID = Helper.correctNull((String) rs
						.getString("perapp_id"));
				arrGuardetails = new ArrayList();
				arrGuardetails.add(Helper.correctNull((String) rs
						.getString("fullname")));
				strConstCode = Helper.correctNull((String) rs
						.getString("perapp_constitution"));
				strDemoRelation = Helper.correctNull((String) rs
						.getString("demo_relation"));
				if (!strConstCode.equalsIgnoreCase("")) {
					strQuery1 = SQLParser
							.getSqlQuery("sel_cbsstaticdescbycode^2^"
									+ strConstCode);
					rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						strConstitution = Helper.correctNull((String) rs1
								.getString("cbs_static_data_desc"));
					}
				}
				if (!strCoAppID.equalsIgnoreCase("")) {
					strQuery2 = SQLParser.getSqlQuery("sel_customerdetails^"
							+ strCoAppID);
					rs2 = DBUtils.executeQuery(strQuery2);
					if (rs2.next()) {
						String residentType = correctNull(rs2
								.getString("INDINFO_RESIDENT_STATUS"));

						if (residentType.equals("N")) {
							strCity = Helper.correctNull(rs2
									.getString("CON_COMCITY"));
							strState = Helper.correctNull(rs2
									.getString("CON_COMSTATE"));
							strCountry = Helper.correctNull(rs2
									.getString("CON_COMCOUNTRY"));
						} else {
							strCity = Helper.correctNull(rs2
									.getString("CON_PERMCITY"));
							strState = Helper.correctNull(rs2
									.getString("CON_PERMSTATE"));
							strCountry = Helper.correctNull(rs2
									.getString("CON_PERMCOUNTRY"));
						}

						if (!strCity.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser.getSqlQuery("sel_cityname^"
									+ strCity);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strCity = Helper.correctNull(rs3
										.getString("city_name"));
							}
						}

						if (!strState.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser.getSqlQuery("sel_statename^"
									+ strState);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strState = Helper.correctNull(rs3
										.getString("state_name"));
							}
						}
						if (!strCountry.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser
									.getSqlQuery("sel_countrynamebycode^"
											+ strCountry);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strCountry = Helper.correctNull(rs3
										.getString("con_country"));
							}
						}
						String strAddress = "";
						if (residentType.equals("N")) {
							strAddress = Helper.correctNull(rs2
									.getString("CON_COMADDR1"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_COMADDR2"))
									+ "&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_COMVILLAGE"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_COMDIST"))
									+ ",&nbsp;<br>"
									+ strCity
									+ ",&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_COMZIP"))
									+ "<br>"
									+ strState + ",&nbsp;" + strCountry;
						} else {
							strAddress = Helper.correctNull(rs2
									.getString("CON_PERMADDR1"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_PERMADDR2"))
									+ "&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_PERMVILLAGE"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_PERMDIST"))
									+ ",&nbsp;<br>"
									+ strCity
									+ ",&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_PERMZIP"))
									+ "<br>"
									+ strState + ",&nbsp;" + strCountry;
						}
						arrGuardetails.add(strAddress);
					} else {
						arrGuardetails.add("");
					}
				} else {
					arrGuardetails.add("");
				}
				arrGuardetails.add(strConstitution);

				if (rs1 != null) {
					rs1.close();
				}
				strOccuCode = "";
				strQuery = SQLParser.getSqlQuery("sel_CustDetails^"
						+ strCoAppID);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					strOccuCode1 = Helper.correctNull((String) rs1
							.getString("kyc_kycactivity"));
				}
				/*
				 * if(rs1 !=null) { rs1.close(); }
				 * if(!strOccuCode.equalsIgnoreCase("")) {
				 * strQuery1=SQLParser.getSqlQuery
				 * ("getstaticdatavaldispcorporatenew^70^"+strOccuCode);
				 * rs1=DBUtils.executeQuery(strQuery1); if(rs1.next()) {
				 * strOccuCode1
				 * =Helper.correctNull((String)rs1.getString("stat_data_desc1"
				 * )); } }
				 */

				arrGuardetails.add(strOccuCode1);
				arrGuardetails.add(Helper.correctNull((String) rs
						.getString("dob")));
				// Getting Guarantor Relationship value
				if (!strDemoRelation.equalsIgnoreCase("")) {
					rs2 = DBUtils
							.executeLAPSQuery("sel_CBSStaticDataPassingCode^"
									+ "32" + "^" + strDemoRelation);
					if (rs2.next()) {
						strRelDesc = Helper.correctNull(rs2
								.getString("CBS_STATIC_DATA_DESC"));
					}
				}
				if (rs2 != null) {
					rs2.close();
				}
				arrGuardetails.add(strRelDesc);
				arrGuardetails.add(nf.format(Double
						.parseDouble(Helper.correctDouble((String) rs
								.getString("perapp_networth")))));
				if (Helper.correctNull(rs.getString("empemployment"))
						.equalsIgnoreCase("1")
						|| Helper.correctNull(rs.getString("empemployment"))
								.equalsIgnoreCase("9"))
					arrGuardetails.add(Helper.converAmount(nf.format(Double
							.parseDouble(Helper.correctDouble(rs
									.getString("perinc_yearsalary")))),
							strAmountForm));
				else
					arrGuardetails.add(Helper.converAmount(nf.format(Double
							.parseDouble(Helper.correctDouble(rs
									.getString("perinc_year1_income")))),
							strAmountForm)
							+ "- ("
							+ Helper.correctNull(rs
									.getString("perinc_yearend1")) + ")");

				arrGuardetailsRow.add(arrGuardetails);
				if (rs3 != null) {
					rs3.close();
				}
				strQuery3 = SQLParser.getSqlQuery("pergetfinancialliab^g"
						+ strCoAppID + "^" + strApplicationNo);
				rs3 = DBUtils.executeQuery(strQuery3);
				while (rs3.next()) {
					arrJAppLiabCol = new ArrayList();
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_loantype")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_accountno")));
					arrJAppLiabCol.add(Helper.correctDouble((String) rs3
							.getString("liab_crdlimit")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_sancrefno")));
					arrJAppLiabCol.add(Helper.correctDouble((String) rs3
							.getString("liab_balance")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("liab_presentstatus")));
					arrJAppLiabCol.add(Helper.correctNull((String) rs3
							.getString("per_securities")));
					arrJAppLiabRow.add(arrJAppLiabCol);
				}
			}
			if (rs != null) {
				rs.close();
			}
			// end gur..

			strQuery = SQLParser.getSqlQuery("sel_proprietor_details^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strCoAppID = Helper.correctNull((String) rs
						.getString("perapp_id"));
				arrProperitierdetails = new ArrayList();
				arrProperitierdetails.add(Helper.correctNull((String) rs
						.getString("fullname")));
				strConstCode = Helper.correctNull((String) rs
						.getString("perapp_constitution"));
				strDemoRelation = Helper.correctNull((String) rs
						.getString("demo_relation"));
				if (!strConstCode.equalsIgnoreCase("")) {
					strQuery1 = SQLParser
							.getSqlQuery("sel_cbsstaticdescbycode^2^"
									+ strConstCode);
					rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						strConstitution = Helper.correctNull((String) rs1
								.getString("cbs_static_data_desc"));
					}
				}
				if (!strCoAppID.equalsIgnoreCase("")) {
					strQuery2 = SQLParser.getSqlQuery("sel_customerdetails^"
							+ strCoAppID);
					rs2 = DBUtils.executeQuery(strQuery2);
					if (rs2.next()) {
						String residentType = correctNull(rs2
								.getString("INDINFO_RESIDENT_STATUS"));

						if (residentType.equals("N")) {
							strCity = Helper.correctNull(rs2
									.getString("CON_COMCITY"));
							strState = Helper.correctNull(rs2
									.getString("CON_COMSTATE"));
							strCountry = Helper.correctNull(rs2
									.getString("CON_COMCOUNTRY"));
						} else {
							strCity = Helper.correctNull(rs2
									.getString("CON_PERMCITY"));
							strState = Helper.correctNull(rs2
									.getString("CON_PERMSTATE"));
							strCountry = Helper.correctNull(rs2
									.getString("CON_PERMCOUNTRY"));
						}

						if (!strCity.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser.getSqlQuery("sel_cityname^"
									+ strCity);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strCity = Helper.correctNull(rs3
										.getString("city_name"));
							}
						}
						if (!strState.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser.getSqlQuery("sel_statename^"
									+ strState);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strState = Helper.correctNull(rs3
										.getString("state_name"));
							}
						}
						if (!strCountry.equalsIgnoreCase("")) {
							if (rs3 != null) {
								rs3.close();
							}
							strQuery2 = SQLParser
									.getSqlQuery("sel_countrynamebycode^"
											+ strCountry);
							rs3 = DBUtils.executeQuery(strQuery2);
							if (rs3.next()) {
								strCountry = Helper.correctNull(rs3
										.getString("con_country"));
							}
						}
						String strAddress = "";
						if (residentType.equals("N")) {
							strAddress = Helper.correctNull(rs2
									.getString("CON_COMADDR1"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_COMADDR2"))
									+ "&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_COMVILLAGE"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_COMDIST"))
									+ ",&nbsp;<br>"
									+ strCity
									+ ",&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_COMZIP"))
									+ "<br>"
									+ strState + ",&nbsp;" + strCountry;
						} else {
							strAddress = Helper.correctNull(rs2
									.getString("CON_PERMADDR1"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_PERMADDR2"))
									+ "&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_PERMVILLAGE"))
									+ "<br>"
									+ Helper.correctNull(rs2
											.getString("CON_PERMDIST"))
									+ ",&nbsp;<br>"
									+ strCity
									+ ",&nbsp;"
									+ Helper.correctNull(rs2
											.getString("CON_PERMZIP"))
									+ "<br>"
									+ strState + ",&nbsp;" + strCountry;
						}
						arrProperitierdetails.add(strAddress);
					} else {
						arrProperitierdetails.add("");
					}
				} else {
					arrProperitierdetails.add("");
				}
				arrProperitierdetails.add(strConstitution);

				if (rs1 != null) {
					rs1.close();
				}
				strOccuCode = "";
				strQuery = SQLParser.getSqlQuery("sel_CustDetails^"
						+ strCoAppID);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					strOccuCode1 = Helper.correctNull((String) rs1
							.getString("kyc_kycactivity"));
				}
				/*
				 * if(rs1 !=null) { rs1.close(); }
				 * if(!strOccuCode.equalsIgnoreCase("")) {
				 * strQuery1=SQLParser.getSqlQuery
				 * ("getstaticdatavaldispcorporatenew^70^"+strOccuCode);
				 * rs1=DBUtils.executeQuery(strQuery1); if(rs1.next()) {
				 * strOccuCode1
				 * =Helper.correctNull((String)rs1.getString("stat_data_desc1"
				 * )); } }
				 */

				arrProperitierdetails.add(strOccuCode1);
				arrProperitierdetails.add(Helper.correctNull((String) rs
						.getString("dob")));
				if (!strDemoRelation.equalsIgnoreCase("")) {
					rs2 = DBUtils
							.executeLAPSQuery("sel_CBSStaticDataPassingCode^"
									+ "32" + "^" + strDemoRelation);
					if (rs2.next()) {
						strRelDesc = Helper.correctNull(rs2
								.getString("CBS_STATIC_DATA_DESC"));
					}
				}
				if (rs2 != null) {
					rs2.close();
				}
				arrProperitierdetails.add(strRelDesc);
				arrProperitierdetails.add(nf.format(Double
						.parseDouble(Helper.correctDouble((String) rs
								.getString("perapp_networth")))));
				if (Helper.correctNull(rs.getString("empemployment"))
						.equalsIgnoreCase("1")
						|| Helper.correctNull(rs.getString("empemployment"))
								.equalsIgnoreCase("9"))
					arrProperitierdetails.add(Helper.converAmount(nf
							.format(Double.parseDouble(Helper.correctDouble(rs
									.getString("perinc_yearsalary")))),
							strAmountForm));
				else
					arrProperitierdetails.add(Helper.converAmount(nf
							.format(Double.parseDouble(Helper.correctDouble(rs
									.getString("perinc_year1_income")))),
							strAmountForm)
							+ "- ("
							+ Helper.correctNull(rs
									.getString("perinc_yearend1")) + ")");
				arrProperitierdetailsRow.add(arrProperitierdetails);
			}

			if (rs3 != null) {
				rs3.close();
			}

			ArrayList arrOthrbnkRow = new ArrayList();
			ArrayList arrOthrbnkCol = new ArrayList();
			String strFactype = "", strLapsOldId = "0", bankname = "";
			if (!strappId.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("seloldrefidforapp^"
						+ strappId);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strLapsOldId = Helper.correctNull(rs
							.getString("perapp_oldid"));
				}
				strQuery = SQLParser.getSqlQuery("selrenewappid^"
						+ strLapsOldId);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strappId = Helper.correctNull(rs.getString("perapp_id"));
				}
			}
			strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"
					+ strLapsOldId);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrOthrbnkCol = new ArrayList();
				bankname = Helper.correctNull(rs.getString("perbank_bnkname"));
				if (!(bankname.equalsIgnoreCase(""))) {
					strQuery3 = SQLParser
							.getSqlQuery("selbankname^" + bankname);
					rs3 = DBUtils.executeQuery(strQuery3);
					if (rs3.next()) {
						bankname = Helper.correctNull(rs3
								.getString("stat_data_desc1"));
					}
				}
				arrOthrbnkCol.add(bankname);// 0
				strFactype = Helper.correctNull(rs.getString("perbank_type"));
				if (strFactype.equalsIgnoreCase("1"))
					arrOthrbnkCol.add("Working Capital");// 1
				else if (strFactype.equalsIgnoreCase("2"))
					arrOthrbnkCol.add("Term Loan");// 1
				else
					arrOthrbnkCol.add("");
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_limit")));// 2
				arrOthrbnkCol.add(Helper
						.correctNull(rs.getString("perbank_os")));// 3
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_intrate")));// 4
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_monthly_ins")));// 5
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_duedate")));// 6
				arrOthrbnkCol.add(Helper.replaceForJavaScriptString(Helper
						.CLOBToString(rs.getClob("perbank_arrears"))));// 7
				arrOthrbnkRow.add(arrOthrbnkCol);
			}
			hshRecord.put("arrOthrbnkRow", arrOthrbnkRow);
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_bankcomments^" + strappId
					+ "^" + "otherbank");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("otherbnkcomments", Helper.CLOBToString(rs
						.getClob("cmt_bankcomments")));
			}
			if (rs != null) {
				rs.close();
			}
			String strProcessingFee = "";
			strQuery = SQLParser.getSqlQuery("selLoanAmt^" + strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("LoanPurpose", Helper.CLOBToString(rs
						.getClob("loan_purposeofloan")));
				hshRecord.put("Limit", Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("loanamt"))));
				strProcessingFee = Helper.checkDecimal(Helper.correctDouble(rs
						.getString("loan_profee")));
				hshRecord.put("strIntType", Helper.correctNull(rs
						.getString("loan_inttype")));
			}

			// processing fee waived
			if (rs != null)
				rs.close();
			strQuery1 = SQLParser.getSqlQuery("selloan_details^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {
				hshRecord.put("indinfo_is_staff", correctNull(rs
						.getString("indinfo_is_staff")));
				if (hshRecord.get("indinfo_is_staff").equals("02")) {
					strProcessingFee = "W";
				}
			}

			if (rs != null)
				rs.close();
			strQuery1 = SQLParser
					.getSqlQuery("sel_per_house_proposed_asset_new^"
							+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {
				hshRecord.put("phpa_loan_purpose", correctNull(rs
						.getString("phpa_loan_purpose")));
				hshRecord.put("phpa_project_finance", correctNull(rs
						.getString("phpa_project_finance")));
				if ((Helper.correctNull(
						(String) hshRecord.get("phpa_loan_purpose"))
						.equals("H") && (Helper.correctNull((String) hshRecord
						.get("phpa_project_finance")).equals("Y")))) {
					strProcessingFee = "W";
				}
			}
			// Check Deviated Value
			if (rs != null)
				rs.close();
			strQuery1 = SQLParser.getSqlQuery("Sel_app_deviation1^"
					+ strApplicationNo + "^PF");
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {

				if (Helper.correctNull(rs.getString("deviation_apprej"))
						.equalsIgnoreCase("A")) {
					strProcessingFee = Helper.checkDecimal(Helper
							.correctDouble(rs.getString("deviation_newvalue")));
				}
			}

			hshRecord.put("strProcessingFee", strProcessingFee);
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^"
					+ strApplicationNo + "^" + "C");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("GuarComments", Helper.CLOBToString(rs
						.getClob("cmt_comments")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_GuarantorID^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strGuarID = Helper.correctNull((String) rs
						.getString("demo_appid"));
				if (rs1 != null) {
					rs1.close();
				}
				strQuery1 = SQLParser.getSqlQuery("pergetfinancialliab^g"
						+ strGuarID + "^" + strApplicationNo);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrGuarLiabCol = new ArrayList();
					arrGuarLiabCol.add(Helper.correctNull((String) rs1
							.getString("liab_loantype")));
					arrGuarLiabCol.add(Helper.correctNull((String) rs1
							.getString("liab_accountno")));
					arrGuarLiabCol.add(Helper.correctDouble((String) rs1
							.getString("liab_crdlimit")));
					arrGuarLiabCol.add(Helper.correctNull((String) rs1
							.getString("liab_sancrefno")));
					arrGuarLiabCol.add(Helper.correctDouble((String) rs1
							.getString("liab_balance")));
					arrGuarLiabCol.add(Helper.correctNull((String) rs1
							.getString("liab_presentstatus")));
					arrGuarLiabCol.add(Helper.correctNull((String) rs1
							.getString("per_securities")));
					arrGuarLiabRow.add(arrGuarLiabCol);
				}
			}
			if (!strAppType.equalsIgnoreCase("Postsanction")) {
				hshValues.put("hidapplicantid", strappId);
				RetailAssessmentBean RAB = new RetailAssessmentBean();
				hshResult = RAB.getCommonAssessment(hshValues);
			}
			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("persourceofmargin_sel^"
					+ strApplicationNo);
			if (rs.next()) {
				hshRecord.put("PER_MARGIN_COSTINCURED", Helper
						.checkDecimal(Helper.correctDouble((String) rs
								.getString("PER_MARGIN_COSTINCURED"))));
				hshRecord.put("PER_MARGIN_OWNSAVINGS", Helper
						.checkDecimal(Helper.correctDouble((String) rs
								.getString("PER_MARGIN_OWNSAVINGS"))));
				hshRecord.put("PER_MARGIN_OTHERS_DESC1", correctNull(rs
						.getString("PER_MARGIN_OTHERS_DESC1")));
				hshRecord.put("PER_MARGIN_OTHERS_VALUE1", Helper
						.checkDecimal(Helper.correctDouble((String) rs
								.getString("PER_MARGIN_OTHERS_VALUE1"))));
				hshRecord.put("PER_MARGIN_OTHERS_DESC2", correctNull(rs
						.getString("PER_MARGIN_OTHERS_DESC2")));
				hshRecord.put("PER_MARGIN_OTHERS_VALUE2", Helper
						.checkDecimal(Helper.correctDouble((String) rs
								.getString("PER_MARGIN_OTHERS_VALUE2"))));
				hshRecord.put("PER_MARGIN_OTHERS_DESC3", correctNull(rs
						.getString("PER_MARGIN_OTHERS_DESC3")));
				hshRecord.put("PER_MARGIN_OTHERS_VALUE3", Helper
						.checkDecimal(Helper.correctDouble((String) rs
								.getString("PER_MARGIN_OTHERS_VALUE3"))));
				hshRecord.put("PER_MARGIN_TOTAL_FUND", Helper
						.checkDecimal(Helper.correctDouble((String) rs
								.getString("PER_MARGIN_TOTAL_FUND"))));
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("getloanreqamt_sel^"
					+ strApplicationNo);
			if (rs.next()) {
				hshRecord.put("PER_MARGIN_REQAMT", Helper.checkDecimal(Helper.correctDouble((String) rs.getString("LOAN_AMTREQD"))));
				strtake = correctNull((String) rs.getString("loan_takeover"));
				if(!Helper.correctNull(rs.getString("LOAN_INS_COMPANY_NAME")).equalsIgnoreCase(""))
				{
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"+ Helper.correctNull(rs.getString("LOAN_INS_COMPANY_NAME")));
					if (rs1.next()) {
						hshRecord.put("strInsCompname", Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));
					}
				}
				if (rs1 != null) {rs1.close();}
				hshRecord.put("LOAN_INS_ACCOUNT_NO", Helper.correctNull(rs.getString("LOAN_INS_ACCOUNT_NO")));
				hshRecord.put("LOAN_PREMIUM_LOAN_AMOUNT", Helper.checkDecimal(Helper.correctDouble(rs.getString("LOAN_PREMIUM_LOAN_AMOUNT"))));
				hshRecord.put("LOAN_PREMIUM_AMOUNT", Helper.checkDecimal(Helper.correctDouble(rs.getString("LOAN_PREMIUM_AMOUNT"))));
				hshRecord.put("LOAN_PREMIUM_TENOR",  Helper.correctNull(rs.getString("LOAN_PREMIUM_TENOR")));
				hshRecord.put("LOAN_INS_COMPANY_NAME",  Helper.correctNull(rs.getString("LOAN_INS_COMPANY_NAME")));
				if(!Helper.correctNull( rs.getString("LOAN_INS_FUNDED_COMPANY_NAME")).equalsIgnoreCase(""))
				{
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"+ Helper.correctNull(rs.getString("LOAN_INS_FUNDED_COMPANY_NAME")));
					if (rs1.next()) {
						hshRecord.put("strInsFundedCompname", Helper.correctNull((String) rs1.getString("STAT_DATA_DESC1")));
					}
				}
				if (rs1 != null) {rs1.close();}
			}
			if (rs != null) {
				rs.close();
			}
			// For Take over Loans
			/*
			 * rs = DBUtils.executeLAPSQuery("selectvehicledetails1^"
			 * +"A"+"^"+strApplicationNo); if(rs.next()) { strtake =
			 * correctNull((String)rs.getString("auto_take_over")); }
			 */
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("takeoversel^" + strApplicationNo);
			if (rs.next()) {
				hshRecord.put("repay_period", correctNull(rs
						.getString("repay_period")));
				hshRecord.put("no_installpaid", correctNull(rs
						.getString("no_installpaid")));
				String avail_date = correctNull(rs.getString("avail_date"));
				if (avail_date.equalsIgnoreCase("01/01/1900")) {
					avail_date = "";
				} else {
					hshRecord.put("avail_date", correctNull(rs
							.getString("avail_date")));
				}
				hshRecord.put("takeover_amtpaid", correctNull(rs
						.getString("takeover_amtpaid")));
				hshRecord.put("shifting_reason", correctNull(rs
						.getString("shifting_reason")));
				hshRecord.put("holiday_period", correctNull(rs
						.getString("holiday_period")));
				hshRecord.put("rate_of_interest", correctNull(rs
						.getString("rate_of_interest"))
						+ "%");
				hshRecord.put("prev_bank_opinion", correctNull(rs
						.getString("prev_bank_opinion")));
				hshRecord.put("stmt_from_date", correctNull(rs
						.getString("stmt_from_date")));
				hshRecord.put("stmt_to_date", correctNull(rs
						.getString("stmt_to_date")));
				hshRecord.put("stmt_comments", correctNull(rs
						.getString("stmt_comments")));
			}
			if (rs != null) {
				rs.close();
			}
			// For Conduct of Operation
			strQuery = SQLParser.getSqlQuery("sel_conductoperation^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshRecord.put("CON_COMPLIANCE", correctNull((String) rs
						.getString("CON_COMPLIANCE")));
				hshRecord.put("CON_INTERNALINSPECTION", correctNull((String) rs
						.getString("CON_INTERNALINSPECTION")));
				hshRecord.put("CON_ROCLREPORT", correctNull((String) rs
						.getString("CON_ROCLREPORT")));
				hshRecord.put("CON_PERIODCOVERED", correctNull((String) rs
						.getString("CON_PERIODCOVERED")));
				hshRecord.put("CON_ROCREASON", correctNull((String) rs
						.getString("CON_ROCREASON")));
				hshRecord.put("CON_EMREG", correctNull((String) rs
						.getString("CON_EMREG")));
				hshRecord.put("CON_EMREASON", correctNull((String) rs
						.getString("CON_EMREASON")));
				hshRecord.put("CON_CHARGESNOTED", correctNull((String) rs
						.getString("CON_CHARGESNOTED")));
				hshRecord.put("CON_CHARGESREASON", correctNull((String) rs
						.getString("CON_CHARGESREASON")));
				hshRecord.put("CON_CONDUCTTLDPN", correctNull((String) rs
						.getString("CON_CONDUCTTLDPN")));
				hshRecord.put("con_internalinspection", correctNull(rs
						.getString("con_internalinspection")));
				hshRecord.put("con_rbiinspection", correctNull(rs
						.getString("con_rbiinspection")));
				hshRecord.put("con_auditsobser", correctNull(rs
						.getString("con_auditsobser")));
				hshRecord.put("con_offsiteobserv", correctNull(rs
						.getString("con_offsiteobserv")));
			}
			if (rs != null) {
				rs.close();
			}
			HashMap hshrbidetails = new HashMap();
			hshrbidetails = new ProposalTermsBean().getRBIGuidelines(hshValues);
			hshRecord.put("hshrbidetails", hshrbidetails);
			hshRecord.put("creditproposal", correctNull((String) hshrbidetails
					.get("creditproposal")));

			if (rs != null) {
				rs.close();
			}
			String strProdPurpose = "", strVehicleType = "";
			strQuery = SQLParser.getSqlQuery("selprodpurpose^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strProdPurpose = Helper.correctNull((String) rs
						.getString("prd_purpose"));
				strVehicleType = Helper.correctNull(rs
						.getString("prd_vehitype"));
			}
			if (rs != null) {
				rs.close();
			}
			// For Inspection Comments
			strQuery = SQLParser.getSqlQuery("sel_inspectioncomments^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshRecord.put("INS_INTERNALCOMMENT", correctNull((String) rs
						.getString("INS_INTERNALCOMMENT")));
				hshRecord.put("INS_INTERNALACTION", correctNull((String) rs
						.getString("INS_INTERNALACTION")));
				hshRecord.put("INS_RBICOMMENT", correctNull((String) rs
						.getString("INS_RBICOMMENT")));
				hshRecord.put("INS_RBIACTION", correctNull((String) rs
						.getString("INS_RBIACTION")));
				hshRecord.put("INS_UNITCOMMENT", correctNull((String) rs
						.getString("INS_UNITCOMMENT")));
				hshRecord.put("INS_UNITACTION", correctNull((String) rs
						.getString("INS_UNITACTION")));
				hshRecord.put("INS_RMDCOMMENT", correctNull((String) rs
						.getString("INS_RMDCOMMENT")));
				hshRecord.put("INS_RMDACTION", correctNull((String) rs
						.getString("INS_RMDACTION")));
				hshRecord.put("INS_AUDITCOMMENT", correctNull((String) rs
						.getString("INS_AUDITCOMMENT")));
				hshRecord.put("INS_AUDITACTION", correctNull((String) rs
						.getString("INS_AUDITACTION")));
				hshRecord.put("INS_OFFSITECOMMENT", correctNull((String) rs
						.getString("INS_OFFSITECOMMENT")));
				hshRecord.put("INS_OFFSITEACTION", correctNull((String) rs
						.getString("INS_OFFSITEACTION")));
				hshRecord.put("INS_INTERNALDATE", correctNull((String) rs
						.getString("INS_INTERNALDATE")));
				hshRecord.put("INS_RBIASONDATE", correctNull((String) rs
						.getString("INS_RBIASONDATE")));
			}
			if (rs != null) {
				rs.close();
			}
			if (strProdPurpose.equalsIgnoreCase("T")||strProdPurpose.equalsIgnoreCase("HC"))
				strQuery = SQLParser.getSqlQuery("selhousingloansec^"
						+ strApplicationNo + "^ ");
			else
				strQuery = SQLParser.getSqlQuery("selhousingloansec^"
						+ strApplicationNo + "^ and app_sec_securitytype='1'");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				// hshRecord.put("phpa_prop_nature",correctNull(rs.getString("phpa_prop_nature")));
				// hshRecord.put("phpa_premises_age",correctNull(rs.getString("phpa_premises_age")));
				// hshRecord.put("phpa_branch_distance",correctNull(rs.getString("phpa_branch_distance")));
				// hshRecord.put("phpa_prop_location",correctNull(rs.getString("phpa_prop_location")));
				hshRecord.put("phpa_prop_surveyno", correctNull(rs
						.getString("sec_surveyno")));
				hshRecord.put("phpa_prop_plotno", correctNull(rs
						.getString("sec_plotno")));
				hshRecord.put("phpa_site_area", correctNull(rs
						.getString("sec_totalarea")));
				hshRecord.put("phpa_site_valuer_name", correctNull(rs
						.getString("cus_sec_valuer_name")));
				hshRecord.put("phpa_site_valuation_date", correctNull(rs
						.getString("cus_sec_valuation_date")));
				hshRecord.put("phpa_site_valuation_cost", nf.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("sec_valuervalue")))));
				hshRecord.put("phpa_site_valuer_code", correctNull(rs
						.getString("CUS_SEC_VALUERCODE")));
				hshRecord.put("phpa_site_govtvaluer_name", correctNull(rs
						.getString("CUS_SEC_GOVT_VALUER")));
				

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdatavaldisp^135^"
						+ Helper.correctInt(rs.getString("sec_measurement")));
				if (rs1.next()) {
					hshRecord.put("phpa_site_area_measurement", Helper
							.correctNull(rs1.getString("stat_data_desc1")));
				}

				if (rs1 != null) {
					rs1.close();
				}
				String[] VALUATIONNATURE = null;
				rs1 = DBUtils
						.executeLAPSQuery("sel_valmasater_name^"
								+ Helper.correctInt(rs
										.getString("CUS_SEC_VALUERCODE")));
				if (rs1.next()) {
					hshRecord.put("VALUER_VALUATIONNATURE", Helper
							.correctNull(rs1
									.getString("VALUER_VALUATIONNATURE")));
					hshRecord.put("phpa_VALUER_CATEGORYCODE", Helper
							.correctNull(rs1.getString("VALUER_CATEGORYCODE")));

					if (!Helper.correctNull(
							(String) rs1.getString("VALUER_VALUATIONNATURE"))
							.equals(""))
						VALUATIONNATURE = Helper.correctNull(
								rs1.getString("VALUER_VALUATIONNATURE")).split(
								"@");

					String valnature = "";
					if (VALUATIONNATURE != null && VALUATIONNATURE.length > 0) {
						for (int i = 0; i < VALUATIONNATURE.length; i++) {
							if (rs2 != null) {
								rs2.close();
							}
							rs2 = DBUtils
									.executeLAPSQuery("selstaticdata_securitytype_sel^"
											+ VALUATIONNATURE[i]);
							if (rs2.next()) {
								valnature = valnature
										+ Helper.correctNull(rs2
												.getString("sec_name")) + ", ";
							}
						}
						hshRecord.put("valuer_valnature", valnature);
					}
				}
			}
			if (rs != null) {
				rs.close();
			}
			// For Cersai& Cibil Details
			strQuery = SQLParser.getSqlQuery("sel_cersaicibildetails^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				hshRecord.put("CER_CERSAIDETAILS", correctNull((String) rs
						.getString("CER_CERSAIDETAILS")));
				hshRecord.put("CER_OTHERINFORMATION", correctNull((String) rs
						.getString("CER_OTHERINFORMATION")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_date^" + strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("Recommendation", Helper.correctNull((String) rs
						.getString("apprised_scheme")));

			}
			if (rs != null) {
				rs.close();
			}
			int intRepayPeriod = 0;
			int intHolidayPeriod = 0;

			/*
			 * For Purchase of Ready Built House and Used Vehicle loan, Margin
			 * is based on age of the building / vehicle respectively
			 */
			hshRecord.put("prd_purpose", strProdPurpose);
			String strPassCode="";
			if (strProdPurpose.equalsIgnoreCase("H")
					|| strProdPurpose.equalsIgnoreCase("U")
					|| strVehicleType.equalsIgnoreCase("2")) {
				strQuery = SQLParser.getSqlQuery("pergetloanProductbymargin^"
						+ strApplicationNo);
			} else {
				strQuery = SQLParser.getSqlQuery("pergetloanProduct^"
						+ strApplicationNo);
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("SancAmount", Helper.checkDecimal(Helper
						.correctDouble(Helper.correctNull((String) rs
								.getString("sancamount")))));

				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("selloan_details^"
						+ strApplicationNo);
				if (rs1.next()) {
					staffproduct = correctNull(rs1.getString("prd_staffprd"));
				}

				if (!staffproduct.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("loan_inttype"))
								.equalsIgnoreCase("Floating")) {
					String strTemp = Helper.correctNull(rs
							.getString("loan_mclrtype"));
					if (!strTemp.equalsIgnoreCase("")) {
						String[] strArr = strTemp.split("@");
						if (strArr.length > 1) {
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selcbsiddatadesc^34^"
											+ strArr[0]);
							if (rs3.next()) {
								strTemp = Helper.correctNull(rs3
										.getString("cbs_static_data_desc"));
								strPassCode=Helper.correctNull(rs3.getString("cbs_static_data_passing_code"));
							}
							if(strPassCode.equalsIgnoreCase("O")){
							hshRecord.put("ROI",strTemp+ "+"+ nf.format(Double.parseDouble(Helper.correctDouble(rs.getString("loan_creditrskval"))))+"%" + "(Credit Risk Premium)" + "+"+ nf.format(Double.parseDouble(Helper.correctDouble(rs.getString("loan_busstatval"))))+"%" +"(Bussiness strategic Premium)"
									+ " presently at "+ Double.parseDouble(Helper.correctDouble(rs.getString("mintrate"))));
							}else{
								hshRecord.put("ROI",strTemp+ "+"+ nf.format(Double.parseDouble(Helper.correctDouble(rs.getString("loan_creditrskval"))))+"%"+ "(Credit Risk Premium)" + "+"+ nf.format(Double.parseDouble(Helper.correctDouble(rs.getString("loan_busstatval"))))+"%" +"(Fixed Spread)"
										+ " presently at "+ Double.parseDouble(Helper.correctDouble(rs.getString("mintrate"))));
							}
							
							/*hshRecord.put("ROI",strTemp+ "+"+ nf.format(Double.parseDouble(Helper.correctDouble(rs.getString("mintrate")))- Double.parseDouble(Helper.correctDouble(rs.getString("LOAN_BASERATE"))))
													+ "% p.a presently at "+ Double.parseDouble(Helper.correctDouble(rs.getString("mintrate")))+ "+ Bussiness Interest "+ Double.parseDouble(Helper.correctDouble(rs.getString("loan_busstatval"))));*/
						} else {
							hshRecord.put("ROI", Helper.checkDecimal(Helper
									.correctDouble((String) rs
											.getString("mintrate"))));
						}

					} else {
						hshRecord.put("ROI", Helper.checkDecimal(Helper
								.correctDouble((String) rs
										.getString("mintrate"))));
					}

				} else {
					hshRecord.put("ROI", Helper.checkDecimal(Helper
							.correctDouble((String) rs.getString("mintrate"))));
				}
				hshRecord.put("ROI1", Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("mintrate"))));
				hshRecord.put("Margin", Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("loan_margin"))));
				hshRecord.put("Terms", Helper.correctNull((String) rs
						.getString("lreqterms")));
				hshRecord.put("ModeOfPay", Helper.correctNull((String) rs
						.getString("loan_modeofpay")));
				hshRecord.put("loan_repaymenttype", Helper
						.correctNull((String) rs
								.getString("loan_repaymenttype")));
				hshRecord
						.put("loan_receivedate", Helper.correctNull((String) rs
								.getString("loan_receivedate")));
				String repaymenttype = Helper.correctNull((String) rs
						.getString("loan_repaymenttype"));
				if (repaymenttype.equalsIgnoreCase("1")) {
					hshRecord.put("repaytype", "Equated Monthly Installment");
				} else if (repaymenttype.equalsIgnoreCase("2")) {
					hshRecord.put("repaytype", "Non-EMI");
				} else if (repaymenttype.equalsIgnoreCase("3")) {
					hshRecord.put("repaytype", "Graduated installments");
				} else if (repaymenttype.equalsIgnoreCase("4")) {
					hshRecord.put("repaytype", "Step Up");
				} else if (repaymenttype.equalsIgnoreCase("5")) {
					hshRecord.put("repaytype", "Step Down");
				} else if (repaymenttype.equalsIgnoreCase("6")) {
					hshRecord.put("repaytype", "Taper Down");
				} else if (repaymenttype.equalsIgnoreCase("7")) {
					hshRecord.put("repaytype", "Balloon");
				} else if (repaymenttype.equalsIgnoreCase("9")) {
					hshRecord.put("repaytype", "Flip Method");
				} else if (repaymenttype.equalsIgnoreCase("10")) {
					hshRecord.put("repaytype", "Equal Installments");
				} else if (repaymenttype.equalsIgnoreCase("8")) {
					hshRecord.put("repaytype", "On Due Date");
				} else if (repaymenttype.equalsIgnoreCase("12")) {
					hshRecord.put("repaytype", "On Demand");
				} else if (repaymenttype.equalsIgnoreCase("13")) {
					hshRecord.put("repaytype", "Equal Monthly Installments");
				} else if (repaymenttype.equalsIgnoreCase("14")) {
					hshRecord.put("repaytype", "2 Yearly Equal Installment");
				} else {
					hshRecord.put("repaytype", repaymenttype);
				}
				if (Helper.correctNull(
						(String) rs.getString("loan_repaymenttype"))
						.equalsIgnoreCase("1")) {
					hshRecord.put("WhetherEMI", "Yes");
				} else {
					hshRecord.put("WhetherEMI", "No");
				}
				String strIntTerms = Helper.correctNull((String) rs
						.getString("lreqterms"));
				if (!strIntTerms.equalsIgnoreCase("")) {
					intRepayPeriod = Integer.parseInt(Helper
							.correctInt(strIntTerms));
				}
				// strRepayType =
				// Helper.correctNull((String)rs.getString("loan_repaymenttype"));
				// if(strRepayType.equalsIgnoreCase("1"))
				// {
				// strRepayType = "Equated Monthly Installment";
				// }
				// else if(strRepayType.equalsIgnoreCase("2"))
				// {
				// strRepayType = "Non-EMI";
				// }
				// else if(strRepayType.equalsIgnoreCase("3"))
				// {
				// strRepayType = "Graduated installments";
				// }
				// else if(strRepayType.equalsIgnoreCase("4"))
				// {
				// strRepayType = "Step Up";
				// }
				// else if(strRepayType.equalsIgnoreCase("5"))
				// {
				// strRepayType = "Step Down";
				// }
				// else if(strRepayType.equalsIgnoreCase("6"))
				// {
				// strRepayType = "Taper Down";
				// }
				// else if(strRepayType.equalsIgnoreCase("7"))
				// {
				// strRepayType = "Balloon";
				// }
				// else if(strRepayType.equalsIgnoreCase("8"))
				// {
				// strRepayType = "Bullet";
				// }
				// else if(strRepayType.equalsIgnoreCase("9"))
				// {
				// strRepayType = "Flip Method";
				// }
				// else if(strRepayType.equalsIgnoreCase("10"))
				// {
				// strRepayType = "Equal Installments";
				// }
				// else if(strRepayType.equalsIgnoreCase("11"))
				// {
				// strRepayType = "Slab";
				// }
				// else if(strRepayType.equalsIgnoreCase("12"))
				// {
				// strRepayType = "On Demand";
				// }
				hshRecord.put("strInsurancePremium", Helper.checkDecimal(Helper
						.correctDouble(Helper.correctNull(rs
								.getString("loan_metlifepremiumamt")))));
				hshRecord.put("strDueDate", Helper.correctNull(rs
						.getString("loan_duedate")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("securesel^" + strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strHolidayPeriod = Helper.correctNull((String) rs
						.getString("loan_noofinstallment"));
				if (!strHolidayPeriod.equalsIgnoreCase("")) {
					intHolidayPeriod = Integer.parseInt(Helper
							.correctInt(strHolidayPeriod));
				}
				intInstallmentExcHoliday = intRepayPeriod - intHolidayPeriod;
				hshRecord.put("strHolidayPeriod", strHolidayPeriod);
				hshRecord.put("loan_noofinstallment", Integer
						.toString(intInstallmentExcHoliday));
				hshRecord.put("loan_periodicity", correctNull((String) rs
						.getString("loan_periodicity")));
				hshRecord.put("loan_secure", correctNull((String) rs
						.getString("loan_secure")));
				hshRecord.put("loan_secureamount", correctNull((String) rs
						.getString("loan_secureamount")));
				if (Helper.correctNull((String) rs.getString("loan_servised"))
						.equalsIgnoreCase("y")) {
					hshRecord.put("loan_servised", "Yes");
				} else {
					hshRecord.put("loan_servised", "No");
				}
			}
			if (rs != null) {
				rs.close();
			}
			// For Terms and Condition
			strQuery = SQLParser.getSqlQuery("apptermscondsel^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrVal = new ArrayList();
				arrVal.add(correctNull((String) rs
						.getString("APP_GENERAL_TERMS_TYPE")));
				arrVal.add(correctNull((String) rs
						.getString("APP_TERMSCONTENT")));
				arrVal.add(correctNull((String) rs
						.getString("terms_prepost")));
				arrRow.add(arrVal);
			}
			if (rs != null) {
				rs.close();
			}
			hshRecord.put("arrayRow", arrayRow);
			hshRecord.put("arrayRow1", arrayRow1);
			hshRecord.put("arrAppLiabRow", arrAppLiabRow);
			hshRecord.put("arrJAppLiabRow", arrJAppLiabRow);
			hshRecord.put("arrGuarLiabRow", arrGuarLiabRow);
			hshRecord.put("strappId", strappId);
			hshRecord.put("strApplicationNo", strApplicationNo);
			hshRecord.put("arrRow", arrRow);
			hshRecord.put("arrRowTerms", arrRow);
			hshRecord.put("strtake", strtake);
			hshRecord.put("hshResult", hshResult);
			hshRecord.put("arrGuardetailsRow", arrGuardetailsRow);
			hshRecord.put("arrProperitierdetailsRow", arrProperitierdetailsRow);

			/* Added by Arsath on 17/02/2014 for EMI Amount */
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_repaymentperiod^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("loan_emi", Helper.correctDouble((String) rs
						.getString("loan_emi")));
				hshRecord.put("loan_purposeofloan", Helper.CLOBToString(rs
						.getClob("loan_purposeofloan")));
			}
			/* End */

			/* Added by Arsath on 17/02/2014 for Deviation Amount */
			ArrayList arrDevCol = new ArrayList();
			ArrayList arrDevRow = new ArrayList();
			if (rs1 != null) {
				rs1.close();
			}
			strQuery = SQLParser.getSqlQuery("Sel_app_deviation^"
					+ strApplicationNo);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				arrDevCol = new ArrayList();
				String strDeviated = Helper.correctNull((String) rs1
						.getString("deviation_req"));
				if (strDeviated.equalsIgnoreCase("Y")) {
					String strDevdescode = Helper.correctNull((String) rs1
							.getString("deviation_type"));
					String strDevdesc = "";
					if (strDevdescode.equalsIgnoreCase("LA")) {
						strDevdesc = "Loan Amount";
					} else if (strDevdescode.equalsIgnoreCase("IR")) {
						strDevdesc = "Interest Rate(%)";
					} else if (strDevdescode.equalsIgnoreCase("TR")) {
						strDevdesc = "Tenor (Months)";
					} else if (strDevdescode.equalsIgnoreCase("MN")) {
						strDevdesc = "Margin (%)";
					} else if (strDevdescode.equalsIgnoreCase("RA")) {
						strDevdesc = "Retirement Age (Years)";
					} else if (strDevdescode.equalsIgnoreCase("RC")) {
						strDevdesc = "Repayment Capacity (%)";
					} else if (strDevdescode.equalsIgnoreCase("PF")) {
						strDevdesc = "Processing Fee";
					} else {
						strDevdesc = "Other Deviation";
					}
					arrDevCol.add(strDevdesc);// 0
					arrDevCol.add(Helper.correctNull((String) rs1
							.getString("deviation_oldvalue")));// 1
					arrDevCol.add(Helper.correctNull((String) rs1
							.getString("deviation_newvalue")));// 2
					arrDevCol.add(Helper.correctNull((String) rs1
							.getString("deviation_remarks")));// 3
					String strAppRej = Helper.correctNull((String) rs1
							.getString("deviation_apprej"));
					String strAppRejstatus = "";
					if (strAppRej.equalsIgnoreCase("A")) {
						strAppRejstatus = "Approved";
					} else if (strAppRej.equalsIgnoreCase("R")) {
						strAppRejstatus = "Rejected";
					} else {
						strAppRejstatus = " ";
					}
					arrDevCol.add(strAppRejstatus);// 4
					arrDevRow.add(arrDevCol);
				}

			}
			hshRecord.put("arrDevRow", arrDevRow);
			/* End */

			/* Added by Arsath on 18/02/2014 for Security Details */
			if (rs != null) {
				rs.close();
			}
			ArrayList arrSecexiscol = new ArrayList();
			ArrayList arrSecexisRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_secprimexisdetails^"
					+ strApplicationNo + "^" + "1" + "^" + "E");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrSecexiscol = new ArrayList();
				arrSecexiscol.add(Helper.correctNull((String) rs
						.getString("sec_name")));
				arrSecexiscol.add(Helper.correctDouble((String) rs
						.getString("cus_sec_netsecurity")));
				arrSecexiscol.add(Helper.correctDouble((String) rs
						.getString("cus_sec_reidualval")));
				arrSecexisRow.add(arrSecexiscol);
			}
			hshRecord.put("arrSecexisRow", arrSecexisRow);

			if (rs != null) {
				rs.close();
			}
			ArrayList arrSeccol = new ArrayList();
			ArrayList arrSecRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_seccollateraldetails^"
					+ strApplicationNo + "^" + "2");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrSeccol = new ArrayList();
				arrSeccol.add(Helper.correctNull((String) rs
						.getString("sec_name")));
				arrSeccol.add(Helper.correctDouble((String) rs
						.getString("cus_sec_netsecurity")));
				arrSeccol.add(Helper.correctDouble((String) rs
						.getString("cus_sec_reidualval")));
				arrSecRow.add(arrSeccol);
			}
			hshRecord.put("arrSecRow", arrSecRow);

			if (rs != null) {
				rs.close();
			}
			ArrayList arrSecprocol = new ArrayList();
			ArrayList arrSecproRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_proprimarydetails^"
					+ strApplicationNo + "^" + "1" + "^" + "P");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrSecprocol = new ArrayList();
				arrSecprocol.add(Helper.correctNull((String) rs
						.getString("sec_name")));
				arrSecprocol.add(Helper.correctDouble((String) rs
						.getString("cus_sec_netsecurity")));
				arrSecprocol.add(Helper.correctDouble((String) rs
						.getString("cus_sec_reidualval")));
				arrSecproRow.add(arrSecprocol);
			}
			hshRecord.put("arrSecproRow", arrSecproRow);

			HashMap hshsecdet = new HashMap();
			hshValues.put("valuesin", "R");
			hshsecdet = new SecurityMasterBean()
					.getCollateralSecurityDisplayretail(hshValues);
			hshRecord.put("hshsecdet", hshsecdet);

			HashMap hshsecdet1 = new HashMap();
			hshsecdet1.put("appid", strappId);
			hshsecdet1.put("appno", strApplicationNo);
			CommDocumentBean cdb = new CommDocumentBean();
			hshsecdet1 = cdb.getAnnexureIII(hshsecdet1);
			hshRecord.put("hshsecdet1", hshsecdet1);

			/* End */

			/* Added by Arsath on 18/02/2014 for Vehicle Details */
			if (strProductType.equalsIgnoreCase("pA")) {
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("selectvehicledetails1^" + "A"
						+ "^" + strApplicationNo);
				rs = DBUtils.executeQuery(strQuery);
				ArrayList arrvehicledetcol = new ArrayList();
				ArrayList arrvehicledetRow = new ArrayList();
				while (rs.next()) {
					arrvehicledetcol = new ArrayList();
					arrvehicledetcol.add(correctNull(rs.getString("auto_vehicletype")));//0
					arrvehicledetcol.add( correctNull(rs.getString("auto_category")));//1
					String strCategory = Helper.correctNull(rs.getString("auto_category"));
					String strCategory1 = "";
					if (strCategory.equalsIgnoreCase("1")) {
						strCategory1 = "New";
					} else {
						strCategory1 = "Old";
					}
					arrvehicledetcol.add(strCategory1);//2
					arrvehicledetcol.add(correctNull(rs.getString("auto_make")));//3
					arrvehicledetcol.add(correctNull(rs.getString("auto_model")));//4
					arrvehicledetcol.add(correctNull(rs.getString("auto_originalcost")));//5
					if(strCategory.equalsIgnoreCase("1")){
					arrvehicledetcol.add(Helper.checkDecimal(Helper.correctDouble((String) rs.getString("auto_valuation"))));//6
					}
					else{
						arrvehicledetcol.add(Helper.checkDecimal(Helper.correctDouble((String) rs.getString("auto_originalcost"))));//6	
					}
					arrvehicledetcol.add(Helper.checkDecimal(Helper.correctDouble((String) rs.getString("auto_tax"))));//7
					arrvehicledetcol.add(Helper.checkDecimal(Helper.correctDouble((String) rs.getString("auto_insurance"))));//8
					strQuery1 = SQLParser.getSqlQuery("sel_vehsecuritydetails1^"+ strApplicationNo +"^"+Helper.correctNull((String) rs.getString("AUTO_SEC_SECID")));
					rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						if (Helper.correctNull(rs1.getString("app_sec_securitytype"))
								.equalsIgnoreCase("1"))
							arrvehicledetcol.add( "Prime");//9
						else
							arrvehicledetcol.add( "Collateral");//9
					}
					else{
						arrvehicledetcol.add("");//9
					}
					
					rs2 = DBUtils.executeLAPSQuery("Sel_valuationentry11^"
							+ strApplicationNo+"^"+Helper.correctNull((String) rs.getString("AUTO_SEC_SECID")));
					if (rs2.next()) {
					String valuation_dt = correctNull(rs2.getString("valuation_dt"));
					if (valuation_dt.equalsIgnoreCase("01/01/1900")) {
						valuation_dt = "";
					}
					arrvehicledetcol.add( valuation_dt);//10
					arrvehicledetcol.add( nf.format(Double.parseDouble(Helper.correctDouble(rs2.getString("mark_val_land")))));//11
					arrvehicledetcol.add( correctNull(rs2.getString("valuername")));	//12
					}
					else{
						arrvehicledetcol.add("");//10
						arrvehicledetcol.add("");//11
						arrvehicledetcol.add("");	//12
					}
					arrvehicledetcol.add(Helper.correctNull((String) rs.getString("AUTO_SEC_SECID")));//13
					arrvehicledetRow.add(arrvehicledetcol);
				}
				hshRecord.put("arrvehicledetRow", arrvehicledetRow);

			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_cbsidfordepositdet^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("cbsid", Helper.correctNull((String) rs
						.getString("perapp_cbsid")));
			}

			if (rs != null) {
				rs.close();
			}
			String strsancdept="";
			strQuery = SQLParser.getSqlQuery("sel_sancauthbyappno^"
					+ strApplicationNo + "^" + "15");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("sancauth", Helper.correctNull((String) rs
						.getString("cbs_static_data_desc")));
				
				strsancdept=Helper.correctNull(rs.getString("appraisal_department"));
				
				hshRecord.put("com_sancdeptcode", Helper.correctNull(rs.getString("appraisal_department")));
			}
			if(!strsancdept.equalsIgnoreCase(""))
			{
				rs1=DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"+"26"+"^"+strsancdept);
				if(rs1.next())
				{
					hshRecord.put("strSanctiondept",Helper.correctNull(rs1.getString("cbs_static_data_desc")));
				}
			}

			if (strConstCode.equalsIgnoreCase("01")) {
				strConstCode1 = "Date of Establishment / Date of Birth";
			} else {
				strConstCode1 = "Date of Birth";
			}
			hshRecord.put("constlabel", strConstCode1);

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^"
					+ strApplicationNo + "^" + "LoanProd");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("backcomments", Helper.CLOBToString(rs
						.getClob("cmt_comments")));
				hshRecord.put("backintercomments", Helper.CLOBToString(rs
						.getClob("cmt_intercomments")));
			}

			if (!strAppType.equalsIgnoreCase("Postsanction")) {
				// /* To get the Eligibility Details*/
				HashMap hshCheckElig = new HashMap();
				hshValues.put("prd_type", strProductType);
				hshCheckElig = new CheckEligibilityBean()
						.getEligibility(hshValues);
				hshRecord.put("hshCheckElig", hshCheckElig);
			}

			/* To get the Assessment Comments */
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_com_comments^RBICOM^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("assesscomments", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}

			/* To get the Assessment Comments */
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_cersaicibildetails^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("CER_CERSAIDETAILS",
						Helper.correctNull((String) rs
								.getString("CER_CERSAIDETAILS")));
				hshRecord.put("CER_OTHERINFORMATION", Helper
						.correctNull((String) rs
								.getString("CER_OTHERINFORMATION")));
			}

			/* To get the Assessment Comments */
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_npascheme^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("npa_amtwise", Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("npa_amtwise"))));
				hshRecord.put("npa_accwise", Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("npa_accwise"))));
				hshRecord.put("npa_ratification", Helper.CLOBToString((rs
						.getClob("npa_ratification"))));
				hshRecord.put("npa_concession", Helper.CLOBToString((rs
						.getClob("npa_concession"))));
			}
			hshRecord.put("prd_type", strProductType);

			if (rs != null) {
				rs.close();
			}
			ArrayList arrAppCol = new ArrayList();
			ArrayList arrAppRow = new ArrayList();
			String strDemotype = "", strDemotype1 = "";
			String str_perapp_fname = "", strSMACategory = "", str_perapp_id = "";
			strQuery = SQLParser.getSqlQuery("sel_CIBILdetails^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrAppCol = new ArrayList();
				arrAppCol
						.add(Helper.correctNull((String) rs.getString("name"))); // 0
				strDemotype = Helper.correctNull((String) rs
						.getString("demotype"));
				if (strDemotype.equalsIgnoreCase("a")) {
					strDemotype1 = "Applicant";
				} else if (strDemotype.equalsIgnoreCase("c")) {
					strDemotype1 = "Joint Applicant";
				} else if (strDemotype.equalsIgnoreCase("g")) {
					strDemotype1 = "Guarantor";
				} else if (strDemotype.equalsIgnoreCase("o")) {
					strDemotype1 = "Co-Obligant";
				} else {
					strDemotype1 = "";
				}
				arrAppCol.add(strDemotype1); // 1
				arrAppCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("score")))); // 2
				arrAppCol.add(Helper.correctNull((String) rs
						.getString("comments"))); // 3

				if (correctNull(rs.getString("cibil_smacategory")).trim()
						.equalsIgnoreCase("Y")) {
					strSMACategory = "Yes";

				} else if (correctNull(rs.getString("cibil_smacategory"))
						.trim().equalsIgnoreCase("NA")) {
					strSMACategory = "Not Applicable";
				} else {
					strSMACategory = "No";
				}
				arrAppCol.add(Helper.correctNull(strSMACategory));// 4
				arrAppCol.add(Helper.correctNull((rs
						.getString("cibil_smadetails"))));// 5
				arrAppCol
						.add(Helper.correctNull((rs.getString("cibil_CRILC"))));// 6

				if (correctNull(rs.getString("CRIF_REFERED")).trim()
						.equalsIgnoreCase("Y")) {
					arrAppCol.add("Yes");// 7
					arrAppCol.add(Helper
							.correctNull(rs.getString("CRIF_SCORE")));// 8
					arrAppCol.add(Helper.correctNull(rs
							.getString("CRIF_DETAILS")));// 9
					arrAppCol
							.add(Helper.correctNull(rs.getString("CRIF_DATE")));// 10
				} else if (correctNull(rs.getString("CRIF_REFERED")).trim()
						.equalsIgnoreCase("NA")) {
					arrAppCol.add("Not Applicable");// 7
					arrAppCol.add("");// 8
					arrAppCol.add("");// 9
					arrAppCol.add("");// 10
				} else {
					arrAppCol.add("No");// 7
					arrAppCol.add("");// 8
					arrAppCol.add("");// 9
					arrAppCol.add("");// 10
				}

				arrAppRow.add(arrAppCol);
			}
			hshRecord.put("arrApptypeRow", arrAppRow);

			/* To get the NPA Details */
			if (!strPrdcode.equalsIgnoreCase("")) {
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_npascheme^"
						+ strApplicationNo);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("npa_concession", Helper.CLOBToString((rs
							.getClob("npa_concession"))));
				}
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_workflowcomment^"
					+ strApplicationNo + "^" + "R");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("cpccomments", Helper.CLOBToString((rs
						.getClob("workflowcom_COMMENTS"))));
			}

			if (rs != null) {
				rs.close();
			}
			String strPrdtype = "";
			strQuery = SQLParser.getSqlQuery("setproductstypebyprdcode^"
					+ strPrdcode);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strPrdtype = Helper.correctNull((String) rs
						.getString("prd_loantype"));
				String strPrdtype1 = "";
				if (!strPrdtype.equalsIgnoreCase("")) {
					if (strPrdtype.equalsIgnoreCase("TL")) {
						strPrdtype1 = "Term Loan";
					} else if (strPrdtype.equalsIgnoreCase("OD")) {
						strPrdtype1 = "OverDraft";
					} else if (strPrdtype.equalsIgnoreCase("DL")) {
						strPrdtype1 = "Demand Loan";
					} else {
						strPrdtype1 = "Working Capital";
					}
					hshRecord.put("facnature", strPrdtype1);
				}
			}

			/* To get Existing Facility Details */
			ArrayList arrFacCol = new ArrayList();
			ArrayList arrFacRow = new ArrayList();
			String strCbsAccNo = "";
			String strFacilityDesc = "", strFacility = "", strFacilityId = "";
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_appfacexisting^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrFacCol = new ArrayList();
				
				if(!Helper.correctNull((String)hshValues.get("strAppType")).equalsIgnoreCase("R") && Helper.correctNull(rs.getString("combk_credittype")).equalsIgnoreCase("P"))
					continue;
				/*
				 * if(rs1!=null) { rs1.close(); }
				 * strQuery1=SQLParser.getSqlQuery
				 * ("Docinterestrate^"+strApplicationNo); rs1 =
				 * DBUtils.executeQuery(strQuery1); if(rs1.next()) {
				 * arrFacCol.add
				 * (Helper.correctNull(rs1.getString("loan_purposeofloan"
				 * )));//18 }
				 */
				arrFacCol.add(Helper.correctNull((String) rs
						.getString("combk_purpose")));// 0
				arrFacCol.add(Helper.correctNull((String) rs
						.getString("combk_limit")));// 1
				arrFacCol.add(Helper.correctInt((String) rs
						.getString("combk_sancrefno")));// 2
				arrFacCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("combk_os"))));// 3
				arrFacCol.add(Helper.correctNull((String) rs
						.getString("combk_prestatus")));// 4
				String strFacilityFor = correctNull((String) rs
						.getString("combk_modtype"));
				strFacility = correctNull((String) rs
						.getString("combk_facility"));
				String strFacilityCode[] = strFacility.split("~");
				strFacilityId = Helper.correctInt(strFacilityCode[0]);

				if (strFacilityFor.equalsIgnoreCase("r")
						|| strFacilityFor.equalsIgnoreCase("p")) {
					rs1 = DBUtils.executeLAPSQuery("selLoanPurpose^"
							+ strFacilityId);
					if (rs1.next()) {
						strFacilityDesc = correctNull((String) rs1
								.getString("prddesc"));
					}
				} else {
					rs1 = DBUtils.executeLAPSQuery("sel_facilitycorp^"
							+ strFacilityId);
					if (rs1.next()) {
						strFacilityDesc = correctNull((String) rs1
								.getString("prddesc"));
					}
				}
				arrFacCol.add(strFacilityDesc);// 5
				arrFacCol.add(nf.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("combk_interestrate")))));// 6
				arrFacCol.add(nf.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("combk_monthly_ins")))));// 7
				arrFacCol.add(correctNull(rs.getString("combk_duedate")));// 8
				arrFacCol.add(correctNull(rs.getString("combk_arrears")));// 9
				arrFacRow.add(arrFacCol);
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_renewedfacilitydetails^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				arrFacCol = new ArrayList();
				arrFacCol.add("");
				arrFacCol.add(Helper.correctNull(rs.getString("sanc_lmt")));
				arrFacCol
						.add(Helper.correctNull(rs.getString("sanctionrefno")));
				strCbsAccNo = Helper.correctNull(rs.getString("cbs_accountno"));
				if (strCbsAccNo.equalsIgnoreCase("")) {
					arrFacCol.add("");
					arrFacCol.add("");
				} else {
					if (ApplicationParams.getCbsIntegration().equalsIgnoreCase(
							"TRUE")) {
						strQuery = SQLParser
								.getCBSSqlQuery("selliabpullingdirectacopening^"
										+ strCbsAccNo);
					} else {
						strQuery = SQLParser
								.getCBSSqlQuery("selliabpullingdirectacopening1^"
										+ strCbsAccNo);
					}
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeQueryCBSConnection(strQuery);
					if (rs1.next()) {
						arrFacCol.add(String.valueOf(Double.parseDouble(Helper
								.correctDouble(rs1.getString("outstanding")))
								* -1));
						arrFacCol.add("");
					} else {
						arrFacCol.add("");
						arrFacCol.add("");
					}

				}
				arrFacCol.add(Helper.correctNull(rs.getString("prddesc")));
				arrFacCol.add(nf.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("loan_modintrate")))));
				arrFacCol.add(nf.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("loan_emi")))));
				arrFacCol.add("");
				arrFacCol.add("");
				arrFacRow.add(arrFacCol);
			}

			hshRecord.put("arrFacRow", arrFacRow);

			/* To get Joint Applicant Existing Facility Details */
			ArrayList arrJAFacCol = new ArrayList();
			ArrayList arrJAFacRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_JAppfacexisting^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrJAFacCol = new ArrayList();
				if (rs1 != null) {
					rs1.close();
				}
				// strQuery1=SQLParser.getSqlQuery("Docinterestrate^"+Helper.correctNull((String)rs.getString("comgc_parentappno")));
				// rs1 = DBUtils.executeQuery(strQuery1);
				// if(rs1.next())
				// {
				// arrJAFacCol.add(Helper.CLOBToString(rs1.getClob("loan_purposeofloan")));//0
				// }
				// else{
				// arrJAFacCol.add("");//0
				// }
				arrJAFacCol.add(Helper.correctNull(rs
						.getString("comgc_purpose")));// 0
				arrJAFacCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("comgc_limit"))));// 1
				arrJAFacCol.add(Helper.correctNull((String) rs
						.getString("comgc_sancrefno")));// 2
				arrJAFacCol.add(Helper.checkDecimal(Helper
						.correctDouble((String) rs.getString("comgc_os"))));// 3
				arrJAFacCol.add(Helper.correctNull(rs
						.getString("comgc_prestatus")));// 4
				String str_modtype = Helper.correctNull((String) rs
						.getString("comgc_modtype"));
				String strbnkFac = Helper.correctNull((String) rs
						.getString("comgc_facility"));
				if (str_modtype.equalsIgnoreCase("c")
						|| str_modtype.equalsIgnoreCase("a")) {
					rs2 = DBUtils.executeLAPSQuery("sel_facilitycorp_desc^"
							+ strbnkFac);
					if (rs2.next()) {
						arrJAFacCol.add(correctNull(rs2
								.getString("com_facdesc")));// 5
					} else {
						arrJAFacCol.add("");// 5
					}
				} else if (str_modtype.equalsIgnoreCase("p")
						|| str_modtype.equalsIgnoreCase("r")) {
					rs2 = DBUtils.executeLAPSQuery("sel_retProductDesc^"
							+ strbnkFac);
					if (rs2.next()) {
						arrJAFacCol.add(correctNull(rs2
								.getString("com_facdesc")));// 5
					} else {
						arrJAFacCol.add("");// 5
					}
				} else {
					arrJAFacCol.add("");// 5
				}
				arrJAFacCol.add(nf.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("comgc_intrate")))));// 6
				arrJAFacCol.add(nf.format(Double.parseDouble(Helper
						.correctDouble(rs.getString("comgc_monthly_ins")))));// 7
				arrJAFacCol.add(correctNull(rs.getString("comgc_duedate")));// 8
				arrJAFacCol.add(correctNull(rs.getString("comgc_arrears")));// 9
				arrJAFacCol.add(correctNull(rs.getString("demo_type")));// 10

				arrJAFacRow.add(arrJAFacCol);
			}
			hshRecord.put("arrJAFacRow", arrJAFacRow);

			/* To get Repayment Details */
			HashMap hshRepayment = new HashMap();
			hshValues.put("hidapplicantnewid", strappId);
			hshValues.put("hidapplicantid", strappId);
			hshRepayment = new RetailAssessmentBean()
					.getRepaymentCapacity(hshValues);
			hshRecord.put("hshRepayment", hshRepayment);

			// Bank Scheme
			String strguarantee = "", strMainAct = "", strSubAct = "";
			String strActivityCode = "";
			String strActivitySno = "";
			String strBankScheme = "", strBankSchemeDesc = "", strPrdLoanType = "", strPurpose = "";
			String strPur[] = new String[2];
			String strBsrCode = "", strBsr1Code = "";
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_prdloantype^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strPrdLoanType = Helper.correctNull((String) rs
						.getString("prd_loantype"));
				strBankScheme = Helper.correctNull((String) rs
						.getString("prd_bankscheme"));
			}

			if (rs != null) {
				rs.close();
			}

			strQuery = SQLParser.getSqlQuery("sel_misstaticdatadesc^1^"
					+ strBankScheme);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strBankSchemeDesc = Helper.correctNull((String) rs
						.getString("mis_static_data_desc"));
			}
			hshRecord.put("strBankSchemeDesc", strBankSchemeDesc);

			strQuery = SQLParser.getSqlQuery("sel_misappdetails^"
					+ strApplicationNo + "^" + 1);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("app_totlim", Helper.correctDouble((String) rs
						.getString("app_totlim")));
				hshRecord.put("app_totlimser", Helper.correctDouble((String) rs
						.getString("app_totlimser")));
				hshRecord
						.put("app_totlimagri", Helper.correctDouble((String) rs
								.getString("app_totlimagri")));
				hshRecord.put("app_whetherrestructure", Helper
						.correctNull((String) rs
								.getString("app_whetherrestructure")));
				hshRecord.put("app_whetherservice", Helper
						.correctNull((String) rs
								.getString("app_whetherservice")));
				hshRecord.put("app_resunder", Helper.correctNull((String) rs
						.getString("app_resunder")));
				hshRecord
						.put("app_settlementno", Helper.correctNull((String) rs
								.getString("app_settlementno")));
				hshRecord.put("app_settlementdate", Helper
						.correctNull((String) rs
								.getString("app_settlementdate")));
				hshRecord.put("app_oldfacid", Helper.correctNull((String) rs
						.getString("app_oldfacid")));
				hshRecord.put("app_resreason", Helper.correctNull((String) rs
						.getString("app_resreason")));
				hshRecord.put("app_place", Helper.correctNull((String) rs
						.getString("app_place")));
				hshRecord.put("app_repayment", Helper.correctNull((String) rs
						.getString("app_repayment")));
				hshRecord.put("app_sourceofrepay",
						Helper.correctNull((String) rs
								.getString("app_sourceofrepay")));
				strguarantee = Helper.correctNull((String) rs
						.getString("app_guarantee"));
				hshRecord.put("app_guaranteeamt", Helper
						.correctDouble((String) rs
								.getString("app_guaranteeamt")));
				hshRecord.put("app_whethernewfac",
						Helper.correctNull((String) rs
								.getString("app_whethernewfac")));
				hshRecord.put("app_commencementdate", Helper
						.correctNull((String) rs
								.getString("app_commencementdate")));
				strActivityCode = Helper.correctNull((String) rs
						.getString("app_activitycode"));
				strActivitySno = Helper.correctNull((String) rs
						.getString("app_activitysno"));
				hshRecord.put("app_activitycode", strActivityCode);
				hshRecord.put("app_activitysno", strActivitySno);
				strMainAct = Helper.correctNull((String) rs
						.getString("app_mainactivity"));
				strSubAct = Helper.correctNull((String) rs
						.getString("app_subactivity"));
				hshRecord.put("app_purpose", Helper.correctNull((String) rs
						.getString("app_purpose")));
				hshRecord.put("app_bsrcode", Helper.correctNull((String) rs
						.getString("app_bsrcode")));
				hshRecord.put("app_bsr1code", Helper.correctNull((String) rs
						.getString("app_bsr1code")));
				hshRecord
						.put("app_industrytype", Helper.correctNull((String) rs
								.getString("app_industrytype")));
				hshRecord.put("app_assetclassifcation", Helper
						.correctNull((String) rs
								.getString("app_assetclassifcation")));
				hshRecord.put("app_dispscreen", Helper.correctNull((String) rs
						.getString("app_dispscreen")));
				hshRecord
						.put("app_facility_sno", Helper.correctNull((String) rs
								.getString("app_facility_sno")));
				hshRecord.put("app_sharebroker", Helper.correctNull((String) rs
						.getString("app_sharebroker")));
				strPurpose = Helper.correctNull((String) rs
						.getString("app_purpose"));
				strBsrCode = Helper.correctNull((String) rs
						.getString("app_bsrcode"));
				strBsr1Code = Helper.correctNull((String) rs
						.getString("app_bsr1code"));

			}

			rs = DBUtils.executeLAPSQuery("sel_guarantee^" + "17" + "^"
					+ strguarantee);
			if (rs.next()) {
				hshRecord.put("app_Guarantee Covered", Helper
						.correctNull((String) rs
								.getString("mis_static_data_desc")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
					+ strMainAct + "^" + strSubAct);
			if (rs.next()) {
				hshRecord.put("mis_subactdesc", Helper.correctNull((String) rs
						.getString("mis_subactdesc")));
			}

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_misappclassification^"
					+ strApplicationNo + "^" + "1");
			if (rs.next()) {
				String strSector = Helper.correctNull((String) rs
						.getString("app_sector"));
				String strGOVTANNOUNCESCHEME = Helper.correctNull((String) rs
						.getString("APP_GOVTANNOUNCESCHEME"));
				String str_STANDUP_INDIA = Helper.correctNull((String) rs
						.getString("APP_STANDUP_INDIA"));
				hshRecord
						.put("mis_infrastructure", Helper
								.correctNull((String) rs
										.getString("APP_INFRASTRCODE")));
				if (strSector.equalsIgnoreCase("01")
						|| strSector.equalsIgnoreCase("1")) {
					hshRecord.put("mis_sctortloan", "Priority Sector");
				} else if (strSector.equalsIgnoreCase("02")
						|| strSector.equalsIgnoreCase("2")) {
					hshRecord.put("mis_sctortloan", "Non Priority Sector");
				} else {
					hshRecord.put("mis_sctortloan", "");
				}
				if(str_STANDUP_INDIA.equalsIgnoreCase("Y"))
					hshRecord.put("mis_StandupDesc", "Yes");
				else if(str_STANDUP_INDIA.equalsIgnoreCase("N"))
					hshRecord.put("mis_StandupDesc", "No");
				else
					hshRecord.put("mis_StandupDesc", "Nil");
				
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "7"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_subsector")));
				if (rs1.next()) {
					hshRecord.put("mis_subscetroloan", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
							+ "8"
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("app_subsector")));
					if (rs1.next()) {
						hshRecord.put("mis_subscetroloan", Helper
								.correctNull((String) rs1
										.getString("mis_static_data_desc")));
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "9"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_weakersec")));
				if (rs1.next()) {
					hshRecord.put("mis_weaksection", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					hshRecord.put("mis_weaksection", "Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "11"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_sensitivesector")));
				if (rs1.next()) {
					hshRecord.put("mis_sensitivitysec", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					hshRecord.put("mis_sensitivitysec", "Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "12"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_agriculture")));
				if (rs1.next()) {
					hshRecord.put("mis_indcattyepagr", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					hshRecord.put("mis_indcattyepagr", "Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
						+ "2" + "^" + strMainAct);
				if (rs1.next()) {
					hshRecord.put("mis_mainactivitydesc", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					hshRecord.put("mis_mainactivitydesc", "Nil");
				}

				if (rs1 != null) {
					rs1.close();
				}

				if (!strPurpose.equalsIgnoreCase("")) {
					strPur = strPurpose.split("_");
					rs1 = DBUtils.executeLAPSQuery("sel_purpose_detailsmis^"
							+ "3" + "^" + strPur[0] + "^" + strPur[1]);
					if (rs1.next()) {
						hshRecord.put("mis_purpose", Helper
								.correctNull((String) rs1
										.getString("mis_static_data_desc")));
					}
				} else {
					hshRecord.put("mis_purpose", "Nil");
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_BSRNameforcode^"
						+ strBsrCode);
				if (rs1.next()) {
					hshRecord.put("mis_bsrcodedesc", Helper
							.correctNull((String) rs1.getString("ind_name")));
				} else {
					hshRecord.put("mis_bsrcodedesc", "Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
						+ "6" + "^" + strBsr1Code);
				if (rs1.next()) {
					hshRecord.put("mis_bsr1codedesc", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					hshRecord.put("mis_bsr1codedesc", "Nil");
				}

				if (rs1 != null) {
					rs1.close();
				}
				String strGovtScheme = "", strSchemCode = "";
				rs1 = DBUtils.executeLAPSQuery("getlreq^" + strApplicationNo);
				if (rs1.next()) {
					strGovtScheme = Helper.correctNull((String) rs1
							.getString("LOAN_GOVT"));
					strSchemCode = Helper.correctNull((String) rs1
							.getString("GOVT_SCHEME"));
					hshRecord.put("strisGovtScheme", strGovtScheme);
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (strGovtScheme.equalsIgnoreCase("1")) {
					rs1 = DBUtils.executeLAPSQuery("selstaticdatadesccode^"
							+ "11" + "^" + strSchemCode);
					if (rs1.next()) {

						hshRecord.put("mis_govnysponser", Helper
								.correctNull((String) rs1
										.getString("stat_data_desc1")));
					} else {
						hshRecord.put("mis_govnysponser", "");

					}

					if (rs2 != null)
						rs2 = null;
					strQuery = SQLParser.getSqlQuery("sel_PMAY_desc^"
							+ strApplicationNo);
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						if (rs1 != null)
							rs1 = null;
						strQuery = SQLParser.getSqlQuery("select_Pmay_desc^"
								+ Helper.correctNull(rs2
										.getString("PMAY_HOUSE_CAT")));
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							hshRecord.put("strGovtCategory", Helper
									.correctNull(rs1
											.getString("PM_SUBCATEGORY")));
						}

					}

				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selcredfreez^"
						+ strApplicationNo);
				if (rs1.next()) {
					hshRecord.put("strcre_rating", Helper
							.correctNull((String) rs1.getString("cre_rating")));
					hshRecord.put("strcre_weight", Helper
							.correctNull((String) rs1.getString("cre_weight")));
				}
				
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
						+ "23" + "^" + strGOVTANNOUNCESCHEME);
				if (rs1.next()) {
					hshRecord.put("mis_GovtSchemeDesc", Helper
							.correctNull((String) rs1
									.getString("mis_static_data_desc")));
				} else {
					hshRecord.put("mis_GovtSchemeDesc", "Nil");
				}
				if (rs1 != null)
					rs1.close();
			}
			//for CBS Branch display
			String strOrg_Name="",strFacilitySno="1";
			strQuery =SQLParser.getSqlQuery("sel_cbsdetails^" +strApplicationNo+"^"+strFacilitySno);
			if(rs!=null)
			rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				strOrgCode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
				strOrg_Name="";
				if(!strOrgCode.equalsIgnoreCase(""))
				{
					if(rs1!=null)
					{
						rs1.close();
					}
					strQuery1=SQLParser.getSqlQuery("selectorgname^"+strOrgCode);
					rs1=DBUtils.executeQuery(strQuery1);
					if(rs1.next())
					{
						strOrg_Name=Helper.correctNull((String)rs1.getString("org_name"));
						hshRecord.put("strOrg_Name", strOrg_Name);
					}
				}
				}
			
			//end
			if (rs != null) {
				rs.close();
			}
			String strPeriodicity = "", strHoliday = "", strServiced = "";

			strQuery = SQLParser.getSqlQuery("securesel^" + strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strHoliday = Helper.correctNull((String) rs
						.getString("loan_noofinstallment"));
				strPeriodicity = Helper.correctNull((String) rs
						.getString("loan_periodicity"));
				strServiced = Helper.correctNull((String) rs
						.getString("loan_servised"));
			}
			if (strPeriodicity.equalsIgnoreCase("m")) {
				strPeriodicity = "Monthly";
			} else if (strPeriodicity.equalsIgnoreCase("q")) {
				strPeriodicity = "Quarterly";
			} else if (strPeriodicity.equalsIgnoreCase("h")) {
				strPeriodicity = "Half-Yearly";
			} else if (strPeriodicity.equalsIgnoreCase("y")) {
				strPeriodicity = "Yearly";
			} else if (strPeriodicity.equalsIgnoreCase("n")) {
				strPeriodicity = "Not Applicable";
			}
			hshRecord.put("strPeriodicity", strPeriodicity);

			if (rs != null) {
				rs.close();
			}
			String strIntFreq = "";
			strQuery = SQLParser.getSqlQuery("sel_cuscbsacdetails^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strIntFreq = Helper.correctNull((String) rs
						.getString("INTRATEFREQ"));
			}

			if (strIntFreq.equalsIgnoreCase("M")) {
				strIntFreq = "Monthly";
			} else if (strIntFreq.equalsIgnoreCase("Q")) {
				strIntFreq = "Quartely";
			} else if (strIntFreq.equalsIgnoreCase("H")) {
				strIntFreq = "Half-yearly";
			} else if (strIntFreq.equalsIgnoreCase("Y")) {
				strIntFreq = "Yearly";
			}
			hshRecord.put("strIntFreq", strIntFreq);

			/*** For Educational Details - Added by DINESH on 09/04/2014 ***/

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("eduparticularssel^"
					+ strApplicationNo);

			if (rs.next()) {
				hshRecord.put("edu_coursename", correctNull(rs
						.getString("edu_coursename")));
				hshRecord.put("edu_course_approved", correctNull(rs
						.getString("edu_course_approved")));
				hshRecord.put("edu_course_approvedby", correctNull(rs
						.getString("edu_course_approvedby")));
				hshRecord.put("edu_univ_approved", correctNull(rs
						.getString("edu_univ_approved")));
				hshRecord.put("edu_univ_approvedby", correctNull(rs
						.getString("edu_univ_approvedby")));
				hshRecord.put("edu_univ_addr", correctNull(rs
						.getString("edu_univ_addr")));
				hshRecord.put("edu_partfull", correctNull(rs
						.getString("edu_partfull")));
				hshRecord.put("edu_qual_proposed", correctNull(rs
						.getString("edu_qual_proposed")));
				hshRecord.put("edu_commencedate", correctNull(rs
						.getString("edu_commencedate")));
				hshRecord.put("edu_mode_secure", correctNull(rs
						.getString("edu_mode_secure")));
				hshRecord.put("edu_univ_situ_domicile", correctNull(rs
						.getString("edu_univ_situ_domicile")));
				hshRecord.put("edu_comp_stay_hostel", correctNull(rs
						.getString("edu_comp_stay_hostel")));
				hshRecord.put("edu_comments1", correctNull(rs
						.getString("edu_comments1")));
				hshRecord.put("edu_comments2", correctNull(rs
						.getString("edu_comments2")));
				hshRecord.put("edu_comments3", correctNull(rs
						.getString("edu_comments3")));
				hshRecord.put("edu_comments4", correctNull(rs
						.getString("edu_comments4")));
				hshRecord.put("edu_studies_in", correctNull(rs
						.getString("edu_studies_in")));
				hshRecord.put("expected_income", correctNull(rs
						.getString("expected_income")));
				hshRecord.put("EDU_MERITORIOUS", correctNull(rs
						.getString("EDU_MERITORIOUS")));
				hshRecord.put("edu_univ_name", (String) correctNull(rs
						.getString("edu_univ_name")));
				hshRecord.put("edu_qualifyingexa", (String) correctNull(rs
						.getString("edu_qualifyingexa")));
				hshRecord.put("edu_typeofcourse", correctNull(rs
						.getString("edu_typeofcourse")));

				String duration = correctNull(rs.getString("edu_duration"));
				StringTokenizer tknz = new StringTokenizer(duration, "~");
				hshRecord.put("edu_durationyrs", ((String) tknz.nextElement())
						.trim());
				hshRecord.put("edu_durationmon", ((String) tknz.nextElement())
						.trim());
			}

			if (rs != null) {
				rs.close();
			}

			strQuery = SQLParser.getSqlQuery("sel_products_education^"
					+ strPrdcode);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("prd_purpose", Helper.correctNull((String) rs
						.getString("prd_purpose")));
			}

			if (rs != null) {
				rs.close();
			}
			if (rs2 != null) {
				rs2.close();
			}
			if (rs3 != null) {
				rs3.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_common_customer^" + Helper.correctNull((String) hshValues.get("comappid")));
			if (rs.next()) {
				hshRecord.put("indinfo_family_income", Helper
						.correctDouble((String) rs
								.getString("indinfo_family_income")));
				rs2=DBUtils.executeLAPSQuery("selmiscust^109^"+Helper.correctNull((String)rs.getString("perapp_status")));
				if(rs2.next())
				{	
					hshRecord.put("perapp_status", Helper.correctNull(rs2.getString("stat_data_desc1")));

				}
				hshRecord.put("perapp_relat_staffid", Helper.correctNull((String) rs
						.getString("perapp_relat_staffid")));
				rs3=DBUtils.executeLAPSQuery("selmiscust^110^"+Helper.correctNull((String)rs.getString("perapp_relation_bankstaff")));
				if(rs3.next())
				{	
					hshRecord.put("perapp_relation_bankstaff", Helper.correctNull(rs3.getString("stat_data_desc1")));

				}
				if(Helper.correctNull((String)rs.getString("perapp_relation_bankstaff")).equalsIgnoreCase("005")||Helper.correctNull((String)rs.getString("perapp_relation_bankstaff")).equalsIgnoreCase("006")){
					hshRecord.put("perapp_relation_staffname", Helper.correctNull((String) rs.getString("perapp_relation_staffname")));

			   }else{
				rs4=DBUtils.executeLAPSQuery("selmiscust^153^"+Helper.correctNull((String)rs.getString("perapp_relation_staffname")));
				if(rs4.next())
				{	
					hshRecord.put("perapp_relation_staffname", Helper.correctNull(rs4.getString("stat_data_desc1")));

				}
			   }
				rs1=DBUtils.executeLAPSQuery("selmiscust^111^"+Helper.correctNull((String)rs.getString("perapp_blood_relation")));
				if(rs1.next())
				{	
					hshRecord.put("perapp_blood_relation", Helper.correctNull(rs1.getString("stat_data_desc1")));

				}
				hshRecord.put("PEREMP_ID", Helper.correctNull((String) rs
						.getString("PEREMP_ID")));
				hshRecord.put("PEREMP_ESTABLISH", Helper.correctNull((String) rs
						.getString("PEREMP_ESTABLISH")));
				hshRecord.put("peremp_department", Helper.correctNull((String) rs
						.getString("peremp_department")));
				hshRecord.put("peremp_retdate", Helper.correctNull((String) rs
						.getString("peremp_retdate")));
				hshRecord.put("perapp_relation_bankstaff_val", Helper.correctNull((String) rs
						.getString("perapp_relation_bankstaff")));
				hshRecord.put("indinfo_is_staff", Helper.correctNull((String) rs
						.getString("indinfo_is_staff")));
				hshRecord.put("PERAPP_INVOCDATE", Helper.correctNull((String) rs
						.getString("PERAPP_INVOCDATE")));
				hshRecord.put("indinfo_dateof_joining", Helper.correctNull((String) rs
						.getString("indinfo_dateof_joining")));
				hshRecord.put("indinfo_staff_id", Helper.correctNull((String) rs
						.getString("indinfo_staff_id")));
			}

			// For Other Educational Details
			strQuery = SQLParser.getSqlQuery("edudetailsselection^"
					+ strApplicationNo);
			if (rs != null)
				rs.close();

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				vecVal = new ArrayList();
				vecVal.add(correctNull(rs.getString("edu_id")));
				vecVal.add(correctNull(rs.getString("edu_exam")));
				vecVal.add(correctNull(rs.getString("edu_university")));
				vecVal.add(correctNull(rs.getString("edu_yearpass")));
				vecVal.add(correctNull(rs.getString("edu_attempts")));
				vecVal.add(correctNull(rs.getString("edu_marks")));
				vecVal.add(correctNull(rs.getString("edu_class")));

				vecData.add(vecVal);
			}
			hshRecord.put("vecDataEdu", vecData);

			// For Scholarship Details
			strQuery = SQLParser.getSqlQuery("eduscholarsselection^"
					+ strApplicationNo);

			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				vecVal = new ArrayList();
				vecVal.add(correctNull(rs.getString("edu_id")));
				vecVal.add(correctNull(rs.getString("edu_exam")));
				vecVal.add(correctNull(rs.getString("edu_academic")));
				vecVal.add(correctNull(rs.getString("edu_name")));
				vecVal.add(correctNull(rs.getString("edu_amount")));
				String strFrom = correctNull(rs.getString("edu_from"));
				String strTo = correctNull(rs.getString("edu_to"));
				if (strFrom.trim().equals("01/01/1900")) {
					vecVal.add("");
				} else {
					vecVal.add(strFrom);
				}
				if (strTo.trim().equals("01/01/1900")) {
					vecVal.add("");
				} else {
					vecVal.add(strTo);
				}
				vecDataSchl.add(vecVal);
			}
			hshRecord.put("vecDataSchl", vecDataSchl);

			// For Course Fees Details

			double dblTotYr1 = 0.00, dblTotYr2 = 0.00, dblTotYr3 = 0.00, dblTotYr4 = 0.00, dblTotYr5 = 0.00, dblTotYr6 = 0.00, dblColTot = 0.00;
			strQuery = SQLParser.getSqlQuery("sel_cop_educoursedet^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);

			ArrayList vecRow = new ArrayList();
			ArrayList vecCol = new ArrayList();
			while (rs.next()) {
				vecRow = new ArrayList();
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_year1"))); // 0
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_year2"))); // 1
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_year3"))); // 2
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_year4"))); // 3
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_year5"))); // 4
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_year6"))); // 5
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_col_total"))); // 6
				vecRow.add(Helper.correctNull((String) rs
						.getString("edu_comments"))); // 7
				vecRow.add(Helper
						.correctNull((String) rs.getString("edu_type"))); // 8
				vecCol.add(vecRow);

				dblTotYr1 = dblTotYr1
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year1")));
				dblTotYr2 = dblTotYr2
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year2")));
				dblTotYr3 = dblTotYr3
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year3")));
				dblTotYr4 = dblTotYr4
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year4")));
				dblTotYr5 = dblTotYr5
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year5")));
				dblTotYr6 = dblTotYr6
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year6")));
				dblColTot = dblColTot
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_col_total")));
			}
			hshRecord.put("vecCol", vecCol);
			hshRecord.put("dblTotYr1", "" + dblTotYr1);
			hshRecord.put("dblTotYr2", "" + dblTotYr2);
			hshRecord.put("dblTotYr3", "" + dblTotYr3);
			hshRecord.put("dblTotYr4", "" + dblTotYr4);
			hshRecord.put("dblTotYr5", "" + dblTotYr5);
			hshRecord.put("dblTotYr6", "" + dblTotYr6);
			hshRecord.put("dblColTot", "" + dblColTot);

			double dblTotYr1mof = 0.00, dblTotYr2mof = 0.00, dblTotYr3mof = 0.00, dblTotYr4mof = 0.00, dblTotYr5mof = 0.00, dblTotYr6mof = 0.00, dblColTotmof = 0.00;
			strQuery = SQLParser.getSqlQuery("sel_mof_educoursedet^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			double dblMOFtotal = 0.00;
			ArrayList vecRowMOF = new ArrayList();
			ArrayList vecColMOF = new ArrayList();
			while (rs.next()) {
				vecRowMOF = new ArrayList();
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_year1"))); // 0
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_year2"))); // 1
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_year3"))); // 2
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_year4"))); // 3
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_year5"))); // 4
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_year6"))); // 5
				dblMOFtotal = Double.parseDouble(Helper.correctDouble(rs
						.getString("edu_year1")))
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year2")))
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year3")))
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year4")))
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year5")))
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year6")));
				vecRowMOF.add(String.valueOf(dblMOFtotal)); // 6
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_comments"))); // 7
				vecRowMOF.add(Helper.correctNull((String) rs
						.getString("edu_type"))); // 8
				vecColMOF.add(vecRowMOF);

				dblTotYr1mof = dblTotYr1mof
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year1")));
				dblTotYr2mof = dblTotYr2mof
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year2")));
				dblTotYr3mof = dblTotYr3mof
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year3")));
				dblTotYr4mof = dblTotYr4mof
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year4")));
				dblTotYr5mof = dblTotYr5mof
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year5")));
				dblTotYr6mof = dblTotYr6mof
						+ Double.parseDouble(Helper.correctDouble(rs
								.getString("edu_year6")));
			}
			dblColTotmof = dblColTotmof + dblTotYr1mof + dblTotYr2mof
					+ dblTotYr3mof + dblTotYr4mof + dblTotYr5mof + dblTotYr6mof;
			hshRecord.put("vecColMOF", vecColMOF);
			hshRecord.put("dblTotYr1mof", "" + dblTotYr1mof);
			hshRecord.put("dblTotYr2mof", "" + dblTotYr2mof);
			hshRecord.put("dblTotYr3mof", "" + dblTotYr3mof);
			hshRecord.put("dblTotYr4mof", "" + dblTotYr4mof);
			hshRecord.put("dblTotYr5mof", "" + dblTotYr5mof);
			hshRecord.put("dblTotYr6mof", "" + dblTotYr6mof);
			hshRecord.put("dblColTotmof", "" + dblColTotmof);

			// Added by Kishan
			if (strEmpStatus.equals("4")) {
				HashMap hshFarm = new HashMap();
				ComProposalBean comProposal = new ComProposalBean();
				hshFarm = comProposal.getFarmBudget(hshValues);
				log.info("hshFarm : " + hshFarm);
				hshRecord.put("hshFarm", hshFarm);
			}
			hshRecord.put("empemployment", strEmpStatus);
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_comments^secoverageretail^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("SECURITY_COMMENTS", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}
			strQuery = SQLParser.getSqlQuery("sel_comments^otherparams^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("subject", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}
			strQuery = SQLParser.getSqlQuery("sel_comments^otherparams1^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("brief_history", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}
			strQuery = SQLParser.getSqlQuery("sel_comments^otherparams3^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("recommendations", Helper.CLOBToString(rs
						.getClob("COM_COMMENTS")));
			}

			if (rs1 != null) {
				rs1.close();
			}
			ArrayList arrSecLegal = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_secdetbyappno^"
					+ strApplicationNo);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("selseclegalopinion^"
						+ Helper.correctInt(rs1.getString("APP_SEC_SECID")));
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					arrayCol = new ArrayList();
					arrayCol.add(correctNull(rs.getString("SEC_PL_LAWNAME")));// 0
					arrayCol.add(correctNull(rs.getString("SEC_PL_LEGOPDATE")));// 1
					arrayCol.add(correctNull(rs
							.getString("SEC_PL_LEGOPSUPDATE")));// 2
					arrayCol.add(correctNull(rs
							.getString("SEC_PL_LEGALAUDREPDATE")));// 3
					arrayCol.add(correctNull(rs.getString("SEC_PL_CERSID")));// 4
					arrayCol.add(correctNull(rs.getString("SEC_PL_TITLE")));// 5
					arrayCol.add(correctNull(rs.getString("SEC_PL_EC")));// 6
					arrayCol.add(correctNull(rs.getString("SEC_PL_TAX")));// 7
					arrayCol.add(correctNull(rs.getString("SEC_PL_MORTG")));// 8

					strQuery = SQLParser.getSqlQuery("sel_retailcomments^"
							+ Helper.correctInt(rs1.getString("APP_SEC_SECID"))
							+ "^securityLegalOpinion");
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						arrayCol.add(Helper.CLOBToString(rs2
								.getClob("cmt_comments")));// 9
					} else {
						arrayCol.add("");// 9
					}
					arrayCol.add(correctNull(rs1.getString("sec_name")));// 10
					arrayCol.add(Helper.CLOBToString(rs1
							.getClob("cus_sec_security_description")));// 11
					arrayCol
							.add(correctNull(rs.getString("sec_pl_elitepanel")));// 12
					arrayCol.add(correctNull(rs.getString("SEC_PL_ID")));// 13
					arrayCol.add(correctNull(rs
							.getString("SEC_PL_SEARCHFROM_PROP")));// 14
					arrayCol.add(correctNull(rs.getString("SEC_PL_PERIOD_EC")));// 15
					arrayCol.add(correctNull(rs.getString("sec_lawyer_seqno")));// 16
					arrayCol.add(correctNull(rs.getString("SEC_PL_GOVT_LAWYERNAME")));// 17
					
					arrSecLegal.add(arrayCol);
				}
			}

			hshRecord.put("arrSecLegal", arrSecLegal);
			if (rs != null) {
				rs.close();
			}
			String Prop_Type="";
			rs = DBUtils.executeLAPSQuery("Sel_valuationentry1^"
					+ strApplicationNo);
			while (rs.next()) {
				vecCol = new ArrayList();
				vecCol.add(correctNull(rs.getString("app_no")));// 0
				vecCol.add(correctNull(rs.getString("valu_sno")));// 1
				String entry_date = correctNull(rs.getString("entry_date"));
				if (entry_date.equalsIgnoreCase("01/01/1900")) {
					entry_date = "";
				}
				vecCol.add(entry_date);// 2
				vecCol.add(correctNull(rs.getString("valuers_code")));// 3
				vecCol.add(correctNull(rs.getString("let_cer_no")));// 4
				String let_cer_date = correctNull(rs.getString("let_cer_date"));
				if (let_cer_date.equalsIgnoreCase("01/01/1900")) {
					let_cer_date = "";
				}
				vecCol.add(let_cer_date);// 5
				vecCol.add(correctNull(rs.getString("mark_val_land")));// 6
				vecCol.add(correctNull(rs.getString("mark_val_build")));// 7
				vecCol.add(correctNull(rs.getString("esti_val_force")));// 8
				vecCol.add(correctNull(rs.getString("remark_note")));// 9
				String valuation_dt = correctNull(rs.getString("valuation_dt"));
				if (valuation_dt.equalsIgnoreCase("01/01/1900")) {
					valuation_dt = "";
				}
				vecCol.add(valuation_dt);// 10
				vecCol.add(correctNull(rs.getString("reference_rt")));// 11
				vecCol.add(correctNull(rs.getString("guidance_rt")));// 12
				vecCol.add(correctNull(rs.getString("send_date")));// 13
				vecCol.add(correctNull(rs.getString("valuers_code")));// 14
				vecCol.add(correctNull(rs.getString("valuername")));// 15
				vecCol.add(correctNull(rs.getString("branchpanel")));// 16
				vecCol.add(correctNull(rs.getString("VALUER_CATEGORYCODE")));// 17
				vecCol.add(correctNull(rs.getString("SEC_SECURITYID")));// 18
				if (!correctNull(rs.getString("SEC_SECURITYID")).equalsIgnoreCase("")) {
					if (rs1 != null) {
						rs1.close();
					}
					strQuery = SQLParser.getSqlQuery("sel_proposedasset_sec^"+ strApplicationNo+"^"+correctNull(rs.getString("SEC_SECURITYID")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						Prop_Type="";
						//vecCol.add(correctNull(rs1.getString("CUS_SEC_CLASSIFICATION")));// 19
						if(!correctNull(rs1.getString("CUS_SEC_CLASSIFICATION")).equalsIgnoreCase("")){
							if (rs2 != null) {
								rs2.close();
							}
							rs2 = DBUtils.executeLAPSQuery("selstaticdata_securitytype_sel^"+correctNull(rs1.getString("CUS_SEC_CLASSIFICATION")) );
							if (rs2.next()) {
								vecCol.add(correctNull(rs2.getString("SEC_NAME")));//19
							}
						}else{vecCol.add("");}
						if(correctNull(rs1.getString("SEC_PROPERTYTYPE")).equalsIgnoreCase("L")){Prop_Type="Land";}
						else if(correctNull(rs1.getString("SEC_PROPERTYTYPE")).equalsIgnoreCase("F")){Prop_Type="Flat / Apartment";}
						else if(correctNull(rs1.getString("SEC_PROPERTYTYPE")).equalsIgnoreCase("H")){Prop_Type="House / Building";}
						else{Prop_Type="";}
						vecCol.add(Prop_Type);// 20
						vecCol.add(correctNull(rs1.getString("SEC_TOTALAREA")));// 21
						vecCol.add(correctNull(rs1.getString("SEC_EXTENTOFBUILDING")));// 22
						vecCol.add(correctNull(rs1.getString("sec_salevalue")));// 23
						vecCol.add(correctNull(rs1.getString("CUS_SEC_VALUERCODE")));// 24
						vecCol.add(correctNull(rs1.getString("CUS_SEC_GOVT_VALUER")));// 25
						
					}
				}else{
					vecCol.add("");
					vecCol.add("");
					vecCol.add("");
					vecCol.add("");
					vecCol.add("");
					vecCol.add("");
					vecCol.add("");
				}
				vecRow.add(vecCol);

				hshRecord.put("strVehValuationDate", valuation_dt);
				hshRecord.put("strVehMarketValue", nf.format(Double
						.parseDouble(Helper.correctDouble(rs
								.getString("mark_val_land")))));
				hshRecord.put("strVehValuerName", correctNull(rs
						.getString("valuername")));
			}

			hshRecord.put("vecRow", vecRow);
			
			
			if (rs != null) {
				rs.close();
			}
			/*
			 * strQuery=SQLParser.getSqlQuery("sel_retailcomments^"+
			 * Helper.correctInt
			 * ((String)hshValues.get("strSecId"))+"^securityLegalOpinion"); rs
			 * = DBUtils.executeQuery(strQuery); if (rs.next()) {
			 * hshRecord.put("cmtvalulation_comments",
			 * Helper.CLOBToString(rs.getClob("cmt_comments")));
			 * hshRecord.put("cmtvalulation_cmtinter",
			 * Helper.CLOBToString(rs.getClob("cmt_intercomments"))); }
			 */

			double dblTotal = 0.00;
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_tl_repayschedule^"
					+ strApplicationNo + "^1");
			rs = DBUtils.executeQuery(strQuery);
			ArrayList arrRepaySchedule = new ArrayList();
			while (rs.next()) {
				arrayCol = new ArrayList();
				arrayCol.add(correctNull(rs.getString("TL_FEQUENCY")));
				arrayCol.add(correctNull(rs.getString("TL_NOOFINST")));
				arrayCol.add(correctNull(rs.getString("TL_TOTALAMT")));
				arrayCol.add(correctNull(rs.getString("TL_INSTAMT")));
				dblTotal = dblTotal
						+ Double.parseDouble(Helper.correctDouble((String) rs
								.getString("TL_TOTALAMT")));
				arrRepaySchedule.add(arrayCol);
			}
			hshRecord.put("arrRepaySchedule", arrRepaySchedule);
			hshRecord.put("RepaySheduleTotal", nf.format(dblTotal));
			if (rs != null)
				rs.close();
			rs = DBUtils
					.executeLAPSQuery("selloan_details^" + strApplicationNo);
			if (rs.next()) {
				staffproduct = correctNull(rs.getString("prd_staffprd"));
				hshRecord.put("staffproduct", correctNull(rs
						.getString("prd_staffprd")));

				// Whether verfied with Central Fraud Registry ?

				hshRecord.put("staffproduct", correctNull(rs
						.getString("prd_staffprd")));
				hshRecord.put("VerifyWithCFR", Helper.correctNull((String) rs
						.getString("LOAN_CFR_VERIFIED")));
				if (Helper.correctNull(
						(String) rs.getString("LOAN_CFR_VERIFIED"))
						.equalsIgnoreCase("Y")) {
					strVerifyWithCFR = "YES";

				} else if (Helper.correctNull(
						(String) rs.getString("LOAN_CFR_VERIFIED"))
						.equalsIgnoreCase("N")) {
					strVerifyWithCFR = "NO";
				}

				hshRecord.put("NamApprCFR", Helper.correctNull((String) rs
						.getString("LOAN_CFR_BORNAME")));
				if (Helper.correctNull(
						(String) rs.getString("LOAN_CFR_BORNAME"))
						.equalsIgnoreCase("Y")) {
					strNamApprCFR = "YES";
				} else {
					strNamApprCFR = "NO";
				}
				hshRecord.put("RefNoCFR", Helper.correctNull((String) rs
						.getString("LOAN_CFR_DEV_RENFO")));

				hshRecord.put("STATUS_VERIFIED", Helper.correctNull((String) rs
						.getString("STATUS_VERIFIED")));

				if (Helper
						.correctNull((String) rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("A")) {
					strStatusVer = "APPROVED";
				} else if (Helper.correctNull(
						(String) rs.getString("STATUS_VERIFIED"))
						.equalsIgnoreCase("R")) {
					strStatusVer = "REJECTED";
				}

				hshRecord.put("LOAN_APPR_DATE", Helper.correctNull((String) rs
						.getString("LOAN_APPR_DATE")));
				// hshRecord.put("LOAN_USERID1",Helper.correctNull((String)rs.getString("LOAN_USERID1")));
				ApprUserid = Helper.correctNull((String) rs
						.getString("LOAN_USERID1"));

				if (ApprUserid != "") {
					if (rs1 != null) {
						rs1.close();
					}

					strQuery = SQLParser.getSqlQuery("selectusername^"
							+ ApprUserid);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshRecord.put("appuserid", correctNull((String) rs1
								.getString("name")));
					}
				}

				hshRecord.put("strStatusVer", strStatusVer);
				hshRecord.put("strVerifyWithCFR", strVerifyWithCFR);
				hshRecord.put("strNamApprCFR", strNamApprCFR);

			}

			if (staffproduct.equalsIgnoreCase("Y")) {
				hshRecord.put("WhetherEMI", "No");
				if (rs1 != null)
					rs1.close();
				ArrayList arrROI = new ArrayList();
				rs = DBUtils.executeLAPSQuery("rulechoice^fixed^" + strPrdcode+"^O");
				while (rs.next()) {
					rs1 = DBUtils.executeLAPSQuery("ruleresult^"
							+ Helper.correctInt(rs.getString("prdint_sno")));
					while (rs1.next()) {
						arrayCol = new ArrayList();
						arrayCol.add(correctNull(rs
								.getString("prd_amtrangefrom")));
						arrayCol
								.add(correctNull(rs.getString("prd_amtrangeto")));
						arrayCol.add(nf.format(Double.parseDouble(Helper
								.correctDouble(rs1.getString("prd_baserate")))
								+ Double.parseDouble(Helper.correctDouble(rs1
										.getString("prd_adjust")))));
						arrROI.add(arrayCol);
					}

				}
				hshRecord.put("arrROI", arrROI);

			}
			if (rs != null)
				rs.close();
			/*
			 * double HalfMonthlyIncome=0.00; double
			 * DeductionofMonthlysalary=0.00; double Amountreq=0.00; int
			 * Repaymentperiod=0,Holidayperiod=0; double
			 * ProposedLoancommitment=0.00; double LatestDeductions=0.00; double
			 * Totalloancommitment=0.00; double Percentageofloancommitment=0.00;
			 * double Percentagemonthlydeduction=0.00; int tenor_Staff_house=0;
			 * String staff_under=""; if(!strappId.equals("")) {
			 * rs=DBUtils.executeLAPSQuery("pergetIncome1^"+strappId);
			 * if(rs.next()) {
			 * MonthlyIncome=Double.parseDouble(Helper.correctDouble
			 * ((String)rs.getString("perinc_monsalary")));
			 * Monthlydeduction=Double
			 * .parseDouble(Helper.correctDouble((String)rs
			 * .getString("perinc_otherdeduction"))); }
			 * HalfMonthlyIncome=MonthlyIncome/2;
			 * DeductionofMonthlysalary=((Monthlydeduction/MonthlyIncome)100);
			 * if(rs != null) {rs.close();}
			 * rs=DBUtils.executeLAPSQuery("selreqamtandinstall^"
			 * +strApplicationNo); if(rs.next()) {
			 * Amountreq=Double.parseDouble(Helper
			 * .correctDouble((String)rs.getString("loan_recmdamt")));
			 * Repaymentperiod
			 * =Integer.parseInt(Helper.correctInt((String)rs.getString
			 * ("loan_reqterms")));
			 * Holidayperiod=Integer.parseInt(Helper.correctInt
			 * ((String)rs.getString("loan_noofinstallment")));
			 * Repaymentperiod=Repaymentperiod-Holidayperiod; }
			 * ProposedLoancommitment=(Amountreq/Repaymentperiod); strQuery =
			 * SQLParser.getSqlQuery("sel_staffprd^"+strPrdcode); rs
			 * =DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * staff_under=correctNull((String)rs.getString("prd_staffprd"));
			 * if(staff_under.equalsIgnoreCase("Y")){
			 * tenor_Staff_house=Integer.parseInt
			 * (Helper.correctInt((String)rs.getString
			 * ("PRD_STAFF_MAXTERM_PRIN"))); }else{ tenor_Staff_house=1; } }
			 * if(staffproduct
			 * .equalsIgnoreCase("Y")&&(strProductType.equalsIgnoreCase("pH")||
			 * strProductType.equalsIgnoreCase("pA"))) {
			 * tenor_Staff_house=tenor_Staff_house-Holidayperiod;
			 * ProposedLoancommitment=(Amountreq/tenor_Staff_house); }
			 * LatestDeductions=((ProposedLoancommitment/MonthlyIncome)100);
			 * Totalloancommitment=Monthlydeduction+ProposedLoancommitment;
			 * Percentageofloancommitment
			 * =((Totalloancommitment/MonthlyIncome)100);
			 * Percentagemonthlydeduction=((Monthlydeduction/MonthlyIncome)100);
			 * } hshRecord.put("MonthlyIncome" ,nf.format(MonthlyIncome));//a
			 * hshRecord.put("HalfMonthlyIncome"
			 * ,nf.format(HalfMonthlyIncome));//b
			 * hshRecord.put("Monthlydeduction"
			 * ,nf.format(Monthlydeduction));//c
			 * hshRecord.put("Percentagemonthlydeduction"
			 * ,nf.format(Percentagemonthlydeduction));//d
			 * hshRecord.put("ProposedLoancommitment"
			 * ,nf.format(Math.round(ProposedLoancommitment)));//e
			 * hshRecord.put("LatestDeductions"
			 * ,nf.format(LatestDeductions));//f
			 * hshRecord.put("Totalloancommitment"
			 * ,nf.format(Totalloancommitment));//g
			 * hshRecord.put("Percentageofloancommitment"
			 * ,nf.format(Percentageofloancommitment));//h
			 */hshRecord.put("staffproduct", staffproduct);
			hshRecord.put("strProductType", strProductType);
			hshRecord.put("strNewEmployment", strNewEmployment);

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_allcomments^"
					+ strApplicationNo + "^repaycomment");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("repaycomments", Helper.CLOBToString(rs
						.getClob("fin_comments")));
				hshRecord.put("stagewiserealse",Helper.correctNull((String)rs.getString("FIN_STAGEWISE_RELEASE")));
			}

			// Get Primary Security Comments
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^"
					+ strApplicationNo + "^Retailprimarysec");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("cmt_retailprimarycomments", Helper
						.CLOBToString(rs.getClob("cmt_comments")));
			}
			// Get Collateral Security Comments
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^"
					+ strApplicationNo + "^RetailCollateralsec");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("cmt_retailcollateralcomments", Helper
						.CLOBToString(rs.getClob("cmt_comments")));
			}

			if (!strAppType.equalsIgnoreCase("Postsanction")) {
				if (strEmpStatus.equalsIgnoreCase("4")) {
					hshFinValues = new HashMap();
					hshFinValues.put("appno", strApplicationNo);
					hshFinValues = dscrobj.getPrintValues(hshFinValues);
					hshRecord.put("DSCRhshFinValues", hshFinValues);

					hshReqValues.put("appno", strApplicationNo);
					hshReqValues.put("hidapplicantid", strappId);
					hshReqValues.put("sessionModuleType", "RET");
					hshFinValues = (HashMap) EJBInvoker.executeStateLess(
							"comproposal", hshReqValues, "getDSS");
					hshRecord.put("hshDSSData", hshFinValues);
				}
			}

			ExecutiveBean exbean = new ExecutiveBean();
			hshFinValues = new HashMap();
			hshFinValues.put("appno", strApplicationNo);
			hshFinValues = exbean.getDelegationData(hshFinValues);
			hshRecord.put("arrDelRow", (ArrayList) hshFinValues.get("arrRow"));
			
			arrRow=new ArrayList();
			ArrayList arrCol = new ArrayList();
			if(rs1!=null){rs1.close();}
			strQuery=SQLParser.getSqlQuery("sel_approvedby_appno^"+strApplicationNo);
			rs1=DBUtils.executeQuery(strQuery);
			while(rs1.next())
			{
				arrCol=new ArrayList();
				arrCol.add(correctNull(rs1.getString("USR_FNAME")));
				arrCol.add(correctNull(rs1.getString("USER_DESIGNATION")));
				arrCol.add(correctNull(rs1.getString("COM_DATE")));
				arrCol.add(correctNull(rs1.getString("COM_DETAILS")));
				arrRow.add(arrCol);
			}
			
			hshRecord.put("arrPropFlow",arrRow);

			if (!strAppType.equalsIgnoreCase("Postsanction")) {
				arrRow = new ArrayList();
				strQuery = SQLParser
						.getSqlQuery("rbiguidelines_restr_processnote^"
								+ strApplicationNo);
				rs = DBUtils.executeQuery(strQuery);

				while (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull(rs
							.getString("restr_rbi_slno")));
					arrCol.add(Helper.correctNull(rs
							.getString("restr_rbi_guidelines")));
					arrCol.add(Helper.correctNull(rs
							.getString("restr_rbi_compliance")));
					arrCol.add(Helper.correctNull(rs
							.getString("restr_rbi_comments")));
					arrCol.add(Helper.correctNull(rs
							.getString("restr_pagetype")));
					arrRow.add(arrCol);
				}

				hshRecord.put("arrRBIGuidliness", arrRow);
			}

			ArrayList arrOutRow = new ArrayList();
			ArrayList arrOutCol = new ArrayList();
			ArrayList arrOutRowPro = new ArrayList();
			ArrayList arrfacwisecol = new ArrayList();
			ArrayList arrOutColPro = new ArrayList();
			int k = 0, j = 0;
			String strSecid = "", strPrdDesc = "";
			if (rs2 != null) {
				rs2.close();
			}

			rs2 = DBUtils.executeLAPSQuery("sel_retProductDesc^" + strPrdcode);

			if (rs2.next()) {
				strPrdDesc = Helper.correctNull(rs2.getString("prd_desc"));
			}
			hshRecord.put("strPrdDesc", strPrdDesc);
			if (rs != null) {
				rs.close();
			}
			k = 0;
			j = 0;
			rs = DBUtils
					.executeLAPSQuery("secExisFacilityDetailsView_facwise_ret^"
							+ strApplicationNo + "^" + "P^A");
			while (rs.next()) {
				arrOutCol = new ArrayList();
				if (correctNull(rs.getString("app_sec_securitytype"))
						.equalsIgnoreCase("1")) {
					if (k == 0) {
						k++;
						arrOutCol.add(strPrdDesc);// 0
						arrOutCol.add("");// 1
						arrOutCol.add(""); // 2
						arrOutCol.add("");// 3
						arrOutRow.add(arrOutCol);
					}
					arrOutCol = new ArrayList();
					arrOutCol.add(correctNull(Helper.CLOBToString(rs
							.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 2
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 3
					arrOutCol.add(correctNull(rs.getString("CUS_SEC_ID")));// 4
					if (strSecid.equalsIgnoreCase("")) {
						strSecid = "'"
								+ Helper.correctNull((String) rs
										.getString("CUS_SEC_ID")) + "'";
					} else {
						strSecid = strSecid
								+ ",'"
								+ Helper.correctNull((String) rs
										.getString("CUS_SEC_ID")) + "'";
					}
					arrOutRow.add(arrOutCol);
				}
				if (correctNull(rs.getString("app_sec_securitytype"))
						.equalsIgnoreCase("2")) {
					arrOutCol = new ArrayList();
					arrOutCol.add(correctNull(Helper.CLOBToString(rs
							.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
					arrOutCol.add(correctNull(rs
							.getString("app_sec_securityvalue"))); // 2
					arrOutCol.add(correctNull(rs
							.getString("cus_sec_valuation_date")));// 3
					arrOutCol.add(correctNull(rs.getString("CUS_SEC_ID")));// 4
					if (strSecid.equalsIgnoreCase("")) {
						strSecid = "'"
								+ Helper.correctNull((String) rs
										.getString("CUS_SEC_ID")) + "'";
					} else {
						strSecid = strSecid
								+ ",'"
								+ Helper.correctNull((String) rs
										.getString("CUS_SEC_ID")) + "'";
					}
					arrOutRowPro.add(arrOutCol);
				}
			}
			hshRecord.put("arrRowPri", arrOutRow);
			hshRecord.put("arrRowColl", arrOutRowPro);
			if (strPrdtype.equalsIgnoreCase("OD")
					&& !strProductType.equalsIgnoreCase("pV")) {
				hshRecord.put("WhetherEMI", "No");
				hshRecord.put("strPeriodicity", "Not Applicable");
				// hshRecord.put("loan_noofinstallment","Not Applicable");
			}

			if (rs != null) {
				rs.close();
			}

			arrOutRow = new ArrayList();
			String strCityDesc = "", strStateDesc = "", strDistcode = "", strDistDesc = "", strType = "";
			rs = DBUtils.executeLAPSQuery("comapp_division_details_sel^"
					+ strappId);
			while (rs.next()) {
				String strAadharno = "";
				if (correctNull((String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("O"))
					strType = "Share Holders";
				else if (correctNull(
						(String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("D"))
					strType = "Directors";
				else if (correctNull(
						(String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("SP"))
					strType = "Sole Proprietor";
				else if (correctNull(
						(String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("PT"))
					strType = "Partner";
				else if (correctNull(
						(String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("OT"))
					strType = "Others";
				else if (correctNull(
						(String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("K"))
					strType = "Karta";
				else if (correctNull(
						(String) rs.getString("comapp_divisiontype"))
						.equalsIgnoreCase("PA"))
					strType = "Power of Attorney";
				else
					strType = correctNull((String) rs
							.getString("comapp_divisiontype"));

				String DIVISIONSUBTYPE = Helper.correctNull((String) rs
						.getString("COMAPP_DIVISIONSUBTYPE"));

				if ((!DIVISIONSUBTYPE.equals("005"))
						&& (!strType.equals("Others"))) {

					arrOutCol = new ArrayList();
					arrOutCol.add(strType);// 0
					arrOutCol.add(correctNull((String) rs
							.getString("comapp_div_name")));// 1
					arrOutCol.add(correctNull((String) rs
							.getString("comapp_div_address")));// 2
					String strCitycode = Helper.correctNull((String) rs
							.getString("comapp_div_city"));
					if (!strCitycode.equalsIgnoreCase("")) {
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_citynamebycode^"
								+ strCitycode);
						if (rs1.next()) {

							strCityDesc = Helper.correctNull((String) rs1
									.getString("city_name"));
						}
					}
					arrOutCol.add(strCityDesc);// 3
					String strStatecode = Helper.correctNull((String) rs
							.getString("comapp_div_state"));
					if (!strStatecode.equalsIgnoreCase("")) {
						if (rs2 != null) {
							rs2.close();
						}
						rs2 = DBUtils.executeLAPSQuery("sel_statenamebycode^"
								+ strStatecode);
						if (rs2.next()) {
							strStateDesc = Helper.correctNull((String) rs2
									.getString("state_name"));
						}
					}
					arrOutCol.add(strStateDesc);// 4
					arrOutCol.add(correctNull((String) rs
							.getString("comapp_div_pin")));// 5
					strDistcode = Helper.correctNull((String) rs
							.getString("comapp_div_dist"));

					if (!strDistcode.equalsIgnoreCase("")) {
						if (rs3 != null) {
							rs3.close();
						}
						rs3 = DBUtils.executeLAPSQuery("sel_distnamebycode^"
								+ strDistcode);
						if (rs3.next()) {

							strDistDesc = Helper.correctNull((String) rs3
									.getString("district_desc"));// 15
						}
					}
					arrOutCol.add(strDistDesc);// 6

					if (!correctNull((String) rs.getString("comapp_div_appid"))
							.equalsIgnoreCase("")) {
						rs3 = DBUtils
								.executeLAPSQuery("selappincomekycdetails^"
										+ correctNull((String) rs
												.getString("comapp_div_appid")));
						if (rs3.next()) {
							arrOutCol.add(Helper.converAmount(nf.format(Double
									.parseDouble(Helper.correctDouble(rs3
											.getString("perinc_yearsalary")))),
									strAmountForm));// 7

							if (rs2 != null) {
								rs2.close();
							}
							strQuery1 = SQLParser
									.getSqlQuery("getstaticdatavaldispcorporatenew^70^"
											+ Helper
													.correctNull(rs3
															.getString("kyc_occupationcode")));
							rs2 = DBUtils.executeQuery(strQuery1);
							if (rs2.next()) {
								arrOutCol.add(Helper.correctNull((String) rs2
										.getString("stat_data_desc1")));// 8
							} else {
								arrOutCol.add("");// 8
							}

							if (rs2 != null) {
								rs2.close();
							}
							strQuery1 = SQLParser
									.getSqlQuery("sel_cbsstaticdescbycode^2^"
											+ Helper
													.correctNull(rs3
															.getString("perapp_constitution")));
							rs2 = DBUtils.executeQuery(strQuery1);
							if (rs2.next()) {
								arrOutCol.add(Helper.correctNull((String) rs2
										.getString("cbs_static_data_desc")));// 9
							} else {
								arrOutCol.add("");// 9
							}
							arrOutCol.add(nf.format(rs3
									.getDouble("perapp_networth")));// 10
							arrOutCol.add(Helper.correctNull(rs3
									.getString("perapp_dob")));// 11
							arrOutCol
									.add(Helper
											.converAmount(
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs3
																					.getString("perinc_year1_income")))),
													strAmountForm));// 12
							arrOutCol.add(Helper.correctNull(rs3
									.getString("perapp_employment")));// 13
							arrOutCol.add(Helper.correctNull(rs3
									.getString("con_mobile")));// 14
							arrOutCol.add(Helper.correctNull(rs3
									.getString("con_email")));// 15
							arrOutCol.add(Helper.correctNull(rs3
									.getString("perapp_panno")));// 16
							strAadharno = Helper.correctNull(rs3
									.getString("perapp_aadhaar"));// 17
						} else {
							arrOutCol.add("");// 7
							arrOutCol.add("");// 8
							arrOutCol.add("");// 9
							arrOutCol.add("");// 10
							arrOutCol.add("");// 11
							arrOutCol.add("");// 12
							arrOutCol.add("");// 13
							arrOutCol.add("");// 14
							arrOutCol.add("");// 15
							arrOutCol.add("");// 16
						}
					} else {
						arrOutCol.add("");// 7
						arrOutCol.add("");// 8
						arrOutCol.add("");// 9
						arrOutCol.add("");// 10
						arrOutCol.add("");// 11
						arrOutCol.add("");// 12
						arrOutCol.add("");// 13
						arrOutCol.add("");// 14
						arrOutCol.add("");// 15
						arrOutCol.add("");// 16
					}

					arrOutCol.add(correctNull((String) rs
							.getString("comapp_div_phone")));// 17
					arrOutCol.add(strAadharno);// 18
					arrOutRow.add(arrOutCol);
				}
			}

			hshRecord.put("arrGroupInfo", arrOutRow);

			if (rs != null)
				rs.close();
			arrOutRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("pergetapplicantdetails^"
					+ strApplicationNo + "^" + strappId);
			while (rs.next()) {
				arrOutCol = new ArrayList();
				arrOutCol.add(Helper
						.correctNull((rs.getString("perapp_fname"))));
				arrOutCol.add(Helper
						.correctNull((rs.getString("perapp_panno"))));
				arrOutCol.add(Helper.correctNull((rs.getString("con_mobile"))));
				arrOutCol.add(Helper.correctNull((rs.getString("con_email"))));
				arrOutCol.add(Helper.correctNull((rs.getString("demo_type"))));
				arrOutCol.add(Helper.correctNull((rs
						.getString("perapp_aadhaar"))));
				arrOutRow.add(arrOutCol);
			}
			hshRecord.put("arrAppBasicInfo", arrOutRow);

			if (strAppType.equalsIgnoreCase("Postsanction")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sel_post_sanction_applications^"
						+ strApplicationNo);
				if (rs.next()) {
					hshRecord.put("strpostsancterms", Helper.correctNull(rs
							.getString("ps_modify_terms")));
				}
			}

			ArrayList arrCoAppLiabRow = new ArrayList();
			strQuery = SQLParser.getSqlQuery("selcoapplicantotherbankfac^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrOthrbnkCol = new ArrayList();
				bankname = Helper.correctNull(rs.getString("perbank_bnkname"));
				if (!(bankname.equalsIgnoreCase(""))) {
					strQuery3 = SQLParser
							.getSqlQuery("selbankname^" + bankname);
					rs3 = DBUtils.executeQuery(strQuery3);
					if (rs3.next()) {
						bankname = Helper.correctNull(rs3
								.getString("stat_data_desc1"));
					}
				}
				arrOthrbnkCol.add(bankname);// 0
				strFactype = Helper.correctNull(rs.getString("perbank_type"));
				if (strFactype.equalsIgnoreCase("1"))
					arrOthrbnkCol.add("Working Capital");// 1
				else if (strFactype.equalsIgnoreCase("2"))
					arrOthrbnkCol.add("Term Loan");// 1
				else
					arrOthrbnkCol.add("");// 1
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_limit")));// 2
				arrOthrbnkCol.add(Helper
						.correctNull(rs.getString("perbank_os")));// 3
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_intrate")));// 4
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_monthly_ins")));// 5
				arrOthrbnkCol.add(Helper.correctNull(rs
						.getString("perbank_duedate")));// 6
				arrOthrbnkCol.add(Helper.replaceForJavaScriptString(Helper
						.CLOBToString(rs.getClob("perbank_arrears"))));// 7
				arrCoAppLiabRow.add(arrOthrbnkCol);
			}
			hshRecord.put("arrCoAppLiabRow", arrCoAppLiabRow);

			// To get the inward proposed amount
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_inward_proposed_values^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("INWARD_TERMLOANAMT", Helper
						.correctDouble((String) rs
								.getString("INWARD_TERMLOANAMT")));
				if (Helper.correctDouble(
						(String) rs.getString("INWARD_SCHEMEDESC"))
						.equalsIgnoreCase("t"))
					hshRecord.put("INWARD_SCHEMEDESC", "Term Loan");
				else if (Helper.correctDouble(
						(String) rs.getString("INWARD_SCHEMEDESC"))
						.equalsIgnoreCase("d"))
					hshRecord.put("INWARD_SCHEMEDESC", "DPN");
				else if (Helper.correctDouble(
						(String) rs.getString("INWARD_SCHEMEDESC"))
						.equalsIgnoreCase("o"))
					hshRecord.put("INWARD_SCHEMEDESC", "Overdraft");
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_vehsecuritydetails^"
					+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				if (Helper.correctNull(rs.getString("app_sec_securitytype"))
						.equalsIgnoreCase("1"))
					hshRecord.put("strVehSecType", "Prime");
				else
					hshRecord.put("strVehSecType", "Collateral");
			}

			if (rs != null) {
				rs.close();
			}
			arrRow = new ArrayList();
			rs = DBUtils.executeLAPSQuery("selgolddetails^" + strApplicationNo);
			double dbESTRATE = 0.00;
			double dbESTRATE1 = 0.00;
			double dbNetWeight = 0.00;
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull((String) rs.getString("AGR_ARTCATID")));
				arrCol.add(correctNull((String) rs.getString("AGR_ARTNO")));
				arrCol.add(correctNull((String) rs.getString("AGR_ARTDESC")));
				arrCol
						.add(correctNull((String) rs
								.getString("AGR_ARTGROSSWT")));
				arrCol.add(correctNull((String) rs.getString("AGR_ARTNETWT")));
				arrCol
						.add(correctNull((String) rs
								.getString("AGR_ARTQTYTOUCH")));
				arrCol
						.add(correctNull((String) rs
								.getString("AGR_ARTMKTRATE")));
				arrCol.add(correctNull((String) rs.getString("AGR_ARTRATE")));
				arrCol.add(correctNull((String) rs.getString("AGR_ESTRATE")));
				arrCol.add(correctNull((String) rs.getString("agr_quantity")));
				arrCol.add(correctNull((String) rs.getString("AGR_BANKVALUE")));
				arrCol.add(correctNull((String) rs.getString("agr_grsno")));
				arrCol.add(correctNull((String) rs.getString("agr_secid")));
				arrCol
						.add(correctNull((String) rs
								.getString("agr_articletype")));
				arrCol.add(correctNull((String) rs.getString("agr_netvalue")));
				dbESTRATE = Double.parseDouble(Helper.correctDouble((String) rs
						.getString("AGR_ESTRATE")));
				dbESTRATE1 = dbESTRATE1 + dbESTRATE;
				dbNetWeight = dbNetWeight
						+ Double.parseDouble(Helper.correctDouble((String) rs
								.getString("AGR_ARTNETWT")));
				arrRow.add(arrCol);
			}

			hshRecord.put("arrGoldRow", arrRow);

			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_appraiserdet^"
					+ strApplicationNo);
			if (rs.next()) {
				hshRecord.put("strAppraiserName", Helper.correctNull(rs
						.getString("ja_name")));
				hshRecord.put("strAppraisalDoneon", Helper.correctNull(rs
						.getString("ja_appraiseon")));
				hshRecord.put("strAppraiserComments", Helper.CLOBToString(rs
						.getClob("ja_comments")));
			}

			String strAgriType = "", strLoanType = "";
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("selectagriassessment^"
					+ strApplicationNo);
			if (rs.next()) {
				strAgriType = Helper
						.correctNull(rs.getString("agr_typeofagri"));
				strLoanType = Helper
						.correctNull(rs.getString("agr_typeofloan"));
				hshRecord.put("strAgriType", strAgriType);
				hshRecord.put("strAgriLoanType", strLoanType);
				hshRecord.put("strAgriTotalAmt", Helper.correctDouble(rs
						.getString("agr_totalamt")));
				hshRecord.put("strAgriMarginVal", Helper.correctDouble(rs
						.getString("agr_margin_amt")));
				hshRecord.put("strAgriEligAmt", Helper.correctDouble(rs
						.getString("agr_eligible_amt")));
			}
			arrRow = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selagriassessmentvalues^"
					+ strApplicationNo + "^" + strAgriType + "^" + strLoanType);
			while (rs.next()) {
				if (!(Helper.correctNull(rs.getString("agr_activity"))
						.equalsIgnoreCase("") && Double.parseDouble(Helper
						.correctDouble(rs.getString("agr_unitcost"))) == 0)) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("agr_sno")));
					arrCol.add(Helper.correctDouble(rs.getString("agr_area")));
					arrCol
							.add(Helper.correctNull(rs
									.getString("agr_activity")));
					arrCol.add(Helper.correctDouble(rs
							.getString("agr_unitcost")));
					arrCol.add(Helper.correctDouble(rs
							.getString("agr_totalamt")));
					arrRow.add(arrCol);
				}
			}
			hshRecord.put("arrGoldAgri", arrRow);

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("selgoldratemaster^Y");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("dblRecurrexpMargin", Helper
						.formatDoubleValue(100 - rs
								.getDouble("grm_recurrexpmargin")));
			}

			arrRow = new ArrayList();
			ArrayList arrDepdetCol = new ArrayList();
			ArrayList arrDepdet = new ArrayList();
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_loanagainstdeposit^"
					+ strApplicationNo);
			while (rs.next()) {

				arrDepdetCol = new ArrayList();
				String strOrgName = "";
				arrDepdetCol.add(Helper.correctNull(rs.getString(1)));
				String strOrgCode1 = Helper.correctNull(rs.getString(2));
				if (!strOrgCode1.equalsIgnoreCase("")) {
					strQuery1 = SQLParser.getSqlQuery("selectorgname^"
							+ strOrgCode1);
					rs2 = DBUtils.executeQuery(strQuery1);
					if (rs2.next()) {
						strOrgName = Helper.correctNull(rs2
								.getString("org_name"));
					}
				}
				arrDepdetCol.add(strOrgName);
				arrDepdetCol.add(Helper.correctNull(rs.getString(3)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(4)));

				String date1 = Helper.correctNull(rs.getString(5));
				if (date1.equalsIgnoreCase("01/01/1900")) {
					date1 = "";
				}
				arrDepdetCol.add(date1);
				arrDepdetCol.add(Helper.correctNull(rs.getString(6)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(7)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(8)));
				date1 = Helper.correctNull(rs.getString(9));
				if (date1.equalsIgnoreCase("01/01/1900")) {
					date1 = "";
				}
				arrDepdetCol.add(date1);
				arrDepdetCol.add(Helper.correctNull(rs.getString(10)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(11)));
				date1 = Helper.correctNull(rs.getString(12));
				if (date1.equalsIgnoreCase("01/01/1900")) {
					date1 = "";
				}
				arrDepdetCol.add(date1);
				arrDepdetCol.add(Helper.correctNull(rs.getString(13)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(14)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(15)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(16)));
				arrDepdetCol.add(Helper.correctNull(rs.getString(17)));
				arrDepdet.add(arrDepdetCol);
			}
			hshRecord.put("arrDepdet", arrDepdet);
			log.info("<<<<<<<<<<<=============arrDepdet=============>>>>>>>>>>>>>>"+arrDepdet);
			// start=========
			if (rs != null) {
				rs.close();
			}
			ArrayList arrdefCol = new ArrayList();
			ArrayList arrdefRow = new ArrayList();
			String strDemo = "", strDemo1 = "";
			String str_aplnt_fname = "", strCategory_1 = "",strCategory_2 = "",strCategory_3 = "";
			strQuery = SQLParser.getSqlQuery("sel_defaulter_list_note^"+ strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrdefCol = new ArrayList();
				arrdefCol.add(Helper.correctNull((String) rs.getString("name"))); // 0
				strDemo = Helper.correctNull((String) rs.getString("demotype"));
				if (strDemo.equalsIgnoreCase("a")) {
					strDemo1 = "Applicant";
				} else if (strDemo.equalsIgnoreCase("c")) {
					strDemo1 = "Joint Applicant";
				} else if (strDemo.equalsIgnoreCase("g")) {
					strDemo1 = "Guarantor";
				} else if (strDemo.equalsIgnoreCase("o")) {
					strDemo1 = "Co-Obligant";
				} else {
					strDemo1 = "";
				}
				arrdefCol.add(strDemo1); // 1
				if (correctNull(rs.getString("DEF_RBIDEFIS")).trim().equalsIgnoreCase("Y")) {
					strCategory_1 = "Yes";

				} else {
					strCategory_1 = "No";
				}
				arrdefCol.add(Helper.correctNull(strCategory_1));// 2
				arrdefCol.add(Helper.correctNull((String) rs.getString("ASONRBIDATE"))); // 3
				arrdefCol.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("DEF_RBIDEFCOMM")))); // 4

				if (correctNull(rs.getString("DEF_ECGSEPIS")).trim().equalsIgnoreCase("Y")) {
					strCategory_2 = "Yes";

				} else {
					strCategory_2 = "No";
				}
				arrdefCol.add(Helper.correctNull(strCategory_2));// 5
				arrdefCol.add(Helper.correctNull((String) rs.getString("asonECGCIdate"))); // 6
				arrdefCol.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("DEF_ECGSEPCOMM")))); // 7
				
				if (correctNull(rs.getString("DEF_SUITFILED")).trim().equalsIgnoreCase("Y")) {
					strCategory_3 = "Yes";

				} else {
					strCategory_3 = "No";
				}
				arrdefCol.add(Helper.correctNull(strCategory_3));// 8
				arrdefCol.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("DEF_SUITFILEDCOMM")))); // 9

				arrdefRow.add(arrdefCol);
			}
			hshRecord.put("arrdefRow", arrdefRow);
			//end==================
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("selborrowerdet_company^"
					+ strappId);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				if (Helper.correctNull(
						(String) rs.getString("cominfo_ownership_type"))
						.equalsIgnoreCase("004")) {
					hshRecord.put("companyinfo_typeofliability",
							correctNull(Helper.CLOBToString(rs
									.getClob("companyinfo_typeofliability"))));
				}
			}

			if (rs != null)
				rs.close();

			java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
			jtn.setMaximumFractionDigits(2);
			jtn.setMinimumFractionDigits(2);
			jtn.setGroupingUsed(false);

			strQuery = SQLParser.getSqlQuery("sel_per_bir^" + strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			String bir_flag = "";
			if (rs.next()) {
				hshRecord.put("bir_flag", Helper.correctNull(rs
						.getString("bir_flag")));
				bir_flag = Helper.correctNull(rs.getString("bir_flag"));

				if (Helper.correctNull((String) rs.getString("bir_flag"))
						.equalsIgnoreCase("Y")) {

					hshRecord.put("bir_flag1", "Yes");
					hshRecord.put("bir_submitteddate", Helper.correctNull(rs
							.getString("bir_submitteddate")));
					hshRecord.put("bir_receiptdate", Helper.correctNull(rs
							.getString("bir_receiptdate")));
					hshRecord.put("bir_charges", jtn.format(Double
							.parseDouble(Helper.correctDouble(rs
									.getString("bir_charges")))));
					hshRecord.put("bir_comments", Helper.correctNull(rs
							.getString("bir_comments")));
					hshRecord.put("bir_processdate", Helper.correctNull(rs
							.getString("bir_processdate")));
					hshRecord.put("bir_service_name", Helper.correctNull(rs
							.getString("bir_service_name")));
					
					rs2=DBUtils.executeLAPSQuery("selmiscust^250^"+Helper.correctNull((String)rs.getString("bir_quality_report")));
					if(rs2.next())
					{	
						hshRecord.put("bir_quality_report", Helper.correctNull(rs2.getString("stat_data_desc1")));

					}
					if(rs2!=null){
						rs2.close();
					}
					rs2=DBUtils.executeLAPSQuery("selmiscust^251^"+Helper.correctNull((String)rs.getString("bir_opinion_all")));
					if(rs2.next())
					{	
						hshRecord.put("bir_opinion_all", Helper.correctNull(rs2.getString("stat_data_desc1")));

					}
				} else {
					hshRecord.put("bir_flag1", "No");
					hshRecord.put("bir_comments", Helper.correctNull(rs
							.getString("bir_comments")));
				}

			}
			
			if(rs!=null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("sel_product_subcatdesc^"+strApplicationNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("prd_subcatscheme",Helper.correctNull(rs.getString("CAT_NAME")));
			}
			
		ArrayList	arrRow1 = new ArrayList();
			 strQuery1="";
			strQuery1 = SQLParser.getSqlQuery("sel_retappdetails^" + strApplicationNo);
			rs=DBUtils.executeQuery(strQuery1); 

			while(rs.next()) {
				ArrayList arrCol1 = new ArrayList();
				 
				arrCol1.add(Helper.correctNull((String) rs
						.getString("DEMO_APPID")));
				arrCol1.add(Helper.correctInt((String) rs
						.getString("DEF_HUNTER_SCORE")));
				arrCol1.add(Helper.correctNull((String) rs
						.getString("PERAPP_FNAME")));
				arrRow1.add(arrCol1);
			}
			
			if (rs != null) {
				rs.close();
			}
			hshRecord.put("arrRow",arrRow1);
			
			//CheckList Details
			arrRow1=new ArrayList();
			strQuery1 = SQLParser.getSqlQuery("sel_appraisalQuest^" + strApplicationNo+"^"+strPrdcode);
			rs=DBUtils.executeQuery(strQuery1); 

			while(rs.next()) {
				ArrayList arrCol1 = new ArrayList();
				 
				arrCol1.add(Helper.correctNull((String) rs
						.getString("GENE_QUESTION")));
				if(Helper.correctNull(rs.getString("ques_flag")).equalsIgnoreCase("1"))
					arrCol1.add("Yes");
				else if(Helper.correctNull(rs.getString("ques_flag")).equalsIgnoreCase("2"))
					arrCol1.add("No");
				else if(Helper.correctNull(rs.getString("ques_flag")).equalsIgnoreCase("3"))
					arrCol1.add("Not Applicable");
				else
					arrCol1.add("");
				arrCol1.add(Helper.correctNull((String) rs
						.getString("Remarks")));
				arrRow1.add(arrCol1);
			}
			
			if (rs != null) {
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("sel_app_perm_no^"+strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("APP_PERM_NO",Helper.correctNull(rs.getString("APP_PERM_NO")));
			}
			if(rs!=null){rs.close();}
			strQuery = SQLParser.getSqlQuery("sel_devrefno^"+strApplicationNo);
			rs = DBUtils.executeQuery(strQuery);
			String strdevType="";
			while(rs.next())
			{ 
				strdevType=correctNull(rs.getString("DEVIATION_TYPE"));
				if(strdevType.equalsIgnoreCase("IRRN")){
					hshRecord.put("com_interest_refno",correctNull(rs.getString("deviation_remarks")));
				}
			}	
			  String strUser="",strUserdesig="";
			     strQuery=SQLParser.getSqlQuery("sel_delegation^"+strApplicationNo);
					rs=DBUtils.executeQuery(strQuery);
					
					while(rs.next())
					{
						arrCol = new ArrayList();
						arrCol.add(correctNull(rs.getString("COM_APPNO"))); //0
						strUser=correctNull(rs.getString("COM_USERID"));
						arrCol.add(strUser);//1
						strUserdesig=correctNull(rs.getString("COM_USERDES"));
						arrCol.add(strUserdesig);//2
						arrCol.add(correctNull(rs.getString("COM_SNO")));//3
						
						if(Helper.isNumeric(strUserdesig))
						{
							strQuery = SQLParser.getSqlQuery("sel_CBSStaticDataPassingCode^"+"27^"+strUserdesig);
							rs1 = DBUtils.executeQuery(strQuery);
							if(rs1.next())
							{
								arrCol.add(Helper.correctNull((String)rs1.getString("CBS_STATIC_DATA_DESC")));//13
							}
							else{
								arrCol.add(strUserdesig);
							}
						}
						else
						{
							if(strUserdesig.equals("adm"))	
							{
								arrCol.add("Administrator");
							}
							else if(strUserdesig.equals("999"))	
							{
								arrCol.add("DGM Admin");
							}
							else if(strUserdesig.equals("001"))	
							{
								arrCol.add("Officer");
							}
							else if(strUserdesig.equals("002"))	
							{
								arrCol.add("General Manager");
							}
							else if(strUserdesig.equals("003"))	
							{
								arrCol.add("Chief Manager");
							}
							else
							{
								arrCol.add(strUserdesig);
							}
						}
						arrCol.add(correctNull(rs.getString("COM_USER")));//5
						strQuery = SQLParser.getSqlQuery("setusername_byuserid^"+correctNull(rs.getString("COM_USER")));
						rs1 = DBUtils.executeQuery(strQuery);
						if(rs1.next())
						{
							arrCol.add(Helper.correctNull((String)rs1.getString("usrname")));//13
						}
						else{
							arrCol.add("");
						}
						arrCol.add(correctNull(rs.getString("COM_DETAILS")));
						arrCol.add(correctNull(rs.getString("COM_DATE")));

						arrRow.add(arrCol);	
					}
					hshRecord.put("arrRowprop",arrRow);

			hshRecord.put("arrCHRow",arrRow1);

			//Sunil
			String ApplicantName="",strBranchRec="",strHeadOfficeRec="";
			ArrayList arrcol=new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_appl_cibildetails^" + strApplicationNo);
			String	 strAmberRules="",strName="", strTotName="",strTotAmber="";
			ArrayList arrName=new ArrayList();
			ArrayList arrcolNAme=new ArrayList();
			while(rs.next())
			{
				
			strAmberRules="";
			String strAMBERRULES=Helper.correctNull((String)rs.getString("DEMO_DIGI_AMBERRULES"));
			
			if(!strAMBERRULES.equals(""))
			{
			String[] strarrAmberRules=strAMBERRULES.split("@");
			
			
			int amberlength=strarrAmberRules.length;
			if(amberlength>0)
			{
				String ambName="";
				for(int i=0;i<amberlength;i++)
				{
					
					if (rs1 != null) 
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^" + "232"+"^"+strarrAmberRules[i]);
					if(rs1.next())
					{
						ambName=Helper.correctNull((String)rs1.getString("stat_data_desc1"));
						strAmberRules=strAmberRules+" @ "+ambName+" ";				
					}
				}
				strTotAmber=strTotAmber+strAmberRules+",";
				strName=Helper.correctNull((String)rs.getString("fname"));
				String demoType=Helper.correctNull((String)rs.getString("DEMO_TYPE"));
				
				if(demoType.equalsIgnoreCase("a"))
					strName="Applicant - "+strName;				
				else 
					strName="CoApplicant - "+strName;
				
				strTotName=strTotName+strName+" , ";			
			}
			}
			
			if(!Helper.correctNull((String)rs.getString("PERAPP_ID")).equalsIgnoreCase(""))
			{
				rs1 = DBUtils.executeLAPSQuery("sel_verifydocument^" + strApplicationNo+"^"+Helper.correctNull((String)rs.getString("PERAPP_ID")));
				if(rs1.next())
				{
				
					strBranchRec=Helper.correctNull((String)rs1.getString("VERI_BRANCH_RECOMMEND"));
					strHeadOfficeRec=Helper.correctNull((String)rs1.getString("VERI_HO_RECOMMEND"));
				}
			
			}
			
			}
			String strcrtsales="";
			strQuery=SQLParser.getSqlQuery("sel_cusdetails^"+strappId);
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("PERAPP_UDYAM_REGNO",Helper.correctNull(rs.getString("PERAPP_UDYAM_REGNO")));
				hshRecord.put("PERAPP_SALES_TURNOVER",Helper.correctNull(rs.getString("PERAPP_SALES_TURNOVER")));
				hshRecord.put("PERAPP_SALES_TURNOVER_DATE",Helper.correctNull(rs.getString("PERAPP_SALES_TURNOVER_DATE")));
				strcrtsales=Helper.correctNull((String)rs.getString("PERAPP_CRITERIA_SALES_TURNOVER"));
				hshRecord.put("PERAPP_CERTIFICATION_DATE",Helper.correctNull((String)rs.getString("PERAPP_CERTIFICATION_DATE")));
				rs2=DBUtils.executeLAPSQuery("selmiscust^249^"+Helper.correctNull((String)rs.getString("PERAPP_MSME_CLASSIFICATION")));
				if(rs2.next())
				{	
					hshRecord.put("PERAPP_MSME_CLASSIFICATION", Helper.correctNull(rs2.getString("stat_data_desc1")));

				}
			}
			
			
			strQuery=SQLParser.getSqlQuery("selmiscust^243^"+strcrtsales);
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{				
				hshRecord.put("strcrtsales",correctNull((String)rs.getString("STAT_DATA_DESC1")));						
			}
			if(rs!=null){
				rs.close();
			}
			String strreason="",streligdigi="";
			rs1=DBUtils.executeLAPSQuery("sel_app_creditsales^"+strApplicationNo);
			if (rs1.next()) 
			{
				hshRecord.put("APP_DIGIAPPNO", Helper.correctNull(rs1.getString("APP_DIGIAPPNO")));	
				hshRecord.put("APP_ELIGCRITERIA", Helper.correctNull(rs1.getString("APP_ELIGCRITERIA")));	
				hshRecord.put("APP_REASON", Helper.correctNull(rs1.getString("APP_REASON")));	
				hshRecord.put("APP_OTHERREASON", Helper.correctNull(rs1.getString("APP_OTHERREASON")));
				hshRecord.put("APP_COMMENTS", correctNull(Helper.CLOBToString(rs1
						.getClob("APP_COMMENTS"))));
			
				strreason=Helper.correctNull((String)rs1.getString("APP_REASON"));
				streligdigi=Helper.correctNull((String)rs1.getString("APP_ELIGCRITERIA"));
				if(streligdigi.equalsIgnoreCase("Y")){
					streligdigi="Yes";
				}else if(streligdigi.equalsIgnoreCase("N")){
					streligdigi="No";
				}else{
					streligdigi="";
				}
			}
			hshRecord.put("streligdigi",streligdigi);
			hshRecord.put("strreason",strreason);	
			if(rs1!=null){
				rs1.close();
			}
			if(streligdigi.equalsIgnoreCase("Yes")){
			strQuery=SQLParser.getSqlQuery("selCreditSaleReason^245^"+strreason);
			rs1=DBUtils.executeQuery(strQuery);
			while(rs1.next())
			{				
				hshRecord.put("STAT_DATA_DESC",correctNull((String)rs1.getString("STAT_DATA_DESC1")));
				hshRecord.put("otherreason",correctNull((String)rs1.getString("STAT_DATA_DESC")));						
				hshRecord.put("commentreason",correctNull((String)rs1.getString("STAT_DATA_DESC")));						

			}

			}
			if(rs1!=null){
				rs1.close();
			}
			if(streligdigi.equalsIgnoreCase("No")){
				strQuery=SQLParser.getSqlQuery("selCreditSaleReason^246^"+strreason);
				rs1=DBUtils.executeQuery(strQuery);
				while(rs1.next())
				{				
					hshRecord.put("STAT_DATA_DESC",correctNull((String)rs1.getString("STAT_DATA_DESC1")));	
					hshRecord.put("otherreason",correctNull((String)rs1.getString("STAT_DATA_DESC")));						
				}
			}
			
			hshRecord.put("strBranchRec",strBranchRec);
			hshRecord.put("strHeadOfficeRec",strHeadOfficeRec);
			
			hshRecord.put("arrcol",strTotAmber);
			hshRecord.put("arrName",strTotName);
			
			
			//
			strQuery=SQLParser.getSqlQuery("sel_doc_branchdet^"+strApplicationNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{				
				hshRecord.put("DIGI_DEVIATION_ROI_CONC",correctNull((String)rs.getString("DIGI_DEVIATION_ROI_CONC")));	
				hshRecord.put("DIGI_DEVIATION_ROI_PENALTY",correctNull((String)rs.getString("DIGI_DEVIATION_ROI_PENALTY")));
			}
			if(rs!=null){
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("sel_retailmisdetails^"+strApplicationNo+"^"+"1");
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{				
				hshRecord.put("app_plantval",correctNull((String)rs.getString("app_plantval")));	
				hshRecord.put("app_indname",correctNull((String)rs.getString("app_indname")));
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"12"+"^"+Helper.correctNull((String)rs.getString("APP_AGRICULTURE")));
				if(rs1.next())
				{
					hshRecord.put("mis_static_data_desc",Helper.correctNull((String)rs1.getString("mis_static_data_desc")));					
				}
				hshRecord.put("APP_INVESTMENT_DATE",correctNull((String)rs.getString("APP_INVESTMENT_DATE")));
				strQuery=SQLParser.getSqlQuery("selmiscust^248^"+correctNull((String)rs.getString("APP_CRITERIA_INVESTMENT")));
				rs=DBUtils.executeQuery(strQuery);
				while(rs.next())
				{				
					hshRecord.put("APP_CRITERIA_INVESTMENT",correctNull((String)rs.getString("STAT_DATA_DESC1")));						
				}
				
			}
	if(rs!=null){
		rs.close();
	}
	String strrestscheme="";
	strQuery=SQLParser.getSqlQuery("sel_ret_rest_processnote^"+strApplicationNo);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{				
		hshRecord.put("APP_RENEW_FLAG",correctNull((String)rs.getString("APP_RENEW_FLAG")));	
		hshRecord.put("LOAN_RESTR_SCHEME",correctNull((String)rs.getString("LOAN_RESTR_SCHEME")));
		strrestscheme=correctNull((String)rs.getString("LOAN_RESTR_SCHEME"));
	}
	if(!strrestscheme.equalsIgnoreCase(""))
	{
	rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"154"+"^"+strrestscheme);
	if(rs1.next())
	{
		strrestscheme=Helper.correctNull(rs1.getString("stat_data_desc1"));
	}
	else
	{
		strrestscheme="";
	}
	}
	else
	{
		strrestscheme="";
	}
	hshRecord.put("strrestscheme", strrestscheme);
	
	 if(rs!=null)
    	 rs.close();
     
     ArrayList arrOutCersaiQuesCol = new ArrayList();
     ArrayList arrOutCersaiQuesRow = new ArrayList();

     strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_existing_cersai_Ques^"+strApplicationNo);	 
     rs = DBUtils.executeQuery(strQuery1);
     while(rs.next())
     {
    	 arrOutCersaiQuesCol= new ArrayList();
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("cus_sec_type")));// 1
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_ALREADY_MORTG")));// 2
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CHARG_REFLECT")));// 3
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_OTHERBNK_REMARK")));//4
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_REMARK_NOT_REFLECT")));// 5
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_PROP_OBSERVED")));// 6
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_REMARKS")));// 7
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("cus_sec_id")));// 8
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CERSAI_ID")));// 9
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CERSAIREFNO")));// 10	        	 
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_SEARCHPERFORM_DATE")));// 11
    	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CERSAI_DATE")));// 12

		arrOutCersaiQuesRow.add(arrOutCersaiQuesCol);
	 }
     
     hshRecord.put("arrOutCersaiQues", arrOutCersaiQuesRow);
     if(rs!=null){
			rs.close();
		}
		String retrestructureval="N";
		strQuery = SQLParser.getSqlQuery("sel_ret_tab_validation^"+strApplicationNo);
		rs = DBUtils.executeQuery(strQuery);
		if(rs.next()){
			retrestructureval="Y";
		}
     if(rs!=null)
    	 rs.close();
     strQuery=SQLParser.getSqlQuery("getlreq^"+strApplicationNo);
		rs = DBUtils.executeQuery(strQuery);
		if(rs.next()) 
		{
			hshRecord.put("GOVT_SCHEME", Helper.correctNull(rs.getString("GOVT_SCHEME")));
			hshRecord.put("LOAN_GOVT", Helper.correctNull(rs.getString("LOAN_GOVT")));
		}
		if(rs!=null){
			rs.close();
		}
		   hshRecord.put("retrestructureval", retrestructureval);
			rs=DBUtils.executeLAPSQuery("sel_rest_Assesment^"+strApplicationNo);
			if (rs.next()) 
			{
				hshRecord.put("COM_APPNO", Helper.correctNull(rs.getString("COM_APPNO")));	
				hshRecord.put("COM_TYPE_OF_BORROWER", Helper.correctNull(rs.getString("COM_TYPE_OF_BORROWER")));	
				strborrower=Helper.correctNull(rs.getString("COM_TYPE_OF_BORROWER"));
				hshRecord.put("COM_PURPOSE_OF_LOAN", Helper.correctNull(rs.getString("COM_PURPOSE_OF_LOAN")));
				strpurposeloan=Helper.correctNull(rs.getString("COM_PURPOSE_OF_LOAN"));
				hshRecord.put("COM_AGRI_ALLIED", Helper.correctNull(rs.getString("COM_AGRI_ALLIED")));
				stragriallied=Helper.correctNull(rs.getString("COM_AGRI_ALLIED"));
				hshRecord.put("COM_PERM_ACT", Helper.correctNull(rs.getString("COM_PERM_ACT")));
				strpermact=Helper.correctNull(rs.getString("COM_PERM_ACT"));
				hshRecord.put("COM_PERM_ACT_ELIGIBLE", Helper.correctNull(rs.getString("COM_PERM_ACT_ELIGIBLE")));	
				strpermactelig=Helper.correctNull(rs.getString("COM_PERM_ACT_ELIGIBLE"));
				if(strpermactelig.equalsIgnoreCase("Y")){
					strpermactelig="Yes";
				}else if(strpermactelig.equalsIgnoreCase("N")){
					strpermactelig="No";
				}else{
					strpermactelig="";
				}
				hshRecord.put("strpermactelig", strpermactelig);	
				hshRecord.put("COM_EXPOSUE", Helper.correctNull(rs.getString("COM_EXPOSUE")));	
				hshRecord.put("COM_EXPOSUE_ELIGIBLE", Helper.correctNull(rs.getString("COM_EXPOSUE_ELIGIBLE")));
				strexposueelig=Helper.correctNull(rs.getString("COM_EXPOSUE_ELIGIBLE"));
				if(strexposueelig.equalsIgnoreCase("Y")){
					strexposueelig="Yes";
				}else if(strexposueelig.equalsIgnoreCase("N")){
					strexposueelig="No";
				}else{
					strexposueelig="";
				}
				hshRecord.put("strexposueelig", strexposueelig);
				hshRecord.put("COM_BRW_AVAILED", Helper.correctNull(rs.getString("COM_BRW_AVAILED")));
				strborroweravailed=Helper.correctNull(rs.getString("COM_BRW_AVAILED"));
				if(strborroweravailed.equalsIgnoreCase("Y")){
					strborroweravailed="Yes";
				}else if(strborroweravailed.equalsIgnoreCase("N")){
					strborroweravailed="No";
				}else{
					strborroweravailed="";
				}
				hshRecord.put("strborroweravailed", strborroweravailed);
				hshRecord.put("COM_BRW_AVAILED_ELIGIBIE",Helper.correctNull(rs.getString("COM_BRW_AVAILED_ELIGIBIE")));
				strborroweravailedelig=Helper.correctNull(rs.getString("COM_BRW_AVAILED_ELIGIBIE"));
				if(strborroweravailedelig.equalsIgnoreCase("Y")){
					strborroweravailedelig="Yes";
				}else if(strborroweravailedelig.equalsIgnoreCase("N")){
					strborroweravailedelig="No";
				}else{
					strborroweravailedelig="";
				}
				hshRecord.put("strborroweravailedelig", strborroweravailedelig);
				hshRecord.put("COM_PRESENT_MOROTORIUM", Helper.correctNull(rs.getString("COM_PRESENT_MOROTORIUM")));	
				hshRecord.put("COM_PREVIOUS_MOROTORIUM", Helper.correctNull(rs.getString("COM_PREVIOUS_MOROTORIUM")));	
				hshRecord.put("COM_EXTENDED_DATE", Helper.correctNull(rs.getString("COM_EXTENDED_DATE")));
				hshRecord.put("COM_GST_NUMBER", Helper.correctNull(rs.getString("COM_GST_NUMBER")));
				hshRecord.put("COM_MSME_REST_SCHEME", Helper.correctNull(rs.getString("COM_MSME_REST_SCHEME")));
				strmsmerestscheme= Helper.correctNull(rs.getString("COM_MSME_REST_SCHEME"));
				if(strmsmerestscheme.equalsIgnoreCase("Y")){
					strmsmerestscheme="Yes";
				}else if(strmsmerestscheme.equalsIgnoreCase("N")){
					strmsmerestscheme="No";
				}else{
					strmsmerestscheme="";
				}
				hshRecord.put("strmsmerestscheme", strmsmerestscheme);
				
				hshRecord.put("COM_MSME_RESTR_SCHEME_ELIG", Helper.correctNull(rs.getString("COM_MSME_RESTR_SCHEME_ELIG")));	
				strmsmerestschemeelig= Helper.correctNull(rs.getString("COM_MSME_RESTR_SCHEME_ELIG"));
				if(strmsmerestschemeelig.equalsIgnoreCase("Y")){
					strmsmerestschemeelig="Yes";
				}else if(strmsmerestschemeelig.equalsIgnoreCase("N")){
					strmsmerestschemeelig="No";
				}else{
					strmsmerestschemeelig="";
				}
				hshRecord.put("strmsmerestschemeelig", strmsmerestschemeelig);
				
				hshRecord.put("COM_RESOL_FW", Helper.correctNull(rs.getString("COM_RESOL_FW")));
				
				strframework= Helper.correctNull(rs.getString("COM_RESOL_FW"));
				if(strframework.equalsIgnoreCase("Y")){
					strframework="Yes";
				}else if(strframework.equalsIgnoreCase("N")){
					strframework="No";
				}else{
					strframework="";
				}
				hshRecord.put("strframework", strframework);
				hshRecord.put("COM_RESOL_FW_ELIGIBLE", Helper.correctNull(rs.getString("COM_RESOL_FW_ELIGIBLE")));
				
				strframeworkelig= Helper.correctNull(rs.getString("COM_RESOL_FW_ELIGIBLE"));
				if(strframeworkelig.equalsIgnoreCase("Y")){
					strframeworkelig="Yes";
				}else if(strframeworkelig.equalsIgnoreCase("N")){
					strframeworkelig="No";
				}else{
					strframeworkelig="";
				}
				hshRecord.put("strframeworkelig", strframeworkelig);
				hshRecord.put("COM_OTHER_LOAN", Helper.correctNull(rs.getString("COM_OTHER_LOAN")));
				
			String 	strrestallied= Helper.correctNull(rs.getString("COM_RESTRUCTURE_ALLIED"));
				if(strrestallied.equalsIgnoreCase("Y")){
					strrestallied="Yes";
				}else if(strrestallied.equalsIgnoreCase("N")){
					strrestallied="No";
				}else{
					strrestallied="";
				}
				hshRecord.put("strrestallied", strrestallied);
				
		 String	strrestalliedelig= Helper.correctNull(rs.getString("COM_REST_ALLIED_ELIGIBLE"));
				if(strrestalliedelig.equalsIgnoreCase("Y")){
					strrestalliedelig="Yes";
				}else if(strrestalliedelig.equalsIgnoreCase("N")){
					strrestalliedelig="No";
				}else{
					strrestalliedelig="";
				}
				hshRecord.put("strrestalliedelig", strrestalliedelig);
				
				hshRecord.put("COM_RESTRUCTURE_ALLIED", Helper.correctNull(rs.getString("COM_RESTRUCTURE_ALLIED")));
				hshRecord.put("COM_REST_ALLIED_ELIGIBLE", Helper.correctNull(rs.getString("COM_REST_ALLIED_ELIGIBLE")));
			}
			if (rs != null) {
				rs.close();
			}
			if(rs1!=null){
				rs1.close();
			}
			if(!strborrower.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"260"+"^"+strborrower);
			if(rs1.next())
			{
				strborrower=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				strborrower="";
			}
			}
			else
			{
				strborrower="";
			}
			hshRecord.put("strborrower", strborrower);
			if(rs1!=null){
				rs1.close();
			}
			if(!strpurposeloan.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"261"+"^"+strpurposeloan);
			if(rs1.next())
			{
				strpurposeloan=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				strpurposeloan="";
			}
			}
			else
			{
				strpurposeloan="";
			}
			hshRecord.put("strpurposeloan", strpurposeloan);
			
			
			if(rs1!=null){
				rs1.close();
			}
			if(!stragriallied.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"262"+"^"+stragriallied);
			if(rs1.next())
			{
				stragriallied=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				stragriallied="";
			}
			}
			else
			{
				stragriallied="";
			}
			hshRecord.put("stragriallied", stragriallied);
			
			if(rs1!=null){
				rs1.close();
			}
			if(!strpermact.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"263"+"^"+strpermact);
			if(rs1.next())
			{
				strpermact=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				strpermact="";
			}
			}
			else
			{
				strpermact="";
			}
			hshRecord.put("strpermact", strpermact);
			if(rs1!=null){
				rs1.close();
			}
				
				rs1 = DBUtils.executeLAPSQuery("sel_common_customer^"+ strappId);
				if(rs1.next())
				{
					hshRecord.put("COMINFO_GSTIN", correctNull(rs1.getString("COMINFO_GSTIN")));
					strgstnumber=correctNull(rs1.getString("COMINFO_GSTIN"));
					srwhethergstn=correctNull(rs1.getString("COMINFO_GSTINREG"));
					strexempted=correctNull(rs1.getString("COMINFO_GST_EXEMPTED"));
					hshRecord.put("COMINFO_GSTINREG", correctNull(rs1.getString("COMINFO_GSTINREG")));
					hshRecord.put("COMINFO_GST_EXEMPTED", correctNull(rs1.getString("COMINFO_GST_EXEMPTED")));
					hshRecord.put("perapp_cbsid", correctNull(rs1.getString("perapp_cbsid")));
					hshRecord.put("perapp_fname", correctNull(rs1.getString("perapp_title"))+"."+correctNull(rs1.getString("perapp_fname")));
					hshRecord.put("PERAPP_INVOCDATE", Helper.correctNull((String) rs1.getString("PERAPP_INVOCDATE")));

				}
		     	
		
     if(rs!=null)
    	 rs.close();
     strQuery=SQLParser.getSqlQuery("sel_ahp_details^"+strApplicationNo);
		rs = DBUtils.executeQuery(strQuery);
		if(rs.next()) 
		{
			
			hshRecord.put("AHP_ALLOTMENT_LETTER", "Yes");
			hshRecord.put("AHP_INCOME_CERTIFICATE", "Yes");
			hshRecord.put("AHP_BRANCHNAME", Helper.correctNull(rs.getString("AHP_BRANCHNAME")));
			hshRecord.put("AHP_BANKNAME_CODE", Helper.correctNull(rs.getString("AHP_BANKNAME")));
			hshRecord.put("AHP_ACCNUMBER", Helper.correctNull(rs.getString("AHP_ACCNUMBER")));
			hshRecord.put("AHP_IFSCCODE", Helper.correctNull(rs.getString("AHP_IFSCCODE")));
			hshRecord.put("AHP_GOI_AMT", Helper.correctNull(rs.getString("AHP_GOI_AMT")));
			hshRecord.put("AHP_GOK_AMT", Helper.correctNull(rs.getString("AHP_GOK_AMT")));
			hshRecord.put("AHP_SAVINGS", Helper.correctNull(rs.getString("AHP_SAVINGS")));
			String branchCode="";
			String stat_id="147";
			branchCode=Helper.correctNull(rs.getString("AHP_BANKNAME"));
			strQuery=SQLParser.getSqlQuery("selstatdatabyiddesc^"+stat_id+"^"+branchCode);
			rs1 = DBUtils.executeQuery(strQuery);
			if(rs1.next()) 
			{
				hshRecord.put("AHP_BANKNAME", Helper.correctNull(rs1.getString("stat_data_desc1")));
			}
			hshRecord.put("AHP_COSTLOANPRD", Helper.correctNull(rs.getString("AHP_COSTLOANPRD")));
			String resType=Helper.correctNull(rs.getString("AHP_RESIDENT_TYPE"));
			if(("1").equalsIgnoreCase(resType)){
				resType="Rented";
			}else if(("2").equalsIgnoreCase(resType)){
				resType="Owned";
			}else if(("3").equalsIgnoreCase(resType)){
				resType="Leased";
			}else if(("4").equalsIgnoreCase(resType)){
				resType="Family";
			}else if(("5").equalsIgnoreCase(resType)){
				resType="Employer";
			}
			hshRecord.put("AHP_RESIDENT_TYPE", Helper.correctNull(resType));
			
			
     
		}
		} catch (Exception e) {
			throw new EJBException("Error in getRetailProcessNote :: "
					+ e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
					rs1.close();
				}
			} catch (Exception e) {
				throw new EJBException("Exception in Closing Connection "
						+ e.getMessage());
			}
		}
		return hshRecord;
	}
	
	
	
	
	public HashMap proposalsummery(HashMap hshReqValues) 
	{

		HashMap hshReqVal1 = new HashMap();
		HashMap hshValues = new HashMap();
		ArrayList arrCol=new ArrayList();
		ArrayList arrRow=null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs3 = null;
		ResultSet rs4= null;
		ResultSet rs2 = null;
		ResultSet rs6 = null;
		String strQuery="";
		
		DecimalFormat dc = new DecimalFormat();
		dc.setGroupingUsed(false);
		dc.setMaximumFractionDigits(2);
		dc.setMinimumFractionDigits(2);
		try
		{

			String strAppId = "";
			String strAppNo = correctNull((String) hshReqValues.get("appno"));
			strQuery=SQLParser.getSqlQuery("selcusidnewforcheckbenforagricorp^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				strAppId=Helper.correctNull((rs.getString("DEMO_COMAPPNEWID")));
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getPerapplicantdetails^"+strAppId);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshReqVal1.put("borrowername", Helper.correctNull((rs.getString("FULL_NAME"))));
				hshReqVal1.put("PERAPP_CBSID", Helper.correctNull((rs.getString("PERAPP_CBSID"))));
				hshReqVal1.put("CONSTITUTION", Helper.correctNull((rs.getString("CBS_STATIC_DATA_DESC"))));
				hshReqVal1.put("PERAPP_PANNO", Helper.correctNull((rs.getString("PERAPP_PANNO"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getbranchnamesolid^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshReqVal1.put("ORG_SCODE", Helper.correctNull((rs.getString("ORG_SCODE"))));
				hshReqVal1.put("ORG_NAME", Helper.correctNull((rs.getString("ORG_NAME"))));
				hshReqVal1.put("Typeofproposal", Helper.correctNull((rs.getString("Typeofproposal"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("sel_applKYCNorms^"+strAppId);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshReqVal1.put("KYC_natofBussActivity", Helper.correctNull((rs.getString("kyc_kycActivity"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getsanctioningAuthority^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshReqVal1.put("sanctionauthority", Helper.correctNull((rs.getString("CBS_STATIC_DATA_DESC"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getsanctioningdept^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshReqVal1.put("sanctiondept", Helper.correctNull((rs.getString("CBS_STATIC_DATA_DESC"))));
				
			}
			if(rs != null)
			{
				rs.close();
			}
			
			ArrayList arrOutCol1	= new ArrayList();
			ArrayList arrOutRow1	= new ArrayList();
			
			strQuery = SQLParser.getSqlQuery("sel_facility_allcomments^"+strAppNo);
			rs = DBUtils.executeQuery(strQuery);
  			while(rs.next())
			{
  				if(rs1!=null)
  				{
  					rs1.close();
  				}
  					String str_repay="repaycomment";
  					rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^" + strAppNo + "^repaycomment^"+ Helper.correctNull(rs.getString("facility_sno")));
  					if (rs1.next()) 
  					{
  						arrOutCol1 = new ArrayList();
  	  					arrOutCol1.add(Helper.correctNull(rs.getString("facility_sno")));
  	  					arrOutCol1.add(Helper.correctNull(rs.getString("fac_desc")));
  						arrOutCol1.add(Helper.CLOBToString(rs1.getClob("fin_comments")));
  						arrOutCol1.add(Helper.correctNull(rs1.getString("FIN_STAGEWISE_RELEASE")));
  						arrOutRow1.add(arrOutCol1);
  					}
			}
  			if(rs1!=null)
				{
					rs1.close();
				}
  			hshValues.put("arrOutRow1", arrOutRow1);
  			
  			
  			String strLoanType="";
  			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_appstatus^"+strAppNo);
			if(rs.next())
			{
				strLoanType=Helper.correctNull((String)rs.getString("app_loantype"));
				strLoanType=strLoanType.toLowerCase();
			}
  			
			if (rs != null) {
				rs.close();
			}
			String strAmountValue="";
			String strAmtValueIn="";
			rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strAppNo);
			if (rs.next()) 
			{
				hshReqVal1.put("com_amountvalue", Helper.correctNull(rs.getString("com_amountvalue")));
			 strAmountValue=Helper.correctNull(rs.getString("com_amountvalue"));
			}
			if(strAmountValue.equalsIgnoreCase("C"))
			{strAmtValueIn ="Crore";}
			else if(strAmountValue.equalsIgnoreCase("L")){strAmtValueIn ="Lacs";}
			else {strAmtValueIn ="Rs";}
			
			hshReqVal1.put("strAmountValue", strAmountValue);
			hshReqVal1.put("strAmtValueIn", strAmtValueIn);
  			
			// MIS information
			String strSector = "", strSubSector = "", mainactivity = "", subactivity = "", strcrtsales = "";
			if (rs != null) {
				rs.close();
			}
			ArrayList arrMISRow = new ArrayList();
			ArrayList arrMISCol = new ArrayList();
			rs = DBUtils.executeLAPSQuery("sel_misapp_desc^" + strAppNo + "^"
					+ strLoanType);
			while (rs.next()) {
				arrMISCol = new ArrayList();
				arrMISCol.add(Helper.correctNull(rs
						.getString("FACILITY_DISPLAYDESC")));
				mainactivity = Helper.correctNull(rs
						.getString("app_mainactivity"));
				subactivity = Helper.correctNull(rs
						.getString("app_subactivity"));

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "7"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_subsector")));
				if (rs1.next()) {
					strSubSector = Helper.correctNull((String) rs1
							.getString("mis_static_data_desc"));
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
							+ "8"
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("app_subsector")));
					if (rs1.next()) {
						strSubSector = Helper.correctNull((String) rs1
								.getString("mis_static_data_desc"));
					} else {
						strSubSector = "";
					}
				}

				if (mainactivity.equalsIgnoreCase("01")
						|| mainactivity.equalsIgnoreCase("02")) {
					arrMISCol.add(strSubSector);
				} else {
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_activity_codedetails^"
							+ "2" + "^" + mainactivity);
					if (rs1.next()) {
						arrMISCol.add(Helper.correctNull(rs1
								.getString("mis_static_data_desc")));
					} else {
						arrMISCol.add("");
					}
				}
				if (rs1 != null) {
					rs1.close();
				}
				if (rs2 != null) {
					rs2.close();
				}

				rs1 = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
						+ mainactivity + "^" + subactivity);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("mis_subactdesc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("app_activitycode")));
				strSector = Helper.correctNull((String) rs
						.getString("app_sector"));
				if (strSector.equalsIgnoreCase("01")
						|| strSector.equalsIgnoreCase("1")) {
					arrMISCol.add("Priority Sector");
				} else if (strSector.equalsIgnoreCase("02")
						|| strSector.equalsIgnoreCase("2")) {
					arrMISCol.add("Non Priority Sector");
				} else {
					arrMISCol.add(" ");
				}
				arrMISCol.add(strSubSector);

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "11"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_sensitivesector")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("Y"))
					arrMISCol.add("Yes");
				else if (Helper.correctNull(rs.getString("APP_STANDUP_INDIA"))
						.equalsIgnoreCase("N"))
					arrMISCol.add("No");
				else
					arrMISCol.add("");

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "23"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GOVTANNOUNCESCHEME")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "17"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_GUARANTEE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("Nil");
				}

				arrMISCol
						.add(Helper.correctNull(rs.getString("app_guarantee")));
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_GUARANTEEAMT")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_cusdetails^" + strAppId);
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_UDYAM_REGNO")));
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_SALES_TURNOVER")));
					arrMISCol.add(Helper.correctNull(rs1
							.getString("PERAPP_SALES_TURNOVER_DATE")));

					strcrtsales = Helper.correctNull((String) rs1
							.getString("PERAPP_CRITERIA_SALES_TURNOVER"));
					rs2 = DBUtils.executeLAPSQuery("selmiscust^243^"
							+ strcrtsales);
					if (rs2.next()) {
						arrMISCol.add(Helper.correctNull(rs2
								.getString("STAT_DATA_DESC1")));

					} else {
						arrMISCol.add("");
					}

				} else {
					arrMISCol.add("");
					arrMISCol.add("");
					arrMISCol.add("");

				}
				if (rs1 != null) {
					rs1.close();
				}
				arrMISCol.add(Helper.correctNull(rs.getString("app_plantval")));
				arrMISCol.add(Helper.correctNull(rs.getString("app_indname")));
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "12"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("APP_AGRICULTURE")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_INVESTMENT_DATE")));
				rs2 = DBUtils.executeLAPSQuery("selmiscust^248^"
						+ Helper.correctNull((String) rs
								.getString("APP_CRITERIA_INVESTMENT")));
				if (rs2.next()) {
					arrMISCol.add(Helper.correctNull(rs2
							.getString("STAT_DATA_DESC1")));

				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String) rs
						.getString("facility")));
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
						+ "9"
						+ "^"
						+ Helper.correctNull((String) rs
								.getString("app_weakersec")));
				if (rs1.next()) {
					arrMISCol.add(Helper.correctNull((String) rs1
							.getString("mis_static_data_desc")));
				} else {
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs
						.getString("APP_MINISTRY_INDUSTRY")));
				if (rs6 != null) {
					rs6.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_minorityconstitutionchk^"
						+ strAppId);
				rs6 = DBUtils.executeQuery(strQuery);
				if (rs6.next()) {
					arrMISCol.add("Y");

				} else {
					arrMISCol.add("");
				}
				arrMISRow.add(arrMISCol);
			}
			hshReqVal1.put("arrMISRow", arrMISRow);
			
			
			
			
			
			ArrayList arrOutRownew	= new ArrayList();
			String strType="";
			String strFacility		= "";
			String strFacilityId="";
			String strFacilityFor	="";
			String strFacilityDesc="";
			String strAppOldId="";
			String strValNew="";
			String strAssetClassification	= "";
			String strFacilityFC="";
			double strBankLimit=0.00,strBankOS=0.00,dblExposure=0.0;
			String strFacilityNature="";
			String strOutstandingDate="";
			ArrayList arrOutCol	= new ArrayList();
			 if(rs !=null)
			{rs.close();}
			rs	= DBUtils.executeLAPSQuery("selectprocessnoteexistingfacilities^"+strAppNo+"^"+strAppNo);
			while(rs.next())
			{
				strFacilityFC=correctNull(rs.getString("com_headfac"));
				strBankLimit=Double.parseDouble(Helper.correctDouble(rs.getString("combk_limit")));
				strBankOS=Double.parseDouble(Helper.correctDouble(rs.getString("combk_os")));
				dblExposure=Double.parseDouble(Helper.correctDouble(rs.getString("com_exposure")));
				if(strFacilityFC.equalsIgnoreCase("1")){
					strBankLimit=strBankLimit/50;
					strBankOS=strBankOS/50;
					dblExposure=dblExposure/50;
				}
				arrOutCol	= new ArrayList();
				if(correctNull(rs.getString("facdesc")).equalsIgnoreCase("TL"))
					arrOutCol.add("Term Loan");
				else if(correctNull(rs.getString("facdesc")).equalsIgnoreCase("DL"))
					arrOutCol.add("DPN Loan");
				else if(correctNull(rs.getString("facdesc")).equalsIgnoreCase("OD"))
					arrOutCol.add("Overdraft");
				else 
					arrOutCol.add(correctNull(rs.getString("facdesc")));
				arrOutCol.add("");//1
				arrOutCol.add(String.valueOf(strBankLimit));//2
				arrOutCol.add(correctNull(rs.getString("combk_sancrefno")));//3
				arrOutCol.add(correctNull(rs.getString("combk_sancdate")));//4
				arrOutCol.add(correctNull(rs.getString("combk_spread")));//5
				arrOutCol.add(String.valueOf(strBankOS));//6
				arrOutCol.add(correctNull(rs.getString("combk_osasondate")));//7
				arrOutCol.add(correctNull(rs.getString("combk_duedate")));//8
				arrOutCol.add(correctNull(rs.getString("combk_arrears")));//9
				arrOutCol.add(correctNull(rs.getString("combk_purpose")));//10
				arrOutCol.add(correctNull(rs.getString("combk_inttype")));//11
				arrOutCol.add(correctNull(rs.getString("combk_interestrate")));//12
				arrOutCol.add(correctNull(rs.getString("combk_fac_grp")));//13
				String stringType=Helper.correctNull(rs.getString("combk_factype"));
				if(stringType.equalsIgnoreCase("M")){
					stringType="Main Limit";
				}else if(stringType.equalsIgnoreCase("S"))
				{
					stringType="Sub Limit";
				}
				arrOutCol.add(stringType);//14
				arrOutCol.add(correctNull(rs.getString("combk_remarks")));//15
				arrOutCol.add(correctNull(rs.getString("combk_factype")));//16
				arrOutCol.add(correctNull(rs.getString("combk_repaymentcmt")));//17
				arrOutCol.add(dblExposure+"");//18
				arrOutRownew.add(arrOutCol);
				if(strOutstandingDate.equalsIgnoreCase(""))
					strOutstandingDate=correctNull(rs.getString("combk_osasondate"));
				
				
				if(Helper.correctNull(rs.getString("fac_type")).equalsIgnoreCase("P"))
				{
					if(rs1 !=null)
					{rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("selectprocessnoteproposedsublimfacilities^"+Helper.correctNull(rs.getString("combk_parentappno"))+"^"+Helper.correctNull(rs.getString("combk_parentfacsno")));
					while(rs1.next())
					{
						strFacilityFC=correctNull(rs1.getString("com_headfac"));
						strBankLimit=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_limit")));
						strBankOS=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_os")));
						dblExposure=Double.parseDouble(Helper.correctDouble(rs1.getString("com_exposure")));
						if(strFacilityFC.equalsIgnoreCase("1")){
							strBankLimit=strBankLimit/50;
							strBankOS=strBankOS/50;
							dblExposure=dblExposure/50;
						}
						arrOutCol	= new ArrayList();
						
						if(rs2!=null)
							rs2.close();
						rs2	= DBUtils.executeLAPSQuery("getfacdetforsanction^"+Helper.correctInt(rs.getString("combk_parentappno"))+"^"+Helper.correctInt(rs.getString("combk_parentfacsno")));
							
						if(rs2.next())
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")) +"(Sub Limit of "+correctNull(rs2.getString("FACILITY_DISPLAYDESC"))+")");
						}
						else
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")));
						}
						arrOutCol.add("");//1
						arrOutCol.add(String.valueOf(strBankLimit));//2
						arrOutCol.add(correctNull(rs1.getString("combk_sancrefno")));//3
						arrOutCol.add(correctNull(rs1.getString("combk_sancdate")));//4
						arrOutCol.add(correctNull(rs1.getString("combk_spread")));//5
						arrOutCol.add(String.valueOf(strBankOS));//6
						arrOutCol.add(correctNull(rs1.getString("combk_osasondate")));//7
						arrOutCol.add(correctNull(rs1.getString("combk_duedate")));//8
						arrOutCol.add(correctNull(rs1.getString("combk_arrears")));//9
						arrOutCol.add(correctNull(rs1.getString("combk_purpose")));//10
						arrOutCol.add(correctNull(rs1.getString("combk_inttype")));//11
						arrOutCol.add(correctNull(rs1.getString("combk_interestrate")));//12
						arrOutCol.add(correctNull(rs1.getString("combk_fac_grp")));//13
						strType=Helper.correctNull(rs1.getString("combk_factype"));
						if(strType.equalsIgnoreCase("M")){
							strType="Main Limit";
						}else if(strType.equalsIgnoreCase("S"))
						{
							strType="Sub Limit";
						}
						arrOutCol.add(strType);//14
						arrOutCol.add(correctNull(rs1.getString("combk_remarks")));//15
						arrOutCol.add(correctNull(rs1.getString("combk_factype")));//16
						arrOutCol.add(correctNull(rs1.getString("combk_repaymentcmt")));//17
						arrOutCol.add(dblExposure+"");//18
						arrOutRownew.add(arrOutCol);
					}
				}
				else
				{
					if(rs1 !=null)
					{rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("selectprocessnoteexistingsublimfacilities^"+strAppNo+"^"+Helper.correctNull(rs.getString("combk_parentappno"))+"^"+Helper.correctNull(rs.getString("combk_parentfacsno")));
					while(rs1.next())
					{
						strFacilityFC=correctNull(rs1.getString("com_headfac"));
						strBankLimit=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_limit")));
						strBankOS=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_os")));
						dblExposure=Double.parseDouble(Helper.correctDouble(rs1.getString("com_exposure")));
						if(strFacilityFC.equalsIgnoreCase("1")){
							strBankLimit=strBankLimit/50;
							strBankOS=strBankOS/50;
							dblExposure=dblExposure/50;
						}
						arrOutCol	= new ArrayList();

						if(rs2!=null)
							rs2.close();
						rs2	= DBUtils.executeLAPSQuery("getfacdetforsanction^"+Helper.correctInt(rs.getString("combk_parentappno"))+"^"+Helper.correctInt(rs.getString("combk_parentfacsno")));
							
						if(rs2.next())
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")) +"(Sub Limit of "+correctNull(rs2.getString("FACILITY_DISPLAYDESC"))+")");
						}
						else
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")));
						}
						
						arrOutCol.add("");//1
						arrOutCol.add(String.valueOf(strBankLimit));//2
						arrOutCol.add(correctNull(rs1.getString("combk_sancrefno")));//3
						arrOutCol.add(correctNull(rs1.getString("combk_sancdate")));//4
						arrOutCol.add(correctNull(rs1.getString("combk_spread")));//5
						arrOutCol.add(String.valueOf(strBankOS));//6
						arrOutCol.add(correctNull(rs1.getString("combk_osasondate")));//7
						arrOutCol.add(correctNull(rs1.getString("combk_duedate")));//8
						arrOutCol.add(correctNull(rs1.getString("combk_arrears")));//9
						arrOutCol.add(correctNull(rs1.getString("combk_purpose")));//10
						arrOutCol.add(correctNull(rs1.getString("combk_inttype")));//11
						arrOutCol.add(correctNull(rs1.getString("combk_interestrate")));//12
						arrOutCol.add(correctNull(rs1.getString("combk_fac_grp")));//13
						strType=Helper.correctNull(rs1.getString("combk_factype"));
						if(strType.equalsIgnoreCase("M")){
							strType="Main Limit";
						}else if(strType.equalsIgnoreCase("S"))
						{
							strType="Sub Limit";
						}
						arrOutCol.add(strType);//14
						arrOutCol.add(correctNull(rs1.getString("combk_remarks")));//15
						arrOutCol.add(correctNull(rs1.getString("combk_factype")));//16
						arrOutCol.add(correctNull(rs1.getString("combk_repaymentcmt")));//17
						arrOutCol.add(dblExposure+"");//18
						arrOutRownew.add(arrOutCol);
					}
				}
			}
			hshReqVal1.put("arrBAOurRow", arrOutRownew);
			
			ArrayList arrlistofoth	= new ArrayList();
			ArrayList arrlistofothbank	= new ArrayList();
			if(rs1 !=null)
			{rs1.close();}
			rs1	= DBUtils.executeLAPSQuery("getotherbankdetails^"+strAppNo+"^"+strAppNo);
			while(rs1.next())
			{
				arrlistofoth	= new ArrayList();
				
				if(rs !=null)
				{rs.close();}
				rs	= DBUtils.executeLAPSQuery("getbranckandbankname^"+"147"+"^"+correctNull(rs1.getString("COM_CON_BANK_CODE")));
				if(rs.next())
				{
					arrlistofoth.add((correctNull(rs.getString("STAT_DATA_DESC1"))));//0
				}
				else
				{
					arrlistofoth.add("");//0
				}
				
				arrlistofoth.add(correctNull(rs1.getString("COM_CON_LIMIT")));//1
				arrlistofoth.add(correctNull(rs1.getString("COM_CON_OUTSTANDING")));//2
				arrlistofoth.add(correctNull(rs1.getString("COM_CON_INT_RATE")));//3
				
				
				if(rs !=null)
				{rs.close();}
				rs	= DBUtils.executeLAPSQuery("getbranckandbankname^"+"259"+"^"+correctNull(rs1.getString("COM_CON_BRANCH_NAME")));
				if(rs.next())
				{
					arrlistofoth.add((correctNull(rs.getString("STAT_DATA_DESC1"))));//4
				}
				else
				{
					arrlistofoth.add("");//4
				}
				arrlistofoth.add(correctNull(rs1.getString("COM_CON_EMAIL_ID")));//5

				if(rs !=null)
				{rs.close();}
				rs	= DBUtils.executeLAPSQuery("getbranckandbankname^"+"144"+"^"+correctNull(rs1.getString("COM_CON_FAC_NATURE")));
				if(rs.next())
				{
					arrlistofoth.add((correctNull(rs.getString("STAT_DATA_DESC1"))));//6
				}
				else
				{
					arrlistofoth.add("");//6
				}
				if(correctNull(rs1.getString("COM_CON_FAC_TYPE")).equalsIgnoreCase("M"))
				{
					arrlistofoth.add("Main Limit");//7
				}
				else if(correctNull(rs1.getString("COM_CON_FAC_TYPE")).equalsIgnoreCase("S"))
				{
					arrlistofoth.add("Sub Limit");//7
				}
				else
				{
					arrlistofoth.add("");//7
				}
				arrlistofothbank.add(arrlistofoth);
			}
			
			
			String strFactype = "", strLapsOldId = "0", bankname = "",strQuery3="";
			String strappId="";
			String oldId="";
			
			strQuery = SQLParser.getSqlQuery("selcusidnewforcheckbenforagricorp^"+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strappId = Helper.correctNull(rs.getString("DEMO_COMAPPNEWID"));
				oldId = Helper.correctNull(rs.getString("DEMO_COMAPPID"));
			}
			if (rs != null) {
				rs.close();
			}
			
			if (!strappId.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("seloldrefidforapp^"
						+ strappId);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strLapsOldId = Helper.correctNull(rs
							.getString("perapp_oldid"));
				}
			}
			
			
			if (rs != null) {
				rs.close();
			}
			
			strQuery = SQLParser.getSqlQuery("perbankingselectcorp^"+ oldId +"^"
					+ strappId);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrlistofoth	= new ArrayList();
				bankname = Helper.correctNull(rs.getString("perbank_bnkname"));
				if (!(bankname.equalsIgnoreCase(""))) {
					strQuery3 = SQLParser
							.getSqlQuery("selbankname^" + bankname);
					rs3 = DBUtils.executeQuery(strQuery3);
					if (rs3.next()) {
						bankname = Helper.correctNull(rs3
								.getString("stat_data_desc1"));
					}
				}
				arrlistofoth.add(bankname);// 0
				arrlistofoth.add(Helper.correctNull(rs
						.getString("perbank_limit")));// 1
				arrlistofoth.add(Helper.correctNull(rs
						.getString("perbank_os")));// 2
				arrlistofoth.add(Helper.correctNull(rs
						.getString("perbank_intrate")));// 3
				arrlistofoth.add("");// 4
				arrlistofoth.add("");// 5
				strFactype = Helper.correctNull(rs.getString("perbank_type"));
				if (strFactype.equalsIgnoreCase("1"))
					arrlistofoth.add("Working Capital");// 6
				else if (strFactype.equalsIgnoreCase("2"))
					arrlistofoth.add("Term Loan");// 6
				else
					arrlistofoth.add("");//6
				arrlistofoth.add("");// 3
				
				
				
				arrlistofothbank.add(arrlistofoth);
			}
			
			
			
			
			hshReqVal1.put("arrlistofotherbank", arrlistofothbank);
  			
			HashMap hshReqVal = new HashMap();
			hshReqVal.put("appno", strAppNo);
			hshReqVal.put("appid", strAppId);
			hshReqVal.put("PageType", "PROPOSALLC");
			CommDocumentBean commdocument = new CommDocumentBean();
			hshReqVal = commdocument.getAnnexureIII(hshReqVal);
			hshReqVal.put("page", "AN3");
			hshReqVal1.put("AN3", hshReqVal);
			
			
			
			
			if(rs!=null)
			{
				rs.close();
			}
			ArrayList arrOutCol2	= new ArrayList();
			ArrayList arrOutRow2	= new ArrayList();
			
			strQuery = SQLParser.getSqlQuery("sel_facility_allcomments^"+strAppNo);
			rs = DBUtils.executeQuery(strQuery);
				while(rs.next())
			{
					if(rs1!=null)
					{
						rs1.close();
					}
						String str_repay="repaycomment";
						rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^" + strAppNo + "^repaycomment^"+ Helper.correctInt(rs.getString("facility_sno")));
						if (rs1.next()) 
						{
							arrOutCol2 = new ArrayList();
							arrOutCol2.add(Helper.correctInt(rs.getString("facility_sno")));
							arrOutCol2.add(Helper.correctNull(rs.getString("fac_desc")));
							arrOutCol2.add(Helper.CLOBToString(rs1.getClob("fin_comments"))); 
							arrOutCol2.add(Helper.correctNull(rs1.getString("FIN_STAGEWISE_RELEASE")));
							arrOutRow2.add(arrOutCol2);
						}
			}
				hshReqVal1.put("arrOutRow2", arrOutRow2);
			
	
				
				
				
				
				
				
				
				String strVal="",strVal1="",strVal2="",strInterestType="",strAdhocFac="";
				double dblInterestRate=0.00,dblBaseRate=0.00;
				String strInterestRate="",strFacSno="";
				
				
					
				
				String strfacsel="",strWhetherBRAvail="",strHoliday="";
				/*String strVal="",,strVal1="",strVal2="";*/
				String strAdhocArr[]=null;
				ArrayList arrOutRow = new ArrayList();
				ArrayList arrMCLR	=  new ArrayList();
				double dblDiffIntRate=0.00;
				if(rs!=null){rs.close();}
				rs	= DBUtils.executeLAPSQuery("com_FACSel_new^"+strAppNo+"^"+strLoanType+"^0");
				while(rs.next())
				{
					arrOutCol	= new ArrayList();
					strVal		= "";strType="";
					strFacSno  	= Helper.correctInt(rs.getString("facility_sno"));
					strVal1		= Helper.correctInt(rs.getString("facility_group"));
					strVal2		= Helper.correctInt(rs.getString("facility_repaytype"));
					
					dblBaseRate=Double.parseDouble(Helper.correctDouble((String)rs.getString("facility_baserate")));
					dblInterestRate=Double.parseDouble(Helper.correctDouble((String)rs.getString("facility_sancinterest")));
					strInterestType=Helper.correctNull((String)rs.getString("facility_intsubtype"));
					strAdhocFac=Helper.correctNull(rs.getString("facility_adhocfac"));
					
					if(rs1!=null){rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("sel_facility_mclrspread^"+Helper.correctInt(rs.getString("facility_sno"))+"^"+strAppNo);
					
					if(rs1.next())
					{
						dblDiffIntRate=dblInterestRate - dblBaseRate;
						String strTemp=Helper.correctNull(rs1.getString("facility_mclrtype"));
						String strTempforfbil=Helper.correctNull(rs1.getString("facility_mclrtype"));
						String strfbildate=Helper.correctNull(rs1.getString("FBILL_DATE"));
						if(!strTemp.equalsIgnoreCase(""))
						{
							String[] strArr=strTemp.split("@");
	 						if(strArr.length>1)
	 						{
	 							if(rs3!=null)
	 								rs3.close();
	 							rs3=DBUtils.executeLAPSQuery("selcbsiddatadesc^34^"+strArr[0]);
	 							if(rs3.next())
	 							{
	 								strTemp=Helper.correctNull(rs3.getString("cbs_static_data_desc"));
	 							}
	 						}
	 						else
	 						{
	 							strTemp="";
	 						}
						}
						else
						{
							strTemp="";
						}
						strInterestRate=strTemp+" + "+dc.format(dblDiffIntRate)+"% p.a presently at "+dc.format(dblInterestRate)+"% p.a";
						strWhetherBRAvail="Y";
						if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
						{
							if(strTempforfbil.contains("FD")||strTempforfbil.contains("FM"))
							{
						    arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"+ " as on "+ strfbildate);
							}
							else
							{
							arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");		
							}
						}
					}
					else
					{
						if(strInterestType.equalsIgnoreCase("BR"))
						{
							dblDiffIntRate=dblInterestRate - dblBaseRate;
							strInterestRate="BR + "+dc.format(dblDiffIntRate)+"% p.a presently at "+dc.format(dblInterestRate)+"% p.a";
							strWhetherBRAvail="Y";
						}
						else
						{
							strInterestRate=Helper.correctDouble(rs.getString("facility_interest"));
						}
					}
					strAdhocArr=strAdhocFac.split("~");
					
					strVal1	= "Main-Limit";
					
					if(rs1!=null){rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("sel_facilityremarks^"+Helper.correctInt(rs.getString("facility_sel_type")));
					if(rs1.next())
					{
						strfacsel	= Helper.correctNull(rs1.getString("STAT_DATA_DESC1"));
					}
					
					if(strVal2.equalsIgnoreCase("E")){	  strVal2	= "EMI";}
					else if(strVal2.equalsIgnoreCase("NE")){strVal2	= "Non EMI";}
					else if(strVal2.equalsIgnoreCase("OD")){strVal2	= "On Demand";}
					else if(strVal2.equalsIgnoreCase("LC")){strVal2	= "As Per LC Terms";}
					else if(strVal2.equalsIgnoreCase("CO")){strVal2	= "As Per Contract Terms";}
					else if(strVal2.equalsIgnoreCase("BG")){strVal2	= "As Per BG Rules";}
					else if(strVal2.equalsIgnoreCase("DD")){strVal2	= "On Due Date";}
					else if(strVal2.equalsIgnoreCase("PC")){strVal2	= "From the proceeds of PSC / by realization of bill";}
					else if(strVal2.equalsIgnoreCase("PS")){strVal2	= "By Realization of Export Bills";}
					else if(strVal2.equalsIgnoreCase("PR")){strVal2	= "By Realization of Respective Bills";}
					else if(strVal2.equalsIgnoreCase("TG")){strVal2	= "As per TCBG Rules";}
					else{strVal2	= "";}
					
//					if(strType.equalsIgnoreCase("1"))
//					{
//						arrOutCol.add(correctNull(rs.getString("com_facdesc")));
//					}
//					else
//					{
						arrOutCol.add(correctNull(rs.getString("facility_desc")));
//					}
						
					if(correctNull(rs.getString("com_headfac")).equalsIgnoreCase("1"))
					{
						double dblAmt=Double.parseDouble(Helper.correctDouble(rs.getString("facility_sancamt")));
						dblAmt=dblAmt/50;
						arrOutCol.add(String.valueOf(dblAmt));
					}else{
					arrOutCol.add(Helper.correctDouble(rs.getString("facility_sancamt")));//1
					}
					arrOutCol.add(Helper.correctDouble(rs.getString("facility_existing")));
					arrOutCol.add(strInterestRate);
					arrOutCol.add(Helper.correctInt(rs.getString("facility_sno")));
					arrOutCol.add(strVal1);
					arrOutCol.add(Helper.correctInt(rs.getString("facility_months")));
					arrOutCol.add(correctNull(rs.getString("facility_for")));
				//	arrOutCol.add(strVal);
					arrOutCol.add(strfacsel);
					arrOutCol.add(strVal2);
					arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("facility_margin"))));
					strHoliday=Helper.correctInt(rs.getString("facility_holidayperiod"));
					if(strHoliday.equalsIgnoreCase("0"))
						arrOutCol.add("Not Applicable");
					else
						arrOutCol.add(Helper.correctInt(rs.getString("facility_holidayperiod")));
					arrOutCol.add(strInterestType);
					arrOutCol.add(Helper.correctDouble(rs.getString("fac_metlifepremiumamt")));
					//for CBS Branch display
					String strOrg_Name="";
					strQuery =SQLParser.getSqlQuery("sel_cbsdetails^" +strAppNo+"^"+strFacSno);
					if(rs3!=null)
					rs3.close();
					rs3 = DBUtils.executeQuery(strQuery);
					if(rs3.next())
					{
						String strOrg_Code=Helper.correctNull(rs3.getString("LOANDISBBRANCH"));
						strOrg_Name="";
						if(!strOrg_Code.equalsIgnoreCase(""))
						{
							if(rs4!=null)
							{
								rs4.close();
							}
							strQuery=SQLParser.getSqlQuery("selectorgname^"+strOrg_Code);
							rs4=DBUtils.executeQuery(strQuery);
							if(rs4.next())
							{
								strOrg_Name=Helper.correctNull((String)rs4.getString("org_name"));
								arrOutCol.add(strOrg_Name);
							//	hshRecord.put("strOrg_Name", strOrg_Name);
							}
							else{arrOutCol.add("");}
						}
						else{arrOutCol.add("");}
						}
						else{arrOutCol.add("");}
					
					
				String	strRoiType=Helper.correctNull(rs.getString("FAC_INS_COMPANY_NAME"));
					if(rs4!=null){rs4.close();}
					if(!strRoiType.equalsIgnoreCase(""))
					{
						rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"+ strRoiType);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//15
						}
						else{arrOutCol.add("");}
					}
					else{arrOutCol.add("");}
					
					arrOutCol.add(strRoiType);//16

					arrOutCol.add(Helper.correctDouble(rs.getString("FAC_PREMIUM_TENOR")));//17
					arrOutCol.add(Helper.correctDouble(rs.getString("FAC_PREMIUM_LOAN_AMOUNT")));//18
					arrOutCol.add(Helper.correctDouble(rs.getString("FAC_INS_ACCOUNT_NO")));//19
					arrOutCol.add(Helper.correctDouble(rs.getString("FAC_PREMIUM_AMOUNT")));//20
					String StrInsCompanyName=Helper.correctNull(rs.getString("FAC_INS_FUNDED_COMPANY_NAME"));
					if(rs4!=null){rs4.close();}
					if(!StrInsCompanyName.equalsIgnoreCase(""))
					{
						rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"+ StrInsCompanyName);
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//21
						}
						else{arrOutCol.add("");}
					}
					else{arrOutCol.add("");}
					
					//end
					
					if(Helper.correctDouble(rs.getString("facility_category")).equalsIgnoreCase("R"))
						arrOutCol.add("Regular Limit");
					else if(Helper.correctDouble(rs.getString("facility_category")).equalsIgnoreCase("D"))
						arrOutCol.add("Additional Limit");
					else if(Helper.correctDouble(rs.getString("facility_category")).equalsIgnoreCase("O"))
						arrOutCol.add("One Time Limit");
					else if(Helper.correctDouble(rs.getString("facility_category")).equalsIgnoreCase("A"))
						arrOutCol.add("Adhoc Limit");
					else
						arrOutCol.add(" ");
					
					if(rs4!=null){rs4.close();}
					if(!Helper.correctNull(rs.getString("fac_actualmargin")).equalsIgnoreCase(""))
					{
						rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^235^"+ Helper.correctNull(rs.getString("fac_actualmargin")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//25
						}
						else{arrOutCol.add("");}
					}
					else{arrOutCol.add("");}
					if(rs4!=null){rs4.close();}
					if(!Helper.correctNull(rs.getString("fac_actualrelaxed")).equalsIgnoreCase(""))
					{
						rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^236^"+ Helper.correctNull(rs.getString("fac_actualrelaxed")));
						if (rs4.next()) {
							arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//25
						}
						else{arrOutCol.add("");}
					}
					else{arrOutCol.add("");}
					
					if(Helper.correctNull(rs.getString("fac_marginrelax")).equalsIgnoreCase("Y"))
						arrOutCol.add("Yes");
					else if(Helper.correctNull(rs.getString("fac_marginrelax")).equalsIgnoreCase("N"))
						arrOutCol.add("No");
					else
						arrOutCol.add("");
					
					arrOutCol.add(Helper.correctDouble(rs.getString("facility_duedate")));
					arrOutCol.add(Helper.correctDouble(rs.getString("facility_freshlimit")));
					arrOutCol.add(Helper.correctDouble(rs.getString("facility_existing")));
					
					arrOutRow.add(arrOutCol);
					
					if(rs2!=null){rs2.close();}
					rs2	= DBUtils.executeLAPSQuery("com_FACSel_new^"+strAppNo+"^"+strLoanType+"^"+strFacSno);
					while(rs2.next())
					{

						arrOutCol	= new ArrayList();
						strVal		= "";strType="";
						strVal1		= Helper.correctInt(rs2.getString("facility_group"));
						strVal2		= Helper.correctInt(rs2.getString("facility_repaytype"));
						
						dblBaseRate=Double.parseDouble(Helper.correctDouble((String)rs2.getString("facility_baserate")));
						dblInterestRate=Double.parseDouble(Helper.correctDouble((String)rs2.getString("facility_sancinterest")));
						strInterestType=Helper.correctNull((String)rs2.getString("facility_intsubtype"));
						strAdhocFac=Helper.correctNull(rs2.getString("facility_adhocfac"));
						
						if(rs1!=null){rs1.close();}
						rs1	= DBUtils.executeLAPSQuery("sel_facility_mclrspread^"+Helper.correctInt(rs2.getString("facility_sno"))+"^"+strAppNo);
						
						if(rs1.next())
						{
							dblDiffIntRate=dblInterestRate - dblBaseRate;
							String strTemp=Helper.correctNull(rs1.getString("facility_mclrtype"));
							if(!strTemp.equalsIgnoreCase(""))
							{
								String[] strArr=strTemp.split("@");
		 						if(strArr.length>1)
		 						{
		 							if(rs3!=null)
		 								rs3.close();
		 							rs3=DBUtils.executeLAPSQuery("selcbsiddatadesc^34^"+strArr[0]);
		 							if(rs3.next())
		 							{
		 								strTemp=Helper.correctNull(rs3.getString("cbs_static_data_desc"));
		 							}
		 						}
		 						else
		 						{
		 							strTemp="";
		 						}
							}
							else
							{
								strTemp="";
							}
							strInterestRate=strTemp+" + "+dc.format(dblDiffIntRate)+"% p.a presently at "+dc.format(dblInterestRate)+"% p.a";
							strWhetherBRAvail="Y";
							if(!arrMCLR.contains("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %"))
							arrMCLR.add("Rate of interest is subject to change from time to time.Present applicable "+strTemp+" is "+dc.format(dblBaseRate)+" %");
						}
						else
						{
							if(strInterestType.equalsIgnoreCase("BR"))
							{
								dblDiffIntRate=dblInterestRate - dblBaseRate;
								strInterestRate="BR + "+dc.format(dblDiffIntRate)+"% p.a presently at "+dc.format(dblInterestRate)+"% p.a";
								strWhetherBRAvail="Y";
							}
							else
							{
								strInterestRate=Helper.correctDouble(rs2.getString("facility_interest"));
							}
						}
						strAdhocArr=strAdhocFac.split("~");
						{
							strVal1	= "Sub-Limit";
							
							if(rs1!=null){rs1.close();}
							rs1	= DBUtils.executeLAPSQuery("sel_sublimitVal^"+strAppNo+"^"+Helper.correctInt(rs2.getString("facility_group")));
							
							if(rs1.next())
							{
								strVal1	= strVal1+" -> "+correctNull(rs1.getString("com_facdesc"));
							}
						}
						
						
						
						strType = "1";
						
						if(rs1!=null){rs1.close();}
						rs1	= DBUtils.executeLAPSQuery("sel_facilityremarks^"+Helper.correctInt(rs2.getString("facility_sel_type")));
						if(rs1.next())
						{
							strfacsel	= Helper.correctNull(rs1.getString("STAT_DATA_DESC1"));
						}
						
						if(strVal2.equalsIgnoreCase("E")){	  strVal2	= "EMI";}
						else if(strVal2.equalsIgnoreCase("NE")){strVal2	= "Non EMI";}
						else if(strVal2.equalsIgnoreCase("OD")){strVal2	= "On Demand";}
						else if(strVal2.equalsIgnoreCase("LC")){strVal2	= "As Per LC Terms";}
						else if(strVal2.equalsIgnoreCase("CO")){strVal2	= "As Per Contract Terms";}
						else if(strVal2.equalsIgnoreCase("BG")){strVal2	= "As Per BG Rules";}
						else if(strVal2.equalsIgnoreCase("DD")){strVal2	= "On Due Date";}
						else if(strVal2.equalsIgnoreCase("PC")){strVal2	= "From the proceeds of PSC / by realization of bill";}
						else if(strVal2.equalsIgnoreCase("PS")){strVal2	= "By Realization of Export Bills";}
						else if(strVal2.equalsIgnoreCase("PR")){strVal2	= "By Realization of Respective Bills";}
						else if(strVal2.equalsIgnoreCase("TG")){strVal2	= "As per TCBG Rules";}
						else{strVal2	= "";}
						
//						if(strType.equalsIgnoreCase("1"))
//						{
//							arrOutCol.add(correctNull(rs2.getString("com_facdesc")));
//						}
//						else
//						{
							arrOutCol.add(correctNull(rs2.getString("facility_desc")));
//						}
						if(correctNull(rs2.getString("com_headfac")).equalsIgnoreCase("1"))
						{
							double dblAmt=Double.parseDouble(Helper.correctDouble(rs2.getString("facility_sancamt")));
							dblAmt=dblAmt/50;
							arrOutCol.add(String.valueOf(dblAmt));
						}else{
						arrOutCol.add(Helper.correctDouble(rs2.getString("facility_sancamt")));//1
						}
						arrOutCol.add(Helper.correctDouble(rs2.getString("facility_existing")));
						arrOutCol.add(strInterestRate);
						arrOutCol.add(Helper.correctInt(rs2.getString("facility_sno")));
						arrOutCol.add(strVal1);
						arrOutCol.add(Helper.correctInt(rs2.getString("facility_months")));
						arrOutCol.add(correctNull(rs2.getString("facility_for")));
					//	arrOutCol.add(strVal);
						arrOutCol.add(strfacsel);
						arrOutCol.add(strVal2);
						arrOutCol.add(correctNull(Helper.CLOBToString(rs2.getClob("facility_margin"))));
						strHoliday=Helper.correctInt(rs2.getString("facility_holidayperiod"));
						if(strHoliday.equalsIgnoreCase("0"))
							arrOutCol.add("Not Applicable");
						else
							arrOutCol.add(Helper.correctInt(rs2.getString("facility_holidayperiod")));
						arrOutCol.add(strInterestType);
						arrOutCol.add(Helper.correctDouble(rs2.getString("fac_metlifepremiumamt")));
						//for CBS Branch display
						//String strOrg_Name="";
						strQuery =SQLParser.getSqlQuery("sel_cbsdetails^" +strAppNo+"^"+strFacSno);
						if(rs3!=null)
						rs3.close();
						rs3 = DBUtils.executeQuery(strQuery);
						if(rs3.next())
						{
							String strOrg_Code=Helper.correctNull(rs3.getString("LOANDISBBRANCH"));
							strOrg_Name="";
							if(!strOrg_Code.equalsIgnoreCase(""))
							{
								if(rs4!=null)
								{
									rs4.close();
								}
								strQuery=SQLParser.getSqlQuery("selectorgname^"+strOrg_Code);
								rs4=DBUtils.executeQuery(strQuery);
								if(rs4.next())
								{
									strOrg_Name=Helper.correctNull((String)rs4.getString("org_name"));
									arrOutCol.add(strOrg_Name);
								//	hshRecord.put("strOrg_Name", strOrg_Name);
								}
								else{arrOutCol.add("");}
							}
							else{arrOutCol.add("");}
							}
							else{arrOutCol.add("");}
						
						strRoiType=Helper.correctNull(rs2.getString("FAC_INS_COMPANY_NAME"));
						if(rs4!=null){rs4.close();}
						if(!strRoiType.equalsIgnoreCase(""))
						{
							rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"+ strRoiType);
							if (rs4.next()) {
								arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//19
							}
							else{arrOutCol.add("");}
						}
						else{arrOutCol.add("");}
						
						arrOutCol.add(strRoiType);//20

						arrOutCol.add(Helper.correctDouble(rs2.getString("FAC_PREMIUM_TENOR")));//21
						arrOutCol.add(Helper.correctDouble(rs2.getString("FAC_PREMIUM_LOAN_AMOUNT")));//22
						arrOutCol.add(Helper.correctDouble(rs2.getString("FAC_INS_ACCOUNT_NO")));//23
						arrOutCol.add(Helper.correctDouble(rs2.getString("FAC_PREMIUM_AMOUNT")));//24
						StrInsCompanyName=Helper.correctNull(rs2.getString("FAC_INS_FUNDED_COMPANY_NAME"));
						if(rs4!=null){rs4.close();}
						if(!StrInsCompanyName.equalsIgnoreCase(""))
						{
							rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^223^"+ StrInsCompanyName);
							if (rs4.next()) {
								arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//25
							}
							else{arrOutCol.add("");}
						}
						else{arrOutCol.add("");}
						//end
						
						if(Helper.correctDouble(rs2.getString("facility_category")).equalsIgnoreCase("R"))
							arrOutCol.add("Regular Limit");
						else if(Helper.correctDouble(rs2.getString("facility_category")).equalsIgnoreCase("D"))
							arrOutCol.add("Additional Limit");
						else if(Helper.correctDouble(rs2.getString("facility_category")).equalsIgnoreCase("O"))
							arrOutCol.add("One Time Limit");
						else if(Helper.correctDouble(rs2.getString("facility_category")).equalsIgnoreCase("A"))
							arrOutCol.add("Adhoc Limit");
						else
							arrOutCol.add(" ");
						
						if(rs4!=null){rs4.close();}
						if(!Helper.correctNull(rs2.getString("fac_actualmargin")).equalsIgnoreCase(""))
						{
							rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^235^"+ Helper.correctNull(rs2.getString("fac_actualmargin")));
							if (rs4.next()) {
								arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//25
							}
							else{arrOutCol.add("");}
						}
						else{arrOutCol.add("");}
						if(rs4!=null){rs4.close();}
						if(!Helper.correctNull(rs2.getString("fac_actualrelaxed")).equalsIgnoreCase(""))
						{
							rs4 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^236^"+ Helper.correctNull(rs2.getString("fac_actualrelaxed")));
							if (rs4.next()) {
								arrOutCol.add(Helper.correctNull(rs4.getString("STAT_DATA_DESC1")));//25
							}
							else{arrOutCol.add("");}
						}
						else{arrOutCol.add("");}
						
						if(Helper.correctNull(rs2.getString("fac_marginrelax")).equalsIgnoreCase("Y"))
							arrOutCol.add("Yes");
						else if(Helper.correctNull(rs2.getString("fac_marginrelax")).equalsIgnoreCase("N"))
							arrOutCol.add("No");
						else
							arrOutCol.add("");
						arrOutCol.add(Helper.correctDouble(rs2.getString("facility_duedate")));
						arrOutCol.add(Helper.correctDouble(rs2.getString("facility_freshlimit")));
						arrOutCol.add(Helper.correctDouble(rs2.getString("facility_existing")));
						
						arrOutRow.add(arrOutCol);
						
					}
				}
				
				
				HashMap hshReqVa = new HashMap();
				hshReqVa.put("appno", strAppNo);
				hshReqVa.put("appid", strAppId);
				hshReqVa.put("PageType", "PROPOSALLC");
				hshReqVa.put("strPageType", "annexure");
				hshReqVa =	commdocument.getAnnexureII(hshReqVa);
				hshReqVa.put("page", "PROPOSAL LC");
				hshReqVal1.put("arrRowRating",hshReqVa.get("arrRowRating"));
				hshReqVal1.put("arrRowRatingRMD",hshReqVa.get("arrRowRatingRMD"));
				hshReqVal1.put("IntRat",hshReqVa.get("IntRat"));
				hshReqVal1.put("arrRecommRow", arrOutRow);		
				hshReqVal1.put("proposalnumber",strAppNo);
				
				hshReqVal1.put("cre_weight",hshReqVa.get("cre_weight"));
				hshReqVal1.put("cre_ratyear",hshReqVa.get("cre_ratyear"));
				hshReqVal1.put("cre_rattype",hshReqVa.get("cre_rattype"));
			
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getgeclidentification "+ce.toString());
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}	
				if(rs1 != null)
				{
					rs1.close();
				}	
				if(rs2 != null)
				{
					rs2.close();
				}	
				if(rs6 != null)
				{
					rs6.close();
				}	
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());					
			}
		}
			

		
		return hshReqVal1;
		
	}
	
	
	
}