package com.sai.laps.ejb.commdocument;

import java.awt.image.DataBuffer;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;


import java.security.Key;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.ejb.EJBException;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

import sun.misc.BASE64Encoder;

//import com.sai.fw.business.entities.User;
import com.inet.pool.c;
import com.sai.laps.ejb.ComProposal.ComProposalBean;
import com.sai.laps.ejb.appraisal.appraisalBean;
import com.sai.laps.ejb.attachphoto.AttachPhotoBean;
import com.sai.laps.ejb.bankapp.BankAppBean;
import com.sai.laps.ejb.dscr.DscrBean;
import com.sai.laps.ejb.financial.FinancialBean;
import com.sai.laps.ejb.mastapplicant.MastApplicantBean;
import com.sai.laps.helper.*;
import com.sai.laps.securitymaster.SecurityMasterBean;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.BufferedWriter;

@Stateless(name = "CommDocumentBean", mappedName = "CommDocumentHome")
@Remote (CommDocumentRemote.class)
public class CommDocumentBean extends BeanAdapter
	{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	


	static Logger log=Logger.getLogger(CommDocumentBean.class);
	

	public HashMap getDocTemplate(HashMap hshValues){
    	ResultSet rs=null;ResultSet rs1=null;ResultSet rs2=null;ResultSet rs3=null;
    	ArrayList arrValues=new ArrayList();
    	HashMap hshRecord=new HashMap();
    	ArrayList vecData = new ArrayList();
		ArrayList vecVal=new ArrayList();
    	HashMap hshQuery=null;
    	HashMap hshQueryValues=new HashMap();
    	String strQuery = "",strVehiType="",strauto_category="",strQuery1 = "",arrappminor="", guard_name="",checkStaff = "",strGradeId = "",mclrType = "",strfacsno="1",strDisbBrCode="",strApp_Status="",strapptype="";
    	String docid=Helper.correctNull((String)hshValues.get("doc_id"));
    	String strappno=Helper.correctNull((String)hshValues.get("appno"));
    	String documentCode=Helper.correctNull((String)hshValues.get("document_code"));
    	String constitionapp=Helper.correctNull((String)hshValues.get("strConstitution"));
    	String strUsrID=Helper.correctNull((String)hshValues.get("strUserId"));
    	String strStatus=Helper.correctNull((String)hshValues.get("strappstatus"));
    	String periodicity="",holidayperiod="0",appid="",doc_orgName="",doc_orgHead="",template="",template1="",strTemp="",strProcessDate="";
    	String docOpenType=Helper.correctNull((String)hshValues.get("docOpenType"));
    	ArrayList arrguaList=new ArrayList();
    	ArrayList arrguaRow=new ArrayList();
    	ArrayList arrcoappList=new ArrayList();
    	ArrayList arrcoappRow=new ArrayList();
    	ArrayList arrappRow=new ArrayList();
    	ArrayList arrappList=new ArrayList();

    	ArrayList arrpropRow=new ArrayList();
    	ArrayList arrpropList=new ArrayList();
    	ArrayList arrcoobligRow=new ArrayList();
    	ArrayList arrcoobligList=new ArrayList();
    	
		ArrayList arrRowGold = new ArrayList();
		String prdcode=Helper.correctNull((String)hshValues.get("prdcode"));
		String strOrgCode=Helper.correctNull((String)hshValues.get("strOrgCode"));
		ArrayList arryRowagcp=new ArrayList();
		ArrayList arryColagcp=new ArrayList();
		java.text.NumberFormat jtn= java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);	
		java.text.NumberFormat jtn1= java.text.NumberFormat.getInstance();
		jtn1.setMaximumFractionDigits(1);
		jtn1.setMinimumFractionDigits(1);
		jtn1.setGroupingUsed(false);
		int itemp=0,appcoappdetailslno=1,coobligguaaddslno=1,coobligguaDetslno=1,appcoappslno=1;
		long intDatediff=0;
		String[] strArrsno={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
		try{
	 		ComProposalBean compbean = new ComProposalBean();
	 		
		
			rs=DBUtils.executeLAPSQuery("checkcostloanprd^"+strappno);
			if(rs.next())
			{
				strProcessDate=Helper.correctNull(rs.getString("loan_releasedateofmclr"));
				if(strProcessDate.equalsIgnoreCase(""))
					strProcessDate=Helper.getCurrentDateTime();
				strDisbBrCode=Helper.correctNull(rs.getString("LOAN_DOC_BRANCHCODE"));
			}
			if(rs!=null)
				rs.close();
			rs=DBUtils.executeLAPSQuery("sel_dynamicdocumentmaster^"+docid);
    		if(rs.next()){
    			intDatediff=Helper.dateDiff(Helper.correctNull(rs.getString("doc_createddate")),strProcessDate);
    			if(intDatediff<0)
    				strProcessDate=Helper.correctNull(rs.getString("doc_createddate"));
    		}
    		 //for  @Branchname
			 String doc_branchcode="";
		
			 if(rs!=null){rs.close();}
				if(strStatus.equalsIgnoreCase("pa")){
					rs=DBUtils.executeLAPSQuery("sel_doc_branchdet^"+strappno);		 
					if(rs.next())
					{
						 doc_branchcode=correctNull(rs.getString("loan_doc_branchcode"));
					}
				}
				else if(strStatus.equalsIgnoreCase("op")){
	   				rs=DBUtils.executeLAPSQuery("sel_cbsdetails^"+strappno+"^1");		 
	   				if(rs.next())
	   				{
	   					doc_branchcode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
	   				}
				}
			 //end
    		if(rs!=null)
				rs.close();
    		if(documentCode.equalsIgnoreCase("DOC_952CO_OBLIG")||documentCode.equalsIgnoreCase("DOC_952") || documentCode.equalsIgnoreCase("DOC_AADHAAR"))
    		{
    			rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
        		if(rs.next()){
        			
        			strTemp="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
        		
        		}
        		if(rs1!=null)
        			rs1.close();
        		if(documentCode.equalsIgnoreCase("DOC_952"))
        			rs1=DBUtils.executeLAPSQuery("sel_appcoappdetailsprint^"+strappno);
        		else if(documentCode.equalsIgnoreCase("DOC_952CO_OBLIG"))
        			rs1=DBUtils.executeLAPSQuery("sel_coobligdetailsprint^"+strappno);
        		else if(documentCode.equalsIgnoreCase("DOC_AADHAAR"))
        			rs1=DBUtils.executeLAPSQuery("sel_applicantiddemo_retail_indiv^"+strappno);
        		while(rs1.next())
        		{
        			template=strTemp;
        			if(rs!=null){rs.close();}
    				//rs=DBUtils.executeLAPSQuery("sel_orgheadusername^"+strOrgCode);	
    				rs=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
    				if(rs.next())
    				{
    					//hshRecord.put("orgHead_name",Helper.correctNull(rs.getString("usr_fname")));
    					hshRecord.put("orgHead_name",Helper.correctNull(rs.getString("org_headname")));
    				}
    				if(template.contains("@orgHead_name"))
    				{
    					template=template.replaceAll("@orgHead_name",Helper.correctNull((String)hshRecord.get("orgHead_name")));
    				}
    				if(rs!=null){rs.close();}
    				rs=DBUtils.executeLAPSQuery("sel_organisationdetails^"+strOrgCode);		 
    				if(rs.next())
    				{
    					hshRecord.put("org_name",Helper.correctNull(rs.getString("OrganisationName")));
    					hshRecord.put("OrganisationAddress1",Helper.correctNull(rs.getString("OrganisationAddress1")));
    					hshRecord.put("OrganisationAddress2",Helper.correctNull(rs.getString("OrganisationAddress2")));
    					hshRecord.put("OrganisationCity",Helper.correctNull(rs.getString("OrganisationCity")));
    					hshRecord.put("Organisationzip",Helper.correctNull(rs.getString("Organisationzip")));
    					hshRecord.put("OrganisationState",Helper.correctNull(rs.getString("OrganisationState")));
    					
    					hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("OrganisationName")));
    					hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("OrganisationCity")));
    					hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("Organisationzip")));
    					
    				}
    				
    				if(!strDisbBrCode.equalsIgnoreCase(""))
    				{
    					if(rs!=null){rs.close();}
    					rs=DBUtils.executeLAPSQuery("sel_organisationname^"+strDisbBrCode);		 
    					if(rs.next())
    					{
    						hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("org_name")));
    						hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("city_name")));
    						hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("org_zip")));
    					}
    				}
    				if(template.contains("@branchDetails"))
    				{
    					String tempbranchdetail=Helper.correctNull((String)hshRecord.get("strDisbBrname"))+", "+Helper.correctNull((String)hshRecord.get("strDisbBrCity"))+"-"+Helper.correctNull((String)hshRecord.get("strDisbBrzip"));
    					template=template.replaceAll("@branchDetails", tempbranchdetail); 
    				}
    				String borrowename="",aadhaarno="",cbsid="";
    				
    				 arrappRow=new ArrayList();
    		    	 arrappList=new ArrayList();
    				 if(rs2!=null){rs2.close();}
    				 rs2=DBUtils.executeLAPSQuery("sel_app_con_details_demoid^"+strappno+"^"+Helper.correctNull(rs1.getString("perapp_id")));
    				  while(rs2.next())
    					   {		
    					  String strCbsACno=correctNull(rs2.getString("PERAPP_CBSID"));
    					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
    					  arrappList=new ArrayList();
    					  arrappList.add(correctNull(rs2.getString("FULLNAME")));
    					  
    					  if(residentType.equals("N"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("CON_COMADDR1")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMADDR2")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMCITYNAME")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMZIP")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMSTATENAME")));
    					  }
    					  else
    					  {
    						  arrappList.add(correctNull(rs2.getString("con_permaddr1")));
        					  arrappList.add(correctNull(rs2.getString("con_permaddr2")));
        					  arrappList.add(correctNull(rs2.getString("con_permcity")));
        					  arrappList.add(correctNull(rs2.getString("con_permzip")));
        					  arrappList.add(correctNull(rs2.getString("con_permstate")));
    					  }
    					 
    					 
    					  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
    					    if(rs3!=null){ rs3.close(); }
    					     rs3=DBUtils.executeQueryCBSConnection(strQuery1);
    					     if(rs3.next()){
    					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
    					      guard_name=correctNull(rs3.getString("minor_guard_name"));
    					      }
    					     
    					 	 String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
    					   if(arrappminor.equalsIgnoreCase("Y"))
					      {
					     	 arrappList.add(guard_name);
					     	 arrappList.add("M/G");	 
					      }
					      else if(arrappchilddesp.equalsIgnoreCase("M"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("PERAPP_FATNAME")));
    						  arrappList.add("S/o");	
    					  }
    					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
    						  arrappList.add("W/o");	
    					  } 
    					  else if(arrappchilddesp.equalsIgnoreCase("F"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("PERAPP_FATNAME")));
    						  arrappList.add("D/o");	 
    					  }					 
    					  else
    					  {
    						  arrappList.add(correctNull(rs2.getString("PERAPP_FATNAME")));
    						  arrappList.add(" ");	
    					  }  
    					  String strAge=Helper.calculateAGE(correctNull(rs2.getString("DOB")));
    					  arrappList.add(Helper.correctNull(strAge));
    					 
    						ArrayList nonindvRow=new ArrayList();
    						  ArrayList temp1=new ArrayList();
    						  ArrayList temp2=new ArrayList();
    						  String perappid=correctNull(rs2.getString("perapp_id"));
    						  String divisiontype="",div_name="",nonindiv="";;
    							if(rs!=null){rs.close();}
    							int dcount=0,spcount=0,pcount=0,tcount=0;
    							String temp="";
    							itemp=0;
    							String spconcernsubtype="",spsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
    							while(rs.next())
    							{	strCbsACno=correctNull(rs2.getString("PERAPP_CBSID"));
    								if(!spconcernsubtype.equals(""))
    								{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ spsubtype="dif";	}
    								}
    								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(spsubtype.equals("same"))
    							{ 
    							if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its "); }
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(spsubtype.equals("same"))
    									{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								nonindvRow.add(temp1);
    								spcount++;
    							}
    							temp2.add(nonindvRow);
    							nonindvRow=new ArrayList();
    							itemp=0;
    							String dconcernsubtype="";	String dsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
    							while(rs.next())
    							{
    								if(!dconcernsubtype.equals(""))
    								{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ dsubtype="dif";	}
    								}
    								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(dsubtype.equals("same"))
    							{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its ");	}
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(dsubtype.equals("same"))
    									{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								nonindvRow.add(temp1);
    								dcount++;
    							}
    							temp2.add(nonindvRow);
    							nonindvRow=new ArrayList();
    							itemp=0;
    							String ptconcernsubtype="",ptsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
    							while(rs.next())
    							{
    								if(!ptconcernsubtype.equals(""))
    								{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ ptsubtype="dif"; }
    								}
    								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(ptsubtype.equals("same"))
    							{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its "); }
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(ptsubtype.equals("same"))
    									{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								nonindvRow.add(temp1);
    								pcount++;
    							}
    							temp2.add(nonindvRow);
    							nonindvRow=new ArrayList();
    							itemp=0;
    							String tconcernsubtype="",tsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
    							while(rs.next())
    							{
    								if(!tconcernsubtype.equals(""))
    								{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ tsubtype="dif"; }
    								}
    								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(tsubtype.equals("same"))
    							{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its "); }
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(tsubtype.equals("same"))
    									{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								nonindvRow.add(temp1);
    								tcount++;
    							}
    							temp2.add(nonindvRow);
    							arrappList.add(temp2);
    							arrappList.add(correctNull(rs2.getString("PERAPP_CONSTITUTIONNEW")));
    							arrappList.add(correctNull(rs2.getString("PERAPP_CBSID")));
    							arrappList.add(correctNull(rs2.getString("app_type")));

    							arrappList.add(correctNull(rs2.getString("app_type")));
    					  arrappRow.add(arrappList);
    				  }
    				  if(template.contains("@appAddress"))
    				  {
    					  StringBuffer tempappList=new StringBuffer();	
    					  StringBuffer tempappList1=new StringBuffer();	

    					  tempappList.append("<span align='justify'>");
    					  ArrayList arrappRowdet=new ArrayList();
    					     if(arrappRow.size()>0 && arrappRow!=null)
    					     {
    					     	for(int i=0;i<arrappRow.size();i++)
    					     	{
    					     		arrappRowdet=(ArrayList)arrappRow.get(i);
    							     String constition=(String) arrappRowdet.get(10);
    							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
    					     		if(arrappRow.size()==1)
    					     		{
    							    	if(constition.equals("01"))
    							    	{
    							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");

    							    	}
    							    	else
    							    	{
    					     				if(arrIndvRow.size()>0)
    									    {
    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    						     				for(int j=0;j<arrIndvRow.size();j++)
    						     				{
    									    		ArrayList temparr=new ArrayList();
    									    		ArrayList temparr1=new ArrayList();
    									    		temparr1=(ArrayList) arrIndvRow.get(j);
    									    		if(temparr1.size()>0)
    									    		{
    									    		tempappList.append(""+temparr1.get(0)+"<br/>");
    									    		tempappList1.append(""+temparr1.get(0)+"");
    									    		for(int k=1;k < temparr1.size();k++)
    									    		{
    									    			temparr=(ArrayList) temparr1.get(k);
    												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
    										     		tempappList1.append(temparr.get(0)+"  ");

    									    		}}
    						     				}
    						     				tempappList.append("");
    									    }
    					     				else
    					     				{
    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");

    					     				}
    							    	}
    					     		}
    					     		else
    					     		{
    					     			if(constition.equals("01"))
    					     			{
    							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    					     			}
    					     			else
    					     			{
    					     				if(arrIndvRow.size()>0)
    									    {
    								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    						     				for(int j=0;j<arrIndvRow.size();j++)
    						     				{
    									    		ArrayList temparr=new ArrayList();
    									    		ArrayList temparr1=new ArrayList();
    									    		temparr1=(ArrayList) arrIndvRow.get(j);
    									    		if(temparr1.size()>0)
    									    		{
    									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
    									    		tempappList1.append(""+temparr1.get(0)+"");
    									    		for(int k=1;k < temparr1.size();k++)
    									    		{
    									    			temparr=(ArrayList) temparr1.get(k);
    												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
    										     		tempappList1.append(temparr.get(0)+"  ");

    									    		}}
    						     				}
    						     				tempappList.append("<br>");
    									    }
    					     				else
    					     				{
    								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");

    					     				}
    					     				
    					     			}
    					     		}
    					     		String borrowername="";
    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
    					     			borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
    					     		}else{
    					     			 borrowername=Helper.correctNull((String) arrappRowdet.get(0));
    					     		}
   					     		  cbsid=Helper.correctNull((String) arrappRowdet.get(11));
   					     		strapptype=Helper.correctNull((String) arrappRowdet.get(12));
   					     	        compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
    					     		
    					     	}
    					     }
    					     tempappList.append("</span>");
    					     template=template.replaceAll("@appAddress", tempappList.toString()); 
    				  }
    				  if(rs!=null){rs.close();}
      				rs=DBUtils.executeLAPSQuery("sel_perappl_aadhaar^"+Helper.correctNull(rs1.getString("perapp_id")));		 
      				if(rs.next())
      				{
      					borrowename=Helper.correctNull(rs.getString("borrowename"));
      					aadhaarno=Helper.correctNull(rs.getString("PERAPP_AADHAAR"));
      					cbsid=Helper.correctNull(rs.getString("PERAPP_CBSID"));
      					strapptype=Helper.correctNull(rs.getString("app_type"));
      				}
      				if(template.contains("@Aadhaar"))
      				{
      					template=template.replaceAll("@Aadhaar", aadhaarno); 
      				}
      				if(template.contains("@Borrower") )
      				{
  			     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowename, cbsid,strStatus,strapptype);
      					template=template.replaceAll("@Borrower", borrowename);
      					//log.info("@Borrower");
      				}
      				if(template.contains("@CreditFacilities"))	
      				{
      					 hshValues.put("strTemplate",template);
      					 template=getDocCreatedfacility(hshValues);
      					 hshRecord.put("doc_template",template);
    				}
    				
    				if(template.contains("@Litigations"))
    				{
    				StringBuffer sbLitigations=new StringBuffer();
					sbLitigations.append("<Table border='1' width='95%' align='center'>");
					sbLitigations.append("<tr align='center'>");
				    sbLitigations.append("<td>Sl.No.</td>");
				    sbLitigations.append("<td>Name of the Bank/ Financiers/others With whom facing</td>");
				    sbLitigations.append("<td>Nature of Litigation</td>");
				    sbLitigations.append("<td>Date of Litigation</td>");
				    sbLitigations.append("<td>Claim amount (Rs.)</td>");
                    sbLitigations.append("<td>Other Claims</td>");
                    sbLitigations.append("<td>Present Position</td>");
                    sbLitigations.append("</tr>");
                    
                    int i=0;
                    
                    strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+Helper.correctNull(rs1.getString("perapp_id")));
					rs = DBUtils.executeQuery(strQuery);
					while(rs.next())
					{
						if(Helper.correctNull((String)rs.getString("PERBANK_LITIGATIONS")).equals("Y"))
						{
							sbLitigations.append("<tr align='center'>");
							sbLitigations.append("<td>"+ (++i)+"&nbsp;</td>");
							
							String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
							rs2 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
							if(rs2.next())
							{
								strBankingcode=Helper.correctNull(rs2.getString("STAT_DATA_DESC1"));//1
							}
							else
							{
								strBankingcode="";
							}
							sbLitigations.append(" <td align='left'>"+strBankingcode+"&nbsp;</td>");
							sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_NATURELITIGATION"))+"&nbsp;</td>");
							sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_DATELITIGATION"))+"&nbsp;</td>");
							sbLitigations.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_CLAIMAMOUNT"))))+"&nbsp;</td>");
							sbLitigations.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_OTHERCLAIMS"))))+"&nbsp;</td>");
							sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_PRESENTPOS"))+"&nbsp;</td>");
							sbLitigations.append("</tr>");
						}
					}
					
					if(i==0)
					{
						sbLitigations.append("<tr align='center'>");
						sbLitigations.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
						sbLitigations.append("</tr>");
					}

					sbLitigations.append("</table>");
					template=template.replaceAll("@Litigations", sbLitigations.toString());
                    
                    
				}


    				 if(template.contains("@date"))
    				 {
    				 	  String date=Helper.getCurrentDateTime();
    					  template=template.replaceAll("@date", date); 
    				 }
    				 
    				 String strBranch="",strBranchCity="";
    				 if(rs2!=null){ rs2.close(); }
    	 				rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
    	 				if(rs2.next()){
    	 						strBranch=correctNull(rs2.getString("ORG_NAME"));
    		 					if(rs3!=null){rs3.close();}
    							rs3=DBUtils.executeLAPSQuery("sel_cityname^"+correctNull(rs2.getString("ORG_CITY")));		 
    							if(rs3.next())
    							{
    								strBranchCity=correctNull(rs3.getString("city_name"));
    							}
    	 					
    	 				}
    	 				template=template.replaceAll("@Branchname", strBranch);
    	 				template=template.replaceAll("@BranchCity", strBranchCity);
     				
    				template1+=template+"<br style='page-break-before:always'>";
    				
    				
    				
        		}
        		
        		hshRecord.put("doc_template",template1);	
    		}
    		else if(documentCode.equalsIgnoreCase("DOC_953"))
    		{
    			rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
        		if(rs.next())
        		{
        			strTemp="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
        		}
        		
        		template=strTemp;
        		hshValues.put("template", template);
				HashMap hshval=new HashMap();
				hshval=getDOC953_data(hshValues);
        		
    			hshRecord.put("doc_template",hshval.get("template1"));		
    		}
    		else
    		{
    			String borrowename1="",cbsid1="",strapptype1="";
    			rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
        		if(rs.next()){
        			
        			template="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
        		}
    			rs3=DBUtils.executeLAPSQuery("sel_borrowerdetails_doc^"+strappno);
    			if(rs3.next())
    			{
      			  appid=correctNull(rs3.getString("demo_appid"));

    			}
    			rs1=DBUtils.executeLAPSQuery("sel_perappl_aadhar_ret^"+appid);		 
    				if(rs1.next())
    				{
    					borrowename1=Helper.correctNull(rs1.getString("borrowename"));
    					cbsid1=Helper.correctNull(rs1.getString("PERAPP_CBSID"));
    					strapptype1=Helper.correctNull(rs1.getString("app_type"));
    				}
    				if(template.contains("@Borrower") )
    				{
    		     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowename1, cbsid1,strStatus,strapptype1);
    					template=template.replaceAll("@Borrower", borrowename1);
    				}
    		rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
    		if(rs.next()){
    			
    			template="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
    			String tenar="0";
           		rs1=DBUtils.executeLAPSQuery("sel_borrowerdetails_doc^"+strappno);
    			if(rs1.next())
    			{
    			  String borrowername=correctNull(rs1.getString("perapp_name"));
    			  String loanamount=correctNull(rs1.getString("loan_recmdamt"));
    			  tenar=correctNull(rs1.getString("loan_reqterms"));
    			  String inwardno=correctNull(rs1.getString("app_inwardno"));
    			  appid=correctNull(rs1.getString("demo_appid"));
    			  String appno=correctNull(rs1.getString("app_no"));
    			  String interestrate=correctNull(rs1.getString("loan_baserate"))+" % MCLR +"+"("+correctNull(rs1.getString("spread"))+") % Spread";
    			  String interesttype=correctNull(rs1.getString("loan_inttype"));
    			  String emi=correctNull(rs1.getString("LOAN_SANCEMI"));
    			  String cbsid=correctNull(rs1.getString("perapp_cbsid"));
    			  String cbsaccno=correctNull(rs1.getString("cbs_accountno"));
    			 // String branchname=correctNull(rs1.getString("org_name"));
    			  String LOAN_PURPOSEOFLOAN=Helper.CLOBToString(rs1.getClob("LOAN_PURPOSEOFLOAN"));
				  String fatname=correctNull(rs1.getString("perapp_fatname"));
				  String loan_modintrate=correctNull(rs1.getString("loan_sancroi"));
				  String loan_mclrtype=correctNull(rs1.getString("loan_mclrtype"));
				  String strCSP=Helper.correctDouble(rs1.getString("LOAN_CREDITRSKVAL"));
				  String strBSP=Helper.correctDouble(rs1.getString("LOAN_BUSSTATVAL"));
				  String LOAN_AMTREQD=correctNull(rs1.getString("LOAN_AMTREQD"));
				  String strappdchilddesp=correctNull(rs1.getString("PERAPP_SEX"));
				  String strbaserate=correctNull(rs1.getString("loan_baserate"));
				  prdcode=correctNull(rs1.getString("app_prdcode"));
				  String sancamtinwords=Helper.figtoWords(loanamount);
				  String loan_mclrReset=correctNull(rs1.getString("LOAN_MCLRTABCODE"));
				  String LOAN_REPAYMENTTYPE=correctNull(rs1.getString("LOAN_REPAYMENTTYPE"));
				  String spread= Helper.correctNull(rs1.getString("spread"));
				  String mclrRelDate= Helper.correctNull(rs1.getString("LOAN_RELEASEDATEOFMCLR"));
				  String aadhaarno=Helper.correctNull(rs1.getString("PERAPP_AADHAAR"));
				  String strduedate=Helper.correctNull(rs1.getString("LOAN_DUEDATE"));
				  if(strappdchilddesp.equalsIgnoreCase("M"))
				  {
					  hshRecord.put("strappdchilddesp","S/o");	
				  }
				  else if(strappdchilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
				  {
					  hshRecord.put("strappdchilddesp","W/o");	
				  } 
				  else if(strappdchilddesp.equalsIgnoreCase("F"))
				  {
					  hshRecord.put("strappdchilddesp","D/o");	
				  } 
				  else
				  {
					  hshRecord.put("strappdchilddesp"," ");	
				  }
				  String strOption = "",strText="";
				  if(!loan_mclrtype.equalsIgnoreCase(""))
					{
						strOption = loan_mclrtype;
						strText = loan_mclrtype.split("@")[0];
						
						if(strText.equalsIgnoreCase("O"))
							mclrType = "Over night";
						else if(strText.equalsIgnoreCase("M"))
							mclrType = "1 Month";
						else if(strText.equalsIgnoreCase("Q"))
							mclrType = "3 months";
						else if(strText.equalsIgnoreCase("H"))
							mclrType = "6 months";
						else if(strText.equalsIgnoreCase("Y"))
							mclrType = "1 year";
						else
						{
							if(rs2!=null)
								rs2.close();
							rs2=DBUtils.executeLAPSQuery("selcbsiddatadesc^34^"+strText);
							if(rs2.next())
							{
								mclrType=Helper.correctNull(rs2.getString("cbs_static_data_desc"));
							}
						}
					}
				  if(LOAN_REPAYMENTTYPE.equals("1"))
				  {
					  LOAN_REPAYMENTTYPE="EMI";
				  }
				  else if(LOAN_REPAYMENTTYPE.equals("2"))
				  {
					  LOAN_REPAYMENTTYPE="NON-EMI";
				  }
				  else if(LOAN_REPAYMENTTYPE.equals("8"))
				  {
					  LOAN_REPAYMENTTYPE="On Due Date";
				  }
				  else if(LOAN_REPAYMENTTYPE.equals("12"))
				  {
					  LOAN_REPAYMENTTYPE="On Demand";
				  }
				  else if(LOAN_REPAYMENTTYPE.equals("13"))
				  {
					  LOAN_REPAYMENTTYPE="Equal Monthly Installment";
				  }
				  else if(LOAN_REPAYMENTTYPE.equals("14"))
				  {
					  LOAN_REPAYMENTTYPE="2 Yearly Equal Installment";
				  } 
				  
				  hshRecord.put("borrowername",borrowername);	
    			  //hshRecord.put("branchname",branchname);	
    			  hshRecord.put("approverfatname",fatname);	
    			  hshRecord.put("LOAN_PURPOSEOFLOAN",LOAN_PURPOSEOFLOAN);	
    			  hshRecord.put("loanamount",loanamount);	
    			  hshRecord.put("interesttype",interesttype);	
    			  hshRecord.put("loan_modintrate",loan_modintrate);	
    			  hshRecord.put("loan_mclrtype",loan_mclrtype);	
    			  hshRecord.put("LOAN_AMTREQD",LOAN_AMTREQD);	
    			  hshRecord.put("strbaserate",strbaserate);	
    			  hshRecord.put("LOAN_REPAYMENTTYPE",LOAN_REPAYMENTTYPE);	
    			  hshRecord.put("tenar",tenar);	
    			  hshRecord.put("emi",emi);	
    			  String replaceborrower=template.replaceAll("@Borrower",borrowername);
    			  String loanamtreplace=replaceborrower.replaceAll("@Loanamount",loanamount);
    			  String tenarreplace=loanamtreplace.replaceAll("@Tenor",tenar);
    			  String inwardnoreplace=tenarreplace.replaceAll("@Inwardnumber",inwardno);
    			  String appidreplace=inwardnoreplace.replaceAll("@ApplicationID",appid);
    			  String appnoreplace=appidreplace.replaceAll("@Applicationnumber",appno);
    			  String interestratereplace=appnoreplace.replaceAll("@Interestrate",loan_modintrate);
    			  String interesttypereplace=interestratereplace.replaceAll("@Interesttype",interesttype);
    			  String emireplace=interesttypereplace.replaceAll("@EMI",emi);
    			  String cbsidreplace=emireplace.replaceAll("@CBSID",cbsid);
    			  String cbsaccnoreplace=cbsidreplace.replaceAll("@CBSAccountnumber",cbsaccno);
    			 // String branchnamereplace=cbsaccnoreplace.replaceAll("@Branchname",branchname);
    			  template=cbsaccnoreplace;
    			  template=template.replaceAll("@Sancamount", sancamtinwords); 
    			  template=template.replaceAll("@BaseRate", strbaserate); 
    			  template=template.replaceAll("@Purpose", LOAN_PURPOSEOFLOAN); 
    			  template=template.replaceAll("@spreadrate", spread); 
    			  template=template.replaceAll("@Aadhaar", aadhaarno); 
    			  template=template.replaceAll("@duedate", strduedate.replaceAll("/","-")); 

    			  String tempmclrRelDate="";
    			  if(!mclrRelDate.equalsIgnoreCase(""))
    			  {
    				  if(rs2!=null)
    					  rs2.close();
    				  
    				  if(!loan_mclrtype.equalsIgnoreCase(""))
  						{
    				  
    					  strQuery=SQLParser.getSqlQuery("sel_mclrspreadrate^"+mclrRelDate+"^"+loan_mclrtype.split("@")[0]);
	    				  rs2=DBUtils.executeQuery(strQuery);
	    				  if(rs2.next())
	    				  {
	    					  tempmclrRelDate=jtn.format(Double.parseDouble(Helper.correctDouble(rs2.getString("mclr_baseratespread"))));
	    				  }
  						}
    			  }
    			  template=template.replaceAll("@mclrrate", tempmclrRelDate); 
    			  template=template.replaceAll("@creditrisk", jtn.format(Double.parseDouble(Helper.correctDouble(strCSP))));
    			  template=template.replaceAll("@fixedspread", jtn.format(Double.parseDouble(Helper.correctDouble(strBSP)))); 
    			  

    			 if(template.contains("@date_of_release"))
    			 {
    				 if(!mclrRelDate.equalsIgnoreCase(""))
    				 {
	    				 boolean bflag=true;
	    				 String strDay="";
	    				 String[] strSTArr={"01","21","31"};
	    				 String[] strRDArr={"03","23"};
	    				 String[] strNDArr={"02","22"};
	    				 
	    				 for(int a=0;a<strSTArr.length;a++)
	    				 {
	    					 if(strSTArr[a]==mclrRelDate.substring(0, 2))
	    					 {
	    						 strDay= mclrRelDate.substring(0, 2)+"st ";
	    						 bflag=false;
	    					 }
	    				 }
	    				 if(bflag)
	    				 {
	    					 for(int a=0;a<strRDArr.length;a++)
		    				 {
		    					 if(strRDArr[a]==mclrRelDate.substring(0, 2))
		    					 {
		    						 strDay= mclrRelDate.substring(0, 2)+"rd ";
		    						 bflag=false;
		    					 }
		    				 } 
	    				 }
	    				 if(bflag)
	    				 {
	    					 for(int a=0;a<strNDArr.length;a++)
	    					 {
	    						 if(strNDArr[a]==mclrRelDate.substring(0, 2))
	    						 {
	    							 strDay= mclrRelDate.substring(0, 2)+"nd ";
	    							 bflag=false;
	    						 }
	    					 } 
	    				 }
	    				 if(bflag)
	    				 {
	    					 strDay= mclrRelDate.substring(0, 2)+"th "; 
	    				 }
	    				 
	    				 
	    				  int month=Integer.parseInt(mclrRelDate.substring(3, 5));
	    				  String mclrdatewords=strDay+ " day of "+ Helper.getMonths(month) +" "+ mclrRelDate.substring(6,10);
	    			
	    				  template=template.replaceAll("@date_of_release", mclrdatewords); 
    				 }
   				  template=template.replaceAll("@date_of_release",""); 
    			 }
    			  
    			  
    			  if(loan_mclrReset.equals("AMC12")||loan_mclrReset.equals("NMC12"))
    			  {
    				  loan_mclrReset="annually";
    			  }
    			  else if(loan_mclrReset.equals("AMC06")||loan_mclrReset.equals("NMC06"))
    			  {
    				  loan_mclrReset="half yearly";
    			  }
    			  else if(loan_mclrReset.equals("AMC03")||loan_mclrReset.equals("NMC03"))
    			  {
    				  loan_mclrReset="quarterly";
    			  }
    			  else if(loan_mclrReset.equals("AMC01")||loan_mclrReset.equals("NMC01"))
    			  {
    				  loan_mclrReset="monthly";
    			  }
    			  else if(loan_mclrReset.equals("AMC00")||loan_mclrReset.equals("NMC00"))
    			  {
    				  loan_mclrReset="daily";
    			  }
    			  if(template.contains("@MCLRreset"))
    			  {
    				  template=template.replaceAll("@MCLRreset", loan_mclrReset); 
    			  }
    			  template=template.replaceAll("@Mclrtype", mclrType); 
    			  
    			  if(!Helper.correctNull((String)hshValues.get("hidapprovercbsid")).equalsIgnoreCase(""))
    			  {
    				  if(rs2!=null){rs2.close();}
    				  
    				  rs2=DBUtils.executeLAPSQuery("sel_approvercbsid^"+Helper.correctNull((String)hshValues.get("hidapprovercbsid")));
    				  if(rs2.next())
    				  {
	    				  String approvername=correctNull(rs2.getString("perapp_name"));
	    				  if(documentCode.equalsIgnoreCase("DOC_981"))
	    					  approvername="---------------------------------";
	    				  template=template.replaceAll("@Approvername", approvername); 
	    				 
	    				  String strtitlefath="";
	    				  String arrguachilddesp=correctNull(rs2.getString("PERAPP_SEX"));
	    				  if(arrguachilddesp.equalsIgnoreCase("M"))
	    				  {
	    					  strtitlefath="S/o";	
	    				  }
	    				  else if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
	    				  {
	    					  strtitlefath="W/o";	
	    				  } 
	    				  else if(arrguachilddesp.equalsIgnoreCase("F"))
	    				  {
	    					  strtitlefath="D/o";	
	    				  } 
	    				  else
	    				  {
	    					  strtitlefath=" ";	
	    				  }
	    				  String approverfatname="";
	    				  if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
	    					  approverfatname=strtitlefath +" "+ correctNull(rs2.getString("indinfo_spouse_name"));
	    				  else
	    					  approverfatname=strtitlefath +" "+ correctNull(rs2.getString("perapp_fatname"));
	    				  if(documentCode.equalsIgnoreCase("DOC_981"))
	    					  approverfatname="---------------------------------";
	    				  template=template.replaceAll("@Approverfathername", approverfatname); 
	
	    				  hshRecord.put("approverfatname",approverfatname);	
	    				  
	    				  String staffid="K"+Helper.correctNull(rs2.getString("INDINFO_STAFF_ID"));

	    				  if(template.contains("@approverdesignation"))
	    				  {
	        				  if(rs2!=null){rs2.close();}
	    					  strQuery=SQLParser.getSqlQuery("sel_cbsstaticdata_userdesign^"+staffid);
		    				  rs2=DBUtils.executeQuery(strQuery);
		    				  if(rs2.next())
		    				  {
		    					  template=template.replaceAll("@approverdesignation",Helper.correctNull(rs2.getString("CBS_STATIC_DATA_DESC")));	
		    				  }
		    				  else
		    					  template=template.replaceAll("@approverdesignation"," ");
	    				  }
    				  }
    			  }
    			  else
    			  {
    				  template=template.replaceAll("@approverdesignation"," ");
    				  template=template.replaceAll("@Approverfathername"," ");
    				  template=template.replaceAll("@Approvername"," ");
    			  }
				  String borrowwer_staffid="";
    			  if(template.contains("@staffno"))
    			  {
    				  if(rs2!=null){rs2.close();}
					  strQuery=SQLParser.getSqlQuery("sel_staffid_indinfo^"+appid);
    				  rs2=DBUtils.executeQuery(strQuery);
    				  if(rs2.next())
    				  {
    					  borrowwer_staffid=Helper.correctNull(rs2.getString("INDINFO_STAFF_ID"));	
    				  }
					  template=template.replaceAll("@staffno",borrowwer_staffid);	
    			  }
    			  
    			  if(template.contains("@staffdesignation"))
    			  {
    				  borrowwer_staffid="K"+borrowwer_staffid;
    				  if(rs2!=null){rs2.close();}
					  strQuery=SQLParser.getSqlQuery("sel_cbsstaticdata_userdesign^"+borrowwer_staffid);
    				  rs2=DBUtils.executeQuery(strQuery);
    				  if(rs2.next())
    				  {
    					  template=template.replaceAll("@staffdesignation",Helper.correctNull(rs2.getString("CBS_STATIC_DATA_DESC")));	
    				  }
    			  }
    			  if(template.contains("@staffworkingbranch"))
    			  {
    				  if(rs2!=null){rs2.close();}
					  strQuery=SQLParser.getSqlQuery("sel_orglevel_usinguserid^"+borrowwer_staffid);
    				  rs2=DBUtils.executeQuery(strQuery);
    				  if(rs2.next())
    				  {
    					  template=template.replaceAll("@staffworkingbranch",Helper.correctNull(rs2.getString("org_name")));	
    				  }
    			  }
    			  
    			  
    			  if(rs2!=null){ rs2.close(); }
    			  String SancRefNo="";
				  rs2 = DBUtils.executeLAPSQuery("sel_SancRefNo^" + strappno);
				  while(rs2.next())
				  {
					  SancRefNo=correctNull(rs2.getString("finaclesancrefno"));
				  }
				  template=template.replaceAll("@Sancreference", SancRefNo); 
				  
				  if(rs2!=null){ rs2.close(); }
    			  String SancDate="",strSancAuth="";
				  rs2 = DBUtils.executeLAPSQuery("compropform6^" + strappno);
				  if(rs2.next())
				  {
					  SancDate=correctNull(rs2.getString("app_processdate"));
				  }
				  if(rs2!=null){ rs2.close(); }
				  rs2 = DBUtils.executeLAPSQuery("sel_date^" + strappno);
				  if(rs2.next())
				  {
					  strSancAuth=correctNull(rs2.getString("appraisal_sancauth"));
					  if(strSancAuth.equalsIgnoreCase("14")|| strSancAuth.equalsIgnoreCase("15")||strSancAuth.equalsIgnoreCase("16"))
						  SancDate=correctNull(rs2.getString("appref_sancdate"));
				  }
				  template=template.replaceAll("@Sancdate", SancDate); 
				 
				  if(rs!=null){ rs.close(); }
				  rs = DBUtils.executeLAPSQuery("securesel^" + strappno);
					if (rs.next())
					{
						holidayperiod= Helper.correctInt((String)rs.getString("loan_noofinstallment"));
						periodicity=Helper.correctNull((String)rs.getString("loan_periodicity"));
						
						if(holidayperiod.equals("0"))
						{
							hshRecord.put("holidayperiod","");
						}
						else
						{
							String strholidayperiod="after an initial holiday period of "+ holidayperiod +" months";
							hshRecord.put("holidayperiod",strholidayperiod);
						}
					}
					if(template.contains("@tenorexholiday"))
					{
						int tenorechol= Integer.parseInt(tenar) - Integer.parseInt(holidayperiod);
	    				template=template.replaceAll("@tenorexholiday", String.valueOf(tenorechol)); 
					}
					if(template.contains("@tenorinyears"))
					{
						String tenorinyears = jtn1.format((Double.parseDouble(tenar))/12);
						template=template.replaceAll("@tenorinyears", String.valueOf(tenorinyears)); 
					}
					
					
    			  if(template.contains("@Guarantor"))
    			  {
    				  if(rs2!=null){rs2.close();}
    				  String guarantorappend="";
    				  rs2=DBUtils.executeLAPSQuery("sel_docguarantor^"+strappno+"^"+strappno+"^"+"g");
    				  while(rs2.next())
    				  {
    					  String guarantor=correctNull(rs2.getString("perapp_guarname"));
    					  cbsid=correctNull(rs2.getString("PERAPP_CBSID"));
    					   strapptype=correctNull(rs2.getString("app_type"));
				     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, guarantor, cbsid,strStatus,strapptype);
    					 
    					  guarantorappend=guarantor + "," +guarantorappend;
    				  }
    				  if(!guarantorappend.equals(""))
    				  {  guarantorappend=guarantorappend.substring(0,guarantorappend.length()-1); }
    				  
    				  template=template.replaceAll("@Guarantor", guarantorappend); 
    			  }
    			  
    			/*  if(template.contains("@Repayment")){
    				  if(rs1!=null){rs1.close();}
    				  String Termsofrepayment="";
    				  rs1 = DBUtils.executeLAPSQuery("sel_allcomments^" + strappno + "^"+ "repayComment");
    				  while(rs1.next())
    				  {
    					  Termsofrepayment=Helper.CLOBToString(rs.getClob("fin_comments"));
    				  }
    				  
    				  template=template.replaceAll("@Repayment", Termsofrepayment); 
    			  }*/
    			  
    			  if(template.contains("@Repayment"))
    			  { 
    				  template=template.replaceAll("@Repayment", LOAN_REPAYMENTTYPE); 
    			  }
    			  
    			  //noofemi
    			 if(template.contains("@noofemi")) 
    			 {
    				 int noofEMI=0;
    				 if(periodicity.equals("m"))
    				 {
    					 noofEMI=(Integer.parseInt(tenar) - Integer.parseInt(holidayperiod));
    				 }
    				 if(periodicity.equals("q"))
    				 {
    					 noofEMI=(Integer.parseInt(tenar) - Integer.parseInt(holidayperiod))/3;
    				 }
    				 if(periodicity.equals("h"))
    				 {
    					 noofEMI=(Integer.parseInt(tenar) - Integer.parseInt(holidayperiod))/6;
    				 }	 
    				 if(periodicity.equals("y"))
    				 {
    					 noofEMI=(Integer.parseInt(tenar) - Integer.parseInt(holidayperiod))/12;
    				 }	 
    				 String noofemi=String.valueOf(noofEMI);
    				 
    				 template=template.replaceAll("@noofemi", noofemi); 
    			 }
    			  
    			  
			 
    			}
    			 
    			if(rs1!=null){ rs1.close(); }
    			 String strprddesc="",PRD_BANKSCHEMECode="",str_prdintratefreg="",str_prdloantype="";
				  rs1 = DBUtils.executeLAPSQuery("getprddesc^" + strappno);
				  if(rs1.next())
				  {
					  PRD_BANKSCHEMECode=correctNull(rs1.getString("PRD_BANKSCHEME"));
					  str_prdintratefreg=correctNull(rs1.getString("PRD_INTRATE"));
					  str_prdloantype=correctNull(rs1.getString("PRD_LOANTYPE"));
				  }
				  if(template.contains("@Typeofloan"))
				  {  
					 if(str_prdloantype.equals("TL"))
	  					  template=template.replaceAll("@Typeofloan", "Term Loan"); 
					 else  if(str_prdloantype.equals("DL"))
	  					  template=template.replaceAll("@Typeofloan", "Demand Loan"); 
					 else  if(str_prdloantype.equals("OD"))
	  					  template=template.replaceAll("@Typeofloan", "Over Draft"); 
				  }
    			if(template.contains("@intchargedfrequency"))
  			  	{
    				if(str_prdintratefreg.equals("M"))
  					  template=template.replaceAll("@intchargedfrequency", "Monthly"); 
    				else if(str_prdintratefreg.equals("Q"))
    					  template=template.replaceAll("@intchargedfrequency", "Quartely"); 
    				else if(str_prdintratefreg.equals("H"))
  					  template=template.replaceAll("@intchargedfrequency", "Half-yearly"); 
    				else if(str_prdintratefreg.equals("Y"))
  					  template=template.replaceAll("@intchargedfrequency", "Yearly"); 
  			  	}
				  
    			if(template.contains("@Scheme"))
  			  	{
	    			
					  if(rs!=null){ rs.close(); }
					  rs = DBUtils.executeLAPSQuery("sel_misstaticdatadesc^1^"+PRD_BANKSCHEMECode);
					  if(rs.next())
					  {
						  strprddesc=correctNull(rs.getString("mis_static_data_desc"));
					  }
					  
					  template=template.replaceAll("@Scheme", strprddesc); 
  			  	}
    			
    			  if(template.contains("@ParticularsofSecurityPledged"))
    			  {
    					ArrayList arrVal = new ArrayList();
    					ArrayList arrRow = new ArrayList();
    				    strQuery = SQLParser.getSqlQuery("sel_goodsdetails^"+strappno);
    					rs = DBUtils.executeQuery(strQuery);
    					while(rs.next())
    					{
    						arrVal = new ArrayList();
    						arrVal.add(correctNull(rs.getString("capl_goods_sno")));
    						arrVal.add(correctNull(rs.getString("capl_goods_name")));
    						arrVal.add(correctNull(rs.getString("capl_goods_units")));
    						arrVal.add(correctNull(rs.getString("capl_goods_marketprice")));
    						arrVal.add(correctNull(rs.getString("capl_goods_totalmarketvalue")));
    						arrVal.add(correctNull(rs.getString("capl_bankloan")));
    						arrRow.add(arrVal);
    					}
    				  
    				  StringBuffer sbsecurityPledged = new StringBuffer();
    				  sbsecurityPledged.append("<Table border='1' width='95%' align='center'>");
    				  sbsecurityPledged.append("<tr>");
    				  sbsecurityPledged.append("<td> Sl. No. </td> <td> Quantity (in number of units) </td> <td>DESCRIPTION OF GOODS </td> <td>Invoice or Market Value (Rs.) </td> <td>Amount (Rs.) </td> <td> Amount Advanced (Rs.) </td>");
    				  sbsecurityPledged.append("</tr>");
    				  if(arrRow != null && arrRow.size()>0)
    				  {
	    				  for(int i=0;i<arrRow.size();i++)
	    				  {
	    					  ArrayList arrrowVal = new ArrayList();
	    					  arrrowVal=(ArrayList) arrRow.get(i);
	    					  sbsecurityPledged.append("<tr>");
	    					  sbsecurityPledged.append("<td>"+ arrrowVal.get(0)+"&nbsp;</td><td>"+ arrrowVal.get(2)+"&nbsp;</td><td>"+ arrrowVal.get(1)+"&nbsp;</td><td  align='right'>"+ arrrowVal.get(3)+"&nbsp;</td><td  align='right'>"+ arrrowVal.get(4)+"&nbsp;</td><td  align='right'>"+ arrrowVal.get(5)+"&nbsp;</td>");
	    					  sbsecurityPledged.append("</tr>");
	    				  }
    				  }
    				  else
    				  {
    					  sbsecurityPledged.append("<tr>");
        				  sbsecurityPledged.append("<td>&nbsp; <br><br><br><br><br></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>");
    					  sbsecurityPledged.append("</tr>");
    				  }
    				  sbsecurityPledged.append("</table>");
    				  template=template.replaceAll("@ParticularsofSecurityPledged", sbsecurityPledged.toString()); 
    			  }
    			  
    			  if(template.contains("@ParticularsofInstallments"))
    			  {
    				 
    				    rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strappno + "^repaycomment");
    					if (rs.next()) 
    					{
    						hshRecord.put("fin_comments", Helper.removeHTMLTags(Helper.CLOBToString(rs.getClob("fin_comments"))).toString());
    					}
    				  
    				  StringBuffer sbPartofInstallments = new StringBuffer();
    				  sbPartofInstallments.append("<Table border='1' width='95%' align='center'>");
    				  sbPartofInstallments.append("<tr>");
    				  sbPartofInstallments.append("<td align='center'> SCHEDULE 'A' <br> (Particulars of Installments) ");
    				  sbPartofInstallments.append("</tr>");
    				  sbPartofInstallments.append("<tr>");
    				  String REPAYMENTTYPE=Helper.correctNull((String) hshRecord.get("LOAN_REPAYMENTTYPE"));
    				  if(REPAYMENTTYPE.equals("EMI"))
    				  {
    					  sbPartofInstallments.append("<td align='center'> Repayable in "+ (Integer.parseInt(tenar)-(Integer.parseInt(holidayperiod))) +" Equated Monthly Installment of Rs."+ hshRecord.get("emi") +" each "+ hshRecord.get("holidayperiod") +" </td>");
    				  }
    				  else
    				  {
    					  sbPartofInstallments.append("<td>"+ Helper.correctNull((String) hshRecord.get("fin_comments")) +"</td>");
    				  }
    				  sbPartofInstallments.append("</tr>");
    				  sbPartofInstallments.append("</table>");
    				  template=template.replaceAll("@ParticularsofInstallments", sbPartofInstallments.toString()); 
    			  }
    			  
    			  if(template.contains("@InstallmentsDetails"))
    			  {
    				 
    				    rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strappno + "^repaycomment");
    					if (rs.next()) 
    					{
    						hshRecord.put("fin_comments", Helper.removeHTMLTags(Helper.CLOBToString(rs.getClob("fin_comments"))).toString());
    					}
    				  
    				  StringBuffer sbPartofInstallments = new StringBuffer();
    				  sbPartofInstallments.append("<Table border='0' width='95%' align='center'>");
    				 /* sbPartofInstallments.append("<tr>");
    				  sbPartofInstallments.append("<td align='center'> SCHEDULE 'A' <br> (Particulars of Installments) ");
    				  sbPartofInstallments.append("</tr>");*/
    				  sbPartofInstallments.append("<tr>");
    				  String REPAYMENTTYPE=Helper.correctNull((String) hshRecord.get("LOAN_REPAYMENTTYPE"));
    				  if(REPAYMENTTYPE.equals("EMI"))
    				  {
    					  sbPartofInstallments.append("<td align='center'> Repayable in "+ (Integer.parseInt(tenar)-(Integer.parseInt(holidayperiod))) +" Equated Monthly Installment of Rs."+ hshRecord.get("emi") +" each "+ hshRecord.get("holidayperiod") +" </td>");
    				  }
    				  else
    				  {
    					  sbPartofInstallments.append("<td>"+ Helper.correctNull((String) hshRecord.get("fin_comments")) +"</td>");
    				  }
    				  sbPartofInstallments.append("</tr>");
    				  sbPartofInstallments.append("</table>");
    				  template=template.replaceAll("@InstallmentsDetails", sbPartofInstallments.toString()); 
    			  }
    			  
    			  
    			  
    			  if(template.contains("@scheduleTAB"))
    			  {
    				ArrayList arrVal = new ArrayList();
  					ArrayList arrRow = new ArrayList();
  				    strQuery = SQLParser.getSqlQuery("sel_securityhyp_findoc_nonTradeable^"+strappno);
  					rs = DBUtils.executeQuery(strQuery);
  					while(rs.next())
  					{
  						arrVal = new ArrayList();
  						arrVal.add(correctNull(rs.getString("sec_issuedby")));
  						arrVal.add(correctNull(rs.getString("sec_agency")));
  						arrVal.add(correctNull(rs.getString("sec_policyno")));
  						arrVal.add(correctNull(rs.getString("sec_maturitydate")));
  						arrVal.add(correctNull(rs.getString("sec_symbol")));
  						arrVal.add(jtn.format(Double.parseDouble(correctNull(rs.getString("sec_facevalue")))));
  						arrVal.add(correctNull(rs.getString("PERAPP_FNAME")));
  						arrVal.add(jtn.format(Double.parseDouble(correctNull(rs.getString("sec_maturityvalue")))));
  						arrRow.add(arrVal);
  					}
    				  StringBuffer sbscheduleTAB = new StringBuffer();
    				  sbscheduleTAB.append("<Table border='1' width='95%' align='center'>");
    				  sbscheduleTAB.append("<tr align='center'>");
    				  sbscheduleTAB.append("<td>Name of the Company</td><td>Regd Folio</td><td>Policy/Share Certificate No.</td><td>Date</td><td>No. Of Shares </td><td>Face Value </td><td>Name of the Assured</td><td>Amount Assured</td> ");
    				  sbscheduleTAB.append("</tr>");
    				 
    				  if(arrRow != null && arrRow.size()>0)
    				  {
	    				  for(int i=0;i<arrRow.size();i++)
	    				  {
	    					  ArrayList arrrowVal = new ArrayList();
	    					  arrrowVal=(ArrayList) arrRow.get(i);
	    					  sbscheduleTAB.append("<tr>");
	    					  sbscheduleTAB.append("<td>"+ arrrowVal.get(0)+"&nbsp;</td> <td>&nbsp;</td><td>"+ arrrowVal.get(2)+"&nbsp;</td><td>"+ arrrowVal.get(3)+"&nbsp;</td><td>&nbsp;</td><td>"+ arrrowVal.get(5)+"&nbsp;</td><td>"+ arrrowVal.get(6)+"&nbsp;</td><td>"+ arrrowVal.get(7)+"&nbsp;</td>");
	    					  sbscheduleTAB.append("</tr>");
	    				  }
    				  }
    				  else
    				  {
    					  sbscheduleTAB.append("<tr>");
        				  sbscheduleTAB.append("<td>&nbsp;<br><br><br><br><br><br> </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td> ");
        				  sbscheduleTAB.append("</tr>");
    				  }
    				  sbscheduleTAB.append("</table>");
    				  template=template.replaceAll("@scheduleTAB", sbscheduleTAB.toString()); 
    			  }
    			  
    			  
    			  if(template.contains("@Activity"))
    			  {
    				  StringBuffer sbsecurityPledged = new StringBuffer();
    				  sbsecurityPledged.append("<Table border='1' width='100%' cellspacing='1' cellpadding='3' class='outertable' align='center'>");
    				  sbsecurityPledged.append("<tr align='center'>");
    				  sbsecurityPledged.append("<td width='10%'>Sl. No. </td><td width='50%'>Activity</td><td width='20%'>No./Area</td><td width='20%'>Loan required</td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("<tr>");
    				  sbsecurityPledged.append("<td> &nbsp;<br><br><br><br><br></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("<tr align='center'>");
    				  sbsecurityPledged.append("<td colspan='2' align='center'> Total loan required</td><td>&nbsp;</td><td>&nbsp;</td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("</table>");
    				  template=template.replaceAll("@Activity", sbsecurityPledged.toString()); 
    			  }	  
    			  
    			  
    			  if(template.contains("@Agridev"))
    			  {
    				  StringBuffer sbsecurityPledged = new StringBuffer();
    				  sbsecurityPledged.append("<Table border='1' width='100%' cellspacing='1' cellpadding='3' class='outertable' align='center'>");
    				  sbsecurityPledged.append("<tr align='center'>");
    				  sbsecurityPledged.append("<td width='10%'> Sl. No. <br> <center>(1) </center> </td><td width='20%'>Activity <br> <center> (2)# </center> </td><td width='20%'>Unit cost/Cost <br> <center> (3) </center> </td><td width='20%'>No. of units/Area <br> <center> (4) </center> </td>	<td width='20%'>Total cost (3) X (4)  <br> <center> (5) </center> </td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("<tr>");
    				  sbsecurityPledged.append("<td> &nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("<tr>");
    				  sbsecurityPledged.append("<td> &nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("<tr>");
    				  sbsecurityPledged.append("<td>Total (a)</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td> <td>&nbsp;</td>");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("<tr align='center'>");
    				  sbsecurityPledged.append("<td colspan='5'> <b>75% of the total investment Rs. </b> ");
    				  sbsecurityPledged.append("</tr>");
    				  sbsecurityPledged.append("</table>");
    				  template=template.replaceAll("@Agridev", sbsecurityPledged.toString()); 
    			  }	
    			  
    			  if(template.contains("@ParticularsofDoc"))
    			  {
    				  StringBuffer sbParticularsofDoc = new StringBuffer();
    				  sbParticularsofDoc.append("<Table border='1' width='100%' cellspacing='1' cellpadding='3' class='outertable' align='center'>");
    				  sbParticularsofDoc.append("<tr align='center'>");
    				  sbParticularsofDoc.append("<td>Sl. No</td> <td>Date of Document </td><td>Particulars of Document </td>");
    				  sbParticularsofDoc.append("</tr>");
    				  sbParticularsofDoc.append("<tr>");
    				  sbParticularsofDoc.append("<td>&nbsp;<br><br><br><br><br><br><br><br><br><br></td><td>&nbsp;</td><td>&nbsp;</td>");
    				  sbParticularsofDoc.append("</tr>");
    				  sbParticularsofDoc.append("</table>");
    				  template=template.replaceAll("@ParticularsofDoc", sbParticularsofDoc.toString());
    				  
    			  }
    			  
    		}
    		
    		hshQuery=new HashMap();
			arrValues=new ArrayList();
			hshQueryValues=new HashMap();
			hshQuery.put("strQueryId","updateapdoccbsid");
    		arrValues.add(Helper.correctNull((String)hshValues.get("hidapprovercbsid")));
    		arrValues.add(strappno);
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			hshQueryValues.put("size","1");
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
 		
			//Vehicle Tab
			if(rs1!=null){rs1.close();}
			strGradeId = "A";
			strQuery = SQLParser.getSqlQuery("selectvehicledetails1^"+ strGradeId + "^" + strappno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next())
			{
				hshRecord.put("auto_dealer", correctNull(rs.getString("auto_dealer")));
				hshRecord.put("auto_deleraddress1", correctNull(rs.getString("auto_deleraddress1")));
				hshRecord.put("auto_deleraddress2", correctNull(rs.getString("auto_deleraddress2")));
				hshRecord.put("auto_delercity", correctNull(rs.getString("city_name")));
				hshRecord.put("auto_delerstate", correctNull(rs.getString("state_name")));
				hshRecord.put("auto_delerpin", correctNull( rs.getString("auto_delerpin")));
			}
			 
			template=template.replaceAll("@TransferorName", correctNull((String)hshRecord.get("auto_dealer"))); 
			template=template.replaceAll("@TransferorAddress", correctNull((String)hshRecord.get("auto_deleraddress1"))+", "+correctNull((String)hshRecord.get("auto_deleraddress2"))+", "+correctNull((String)hshRecord.get("auto_delercity"))+" - "+correctNull((String)hshRecord.get("auto_delerpin"))); 

			
			//Borrower address details
			if(rs1!=null){rs1.close();}
			strQuery=SQLParser.getSqlQuery("sel_customerdetail^"+appid);
			rs=DBUtils.executeQuery(strQuery);
			String strDistcode="",strCitycode="",strStatecode="",strCountryCode="";
			if(rs.next())
			{  	
				hshRecord.put("txtperapp_address1",correctNull(rs.getString("CON_COMADDR1")));
				hshRecord.put("txtperapp_address2",correctNull(rs.getString("CON_COMADDR2")));
				hshRecord.put("txtperapp_address3",correctNull(rs.getString("CON_COMVILLAGE")));
				hshRecord.put("txtperapp_district_code",correctNull(rs.getString("CON_COMDIST")));
				strDistcode = Helper.correctNull(rs.getString("CON_COMDIST"));
				strCitycode = Helper.correctNull(rs.getString("CON_COMCITY"));
				strStatecode = Helper.correctNull(rs.getString("CON_COMSTATE"));
				hshRecord.put("perapp_city",correctNull(rs.getString("CON_COMCITY")));
				hshRecord.put("perapp_state",correctNull(rs.getString("CON_COMSTATE")));		
				hshRecord.put("txtperapp_zip",correctNull(rs.getString("CON_COMZIP")));
				strCountryCode=Helper.correctNull(rs.getString("CON_COMCOUNTRY"));
			}
			if(!strStatecode.equals(""))
			{
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_statenamebycode^"+strStatecode);
				if(rs.next())
				{
					hshRecord.put("txtperapp_state",correctNull(rs.getString("state_name")));
				}
			}
			
			if(!strDistcode.equals(""))
			{
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_distnamebycode^"+strDistcode);
				if(rs.next())
				{
					hshRecord.put("txtperapp_district",correctNull(rs.getString("district_desc")));
				}
			}
			if(!strCitycode.equals(""))
			{
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_citynamebycode^"+strCitycode);
				if(rs.next())
				{
					hshRecord.put("txtperapp_city",correctNull(rs.getString("city_name")));
				}	
			}
			if(!strCountryCode.equals(""))
			{
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_countrynamebycode^"+strCountryCode);
				if(rs.next())
				{
					hshRecord.put("txtperapp_country",correctNull(rs.getString("con_country")));
					hshRecord.put("txtperapp_countrycode",strCountryCode);	
				}
			}
			  //Proprietor 
				  if(rs1!=null){rs1.close();}
					 rs1=DBUtils.executeLAPSQuery("sel_app_con_details^"+strappno+"^"+"p");
					  while(rs1.next())
					  {		String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
						  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
						  arrpropList=new ArrayList();
						  arrpropList.add(correctNull(rs1.getString("FULLNAME")));
						  if(residentType.equals("N"))
							 {
							  arrpropList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
							  arrpropList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
							  arrpropList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
							  arrpropList.add(correctNull(rs1.getString("CON_COMZIP")));//4
							  arrpropList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
							 }
							 else
							 {
								 arrpropList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
								 arrpropList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
								 arrpropList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
								 arrpropList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
								 arrpropList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
							 }
						  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
						  // minor check
						  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
						     if(rs3!=null){ rs3.close(); }
						 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
						    if(rs3.next()){
						      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
						      guard_name=correctNull(rs3.getString("minor_guard_name"));
						    }
						    
						    if(arrappminor.equalsIgnoreCase("Y"))
						  {
							  arrpropList.add(guard_name);
							  arrpropList.add("M/G");	 
						  }
						  else if(arrguachilddesp.equalsIgnoreCase("M"))
						  {
							  arrpropList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrpropList.add("S/o");	
						  }
						  else if(arrguachilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
						  {
							  arrpropList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
							  arrpropList.add("W/o");	
						  } 
						  else if(arrguachilddesp.equalsIgnoreCase("F"))
						  {
							  arrpropList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrpropList.add("D/o");	
						  } 
						
						  else
						  {
							  arrpropList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrpropList.add(" ");	
						  }
						  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
						  arrpropList.add(Helper.correctNull(strAge));
						  
						  
							ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs1.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								String temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
								if(spsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{	
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// minor check
									strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									   if(arrappminor.equalsIgnoreCase("Y"))
								      {
										  temp1.add(guard_name);
								     	  temp1.add("M/G");	 
								      }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o"); 
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME"))));}
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									   	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME"))));} 
									
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME"))));} 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
								while(rs.next())
								{	  strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst(); 	 
								while(rs.next())
								{
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// minor check
									strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									  if(arrappminor.equalsIgnoreCase("Y"))
								      {
										  temp1.add(guard_name);
								     	  temp1.add("M/G");	 
								      }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name")))); } 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// minor check
									strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									  if(arrappminor.equalsIgnoreCase("Y"))
								      {
										  temp1.add(guard_name);
								     	  temp1.add("M/G");	 
								      }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// minor check
									strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								    
									  if(arrappminor.equalsIgnoreCase("Y"))
								      {
										  temp1.add(guard_name);
								     	  temp1.add("M/G");	 
								      }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o"); 
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									 
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrpropList.add(temp2);
								arrpropList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
								arrpropList.add(correctNull(rs1.getString("PERAPP_CBSID")));
								arrpropList.add(correctNull(rs1.getString("app_type")));
						  arrpropRow.add(arrpropList);
					  }
					  hshRecord.put("arrpropRow",arrpropRow);
					  if(template.contains("@ProprietorDetails"))
					  {
						 	StringBuffer temppropList=new StringBuffer();	
						 	StringBuffer tempappList1=new StringBuffer();	
						     ArrayList arrpropRowdet=new ArrayList();
						     temppropList.append(" ");	
						     if(arrpropRow.size()>0 && arrpropRow!=null)
						     {
						     	for(int i=0;i<arrpropRow.size();i++)
						     	{
						     		arrpropRowdet=(ArrayList)arrpropRow.get(i);
						     		String constition=(String) arrpropRowdet.get(10);
						     		ArrayList arrIndvRow= (ArrayList) arrpropRowdet.get(9);
								     if(arrpropRow.size()==1)
								     {
								    	 if(constition.equals("01"))
										 {
										     temppropList.append(""+arrpropRowdet.get(0)+", "+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+", aged about "+arrpropRowdet.get(8)+" years, residing at "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										 }
								    	 else
								    	 {
								    		 if(arrIndvRow.size()>0)
										    	{	
											  temppropList.append(" "+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										    	for(int j=0;j<arrIndvRow.size();j++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		temppropList.append(temparr1.get(0));
    									    		tempappList1.append(temparr1.get(0));

										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    temppropList.append(temparr.get(0)+""+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
    										     		tempappList1.append(temparr.get(0)+"  ");

										    		}}
										    	}
										    	temppropList.append(" ");
										    	}
										    	else
										    	{
												     temppropList.append(" "+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										    	} 
								    	 }
								     }
								     else
								     {
								    	 if(constition.equals("01"))
										 {
										     temppropList.append(" " + (i+1) + ". &nbsp;"+arrpropRowdet.get(0)+", "+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+", aged about "+arrpropRowdet.get(8)+" years, residing at "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										 }
										 else
										 {
										    	if(arrIndvRow.size()>0)
										    	{
													temppropList.append(" "+ (i+1) +". &nbsp;"+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+".  ");
											    	for(int j=0;j<arrIndvRow.size();j++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		temppropList.append(temparr1.get(0));
	    									    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k <temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    temppropList.append(temparr.get(0)+""+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+", ");
	    										     		tempappList1.append(temparr.get(0)+"  ");

											    		}
											    		}
											    	}
											    	temppropList.append(" ");
										    	}
										    	else
										    	{
													  temppropList.append(" "+ (i+1) +". &nbsp;"+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+".  ");
										    	}
										 }
								     }
								     temppropList.append("<br><br> ");
								     String borrowername="";
	    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
	    					     			borrowername=Helper.correctNull((String) arrpropRowdet.get(0))+","+tempappList1.toString();
	    					     		}else{
	    					     			 borrowername=Helper.correctNull((String) arrpropRowdet.get(0));
	    					     		}
	   					     		 String  cbsid=Helper.correctNull((String) arrpropRowdet.get(11));
	   					     		 strapptype=Helper.correctNull((String) arrpropRowdet.get(12));
	   					     	     compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						    }
				     template=template.replaceAll("@ProprietorDetails", temppropList.toString());      
					  }
					  if(template.contains("@ProprietorAddress"))
					  {
						  StringBuffer temppropList=new StringBuffer();	
						  StringBuffer tempappList1=new StringBuffer();	
						  temppropList.append("<span align='justify'>");
						  ArrayList arrpropRowdet=new ArrayList();
						     if(arrpropRow.size()>0 && arrpropRow!=null)
						     {
						     	for(int i=0;i<arrpropRow.size();i++)
						     	{
						     		arrpropRowdet=(ArrayList)arrpropRow.get(i);
						     		 String constition=(String) arrpropRowdet.get(10);
						     		ArrayList arrIndvRow= (ArrayList) arrpropRowdet.get(9); 
						     		
						     		if(arrpropRow.size()==1)
						     		{
						     			if(constition.equals("01"))
						     			{
								     		temppropList.append(arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+"<br/>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     			}
						     			else
						     			{
						     				if(arrIndvRow.size()>0)
										    {
									     		temppropList.append(arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
							     				for(int j=0;j<arrIndvRow.size();j++)
							     				{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		temppropList.append(""+temparr1.get(0)+"<br/>");
										    		tempappList1.append(""+temparr1.get(0)+"");
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    temppropList.append(temparr.get(0)+"<br>"+temparr.get(6)+ " "+ temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
													    tempappList1.append(temparr.get(0)+"  ");
										    		}}
							     				}
							     				temppropList.append("<br>");
										    }
						     				else
						     				{
									     		temppropList.append(arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     				}
						     			}
						     		}
						     		else
						     		{
						     			if(constition.equals("01"))
						     			{
								     		temppropList.append(""+(i+1)+". "+arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+"<br/>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     			}
						     			else
						     			{
						     				if(arrIndvRow.size()>0)
										    {
									     		temppropList.append(""+(i+1)+". "+ arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
							     				for(int j=0;j<arrIndvRow.size();j++)
							     				{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		temppropList.append(""+temparr1.get(0)+"<br/>");
										    		tempappList1.append(""+temparr1.get(0)+"");
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    temppropList.append(temparr.get(0)+"<br>"+temparr.get(6)+ " "+ temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
    										     		tempappList1.append(temparr.get(0)+"  ");
										    		}}
							     				}
							     				temppropList.append("<br>");
										    }
						     				else
						     				{
									     		temppropList.append(""+(i+1)+". "+arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     				}
						     			}
						     		}
						     		 String borrowername="";
	    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
	    					     			borrowername=Helper.correctNull((String) arrpropRowdet.get(0))+","+tempappList1.toString();
	    					     		}else{
	    					     			 borrowername=Helper.correctNull((String) arrpropRowdet.get(0));
	    					     		}	   					     		
	    					     		
	    					     	String  cbsid=Helper.correctNull((String) arrpropRowdet.get(11));
	    					     	 strapptype=Helper.correctNull((String) arrpropRowdet.get(12));
	   					     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						     }
						     temppropList.append("</span>");
						     template=template.replaceAll("@ProprietorAddress", temppropList.toString()); 
						     }
				  
			  //applicant
				    if(rs1!=null){rs1.close();}
				 rs1=DBUtils.executeLAPSQuery("sel_app_con_details^"+strappno+"^"+"a");
				  while(rs1.next())
				  {	
					  String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
					  arrappList=new ArrayList();
					  arrappList.add(correctNull(rs1.getString("FULLNAME"))); //0
					 if(residentType.equals("N"))
					 {
						  arrappList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
						  arrappList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
						  arrappList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
						  arrappList.add(correctNull(rs1.getString("CON_COMZIP")));//4
						  arrappList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
					 }
					 else
					 {
						  arrappList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
						  arrappList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
						  arrappList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
						  arrappList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
						  arrappList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
					 }
					  String arrappchilddesp=correctNull(rs1.getString("PERAPP_SEX"));
					  // for minor check
					  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
					     if(rs3!=null){ rs3.close(); }
					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
					    if(rs3.next()){
					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
					      guard_name=correctNull(rs3.getString("minor_guard_name"));
					    }
					  if(arrappminor.equalsIgnoreCase("Y"))
					  {
					  arrappList.add(guard_name);
					  arrappList.add("M/G");	 
					  }
					  else if(arrappchilddesp.equalsIgnoreCase("M"))
					  {
						  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
						  arrappList.add("S/o");	
					  }
					  else if(arrappchilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
					  {
						  arrappList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));//6 
						  arrappList.add("W/o");	
					  } 
					  else if(arrappchilddesp.equalsIgnoreCase("F"))
					  {
						  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
						  arrappList.add("D/o");	
					  } 
					  else
					  {
						  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
						  arrappList.add(" ");	
					  }  
					  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
					  arrappList.add(Helper.correctNull(strAge));
					 
						ArrayList nonindvRow=new ArrayList();
						  ArrayList temp1=new ArrayList();
						  ArrayList temp2=new ArrayList();
						  String perappid=correctNull(rs1.getString("perapp_id"));
						  String divisiontype="",div_name="",nonindiv="";;
							if(rs!=null){rs.close();}
							int dcount=0,spcount=0,pcount=0,tcount=0;
							String temp="";
							itemp=0;
							String spconcernsubtype="",spsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!spconcernsubtype.equals(""))
								{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ spsubtype="dif";	}
								}
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(spsubtype.equals("same"))
							{ 
									if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");
							}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{  
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(spsubtype.equals("same"))
									{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								  temp1.add("M/G"); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								spcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String dconcernsubtype="";	String dsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!dconcernsubtype.equals(""))
								{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ dsubtype="dif";	}
								}
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(dsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its ");	}
							rs.beforeFirst();
							while(rs.next())
							{	
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(dsubtype.equals("same"))
									{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								  temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								dcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String ptconcernsubtype="",ptsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!ptconcernsubtype.equals(""))
								{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ ptsubtype="dif"; }
								}
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(ptsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(ptsubtype.equals("same"))
									{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
							     if(rs3!=null){ rs3.close(); }
							     rs3=DBUtils.executeQueryCBSConnection(strQuery1);
							     	if(rs3.next()){
							     		arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
							     		guard_name=correctNull(rs3.getString("minor_guard_name"));
							     	}
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								  temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								pcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String tconcernsubtype="",tsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!tconcernsubtype.equals(""))
								{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ tsubtype="dif"; }
								}
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(tsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{	 
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(tsubtype.equals("same"))
									{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
							     if(rs3!=null){ rs3.close(); }
							 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
							    if(rs3.next()){
							      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
							      guard_name=correctNull(rs3.getString("minor_guard_name"));
							    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								  temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								tcount++;
							}
							temp2.add(nonindvRow);
							arrappList.add(temp2);
							arrappList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
							arrappList.add(correctNull(rs1.getString("PERAPP_CBSID")));
							arrappList.add(correctNull(rs1.getString("app_type")));

					  arrappRow.add(arrappList);
				  }
				  hshRecord.put("arrappList",arrappRow);
			
				//co-applicant
					 if(rs1!=null){rs1.close();}
					 rs1=DBUtils.executeLAPSQuery("sel_app_con_details^"+strappno+"^"+"c");
					  while(rs1.next())
					  {
						  String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
						  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
						  arrcoappList=new ArrayList();
						  arrcoappList.add(correctNull(rs1.getString("FULLNAME")));
						  if(residentType.equals("N"))
							 {
							  arrcoappList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
							  arrcoappList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
							  arrcoappList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
							  arrcoappList.add(correctNull(rs1.getString("CON_COMZIP")));//4
							  arrcoappList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
							 }
							 else
							 {
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
							 }
						  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
						  // for minor check
						  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
						      if(rs3!=null){ rs3.close(); }
						  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
						     if(rs3.next()){
						       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
						       guard_name=correctNull(rs3.getString("minor_guard_name"));
						     }
						  if(arrappminor.equalsIgnoreCase("Y"))
						  { 
						  		arrcoappList.add(guard_name);
						  		arrcoappList.add("M/G");	
						   }
						  else if(arrguachilddesp.equalsIgnoreCase("M"))
						  {
							  arrcoappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrcoappList.add("S/o");	
						  }
						  else if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
						  {
							  arrcoappList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
							  arrcoappList.add("W/o");	
						  } 
						  else if(arrguachilddesp.equalsIgnoreCase("F"))
						  {
							  arrcoappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrcoappList.add("D/o");	
						  } 
						  else
						  {
							  arrcoappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrcoappList.add(" ");	
						  }  
						  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
						  arrcoappList.add(Helper.correctNull(strAge));
						 // arrcoappList.add(strCbsACno);
						
							ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs1.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								String temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(spsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{	
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									  temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst();
								while(rs.next())
								{	
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									  temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{	
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									  temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));
									  } 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
								while(rs.next())
								{	 strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									 // for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									 else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrcoappList.add(temp2);
								arrcoappList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
								arrcoappList.add(correctNull(rs1.getString("PERAPP_CBSID")));
								arrcoappList.add(correctNull(rs1.getString("app_type")));

						  arrcoappRow.add(arrcoappList);
					  }
					  hshRecord.put("arrcoappList",arrcoappRow);
					  
					//guarantor
						 if(rs1!=null){rs1.close();}
						 rs1=DBUtils.executeLAPSQuery("sel_app_con_details^"+strappno+"^"+"g");
						  while(rs1.next())
						  {		 String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
							  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
							  arrguaList=new ArrayList();
							  arrguaList.add(correctNull(rs1.getString("FULLNAME")));
							  if(residentType.equals("N"))
								 {
								  arrguaList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
								  arrguaList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
								  arrguaList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
								  arrguaList.add(correctNull(rs1.getString("CON_COMZIP")));//4
								  arrguaList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
								 }
								 else
								 {
									 arrguaList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
									 arrguaList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
									 arrguaList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
									 arrguaList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
									 arrguaList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
								 }
							  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
							  // for minor check
							  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
							      if(rs3!=null){ rs3.close(); }
							  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
							     if(rs3.next()){
							       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
							       guard_name=correctNull(rs3.getString("minor_guard_name"));
							     }
							  if(arrappminor.equalsIgnoreCase("Y"))
							  {  
							  		arrguaList.add(guard_name);
							 		 arrguaList.add("M/G");	
							   }
							  else if(arrguachilddesp.equalsIgnoreCase("M"))
							  {
								  arrguaList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
								  arrguaList.add("S/o");	
							  }
							  else if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
							  {
								  arrguaList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
								  arrguaList.add("W/o");	
							  } 
							  else if(arrguachilddesp.equalsIgnoreCase("F"))
							  {
								  arrguaList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
								  arrguaList.add("D/o");	
							  }
							  else
							  {
								  arrguaList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
								  arrguaList.add(" ");	
							  }
							  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
							  arrguaList.add(Helper.correctNull(strAge));
							  
							  ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs1.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								String temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(spsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{	
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor flag
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst();
								while(rs.next())
								{	
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor flag
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{	
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor flag
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{	
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor flag
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");}
									   else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									 else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrguaList.add(temp2);
								arrguaList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
								arrguaList.add(correctNull(rs1.getString("PERAPP_CBSID")));
								arrguaList.add(correctNull(rs1.getString("app_type")));
							  arrguaRow.add(arrguaList);
						  }
						  hshRecord.put("arrguaList",arrguaRow);
						  
						//Co-Obligant
							 if(rs1!=null){rs1.close();}
							 rs1=DBUtils.executeLAPSQuery("sel_app_con_details^"+strappno+"^"+"o");
							  while(rs1.next())
							  {		String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
								  	String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));

								  arrcoobligList=new ArrayList();
								  arrcoobligList.add(correctNull(rs1.getString("FULLNAME")));
								  if(residentType.equals("N"))
									 {
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMZIP")));//4
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
									 }
									 else
									 {
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
									 }
								  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
								  // for minor check
								  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								      if(rs3!=null){ rs3.close(); }
								  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								     if(rs3.next()){
								       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								       guard_name=correctNull(rs3.getString("minor_guard_name"));
								     }
								 if(arrappminor.equalsIgnoreCase("Y"))
								  {  
								  		arrcoobligList.add(guard_name);
								        arrcoobligList.add("M/G");	
								         }
								  else if(arrguachilddesp.equalsIgnoreCase("M"))
								  {
									  arrcoobligList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
									  arrcoobligList.add("S/o");	
								  }
								  else if(arrguachilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  {
									  arrcoobligList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
									  arrcoobligList.add("W/o");	
								  } 
								  else if(arrguachilddesp.equalsIgnoreCase("F"))
								  {
									  arrcoobligList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
									  arrcoobligList.add("D/o");	
								  } 
								  else
								  {			
									  arrcoobligList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
									  arrcoobligList.add(" ");	
								  }
								  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
								  arrcoobligList.add(Helper.correctNull(strAge));
								  
								 
								  ArrayList nonindvRow=new ArrayList();
								  ArrayList temp1=new ArrayList();
								  ArrayList temp2=new ArrayList();
								  String perappid=correctNull(rs1.getString("perapp_id"));
								  String divisiontype="",div_name="",nonindiv="";;
									if(rs!=null){rs.close();}
									int dcount=0,spcount=0,pcount=0,tcount=0;
									String temp="";
									itemp=0;
									String spconcernsubtype="",spsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!spconcernsubtype.equals(""))
										{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ spsubtype="dif";	}
										}
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(spsubtype.equals("same"))
									{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{	
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(spsubtype.equals("same"))
											{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										 // for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										spcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String dconcernsubtype="";	String dsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!dconcernsubtype.equals(""))
										{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ dsubtype="dif";	}
										}
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(dsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its ");	}
									rs.beforeFirst();
									while(rs.next())
									{
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(dsubtype.equals("same"))
											{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										 // for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										dcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String ptconcernsubtype="",ptsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!ptconcernsubtype.equals(""))
										{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ ptsubtype="dif"; }
										}
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(ptsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(ptsubtype.equals("same"))
											{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										 // for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										  if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										pcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String tconcernsubtype="",tsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!tconcernsubtype.equals(""))
										{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ tsubtype="dif"; }
										}
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(tsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(tsubtype.equals("same"))
											{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										 // for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										tcount++;
									}
									temp2.add(nonindvRow);
									arrcoobligList.add(temp2);
									arrcoobligList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
									arrcoobligList.add(correctNull(rs1.getString("PERAPP_CBSID")));
									arrcoobligList.add(correctNull(rs1.getString("app_type")));
								    arrcoobligRow.add(arrcoobligList);
								  
							  }
							  hshRecord.put("arrcoobligRow",arrcoobligRow);
							  
							   boolean boolFlag=false;
							  if(template.contains("@GrpBorrowersno"))
							  {
								  if((arrguaRow!=null & arrguaRow.size()>0)||(arrcoobligRow!=null & arrcoobligRow.size()>0))
									  boolFlag=true;
							  }
				    
				  if(template.contains("@appDetails"))
				  {
					 	StringBuffer tempappList=new StringBuffer();	
  					    StringBuffer tempappList1=new StringBuffer();	
					     ArrayList arrappRowdet=new ArrayList();
					     tempappList.append("");	
					     if(arrappRow.size()>0 && arrappRow!=null)
					     {
					     	for(int i=0;i<arrappRow.size();i++)
					     	{
					     		 arrappRowdet=(ArrayList)arrappRow.get(i);
							     String constition=(String) arrappRowdet.get(10);
							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
							     
							     if((arrappRow.size()==1) && (arrcoappRow.size()==0) )
							     {
							    	 if(constition.equals("01"))
									  {
							    		 if(boolFlag)
									     tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
							    		 else
							    		 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									  }
							    	 else
							    	 {
									    	if(arrIndvRow.size()>0)
									    	{
									    		if(boolFlag)
									    			tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    		else
									    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    	for(int j=0;j<arrIndvRow.size();j++)
									    	{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(temparr1.get(0));
									    		tempappList1.append(""+temparr1.get(0)+"");

									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
										     		tempappList1.append(temparr.get(0)+"  ");

									    		}}
									    	}
									    	}
									    	else
									    	{
									    		if(boolFlag)
											     tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    		else
									    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    	}
							    	 }
							    	 if(boolFlag)
							    	 appcoappdetailslno++;
							     }
							     else
							     {
								      if(constition.equals("01"))
									  {
										 tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									  }
								      else
								      {
									    	if(arrIndvRow.size()>0)
									    	{
												tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	for(int j=0;j<arrIndvRow.size();j++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		tempappList.append(temparr1.get(0));
										    		tempappList1.append(""+temparr1.get(0)+"");
										    		for(int k=1;k <temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
    										     		tempappList1.append(temparr.get(0)+"  ");

										    		}
										    		}
										    	}
									    	}
									    	else
									    	{
												  tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    	}
								      }
								      appcoappdetailslno++;
							     }
							     tempappList.append("<br><br>");
							     String borrowername="";
 					     		if(!tempappList1.toString().equalsIgnoreCase("")){
 					     			borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
 					     		}else{
 					     			 borrowername=Helper.correctNull((String) arrappRowdet.get(0));
 					     		}	
  					     		String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
  					     	     strapptype=Helper.correctNull((String) arrappRowdet.get(12));
  					     	      compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
					     	}
					    }
					     template=template.replaceAll("@appDetails", tempappList.toString()); 
				  }
				  
				  if(template.contains("@coappDetails"))
				  {
					 	StringBuffer tempcoappList=new StringBuffer();	
  					    StringBuffer tempappList1=new StringBuffer();	
					     ArrayList arrcoappRowdet=new ArrayList();
					     tempcoappList.append(" ");	
					     if(arrcoappList.size()>0 &&arrcoappList!=null)
					     {
					     	for(int i=0;i<arrcoappRow.size();i++)
					     	{
					     		 arrcoappRowdet=(ArrayList)arrcoappRow.get(i);
					     		String constition=(String) arrcoappRowdet.get(10);
					     		 ArrayList arrIndvRow= (ArrayList) arrcoappRowdet.get(9);
							     if(arrcoappRow.size()==1)
							     {
								    if(constition.equals("01"))
								    {
									     tempcoappList.append(""+appcoappdetailslno+". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+", aged about "+arrcoappRowdet.get(8)+" years, residing at "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
								    }
								    else
								    {
								    	if(arrIndvRow.size()>0)
								    	{	
									  tempcoappList.append(""+appcoappdetailslno+". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
								    	for(int j=0;j<arrIndvRow.size();j++)
								    	{
								    		ArrayList temparr=new ArrayList();
								    		ArrayList temparr1=new ArrayList();
								    		temparr1=(ArrayList) arrIndvRow.get(j);
								    		if(temparr1.size()>0)
								    		{
								    		tempcoappList.append(temparr1.get(0));
								    		tempappList1.append(temparr1.get(0));
								    		for(int k=1;k < temparr1.size();k++)
								    		{
								    			temparr=(ArrayList) temparr1.get(k);
											    tempcoappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
									     		tempappList1.append(temparr.get(0)+"  ");

								    		}}
								    	}
								    	}
								    	else
								    	{
										     tempcoappList.append(""+appcoappdetailslno+". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
								    	}
								    }
								    appcoappdetailslno++;
							     }
							     else
							     {
									 if(constition.equals("01"))
									 {
									     tempcoappList.append("" + appcoappdetailslno + ". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+", aged about "+arrcoappRowdet.get(8)+" years, residing at "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
									 }
									 else
									 {
										 if(arrIndvRow.size()>0)
									    	{
												tempcoappList.append(""+ appcoappdetailslno +". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
										    	for(int j=0;j<arrIndvRow.size();j++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		tempcoappList.append(temparr1.get(0));
										    		tempappList1.append(temparr1.get(0));
										    		for(int k=1;k <temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempcoappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
											    		tempappList1.append(temparr.get(0)+"  ");

										    		}
										    		}
										    	}
									    	}
									    	else
									    	{
												  tempcoappList.append(""+ appcoappdetailslno +". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
									    	}
									 }
									 appcoappdetailslno++;
							     }
							     tempcoappList.append("<br><br>");
							     String borrowername="";
 					     		if(!tempappList1.toString().equalsIgnoreCase("")){
	 					     			borrowername=Helper.correctNull((String) arrcoappRowdet.get(0))+","+tempappList1.toString();
	 					     		}else{
	 					     			 borrowername=Helper.correctNull((String) arrcoappRowdet.get(0));
	 					     		}
  					     		 String cbsid=Helper.correctNull((String) arrcoappRowdet.get(11));
  					     		strapptype=Helper.correctNull((String) arrcoappRowdet.get(12));
					     	      compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);

					     	}
					    } 
			     	 template=template.replaceAll("@coappDetails", tempcoappList.toString()); 
				  }
				  
				  if(template.contains("@appAddress"))
				  {
					  StringBuffer tempappList=new StringBuffer();	
					  StringBuffer tempappList1=new StringBuffer();	
					  tempappList.append("<span align='justify'>");
					  ArrayList arrappRowdet=new ArrayList();
					     if(arrappRow.size()>0 && arrappRow!=null)
					     {
					     	for(int i=0;i<arrappRow.size();i++)
					     	{
					     		arrappRowdet=(ArrayList)arrappRow.get(i);
							     String constition=(String) arrappRowdet.get(10);
							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
     
					     		if((arrappRow.size()==1) && (arrcoappRow.size()==0))
					     		{
							    	if(constition.equals("01"))
							    	{
							    		if(boolFlag)
							     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							    		else
							    		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							    	}
							    	else
							    	{
					     				if(arrIndvRow.size()>0)
									    {
					     					if(boolFlag)
								     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     					else
								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
								     		for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(""+temparr1.get(0)+"<br/>");
									    		tempappList1.append(""+temparr1.get(0)+"");
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+" <br>"+temparr.get(6)+" "+temparr.get(7)+" <br>"+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
										     		tempappList1.append(temparr.get(0)+"  ");

									    		}}
						     				}
						     				tempappList.append("");
									    }
					     				else
					     				{
					     					if(boolFlag)
								     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     					else
					     					tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
							    	}
							    	if(boolFlag)
							    	appcoappslno++;
					     		}
					     		else
					     		{
					     			if(constition.equals("01"))
					     			{
							     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     			}
					     			else
					     			{
					     				if(arrIndvRow.size()>0)
									    {
								     		tempappList.append(""+appcoappslno+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
								     		for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(""+temparr1.get(0)+"<br/>");
									    		tempappList1.append(""+temparr1.get(0)+"");
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+" <br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
										     		tempappList1.append(temparr.get(0)+"  ");

									    		}}
						     				}
						     				tempappList.append("<br>");
									    }
					     				else
					     				{
								     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
					     			}
					     			appcoappslno++;
					     		}
					     		 String borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
   					     		 String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
   					             strapptype=Helper.correctNull((String) arrappRowdet.get(12));
   					     	     compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
					     	}
					     }
					     tempappList.append("</span>");
					     template=template.replaceAll("@appAddress", tempappList.toString()); 
				  }
					 
					  if(template.contains("@coappAddress"))
					  {
						  StringBuffer tempcoappList=new StringBuffer();
						  StringBuffer tempappList1=new StringBuffer();	
						  tempcoappList.append("<span align='justify'>");
						  ArrayList arrcoappRowdet=new ArrayList();
						     if(arrcoappList.size()>0 && arrcoappList!=null)
						     {
						     	for(int i=0;i<arrcoappRow.size();i++)
						     	{
						     		arrcoappRowdet=(ArrayList)arrcoappRow.get(i);
								     String constition=(String) arrcoappRowdet.get(10);
							  		 ArrayList arrIndvRow= (ArrayList) arrcoappRowdet.get(9);
						     		if(arrcoappRow.size()==1)
						     		{
										 if(constition.equals("01"))
										 {
									     	tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+"<br/>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
										 }
										 else
										 {
							     				if(arrIndvRow.size()>0)
											    {
										     		tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
										     		for(int j=0;j<arrIndvRow.size();j++)
								     				{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempcoappList.append(""+temparr1.get(0)+"<br/>");
											    		tempappList1.append(""+temparr1.get(0)+"");
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempcoappList.append(temparr.get(0)+" <br>"+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br> <br>");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
								     				}
								     				tempcoappList.append("<br>");
											    }
							     				else
							     				{
										     		tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
							     				}
							     			}
										 appcoappslno++;
						     		}
						     		else
						     		{
										 if(constition.equals("01"))
										 {
									     	tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+"<br/>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
										 }
										 else
										 {
							     				if(arrIndvRow.size()>0)
											    {
										     		tempcoappList.append(""+appcoappslno+". "+ arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
								     				for(int j=0;j<arrIndvRow.size();j++)
								     				{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempcoappList.append(""+temparr1.get(0)+"<br/>");
													    tempappList1.append(temparr1.get(0));

											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempcoappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+" <br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
														    tempappList1.append(temparr.get(0)+"  ");

											    		}}
								     				}
								     				tempcoappList.append("<br>");
											    }
							     				else
							     				{
										     		tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
							     				}
										 }
										 appcoappslno++;	 
						     		}
						     		 String borrowername="";
	    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
		 					     			borrowername=Helper.correctNull((String) arrcoappRowdet.get(0))+","+tempappList1.toString();
		 					     		}else{
		 					     			 borrowername=Helper.correctNull((String) arrcoappRowdet.get(0));
		 					     		}

	   					     		String cbsid=Helper.correctNull((String) arrcoappRowdet.get(11));
	   					     	    strapptype=Helper.correctNull((String) arrcoappRowdet.get(12));
	   					     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						     }
						     tempcoappList.append("</span");
						     template=template.replaceAll("@coappAddress", tempcoappList.toString()); 
					  }		
						  
							  
							  if(template.contains("@GrpBorrowersno"))
							  {
								  coobligguaDetslno=appcoappdetailslno++;
							  }if(template.contains("@CoobligantDetails"))
							  {
								 	StringBuffer tempcoobligList=new StringBuffer();	
								 	StringBuffer tempappList1=new StringBuffer();	
								     ArrayList arrcoobligRowdet=new ArrayList();
								     tempcoobligList.append("");
								     if(arrcoobligRow.size()>0 && arrcoobligRow!=null)
								     {
								     	for(int i=0;i<arrcoobligRow.size();i++)
								     	{
								     		 arrcoobligRowdet=(ArrayList)arrcoobligRow.get(i);
										     String constitution=(String) arrcoobligRowdet.get(10);
								     		 ArrayList arrIndvRow= (ArrayList) arrcoobligRowdet.get(9);
										   if(arrcoobligRow.size()==1)
										   {
											    if(constitution.equals("01"))
											    {
												     tempcoobligList.append(""+coobligguaDetslno+". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+", aged about "+arrcoobligRowdet.get(8)+" years, residing at "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    }
											    else
											    {
											    	if(arrIndvRow.size()>0)
											    	{	
												  tempcoobligList.append(""+coobligguaDetslno+ ". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    	for(int j=0;j<arrIndvRow.size();j++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempcoobligList.append(temparr1.get(0));
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempcoobligList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
											    	}
											    	}
											    	else
											    	{
													     tempcoobligList.append(""+coobligguaDetslno+". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										   else
										   {
											    if(constitution.equals("01"))
											    {
													  tempcoobligList.append(""+ coobligguaDetslno +". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+", aged about "+arrcoobligRowdet.get(8)+" years, residing at "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+".  ");
											    }
											    else
											    {
											    	if(arrIndvRow.size()>0)
											    	{
														tempcoobligList.append(""+ coobligguaDetslno +". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
												    	for(int j=0;j<arrIndvRow.size();j++)
												    	{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempcoobligList.append(temparr1.get(0));
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k <temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempcoobligList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}
												    		}
												    	}
											    	}
											    	else
											    	{
														  tempcoobligList.append(""+coobligguaDetslno+". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										     tempcoobligList.append("<br><br>");
										     String borrowername="";
			    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
				 					     			borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0))+","+tempappList1.toString();
				 					     		}else{
				 					     			 borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0));
				 					     		}
				   					     	 String cbsid=Helper.correctNull((String) arrcoobligRowdet.get(11));
				   					         strapptype=Helper.correctNull((String) arrcoobligRowdet.get(12));
				   					     	 compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								    } 
								 template=template.replaceAll("@CoobligantDetails", tempcoobligList.toString()); 
							  }
							  
							  if(template.contains("@guadetails"))
							  {
								 	StringBuffer tempguaList=new StringBuffer();	
								 	StringBuffer tempappList1=new StringBuffer();	
								     ArrayList arrguaRowdet=new ArrayList();
								     tempguaList.append("");
								     if(arrguaRow.size()>0 && arrguaRow!=null)
								     {
								     	for(int i=0;i<arrguaRow.size();i++)
								     	{
								     		 arrguaRowdet=(ArrayList)arrguaRow.get(i);
										     String constitution=(String) arrguaRowdet.get(10);
								     		 ArrayList arrIndvRow= (ArrayList) arrguaRowdet.get(9);
										   if(arrguaRow.size()==1)
										   {
											    if(constitution.equals("01"))
											    {
												     tempguaList.append(""+coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+", aged about "+arrguaRowdet.get(8)+" years, residing at "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+".  ");
											    }
											    else
											    {
											    	if(arrIndvRow.size()>0)
											    	{	
											    		tempguaList.append(""+coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    	for(int j=0;j<arrIndvRow.size();j++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempguaList.append(temparr1.get(0));
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempguaList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
											    	}
											    	}
											    	else
											    	{
													     tempguaList.append(""+coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										   else
										   {
											    if(constitution.equals("01"))
											    {
													  tempguaList.append(""+ coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+", aged about "+arrguaRowdet.get(8)+" years, residing at "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    }
											    else
											    {
									    	if(arrIndvRow.size()>0)
											    	{
														tempguaList.append(""+ coobligguaDetslno +". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
												    	for(int j=0;j<arrIndvRow.size();j++)
												    	{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempguaList.append(temparr1.get(0));
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k <temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempguaList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}
												    		}
												    	}
											    	}
											    	else
											    	{
														  tempguaList.append(""+ coobligguaDetslno +". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										     tempguaList.append("<br> <br>");
										     String borrowername="";
			    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
				 					     			borrowername=Helper.correctNull((String) arrguaRowdet.get(0))+","+tempappList1.toString();
				 					     		}else{
				 					     			 borrowername=Helper.correctNull((String) arrguaRowdet.get(0));
				 					     		}

			   					     		 String cbsid=Helper.correctNull((String) arrguaRowdet.get(11));
			   					     	     strapptype=Helper.correctNull((String) arrguaRowdet.get(12));
			   					     	     compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								    } 
								 template=template.replaceAll("@guadetails", tempguaList.toString()); 
							  }
							  
							   if(template.contains("@GrpBorrowersno"))
							  {
								  coobligguaaddslno=appcoappslno++;
							  }
							  
							  if(template.contains("@CoobligantAddress"))
							  {
								  StringBuffer tempcoobligList=new StringBuffer();
		    					  StringBuffer tempappList1=new StringBuffer();	
								  tempcoobligList.append("<span align='justify'>");
								  ArrayList arrcoobligRowdet=new ArrayList();
								     if(arrcoobligRow.size()>0 && arrcoobligRow!=null)
								     {
								     	for(int i=0;i<arrcoobligRow.size();i++)
								     	{
								     		arrcoobligRowdet=(ArrayList)arrcoobligRow.get(i);
								     		 String constition=(String) arrcoobligRowdet.get(10);
								     		ArrayList arrIndvRow= (ArrayList) arrcoobligRowdet.get(9);
								     		if(arrcoobligRow.size()==1)
								     		{
								     			if((constition.equals("01")))
								     			{
										     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempcoobligList.append(""+temparr1.get(0)+"<br>");
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempcoobligList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
																tempappList1.append(temparr.get(0)+"  ");
												    		}}
									     				}
									     				tempcoobligList.append("<br>");
												    }
								     				else
								     				{
											     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		else
								     		{
								     			if(constition.equals("01"))
								     			{
										     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempcoobligList.append(""+coobligguaaddslno+". "+ arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempcoobligList.append(""+temparr1.get(0)+"<br>");
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempcoobligList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
																tempappList1.append(temparr.get(0)+"  ");
												    		}}
									     				}
									     				tempcoobligList.append("<br>");
												    }
								     				else
								     				{
											     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		 String borrowername="";
			    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
				 					     			borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0))+","+tempappList1.toString();
				 					     		}else{
				 					     			 borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0));
				 					     		}
			   					     		String  cbsid=Helper.correctNull((String) arrcoobligRowdet.get(11));
			   					     		 strapptype=Helper.correctNull((String) arrcoobligRowdet.get(12));
			   					     	     compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								     }
								     tempcoobligList.append("</span>");
								     template=template.replaceAll("@CoobligantAddress", tempcoobligList.toString()); 
							  
							  }
							
							  if(template.contains("@guaAddress"))
							  {
								  StringBuffer tempguaList=new StringBuffer();	
								  StringBuffer tempappList1=new StringBuffer();	
								  tempguaList.append("<span align='justify'>");
								  ArrayList arrguaRowdet=new ArrayList();
								     if(arrguaRow.size()>0 && arrguaRow!=null)
								     {
								     	for(int i=0;i<arrguaRow.size();i++)
								     	{
								     		arrguaRowdet=(ArrayList)arrguaRow.get(i);
								     		 String constition=(String) arrguaRowdet.get(10);
								     		ArrayList arrIndvRow= (ArrayList) arrguaRowdet.get(9); 
								     		if(arrguaRow.size()==1)
								     		{
								     			if(constition.equals("01"))
								     			{
										     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempguaList.append(""+temparr1.get(0)+"<br/>");
												    		tempappList1.append(""+temparr1.get(0)+"");
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempguaList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}}
									     				}
									     				tempguaList.append("<br>");
												    }
								     				else
								     				{
											     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		else
								     		{
								     			if(constition.equals("01"))
								     			{
										     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempguaList.append(""+coobligguaaddslno+". "+ arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempguaList.append(""+temparr1.get(0)+"<br/>");
												    		tempappList1.append(""+temparr1.get(0)+"");
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempguaList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}}
									     				}
									     				tempguaList.append("<br>");
												    }
								     				else
								     				{
											     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		String borrowername="";
		    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
			 					     			borrowername=Helper.correctNull((String) arrguaRowdet.get(0))+","+tempappList1.toString();
			 					     		}else{
			 					     			 borrowername=Helper.correctNull((String) arrguaRowdet.get(0));
			 					     		}

					   					     String cbsid=Helper.correctNull((String) arrguaRowdet.get(11));
					   					    strapptype=Helper.correctNull((String) arrguaRowdet.get(12));
					   					     compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								     }
								     tempguaList.append("</span>");
								     template=template.replaceAll("@guaAddress", tempguaList.toString()); 
							  }
							  
			  //Gold ornaments
			  if(rs!=null){	rs.close();	}
			  rs = DBUtils.executeLAPSQuery("selgolddetails^"+ strappno);
				while (rs.next())
				{
					ArrayList arrCol = new ArrayList();
					arrCol.add(correctNull((String) rs.getString("AGR_ARTNO")));
					arrCol.add(correctNull((String) rs.getString("AGR_ARTDESC")));
					arrCol.add(correctNull((String) rs.getString("AGR_ARTGROSSWT")));
					arrCol.add(correctNull((String) rs.getString("AGR_ARTNETWT")));
					arrCol.add(correctNull((String) rs.getString("AGR_ESTRATE")));
					arrRowGold.add(arrCol);
				}
				hshRecord.put("arrRowGold", arrRowGold);
			
				//SEcurity details
				 if(rs!=null){	rs.close();	}
				 ArrayList secDetails = new ArrayList();
				  rs = DBUtils.executeLAPSQuery("sel_secownerid^"+ strappno);
					while (rs.next())
					{
						secDetails.add(correctNull(Helper.CLOBToString(rs.getClob("APP_SEC_DESCRIPTION"))));
					}
					hshRecord.put("secDetails",secDetails);
				
				//prd Description
			  if(rs!=null){	rs.close();	}
			  rs = DBUtils.executeLAPSQuery("sel_maxterms^" + prdcode);
				while (rs.next())
				{
					hshRecord.put("prd_desc",correctNull((String) rs.getString("prd_desc")));
				}
				
				if(rs!=null){ rs.close(); }
				strQuery=SQLParser.getSqlQuery("sel_appraiserdet^"+strappno);				
				rs = DBUtils.executeQuery(strQuery);				
				if (rs.next())
				{
					hshRecord.put("ja_name",Helper.correctNull((String)rs.getString("ja_name")));
				}
				
				//Agriculture gold loan
				if(rs!=null){ rs.close(); }
				String strAgriType="",strLoanType="";
				rs=DBUtils.executeLAPSQuery("selectagriassessment^"+strappno);		 
				if(rs.next())
				{
					hshRecord.put("agr_typeofagri",Helper.correctNull(rs.getString("agr_typeofagri")));
					strAgriType=Helper.correctNull(rs.getString("agr_typeofagri"));
					strLoanType=Helper.correctNull(rs.getString("agr_typeofloan"));
					hshRecord.put("agr_typeofloan",Helper.correctNull(rs.getString("agr_typeofloan")));
				}
				//Crop Production
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("selagriassessmentvalues^"+strappno+"^"+strAgriType+"^"+strLoanType);			 
				while(rs.next())
				{
					arryColagcp=new ArrayList();
					arryColagcp.add(Helper.correctNull(rs.getString("agr_sno")));
					arryColagcp.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("agr_area")))));
					arryColagcp.add(Helper.correctNull(rs.getString("agr_activity")));
					arryColagcp.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("agr_unitcost")))));
					arryColagcp.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("agr_totalamt")))));
					arryRowagcp.add(arryColagcp);
				}
				hshRecord.put("arryRowagcp", arryRowagcp);
				//working capital
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("selagriassessment^"+strappno+"^"+strAgriType+"^"+strLoanType);		 
				if(rs.next())
				{
					hshRecord.put("agr_totalamt", jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("agr_totalamt")))));
					hshRecord.put("agr_margin_amt", jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("agr_margin_amt")))));
					hshRecord.put("agr_eligible_amt", jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("agr_eligible_amt")))));
				}
				double dblRecurrexpMargin=0.00,dblAgridevelopMargin=0.00;
				if(rs!=null){rs.close();}
				strQuery = SQLParser.getSqlQuery("selgoldratemaster^Y");
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next())
				{
					dblRecurrexpMargin=100-rs.getDouble("grm_recurrexpmargin");
					dblAgridevelopMargin=100-rs.getDouble("grm_agridevelopmargin");
					hshRecord.put("dblRecurrexpMargin", jtn.format(dblRecurrexpMargin));
					hshRecord.put("dblAgridevelopMargin",  jtn.format(dblAgridevelopMargin));
				}
				if(rs!=null){rs.close();}
				//rs=DBUtils.executeLAPSQuery("sel_orgheadusername^"+doc_orgHead);
				rs=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
				if(rs.next())
				{
					//hshRecord.put("orgHead_name",Helper.correctNull(rs.getString("usr_fname")));
					hshRecord.put("orgHead_name",Helper.correctNull(rs.getString("org_headname")));
				}
				if(template.contains("@orgHead_name"))
				{
					template=template.replaceAll("@orgHead_name",Helper.correctNull((String)hshRecord.get("orgHead_name")));
				}
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_organisationdetails^"+strOrgCode);		 
				if(rs.next())
				{
					hshRecord.put("org_name",Helper.correctNull(rs.getString("OrganisationName")));
					hshRecord.put("OrganisationAddress1",Helper.correctNull(rs.getString("OrganisationAddress1")));
					hshRecord.put("OrganisationAddress2",Helper.correctNull(rs.getString("OrganisationAddress2")));
					hshRecord.put("OrganisationCity",Helper.correctNull(rs.getString("OrganisationCity")));
					hshRecord.put("Organisationzip",Helper.correctNull(rs.getString("Organisationzip")));
					hshRecord.put("OrganisationState",Helper.correctNull(rs.getString("OrganisationState")));
					

					hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("OrganisationName")));
					hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("OrganisationCity")));
					hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("Organisationzip")));
				}
				
				if(!strDisbBrCode.equalsIgnoreCase(""))
				{
					if(rs!=null){rs.close();}
					rs=DBUtils.executeLAPSQuery("sel_organisationname^"+strDisbBrCode);		 
					if(rs.next())
					{
						hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("org_name")));
						hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("city_name")));
						hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("org_zip")));
					}
				}
				//branchDetails
				if(template.contains("@branchDetails"))
				{
					String tempbranchdetail=Helper.correctNull((String)hshRecord.get("strDisbBrname"))+", "+Helper.correctNull((String)hshRecord.get("strDisbBrCity"))+" - "+Helper.correctNull((String)hshRecord.get("strDisbBrzip"));
					template=template.replaceAll("@branchDetails", tempbranchdetail); 
				}
				
				//inward city
				
				if(rs!=null){rs.close();}
				String inwardBranchCity="",inwardCreatedDate="";
				rs=DBUtils.executeLAPSQuery("selworkflow^"+strappno);		 
				if(rs.next())
				{
					inwardBranchCity=Helper.correctNull(rs.getString("ORG_CITY"));
					inwardCreatedDate=Helper.correctNull(rs.getString("INWARD_CREATEDON"));
					//template=template.replaceAll("@Branchname", correctNull(rs.getString("org_name")));
				}
				// @Branchname
				 String strBranch="",strBranchCity="";
				 if(rs2!=null){ rs2.close(); }
	 				rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
	 				if(rs2.next()){
	 						strBranch=correctNull(rs2.getString("ORG_NAME"));
		 					if(rs!=null){rs.close();}
							rs=DBUtils.executeLAPSQuery("sel_cityname^"+correctNull(rs2.getString("ORG_CITY")));		 
							if(rs.next())
							{
								strBranchCity=correctNull(rs.getString("city_name"));
							}
	 					
	 				}
	 				template=template.replaceAll("@Branchname", strBranch);
	 				template=template.replaceAll("@BranchCity", strBranchCity);
				
				 //end
				/*if(rs!=null){ rs.close(); }
 				rs=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
 				if(rs.next()){
 					template=template.replaceAll("@Branchname", correctNull(rs.getString("ORG_NAME")));
 				}*/
				template=template.replaceAll("@inwarddate", inwardCreatedDate); 
				//template=template.replaceAll("@BranchCity", inwardBranchCity); 
				//Facility from other bank - customer profile
				String searchType="";
				
				if(rs!=null)
				{rs.close();}
				strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+appid);
				rs = DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					vecVal=new ArrayList();
					vecVal.add(Helper.correctInt((String)rs.getString("perbank_sno")));//0
					String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
					rs1 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
					if(rs1.next())
					{
						vecVal.add(Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));//8
					}
					else
					{
						vecVal.add("");//8
					}
					String perbank_type=Helper.correctInt((String)rs.getString("perbank_type"));
					if(perbank_type.equals("1"))
					{
						perbank_type="Working Capital";
					}
					else if(perbank_type.equals("2"))
					{
						perbank_type="Term Loan";
						
					}
					vecVal.add(perbank_type);//1
					vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_limit")))));//10
					vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_os")))));//11
					vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_SECDESCRIP")));//12
					vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_SECVALUE")))));//13
				
					vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_LITIGATIONS")));//14
					vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_NATURELITIGATION")));//15
					vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_DATELITIGATION")));//16
					vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_CLAIMAMOUNT")))));//17
					vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_OTHERCLAIMS")))));//18
					vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_PRESENTPOS")));//19
					vecData.add(vecVal);
				}
				hshRecord.put("vecData",vecData);
				ArrayList veccoappgua = new ArrayList();
				ArrayList veccoappguaRow = new ArrayList();

				
				if(documentCode.equalsIgnoreCase("DOC_952"))
					searchType="C";
				else
					searchType="G";
				if(rs2!=null){ rs2.close(); }
				strQuery = SQLParser.getSqlQuery("getcoappguarantortype^"+ strappno+"^"+searchType);
				rs2 = DBUtils.executeQuery(strQuery);
				while(rs2.next())
				{
					if(Helper.correctNull(rs2.getString("demo_docprint")).equalsIgnoreCase("c")||Helper.correctNull(rs2.getString("demo_docprint")).equalsIgnoreCase("o"))
					{
						veccoappgua=new ArrayList();
						String demoappid=Helper.correctNull(rs2.getString("demo_appid"));
						String appname=Helper.correctNull(rs2.getString("appname"));
						veccoappgua.add(appname);
						vecData=new ArrayList();
						if(rs!=null)
						{rs.close();}
						strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+demoappid);
						rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							vecVal=new ArrayList();
							vecVal.add(Helper.correctInt((String)rs.getString("perbank_sno")));//0
							String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
							rs1 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
							if(rs1.next())
							{
								vecVal.add(Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));//1
							}
							else
							{
								vecVal.add("");//1
							}
							String perbank_type=Helper.correctInt((String)rs.getString("perbank_type"));
							if(perbank_type.equals("1"))
							{
								perbank_type="Working Capital";
							}
							else if(perbank_type.equals("2"))
							{
								perbank_type="Term Loan";
								
							}
							vecVal.add(perbank_type);//2
							vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_limit")))));//3
							vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_os")))));//4
							vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_LITIGATIONS")));//5
							vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_NATURELITIGATION")));//6
							vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_DATELITIGATION")));//7
							vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_CLAIMAMOUNT")))));//8
							vecVal.add(jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_OTHERCLAIMS")))));//9
							vecVal.add(Helper.correctNull((String)rs.getString("PERBANK_PRESENTPOS")));//10
							vecVal.add(Helper.correctNull(rs2.getString("demo_docprint")));//11
							vecData.add(vecVal);
						}
						veccoappgua.add(vecData);
						veccoappguaRow.add(veccoappgua);
					}
				}
				hshRecord.put("veccoappguaRow",veccoappguaRow);
				
				
				
				if(template.contains("@CreditFacilities"))
				{
					StringBuffer sbCreditFacilities=new StringBuffer();
					
					sbCreditFacilities.append("<Table border='1' width='95%' align='center'>");
					sbCreditFacilities.append("<tr align='center'>");
				    sbCreditFacilities.append("<td>Sl.No.</td>");
				    sbCreditFacilities.append("<td>Name of the Bank/ Financiers/others</td>");
				    sbCreditFacilities.append("<td>Nature of facility</td>");
				    sbCreditFacilities.append("<td>Limit (Rs.)</td>");
				    sbCreditFacilities.append("<td>Balance Due (Rs.)</td>");
                    sbCreditFacilities.append("<td colspan='2'>Securities & Value (Rs.)</td>");
                    sbCreditFacilities.append("</tr>");

					if(documentCode.equalsIgnoreCase("DOC_952"))
					{
						sbCreditFacilities.append(" <tr> <td colspan='7'><b>Applicant -"+ Helper.correctNull((String) hshRecord.get("borrowername"))+"</b></td></tr>");

	                    vecData = (ArrayList) hshRecord.get("vecData");
						if (vecData.size() > 0 && vecData != null) 
						{
							for (int i = 0; i < vecData.size(); i++) 
							{
								vecVal = (ArrayList) vecData.get(i);
								sbCreditFacilities.append("<tr align='center'>");
								sbCreditFacilities.append("<td>"+ (i + 1)+"&nbsp;</td>");
								sbCreditFacilities.append(" <td align='left'>"+vecVal.get(1)+"&nbsp;</td>");
								sbCreditFacilities.append("<td>"+vecVal.get(2)+"&nbsp;</td>");
								sbCreditFacilities.append("<td align='right'>"+vecVal.get(3)+"&nbsp;</td>");
								sbCreditFacilities.append("<td align='right'>"+vecVal.get(4)+"&nbsp;</td>");
								sbCreditFacilities.append("<td colspan='2'>"+vecVal.get(5)+" - "+vecVal.get(6)+"&nbsp;</td>");
								sbCreditFacilities.append("</tr>");
							}
						} 
						else
						{
							sbCreditFacilities.append("<tr align='center'>");
							sbCreditFacilities.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
							sbCreditFacilities.append("</tr>");
						}
					}
					{
						ArrayList vecDatacoapp=new ArrayList();
						ArrayList vecValcoapp = new ArrayList();
						veccoappguaRow = (ArrayList) hshRecord.get("veccoappguaRow");
						if (veccoappguaRow.size() > 0 && veccoappguaRow != null) 
						{
							for (int i = 0; i < veccoappguaRow.size(); i++) 
							{
								veccoappgua = (ArrayList) veccoappguaRow.get(i);
									String name =(String)veccoappgua.get(0);
									vecDatacoapp=(ArrayList)veccoappgua.get(1);
								
									if(vecDatacoapp!=null && vecDatacoapp.size()>0)
									{
							
										for(int k=0;k<vecDatacoapp.size();k++)
										{
										
											vecValcoapp=(ArrayList)vecDatacoapp.get(k);
											
											 if(k==0)
											 {
												 if(Helper.correctNull((String)vecValcoapp.get(11)).equalsIgnoreCase("c"))
												 sbCreditFacilities.append("<tr> <td colspan='7'><b>Co - Applicant - "+name +"</b>  </td></tr>");
												 else
												 sbCreditFacilities.append("<tr> <td colspan='7'><b>Co - Obligant - "+name +"</b>  </td></tr>");	
											 }
											
											 sbCreditFacilities.append("<tr align='center'>");
										     sbCreditFacilities.append("<td>"+ (k+1)+"&nbsp;</td>");
											 sbCreditFacilities.append("<td align='left'>"+vecValcoapp.get(1)+"&nbsp;</td>");
											 sbCreditFacilities.append("<td>"+vecValcoapp.get(2)+"&nbsp;</td>");
											 sbCreditFacilities.append("<td align='right'>"+vecValcoapp.get(3)+"&nbsp;</td>");
											 sbCreditFacilities.append("<td align='right'>"+vecValcoapp.get(4)+"&nbsp;</td>");
										     sbCreditFacilities.append("<td colspan='2'>&nbsp;</td>");
											 sbCreditFacilities.append("</tr>");
										}
									}
							}
						}
						else if(!documentCode.equalsIgnoreCase("DOC_952"))
						{
							sbCreditFacilities.append("<tr align='center'>");
							sbCreditFacilities.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
							sbCreditFacilities.append("</tr>");
						}
					}
					sbCreditFacilities.append("</table>");
					template=template.replaceAll("@CreditFacilities", sbCreditFacilities.toString());
				}
				if(template.contains("@Litigations"))
				{
					StringBuffer sbLitigations=new StringBuffer();
					
					sbLitigations.append("<Table border='1' width='95%' align='center'>");
					sbLitigations.append("<tr align='center'>");
				    sbLitigations.append("<td>Sl.No.</td>");
				    sbLitigations.append("<td>Name of the Bank/ Financiers/others With whom facing</td>");
				    sbLitigations.append("<td>Nature of Litigation</td>");
				    sbLitigations.append("<td>Date of Litigation</td>");
				    sbLitigations.append("<td>Claim amount (Rs.)</td>");
                    sbLitigations.append("<td>Other Claims</td>");
                    sbLitigations.append("<td>Present Position</td>");
                    sbLitigations.append("</tr>");

                    if(documentCode.equalsIgnoreCase("DOC_952"))
					{
                        sbLitigations.append(" <tr> <td colspan='7'><b>Applicant -"+ Helper.correctNull((String) hshRecord.get("borrowername"))+"</b></td></tr>");

                    vecData = (ArrayList) hshRecord.get("vecData");
					if (vecData.size() > 0 && vecData != null) 
					{
						for (int i = 0; i < vecData.size(); i++) 
						{
							vecVal = (ArrayList) vecData.get(i);
							String litigation=(String) vecVal.get(7);
							if(litigation.equals("Y"))
							{
								sbLitigations.append("<tr align='center'>");
								sbLitigations.append("<td>"+ (i + 1)+"&nbsp;</td>");
								sbLitigations.append(" <td align='left'>"+vecVal.get(1)+"&nbsp;</td>");
								sbLitigations.append("<td>"+vecVal.get(8)+"&nbsp;</td>");
								sbLitigations.append("<td>"+vecVal.get(9)+"&nbsp;</td>");
								sbLitigations.append("<td align='right'>"+vecVal.get(10)+"&nbsp;</td>");
								sbLitigations.append("<td align='right'>"+vecVal.get(11)+"&nbsp;</td>");
								sbLitigations.append("<td>"+vecVal.get(12)+"&nbsp;</td>");
								sbLitigations.append("</tr>");
							}
						}
					} 
					else
					{
						    sbLitigations.append("<tr>");
		                    sbLitigations.append("<td colspan='7' align='center'> Nil &nbsp; <br><br> <br></td>");
		                    sbLitigations.append("</tr>");
					}
					}
				
					ArrayList vecDatacoapp=new ArrayList();
					ArrayList vecValcoapp = new ArrayList();
					veccoappguaRow = (ArrayList) hshRecord.get("veccoappguaRow");
					if (veccoappguaRow.size() > 0 && veccoappguaRow != null) 
					{
						for (int i = 0; i < veccoappguaRow.size(); i++) 
						{
							boolean bflag=true;
							veccoappgua = (ArrayList) veccoappguaRow.get(i);
								String name =(String)veccoappgua.get(0);
								vecDatacoapp=(ArrayList)veccoappgua.get(1);
								
							if(vecDatacoapp!=null && vecDatacoapp.size()>0)
							{
								 for(int k=0;k<vecDatacoapp.size();k++)
									{
									 
									 
										vecValcoapp=(ArrayList)vecDatacoapp.get(k);
										
										
										String litigation=(String) vecValcoapp.get(5);
										if(litigation.equals("Y"))
										{
											
											if(bflag)
											 {
												 if(Helper.correctNull((String)vecValcoapp.get(11)).equalsIgnoreCase("c"))
													 sbLitigations.append("<tr> <td colspan='7'><b>Co - Applicant - "+name +"</b>  </td></tr>");
												 else
													 sbLitigations.append("<tr> <td colspan='7'><b>Co - Obligant - "+name +"</b>  </td></tr>");
												 bflag=false;
											 }
											
										 sbLitigations.append("<tr align='center'>");
										 sbLitigations.append("<td>"+ (k+1)+"&nbsp;</td>");
										 sbLitigations.append("<td align='left'>"+vecValcoapp.get(1)+"&nbsp;</td>");
										 sbLitigations.append("<td>"+vecValcoapp.get(6)+"&nbsp;</td>");
										 sbLitigations.append("<td >"+vecValcoapp.get(7)+"&nbsp;</td>");
										 sbLitigations.append("<td align='right'>"+vecValcoapp.get(8)+"&nbsp;</td>");
										 sbLitigations.append("<td align='right'>"+vecValcoapp.get(9)+"&nbsp;</td>");
										 sbLitigations.append("<td>"+vecValcoapp.get(10)+"&nbsp;</td>");
										 sbLitigations.append("</tr>");
										}
									}
							}
						}
					}
					else if(!documentCode.equalsIgnoreCase("DOC_952"))
					{
						sbLitigations.append("<tr>");
	                    sbLitigations.append("<td colspan='7' align='center'> Nil &nbsp; <br><br> <br></td>");
	                    sbLitigations.append("</tr>");
					}
					
                    
                    sbLitigations.append("</table>");
                    
					template=template.replaceAll("@Litigations", sbLitigations.toString());
				}
				
			 if(template.contains("@Descriptionofgoldornaments"))
   			  {
   				  StringBuffer sbsecurityPledged = new StringBuffer();
   				  sbsecurityPledged.append("<Table border='1' width='100%' cellspacing='1' cellpadding='3' align='center'>");
   				  sbsecurityPledged.append("<tr align='center'>");
   				  sbsecurityPledged.append("<td rowspan='2'>Sl. No. </td><td rowspan='2'>Description of gold ornaments</td><td colspan='2'>Weight in grams </td> <td rowspan='2'> Estimated value of the article (Rs.) </td>");
   				  sbsecurityPledged.append("</tr>");
   				  sbsecurityPledged.append("<tr>");
   				  sbsecurityPledged.append("<td> Gross </td> <td>Net</td> ");
   				  sbsecurityPledged.append("</tr>");
   				  	double dbtotGross=0.00;
   					double  dbtotNet=0.00;
   					double dbNetWeight=0.00;
   					double dbtotEstvalue=0.00;
   					ArrayList arrcolGold = new ArrayList();
   					
   					arrRowGold=(ArrayList)hshRecord.get("arrRowGold");
   					if(arrRowGold.size()>0 && arrRowGold!=null)
   					{
   						for(int i=0;i<arrRowGold.size();i++)
   						{
   							arrcolGold=(ArrayList)arrRowGold.get(i);
   							dbtotGross=dbtotGross+Double.parseDouble(Helper.correctDouble((String)arrcolGold.get(2)));
   							dbtotNet=dbtotNet+Double.parseDouble(Helper.correctDouble((String)arrcolGold.get(3)));
   							dbtotEstvalue=dbtotEstvalue+Double.parseDouble(Helper.correctDouble((String)arrcolGold.get(4)));
   				 
   							
   				  sbsecurityPledged.append("<tr>");
   				  sbsecurityPledged.append("<td>"+ arrcolGold.get(0)+"&nbsp;</td><td align='left'>"+ arrcolGold.get(1) +"&nbsp;</td><td>"+ arrcolGold.get(2)+"&nbsp;</td><td> "+arrcolGold.get(3)+"&nbsp;</td> <td align='right'>"+ arrcolGold.get(4) +"&nbsp;</td>");
   				  sbsecurityPledged.append("</tr>");
   						}
   					}
   					else 
					{ 
   					  sbsecurityPledged.append("<tr>");
   	   				  sbsecurityPledged.append("<td>&nbsp;<br><br><br><br></td><td align='left'>&nbsp;</td><td>&nbsp;</td><td> &nbsp;</td> <td align='right'>&nbsp;</td>");
   	   				  sbsecurityPledged.append("</tr>");
   						
					}
   				  sbsecurityPledged.append("<tr align='center'>");
   				  sbsecurityPledged.append("<td> &nbsp;</td><td>TOTAL</td><td>"+ jtn.format(dbtotGross) +"&nbsp;</td><td>"+jtn.format(dbtotNet)+"&nbsp;</td> <td align='right'>"+ jtn.format(dbtotEstvalue)+"&nbsp;</td>");
   				  sbsecurityPledged.append("</tr>");
   				  sbsecurityPledged.append("</table>");
   				  template=template.replaceAll("@Descriptionofgoldornaments", sbsecurityPledged.toString()); 
   			  }	
			 
			 
			 if(template.contains("@Areaundercultivation"))
			  {
				  String agr_typeofloan=Helper.correctNull((String) hshRecord.get("agr_typeofloan"));
				  StringBuffer sbsecurityPledged = new StringBuffer();
				  sbsecurityPledged.append("<Table border='1' width='100%' cellspacing='1' cellpadding='3' class='outertable' align='center'>");
				  sbsecurityPledged.append("<tr align='center'>");
				  sbsecurityPledged.append("<td width='10%' > Sl. No. <br> <center>(1) </center> </td><td>Area under cultivation (Acres)<br><center>(2)#</center></td><td>Nature of crop grown<br><center>(3)</center> </td><td>Scale of Finance<br><center>(4)</center> </td> <td>Eligible loan amount(2)x (4)<br> <center> (5) </center> </td>");
				  sbsecurityPledged.append("</tr>");
				  
					ArrayList arrcolagcp = new ArrayList();
					arryRowagcp=(ArrayList)hshRecord.get("arryRowagcp");
					if(arryRowagcp.size()>0 && arryRowagcp!=null)
					{
						for(int i=0;i<arryRowagcp.size();i++)
						{
							arrcolagcp=(ArrayList)arryRowagcp.get(i);
					  
						  sbsecurityPledged.append("<tr>");
						  sbsecurityPledged.append("<tr align='right'><td align='center'> "+arrcolagcp.get(0)+"&nbsp;</td><td >"+arrcolagcp.get(1)+"&nbsp;</td><td align='center'>"+arrcolagcp.get(2)+"&nbsp;</td><td>"+arrcolagcp.get(3)+"&nbsp;</td> <td>"+arrcolagcp.get(4)+"&nbsp;</td>");
						  sbsecurityPledged.append("</tr>");
						} 
					}
					else 
					{  
						  sbsecurityPledged.append("<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td> <td>&nbsp;</td></tr>");
						  sbsecurityPledged.append("<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td> <td>&nbsp;</td></tr>");
						  sbsecurityPledged.append("<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td> <td>&nbsp;</td></tr>");
						
					}
				if(agr_typeofloan.equals("C"))
				{
				  sbsecurityPledged.append("<tr align='right'><td colspan='4'> <b> Total (a) </b> </td> <td> <b> "+Helper.correctNull((String) hshRecord.get("agr_totalamt"))+"</b> &nbsp;</td></tr>");
				  sbsecurityPledged.append("<tr align='right'><td colspan='4'> <b> Add: </b>  loan for post harvest  activities (b) </td> <td> <b>"+Helper.correctNull((String) hshRecord.get("agr_margin_amt"))+" </b> &nbsp;</td></tr>");
				  sbsecurityPledged.append("<tr align='right'><td colspan='4'> <b> Total loan eligible (a) + (b) </b> </td> <td> <b>"+Helper.correctNull((String) hshRecord.get("agr_eligible_amt"))+" </b> &nbsp;</td></tr>");
				} 
				else 
				{
					  sbsecurityPledged.append("<tr align='right'><td colspan='4'> <b> Total (a) </b> </td> <td> &nbsp;</td></tr>");
					  sbsecurityPledged.append("<tr align='right'><td colspan='4'> <b> Add: </b>  loan for post harvest  activities (b) </td> <td> &nbsp;</td></tr>");
					  sbsecurityPledged.append("<tr align='right'><td colspan='4'> <b> Total loan eligible (a) + (b) </b> </td> <td> &nbsp;</td></tr>");
				}
				  sbsecurityPledged.append("</table>");
				  template=template.replaceAll("@Areaundercultivation", sbsecurityPledged.toString()); 
			  }	  
				 
			 if(template.contains("@DescriptionofSecurity"))
			  {
				  StringBuffer sbDescriptionofSecurity = new StringBuffer();
				 
				  ArrayList arrsecDetails = new ArrayList();
				  arrsecDetails=(ArrayList)hshRecord.get("secDetails");
				
				  
					if(arrsecDetails.size()>0 && arrsecDetails!=null)
					{
						sbDescriptionofSecurity.append("<Table border='1' width='95%' align='center'>");
						sbDescriptionofSecurity.append("<tr>");
						sbDescriptionofSecurity.append("<td align='center'> SCHEDULE 'B' <br> (Description of Security & Nature of charge created such as mortgage of immovable property or hypothecation of movables etc.) ");
						sbDescriptionofSecurity.append("</tr>");
						sbDescriptionofSecurity.append("<tr> <td>");

						for(int i=0;i<arrsecDetails.size();i++)
						{
							if(arrsecDetails.size()==1)
							{
								
								sbDescriptionofSecurity.append(arrsecDetails.get(i)+"<br>");
								

							}
							else
							{
								sbDescriptionofSecurity.append((i+1)+") "+arrsecDetails.get(i)+"<br>");
							}
						}
						sbDescriptionofSecurity.append(" &nbsp; </td> </tr>");	
						sbDescriptionofSecurity.append("</table>");
					}
					
					else
					{
						sbDescriptionofSecurity.append("");
					}
				  template=template.replaceAll("@DescriptionofSecurity", sbDescriptionofSecurity.toString()); 
			  }
			 
			 if(template.contains("@SecurityDesc"))
			 {
				  StringBuffer sbDescriptionofSecurity = new StringBuffer();
				  ArrayList arrsecDetails = new ArrayList();
				  arrsecDetails=(ArrayList)hshRecord.get("secDetails");
				  
				  if(arrsecDetails.size()>0 && arrsecDetails!=null)
					{
						for(int i=0;i<arrsecDetails.size();i++)
						{
							if(arrsecDetails.size()==1)
							{
								sbDescriptionofSecurity.append(arrsecDetails.get(i)+"<br>");
							}
							else
							{
								sbDescriptionofSecurity.append((i+1)+")  "+arrsecDetails.get(i)+"<br>");
							}
						}
					}
				  template=template.replaceAll("@SecurityDesc", sbDescriptionofSecurity.toString()); 
			 }
			 
			 if(template.contains("@date"))
			 {
			 	  String date=Helper.getCurrentDateTime();
				  template=template.replaceAll("@date", date); 
			 }
			
			 if(rs1!=null)
     			rs1.close();
			 
			 if(template.contains("@coapplicant"))
			 {
				  StringBuffer tempappList=new StringBuffer();
				  ArrayList arrcoappdet = new ArrayList();  
				  ArrayList arrcoappdetails = new ArrayList();
				  arrcoappdetails = (ArrayList) hshRecord.get("arrcoappList");
				  if(arrcoappdetails.size()>0 && arrcoappdetails!=null)
				     {
				     	for(int i=0;i<arrcoappdetails.size();i++)
				     	{
				     		arrcoappdet=(ArrayList)arrcoappdetails.get(i);
				     		String borrowername=Helper.correctNull((String) arrcoappdet.get(0));
				     		String cbsid=Helper.correctNull((String) arrcoappdet.get(11));
				     	    strapptype=Helper.correctNull((String) arrcoappdet.get(12));
				     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
				     		if(arrcoappdetails.size()==1)
				     		{
				     			tempappList.append(arrcoappdet.get(0));
				     		}
				     		else
				     		{
				     			if((i+1)==arrcoappdetails.size())
				     				tempappList.append(arrcoappdet.get(0)+". ");
				     			else
				     				tempappList.append(arrcoappdet.get(0)+", ");
				     		}
				     	}
				     }
				    template=template.replaceAll("@coapplicant", tempappList.toString()); 
			 }
			 
			 if(template.contains("@coobligant"))
			 {
				  StringBuffer tempappList=new StringBuffer();
				  ArrayList arrcoappdet = new ArrayList();  
				  ArrayList arrcoappdetails = new ArrayList();
				  arrcoappdetails = (ArrayList) hshRecord.get("arrcoobligRow");
				  String borrowername="",cbsid="";
				  if(arrcoappdetails.size()>0 && arrcoappdetails!=null)
				     {
				     	for(int i=0;i<arrcoappdetails.size();i++)
				     	{
				     		
				     		arrcoappdet=(ArrayList) arrcoappdetails.get(i);
				     		borrowername=Helper.correctNull((String) arrcoappdet.get(0));
				     		cbsid=Helper.correctNull((String) arrcoappdet.get(11));
				     	   strapptype=Helper.correctNull((String) arrcoappdet.get(12));
				     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
				     		arrcoappdet=(ArrayList)arrcoappdetails.get(i);
				     		if(arrcoappdetails.size()==1)
				     		{
				     			tempappList.append(arrcoappdet.get(0));
				     		}
				     		else
				     		{
				     			if((i+1)==arrcoappdetails.size())
				     				tempappList.append(arrcoappdet.get(0)+". ");
				     			else
				     				tempappList.append(arrcoappdet.get(0)+", ");
				     		}
				     	}
				     }
				    template=template.replaceAll("@coobligant", tempappList.toString()); 
			 }
			
			
			 hshValues.put("strTemplate",template);
			 hshValues.put("appid", appid);
			 hshValues.put("docOpenType", docOpenType);
			 hshValues.put("documentCode", documentCode);
			 template=getDocTemplate1(hshValues);
			 hshRecord.put("doc_template",template);
			 
    	}
		
    		
    	}
    	catch(Exception e){
    		throw new EJBException("Exception in  getDocTemplate"+e.getMessage());
    	}
    	return hshRecord;
    }
	
	public HashMap getDocTemplateFacility(HashMap hshValues)
	{
		ResultSet rs=null,rs4=null;
    	ResultSet rs1=null;
    	ResultSet rs2=null;
    	ResultSet rs3=null;
    	ArrayList arrValues=new ArrayList();
    	HashMap hshRecord=new HashMap();
    	ArrayList vecData = new ArrayList();
		ArrayList vecVal=new ArrayList();
    	HashMap hshQuery=null;
    	HashMap hshQueryValues=new HashMap();
    	String docid=Helper.correctNull((String)hshValues.get("doc_id"));
    	String strappno=Helper.correctNull((String)hshValues.get("appno"));
    	String documentCode=Helper.correctNull((String)hshValues.get("document_code"));
    	String constitionapp=Helper.correctNull((String)hshValues.get("strConstitution"));
    	String strUsrID=Helper.correctNull((String)hshValues.get("strUserId"));
    	String docOpenType=Helper.correctNull((String)hshValues.get("docOpenType"));
		String strOrgCode=Helper.correctNull((String)hshValues.get("strOrgCode"));
		String strStatus=Helper.correctNull((String)hshValues.get("strappstatus"));
		java.text.NumberFormat jtn= java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);	
		java.text.NumberFormat jtn1= java.text.NumberFormat.getInstance();
		jtn1.setMaximumFractionDigits(1);
		jtn1.setMinimumFractionDigits(1);
		jtn1.setGroupingUsed(false);
		String template="",template1="",strTemp="",strQuery="",FACILITY_INTTYPE="",mclrRelDate="",FACILITY_MCLRTYPE="",mclr_tablecode="",FACILITY_PERINSTALL="",FACILITY_HOLIDAYPERIOD="";
		String FACILITY_MONTHS="",FACILITY_SNO="",FACILITY_CODE="",BORROWER_ID="",strQuery1="",arrappminor="",guard_name="",FACILITY_INTCHARGED="";
		ArrayList arrguaList=new ArrayList();
    	ArrayList arrguaRow=new ArrayList();
    	ArrayList arrcoappList=new ArrayList();
    	ArrayList arrcoappRow=new ArrayList();
    	ArrayList arrappRow=new ArrayList();
    	ArrayList arrappList=new ArrayList();

    	ArrayList arrpropRow=new ArrayList();
    	ArrayList arrpropList=new ArrayList();
    	ArrayList arrcoobligRow=new ArrayList();
    	ArrayList arrcoobligList=new ArrayList();
    	
    	int itemp=0;
		int appcoappdetailslno=1;
		int coobligguaaddslno=1;
		int coobligguaDetslno=1;
		int appcoappslno=1,FACILITY_HOLIDAY_PERIOD=0,FACILITY_MONTHS_INT=0;
		String strProcessDate="";
		long intDatediff=0;
		String[] strArrsno={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
    	String strDisbBrCode="";
    	double FACILITY_SANCINT=0.00,FACILITY_SANCAMT=0.00;
    	double dblRate = 0.00, dblDenomi = 0.00, dblNumeri = 0.00, dblEMI = 0.00;
		String hidfacslno=Helper.correctNull((String)hshValues.get("hidfacslno"));

		try
		{
	 		ComProposalBean compbean = new ComProposalBean();
	 		/*if(strStatus.equalsIgnoreCase("pa")){
			hshQuery = new HashMap();
			hshQueryValues = new HashMap(); 		
			arrValues=new ArrayList();
			hshQuery.put("strQueryId","del_doc_details");
			arrValues.add(strappno);
			arrValues.add(docid);
			arrValues.add(hidfacslno);
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			hshQueryValues.put("size","1");
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
	 		}*/
    		rs=DBUtils.executeLAPSQuery("sel_facbasedonsnogrp^"+strappno+"^"+hidfacslno);
    		if(rs.next())
    		{
    			strProcessDate=Helper.correctNull(rs.getString("facility_mclr_reldate"));
    			strDisbBrCode=Helper.correctNull(rs.getString("facility_doc_branchcode"));
    			if(strProcessDate.equalsIgnoreCase(""))
    				strProcessDate=Helper.getCurrentDateTime();
    		}
    		String doc_branchcode="";
    		if(rs!=null){rs.close();}
			if(strStatus.equalsIgnoreCase("pa")){
 				rs=DBUtils.executeLAPSQuery("sel_facLoanRepayType_Corp^"+strappno+"^"+hidfacslno);		 
 				if(rs.next())
 				{
 					doc_branchcode=correctNull(rs.getString("org_scode"));
 				}
			}
			else if(strStatus.equalsIgnoreCase("op")){
  				rs=DBUtils.executeLAPSQuery("sel_cbsdetails^"+strappno+"^"+hidfacslno);		 
  				if(rs.next())
  				{
  					doc_branchcode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
  				}
			}
    		if(rs!=null)
    			rs.close();
    		rs=DBUtils.executeLAPSQuery("sel_dynamicdocumentmaster^"+docid);
    		if(rs.next()){
    			intDatediff=Helper.dateDiff(Helper.correctNull(rs.getString("doc_createddate")),strProcessDate);
    			if(intDatediff<0)
    				strProcessDate=Helper.correctNull(rs.getString("doc_createddate"));
    		}
    		
    		if(documentCode.equalsIgnoreCase("DOC_952CO_OBLIG")||documentCode.equalsIgnoreCase("DOC_952") || documentCode.equalsIgnoreCase("DOC_AADHAAR"))
    		{
    			rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
        		if(rs.next()){
        			
        			strTemp="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
        		}
        		
        		if(rs1!=null)
        			rs1.close();
        		if(documentCode.equalsIgnoreCase("DOC_952"))
        			rs1=DBUtils.executeLAPSQuery("sel_appcoappdetailsprint_facility^"+strappno+"^"+strappno); // query has to chnange @@@@@@@@@@@@@@@
        		else if(documentCode.equalsIgnoreCase("DOC_952CO_OBLIG"))
        			rs1=DBUtils.executeLAPSQuery("sel_coobligdetailsprint_facility^"+strappno+"^"+hidfacslno); 
        		else if(documentCode.equalsIgnoreCase("DOC_AADHAAR"))
        			rs1=DBUtils.executeLAPSQuery("sel_facility_compDet_indiv^"+strappno+"^"+hidfacslno+"^"+strappno );
        			
        		while(rs1.next())
        		{
        			
        			template=strTemp;
        			if(rs!=null){rs.close();}
    				rs=DBUtils.executeLAPSQuery("sel_facLoanRepayType_Corp^"+strappno+"^"+hidfacslno);		 
    				if(rs.next())
    				{
    					String Branch_code=correctNull(rs.getString("org_scode"));
    					if(rs2!=null){rs2.close();}
    					rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+Branch_code);		 
    					if(rs2.next())
    					{
    					hshRecord.put("orgHead_name",Helper.correctNull(rs2.getString("org_headname")));
    					}
    				}
    				if(template.contains("@orgHead_name"))
    				{
    					template=template.replaceAll("@orgHead_name",Helper.correctNull((String)hshRecord.get("orgHead_name")));
    				}
    				if(rs!=null){rs.close();}
    				rs=DBUtils.executeLAPSQuery("sel_organisationdetails^"+strOrgCode);		 
    				if(rs.next())
    				{
    					hshRecord.put("org_name",Helper.correctNull(rs.getString("OrganisationName")));
    					hshRecord.put("OrganisationAddress1",Helper.correctNull(rs.getString("OrganisationAddress1")));
    					hshRecord.put("OrganisationAddress2",Helper.correctNull(rs.getString("OrganisationAddress2")));
    					hshRecord.put("OrganisationCity",Helper.correctNull(rs.getString("OrganisationCity")));
    					hshRecord.put("Organisationzip",Helper.correctNull(rs.getString("Organisationzip")));
    					hshRecord.put("OrganisationState",Helper.correctNull(rs.getString("OrganisationState")));
    					
    					hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("OrganisationName")));
    					hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("OrganisationCity")));
    					hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("Organisationzip")));
    				}
    				if(strDisbBrCode.equalsIgnoreCase(""))
    				{
    					strQuery =SQLParser.getSqlQuery("sel_cbsdetails^" +strappno+"^"+hidfacslno); 
    					rs = DBUtils.executeQuery(strQuery);
    					if(rs.next())
    					{
    						strDisbBrCode=Helper.correctInt(rs.getString("LOANDISBBRANCH"));
    					}
    				}
    				
    				if(!strDisbBrCode.equalsIgnoreCase(""))
    				{
    					if(rs!=null){rs.close();}
    					rs=DBUtils.executeLAPSQuery("sel_organisationname^"+strDisbBrCode);		 
    					if(rs.next())
    					{
    						hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("org_name")));
    						hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("city_name")));
    						hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("org_zip")));
    					}
    				}
    				if(template.contains("@branchDetails"))
    				{
    					String tempbranchdetail=Helper.correctNull((String)hshRecord.get("strDisbBrname"))+", "+Helper.correctNull((String)hshRecord.get("strDisbBrCity"))+"-"+Helper.correctNull((String)hshRecord.get("strDisbBrzip"));
    					template=template.replaceAll("@branchDetails", tempbranchdetail); 
    				}
    				
    				 arrappRow=new ArrayList();
    		    	 arrappList=new ArrayList();
    				 if(rs2!=null){rs2.close();}
    				 rs2=DBUtils.executeLAPSQuery("sel_app_con_details_Fac^"+strappno+"^"+Helper.correctNull(rs1.getString("perapp_id"))+"^"+hidfacslno+"^"+strappno+"^"+Helper.correctNull(rs1.getString("perapp_id")));
    				  while(rs2.next())
    				  {		String strCbsACno=correctNull(rs2.getString("PERAPP_CBSID"));
    					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
    					  arrappList=new ArrayList();
    					  arrappList.add(correctNull(rs2.getString("FULLNAME")));
    					  
    					  if(residentType.equals("N"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("CON_COMADDR1")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMADDR2")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMCITYNAME")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMZIP")));
        					  arrappList.add(correctNull(rs2.getString("CON_COMSTATENAME")));
    					  }
    					  else
    					  {
    						  arrappList.add(correctNull(rs2.getString("con_permaddr1")));
        					  arrappList.add(correctNull(rs2.getString("con_permaddr2")));
        					  arrappList.add(correctNull(rs2.getString("con_permcity")));
        					  arrappList.add(correctNull(rs2.getString("con_permzip")));
        					  arrappList.add(correctNull(rs2.getString("con_permstate")));
    					  }
    					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
    					  // for minor check
    					  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
    					     if(rs3!=null){ rs3.close(); }
    					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
    					    if(rs3.next()){
    					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
    					      guard_name=correctNull(rs3.getString("minor_guard_name"));
    					    }
    					 if(arrappminor.equalsIgnoreCase("Y"))
    					  { 
    					  arrappList.add(guard_name);
    					  arrappList.add("M/G");	
    					   }
    					  else if(arrappchilddesp.equalsIgnoreCase("M"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("PERAPP_FATNAME")));
    						  arrappList.add("S/o");	
    					  }
    					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
    						  arrappList.add("W/o");	
    					  } 
    					  else if(arrappchilddesp.equalsIgnoreCase("F"))
    					  {
    						  arrappList.add(correctNull(rs2.getString("PERAPP_FATNAME")));
    						  arrappList.add("D/o");	 
    					  }
    					  else
    					  {
    						  arrappList.add(correctNull(rs2.getString("PERAPP_FATNAME")));
    						  arrappList.add(" ");	
    					  }  
    					  String strAge=Helper.calculateAGE(correctNull(rs2.getString("DOB")));
    					  arrappList.add(Helper.correctNull(strAge));
    					 
    						ArrayList nonindvRow=new ArrayList();
    						  ArrayList temp1=new ArrayList();
    						  ArrayList temp2=new ArrayList();
    						  String perappid=correctNull(rs2.getString("perapp_id"));
    						  String divisiontype="",div_name="",nonindiv="";;
    							if(rs!=null){rs.close();}
    							int dcount=0,spcount=0,pcount=0,tcount=0;
    							String temp="";
    							itemp=0;
    							String spconcernsubtype="",spsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
    							while(rs.next())
    							{
    								if(!spconcernsubtype.equals(""))
    								{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ spsubtype="dif";	}
    								}
    								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(spsubtype.equals("same"))
    							{ 
    							if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its "); }
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(spsubtype.equals("same"))
    									{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
    								// for minor check
    								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
    								     if(rs3!=null){ rs3.close(); }
    								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
    								    if(rs3.next()){
    								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
    								      guard_name=correctNull(rs3.getString("minor_guard_name"));
    								    }
    								  if(arrappminor.equalsIgnoreCase("Y"))
    								  { temp1.add(guard_name);
    								   temp1.add("M/G");	 }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
    								  {  temp1.add("S/o");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
    								  { temp1.add("W/o");  
    								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
    								  { temp1.add("D/o");
    								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								  else
    								  {  temp1.add(" ");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								  nonindvRow.add(temp1);
    								spcount++;
    							}
    							temp2.add(nonindvRow);
    							nonindvRow=new ArrayList();
    							itemp=0;
    							String dconcernsubtype="";	String dsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
    							while(rs.next())
    							{
    								if(!dconcernsubtype.equals(""))
    								{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ dsubtype="dif";	}
    								}
    								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(dsubtype.equals("same"))
    							{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its ");	}
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(dsubtype.equals("same"))
    									{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
    								// for minor check
    								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
    								     if(rs3!=null){ rs3.close(); }
    								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
    								    if(rs3.next()){
    								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
    								      guard_name=correctNull(rs3.getString("minor_guard_name"));
    								    }
    								  if(arrappminor.equalsIgnoreCase("Y"))
    								  { temp1.add(guard_name);
    								   temp1.add("M/G");	 }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
    								  {  temp1.add("S/o");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
    								  { temp1.add("W/o");  
    								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
    								  { temp1.add("D/o");
    								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								  else
    								  {  temp1.add(" ");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								nonindvRow.add(temp1);
    								dcount++;
    							}
    							temp2.add(nonindvRow);
    							nonindvRow=new ArrayList();
    							itemp=0;
    							String ptconcernsubtype="",ptsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
    							while(rs.next())
    							{
    								if(!ptconcernsubtype.equals(""))
    								{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ ptsubtype="dif"; }
    								}
    								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(ptsubtype.equals("same"))
    							{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its "); }
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(ptsubtype.equals("same"))
    									{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
    								// for minor check
    								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
    								     if(rs3!=null){ rs3.close(); }
    								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
    								    if(rs3.next()){
    								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
    								      guard_name=correctNull(rs3.getString("minor_guard_name"));
    								    }
    								  if(arrappminor.equalsIgnoreCase("Y"))
    								  { temp1.add(guard_name);
    								   temp1.add("M/G");	 }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
    								  {  temp1.add("S/o");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
    								  { temp1.add("W/o");  
    								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
    								  { temp1.add("D/o");
    								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								  else
    								  {  temp1.add(" ");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								nonindvRow.add(temp1);
    								pcount++;
    							}
    							temp2.add(nonindvRow);
    							nonindvRow=new ArrayList();
    							itemp=0;
    							String tconcernsubtype="",tsubtype="same";
    							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
    							while(rs.next())
    							{
    								if(!tconcernsubtype.equals(""))
    								{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
    									{ tsubtype="dif"; }
    								}
    								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								itemp++;
    							}
    							if(itemp!=0)
    								if(tsubtype.equals("same"))
    							{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
    							else
    							{ nonindvRow.add(" Represented by its "); }
    							rs.beforeFirst();
    							while(rs.next())
    							{
    								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
    								temp1=new ArrayList();
    								if(itemp==1)
    								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								else
    								{
    									if(tsubtype.equals("same"))
    									{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    									else
    									{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
    								}
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
    								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
    								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
    								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
    								// for minor check
    								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
    								     if(rs3!=null){ rs3.close(); }
    								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
    								    if(rs3.next()){
    								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
    								      guard_name=correctNull(rs3.getString("minor_guard_name"));
    								    }
    								  if(arrappminor.equalsIgnoreCase("Y"))
    								  { temp1.add(guard_name);
    								   temp1.add("M/G");	 }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
    								  {  temp1.add("S/o");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
    								  { temp1.add("W/o");  
    								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
    								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
    								  { temp1.add("D/o");
    								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								  else
    								  {  temp1.add(" ");
    								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
    								nonindvRow.add(temp1);
    								tcount++;
    							}
    							temp2.add(nonindvRow);
    							arrappList.add(temp2);
    							arrappList.add(correctNull(rs2.getString("PERAPP_CONSTITUTIONNEW")));
    							arrappList.add(correctNull(rs2.getString("PERAPP_CBSID")));
    							arrappList.add(correctNull(rs2.getString("app_type")));
    					        arrappRow.add(arrappList);
    				  }
    				  if(template.contains("@appAddress"))
    				  {
    					  StringBuffer tempappList=new StringBuffer();	
    					  StringBuffer tempappList1=new StringBuffer();	
    					  tempappList.append("<span align='justify'>");
    					  ArrayList arrappRowdet=new ArrayList();
    					     if(arrappRow.size()>0 && arrappRow!=null)
    					     {
    					     	for(int i=0;i<arrappRow.size();i++)
    					     	{
    					     		arrappRowdet=(ArrayList)arrappRow.get(i);
    							     String constition=(String) arrappRowdet.get(10);
    							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
    					     		if(arrappRow.size()==1)
    					     		{
    							    	if(constition.equals("01"))
    							    	{
    							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    							    	}
    							    	else
    							    	{
    					     				if(arrIndvRow.size()>0)
    									    {
    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    						     				for(int j=0;j<arrIndvRow.size();j++)
    						     				{
    									    		ArrayList temparr=new ArrayList();
    									    		ArrayList temparr1=new ArrayList();
    									    		temparr1=(ArrayList) arrIndvRow.get(j);
    									    		if(temparr1.size()>0)
    									    		{
    									    		tempappList.append(""+temparr1.get(0)+"<br/>");
    									    		tempappList1.append(""+temparr1.get(0)+"");
    									    		for(int k=1;k < temparr1.size();k++)
    									    		{
    									    			temparr=(ArrayList) temparr1.get(k);
    												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
    												    tempappList1.append(temparr.get(0)+"  ");
    												    }}
    						     				}
    						     				tempappList.append("");
    									    }
    					     				else
    					     				{
    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    					     				}
    							    	}
    					     		}
    					     		else
    					     		{
    					     			if(constition.equals("01"))
    					     			{
    							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    					     			}
    					     			else
    					     			{
    					     				if(arrIndvRow.size()>0)
    									    {
    								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    						     				for(int j=0;j<arrIndvRow.size();j++)
    						     				{
    									    		ArrayList temparr=new ArrayList();
    									    		ArrayList temparr1=new ArrayList();
    									    		temparr1=(ArrayList) arrIndvRow.get(j);
    									    		if(temparr1.size()>0)
    									    		{
    									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
    									    		tempappList1.append(temparr1.get(0));
    									    		for(int k=1;k < temparr1.size();k++)
    									    		{
    									    			temparr=(ArrayList) temparr1.get(k);
    												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
    												    tempappList1.append(temparr.get(0)+"  ");
    									    		}}
    						     				}
    						     				tempappList.append("<br>");
    									    }
    					     				else
    					     				{
    								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
    					     				}
    					     				
    					     			}
    					     		}
    					     		String borrowername="";
    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
	 					     			borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
	 					     		}else{
	 					     			 borrowername=Helper.correctNull((String) arrappRowdet.get(0));
	 					     		}

    		   					    String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
    		   					    String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
						     	    compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
    					     	}
    					     }
    					     tempappList.append("</span>");
    					     template=template.replaceAll("@appAddress", tempappList.toString()); 
    				  }
    				
    				
    				if(template.contains("@CreditFacilities"))
    				{
    					StringBuffer sbCreditFacilities=new StringBuffer();
    					
    					sbCreditFacilities.append("<Table border='1' width='95%' align='center'>");
    					sbCreditFacilities.append("<tr align='center'>");
    				    sbCreditFacilities.append("<td>Sl.No.</td>");
    				    sbCreditFacilities.append("<td>Name of the Bank/ Financiers/others</td>");
    				    sbCreditFacilities.append("<td>Nature of facility</td>");
    				    sbCreditFacilities.append("<td>Limit (Rs.)</td>");
    				    sbCreditFacilities.append("<td>Balance Due (Rs.)</td>");
                        sbCreditFacilities.append("<td colspan='2'>Securities & Value (Rs.)</td>");
                        sbCreditFacilities.append("</tr>");
                        
                       int i=0;
                        
                        strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+Helper.correctNull(rs1.getString("perapp_id")));
						rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							 sbCreditFacilities.append("<tr align='center'>");
						     sbCreditFacilities.append("<td>"+ (++i)+"&nbsp;</td>");
						     
						     String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
								rs2 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
								if(rs2.next())
								{
									strBankingcode=Helper.correctNull(rs2.getString("STAT_DATA_DESC1"));//1
								}
								else
								{
									strBankingcode="";
								}
							 sbCreditFacilities.append("<td align='left'>"+strBankingcode+"&nbsp;</td>");
							 
							 String perbank_type=Helper.correctInt((String)rs.getString("perbank_type"));
								if(perbank_type.equals("1"))
								{
									perbank_type="Working Capital";
								}
								else if(perbank_type.equals("2"))
								{
									perbank_type="Term Loan";
									
								}
								else
								{
									perbank_type="";
								}
							 sbCreditFacilities.append("<td>"+perbank_type+"&nbsp;</td>");
							 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_limit"))))+"&nbsp;</td>");
							 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_os"))))+"&nbsp;</td>");
						     sbCreditFacilities.append("<td colspan='2'>"+Helper.correctNull(rs.getString("PERBANK_SECDESCRIP"))+" - "+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_SECVALUE"))))+"</td>");
							 sbCreditFacilities.append("</tr>");
						}
						
						if(i==0)
						{
							sbCreditFacilities.append("<tr align='center'>");
							sbCreditFacilities.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
							sbCreditFacilities.append("</tr>");
						}

    					sbCreditFacilities.append("</table>");
    					template=template.replaceAll("@CreditFacilities", sbCreditFacilities.toString());
    				}
    				
    				
    				if(template.contains("@Litigations"))
    				{
    					StringBuffer sbLitigations=new StringBuffer();
    					
    					sbLitigations.append("<Table border='1' width='95%' align='center'>");
    					sbLitigations.append("<tr align='center'>");
    				    sbLitigations.append("<td>Sl.No.</td>");
    				    sbLitigations.append("<td>Name of the Bank/ Financiers/others With whom facing</td>");
    				    sbLitigations.append("<td>Nature of Litigation</td>");
    				    sbLitigations.append("<td>Date of Litigation</td>");
    				    sbLitigations.append("<td>Claim amount (Rs.)</td>");
                        sbLitigations.append("<td>Other Claims</td>");
                        sbLitigations.append("<td>Present Position</td>");
                        sbLitigations.append("</tr>");
                        
                        int i=0;
                        
                        strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+Helper.correctNull(rs1.getString("perapp_id")));
						rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							if(Helper.correctNull((String)rs.getString("PERBANK_LITIGATIONS")).equals("Y"))
							{
								sbLitigations.append("<tr align='center'>");
								sbLitigations.append("<td>"+ (++i)+"&nbsp;</td>");
								
								String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
								rs2 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
								if(rs2.next())
								{
									strBankingcode=Helper.correctNull(rs2.getString("STAT_DATA_DESC1"));//1
								}
								else
								{
									strBankingcode="";
								}
								sbLitigations.append(" <td align='left'>"+strBankingcode+"&nbsp;</td>");
								sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_NATURELITIGATION"))+"&nbsp;</td>");
								sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_DATELITIGATION"))+"&nbsp;</td>");
								sbLitigations.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_CLAIMAMOUNT"))))+"&nbsp;</td>");
								sbLitigations.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_OTHERCLAIMS"))))+"&nbsp;</td>");
								sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_PRESENTPOS"))+"&nbsp;</td>");
								sbLitigations.append("</tr>");
							}
						}
						
						if(i==0)
						{
							sbLitigations.append("<tr align='center'>");
							sbLitigations.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
							sbLitigations.append("</tr>");
						}

						sbLitigations.append("</table>");
    					template=template.replaceAll("@Litigations", sbLitigations.toString());
                        
                        
    				}
    				 if(template.contains("@date"))
    				 {
    				 	  String date=Helper.getCurrentDateTime();
    					  template=template.replaceAll("@date", date); 
    				 }
    				/*// @Branchname
    				 String Branch_code="";
    				if(rs2!=null){rs2.close();}
     				rs2=DBUtils.executeLAPSQuery("sel_facLoanRepayType_Corp^"+strappno+"^"+hidfacslno);		 
     				if(rs2.next())
     				{
     					Branch_code=correctNull(rs2.getString("org_scode"));
     					if(rs!=null){rs.close();}
        				rs=DBUtils.executeLAPSQuery("sel_doc_branchName^"+Branch_code);		 
        				if(rs.next())
        				{
        					template=template.replaceAll("@Branchname", correctNull(rs.getString("org_name")));
        				}
     					//template=template.replaceAll("@Branchname", correctNull(rs2.getString("org_name")));
     				}
     				//end
     			*/     			
    				// @Branchname
    				 String strBranch="",strBranchCity="";
    				 if(rs2!=null){ rs2.close(); }
    	 				rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
    	 				if(rs2.next()){
    	 						strBranch=correctNull(rs2.getString("ORG_NAME"));
    		 					if(rs!=null){rs.close();}
    							rs=DBUtils.executeLAPSQuery("sel_cityname^"+correctNull(rs2.getString("ORG_CITY")));		 
    							if(rs.next())
    							{
    								strBranchCity=correctNull(rs.getString("city_name"));
    							}
    	 					
    	 				}
    	 				template=template.replaceAll("@Branchname", strBranch);
    	 				template=template.replaceAll("@BranchCity", strBranchCity);
    				
    				 //end
    				 String borrowename="",aadhaarno="",cbsid="",strapptype="";
    				if(rs!=null){rs.close();}
   				 rs=DBUtils.executeLAPSQuery("sel_perappl_aadhaarcorp^"+strappno+"^"+Helper.correctNull(rs1.getString("perapp_id"))+"^"+hidfacslno+"^"+strappno+"^"+Helper.correctNull(rs1.getString("perapp_id")));

    			//	rs=DBUtils.executeLAPSQuery("sel_perappl_aadhaarcorp^"+Helper.correctNull(rs1.getString("perapp_id")));		 
    				if(rs.next())
    				{
    					borrowename=Helper.correctNull(rs.getString("borrowename"));
    					aadhaarno=Helper.correctNull(rs.getString("PERAPP_AADHAAR"));
    					cbsid=Helper.correctNull(rs.getString("PERAPP_CBSID"));
    					strapptype=Helper.correctNull(rs.getString("app_type"));
    				}
    				if(template.contains("@Aadhaar"))
    				{
    					template=template.replaceAll("@Aadhaar", aadhaarno); 
    				}
    				if(template.contains("@Borrower") ){
		     	       compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowename, cbsid,strStatus,strapptype);
    					
    					template=template.replaceAll("@Borrower", borrowename); 
    				}
			
    				 
    				template1+=template+"<br style='page-break-before:always'>";
    				
        		}
        		
        		hshRecord.put("doc_template",template1);	
        		
    		}
    		else if(documentCode.equalsIgnoreCase("DOC_953"))
    		{
    			rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
        		if(rs.next())
        		{
        			strTemp="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
        		}
        		
        		template=strTemp;
        		hshValues.put("template", template);
				HashMap hshval=new HashMap();
				hshval=getDOC953_data(hshValues);
        		
    			hshRecord.put("doc_template",hshval.get("template1"));		
    		}
    		else
    		{
    			
    			 String borrowename1="",cbsid1="",strapptype1="";
 				if(rs!=null){rs.close();}
 				rs4=DBUtils.executeLAPSQuery("sel_borrowprint^"+strappno+"^"+hidfacslno+"^"+strappno );
    			
        		while(rs4.next())
        		{
 				rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
 	    		if(rs.next())
 	    		{
 	    			template="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
 	    		}
 	    		if(rs!=null){
 	    			rs.close();
 	    		}
				 rs=DBUtils.executeLAPSQuery("sel_borrowprintdet^"+strappno);

 			//	rs=DBUtils.executeLAPSQuery("sel_perappl_aadhaarcorp^"+Helper.correctNull(rs1.getString("perapp_id")));		 
 				if(rs.next())
 				{
 					borrowename1=Helper.correctNull(rs.getString("borrowename"));
 					cbsid1=Helper.correctNull(rs.getString("PERAPP_CBSID"));
 					strapptype1=Helper.correctNull(rs.getString("app_type"));
 					if(template.contains("@Borrower") ){
 		     	       compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowename1, cbsid1,strStatus,strapptype1);
  					
  					template=template.replaceAll("@Borrower", borrowename1); 
  				}

 				}
 			
 				        		}
    		rs=DBUtils.executeLAPSQuery("select_doc_dynamicmaster^"+docid+"^"+strProcessDate);
    		if(rs.next())
    		{
    			template="<span align='justify'>"+correctNull(Helper.CLOBToString((rs.getClob(("doc_template")))))+"</span>";
    		
    			rs1=DBUtils.executeLAPSQuery("sel_facilityPerapp_details^"+strappno+"^"+hidfacslno);
    			if(rs1.next())
    			{
    				FACILITY_SNO = Helper.correctNull((String)rs1.getString("FACILITY_SNO"));
    				FACILITY_CODE= Helper.correctNull((String)rs1.getString("FACILITY_CODE"));
    				hshRecord.put("FACILITY_APPNO", Helper.correctNull((String)rs1.getString("FACILITY_APPNO")));
    				 BORROWER_ID= Helper.correctNull((String)rs1.getString("BORROWER_ID"));
    				hshValues.put("BORROWER_ID", Helper.correctNull((String)rs1.getString("BORROWER_ID")));
    				hshRecord.put("FACILITY_SANCTIONED", Helper.correctNull((String)rs1.getString("FACILITY_SANCTIONED")));
    				hshRecord.put("FACILITY_CATEGORY", Helper.correctNull((String)rs1.getString("FACILITY_CATEGORY")));
    				FACILITY_MONTHS = Helper.correctInt((String)rs1.getString("FACILITY_MONTHS"));
    				hshValues.put("FACILITY_MONTHS", FACILITY_MONTHS);
    				FACILITY_SANCINT = Double.parseDouble(Helper.correctDouble((String)rs1.getString("FACILITY_SANCTIONEDROI")));
    				hshRecord.put("FACILITY_INTEREST", Helper.correctNull((String)rs1.getString("FACILITY_SANCTIONEDROI")));
    				hshRecord.put("FACILITY_BRANCHNAME", Helper.correctNull((String)rs1.getString("FACILITY_BRANCHNAME")));
    				FACILITY_SANCAMT = Double.parseDouble(Helper.correctDouble((String)rs1.getString("FACILITY_SANCAMT")));
    				hshRecord.put("FACILITY_SANCAMT", Helper.correctNull((String)rs1.getString("FACILITY_SANCAMT")));
    				//hshRecord.put("FACILITY_TENOR", Helper.correctNull((String)rs1.getString("FACILITY_TENOR")));
    				  FACILITY_INTTYPE=Helper.correctNull((String)rs1.getString("FACILITY_INTTYPE"));
    				if(FACILITY_INTTYPE.equalsIgnoreCase("Flo"))
    					FACILITY_INTTYPE="Floating";
    				else
    					FACILITY_INTTYPE="Fixed";
    				hshRecord.put("FAC_PROCESSDATE", Helper.correctNull((String)rs1.getString("FAC_PROCESSDATE")));
    				hshRecord.put("FACILITY_PURPOSE", Helper.CLOBToString(rs1.getClob("FACILITY_PURPOSE")));
    				hshRecord.put("PERAPP_TITLE", Helper.correctNull((String)rs1.getString("PERAPP_TITLE")));
    				hshRecord.put("PERAPP_FNAME", Helper.correctNull((String)rs1.getString("PERAPP_FNAME")));
    				FACILITY_HOLIDAYPERIOD= Helper.correctInt(rs1.getString("FACILITY_HOLIDAYPERIOD"));
    				FACILITY_PERINSTALL= Helper.correctNull(rs1.getString("FACILITY_PERINSTALL"));
    				
    				hshValues.put("FACILITY_HOLIDAYPERIOD",FACILITY_HOLIDAYPERIOD);
    				
    				if(FACILITY_HOLIDAYPERIOD.equals("0"))
					{
        				hshValues.put("FACILITY_HOLIDAYPERIOD_desc","");
					}
					else
					{
						String strholidayperiod="after an initial holiday period of "+ FACILITY_HOLIDAYPERIOD +" months";
	    				hshValues.put("FACILITY_HOLIDAYPERIOD_desc", strholidayperiod);
					}
    				
    				
    				hshRecord.put("FACILITY_PROPOSED", Helper.correctNull((String)rs1.getString("FACILITY_PROPOSED")));
    				//hshRecord.put("APP_INWARDNO", Helper.correctNull((String)rs1.getString("APP_INWARDNO")));
    				hshRecord.put("CBS_ACCOUNTNO", Helper.correctNull((String)rs1.getString("CBS_ACCOUNTNO")));
    				hshRecord.put("perapp_cbsid", Helper.correctNull((String)rs1.getString("perapp_cbsid")));
    				hshRecord.put("FACILITY_BASERATE", Helper.correctNull((String)rs1.getString("FACILITY_BASERATE")));
    				hshRecord.put("spread", Helper.correctNull((String)rs1.getString("spread")));
    				hshRecord.put("PERAPP_AADHAAR", Helper.correctNull((String)rs1.getString("PERAPP_AADHAAR")));
    				mclrRelDate= Helper.correctNull(rs1.getString("FACILITY_MCLR_RELDATE"));
    				String FACILITY_REPAYTYPE= Helper.correctNull((String)rs1.getString("FACILITY_REPAYTYPE"));
    				String FACILITY_duedate= Helper.correctNull((String)rs1.getString("FACILITY_DUEDATE"));
    				hshValues.put("FACILITY_REPAYTYPE", FACILITY_REPAYTYPE);
    				if(FACILITY_REPAYTYPE.equalsIgnoreCase("E"))
  				  		FACILITY_REPAYTYPE="EMI";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("NE"))
    					FACILITY_REPAYTYPE="Non-EMI";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("OD"))
    					FACILITY_REPAYTYPE="On Demand";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("LC"))
    					FACILITY_REPAYTYPE="As Per LC Terms";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("CO"))
    					FACILITY_REPAYTYPE="As Per Contract Terms";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("BG"))
    					FACILITY_REPAYTYPE="As Per BG Rules";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("DD"))
    					FACILITY_REPAYTYPE="On Due Date";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("PC"))
    					FACILITY_REPAYTYPE="PC: From the proceeds of PSC / by realization of bill";
    				else if(FACILITY_REPAYTYPE.equalsIgnoreCase("PS"))
    					FACILITY_REPAYTYPE="PSC by Realization of Export Bills";
    				
    			 FACILITY_INTCHARGED= Helper.correctNull((String)rs1.getString("FACILITY_INTERESTCHARGED"));
    			 FACILITY_HOLIDAY_PERIOD= Integer.parseInt(Helper.correctInt((String)rs1.getString("FACILITY_HOLIDAYPERIOD")));
    			 FACILITY_MONTHS_INT= Integer.parseInt(Helper.correctInt((String)rs1.getString("FACILITY_MONTHS")));
				template=template.replaceAll("@Borrower",(String) hshRecord.get("PERAPP_TITLE")+" "+hshRecord.get("PERAPP_FNAME"));
				template=template.replaceAll("@Loanamount", Helper.correctNull((String) hshRecord.get("FACILITY_SANCAMT")));
				template=template.replaceAll("@Tenor", FACILITY_MONTHS);
				template=template.replaceAll("@ApplicationID",BORROWER_ID);
				
				template=template.replaceAll("@Applicationnumber",Helper.correctNull((String) hshRecord.get("FACILITY_APPNO")));
				template=template.replaceAll("@Interestrate",Helper.correctNull((String) hshRecord.get("FACILITY_INTEREST")));
				template=template.replaceAll("@Interesttype",FACILITY_INTTYPE);
				template=template.replaceAll("@CBSID",Helper.correctNull((String) hshRecord.get("perapp_cbsid")));
				template=template.replaceAll("@CBSAccountnumber",Helper.correctNull((String) hshRecord.get("CBS_ACCOUNTNO")));
				template=template.replaceAll("@Sancamount", Helper.figtoWords(Helper.correctNull((String) hshRecord.get("FACILITY_SANCAMT")))); 
				template=template.replaceAll("@BaseRate", Helper.correctNull((String) hshRecord.get("FACILITY_BASERATE"))); 
				template=template.replaceAll("@Purpose", Helper.correctNull((String) hshRecord.get("FACILITY_PURPOSE"))); 
				template=template.replaceAll("@spreadrate", Helper.correctNull((String) hshRecord.get("spread"))); 
				template=template.replaceAll("@Aadhaar", Helper.correctNull((String) hshRecord.get("PERAPP_AADHAAR"))); 
				template=template.replaceAll("@Repayment", FACILITY_REPAYTYPE); 
				template=template.replaceAll("@duedate", FACILITY_duedate.replaceAll("/", "-")); 
				
    			}
    			
    			String strCSP="",strBSP="";
    			  if(rs2!=null)
   					  rs2.close();
    			  strQuery=SQLParser.getSqlQuery("sel_facility_mclrspread^"+hidfacslno+"^"+strappno);
				  rs2=DBUtils.executeQuery(strQuery);
				  if(rs2.next())
				  {
					  FACILITY_MCLRTYPE=Helper.correctNull(rs2.getString("FACILITY_MCLRTYPE"));
					  mclr_tablecode=Helper.correctNull(rs2.getString("mclr_tablecode"));
					  strCSP=Helper.correctDouble(rs2.getString("mclr_crp_total"));
					  strBSP=Helper.correctDouble(rs2.getString("mclr_bsp_total"));
				  }
				  
				  String strOption = "",strText="",mclrType="";
				  if(!FACILITY_MCLRTYPE.equalsIgnoreCase(""))
					{
						strOption = FACILITY_MCLRTYPE;
						strText = FACILITY_MCLRTYPE.split("@")[0];
						if(strText.equalsIgnoreCase("O"))
							mclrType = "Over night";
						else if(strText.equalsIgnoreCase("M"))
							mclrType = "1 Month";
						else if(strText.equalsIgnoreCase("Q"))
							mclrType = "3 months";
						else if(strText.equalsIgnoreCase("H"))
							mclrType = "6 months";
						else if(strText.equalsIgnoreCase("Y"))
							mclrType = "1 year";
						else
						{
							if(rs2!=null)
								rs2.close();
							rs2=DBUtils.executeLAPSQuery("selcbsiddatadesc^34^"+strText);
							if(rs2.next())
							{
								mclrType=Helper.correctNull(rs2.getString("cbs_static_data_desc"));
							}
						}
					}
				  if(template.contains("@Mclrtype"))
    			  {
					  template=template.replaceAll("@Mclrtype", mclrType); 
    			  } 
				  
				  if(mclr_tablecode.equals("AMC12")||mclr_tablecode.equals("NMC12"))
					 mclr_tablecode="annually";
    			  else if(mclr_tablecode.equals("AMC06")||mclr_tablecode.equals("NMC06"))
    				  mclr_tablecode="half yearly";
    			  else if(mclr_tablecode.equals("AMC03")||mclr_tablecode.equals("NMC03"))
    				  mclr_tablecode="quarterly";
    			  else if(mclr_tablecode.equals("AMC01")||mclr_tablecode.equals("NMC01"))
    				  mclr_tablecode="monthly";
    			  else if(mclr_tablecode.equals("AMC00")||mclr_tablecode.equals("NMC00"))
    				  mclr_tablecode="daily";
    			  else
    				  mclr_tablecode="";
				  
    			  if(template.contains("@MCLRreset"))
    			  {
    				  template=template.replaceAll("@MCLRreset", mclr_tablecode); 
    			  }
    			// if(template.contains("@EMI"))
    	  			{
    					double dblRmdamt = 0.0, dblInterestAmt = 0.0;
    	   				dblRate = FACILITY_SANCINT / (12 * 100);
    					dblRmdamt = FACILITY_SANCAMT;
    					if ((FACILITY_HOLIDAY_PERIOD > 0)&& FACILITY_INTCHARGED.equalsIgnoreCase("2")) {
    						for (int k = 0; k < FACILITY_HOLIDAY_PERIOD; k++) {
    							dblInterestAmt = (dblRmdamt * dblRate);
    							dblRmdamt = dblRmdamt + dblInterestAmt;
    							}
    						}
    					
    					FACILITY_MONTHS_INT = FACILITY_MONTHS_INT - FACILITY_HOLIDAY_PERIOD;
    					dblDenomi = Math.pow(dblRate + 1, (FACILITY_MONTHS_INT)) - 1;
    					dblNumeri = dblRate * Math.pow(dblRate + 1, (FACILITY_MONTHS_INT));


    					if (dblNumeri != 0.0 && dblDenomi != 0.0) {
    									dblEMI = Math.ceil((dblNumeri / dblDenomi)* dblRmdamt);
    						}
    	  			}
    	   			template=template.replaceAll("@EMI", String.valueOf(jtn.format(dblEMI))); 
    	   			hshValues.put("emi", String.valueOf(dblEMI));
    			  if(rs1!=null){ rs1.close(); }
    			  String SancRefNo="";
				  rs1 = DBUtils.executeLAPSQuery("sel_SancRefNo^" + strappno);
				  while(rs1.next())
				  {
					  SancRefNo=correctNull(rs1.getString("finaclesancrefno"));
				  }
				  template=template.replaceAll("@Sancreference", SancRefNo); 
				  //for sancDate
				  if(rs1!=null){ rs1.close(); }
    			  String SancDate="",APP_INWARDNO="";
				  rs1 = DBUtils.executeLAPSQuery("compropform6^" + strappno);
				  if(rs1.next())
				  {
					  SancDate=correctNull(rs1.getString("app_processdate"));
					  APP_INWARDNO=correctNull(rs1.getString("APP_INWARDNO"));
				  }
				  if(rs2!=null){ rs2.close(); }
    			  String SancDate_AuthDate="",SancDate_Auth="";
				  rs2 = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^" + strappno);
				  if(rs2.next())
				  {
					  SancDate_Auth=correctNull(rs2.getString("com_sancauthority"));
					  if(SancDate_Auth.equalsIgnoreCase("14")|| SancDate_Auth.equalsIgnoreCase("15")||SancDate_Auth.equalsIgnoreCase("16"))
						  SancDate=correctNull(rs2.getString("COM_SANREF_SANCDATE"));
				  }
				  template=template.replaceAll("@Sancdate", SancDate); 
				  template=template.replaceAll("@Inwardnumber", APP_INWARDNO); 
				  //end
				  
    			  String tempmclrRelDate="";
	   			  if(!mclrRelDate.equalsIgnoreCase(""))
	   			  {
	   				  if(rs2!=null)
	   					  rs2.close();
	   				  if(!FACILITY_MCLRTYPE.equalsIgnoreCase(""))
	 				  {
	   					  strQuery=SQLParser.getSqlQuery("sel_mclrspreadrate^"+mclrRelDate+"^"+FACILITY_MCLRTYPE.split("@")[0]);
	   					  rs2=DBUtils.executeQuery(strQuery);
		    				  if(rs2.next())
		    				  {
		    					  tempmclrRelDate=jtn.format(Double.parseDouble(Helper.correctDouble(rs2.getString("mclr_baseratespread"))));
		    				  }
	 					}
	   			  }
   			  template=template.replaceAll("@mclrrate", tempmclrRelDate); 
   			  template=template.replaceAll("@creditrisk", jtn.format(Double.parseDouble(Helper.correctDouble(strCSP))));
			  template=template.replaceAll("@fixedspread", jtn.format(Double.parseDouble(Helper.correctDouble(strBSP)))); 
   		
			 if(template.contains("@date_of_release"))
   			 {
   				 if(!mclrRelDate.equalsIgnoreCase(""))
   				 {
	    				 boolean bflag=true;
	    				 String strDay="";
	    				 String[] strSTArr={"01","21","31"};
	    				 String[] strRDArr={"03","23"};
	    				 String[] strNDArr={"02","22"};
	    				 for(int a=0;a<strSTArr.length;a++)
	    				 {
	    					 if(strSTArr[a]==mclrRelDate.substring(0, 2))
	    					 {
	    						 strDay= mclrRelDate.substring(0, 2)+"st ";
	    						 bflag=false;
	    					 }
	    				 }
	    				 if(bflag)
	    				 {
	    					 for(int a=0;a<strRDArr.length;a++)
		    				 {
		    					 if(strRDArr[a]==mclrRelDate.substring(0, 2))
		    					 {
		    						 strDay= mclrRelDate.substring(0, 2)+"rd ";
		    						 bflag=false;
		    					 }
		    				 } 
	    				 }
	    				 if(bflag)
	    				 {
	    					 for(int a=0;a<strNDArr.length;a++)
	    					 {
	    						 if(strNDArr[a]==mclrRelDate.substring(0, 2))
	    						 {
	    							 strDay= mclrRelDate.substring(0, 2)+"nd ";
	    							 bflag=false;
	    						 }
	    					 } 
	    				 }
	    				 if(bflag)
	    				 {
	    					 strDay= mclrRelDate.substring(0, 2)+"th "; 
	    				 }
	    				  int month=Integer.parseInt(mclrRelDate.substring(3, 5));
	    				  String mclrdatewords=strDay+ " day of "+ Helper.getMonths(month) +" "+ mclrRelDate.substring(6,10);
	    				  template=template.replaceAll("@date_of_release", mclrdatewords); 
   				 }
   				 template=template.replaceAll("@date_of_release", ""); 
   			 }
    			
    		if(!Helper.correctNull((String)hshValues.get("hidapprovercbsid")).equalsIgnoreCase(""))
   			  {
   				  if(rs1!=null){rs1.close();}
   				  
   				  rs1=DBUtils.executeLAPSQuery("sel_approvercbsid^"+Helper.correctNull((String)hshValues.get("hidapprovercbsid")));
   				  if(rs1.next())
   				  {
	    				  String approvername=correctNull(rs1.getString("perapp_name"));
	    				  if(documentCode.equalsIgnoreCase("DOC_981"))
	    					  approvername="---------------------------------";
	    				  template=template.replaceAll("@Approvername", approvername); 
	    				 
	    				  String strtitlefath="";
	    				  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
	    				  if(arrguachilddesp.equalsIgnoreCase("M"))
	    				  {
	    					  strtitlefath="S/o";	
	    				  }
	    				  else if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
	    				  {
	    					  strtitlefath="W/o";	
	    				  } 
	    				  else if(arrguachilddesp.equalsIgnoreCase("F"))
	    				  {
	    					  strtitlefath="D/o";	
	    				  } 
	    				  else
	    				  {
	    					  strtitlefath=" ";	
	    				  }
	    				  String approverfatname="";
	    				  if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
	    					  approverfatname=strtitlefath +" "+ correctNull(rs1.getString("indinfo_spouse_name"));
	    				  else
	    					  approverfatname=strtitlefath +" "+ correctNull(rs1.getString("perapp_fatname"));
	    				  
	    				  if(documentCode.equalsIgnoreCase("DOC_981"))
	    					  approverfatname="---------------------------------";
	    				  template=template.replaceAll("@Approverfathername", approverfatname); 
	
	    				  hshRecord.put("approverfatname",approverfatname);	
	    				  String staffid="K"+Helper.correctNull(rs1.getString("INDINFO_STAFF_ID"));
	    				  if(template.contains("@approverdesignation"))
	    				  {
	        				  if(rs2!=null){rs2.close();}
	    					  strQuery=SQLParser.getSqlQuery("sel_cbsstaticdata_userdesign^"+staffid);
		    				  rs2=DBUtils.executeQuery(strQuery);
		    				  if(rs2.next())
		    				  {
		    					  template=template.replaceAll("@approverdesignation",Helper.correctNull(rs2.getString("CBS_STATIC_DATA_DESC")));	
		    				  }
		    				  else
		    					  template=template.replaceAll("@approverdesignation"," ");
	    				  }
   				  }
   			  }
    		 else
			  {
				  template=template.replaceAll("@approverdesignation"," ");
				  template=template.replaceAll("@Approverfathername"," ");
				  template=template.replaceAll("@Approvername"," ");
			  }
    		
    		 String borrowwer_staffid="";
			  if(template.contains("@staffno"))
			  {
				  if(rs2!=null){rs2.close();}
				  strQuery=SQLParser.getSqlQuery("sel_staffid_indinfo^"+BORROWER_ID);
				  rs2=DBUtils.executeQuery(strQuery);
				  if(rs2.next())
				  {
					  borrowwer_staffid=Helper.correctNull(rs2.getString("INDINFO_STAFF_ID"));	
				  }
				  template=template.replaceAll("@staffno",borrowwer_staffid);	
			  }
			  
			  if(template.contains("@staffdesignation"))
			  {
				  borrowwer_staffid="K"+borrowwer_staffid;
				  if(rs2!=null){rs2.close();}
				  strQuery=SQLParser.getSqlQuery("sel_cbsstaticdata_userdesign^"+borrowwer_staffid);
				  rs2=DBUtils.executeQuery(strQuery);
				  if(rs2.next())
				  {
					  template=template.replaceAll("@staffdesignation",Helper.correctNull(rs2.getString("CBS_STATIC_DATA_DESC")));	
				  }
			  }
			  if(template.contains("@staffworkingbranch"))
			  {
				  if(rs2!=null){rs2.close();}
				  strQuery=SQLParser.getSqlQuery("sel_orglevel_usinguserid^"+borrowwer_staffid);
				  rs2=DBUtils.executeQuery(strQuery);
				  if(rs2.next())
				  {
					  template=template.replaceAll("@staffworkingbranch",Helper.correctNull(rs2.getString("org_name")));	
				  }
			  }
			  
    		if(template.contains("@tenorexholiday"))
			{
				int tenorechol= Integer.parseInt(FACILITY_MONTHS) - Integer.parseInt(FACILITY_HOLIDAYPERIOD);
				template=template.replaceAll("@tenorexholiday", String.valueOf(tenorechol)); 
			}
			if(template.contains("@tenorinyears"))
			{
				String tenorinyears = jtn1.format((Double.parseDouble(FACILITY_MONTHS))/12);
				template=template.replaceAll("@tenorinyears", String.valueOf(tenorinyears)); 
			}
    		
    		  //noofemi
			 if(template.contains("@noofemi")) 
			 {
				 int noofEMI=0;
				 if(FACILITY_PERINSTALL.equals("m"))
				 {
					 noofEMI=(Integer.parseInt(FACILITY_MONTHS) - Integer.parseInt(Helper.correctInt(FACILITY_HOLIDAYPERIOD)));
				 }
				 else if(FACILITY_PERINSTALL.equals("q"))
				 {
					 noofEMI=(Integer.parseInt(FACILITY_MONTHS) - Integer.parseInt(Helper.correctInt(FACILITY_HOLIDAYPERIOD)))/3;
				 }
				 else if(FACILITY_PERINSTALL.equals("h"))
				 {
					 noofEMI=(Integer.parseInt(FACILITY_MONTHS) - Integer.parseInt(Helper.correctInt(FACILITY_HOLIDAYPERIOD)))/6;
				 }	 
				 else if(FACILITY_PERINSTALL.equals("y"))
				 {
					 noofEMI=(Integer.parseInt(FACILITY_MONTHS) - Integer.parseInt(Helper.correctInt(FACILITY_HOLIDAYPERIOD)))/12;
				 }	 
				 String noofemi=String.valueOf(noofEMI);
				 template=template.replaceAll("@noofemi", noofemi); 
			 }
			  
			 if(template.contains("@Scheme"))
			  	{
	    			String strprddesc="";
					  if(rs!=null){ rs.close(); }
					  rs = DBUtils.executeLAPSQuery("sel_corpBankschemetype^1^"+ FACILITY_CODE);
					  if(rs.next())
					  {
						  strprddesc=correctNull(rs.getString("mis_static_data_desc"));
					  }
					  template=template.replaceAll("@Scheme", strprddesc); 
			  	}
			 if(template.contains("@Typeofloan"))
			  	{
					  if(rs!=null){ rs.close(); }
					  rs = DBUtils.executeLAPSQuery("sel_faclityType_subtype^"+ strappno+"^"+hidfacslno);
					  if(rs.next())
					  {
						  template=template.replaceAll("@Typeofloan", correctNull(rs.getString("FACILITY_CATDESC"))); 
					  }
			  	}
    		
			 if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_facLoanRepayType_Corp^"+strappno+"^"+hidfacslno);		 
				if(rs.next())
				{
					String Branch_code=correctNull(rs.getString("org_scode"));
					if(rs2!=null){rs2.close();}
					rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+Branch_code);		 
					if(rs2.next())
					{
					hshRecord.put("orgHead_name",Helper.correctNull(rs2.getString("org_headname")));
					}
				}
				if(template.contains("@orgHead_name"))
				{
					template=template.replaceAll("@orgHead_name",Helper.correctNull((String)hshRecord.get("orgHead_name")));
				}
			if(rs!=null){rs.close();}
			rs=DBUtils.executeLAPSQuery("sel_organisationdetails^"+strOrgCode);		 
			if(rs.next())
			{
				hshRecord.put("org_name",Helper.correctNull(rs.getString("OrganisationName")));
				hshRecord.put("OrganisationAddress1",Helper.correctNull(rs.getString("OrganisationAddress1")));
				hshRecord.put("OrganisationAddress2",Helper.correctNull(rs.getString("OrganisationAddress2")));
				hshRecord.put("OrganisationCity",Helper.correctNull(rs.getString("OrganisationCity")));
				hshRecord.put("Organisationzip",Helper.correctNull(rs.getString("Organisationzip")));
				hshRecord.put("OrganisationState",Helper.correctNull(rs.getString("OrganisationState")));
				
				hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("OrganisationName")));
				hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("OrganisationCity")));
				hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("Organisationzip")));
			}
			
			if(!strDisbBrCode.equalsIgnoreCase(""))
			{
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_organisationname^"+strDisbBrCode);		 
				if(rs.next())
				{
					hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("org_name")));
					hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("city_name")));
					hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("org_zip")));
				}
			}
			//branchDetails
			if(template.contains("@branchDetails"))
			{
				String tempbranchdetail=Helper.correctNull((String)hshRecord.get("strDisbBrname"))+", "+Helper.correctNull((String)hshRecord.get("strDisbBrCity"))+" - "+Helper.correctNull((String)hshRecord.get("strDisbBrzip"));
				template=template.replaceAll("@branchDetails", tempbranchdetail); 
			}
			
			//inward city
			
			if(rs!=null){rs.close();}
			String inwardBranchCity="",inwardCreatedDate="";
			rs=DBUtils.executeLAPSQuery("selworkflow^"+strappno);		 
			if(rs.next())
			{
				inwardBranchCity=Helper.correctNull(rs.getString("ORG_CITY"));
				inwardCreatedDate=Helper.correctNull(rs.getString("INWARD_CREATEDON"));
				//template=template.replaceAll("@Branchname", correctNull(rs.getString("org_name")));
			}
			template=template.replaceAll("@inwarddate", inwardCreatedDate); 
			//template=template.replaceAll("@BranchCity", inwardBranchCity); 
			
			//String Branch_code="";
				
				// @Branchname
				 String strBranch="",strBranchCity="";
				 if(rs2!=null){ rs2.close(); }
	 				rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
	 				if(rs2.next()){
	 						strBranch=correctNull(rs2.getString("ORG_NAME"));
		 					if(rs!=null){rs.close();}
							rs=DBUtils.executeLAPSQuery("sel_cityname^"+correctNull(rs2.getString("ORG_CITY")));		 
							if(rs.next())
							{
								strBranchCity=correctNull(rs.getString("city_name"));
							}
	 					
	 				}
	 				template=template.replaceAll("@Branchname", strBranch);
	 				template=template.replaceAll("@BranchCity", strBranchCity);
				
				 //end
			 if(template.contains("@PageBreak"))
				{
				 	template=template.replaceAll("@PageBreak","<br style='page-break-before:always'>");
				}

			 if(template.contains("@date"))
				 {
				 	  String date=Helper.getCurrentDateTime();
					  template=template.replaceAll("@date", date); 
				 }
			 
			 

			  if(template.contains("@scheduleTAB"))
			  {
				ArrayList arrVal = new ArrayList();
					ArrayList arrRow = new ArrayList();
				    strQuery = SQLParser.getSqlQuery("sel_securityhyp_findoc_nonTradeable^"+strappno);
					if(rs!=null){rs.close();}
				    rs = DBUtils.executeQuery(strQuery);
					while(rs.next())
					{
						arrVal = new ArrayList();
						arrVal.add(correctNull(rs.getString("sec_issuedby")));
						arrVal.add(correctNull(rs.getString("sec_agency")));
						arrVal.add(correctNull(rs.getString("sec_policyno")));
						arrVal.add(correctNull(rs.getString("sec_maturitydate")));
						arrVal.add(correctNull(rs.getString("sec_symbol")));
						arrVal.add(jtn.format(Double.parseDouble(correctNull(rs.getString("sec_facevalue")))));
						arrVal.add(correctNull(rs.getString("PERAPP_FNAME")));
						arrVal.add(jtn.format(Double.parseDouble(correctNull(rs.getString("sec_maturityvalue")))));
						arrRow.add(arrVal);
					}
				  StringBuffer sbscheduleTAB = new StringBuffer();
				  sbscheduleTAB.append("<Table border='1' width='95%' align='center'>");
				  sbscheduleTAB.append("<tr align='center'>");
				  sbscheduleTAB.append("<td>Name of the Company</td><td>Regd Folio</td><td>Policy/Share Certificate No.</td><td>Date</td><td>No. Of Shares </td><td>Face Value </td><td>Name of the Assured</td><td>Amount Assured</td> ");
				  sbscheduleTAB.append("</tr>");
				 
				  if(arrRow != null && arrRow.size()>0)
				  {
   				  for(int i=0;i<arrRow.size();i++)
   				  {
   					  ArrayList arrrowVal = new ArrayList();
   					  arrrowVal=(ArrayList) arrRow.get(i);
   					  sbscheduleTAB.append("<tr>");
   					  sbscheduleTAB.append("<td>"+ arrrowVal.get(0)+"&nbsp;</td> <td>&nbsp;</td><td>"+ arrrowVal.get(2)+"&nbsp;</td><td>"+ arrrowVal.get(3)+"&nbsp;</td><td>&nbsp;</td><td>"+ arrrowVal.get(5)+"&nbsp;</td><td>"+ arrrowVal.get(6)+"&nbsp;</td><td>"+ arrrowVal.get(7)+"&nbsp;</td>");
   					  sbscheduleTAB.append("</tr>");
   				  }
				  }
				  else
				  {
					  sbscheduleTAB.append("<tr>");
   				  sbscheduleTAB.append("<td>&nbsp;<br><br><br><br><br><br> </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td><td>&nbsp; </td> ");
   				  sbscheduleTAB.append("</tr>");
				  }
				  sbscheduleTAB.append("</table>");
				  template=template.replaceAll("@scheduleTAB", sbscheduleTAB.toString()); 
			  }
			 
			 
			//SEcurity details
				 if(rs!=null){	rs.close();	}
				 ArrayList secDetails = new ArrayList();
				  rs = DBUtils.executeLAPSQuery("sel_secownerid_naturecharge^"+ strappno+"^"+hidfacslno);
					while (rs.next())
					{
						secDetails.add(correctNull(Helper.CLOBToString(rs.getClob("APP_SEC_DESCRIPTION"))));
					}
					hshRecord.put("secDetails",secDetails);
			  if(template.contains("@DescriptionofSecurity"))
			  {
				  StringBuffer sbDescriptionofSecurity = new StringBuffer();
				  
				  ArrayList arrsecDetails = new ArrayList();
				  arrsecDetails=(ArrayList)hshRecord.get("secDetails");
				
					if(arrsecDetails.size()>0 && arrsecDetails!=null)
					{
						sbDescriptionofSecurity.append("<Table border='1' width='95%' align='center'>");
						sbDescriptionofSecurity.append("<tr>");
						sbDescriptionofSecurity.append("<td align='center'> SCHEDULE 'B' <br> (Description of Security & Nature of charge created such as mortgage of immovable property or hypothecation of movables etc.) ");
						sbDescriptionofSecurity.append("</tr>");
						sbDescriptionofSecurity.append("<tr> <td>");

						for(int i=0;i<arrsecDetails.size();i++)
						{
							if(arrsecDetails.size()==1)
							{
								sbDescriptionofSecurity.append(arrsecDetails.get(i)+"<br>");
							}
							else
							{
								sbDescriptionofSecurity.append((i+1)+") "+arrsecDetails.get(i)+"<br>");
							}
						}
						sbDescriptionofSecurity.append(" &nbsp; </td> </tr>");	
						sbDescriptionofSecurity.append("</table>");
					}
					else
					{
						sbDescriptionofSecurity.append("");
					}
				  template=template.replaceAll("@DescriptionofSecurity", sbDescriptionofSecurity.toString()); 
			  }
			 
			 if(template.contains("@SecurityDesc"))
			 {
				  StringBuffer sbDescriptionofSecurity = new StringBuffer();
				  ArrayList arrsecDetails = new ArrayList();
				  arrsecDetails=(ArrayList)hshRecord.get("secDetails");
				  
				  if(arrsecDetails.size()>0 && arrsecDetails!=null)
					{
						for(int i=0;i<arrsecDetails.size();i++)
						{
							if(arrsecDetails.size()==1)
							{
								sbDescriptionofSecurity.append(arrsecDetails.get(i)+"<br>");
							}
							else
							{
								sbDescriptionofSecurity.append((i+1)+")  "+arrsecDetails.get(i)+"<br>");
							}
						}
					}
				  template=template.replaceAll("@SecurityDesc", sbDescriptionofSecurity.toString()); 
			 }
			 // VehicleHypothication 
			 if(rs1!=null) rs1.close();
				 ArrayList hypVehicleRow= new ArrayList();
				 ArrayList hypVehicleCol= new ArrayList();
				 if(template.contains("@VehicleHypothication"))
				 {
					 	strQuery = SQLParser.getSqlQuery("sel_securityhyp_vehicle^"+strappno);
						rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							hypVehicleCol= new ArrayList();
							String vehType=Helper.correctNull((String) rs.getString("SEC_VEHICLETYPE"));
							if(vehType.equals("1"))
							{
								vehType="New";
							}
							else
							{
								vehType="old";
							}
							hypVehicleCol.add(vehType);  //0
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_MAKE")));//1
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_MODEL")));//2
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_PURCHASEVALUE")));//3
							if(Helper.correctNull((String) rs.getString("SEC_HPNO")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");//4
							else
								hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_HPNO")));//4
							
							if(Helper.correctNull((String) rs.getString("SEC_REGNO")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");//5
							else
								hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_REGNO")));//5
							
							if(Helper.correctNull((String) rs.getString("sec_ownername")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
								hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_ownername")));//6
							if(Helper.correctNull((String) rs.getString("sec_ownerdoorno")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_ownerdoorno")));//7
							if(Helper.correctNull((String) rs.getString("sec_owneraddress1")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_owneraddress1")));//8
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_owneraddress2")));//9
							if(Helper.correctNull((String) rs.getString("CITY_NAME")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("CITY_NAME")));//10
							if(Helper.correctNull((String) rs.getString("dISTRICT_DESC")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("dISTRICT_DESC")));//11
							if(Helper.correctNull((String) rs.getString("STATE_NAME")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("STATE_NAME")));//12
							if(Helper.correctNull((String) rs.getString("sec_ownerzipcode")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");
							else
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_ownerzipcode")));//13
							hypVehicleCol.add(Helper.correctNull((String) rs.getString("CON_COUNTRY")));//14
							if(Helper.correctNull((String) rs.getString("SEC_CHASSISNO")).equalsIgnoreCase(""))
								hypVehicleCol.add("________________");//15
							else
								hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_CHASSISNO")));//15
							hypVehicleRow.add(hypVehicleCol);
						}
						 StringBuffer sbhypVehicle = new StringBuffer();
						  ArrayList arrvehTemp = new ArrayList();
						  sbhypVehicle.append(" ");
						  String strVal1 = "";
						  if(hypVehicleRow.size()>0 && hypVehicleRow!=null)
						  {
							  if(hypVehicleRow.size()==1)
							  {
								  arrvehTemp=(ArrayList) hypVehicleRow.get(0);
								  if(!Helper.correctNull((String)arrvehTemp.get(9)).equalsIgnoreCase("")){strVal1=arrvehTemp.get(9)+", ";}
								  sbhypVehicle.append("Hypothecation of "+arrvehTemp.get(0)+" "+arrvehTemp.get(1)+" (Model -  "+arrvehTemp.get(2)+") valued at Rs."+arrvehTemp.get(3)+"/- bearing Chassis number "+arrvehTemp.get(15)+" Engine number "+arrvehTemp.get(4)+" and Registration Number "+arrvehTemp.get(5)+" parked in the building bearing <br>");
								  sbhypVehicle.append("Door No. "+arrvehTemp.get(7)+" ");
								  sbhypVehicle.append("Situated in "+arrvehTemp.get(8)+", "+strVal1+arrvehTemp.get(10)+" - "+arrvehTemp.get(13)+", "+arrvehTemp.get(12)+", "+arrvehTemp.get(14)+", ");
								  sbhypVehicle.append("belonging to Shri/Smt./M/s "+arrvehTemp.get(6) );

							  }
							  else
							  {
								  for(int i=0;i<hypVehicleRow.size();i++)
								  {
									  arrvehTemp=(ArrayList) hypVehicleRow.get(i);
									  if(!Helper.correctNull((String)arrvehTemp.get(9)).equalsIgnoreCase("")){strVal1=arrvehTemp.get(9)+", ";}
									  else{strVal1="";}
									  sbhypVehicle.append((i+1)+". " +"Hypothecation of "+arrvehTemp.get(0)+" "+arrvehTemp.get(1)+" (Model -  "+arrvehTemp.get(2)+") valued at Rs."+arrvehTemp.get(3)+"/- bearing Engine number "+arrvehTemp.get(4)+" and Registration Number "+arrvehTemp.get(5)+" parked in the building bearing <br>");
									  sbhypVehicle.append("Door No : "+arrvehTemp.get(7)+" ");
									  sbhypVehicle.append("Situated in : "+arrvehTemp.get(8)+", "+strVal1+arrvehTemp.get(10)+" - "+arrvehTemp.get(13)+", "+arrvehTemp.get(12)+", "+arrvehTemp.get(14)+", ");
									  sbhypVehicle.append("belonging to Shri/Smt./M/s "+arrvehTemp.get(6)+"<br><br>" );
								  }
							  }
						  }
						
						  template=template.replaceAll("@VehicleHypothication", sbhypVehicle.toString()); 
				 }
			 
				 if(template.contains("@natureofactivity"))
				 {
					 if(rs!=null){	rs.close(); }
						strQuery=SQLParser.getSqlQuery("selkyc_kycActivity^"+BORROWER_ID);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							template=template.replaceAll("@natureofactivity", Helper.correctNull((String)rs.getString("kyc_kycActivity"))); 
						}
				 }
				
				 if(template.contains("@HUFMinorDetails"))
				 {
					 if(rs!=null){	rs.close(); }
					int i=0;
					
					StringBuffer sbTemp=new StringBuffer();
					
					sbTemp.append("<table border='0' width='95%' align='center' cellpadding='3' cellspacing='0' class='outertable'>");
					sbTemp.append("<tr>");
					sbTemp.append("<td><u>Name</u></td>");
					sbTemp.append("<td><u>Father Name</u></td>");
					sbTemp.append("<td><u>Date of Birth</u></td>");
					sbTemp.append("</tr>");
	                
					strQuery=SQLParser.getSqlQuery("sel_kartaname^"+BORROWER_ID+"^K^002");
					rs=DBUtils.executeQuery(strQuery);
					while(rs.next())
					{
						if(Integer.parseInt(Helper.correctInt(rs.getString("age")))<18)
						{
							sbTemp.append("<tr>");
							sbTemp.append("<td>"+(++i)+") "+Helper.correctNull(rs.getString("name"))+"</td>");
							sbTemp.append("<td>"+Helper.correctNull(rs.getString("perapp_fatname"))+"</td>");
							sbTemp.append("<td>"+Helper.correctNull(rs.getString("perapp_dob"))+"</td>");
							sbTemp.append("</tr>");
						}
					}
					
					sbTemp.append("</table>");
					
					 template=template.replaceAll("@HUFMinorDetails", sbTemp.toString()); 
				 }
				 
				 
				 //details and address
				 
				  //Proprietor 
				  if(rs1!=null){rs1.close();}
					 rs1=DBUtils.executeLAPSQuery("sel_app_con_details_Facility^"+strappno+"^"+"SP^"+FACILITY_SNO);
					  while(rs1.next())
					  {		 String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
						  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
						  arrpropList=new ArrayList();
						  arrpropList.add(correctNull(rs1.getString("FULLNAME")));
						  if(residentType.equals("N"))
							 {
							  arrpropList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
							  arrpropList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
							  arrpropList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
							  arrpropList.add(correctNull(rs1.getString("CON_COMZIP")));//4
							  arrpropList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
							 }
							 else
							 {
								 arrpropList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
								 arrpropList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
								 arrpropList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
								 arrpropList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
								 arrpropList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
							 }
						  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
						  // for minor check
						  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
						      if(rs3!=null){ rs3.close(); }
						  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
						     if(rs3.next()){
						       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
						       guard_name=correctNull(rs3.getString("minor_guard_name"));
						     }
						 if(arrappminor.equalsIgnoreCase("Y"))
						  { 
						  	arrpropList.add(guard_name);
						  	arrpropList.add("M/G");	
						   }
						  else if(arrguachilddesp.equalsIgnoreCase("M"))
						  {
							  arrpropList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrpropList.add("S/o");	
						  }
						  else if(arrguachilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
						  {
							  arrpropList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
							  arrpropList.add("W/o");	
						  } 
						  else if(arrguachilddesp.equalsIgnoreCase("F"))
						  {
							  arrpropList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrpropList.add("D/o");	
						  } 
						else
						  {
							  arrpropList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrpropList.add(" ");	
						  }
						  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
						  arrpropList.add(Helper.correctNull(strAge));
						  
						  
							ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs1.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								String temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
								while(rs.next())
								{	 strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
								if(spsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o"); 
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME"))));}
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									   	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME"))));} 
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME"))));} 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
								while(rs.next())
								{	 strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst();
								while(rs.next())
								{
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name")))); } 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									 else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
								while(rs.next())
								{	 strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
								while(rs.next())
								{	 strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o"); 
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrpropList.add(temp2);
								arrpropList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
								arrpropList.add(correctNull(rs1.getString("PERAPP_CBSID")));
								arrpropList.add(correctNull(rs1.getString("app_type")));
						  arrpropRow.add(arrpropList);
					  }
					  hshRecord.put("arrpropRow",arrpropRow);
			  
					  if(template.contains("@ProprietorDetails"))
					  {
						 	StringBuffer temppropList=new StringBuffer();	
						 	 StringBuffer tempappList1=new StringBuffer();	
						     ArrayList arrpropRowdet=new ArrayList();
						     temppropList.append(" ");	
						     if(arrpropRow.size()>0 && arrpropRow!=null)
						     {
						     	for(int i=0;i<arrpropRow.size();i++)
						     	{
						     		arrpropRowdet=(ArrayList)arrpropRow.get(i);
						     		String constition=(String) arrpropRowdet.get(10);
						     		ArrayList arrIndvRow= (ArrayList) arrpropRowdet.get(9);
								     if(arrpropRow.size()==1)
								     {
								    	 if(constition.equals("01"))
										 {
										     temppropList.append(""+arrpropRowdet.get(0)+", "+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+", aged about "+arrpropRowdet.get(8)+" years, residing at "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										 }
								    	 else
								    	 {
								    		 if(arrIndvRow.size()>0)
										    	{	
											  temppropList.append(" "+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										    	for(int j=0;j<arrIndvRow.size();j++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		temppropList.append(temparr1.get(0));
										    		tempappList1.append(temparr1.get(0));
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    temppropList.append(temparr.get(0)+""+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
													    tempappList1.append(temparr.get(0)+"  ");
										    		}}
										    	}
										    	temppropList.append(" ");
										    	}
										    	else
										    	{
												     temppropList.append(" "+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										    	} 
								    	 }
								     }
								     else
								     {
								    	 if(constition.equals("01"))
										 {
										     temppropList.append(" " + (i+1) + ". &nbsp;"+arrpropRowdet.get(0)+", "+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+", aged about "+arrpropRowdet.get(8)+" years, residing at "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+". ");
										 }
										 else
										 {
										    	if(arrIndvRow.size()>0)
										    	{
													temppropList.append(" "+ (i+1) +". &nbsp;"+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+".  ");
											    	for(int j=0;j<arrIndvRow.size();j++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		temppropList.append(temparr1.get(0));
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k <temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    temppropList.append(temparr.get(0)+""+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+", ");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}
											    		}
											    	}
											    	temppropList.append(" ");
										    	}
										    	else
										    	{
													  temppropList.append(" "+ (i+1) +". &nbsp;"+arrpropRowdet.get(0)+", "+arrpropRowdet.get(1)+", "+arrpropRowdet.get(2)+", "+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+", "+arrpropRowdet.get(5)+".  ");
										    	}
										 }
								     }
								     temppropList.append("<br><br> ");
								     String borrowername="";
	    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
		 					     			borrowername=Helper.correctNull((String) arrpropRowdet.get(0))+","+tempappList1.toString();
		 					     		}else{
		 					     			 borrowername=Helper.correctNull((String) arrpropRowdet.get(0));
		 					     		}

							     	 String cbsid=Helper.correctNull((String) arrpropRowdet.get(11));
							     	 String strapptype=Helper.correctNull((String) arrpropRowdet.get(12));
							     	 compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						    }
				     template=template.replaceAll("@ProprietorDetails", temppropList.toString());      
					  }
					  if(template.contains("@ProprietorAddress"))
					  {
						  StringBuffer temppropList=new StringBuffer();	
						  StringBuffer tempappList1=new StringBuffer();	
						  temppropList.append("<span align='justify'>");
						  ArrayList arrpropRowdet=new ArrayList();
						     if(arrpropRow.size()>0 && arrpropRow!=null)
						     {
						     	for(int i=0;i<arrpropRow.size();i++)
						     	{
						     		arrpropRowdet=(ArrayList)arrpropRow.get(i);
						     		 String constition=(String) arrpropRowdet.get(10);
						     		 ArrayList arrIndvRow= (ArrayList) arrpropRowdet.get(9);
						     		if(arrpropRow.size()==1)
						     		{
						     			if(constition.equals("01"))
						     			{
								     		temppropList.append(arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+"<br/>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     			}
						     			else
						     			{
						     				if(arrIndvRow.size()>0)
										    {
									     		temppropList.append(arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
							     				for(int j=0;j<arrIndvRow.size();j++)
							     				{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		temppropList.append(""+temparr1.get(0)+"<br/>");
										    		tempappList1.append(""+temparr1.get(0)+"");
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    temppropList.append(temparr.get(0)+"<br>"+temparr.get(6)+ " "+ temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
													    tempappList1.append(temparr.get(0)+"  ");
										    		}}
							     				}
							     				temppropList.append("<br>");
										    }
						     				else
						     				{
									     		temppropList.append(arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     				}
						     			}
						     		}
						     		else
						     		{
						     			if(constition.equals("01"))
						     			{
								     		temppropList.append(""+(i+1)+". "+arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(7)+" "+arrpropRowdet.get(6)+"<br/>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     			}
						     			else
						     			{
						     				if(arrIndvRow.size()>0)
										    {
									     		temppropList.append(""+(i+1)+". "+ arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
							     				for(int j=0;j<arrIndvRow.size();j++)
							     				{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		temppropList.append(""+temparr1.get(0)+"<br/>");
										    		tempappList1.append(temparr1.get(0));
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    temppropList.append(temparr.get(0)+"<br>"+temparr.get(6)+ " "+ temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
													    tempappList1.append(temparr.get(0)+"  ");
										    		}}
							     				}
							     				temppropList.append("<br>");
										    }
						     				else
						     				{
									     		temppropList.append(""+(i+1)+". "+arrpropRowdet.get(0)+"<br>"+arrpropRowdet.get(1)+"<br>"+arrpropRowdet.get(2)+"<br>"+arrpropRowdet.get(3)+" - "+arrpropRowdet.get(4)+"<br>"+arrpropRowdet.get(5)+"<br><br>");
						     				}
						     			}
						     		}
						     		 String borrowername="";
	    					     		if(!tempappList1.toString().equalsIgnoreCase("")){
		 					     			borrowername=Helper.correctNull((String) arrpropRowdet.get(0))+","+tempappList1.toString();
		 					     		}else{
		 					     			 borrowername=Helper.correctNull((String) arrpropRowdet.get(0));
		 					     		}

							     	 String	cbsid=Helper.correctNull((String) arrpropRowdet.get(11));
							     	 String	strapptype=Helper.correctNull((String) arrpropRowdet.get(12));

							     	 compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						     }
						     temppropList.append("</span>");
						     template=template.replaceAll("@ProprietorAddress", temppropList.toString()); 
						     }
				  
			  //applicant
				 if(rs1!=null){rs1.close();}
 				 rs1=DBUtils.executeLAPSQuery("sel_app_con_details_Fac_applicant^"+strappno);
				  while(rs1.next())
				  {	String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
					  arrappList=new ArrayList();
					  arrappList.add(correctNull(rs1.getString("FULLNAME"))); //0
					 if(residentType.equals("N"))
					 {
						  arrappList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
						  arrappList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
						  arrappList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
						  arrappList.add(correctNull(rs1.getString("CON_COMZIP")));//4
						  arrappList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
					 }
					 else
					 {
						  arrappList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
						  arrappList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
						  arrappList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
						  arrappList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
						  arrappList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
					 }
					  String arrappchilddesp=correctNull(rs1.getString("PERAPP_SEX"));
					// for minor check
					  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
					      if(rs3!=null){ rs3.close(); }
					  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
					     if(rs3.next()){
					       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
					       guard_name=correctNull(rs3.getString("minor_guard_name"));
					     }
					  if(arrappminor.equalsIgnoreCase("Y"))
					  { 
					 	 arrappList.add(guard_name);
					 	 arrappList.add("M/G");	
					   }
					  else if(arrappchilddesp.equalsIgnoreCase("M"))
					  {
						  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
						  arrappList.add("S/o");	
					  }
					  else if(arrappchilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
					  {
						  arrappList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));//6 
						  arrappList.add("W/o");	
					  } 
					  else if(arrappchilddesp.equalsIgnoreCase("F"))
					  {
						  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
						  arrappList.add("D/o");	
					  } 
					  else
					  {
						  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
						  arrappList.add(" ");	
					  }  
					  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
					  arrappList.add(Helper.correctNull(strAge));
					 
						ArrayList nonindvRow=new ArrayList();
						  ArrayList temp1=new ArrayList();
						  ArrayList temp2=new ArrayList();
						  String perappid=correctNull(rs1.getString("perapp_id"));
						  String divisiontype="",div_name="",nonindiv="";;
							if(rs!=null){rs.close();}
							int dcount=0,spcount=0,pcount=0,tcount=0;
							String temp="";
							itemp=0;
							String spconcernsubtype="",spsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!spconcernsubtype.equals(""))
								{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ spsubtype="dif";	}
								}
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(spsubtype.equals("same"))
							{ 
									if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");
							}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{	
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(spsubtype.equals("same"))
									{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								spcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String dconcernsubtype="";	String dsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
							while(rs.next())
							{	strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
								if(!dconcernsubtype.equals(""))
								{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ dsubtype="dif";	}
								}
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(dsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its ");	}
							rs.beforeFirst();
							while(rs.next())
							{	
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(dsubtype.equals("same"))
									{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								 else
								  {  temp1.add(" ");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								dcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String ptconcernsubtype="",ptsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!ptconcernsubtype.equals(""))
								{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ ptsubtype="dif"; }
								}
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(ptsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(ptsubtype.equals("same"))
									{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								pcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String tconcernsubtype="",tsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!tconcernsubtype.equals(""))
								{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ tsubtype="dif"; }
								}
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(tsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(tsubtype.equals("same"))
									{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								 if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else
								  {  temp1.add(" ");
								  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								tcount++;
							}
							temp2.add(nonindvRow);
							arrappList.add(temp2);
							arrappList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
							arrappList.add(correctNull(rs1.getString("PERAPP_CBSID")));
							arrappList.add(correctNull(rs1.getString("app_type")));

					  arrappRow.add(arrappList);
				  }
				  hshRecord.put("arrappList",arrappRow);
			
				//co-applicant
					 if(rs1!=null){rs1.close();}
					 rs1=DBUtils.executeLAPSQuery("sel_app_con_details_Facility^"+strappno+"^"+"C^"+FACILITY_SNO);
					  while(rs1.next())
					  {		String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
						  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
						  arrcoappList=new ArrayList();
						  arrcoappList.add(correctNull(rs1.getString("FULLNAME")));
						  if(residentType.equals("N"))
							 {
							  arrcoappList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
							  arrcoappList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
							  arrcoappList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
							  arrcoappList.add(correctNull(rs1.getString("CON_COMZIP")));//4
							  arrcoappList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
							 }
							 else
							 {
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
								 arrcoappList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
							 }
						  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
						// for minor check
						  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
						      if(rs3!=null){ rs3.close(); }
						  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
						     if(rs3.next()){
						       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
						       guard_name=correctNull(rs3.getString("minor_guard_name"));
						     }
						 if(arrappminor.equalsIgnoreCase("Y"))
						  { 
						 	 	arrcoappList.add(guard_name);
						  		arrcoappList.add("M/G");	
						   }
						  else if(arrguachilddesp.equalsIgnoreCase("M"))
						  {
							  arrcoappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrcoappList.add("S/o");	
						  }
						  else if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
						  {
							  arrcoappList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
							  arrcoappList.add("W/o");	
						  } 
						  else if(arrguachilddesp.equalsIgnoreCase("F"))
						  {
							  arrcoappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrcoappList.add("D/o");	
						  } 
						 else
						  {
							  arrcoappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
							  arrcoappList.add(" ");	
						  }  
						  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
						  arrcoappList.add(Helper.correctNull(strAge));
						  
						
							ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs1.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								String temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(spsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									 else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst();
								while(rs.next())
								{
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									 else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));
									  } 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									 else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else 
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrcoappList.add(temp2);
								arrcoappList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
								arrcoappList.add(correctNull(rs1.getString("PERAPP_CBSID")));
								arrcoappList.add(correctNull(rs1.getString("app_type")));
						        arrcoappRow.add(arrcoappList);
					  }
					  hshRecord.put("arrcoappList",arrcoappRow);
					  
					//guarantor
						 if(rs1!=null){rs1.close();}
						 rs1=DBUtils.executeLAPSQuery("sel_app_con_details_Facility^"+strappno+"^"+"G^"+FACILITY_SNO);
						  while(rs1.next())
						  {		String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
							  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
							  arrguaList=new ArrayList();
							  arrguaList.add(correctNull(rs1.getString("FULLNAME")));
							  if(residentType.equals("N"))
								 {
								  arrguaList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
								  arrguaList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
								  arrguaList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
								  arrguaList.add(correctNull(rs1.getString("CON_COMZIP")));//4
								  arrguaList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
								 }
								 else
								 {
									 arrguaList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
									 arrguaList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
									 arrguaList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
									 arrguaList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
									 arrguaList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
								 }
							  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
							  // for minor check
							  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
							      if(rs3!=null){ rs3.close(); }
							  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
							     if(rs3.next()){
							       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
							       guard_name=correctNull(rs3.getString("minor_guard_name"));
							     }
							 if(arrappminor.equalsIgnoreCase("Y"))
							  { 
							 		 arrguaList.add(guard_name);
							  		arrguaList.add("M/G");	
							   }
							  else if(arrguachilddesp.equalsIgnoreCase("M"))
							  {
								  arrguaList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
								  arrguaList.add("S/o");	
							  }
							  else if(arrguachilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
							  {
								  arrguaList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
								  arrguaList.add("W/o");	
							  } 
							  else if(arrguachilddesp.equalsIgnoreCase("F"))
							  {
								  arrguaList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
								  arrguaList.add("D/o");	
							  } 
							  else 
							  {
								  arrguaList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
								  arrguaList.add(" ");	
							  }
							  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
							  arrguaList.add(Helper.correctNull(strAge));
							  
							  ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs1.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								String temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(spsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else 
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst();
								while(rs.next())
								{
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else 
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o"); 
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									 if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else 
									  {  temp1.add(" ");
									  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrguaList.add(temp2);
								arrguaList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
								arrguaList.add(correctNull(rs1.getString("PERAPP_CBSID")));
								arrguaList.add(correctNull(rs1.getString("app_type")));
							  arrguaRow.add(arrguaList);
						  }
						  hshRecord.put("arrguaList",arrguaRow);
						  
						//Co-Obligant
							 if(rs1!=null){rs1.close();}
							 rs1=DBUtils.executeLAPSQuery("sel_app_con_details_Facility^"+strappno+"^"+"CO^"+FACILITY_SNO);
							  while(rs1.next())
							  {
								  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
								   String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
								  arrcoobligList=new ArrayList();
								  arrcoobligList.add(correctNull(rs1.getString("FULLNAME")));
								  if(residentType.equals("N"))
									 {
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMZIP")));//4
									  arrcoobligList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
									 }
									 else
									 {
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
										 arrcoobligList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
									 }
								  String arrguachilddesp=correctNull(rs1.getString("PERAPP_SEX"));
								// for minor check
								  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								      if(rs3!=null){ rs3.close(); }
								  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								     if(rs3.next()){
								       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								       guard_name=correctNull(rs3.getString("minor_guard_name"));
								     }
								if(arrappminor.equalsIgnoreCase("Y"))
								  { 
								 		 arrcoobligList.add(guard_name);
								 		 arrcoobligList.add("M/G");	
								   }
								  else  if(arrguachilddesp.equalsIgnoreCase("M"))
								  {
									  arrcoobligList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
									  arrcoobligList.add("S/o");	
								  }
								  else if(arrguachilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  {
									  arrcoobligList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));
									  arrcoobligList.add("W/o");	
								  } 
								  else if(arrguachilddesp.equalsIgnoreCase("F"))
								  {
									  arrcoobligList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
									  arrcoobligList.add("D/o");	
								  } 
								  else 
								  {			
									  arrcoobligList.add(correctNull(rs1.getString("PERAPP_FATNAME")));
									  arrcoobligList.add(" ");	
								  }
								  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
								  arrcoobligList.add(Helper.correctNull(strAge));
								  
								 
								  ArrayList nonindvRow=new ArrayList();
								  ArrayList temp1=new ArrayList();
								  ArrayList temp2=new ArrayList();
								  String perappid=correctNull(rs1.getString("perapp_id"));
								  String divisiontype="",div_name="",nonindiv="";;
									if(rs!=null){rs.close();}
									int dcount=0,spcount=0,pcount=0,tcount=0;
									String temp="";
									itemp=0;
									String spconcernsubtype="",spsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^SP^198");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!spconcernsubtype.equals(""))
										{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ spsubtype="dif";	}
										}
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(spsubtype.equals("same"))
									{if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(spsubtype.equals("same"))
											{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else 
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										spcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String dconcernsubtype="";	String dsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^D^197");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!dconcernsubtype.equals(""))
										{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ dsubtype="dif";	}
										}
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(dsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its ");	}
									rs.beforeFirst();
									while(rs.next())
									{
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(dsubtype.equals("same"))
											{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else 
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										dcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String ptconcernsubtype="",ptsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^PT^199");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!ptconcernsubtype.equals(""))
										{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ ptsubtype="dif"; }
										}
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(ptsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(ptsubtype.equals("same"))
											{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										  if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										pcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String tconcernsubtype="",tsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew^"+perappid+"^T^200");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!tconcernsubtype.equals(""))
										{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ tsubtype="dif"; }
										}
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(tsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(tsubtype.equals("same"))
											{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else 
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										tcount++;
									}
									temp2.add(nonindvRow);
									arrcoobligList.add(temp2);
									arrcoobligList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
									arrcoobligList.add(correctNull(rs1.getString("PERAPP_CBSID")));
									arrcoobligList.add(correctNull(rs1.getString("app_type")));
								    arrcoobligRow.add(arrcoobligList);
								  
							  }
							  hshRecord.put("arrcoobligRow",arrcoobligRow);
							  
							  boolean boolFlag=false;
							  if(template.contains("@GrpBorrowersno"))
							  {
								  if((arrguaRow!=null & arrguaRow.size()>0)||(arrcoobligRow!=null & arrcoobligRow.size()>0))
									  boolFlag=true;
							  }
							  
				    
				  if(template.contains("@appDetails"))
				  {
					 	StringBuffer tempappList=new StringBuffer();	
					 	StringBuffer tempappList1=new StringBuffer();
					     ArrayList arrappRowdet=new ArrayList();
					     tempappList.append("");	
					     if(arrappRow.size()>0 && arrappRow!=null)
					     {
					     	for(int i=0;i<arrappRow.size();i++)
					     	{
					     		 arrappRowdet=(ArrayList)arrappRow.get(i);
							     String constition=(String) arrappRowdet.get(10);
							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
							     if((arrappRow.size()==1) && (arrcoappRow.size()==0) )
							     {
							    	 if(constition.equals("01"))
									  {
							    		 if(boolFlag)
									     tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
							    		 else
							    		 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									  }
							    	 else
							    	 {
									    	if(arrIndvRow.size()>0)
									    	{
									    		if(boolFlag)
									    			tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    		else
									    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    	for(int j=0;j<arrIndvRow.size();j++)
									    	{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(temparr1.get(0));
									    		tempappList1.append(temparr1.get(0));
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
												    tempappList1.append(temparr.get(0)+"  ");
									    		}}
									    	}
									    	}
									    	else
									    	{
									    		if(boolFlag)
											     tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    		else
									    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    	}
							    	 }
							    	 if(boolFlag)
							    	 appcoappdetailslno++;
							     }
							     else
							     {
								      if(constition.equals("01"))
									  {
										 tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									  }
								      else
								      {
									    	if(arrIndvRow.size()>0)
									    	{
												tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	for(int j=0;j<arrIndvRow.size();j++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		tempappList.append(temparr1.get(0));
										    		tempappList1.append(temparr1.get(0));
										    		for(int k=1;k <temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
													    tempappList1.append(temparr.get(0)+"  ");
										    		}
										    		}
										    	}
									    	}
									    	else
									    	{
												  tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
									    	}
								      }
								      appcoappdetailslno++;
							     }
							     tempappList.append("<br><br>");
							     String  borrowername="";
							     if(!tempappList1.toString().equalsIgnoreCase("")){
							       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
							     }else{
								   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
							     }
						     	 String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
						     	 String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
						     	 compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
					     	}
					    }
					     template=template.replaceAll("@appDetails", tempappList.toString()); 
				  }
				  
				  if(template.contains("@coappDetails"))
				  {
					 	StringBuffer tempcoappList=new StringBuffer();	
					 	StringBuffer tempappList1=new StringBuffer();	
					     ArrayList arrcoappRowdet=new ArrayList();
					     tempcoappList.append(" ");	
					     if(arrcoappList.size()>0 &&arrcoappList!=null)
					     {
					     	for(int i=0;i<arrcoappRow.size();i++)
					     	{
					     		 arrcoappRowdet=(ArrayList)arrcoappRow.get(i);
					     		String constition=(String) arrcoappRowdet.get(10);
					     		 ArrayList arrIndvRow= (ArrayList) arrcoappRowdet.get(9);
							     if(arrcoappRow.size()==1)
							     {
								    if(constition.equals("01"))
								    {
									     tempcoappList.append(""+appcoappdetailslno+". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+", aged about "+arrcoappRowdet.get(8)+" years, residing at "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
								    }
								    else
								    {
								    	if(arrIndvRow.size()>0)
								    	{	
									  tempcoappList.append(""+appcoappdetailslno+". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
								    	for(int j=0;j<arrIndvRow.size();j++)
								    	{
								    		ArrayList temparr=new ArrayList();
								    		ArrayList temparr1=new ArrayList();
								    		temparr1=(ArrayList) arrIndvRow.get(j);
								    		if(temparr1.size()>0)
								    		{
								    		tempcoappList.append(temparr1.get(0));
								    		tempappList1.append(temparr1.get(0));

								    		for(int k=1;k < temparr1.size();k++)
								    		{
								    			temparr=(ArrayList) temparr1.get(k);
											    tempcoappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
											    tempappList1.append(temparr.get(0)+"  ");

								    		}}
								    	}
								    	}
								    	else
								    	{
										     tempcoappList.append(""+appcoappdetailslno+". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
								    	}
								    }
								    appcoappdetailslno++;
							     }
							     else
							     {
									 if(constition.equals("01"))
									 {
									     tempcoappList.append("" + appcoappdetailslno + ". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+", aged about "+arrcoappRowdet.get(8)+" years, residing at "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
									 }
									 else
									 {
										 if(arrIndvRow.size()>0)
									    	{
												tempcoappList.append(""+ appcoappdetailslno +". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
										    	for(int j=0;j<arrIndvRow.size();j++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		tempcoappList.append(temparr1.get(0));
										    		tempappList1.append(temparr1.get(0));
										    		for(int k=1;k <temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempcoappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
											    		tempappList1.append(temparr.get(0)+"  ");

										    		}
										    		}
										    	}
									    	}
									    	else
									    	{
												  tempcoappList.append(""+ appcoappdetailslno +". "+arrcoappRowdet.get(0)+", "+arrcoappRowdet.get(1)+", "+arrcoappRowdet.get(2)+", "+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+", "+arrcoappRowdet.get(5)+". ");
									    	}
									 }
									 appcoappdetailslno++;
							     }
							     tempcoappList.append("<br><br>");
							     String  borrowername="";
							     if(!tempappList1.toString().equalsIgnoreCase("")){
							       borrowername=Helper.correctNull((String) arrcoappRowdet.get(0))+","+tempappList1.toString();
							     }else{
								   borrowername=Helper.correctNull((String) arrcoappRowdet.get(0));
							     }
						     	 String cbsid=Helper.correctNull((String) arrcoappRowdet.get(11));
						     	 String strapptype=Helper.correctNull((String) arrcoappRowdet.get(12));
						     	 compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
					     	}
					    } 
			     	 template=template.replaceAll("@coappDetails", tempcoappList.toString()); 
				  }
				  
				  if(template.contains("@appAddress"))
				  {
					  StringBuffer tempappList=new StringBuffer();	
					  StringBuffer tempappList1=new StringBuffer();	
					  tempappList.append("<span align='justify'>");
					  ArrayList arrappRowdet=new ArrayList();
					     if(arrappRow.size()>0 && arrappRow!=null)
					     {
					     	for(int i=0;i<arrappRow.size();i++)
					     	{
					     		arrappRowdet=(ArrayList)arrappRow.get(i);
							     String constition=(String) arrappRowdet.get(10);
							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
					     		if((arrappRow.size()==1) && (arrcoappRow.size()==0))
					     		{
							    	if(constition.equals("01"))
							    	{
							    		if(boolFlag)
							     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							    		else
							    		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							    	}
							    	else
							    	{
					     				if(arrIndvRow.size()>0)
									    {
					     					if(boolFlag)
								     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     					else
								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
								     		for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(""+temparr1.get(0)+"<br/>");
									    		tempappList1.append(temparr1.get(0));
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+" <br>"+temparr.get(6)+" "+temparr.get(7)+" <br>"+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
												    tempappList1.append(temparr.get(0)+"  ");
									    		}}
						     				}
						     				tempappList.append("");
									    }
					     				else
					     				{
					     					if(boolFlag)
								     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     					else
					     					tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
							    	}
							    	if(boolFlag)
							    	appcoappslno++;
					     		}
					     		else
					     		{
					     			if(constition.equals("01"))
					     			{
							     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     			}
					     			else
					     			{
					     				if(arrIndvRow.size()>0)
									    {
								     		tempappList.append(""+appcoappslno+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
								     		for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(""+temparr1.get(0)+"<br/>");
									    		tempappList1.append(temparr1.get(0));
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+" <br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
												    tempappList1.append(temparr.get(0)+"  ");
									    		}}
						     				}
						     				tempappList.append("<br>");
									    }
					     				else
					     				{
								     		tempappList.append(""+appcoappslno+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
					     			}
					     			appcoappslno++;
					     		}
					     		 String  borrowername="";
							     if(!tempappList1.toString().equalsIgnoreCase("")){
							       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
							     }else{
								   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
							     }
						     	String	cbsid=Helper.correctNull((String) arrappRowdet.get(11));
						     	String	strapptype=Helper.correctNull((String) arrappRowdet.get(12));
						        compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
					     	}
					     }
					     tempappList.append("</span>");
					     template=template.replaceAll("@appAddress", tempappList.toString()); 
				  }
					 
					  if(template.contains("@coappAddress"))
					  {
						  StringBuffer tempcoappList=new StringBuffer();
						  StringBuffer tempappList1=new StringBuffer();	
						  tempcoappList.append("<span align='justify'>");
						  ArrayList arrcoappRowdet=new ArrayList();
						     if(arrcoappList.size()>0 && arrcoappList!=null)
						     {
						     	for(int i=0;i<arrcoappRow.size();i++)
						     	{
						     		arrcoappRowdet=(ArrayList)arrcoappRow.get(i);
								     String constition=(String) arrcoappRowdet.get(10);
							  		 ArrayList arrIndvRow= (ArrayList) arrcoappRowdet.get(9);
						     		if(arrcoappRow.size()==1)
						     		{
										 if(constition.equals("01"))
										 {
									     	tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+"<br/>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
										 }
										 else
										 {
							     				if(arrIndvRow.size()>0)
											    {
										     		tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
										     		for(int j=0;j<arrIndvRow.size();j++)
								     				{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempcoappList.append(""+temparr1.get(0)+"<br/>");
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempcoappList.append(temparr.get(0)+" <br>"+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br> <br>");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
								     				}
								     				tempcoappList.append("<br>");
											    }
							     				else
							     				{
										     		tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
							     				}
							     			}
										 appcoappslno++;
						     		}
						     		else
						     		{
										 if(constition.equals("01"))
										 {
									     	tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(7)+" "+arrcoappRowdet.get(6)+"<br/>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
										 }
										 else
										 {
							     				if(arrIndvRow.size()>0)
											    {
										     		tempcoappList.append(""+appcoappslno+". "+ arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
								     				for(int j=0;j<arrIndvRow.size();j++)
								     				{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempcoappList.append(""+temparr1.get(0)+"<br/>");
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempcoappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+" <br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
								     				}
								     				tempcoappList.append("<br>");
											    }
							     				else
							     				{
										     		tempcoappList.append(""+appcoappslno+". "+arrcoappRowdet.get(0)+"<br>"+arrcoappRowdet.get(1)+"<br>"+arrcoappRowdet.get(2)+"<br>"+arrcoappRowdet.get(3)+" - "+arrcoappRowdet.get(4)+"<br>"+arrcoappRowdet.get(5)+"<br><br>");
							     				}
										 }
										 appcoappslno++;	 
						     		}
						     		 String  borrowername="";
								     if(!tempappList1.toString().equalsIgnoreCase("")){
								       borrowername=Helper.correctNull((String) arrcoappRowdet.get(0))+","+tempappList1.toString();
								     }else{
									   borrowername=Helper.correctNull((String) arrcoappRowdet.get(0));
								     }
						     		String cbsid=Helper.correctNull((String) arrcoappRowdet.get(11));
						     		String strapptype=Helper.correctNull((String) arrcoappRowdet.get(12));
						     	    compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						     }
						     tempcoappList.append("</span");
						     template=template.replaceAll("@coappAddress", tempcoappList.toString()); 
					  }		
						  
							  
							 if(template.contains("@GrpBorrowersno"))
							  {
								  coobligguaDetslno=appcoappdetailslno++;
							  }if(template.contains("@CoobligantDetails"))
							  {
								 	StringBuffer tempcoobligList=new StringBuffer();	
								 	StringBuffer tempappList1=new StringBuffer();	
								     ArrayList arrcoobligRowdet=new ArrayList();
								     tempcoobligList.append("");
								     if(arrcoobligRow.size()>0 && arrcoobligRow!=null)
								     {
								     	for(int i=0;i<arrcoobligRow.size();i++)
								     	{
								     		 arrcoobligRowdet=(ArrayList)arrcoobligRow.get(i);
										     String constitution=(String) arrcoobligRowdet.get(10);
								     		 ArrayList arrIndvRow= (ArrayList) arrcoobligRowdet.get(9);
										   if(arrcoobligRow.size()==1)
										   {
											    if(constitution.equals("01"))
											    {
												     tempcoobligList.append(""+coobligguaDetslno+". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+", aged about "+arrcoobligRowdet.get(8)+" years, residing at "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    }
											    else
											    {
											    	if(arrIndvRow.size()>0)
											    	{	
												  tempcoobligList.append(""+coobligguaDetslno+ ". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    	for(int j=0;j<arrIndvRow.size();j++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempcoobligList.append(temparr1.get(0));
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempcoobligList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
											    	}
											    	}
											    	else
											    	{
													     tempcoobligList.append(""+coobligguaDetslno+". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										   else
										   {
											    if(constitution.equals("01"))
											    {
													  tempcoobligList.append(""+ coobligguaDetslno +". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+", aged about "+arrcoobligRowdet.get(8)+" years, residing at "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+".  ");
											    }
											    else
											    {
											    	if(arrIndvRow.size()>0)
											    	{
														tempcoobligList.append(""+ coobligguaDetslno +". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
												    	for(int j=0;j<arrIndvRow.size();j++)
												    	{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempcoobligList.append(temparr1.get(0));
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k <temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempcoobligList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}
												    		}
												    	}
											    	}
											    	else
											    	{
														  tempcoobligList.append(""+coobligguaDetslno+". "+arrcoobligRowdet.get(0)+", "+arrcoobligRowdet.get(1)+", "+arrcoobligRowdet.get(2)+", "+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+", "+arrcoobligRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										     tempcoobligList.append("<br><br>");
										     String  borrowername="";
										     if(!tempappList1.toString().equalsIgnoreCase("")){
										       borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0))+","+tempappList1.toString();
										     }else{
											   borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0));
										     }
										     String cbsid=Helper.correctNull((String) arrcoobligRowdet.get(11));
										     String strapptype=Helper.correctNull((String) arrcoobligRowdet.get(12));

										     compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								    } 
								 template=template.replaceAll("@CoobligantDetails", tempcoobligList.toString()); 
							  }
							  
							  if(template.contains("@guadetails"))
							  {
								 	StringBuffer tempguaList=new StringBuffer();	
								 	StringBuffer tempappList1=new StringBuffer();	
								     ArrayList arrguaRowdet=new ArrayList();
								     tempguaList.append("");
								     if(arrguaRow.size()>0 && arrguaRow!=null)
								     {
								     	for(int i=0;i<arrguaRow.size();i++)
								     	{
								     		 arrguaRowdet=(ArrayList)arrguaRow.get(i);
										     String constitution=(String) arrguaRowdet.get(10);
								     		 ArrayList arrIndvRow= (ArrayList) arrguaRowdet.get(9);
										   if(arrguaRow.size()==1)
										   {
											    if(constitution.equals("01"))
											    {
												     tempguaList.append(""+coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+", aged about "+arrguaRowdet.get(8)+" years, residing at "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+".  ");
											    }
											    else
											    {
											    	if(arrIndvRow.size()>0)
											    	{	
											    		tempguaList.append(""+coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    	for(int j=0;j<arrIndvRow.size();j++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j);
											    		if(temparr1.size()>0)
											    		{
											    		tempguaList.append(temparr1.get(0));
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempguaList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
														    tempappList1.append(temparr.get(0)+"  ");
											    		}}
											    	}
											    	}
											    	else
											    	{
													     tempguaList.append(""+coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										   else
										   {
											    if(constitution.equals("01"))
											    {
													  tempguaList.append(""+ coobligguaDetslno+". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+", aged about "+arrguaRowdet.get(8)+" years, residing at "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    }
											    else
											    {
									    	if(arrIndvRow.size()>0)
											    	{
														tempguaList.append(""+ coobligguaDetslno +". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
												    	for(int j=0;j<arrIndvRow.size();j++)
												    	{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempguaList.append(temparr1.get(0));
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k <temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempguaList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}
												    		}
												    	}
											    	}
											    	else
											    	{
														  tempguaList.append(""+ coobligguaDetslno +". "+arrguaRowdet.get(0)+", "+arrguaRowdet.get(1)+", "+arrguaRowdet.get(2)+", "+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+", "+arrguaRowdet.get(5)+". ");
											    	}
											    }
											    coobligguaDetslno++;
										   }
										     tempguaList.append("<br> <br>");
										     String  borrowername="";
										     if(!tempappList1.toString().equalsIgnoreCase("")){
										       borrowername=Helper.correctNull((String) arrguaRowdet.get(0))+","+tempappList1.toString();
										     }else{
											   borrowername=Helper.correctNull((String) arrguaRowdet.get(0));
										     }
									     	String cbsid=Helper.correctNull((String) arrguaRowdet.get(11));
									     	String strapptype=Helper.correctNull((String) arrguaRowdet.get(12));
									     	 compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								    } 
								 template=template.replaceAll("@guadetails", tempguaList.toString()); 
							  }
							  
							  if(template.contains("@GrpBorrowersno"))
							  {
								  coobligguaaddslno=appcoappslno++;
							  }
							  if(template.contains("@CoobligantAddress"))
							  {
								  StringBuffer tempcoobligList=new StringBuffer();
								  StringBuffer tempappList1=new StringBuffer();	
								  tempcoobligList.append("<span align='justify'>");
								  ArrayList arrcoobligRowdet=new ArrayList();
								     if(arrcoobligRow.size()>0 && arrcoobligRow!=null)
								     {
								     	for(int i=0;i<arrcoobligRow.size();i++)
								     	{
								     		arrcoobligRowdet=(ArrayList)arrcoobligRow.get(i);
								     		 String constition=(String) arrcoobligRowdet.get(10);
								     		ArrayList arrIndvRow= (ArrayList) arrcoobligRowdet.get(9); 
								     		if(arrcoobligRow.size()==1)
								     		{
								     			if((constition.equals("01")))
								     			{
										     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempcoobligList.append(""+temparr1.get(0)+"<br>");
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempcoobligList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}}
									     				}
									     				tempcoobligList.append("<br>");
												    }
								     				else
								     				{
											     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		else
								     		{
								     			if(constition.equals("01"))
								     			{
										     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(7)+" "+arrcoobligRowdet.get(6)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempcoobligList.append(""+coobligguaaddslno+". "+ arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempcoobligList.append(""+temparr1.get(0)+"<br>");
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempcoobligList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
															    tempappList1.append(temparr.get(0)+"  ");
												    		}}
									     				}
									     				tempcoobligList.append("<br>");
												    }
								     				else
								     				{
											     		tempcoobligList.append(""+coobligguaaddslno+". "+arrcoobligRowdet.get(0)+"<br>"+arrcoobligRowdet.get(1)+"<br>"+arrcoobligRowdet.get(2)+"<br>"+arrcoobligRowdet.get(3)+" - "+arrcoobligRowdet.get(4)+"<br>"+arrcoobligRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		String  borrowername="";
										     if(!tempappList1.toString().equalsIgnoreCase("")){
										       borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0))+","+tempappList1.toString();
										     }else{
											   borrowername=Helper.correctNull((String) arrcoobligRowdet.get(0));
										     }
									     	String cbsid=Helper.correctNull((String) arrcoobligRowdet.get(11));
									     	String strapptype=Helper.correctNull((String) arrcoobligRowdet.get(12));
									     	compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								     }
								     tempcoobligList.append("</span>");
								     template=template.replaceAll("@CoobligantAddress", tempcoobligList.toString()); 
							  
							  }
							
							  if(template.contains("@guaAddress"))
							  {
								  StringBuffer tempguaList=new StringBuffer();
								  StringBuffer tempappList1=new StringBuffer();	
								  tempguaList.append("<span align='justify'>");
								  ArrayList arrguaRowdet=new ArrayList();
								     if(arrguaRow.size()>0 && arrguaRow!=null)
								     {
								     	for(int i=0;i<arrguaRow.size();i++)
								     	{
								     		arrguaRowdet=(ArrayList)arrguaRow.get(i);
								     		 String constition=(String) arrguaRowdet.get(10);
								     		ArrayList arrIndvRow= (ArrayList) arrguaRowdet.get(9);
								     		if(arrguaRow.size()==1)
								     		{
								     			if(constition.equals("01"))
								     			{
										     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempguaList.append(""+temparr1.get(0)+"<br/>");
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempguaList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br>"+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
															    tempappList1.append(temparr.get(0)+" ");
												    		}}
									     				}
									     				tempguaList.append("<br>");
												    }
								     				else
								     				{
											     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		else
								     		{
								     			if(constition.equals("01"))
								     			{
										     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(7)+" "+arrguaRowdet.get(6)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     			}
								     			else
								     			{
								     				if(arrIndvRow.size()>0)
												    {
											     		tempguaList.append(""+coobligguaaddslno+". "+ arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
									     				for(int j=0;j<arrIndvRow.size();j++)
									     				{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j);
												    		if(temparr1.size()>0)
												    		{
												    		tempguaList.append(""+temparr1.get(0)+"<br/>");
												    		tempappList1.append(temparr1.get(0));
												    		for(int k=1;k < temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempguaList.append(temparr.get(0)+"<br>"+temparr.get(6)+" " +temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" - "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
															    tempappList1.append(temparr.get(0)+" ");
												    		}}
									     				}
									     				tempguaList.append("<br>");
												    }
								     				else
								     				{
											     		tempguaList.append(""+coobligguaaddslno+". "+arrguaRowdet.get(0)+"<br>"+arrguaRowdet.get(1)+"<br>"+arrguaRowdet.get(2)+"<br>"+arrguaRowdet.get(3)+" - "+arrguaRowdet.get(4)+"<br>"+arrguaRowdet.get(5)+"<br><br>");
								     				}
								     			}
								     			coobligguaaddslno++;
								     		}
								     		String  borrowername="";
										     if(!tempappList1.toString().equalsIgnoreCase("")){
										       borrowername=Helper.correctNull((String) arrguaRowdet.get(0))+","+tempappList1.toString();
										     }else{
											   borrowername=Helper.correctNull((String) arrguaRowdet.get(0));
										     }
									     	String cbsid=Helper.correctNull((String) arrguaRowdet.get(11));
									     	String strapptype=Helper.correctNull((String) arrguaRowdet.get(12));

									     	 compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
								     	}
								     }
								     tempguaList.append("</span>");
								     template=template.replaceAll("@guaAddress", tempguaList.toString()); 
							  }
				 // details and address end
			 
			  if(template.contains("@Existinglimit"))
			  {
					 if(rs1!=null)
	   					  rs1.close();		  
					rs1=DBUtils.executeLAPSQuery("getFacilityData^"+strappno+"^"+hidfacslno);
	    			if(rs1.next())		
	    			{
						 template=template.replaceAll("@Existinglimit", Helper.correctNull((String)rs1.getString("facility_existing"))); 
	    			}
			  }			  
			 if(template.contains("@proposedlimit") || template.contains("@changeinlimit"))
			 {
				 String existing_limit="0",current_limit="0";
				 if(rs1!=null)
  					  rs1.close();		  
				rs1=DBUtils.executeLAPSQuery("getFacilityData^"+strappno+"^"+hidfacslno);
				if(rs1.next())		
				{
					existing_limit = Helper.correctDouble((String)rs1.getString("facility_existing")); 
					current_limit = Helper.correctDouble((String)rs1.getString("facility_sancamt")); 
				}
				int limitdiff=(int) (Double.parseDouble(current_limit)- Double.parseDouble(existing_limit));
				if(template.contains("@proposedlimit"))
				{
					if(limitdiff>0)
						 template=template.replaceAll("@proposedlimit"," enhanced limit of Rs."+current_limit ); 
					else if(limitdiff<0)
						 template=template.replaceAll("@proposedlimit", "reduced limit of Rs."+current_limit ); 
					else
						 template=template.replaceAll("@proposedlimit", "existing limit of Rs."+current_limit ); 
				}
				if(template.contains("@changeinlimit"))
				{
					if(limitdiff>0)
						 template=template.replaceAll("@changeinlimit","which has now been enhanced to Rs."+current_limit +"/-"); 
					else if(limitdiff<0)
						 template=template.replaceAll("@changeinlimit", "which has now been reduced to Rs."+current_limit +"/-"); 
					else
						 template=template.replaceAll("@changeinlimit", ""); 
				}
			 }
			 
				if(template.contains("@intchargedfrequency"))	 
				{
					 if(rs1!=null)
							  rs1.close();		  
					rs1=DBUtils.executeLAPSQuery("sel_com_facility_intfreq^"+hidfacslno+"^"+ strappno);
					if(rs1.next())		
					{
						String str_prdintratefreg=Helper.correctNull((String)rs1.getString("com_facility_intfreq"));
						if(str_prdintratefreg.equals("M"))
							  template=template.replaceAll("@intchargedfrequency", "Monthly"); 
		  				else if(str_prdintratefreg.equals("Q"))
		  					  template=template.replaceAll("@intchargedfrequency", "Quartely"); 
		  				else if(str_prdintratefreg.equals("H"))
							  template=template.replaceAll("@intchargedfrequency", "Half-yearly"); 
		  				else if(str_prdintratefreg.equals("Y"))
							  template=template.replaceAll("@intchargedfrequency", "Yearly"); 
					}
				}
				 if(template.contains("@repmths"))
				 {
					 	if(rs!=null){ rs.close(); }
					 	strQuery=SQLParser.getSqlQuery("sel_tl_repayschedule^"+strappno+"^"+hidfacslno);
						rs=DBUtils.executeQuery(strQuery);
						int totalinst=0;
						while(rs.next())
						{
							String TL_FEQUENCY=	Helper.correctDouble((String)rs.getString("TL_FEQUENCY"));
							if(TL_FEQUENCY.equals("M"))
								totalinst=totalinst + Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")));
							else if(TL_FEQUENCY.equals("Q"))
								totalinst=totalinst + (Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")))* 3);
							else if(TL_FEQUENCY.equals("H"))
								totalinst=totalinst + (Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")))* 6);
							else if(TL_FEQUENCY.equals("Y"))
								totalinst=totalinst + (Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")))* 12);
						} 
						 template=template.replaceAll("@repmths", String.valueOf(totalinst)); 
				 }
					 
				 if(template.contains("@TitleDeedDepositDetails"))
				 {
					 	String depositbranch="",depositdate="",datetemplate="";
					 	int depositcount=0;
					 	if(rs!=null){ rs.close(); }
					 	strQuery=SQLParser.getSqlQuery("sel_propsecattached_titledeeds^"+strappno+"^ and APP_SEC_FACSNO="+hidfacslno);
						rs=DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							if(depositcount!=0)
							{
								datetemplate=datetemplate.concat(", ");
							}
							depositbranch=Helper.correctNull(rs.getString("depositbranch"))+" - "+Helper.correctNull(rs.getString("ORG_ZIP"));
							String dateinwords1=Helper.correctNull(rs.getString("SEC_DEPOSIT_DATE"));
							String dateinwords2=Helper.convertDatetowords(Helper.correctNull(rs.getString("SEC_DEPOSIT_DATE")));
							datetemplate=datetemplate+"on this "+dateinwords2.substring(0, 4)+" day of "+Helper.getMonths(Integer.parseInt(dateinwords1.substring(4, 5)))+" of "+dateinwords1.substring(6, 10)+" has deposited at "+depositbranch+" branch";
							
							depositcount++;
						}		
						template=template.replaceAll("@TitleDeedDepositDetails", datetemplate); 
				 }
								 
				 if(template.contains("@coapplicant"))
				 {
					  StringBuffer tempappList=new StringBuffer();
					  ArrayList arrcoappdet = new ArrayList();  
					  ArrayList arrcoappdetails = new ArrayList();
					  arrcoappdetails = (ArrayList) hshRecord.get("arrcoappList");
					  if(arrcoappdetails.size()>0 && arrcoappdetails!=null)
					     {
					     	for(int i=0;i<arrcoappdetails.size();i++)
					     	{
					     		arrcoappdet=(ArrayList)arrcoappdetails.get(i);
					     		String borrowername=Helper.correctNull((String) arrcoappdet.get(0));
					     		String cbsid=Helper.correctNull((String) arrcoappdet.get(11));
					     		String strapptype=Helper.correctNull((String) arrcoappdet.get(12));
					     	    compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
					     		if(arrcoappdetails.size()==1)
					     		{
					     			tempappList.append(arrcoappdet.get(0));
					     		}
					     		else
					     		{
					     			if((i+1)==arrcoappdetails.size())
					     				tempappList.append(arrcoappdet.get(0)+". ");
					     			else
					     				tempappList.append(arrcoappdet.get(0)+", ");
					     		}
					     	}
					     }
					    template=template.replaceAll("@coapplicant", tempappList.toString()); 
				 }
				 
				 if(template.contains("@coobligant"))
				 {
					  StringBuffer tempappList=new StringBuffer();
					  ArrayList arrcoappdet = new ArrayList();  
					  ArrayList arrcoappdetails = new ArrayList();
					  arrcoappdetails = (ArrayList) hshRecord.get("arrcoobligRow");
					  if(arrcoappdetails.size()>0 && arrcoappdetails!=null)
					     {
					     	for(int i=0;i<arrcoappdetails.size();i++)
					     	{
					     		
					     		arrcoappdet=(ArrayList)arrcoappdetails.get(i);
					     		String borrowername=Helper.correctNull((String) arrcoappdet.get(0));
					     		String cbsid=Helper.correctNull((String) arrcoappdet.get(11));
					     		String strapptype=Helper.correctNull((String) arrcoappdet.get(12));
					     	    compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
					     		
					     		if(arrcoappdetails.size()==1)
					     		{
					     			tempappList.append(arrcoappdet.get(0));
					     		}
					     		else
					     		{
					     			if((i+1)==arrcoappdetails.size())
					     				tempappList.append(arrcoappdet.get(0)+". ");
					     			else
					     				tempappList.append(arrcoappdet.get(0)+", ");
					     		}
					     	}
					     }
					    template=template.replaceAll("@coobligant", tempappList.toString()); 
				 }
				 
				 if(template.contains("@accountoperation"))
				 {
					 StringBuffer tempborrower= new StringBuffer();
					 	if(rs2!=null){ rs2.close(); }
					 	strQuery=SQLParser.getSqlQuery("sel_borrower_accoperated_facility^"+strappno+"^"+hidfacslno+"^"+strappno+"^"+hidfacslno+"^"+strappno+"^"+strappno);
						rs2=DBUtils.executeQuery(strQuery);
						int ccount=0;
						while(rs2.next())
						{
							if(ccount>0)
								tempborrower.append(", "+correctNull(rs2.getString("borrrowername")));
							else
								tempborrower.append(correctNull(rs2.getString("borrrowername")));
							ccount++;
						}
						template=template.replaceAll("@accountoperation", tempborrower.toString()); 
				 }
				 
				 while(template.contains("@secloopstarted"))
				 {
					String temptemplate="",temp="";
				 	StringBuffer tempborrowermdtd= new StringBuffer();
				 	boolean bflag=false;
					int startindex = template.indexOf("@secloopstarted");
					int endindex = template.indexOf("@secloopended");
					temptemplate=template.substring(startindex,(endindex+("@secloopended").length()));
					
					if(temptemplate.contains("@borrowermdtd"))
					{
						bflag=true;
					 	tempborrowermdtd= new StringBuffer();
					 	if(rs2!=null){ rs2.close(); }
					 	strQuery=SQLParser.getSqlQuery("sel_mdtd_securities_borrowerfacility^"+strappno+"^"+hidfacslno+"^"+strappno+"^"+hidfacslno);
						rs2=DBUtils.executeQuery(strQuery);
						while(rs2.next())
						{
							temp=temptemplate;
							String mdtdcomments=correctNull(Helper.CLOBToString(rs2.getClob("MDTD_COMMENTS")));
							String mdtddesc=correctNull(Helper.CLOBToString(rs2.getClob("CUS_SEC_SECURITY_DESCRIPTION")));
							temp=temp.replaceAll("@borrowermdtd", mdtdcomments);
							temp=temp.replaceAll("@borrowersecdesc", mdtddesc);
							temp=temp.replaceAll("@otherborrowermdtd", "");
							temp=temp.replaceAll("@otherborrowersecdesc", "");
							temp=temp.replaceAll("@secloopstarted", "");
							temp=temp.replaceAll("@secloopended", "");
							tempborrowermdtd.append(temp);
						}
					}
					if(temptemplate.contains("@otherborrowermdtd"))
					{
						bflag=true;
					 	if(rs2!=null){ rs2.close(); }
					 	strQuery=SQLParser.getSqlQuery("sel_mdtd_securities_otherborrowerfacility^"+strappno+"^"+hidfacslno);
						rs2=DBUtils.executeQuery(strQuery);
						while(rs2.next())
						{
							temp=temptemplate;
							String mdtdcomments=correctNull(Helper.CLOBToString(rs2.getClob("MDTD_COMMENTS")));
							String mdtddesc=correctNull(Helper.CLOBToString(rs2.getClob("CUS_SEC_SECURITY_DESCRIPTION")));
							temp=temp.replaceAll("@otherborrowermdtd", mdtdcomments);
							temp=temp.replaceAll("@otherborrowersecdesc", mdtddesc);
							temp=temp.replaceAll("@borrowermdtd", "");
							temp=temp.replaceAll("@borrowersecdesc", "");
							temp=temp.replaceAll("@secloopstarted", "");
							temp=temp.replaceAll("@secloopended", "");
							tempborrowermdtd.append(temp);
						}
					}
					if(bflag)
					{
						template=template.substring(0, startindex)+(tempborrowermdtd.toString())+template.substring((endindex+("@secloopended").length()), template.length()); 
					}
					else
					{
						template=template.replace("@secloopstarted",""); 
						template=template.replace("@secloopended",""); 
					}
				 }
				 
				 hshValues.put("strTemplate",template);
				 template=getDocTemplateFacility1(hshValues);
				 hshRecord.put("doc_template",template);
    			}
    		}
			
    		hshQuery=new HashMap();
			arrValues=new ArrayList();
			hshQueryValues=new HashMap();
			hshQuery.put("strQueryId","updateapdoccbsid_fac");
    		arrValues.add(Helper.correctNull((String)hshValues.get("hidapprovercbsid")));
    		arrValues.add(strappno);
    		arrValues.add(hidfacslno);
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			hshQueryValues.put("size","1");
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			
			
			 
    		
    		if(docOpenType.equals("print"))
    		{
	    		String sno="";
	    		strQuery = SQLParser.getSqlQuery("sel_documentprint_count^"+strappno);
				rs = DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					sno=Helper.correctInt((String) rs.getString("count"));
				}
	    		
	    		hshQuery=new HashMap();
				arrValues=new ArrayList();
				hshQuery.put("strQueryId","ins_documentprint_history_facility");
				arrValues.add(sno);
				arrValues.add(strappno);
				arrValues.add(documentCode);
				arrValues.add(strUsrID);
				arrValues.add(hidfacslno);
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("1",hshQuery);
				hshQueryValues.put("size","1");
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
    		}
		}
			
		catch(Exception e){
    		throw new EJBException("Exception in  getDocTemplateFacility"+e.getMessage());
    	}
    	return hshRecord;
	}
	
	private String getDocTemplateFacility1(HashMap hshValues) 
	{
		String template=Helper.correctNull((String)hshValues.get("strTemplate"));
		String strappno=Helper.correctNull((String)hshValues.get("appno"));
    	String docid=Helper.correctNull((String)hshValues.get("doc_id"));
    	String strStatus=Helper.correctNull((String)hshValues.get("strappstatus"));
		String strQuery="";
		ResultSet rs2=null;
		ResultSet rs=null;
		ResultSet rs1=null;
		ResultSet rs3=null;
		HashMap hshRecord=new HashMap();
		ArrayList arrappList=new ArrayList();
		ArrayList arrappRow=new ArrayList(); 
		String[] strArrsno={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
		int itemp=0;
		String strQuery1="",arrappminor="",guard_name="";
		java.text.NumberFormat jtn= java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);	
		HashMap hshQuery=null;
    	HashMap hshQueryValues=new HashMap();
    	ArrayList arrValues=new ArrayList();
    	ComProposalBean compbean = new ComProposalBean();
		try
		{

			String hidfacslno=Helper.correctNull((String)hshValues.get("hidfacslno"));
			String strBorrowerId=Helper.correctNull((String)hshValues.get("BORROWER_ID"));
			 if(rs!=null){	rs.close();	}
			 ArrayList secDetails = new ArrayList();
			 ArrayList secROWDetails = new ArrayList();
			 String desc="and c.CUS_SEC_TYPE<>1";
			 strQuery=SQLParser.getSqlQuery("sel_secDescrip_naturecharge^"+ strappno+"^"+hidfacslno+"^"+desc);
			 rs=DBUtils.executeQuery(strQuery);
				while (rs.next())
				{
					secDetails = new ArrayList();
					secDetails.add(Helper.correctInt((String)rs.getString("CUS_SEC_NATUREOFCHARGE")));
					secDetails.add(correctNull(Helper.CLOBToString(rs.getClob("APP_SEC_DESCRIPTION"))));
					secROWDetails.add(secDetails);
				}
				
				//clean security
				if(rs!=null){	rs.close();	}
				desc="and c.CUS_SEC_TYPE=1";
				 strQuery=SQLParser.getSqlQuery("sel_secDescrip_naturecharge^"+ strappno+"^"+hidfacslno+"^"+desc);
				 rs=DBUtils.executeQuery(strQuery);
				while (rs.next())
				{
					secDetails = new ArrayList();
					secDetails.add("1111");
					secDetails.add(correctNull(Helper.CLOBToString(rs.getClob("APP_SEC_DESCRIPTION"))));
					secROWDetails.add(secDetails);
				}
				
				hshRecord.put("secDescription_naturecharge",secROWDetails);
			 
			 
			 //naturecharge-secdesc
				 int tempcount=0;
				 if(template.contains("@hypsecdesc"))
					 tempcount++;
				 if(template.contains("@plsecdesc"))
					 tempcount++;
				 if(template.contains("@assecdesc"))
					 tempcount++;
				 if(template.contains("@trsecdesc"))
					 tempcount++;
				 if(template.contains("@rmsecdesc"))
					 tempcount++;
				 if(template.contains("@emsecdesc"))
					 tempcount++;
				 if(template.contains("@clsecdesc"))
					 tempcount++;
				 
			 if(tempcount>0)
			 {
				 String strtempsec="";
				 String naturechargedesc="";
				for(int j=0;j<tempcount;j++)
				{
					 if(template.contains("@rmsecdesc"))
					 {
						 strtempsec="@rmsecdesc";	 naturechargedesc="6";
					 }
					 if(template.contains("@emsecdesc"))
					 {
						 strtempsec="@emsecdesc";	 naturechargedesc="5";
					 }
					 if(template.contains("@trsecdesc"))
					 {
						 strtempsec="@trsecdesc";	 naturechargedesc="4";
					 }
					 if(template.contains("@assecdesc"))
					 {
						 strtempsec="@assecdesc";	 naturechargedesc="3";
					 }
					 if(template.contains("@plsecdesc"))
					 {
						 strtempsec="@plsecdesc";	 naturechargedesc="2";
					 }
					 if(template.contains("@hypsecdesc"))
					 {
						 strtempsec="@hypsecdesc";	 naturechargedesc="1";
					 }
					 if(template.contains("@clsecdesc"))
					 {
						 strtempsec="@clsecdesc";	 naturechargedesc="1111";
					 }
					 
				  StringBuffer sbDescriptionofSecurity = new StringBuffer();
				  ArrayList arrsecDetails = new ArrayList();
				  ArrayList arrsecDetailCOL = new ArrayList();
				  arrsecDetails=(ArrayList)hshRecord.get("secDescription_naturecharge");
				  String naturecharge="";
				  int counttemp=0,k=0;
				  if(arrsecDetails.size()>0 && arrsecDetails!=null)
					{
					    for(int i=0;i<arrsecDetails.size();i++)
						{
					    	arrsecDetailCOL=(ArrayList) arrsecDetails.get(i);
							naturecharge=(String) arrsecDetailCOL.get(0);
							if(naturecharge.equals(naturechargedesc))
							{
								counttemp++;
							}
						}
						for(int i=0;i<arrsecDetails.size();i++)
						{
							arrsecDetailCOL=(ArrayList) arrsecDetails.get(i);
							naturecharge=(String) arrsecDetailCOL.get(0);
							
							if(naturecharge.equals(naturechargedesc))
							{
								if(counttemp>1)
								{
									sbDescriptionofSecurity.append((k+1)+")  "+arrsecDetailCOL.get(1)+"<br>"); 
									k++;
								}
								else
								{
									sbDescriptionofSecurity.append(arrsecDetailCOL.get(1)+"<br>");
								}
							}	
						}
					}
				  template=template.replaceAll(strtempsec, sbDescriptionofSecurity.toString()); 
				}
			}
			 
			 
			 //naturecharge-owneradderss & ownerdetails
			 tempcount=0;
			 if(template.contains("@hysecurityowneraddress") || template.contains("@hysecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@emsecurityowneraddress") || template.contains("@emsecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@assecurityowneraddress") || template.contains("@assecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@plsecurityowneraddress") || template.contains("@plsecurityownerdetails"))
				 tempcount++; 
			 if(template.contains("@rmsecurityowneraddress") || template.contains("@rmsecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@trsecurityowneraddress") || template.contains("@trsecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@clsecurityowneraddress") || template.contains("@clsecurityownerdetails"))
				 tempcount++;
			 
			 if(tempcount>0)
			 {
				 String strtempsec="";
				 String naturechargedesc="";
				 String strtempownerdet="";
				 
				 for(int j=0;j<tempcount;j++)
				 {
					 if(template.contains("@rmsecurityowneraddress") || template.contains("@rmsecurityownerdetails"))
						 {
							 strtempsec="@rmsecurityowneraddress";	 naturechargedesc="6";  strtempownerdet="@rmsecurityownerdetails";
						 }
						 if(template.contains("@emsecurityowneraddress") || template.contains("@emsecurityownerdetails"))
						 {
							 strtempsec="@emsecurityowneraddress";	 naturechargedesc="5";  strtempownerdet="@emsecurityownerdetails";
						 }
						 if(template.contains("@trsecurityowneraddress") || template.contains("@trsecurityownerdetails"))
						 {
							 strtempsec="@trsecurityowneraddress";	 naturechargedesc="4";  strtempownerdet="@trsecurityownerdetails";
						 }
						 if(template.contains("@assecurityowneraddress") || template.contains("@assecurityownerdetails"))
						 {
							 strtempsec="@assecurityowneraddress";	 naturechargedesc="3";  strtempownerdet="@assecurityownerdetails";
						 }
						 if(template.contains("@plsecurityowneraddress") || template.contains("@plsecurityownerdetails"))
						 {
							 strtempsec="@plsecurityowneraddress";	 naturechargedesc="2";  strtempownerdet="@plsecurityownerdetails";
						 }
						 if(template.contains("@hysecurityowneraddress") || template.contains("@hysecurityownerdetails"))
						 {
							 strtempsec="@hysecurityowneraddress";	 naturechargedesc="1";  strtempownerdet="@hysecurityownerdetails";
						 }
						 if(template.contains("@clsecurityowneraddress") || template.contains("@clsecurityownerdetails"))
						 {
							 strtempsec="@clsecurityowneraddress";	 naturechargedesc="1111";  strtempownerdet="@clsecurityownerdetails";
						 }
						 
					    if(rs1!=null){rs1.close();}
						if(naturechargedesc.equals("1111"))
							 rs1=DBUtils.executeLAPSQuery("sel_secOwneraddress_naturecharge_clean^"+strappno+"^"+hidfacslno);
						else
							 rs1=DBUtils.executeLAPSQuery("sel_secOwneraddress_naturecharge^"+strappno+"^"+naturechargedesc+"^"+hidfacslno);
						arrappRow=new ArrayList();
						 while(rs1.next())
						  {		String strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
							  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
							  arrappList=new ArrayList();
							  arrappList.add(correctNull(rs1.getString("FULLNAME"))); //0
							 if(residentType.equals("N"))
							 {
								  arrappList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
								  arrappList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
								  arrappList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
								  arrappList.add(correctNull(rs1.getString("CON_COMZIP")));//4
								  arrappList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
							 }
							 else
							 {
								  arrappList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
								  arrappList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
								  arrappList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
								  arrappList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
								  arrappList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
							 }
							  String arrappchilddesp=correctNull(rs1.getString("PERAPP_SEX"));
							// for minor check
							  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
							      if(rs3!=null){ rs3.close(); }
							  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
							     if(rs3.next()){
							       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
							       guard_name=correctNull(rs3.getString("minor_guard_name"));
							     }
							 if(arrappminor.equalsIgnoreCase("Y"))
							  { 
							  	arrappList.add(guard_name);
							  	arrappList.add("M/G");	 
							  	}
							  else if(arrappchilddesp.equalsIgnoreCase("M"))
							  {
								  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
								  arrappList.add("S/o");	
							  }
							  else if(arrappchilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
							  {
								  arrappList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));//6 
								  arrappList.add("W/o");	
							  } 
							  else if(arrappchilddesp.equalsIgnoreCase("F"))
							  {
								  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
								  arrappList.add("D/o");	
							  } 
							  else 
							  {
								  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
								  arrappList.add(" ");	
							  }  
							  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
							  arrappList.add(Helper.correctNull(strAge));
							 
								ArrayList nonindvRow=new ArrayList();
								  ArrayList temp1=new ArrayList();
								  ArrayList temp2=new ArrayList();
								  String perappid=correctNull(rs1.getString("perapp_id"));
								  String divisiontype="",div_name="",nonindiv="";;
									if(rs!=null){rs.close();}
									int dcount=0,spcount=0,pcount=0,tcount=0;
									String temp="";
									itemp=0;
									String spconcernsubtype="",spsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^SP^198");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!spconcernsubtype.equals(""))
										{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ spsubtype="dif";	}
										}
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(spsubtype.equals("same"))
									{ 
											if(itemp==1)
											nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
											else
											nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");
									}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(spsubtype.equals("same"))
											{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");  
										  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										spcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String dconcernsubtype="";	String dsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^D^197");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!dconcernsubtype.equals(""))
										{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ dsubtype="dif";	}
										}
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(dsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its ");	}
									rs.beforeFirst();
									while(rs.next())
									{
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(dsubtype.equals("same"))
											{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
										  if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										dcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String ptconcernsubtype="",ptsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^PT^199");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!ptconcernsubtype.equals(""))
										{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ ptsubtype="dif"; }
										}
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(ptsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(ptsubtype.equals("same"))
											{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");  
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else 
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										pcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String tconcernsubtype="",tsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^T^200");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!tconcernsubtype.equals(""))
										{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ tsubtype="dif"; }
										}
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(tsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(tsubtype.equals("same"))
											{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
										  if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										tcount++;
									}
									temp2.add(nonindvRow);
									arrappList.add(temp2);
									arrappList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
									arrappList.add(correctNull(rs1.getString("PERAPP_CBSID")));
									arrappList.add(correctNull(rs1.getString("app_type")));
							  arrappRow.add(arrappList);
						  }
						 // hshRecord.put("arrappList",arrappRow);
					
					
						 if(template.contains(strtempsec))
						 {
	    					  StringBuffer tempappList=new StringBuffer();	
	    					  StringBuffer tempappList1=new StringBuffer();	
	    					  tempappList.append("<span align='justify'>");
	    					  ArrayList arrappRowdet=new ArrayList();
	    					     if(arrappRow.size()>0 && arrappRow!=null)
	    					     {
	    					     	for(int i=0;i<arrappRow.size();i++)
	    					     	{
	    					     		arrappRowdet=(ArrayList)arrappRow.get(i);
	    							     String constition=(String) arrappRowdet.get(10);
	    							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
	    					     		if(arrappRow.size()==1)
	    					     		{
	    							    	if(constition.equals("01"))
	    							    	{
	    							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    							    	}
	    							    	else
	    							    	{
	    					     				if(arrIndvRow.size()>0)
	    									    {
	    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    						     				for(int j1=0;j1<arrIndvRow.size();j1++)
	    						     				{
	    									    		ArrayList temparr=new ArrayList();
	    									    		ArrayList temparr1=new ArrayList();
	    									    		temparr1=(ArrayList) arrIndvRow.get(j1);
	    									    		if(temparr1.size()>0)
	    									    		{
	    									    		tempappList.append(""+temparr1.get(0)+"<br/>");
	    									    		tempappList1.append(temparr1.get(0));
	    									    		for(int k=1;k < temparr1.size();k++)
	    									    		{
	    									    			temparr=(ArrayList) temparr1.get(k);
	    												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
	    												    tempappList1.append(temparr.get(0)+" ");
	    									    		}}
	    						     				}
	    						     				tempappList.append("");
	    									    }
	    					     				else
	    					     				{
	    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    					     				}
	    							    	}
	    					     		}
	    					     		else
	    					     		{
	    					     			if(constition.equals("01"))
	    					     			{
	    							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    					     			}
	    					     			else
	    					     			{
	    					     				if(arrIndvRow.size()>0)
	    									    {
	    								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    						     				for(int j1=0;j1<arrIndvRow.size();j1++)
	    						     				{
	    									    		ArrayList temparr=new ArrayList();
	    									    		ArrayList temparr1=new ArrayList();
	    									    		temparr1=(ArrayList) arrIndvRow.get(j1);
	    									    		if(temparr1.size()>0)
	    									    		{
	    									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
	    									    		tempappList1.append(temparr1.get(0));
	    									    		for(int k=1;k < temparr1.size();k++)
	    									    		{
	    									    			temparr=(ArrayList) temparr1.get(k);
	    												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+" "+temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
	    												    tempappList1.append(temparr.get(0)+" ");
	    									    		}}
	    						     				}
	    						     				tempappList.append("<br>");
	    									    }
	    					     				else
	    					     				{
	    								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    					     				}
	    					     				
	    					     			}
	    					     		}
	    					     		String  borrowername="";
									     if(!tempappList1.toString().equalsIgnoreCase("")){
									       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
									     }else{
										   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
									     }
		    						     	 String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
		    						     	 String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
		    						     	  compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
	    					     	}
	    					     }
	    					     tempappList.append("</span>");
	    					     template=template.replaceAll(strtempsec, tempappList.toString()); 
						 }
						 int appcoappdetailslno=1;
						 if(template.contains(strtempownerdet))
						 {
						 	StringBuffer tempappList=new StringBuffer();	
						 	 StringBuffer tempappList1=new StringBuffer();	
						     ArrayList arrappRowdet=new ArrayList();
						     tempappList.append("");	
						     if(arrappRow.size()>0 && arrappRow!=null)
						     {
						     	for(int i=0;i<arrappRow.size();i++)
						     	{
						     		 arrappRowdet=(ArrayList)arrappRow.get(i);
								     String constition=(String) arrappRowdet.get(10);
								     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
								     
								     if((arrappRow.size()==1))
								     {
								    	 if(constition.equals("01"))
										  {
								    		 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										  }
								    	 else
								    	 {
										    	if(arrIndvRow.size()>0)
										    	{
										    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	for(int j1=0;j1<arrIndvRow.size();j1++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j1);
										    		if(temparr1.size()>0)
										    		{
										    		tempappList.append(temparr1.get(0));
										    		tempappList1.append(temparr1.get(0));
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
													    tempappList1.append(temparr.get(0)+" ");
										    		}}
										    	}
										    	}
										    	else
										    	{
										    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	}
								    	 }
								     }
								     else
								     {
									      if(constition.equals("01"))
										  {
											 tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										  }
									      else
									      {
										    	if(arrIndvRow.size()>0)
										    	{
													tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											    	for(int j1=0;j1<arrIndvRow.size();j1++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j1);
											    		if(temparr1.size()>0)
											    		{
											    		tempappList.append(temparr1.get(0));
											    		tempappList1.append(temparr1.get(0));
											    		for(int k=1;k <temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
														    tempappList1.append(temparr.get(0)+" ");
											    		}
											    		}
											    	}
										    	}
										    	else
										    	{
													  tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	}
									      }
									      appcoappdetailslno++;
								     }
								     tempappList.append("<br><br>");
								     String  borrowername="";
								     if(!tempappList1.toString().equalsIgnoreCase("")){
								       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
								     }else{
									   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
								     }
			   					      String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
			   					      String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
			   					      compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
						     	}
						    }
						     template=template.replaceAll(strtempownerdet, tempappList.toString()); 
						 }
					}
			 }
			 
			 //Machinery hypothecation
				 if(template.contains("@machineryhypothecation"))
				 {
					 if(rs!=null)
			     			rs.close();
						 ArrayList hypmachRow= new ArrayList();

					 	strQuery = SQLParser.getSqlQuery("sel_securityhyp_Machinary^"+strappno+"^"+hidfacslno);
						rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							String temp="Hypothecation of "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_MACHINERY_TYPE")))+" "+
										Helper.underLine(3,Helper.correctNull((String) rs.getString("sec_machinetype")))+" (Model - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("sec_year")))+") valued at Rs."
										+Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_NETSECURITY")))+"/- installed in the building bearing Door no. "+
										Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_BELONGSTO_DOORNO")))+ " situated in "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS1")))
										+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS2")))
										+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_PINCODE")))
										+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_MACHINERY_BELONGS")))
										+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_MACHINERY_BELONGS_NAME")))+".";
							hypmachRow.add(temp);
						}
						
						 StringBuffer sbhypmach = new StringBuffer();
						  ArrayList arrmachTemp = new ArrayList();
						  
						  sbhypmach.append(" ");
						  String strVal1 = "";
						  String temp2;
						  if(hypmachRow.size()>0 && hypmachRow!=null)
						  {
							  if(hypmachRow.size()==1)
							  {
								  temp2=(String) hypmachRow.get(0);
								  sbhypmach.append(temp2);
							  }
							  else
							  {
								  for(int i=0;i<hypmachRow.size();i++)
								  {
									  temp2=(String) hypmachRow.get(i); 
									  sbhypmach.append((i+1)+". "+temp2+"<br><br>");
								  }
							  }
						  }
						  template=template.replaceAll("@machineryhypothecation", sbhypmach.toString()); 
				 } 
			 
			//crop hypothecation 
				 
					 if(template.contains("@crophypothecation"))
					 {
						 if(rs!=null)
				     			rs.close();
							 ArrayList hypcropRow= new ArrayList();
						 	strQuery = SQLParser.getSqlQuery("sel_securityhyp_Crop^"+strappno+"^"+hidfacslno);
							rs = DBUtils.executeQuery(strQuery);
							while(rs.next())
							{
								String temp="Hypothecation of "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_CLASSIFICATION")))+" valued at Rs."+
											Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_NETSECURITY")))+"/-"+" in"+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_AREA")))+ " "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_MEASUREMENT")))
											+" of land situated in Survey No"+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_SUR_NO")))
											+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS_1")))+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS_2")))
											+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))+" - "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_PIN")))
											+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_SALUTATION")))
											+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_BELONGING")))+".";
								hypcropRow.add(temp);
							}
							
							 StringBuffer sbhypcrop = new StringBuffer();
							  ArrayList arrCropTemp = new ArrayList();
							  
							  sbhypcrop.append(" ");
							  String strVal1 = "";
							  String temp2;
							  if(hypcropRow.size()>0 && hypcropRow!=null)
							  {
								  if(hypcropRow.size()==1)
								  {
									  temp2=(String) hypcropRow.get(0);
									  sbhypcrop.append(temp2);
								  }
								  else
								  {
									  for(int i=0;i<hypcropRow.size();i++)
									  {
										  temp2=(String) hypcropRow.get(i); 
										  sbhypcrop.append((i+1)+". "+temp2+"<br><br>");
									  }
								  }
							  }
							  template=template.replaceAll("@crophypothecation", sbhypcrop.toString()); 
					 }
					 
		 //Stockhypothetication
					
					 if(template.contains("@stockhypothecation"))
					 {
						 if(rs!=null)
				     			rs.close();
							 ArrayList hypstkRow= new ArrayList();
							 
						 strQuery = SQLParser.getSqlQuery("sel_securityhyp_stock^"+strappno+"^"+hidfacslno);
						 rs = DBUtils.executeQuery(strQuery);
							while(rs.next())
							{
								String temp="Hypothecation of stock stored/stacked in Door No "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_STOCK_SURVEY")))+","+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS1")))
								+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS2")))+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))
								+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_STOCK_ZIP")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_STOCK_SAL")))
								+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_STOCK_NAME")))+".";
								hypstkRow.add(temp);
							}
							StringBuffer sbhypstock = new StringBuffer();
							ArrayList arrstkTemp = new ArrayList();
							  
							  sbhypstock.append(" ");
							  String strVal1 = "";
							  String temp2;
							  if(hypstkRow.size()>0 && hypstkRow!=null)
							  {
								  if(hypstkRow.size()==1)
								  {
									  temp2=(String) hypstkRow.get(0);
									  sbhypstock.append(temp2);
								  }
								  else
								  {
									  for(int i=0;i<hypstkRow.size();i++)
									  {
										  temp2=(String) hypstkRow.get(i); 
										  sbhypstock.append((i+1)+". "+temp2+"<br><br>");
									  }
								  }
							  }
							  template=template.replaceAll("@stockhypothecation", sbhypstock.toString()); 
					 }	 
					 
					 
					 //furniturehypothecation
					 if(template.contains("@furniturehypothecation"))
					 {
						 if(rs!=null)
				     			rs.close();
							 ArrayList hypfurRow= new ArrayList();
						 strQuery = SQLParser.getSqlQuery("sel_securityhyp_furniture^"+strappno+"^"+hidfacslno);
						 rs = DBUtils.executeQuery(strQuery);
							while(rs.next())
							{
								String temp="Hypothecation of Furniture and Fixtures valued at Rs."+Helper.underLine(2,Helper.correctDouble((String) rs.getString("CUS_SEC_NETSECURITY")))+"/-"+" stored/installed in Door No "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_SURVEYNO")))
								+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS1")))+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS2")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))
								+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_PINCODE")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_SALUTATION")))
								+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_SALUTATION_NAME")))+".";
								hypfurRow.add(temp);
							}
							StringBuffer sbhypfur = new StringBuffer();
							  ArrayList arrfurTemp = new ArrayList();
							  
							  sbhypfur.append(" ");
							  String strVal1 = "";
							  String temp2;
							  if(hypfurRow.size()>0 && hypfurRow!=null)
							  {
								  if(hypfurRow.size()==1)
								  {
									  temp2=(String) hypfurRow.get(0);
									  sbhypfur.append(temp2);
								  }
								  else
								  {
									  for(int i=0;i<hypfurRow.size();i++)
									  {
										  temp2=(String) hypfurRow.get(i); 
										  sbhypfur.append((i+1)+". "+temp2+"<br><br>");
									  }
								  }
							  }
							  template=template.replaceAll("@furniturehypothecation", sbhypfur.toString()); 
					 }
					 
					 //book debt Hypothecation
					
					 if(template.contains("@bookdebtshypothecation"))
					 {
						 if(rs!=null)
				     			rs.close();
							 ArrayList hypbookRow= new ArrayList();
						 strQuery = SQLParser.getSqlQuery("sel_securityhyp_bookdebt^"+strappno+"^"+hidfacslno);
						 rs = DBUtils.executeQuery(strQuery);
							while(rs.next())
							{
								String temp="Hypothecation of Bills Receivables ";
								hypbookRow.add(temp);
							}
							StringBuffer sbhypfur = new StringBuffer();
							ArrayList arrfurTemp = new ArrayList();
							  
							  sbhypfur.append(" ");
							  String strVal1 = "";
							  String temp2;
							  if(hypbookRow.size()>0 && hypbookRow!=null)
							  {
								  if(hypbookRow.size()==1)
								  {
									  temp2=(String) hypbookRow.get(0);
									  sbhypfur.append(temp2);
								  }
								  else
								  {
									  for(int i=0;i<hypbookRow.size();i++)
									  {
										  temp2=(String) hypbookRow.get(i); 
										  sbhypfur.append((i+1)+". "+temp2+"<br><br>");
									  }
								  }
							  }
							  template=template.replaceAll("@bookdebtshypothecation", sbhypfur.toString()); 
					 }
					 
			// Livestock hypothecation
					 
						 if(template.contains("@livestockhypothecation"))
						 {
							 if(rs!=null)
					     			rs.close();
								
								 StringBuffer sbhyplive = new StringBuffer();
								 StringBuffer sbhypliveRow = new StringBuffer();
								 ArrayList arrliveTemp = new ArrayList();
								 strQuery = SQLParser.getSqlQuery("sel_securityhyp_livestock^"+strappno+"^"+hidfacslno);
								rs = DBUtils.executeQuery(strQuery);
								while(rs.next())
								{
									sbhyplive = new StringBuffer();
									ArrayList hypliveRow= new ArrayList();
									ArrayList hypliveDETRow= new ArrayList();
									ArrayList hypliveDETCol= new ArrayList();
									String temp="Hypothecation of "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_TOTNUMBER")))+" "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_NAME")))+"/s totally valued at Rs."+
												Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_NETSECURITY")))+"/-"+"  stored in Door No "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_APP_SURVEYNO")))
												+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_APP_ADDR1")))+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_APP_ADDR2")))
												+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_APP_PINCODE")))
												+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_APP_TITLE")))
												+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_APP_NAME")))+".";
									hypliveRow.add(temp);
									
									 if(rs2!=null)
							     			rs2.close();
									strQuery = SQLParser.getSqlQuery("sel_securityhyp_livestock_details^"+Helper.correctNull((String) rs.getString("SEC_SECURITYID")));
									rs2 = DBUtils.executeQuery(strQuery);
									while(rs2.next())
									{
										hypliveDETCol=new ArrayList();	
										hypliveDETCol.add(Helper.correctInt((String) rs2.getString("SEC_AGE")));
										hypliveDETCol.add(Helper.correctNull((String) rs2.getString("STAT_DATA_DESC1")));
										hypliveDETCol.add(Helper.correctNull((String) rs2.getString("SEC_IDMARK")));
										hypliveDETRow.add(hypliveDETCol);
									}
									

									  String strVal1 = "";
									  String temp2;
									  if(hypliveRow.size()>0 && hypliveRow!=null)
									  {
										  if(hypliveRow.size()==1)
										  {
											  temp2=(String) hypliveRow.get(0);
											  sbhyplive.append(temp2);
										  }
										  else
										  {
											  for(int i=0;i<hypliveRow.size();i++)
											  {
												  temp2=(String) hypliveRow.get(i); 
												  sbhyplive.append((i+1)+". "+temp2+"<br><br>");
											  }
										  }
									  }
									  
									  if(hypliveDETRow.size()>0 && hypliveDETRow!=null)
									  {
										  sbhyplive.append("<Table border='0' width='95%' align='center'>");
										  sbhyplive.append("<tr align='center'>");
										  sbhyplive.append("<td><b>Sl.No.</b></td>");
										  sbhyplive.append("<td><b>Age</b></td>");
										  sbhyplive.append("<td><b>Breed</b></td>");
										  sbhyplive.append("<td><b>Identification Marks</b></td>");
										  sbhyplive.append("</tr>");
										  
										  ArrayList hypliveDETtemp= new ArrayList();
										  for(int i=0;i<hypliveDETRow.size();i++)
										  {
											  hypliveDETtemp=(ArrayList) hypliveDETRow.get(i); 
											  sbhyplive.append("<tr align='center'>");
											  sbhyplive.append("<td>"+ (i+1)+". &nbsp;</td>");
											  sbhyplive.append("<td>"+ hypliveDETtemp.get(0) +"&nbsp;</td>");
											  sbhyplive.append("<td>"+ hypliveDETtemp.get(1) +"&nbsp;</td>");
											  sbhyplive.append("<td> "+ hypliveDETtemp.get(2) +"&nbsp;</td>");
											  sbhyplive.append("</tr>");
										  }
										  sbhyplive.append("</table>");
									  }
									  sbhypliveRow.append(sbhyplive);
								}
								  template=template.replaceAll("@livestockhypothecation", sbhypliveRow.toString()); 
						 }
	
			//@stockpremisesowneraddress
						 
			 if(template.contains("@stockpremisesowneraddress") || template.contains("@stockpremisesownerdetails"))
			 {
				 if(rs!=null)
		     			rs.close();
					 ArrayList hypstkRow= new ArrayList();
					 ArrayList hypstkRowAddress= new ArrayList();

				 strQuery = SQLParser.getSqlQuery("sel_securityhyp_stockPremises^"+strappno+"^"+hidfacslno);
				 rs = DBUtils.executeQuery(strQuery);
				 while(rs.next())
					{
						String tempDetails=Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS1"))+", "+Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS2"))+", "+Helper.correctNull((String) rs.getString("CITY_NAME"))
						+", "+Helper.correctNull((String) rs.getString("DISTRICT_DESC"))+" - "+Helper.correctNull((String) rs.getString("SEC_STOCK_ZIP"))+", "+Helper.correctNull((String) rs.getString("STATE_NAME"))+".";
						hypstkRow.add(tempDetails);
						
						String tempAddress=Helper.correctNull((String) rs.getString("SEC_STOCK_SAL"))+" "+Helper.correctNull((String) rs.getString("SEC_STOCK_NAME"))+"<br>"+Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS1"))
						+",<br>"+Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS2"))+",<br>"+Helper.correctNull((String) rs.getString("CITY_NAME"))+",<br>"+Helper.correctNull((String) rs.getString("DISTRICT_DESC"))
						+" - "+Helper.correctNull((String) rs.getString("SEC_STOCK_ZIP"))+", <br>"+Helper.correctNull((String) rs.getString("STATE_NAME"))+".";
						hypstkRowAddress.add(tempAddress);
					}
					
					StringBuffer sbhypstockAddress = new StringBuffer();
					StringBuffer sbhypstock = new StringBuffer();
					ArrayList arrstkTemp = new ArrayList();
					  
					  sbhypstock.append(" ");
					  String strVal1 = "";
					  String temp2;
					  if(hypstkRow.size()>0 && hypstkRow!=null)
					  {
						  if(hypstkRow.size()==1)
						  {
							  temp2=(String) hypstkRow.get(0);
							  sbhypstock.append(temp2);
							  temp2=(String) hypstkRowAddress.get(0);
							  sbhypstockAddress.append(temp2);
						  }
						  else
						  {
							  for(int i=0;i<hypstkRow.size();i++)
							  {
								  temp2=(String) hypstkRow.get(i); 
								  sbhypstock.append((i+1)+". "+temp2+"<br><br>");
								  temp2=(String) hypstkRowAddress.get(i);
								  sbhypstockAddress.append((i+1)+". "+temp2+"<br><br>");
							  }
						  }
					  }
					  template=template.replaceAll("@stockpremisesownerdetails", sbhypstock.toString().toUpperCase()); 
					  template=template.replaceAll("@stockpremisesowneraddress", sbhypstockAddress.toString().toUpperCase()); 
			 }
						 
			 if(template.contains("@Securityowneraddress"))
			 {
				 ArrayList arrsecownerRow=new ArrayList();
				 ArrayList arrsecownerlist=new ArrayList();
				 	
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_secowner_addressdetails^"+strappno+"^ and APP_SEC_FACSNO= "+hidfacslno);
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{	 String strCbsACno=correctNull(rs2.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
  					  arrsecownerlist=new ArrayList();
  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
  					  if(residentType.equals("N"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
  					  }
  					  else
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
  					  }
  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
  					// for minor check
  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
  					     if(rs3!=null){ rs3.close(); }
  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
  					    if(rs3.next()){
  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
  					    }
  					 if(arrappminor.equalsIgnoreCase("Y"))
  					 { 
  							 arrsecownerlist.add(guard_name);
  							arrsecownerlist.add("M/G");	
  					 }
  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("S/o");	
  					  }
  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
  						  arrsecownerlist.add("W/o");	
  					  } 
  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("D/o");	 
  					  }
  					else 
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add(" ");	
  					  }  
  					  
  					  String strAge=Helper.calculateAGE(correctNull(rs2.getString("dob")));
  					  arrsecownerlist.add(Helper.correctNull(strAge));
  					
						ArrayList nonindvRow=new ArrayList();
						  ArrayList temp1=new ArrayList();
						  ArrayList temp2=new ArrayList();
						  String perappid=correctNull(rs2.getString("perapp_id"));
						  String divisiontype="",div_name="",nonindiv="";;
							if(rs!=null){rs.close();}
							int dcount=0,spcount=0,pcount=0,tcount=0;
							String temp="";
							itemp=0;
							String spconcernsubtype="",spsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^SP^198");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!spconcernsubtype.equals(""))
								{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ spsubtype="dif";	}
								}
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(spsubtype.equals("same"))
							{ 
							if(itemp==1)
								nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(spsubtype.equals("same"))
									{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								spcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String dconcernsubtype="";	String dsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^D^197");
							while(rs.next())
							{
								if(!dconcernsubtype.equals(""))
								{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ dsubtype="dif";	}
								}
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(dsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its ");	}
							rs.beforeFirst();
							while(rs.next())
							{
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(dsubtype.equals("same"))
									{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								dcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String ptconcernsubtype="",ptsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^PT^199");
							while(rs.next())
							{
								if(!ptconcernsubtype.equals(""))
								{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ ptsubtype="dif"; }
								}
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(ptsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(ptsubtype.equals("same"))
									{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								pcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String tconcernsubtype="",tsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^T^200");
							while(rs.next())
							{
								if(!tconcernsubtype.equals(""))
								{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ tsubtype="dif"; }
								}
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(tsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(tsubtype.equals("same"))
									{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								tcount++;
							}
							temp2.add(nonindvRow);
							arrsecownerlist.add(temp2);
							arrsecownerlist.add(correctNull(rs2.getString("PERAPP_CONSTITUTIONNEW")));
							arrsecownerlist.add(correctNull(rs2.getString("PERAPP_CBSID")));
							arrsecownerlist.add(correctNull(rs2.getString("app_type")));
  					  arrsecownerRow.add(arrsecownerlist);
					}
					
					  StringBuffer tempappList=new StringBuffer();
					  StringBuffer tempappList1=new StringBuffer();
					  tempappList.append("<span align='justify'>");
					  ArrayList arrappRowdet=new ArrayList();
					     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
					     {
					     	for(int i=0;i<arrsecownerRow.size();i++)
					     	{
					     		arrappRowdet=(ArrayList)arrsecownerRow.get(i);
							     String constition=(String) arrappRowdet.get(10);
							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
									
					     		if(arrappRow.size()==1)
					     		{
							    	if(constition.equals("01"))
							    	{
							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							    	}
							    	else
							    	{
					     				if(arrIndvRow.size()>0)
									    {
								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     				for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(""+temparr1.get(0)+"<br/>");
									    		tempappList1.append(temparr1.get(0));
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
												    tempappList1.append(temparr.get(0)+"  ");
									    		}}
						     				}
						     				tempappList.append("");
									    }
					     				else
					     				{
								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
							    	}
					     		}
					     		else
					     		{
					     			if(constition.equals("01"))
					     			{
							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     			}
					     			else
					     			{
					     				if(arrIndvRow.size()>0)
									    {
								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     				for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
									    		tempappList1.append(temparr1.get(0));
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
												    tempappList1.append(temparr.get(0)+"  ");
									    		}}
						     				}
						     				tempappList.append("<br>");
									    }
					     				else
					     				{
								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
					     				
					     			}
					     		}
					     		String  borrowername="";
							     if(!tempappList1.toString().equalsIgnoreCase("")){
							       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
							     }else{
								   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
							     }
					     		String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
					     		String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
					     	    compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
					     	}
					     }
					     tempappList.append("</span>");
					     template=template.replaceAll("@Securityowneraddress", tempappList.toString()); 
			 }
			 
			 
		  if(template.contains("@GrpBorrowersno"))
		  {
			 template=template.replaceAll("@GrpBorrowersno", ""); 
		  }
		  String strCbsACnmbr="";
		  rs1=DBUtils.executeLAPSQuery("sel_facilityPerapp_details^"+strappno+"^"+hidfacslno);
			if(rs1.next())
			{
				strCbsACnmbr=Helper.correctNull((String)rs1.getString("CBS_ACCOUNTNO"));
			}
		  if(template.contains("@odosbalance"))
			 {
				 if(ApplicationParams.getCbsIntegration().equalsIgnoreCase("TRUE"))
					 strQuery = SQLParser.getCBSSqlQuery("selliabpullingdirectacopening^"+strCbsACnmbr);
				 else
					 strQuery = SQLParser.getCBSSqlQuery("selliabpullingdirectacopening1^"+strCbsACnmbr);
				 
				 if(rs2!=null){ rs2.close(); }
				 rs2=DBUtils.executeQueryCBSConnection(strQuery);
				 if(rs2.next())
				 {
					 double dblOS=Double.parseDouble(Helper.correctDouble(rs2.getString("outstanding")));
					 DecimalFormat d=new DecimalFormat("0.00");
					 if(dblOS<0)
						 template=template.replaceAll("@odosbalance", "Rs. "+d.format(dblOS)+" /- [being the last figure in the account] as the balance due"); 
					 else
					 	template=template.replaceAll("@odosbalance", "Rs. "+d.format(dblOS)+" /- (Cr) [being the last figure in the account] as balance "); 

				 }
				 else
				 {
					 template=template.replaceAll("@odosbalance","");
				 }
				 
			 }
		  
		  if(template.contains("@InstallmentsDetails"))
		  {
			    rs = DBUtils.executeLAPSQuery("sel_allcomments1^" + strappno + "^repaycomment^"+hidfacslno);
				if (rs.next()) 
				{
					hshRecord.put("fin_comments", Helper.removeHTMLTags(Helper.CLOBToString(rs.getClob("fin_comments"))).toString());
				}
			  
			  StringBuffer sbPartofInstallments = new StringBuffer();
			  sbPartofInstallments.append("<Table border='0' width='95%' align='center'>");
			 /* sbPartofInstallments.append("<tr>");
			  sbPartofInstallments.append("<td align='center'> SCHEDULE 'A' <br> (Particulars of Installments) ");
			  sbPartofInstallments.append("</tr>");*/
			  sbPartofInstallments.append("<tr>");
			  String REPAYMENTTYPE=Helper.correctNull((String) hshValues.get("FACILITY_REPAYTYPE"));
			  if(REPAYMENTTYPE.equals("E"))
			  {
				  sbPartofInstallments.append("<td align='center'> Repayable in "+ (Integer.parseInt(Helper.correctNull((String)hshValues.get("FACILITY_MONTHS")))-(Integer.parseInt(Helper.correctInt((String)hshValues.get("FACILITY_HOLIDAYPERIOD"))))) +" Equated Monthly Installment of Rs."+ jtn.format(Double.parseDouble(Helper.correctDouble((String)hshValues.get("emi"))))+" each "+ Helper.correctNull((String)hshValues.get("FACILITY_HOLIDAYPERIOD_desc")) +" </td>");
			  }
			  else
			  {
				  sbPartofInstallments.append("<td>"+ Helper.correctNull((String) hshRecord.get("fin_comments")) +"</td>");
			  }
			  sbPartofInstallments.append("</tr>");
			  sbPartofInstallments.append("</table>");
			  template=template.replaceAll("@InstallmentsDetails", sbPartofInstallments.toString()); 
		  }	
		 if(rs1!=null)
  		rs1.close();
		 String depositbranch="",depositdate="";
  	   rs1=DBUtils.executeLAPSQuery("sel_propSecAttachedtoprop^"+strappno);
		while(rs1.next()) 
		{
		  if(template.contains("@titledeeddepositbranch") || template.contains("@titledeeddepositdate"))
			 {
				 	int depositcount=0;
				 	if(rs!=null){ rs.close(); }
				 		String desc1="and APP_SEC_SECID="+correctNull(rs1.getString("APP_SEC_SECID"))+" and APP_SEC_FACSNO="+hidfacslno;
				 		strQuery=SQLParser.getSqlQuery("sel_propsecattached_titledeeds^"+strappno+"^"+desc1);
				 	rs=DBUtils.executeQuery(strQuery);
					while(rs.next())
					{
						if(depositcount!=0)
						{
							depositbranch=depositbranch.concat(", ");
							depositdate=depositdate.concat(", ");
						}
						depositbranch=depositbranch+Helper.correctNull(rs.getString("depositbranch"))+" - "+Helper.correctNull(rs.getString("ORG_ZIP"));
						depositdate=depositdate+Helper.convertDatetowords(Helper.correctNull(rs.getString("SEC_DEPOSIT_DATE")));

						depositcount++;
					}
					
			 }
		}
		 template=template.replaceAll("@titledeeddepositbranch", depositbranch); 
		 template=template.replaceAll("@titledeeddepositdate", depositdate); 
		 
		  if(template.contains("@Litigations"))
			{
				StringBuffer sbLitigations=new StringBuffer();
				
				sbLitigations.append("<Table border='1' width='95%' align='center'>");
				sbLitigations.append("<tr align='center'>");
			    sbLitigations.append("<td>Sl.No.</td>");
			    sbLitigations.append("<td>Name of the Bank/ Financiers/others With whom facing</td>");
			    sbLitigations.append("<td>Nature of Litigation</td>");
			    sbLitigations.append("<td>Date of Litigation</td>");
			    sbLitigations.append("<td>Claim amount (Rs.)</td>");
              sbLitigations.append("<td>Other Claims</td>");
              sbLitigations.append("<td>Present Position</td>");
              sbLitigations.append("</tr>");
              
              int i=0;
              
              strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+strBorrowerId);
				rs = DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					if(Helper.correctNull((String)rs.getString("PERBANK_LITIGATIONS")).equals("Y"))
					{
						sbLitigations.append("<tr align='center'>");
						sbLitigations.append("<td>"+ (++i)+"&nbsp;</td>");
						
						String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
						rs2 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
						if(rs2.next())
						{
							strBankingcode=Helper.correctNull(rs2.getString("STAT_DATA_DESC1"));//1
						}
						else
						{
							strBankingcode="";
						}
						sbLitigations.append(" <td align='left'>"+strBankingcode+"&nbsp;</td>");
						sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_NATURELITIGATION"))+"&nbsp;</td>");
						sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_DATELITIGATION"))+"&nbsp;</td>");
						sbLitigations.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_CLAIMAMOUNT"))))+"&nbsp;</td>");
						sbLitigations.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_OTHERCLAIMS"))))+"&nbsp;</td>");
						sbLitigations.append("<td>"+Helper.correctNull((String)rs.getString("PERBANK_PRESENTPOS"))+"&nbsp;</td>");
						sbLitigations.append("</tr>");
					}
				}
				
				if(i==0)
				{
					sbLitigations.append("<tr align='center'>");
					sbLitigations.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
					sbLitigations.append("</tr>");
				}

				sbLitigations.append("</table>");
				template=template.replaceAll("@Litigations", sbLitigations.toString());
              
              
			}
		  if(template.contains("@CreditFacilities"))
			{
				StringBuffer sbCreditFacilities=new StringBuffer();
				
				sbCreditFacilities.append("<Table border='1' width='95%' align='center'>");
				sbCreditFacilities.append("<tr align='center'>");
			    sbCreditFacilities.append("<td>Sl.No.</td>");
			    sbCreditFacilities.append("<td>Name of the Bank/ Financiers/others</td>");
			    sbCreditFacilities.append("<td>Nature of facility</td>");
			    sbCreditFacilities.append("<td>Limit (Rs.)</td>");
			    sbCreditFacilities.append("<td>Balance Due (Rs.)</td>");
              sbCreditFacilities.append("<td colspan='2'>Securities & Value (Rs.)</td>");
              sbCreditFacilities.append("</tr>");
              
             int i=0;
              
              strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+strBorrowerId);
				rs = DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					 sbCreditFacilities.append("<tr align='center'>");
				     sbCreditFacilities.append("<td>"+ (++i)+"&nbsp;</td>");
				     
				     String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
						rs2 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
						if(rs2.next())
						{
							strBankingcode=Helper.correctNull(rs2.getString("STAT_DATA_DESC1"));//1
						}
						else
						{
							strBankingcode="";
						}
					 sbCreditFacilities.append("<td align='left'>"+strBankingcode+"&nbsp;</td>");
					 
					 String perbank_type=Helper.correctInt((String)rs.getString("perbank_type"));
						if(perbank_type.equals("1"))
						{
							perbank_type="Working Capital";
						}
						else if(perbank_type.equals("2"))
						{
							perbank_type="Term Loan";
							
						}
						else
						{
							perbank_type="";
						}
					 sbCreditFacilities.append("<td>"+perbank_type+"&nbsp;</td>");
					 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_limit"))))+"&nbsp;</td>");
					 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_os"))))+"&nbsp;</td>");
				     sbCreditFacilities.append("<td colspan='2'>"+Helper.correctNull(rs.getString("PERBANK_SECDESCRIP"))+" - "+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_SECVALUE"))))+"</td>");
					 sbCreditFacilities.append("</tr>");
				}
				
				if(i==0)
				{
					sbCreditFacilities.append("<tr align='center'>");
					sbCreditFacilities.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
					sbCreditFacilities.append("</tr>");
				}

				sbCreditFacilities.append("</table>");
				template=template.replaceAll("@CreditFacilities", sbCreditFacilities.toString());
			}
		  if(template.contains("@ParticularsofInstallments"))
		  {
			   rs = DBUtils.executeLAPSQuery("sel_allcomments1^" + strappno + "^repaycomment^"+hidfacslno);
				if (rs.next()) 
				{
					hshRecord.put("fin_comments", Helper.removeHTMLTags(Helper.CLOBToString(rs.getClob("fin_comments"))).toString());
				}
			  
			  StringBuffer sbPartofInstallments = new StringBuffer();
			  sbPartofInstallments.append("<Table border='1' width='95%' align='center'>");
			  sbPartofInstallments.append("<tr>");
			  sbPartofInstallments.append("<td align='center'> SCHEDULE 'A' <br> (Particulars of Installments) ");
			  sbPartofInstallments.append("</tr>");
			  sbPartofInstallments.append("<tr>");
			  String REPAYMENTTYPE=Helper.correctNull((String) hshValues.get("FACILITY_REPAYTYPE"));
			  if(REPAYMENTTYPE.equals("E"))
			  {
				  sbPartofInstallments.append("<td align='center'> Repayable in "+ (Integer.parseInt(Helper.correctNull((String)hshValues.get("FACILITY_MONTHS")))-(Integer.parseInt(Helper.correctInt((String)hshValues.get("FACILITY_HOLIDAYPERIOD"))))) +" Equated Monthly Installment of Rs."+ jtn.format(Double.parseDouble(Helper.correctDouble((String)hshValues.get("emi"))))+" each "+ Helper.correctNull((String)hshValues.get("FACILITY_HOLIDAYPERIOD_desc")) +" </td>");
			  }
			  else
			  {
				  sbPartofInstallments.append("<td>"+ Helper.correctNull((String) hshRecord.get("fin_comments")) +"</td>");
			  }
			  sbPartofInstallments.append("</tr>");
			  sbPartofInstallments.append("</table>");
			  template=template.replaceAll("@ParticularsofInstallments", sbPartofInstallments.toString()); 
		  }
		  
			 if(template.contains("@borrowersecuritydetails"))
			 {
				 ArrayList arrsecownerRow=new ArrayList();
				 ArrayList arrsecownerlist=new ArrayList();
				 	
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_borrowerSec_details^"+strappno+"^"+"'a','c'"+"^ and APP_SEC_FACSNO= "+hidfacslno);
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{  String strCbsACno=correctNull(rs2.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
  					  arrsecownerlist=new ArrayList();
  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
  					  if(residentType.equals("N"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
  					  }
  					  else
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
  					  }
  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
  					 // for minor check
  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
  					     if(rs3!=null){ rs3.close(); }
  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
  					    if(rs3.next()){
  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
  					    }
  					 if(arrappminor.equalsIgnoreCase("Y"))
  					 { 
  						 arrsecownerlist.add(guard_name);
  						arrsecownerlist.add("M/G");	
  					 }
  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("S/o");	
  					  }
  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
  						  arrsecownerlist.add("W/o");	
  					  } 
  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("D/o");	 
  					  }
  					 else 
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add(" ");	
  					  }  
  					  arrsecownerlist.add(Helper.calculateAGE(correctNull(rs2.getString("PERAPP_DOB"))));
  					  arrsecownerRow.add(arrsecownerlist);
					}
					
				 	 StringBuffer tempappList=new StringBuffer();	
				     ArrayList arrappRowdet=new ArrayList();
				     tempappList.append("");	
				     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
				     {
				     	for(int i=0;i<arrsecownerRow.size();i++)
				     	{
				     		 arrappRowdet=(ArrayList)arrsecownerRow.get(i);
				    		 if(arrsecownerRow.size()>1)
				    			 tempappList.append((i+1) +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				    		 else
				    			 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				     	}
				    }
				    template=template.replaceAll("@borrowersecuritydetails", tempappList.toString()); 
			 }
			 
			 
			 if(template.contains("@otherborrowersecuritydetails"))
			 {
				 ArrayList arrsecownerRow=new ArrayList();
				 ArrayList arrsecownerlist=new ArrayList();
				 	
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_borrowerSec_details^"+strappno+"^"+"'g','o','p'"+"^ and APP_SEC_FACSNO= "+hidfacslno);
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{	 String strCbsACno=correctNull(rs2.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
  					  arrsecownerlist=new ArrayList();
  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
  					  if(residentType.equals("N"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
  					  }
  					  else
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
  					  }
  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
  					 // for minor check
  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
  					     if(rs3!=null){ rs3.close(); }
  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
  					    if(rs3.next()){
  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
  					    }
  					 if(arrappminor.equalsIgnoreCase("Y"))
  					 {
  					  	arrsecownerlist.add(guard_name);
  						arrsecownerlist.add("M/G");	
  						 }
  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("S/o");	
  					  }
  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
  						  arrsecownerlist.add("W/o");	
  					  } 
  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("D/o");	 
  					  }
  					 else 
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add(" ");	
  					  }  
  					  arrsecownerlist.add(Helper.calculateAGE(correctNull(rs2.getString("PERAPP_DOB"))));
  					  arrsecownerRow.add(arrsecownerlist);
					}
					
				 	 StringBuffer tempappList=new StringBuffer();	
				     ArrayList arrappRowdet=new ArrayList();
				     tempappList.append("");	
				     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
				     {
				     	for(int i=0;i<arrsecownerRow.size();i++)
				     	{
				     		 arrappRowdet=(ArrayList)arrsecownerRow.get(i);
				    		 if(arrsecownerRow.size()>1)
				    			 tempappList.append((i+1) +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				    		 else
				    			 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				     	}
				    }
				    template=template.replaceAll("@otherborrowersecuritydetails", tempappList.toString()); 
			 }
			 
			 if(template.contains("@Guarantor"))
			  {
				  if(rs2!=null){rs2.close();}
				  String guarantorappend="";
				  rs2=DBUtils.executeLAPSQuery("selcompromoter_det^"+strappno+"^"+strappno+"^"+hidfacslno+"^G");
				  while(rs2.next())
				  {
					  String guarantor=correctNull(rs2.getString("perapp_guarname"));
			     		String cbsid=correctNull(rs2.getString("PERAPP_CBSID"));
			     		String strapptype=correctNull(rs2.getString("app_type"));
			     	    compbean.updDocborrowerdetails(strappno, hidfacslno, docid, guarantor, cbsid,strStatus,strapptype);
					  guarantorappend=guarantor + "," +guarantorappend;
				  }
				  if(!guarantorappend.equals(""))
				  {  guarantorappend=guarantorappend.substring(0,guarantorappend.length()-1); }
				  
				  template=template.replaceAll("@Guarantor", guarantorappend); 
			  }
			
		}catch (Exception e) {
			log.info("Exception in getDocTemplateFacility1 ==="+e.getMessage());
			throw new EJBException("Exception in getDocTemplateFacility1 ==="+e.getMessage());
		}
		return template;
	}
	private HashMap getDOC953_data(HashMap hshValues)
	{
		String strAppno=null;
		String strQuery=null;	
		ResultSet rs=null,rs1=null,rs2=null,rs3=null,rs4=null;
		HashMap hshRecord=new HashMap();
		String template1="",template="",temp="",strappno="",strQuery1="",arrappminor="",guard_name="",strCbsACno="",tempTemplate="";
		ArrayList arrappList=new ArrayList();
		ArrayList arrappRow=new ArrayList(); 
		String[] strArrsno={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
		int itemp=0;
		strappno=Helper.correctNull((String) hshValues.get("strappno"));
		if(strappno.equals(""))
		{
			strappno=Helper.correctNull((String) hshValues.get("appno"));
		}
		String strfacsno="1";
    	String docid=Helper.correctNull((String)hshValues.get("doc_id"));
		String strStatus=Helper.correctNull((String)hshValues.get("strappstatus"));
		String strOrgCode=Helper.correctNull((String)hshValues.get("strOrgCode"));
		String cattype=Helper.correctNull((String)hshValues.get("sessionModuleType"));
		String hidfacslno=Helper.correctNull((String)hshValues.get("hidfacslno"));
		String strDisbBrCode="";
		boolean bflag=true;
		try
		{
			
			if(rs1!=null)
				rs1.close();
			if(cattype.equals("CORP")|| cattype.equals("AGR"))
				strQuery=SQLParser.getSqlQuery("sel_facLoanRepayType_Corp^"+strappno+"^"+hidfacslno);
			else
				strQuery=SQLParser.getSqlQuery("getappamt^"+strappno);
			rs1=DBUtils.executeQuery(strQuery);
			if(rs1.next())
			{
				strDisbBrCode=Helper.correctNull(rs1.getString("org_scode"));
			}
			
			tempTemplate=(String) hshValues.get("template");
			if(rs1!=null)
    			rs1.close();
    	   rs1=DBUtils.executeLAPSQuery("sel_propSecAttachedtoprop^"+strappno);
			while(rs1.next()) 
			{
				bflag=false;
				template=tempTemplate;
				 if(template.contains("@Securityowneraddress"))
				 {
					 ArrayList arrsecownerRow=new ArrayList();
					 ArrayList arrsecownerlist=new ArrayList();
					 	
					 	if(rs2!=null){ rs2.close(); }
					 	if(cattype.equals("CORP")|| cattype.equals("AGR"))
					 	{
					 		String desc="and APP_SEC_SECID="+correctNull(rs1.getString("APP_SEC_SECID"))+" and APP_SEC_FACSNO="+hidfacslno;
					 		strQuery=SQLParser.getSqlQuery("sel_secowner_addressdetails^"+strappno+"^"+desc);
					 	}
					 	else
					 		strQuery=SQLParser.getSqlQuery("sel_secowner_addressdetails^"+strappno+"^ and APP_SEC_SECID="+correctNull(rs1.getString("APP_SEC_SECID")));
					 		
					 	rs2=DBUtils.executeQuery(strQuery);
						if(rs2.next())
						{	 String strCbsACno1=correctNull(rs2.getString("PERAPP_CBSID"));
						  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
	  					  arrsecownerlist=new ArrayList();
	  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
	  					  if(residentType.equals("N"))
	  					  {
	  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
	  					  }
	  					  else
	  					  {
	  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
	      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
	  					  }
	  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
	  					// for minor check
	  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
	  					     if(rs3!=null){ rs3.close(); }
	  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
	  					    if(rs3.next()){
	  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
	  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
	  					    }
	  					 if(arrappminor.equalsIgnoreCase("Y"))
	  					 { 
	  							 arrsecownerlist.add(guard_name);
	  							arrsecownerlist.add("M/G");	
	  					 }
	  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
	  					  {
	  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
	  						  arrsecownerlist.add("S/o");	
	  					  }
	  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
	  					  {
	  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
	  						  arrsecownerlist.add("W/o");	
	  					  } 
	  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
	  					  {
	  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
	  						  arrsecownerlist.add("D/o");	 
	  					  }
	  					else 
	  					  {
	  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
	  						  arrsecownerlist.add(" ");	
	  					  }  
	  					  
	  					  String strAge=Helper.calculateAGE(correctNull(rs2.getString("dob")));
	  					  arrsecownerlist.add(Helper.correctNull(strAge));
	  					
							ArrayList nonindvRow=new ArrayList();
							  ArrayList temp1=new ArrayList();
							  ArrayList temp2=new ArrayList();
							  String perappid=correctNull(rs2.getString("perapp_id"));
							  String divisiontype="",div_name="",nonindiv="";;
								if(rs!=null){rs.close();}
								int dcount=0,spcount=0,pcount=0,tcount=0;
								temp="";
								itemp=0;
								String spconcernsubtype="",spsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^SP^198");
								while(rs.next())
								{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
									if(!spconcernsubtype.equals(""))
									{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ spsubtype="dif";	}
									}
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(spsubtype.equals("same"))
								{ 
								if(itemp==1)
									nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(spsubtype.equals("same"))
										{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");  
									  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									spcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String dconcernsubtype="";	String dsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^D^197");
								while(rs.next())
								{
									if(!dconcernsubtype.equals(""))
									{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ dsubtype="dif";	}
									}
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(dsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its ");	}
								rs.beforeFirst();
								while(rs.next())
								{
									dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(dsubtype.equals("same"))
										{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");  
									  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									dcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String ptconcernsubtype="",ptsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^PT^199");
								while(rs.next())
								{
									if(!ptconcernsubtype.equals(""))
									{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ ptsubtype="dif"; }
									}
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(ptsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(ptsubtype.equals("same"))
										{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");  
									  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									pcount++;
								}
								temp2.add(nonindvRow);
								nonindvRow=new ArrayList();
								itemp=0;
								String tconcernsubtype="",tsubtype="same";
								rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^T^200");
								while(rs.next())
								{
									if(!tconcernsubtype.equals(""))
									{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
										{ tsubtype="dif"; }
									}
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									itemp++;
								}
								if(itemp!=0)
									if(tsubtype.equals("same"))
								{if(itemp==1)
									nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
								else
								{ nonindvRow.add(" Represented by its "); }
								rs.beforeFirst();
								while(rs.next())
								{
									tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
									temp1=new ArrayList();
									if(itemp==1)
									{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{
										if(tsubtype.equals("same"))
										{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									}
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
									temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
									temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
									String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
									// for minor check
									 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
									  if(arrappminor.equalsIgnoreCase("Y"))
									  { temp1.add(guard_name);
									   temp1.add("M/G");	 }
									  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
									  {  temp1.add("S/o");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
									  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
									  { temp1.add("W/o");  
									  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
									  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
									  { temp1.add("D/o");
									  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									  else
									  {  temp1.add(" ");
									  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
									nonindvRow.add(temp1);
									tcount++;
								}
								temp2.add(nonindvRow);
								arrsecownerlist.add(temp2);
								arrsecownerlist.add(correctNull(rs2.getString("PERAPP_CONSTITUTIONNEW")));
	  					  
	  					  arrsecownerRow.add(arrsecownerlist);
						}
						
						  StringBuffer tempappList=new StringBuffer();	
						  tempappList.append("<span align='justify'>");
						  ArrayList arrappRowdet=new ArrayList();
						     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
						     {
						     	for(int i=0;i<arrsecownerRow.size();i++)
						     	{
						     		arrappRowdet=(ArrayList)arrsecownerRow.get(i);
								     String constition=(String) arrappRowdet.get(10);
								     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
	   
						     		if(arrsecownerRow.size()==1)
						     		{
								    	if(constition.equals("01"))
								    	{
								     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
								    	}
								    	else
								    	{
						     				if(arrIndvRow.size()>0)
										    {
									     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							     				for(int j=0;j<arrIndvRow.size();j++)
							     				{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		tempappList.append(""+temparr1.get(0)+"<br/>");
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
										    		}}
							     				}
							     				tempappList.append("");
										    }
						     				else
						     				{
									     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     				}
								    	}
						     		}
						     		else
						     		{
						     			if(constition.equals("01"))
						     			{
								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     			}
						     			else
						     			{
						     				if(arrIndvRow.size()>0)
										    {
									     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							     				for(int j=0;j<arrIndvRow.size();j++)
							     				{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j);
										    		if(temparr1.size()>0)
										    		{
										    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
										    		}}
							     				}
							     				tempappList.append("<br>");
										    }
						     				else
						     				{
									     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     				}
						     				
						     			}
						     		}
						     	}
						     }
						     tempappList.append("</span>");
						     template=template.replaceAll("@Securityowneraddress", tempappList.toString()); 
				 }
				 
				 if(template.contains("@titledeeddepositbranch") || template.contains("@titledeeddepositdate"))
				 {
						String depositbranch="",depositdate="";
					 	int depositcount=0;
					 	if(rs!=null){ rs.close(); }
					 	if(cattype.equals("CORP")|| cattype.equals("AGR"))
					 	{
					 		String desc="and APP_SEC_SECID="+correctNull(rs1.getString("APP_SEC_SECID"))+" and APP_SEC_FACSNO="+hidfacslno;
					 		strQuery=SQLParser.getSqlQuery("sel_propsecattached_titledeeds^"+strappno+"^"+desc);
					 	}
					 	else
					 		strQuery=SQLParser.getSqlQuery("sel_propsecattached_titledeeds^"+strappno+"^ and APP_SEC_SECID="+correctNull(rs1.getString("APP_SEC_SECID")));
						
					 	rs=DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							if(depositcount!=0)
							{
								depositbranch=depositbranch.concat(", ");
								depositdate=depositdate.concat(", ");
							}
							depositbranch=depositbranch+Helper.correctNull(rs.getString("depositbranch"))+" - "+Helper.correctNull(rs.getString("ORG_ZIP"));
							depositdate=depositdate+Helper.convertDatetowords(Helper.correctNull(rs.getString("SEC_DEPOSIT_DATE")));

							depositcount++;
						}
						 template=template.replaceAll("@titledeeddepositbranch", depositbranch); 
						 template=template.replaceAll("@titledeeddepositdate", depositdate); 
				 }
					
			 	if(rs!=null){rs.close();}
				String inwardBranchCity="",inwardCreatedDate="",Branchname="";
				rs=DBUtils.executeLAPSQuery("selworkflow^"+strappno);		 
				if(rs.next())
				{
					inwardBranchCity=Helper.correctNull(rs.getString("ORG_CITY"));
					inwardCreatedDate=Helper.correctNull(rs.getString("INWARD_CREATEDON"));
					//Branchname= Helper.correctNull(rs.getString("org_name"));
				}
				template=template.replaceAll("@inwarddate", inwardCreatedDate); 
				//template=template.replaceAll("@BranchCity", inwardBranchCity); 
				//template=template.replaceAll("@Branchname", Branchname);
				
				// @Branchname
				 String doc_branchcode="";
				if(cattype.equals("CORP")|| cattype.equals("AGR")){
					if(rs!=null){rs.close();}
					if(strStatus.equalsIgnoreCase("pa")){
		 				rs=DBUtils.executeLAPSQuery("sel_facLoanRepayType_Corp^"+strappno+"^"+hidfacslno);		 
		 				if(rs.next())
		 				{
		 					doc_branchcode=correctNull(rs.getString("org_scode"));
		 				}
					}
					else if(strStatus.equalsIgnoreCase("op")){
	      				rs=DBUtils.executeLAPSQuery("sel_cbsdetails^"+strappno+"^"+hidfacslno);		 
	      				if(rs.next())
	      				{
	      					doc_branchcode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
	      				}
					}
				}
				else{
					if(rs!=null){rs.close();}
					if(strStatus.equalsIgnoreCase("pa")){
						rs=DBUtils.executeLAPSQuery("sel_doc_branchdet^"+strappno);		 
						if(rs.next())
						{
							 doc_branchcode=correctNull(rs.getString("loan_doc_branchcode"));
						}
					}
					else if(strStatus.equalsIgnoreCase("op")){
	      				rs=DBUtils.executeLAPSQuery("sel_cbsdetails^"+strappno+"^1");		 
	      				if(rs.next())
	      				{
	      					doc_branchcode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
	      				}
					}
						
				}
				
 			// @Branchname
				 String strBranch="",strBranchCity="";
				 if(rs2!=null){ rs2.close(); }
	 				rs2=DBUtils.executeLAPSQuery("sel_doc_branchName^"+doc_branchcode);
	 				if(rs2.next()){
	 						strBranch=correctNull(rs2.getString("ORG_NAME"));
		 					if(rs!=null){rs.close();}
							rs=DBUtils.executeLAPSQuery("sel_cityname^"+correctNull(rs2.getString("ORG_CITY")));		 
							if(rs.next())
							{
								strBranchCity=correctNull(rs.getString("city_name"));
							}
	 					
	 				}
	 				template=template.replaceAll("@Branchname", strBranch);
	 				template=template.replaceAll("@BranchCity", strBranchCity);
				
				 //end
 				
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_organisationdetails^"+strOrgCode);		 
				if(rs.next())
				{
					hshRecord.put("org_name",Helper.correctNull(rs.getString("OrganisationName")));
					hshRecord.put("OrganisationAddress1",Helper.correctNull(rs.getString("OrganisationAddress1")));
					hshRecord.put("OrganisationAddress2",Helper.correctNull(rs.getString("OrganisationAddress2")));
					hshRecord.put("OrganisationCity",Helper.correctNull(rs.getString("OrganisationCity")));
					hshRecord.put("Organisationzip",Helper.correctNull(rs.getString("Organisationzip")));
					hshRecord.put("OrganisationState",Helper.correctNull(rs.getString("OrganisationState")));
					

					hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("OrganisationName")));
					hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("OrganisationCity")));
					hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("Organisationzip")));
				}
				
				if(!strDisbBrCode.equalsIgnoreCase(""))
				{
					if(rs!=null){rs.close();}
					rs=DBUtils.executeLAPSQuery("sel_organisationname^"+strDisbBrCode);		 
					if(rs.next())
					{
						hshRecord.put("strDisbBrname",Helper.correctNull(rs.getString("org_name")));
						hshRecord.put("strDisbBrCity",Helper.correctNull(rs.getString("city_name")));
						hshRecord.put("strDisbBrzip",Helper.correctNull(rs.getString("org_zip")));
					}
				}
				
				
				if(template.contains("@branchDetails"))
				{
					String tempbranchdetail=Helper.correctNull((String)hshRecord.get("strDisbBrname"))+", "+Helper.correctNull((String)hshRecord.get("strDisbBrCity"))+"-"+Helper.correctNull((String)hshRecord.get("strDisbBrzip"));
					template=template.replaceAll("@branchDetails", tempbranchdetail); 
				}
				if(template.contains("@Typeofloan"))
				{
					if(cattype.equals("CORP") || cattype.equals("AGR"))
					{
						  if(rs2!=null){ rs2.close(); }
						  rs2 = DBUtils.executeLAPSQuery("sel_faclityType_subtype^"+ strappno+"^"+hidfacslno);
						  if(rs2.next())
						  {
							  template=template.replaceAll("@Typeofloan", correctNull(rs2.getString("FACILITY_CATDESC"))); 
						  }
					}
					else
					{
						if(rs2!=null){ rs2.close(); }
		   				String str_prdloantype="";
						  rs2 = DBUtils.executeLAPSQuery("getprddesc^" + strappno);
						  if(rs2.next())
						  {
							  str_prdloantype=correctNull(rs2.getString("PRD_LOANTYPE"));
						  }
						  if(template.contains("@Typeofloan"))
						  {  
							 if(str_prdloantype.equals("TL"))
			  					  template=template.replaceAll("@Typeofloan", "Term Loan"); 
							 else  if(str_prdloantype.equals("DL"))
			  					  template=template.replaceAll("@Typeofloan", "Demand Loan"); 
							 else  if(str_prdloantype.equals("OD"))
			  					  template=template.replaceAll("@Typeofloan", "Over Draft"); 
						  }
					}
				}
				
				if(template.contains("@oldsanctions"))
				{
					StringBuffer strbfrTemp=new StringBuffer();
					if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_oldappsanc_secid^"+correctNull(rs1.getString("APP_SEC_SECID"))+"^"+strappno+"^"+correctNull(rs1.getString("APP_SEC_SECID"))+"^"+strappno);
					rs2=DBUtils.executeQuery(strQuery);
					int ccount=0;
					while(rs2.next())
					{
						if(ccount>0)
						strbfrTemp.append(", "+Helper.correctNull(rs2.getString("CBS_ACCOUNTNO"))+" facility sanctioned as per Resolution No. "+Helper.correctNull(rs2.getString("FINACLESANCREFNO"))+" dated "+Helper.correctNull(rs2.getString("APP_PROCESSDATE")));
						else
							strbfrTemp.append(Helper.correctNull(rs2.getString("CBS_ACCOUNTNO"))+" facility sanctioned as per Resolution No. "+Helper.correctNull(rs2.getString("FINACLESANCREFNO"))+" dated "+Helper.correctNull(rs2.getString("APP_PROCESSDATE")));
						ccount++;
					}
					  template=template.replaceAll("@oldsanctions", strbfrTemp.toString()); 
				}
				if(template.contains("@Sancreference")|| template.contains("@Sancdate")  )
				{
					if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_currentappsanc_secid^"+correctNull(rs1.getString("APP_SEC_SECID"))+"^"+strappno);
					rs2=DBUtils.executeQuery(strQuery);
					if(rs2.next())
					{
						String strSancAuth="";
						if(cattype.equals("CORP")|| cattype.equals("AGR"))
						{
							 if(rs!=null){ rs.close(); }
			    			  String SancDate_AuthDate="",SancDate_Auth="";
							  rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^" + strappno);
							  if(rs.next())
							  {
								  SancDate_Auth=correctNull(rs.getString("com_sancauthority"));
								  if(SancDate_Auth.equalsIgnoreCase("14")|| SancDate_Auth.equalsIgnoreCase("15")||SancDate_Auth.equalsIgnoreCase("16"))
								  {
								  	  template=template.replaceAll("@Sancdate", correctNull(rs.getString("COM_SANREF_SANCDATE"))); 
								  }
							  }
						}
						else
						{
							if(rs!=null){ rs.close(); }
							  rs = DBUtils.executeLAPSQuery("sel_date^" + strappno);
							  if(rs.next())
							  {
								  strSancAuth=correctNull(rs.getString("appraisal_sancauth"));
								  if(strSancAuth.equalsIgnoreCase("14")|| strSancAuth.equalsIgnoreCase("15")||strSancAuth.equalsIgnoreCase("16"))
								  {
							  	 	 template=template.replaceAll("@Sancdate", correctNull(rs.getString("appref_sancdate"))); 
								  }
							  }
						}
						template=template.replaceAll("@Sancreference", correctNull(rs2.getString("FINACLESANCREFNO"))); 
						template=template.replaceAll("@Sancdate", correctNull(rs2.getString("APP_PROCESSDATE"))); 
					}
					else
					{
						template=template.replaceAll("@Sancreference", ""); 
						template=template.replaceAll("@Sancdate", ""); 
					}
					
				}
				//
				 int tempcount=0;
				 if(template.contains("@hysecurityowneraddress") || template.contains("@hysecurityownerdetails"))
					 tempcount++;
				 if(template.contains("@emsecurityowneraddress") || template.contains("@emsecurityownerdetails"))
					 tempcount++;
				 if(template.contains("@assecurityowneraddress") || template.contains("@assecurityownerdetails"))
					 tempcount++;
				 if(template.contains("@plsecurityowneraddress") || template.contains("@plsecurityownerdetails"))
					 tempcount++; 
				 if(template.contains("@rmsecurityowneraddress") || template.contains("@rmsecurityownerdetails"))
					 tempcount++;
				 if(template.contains("@trsecurityowneraddress") || template.contains("@trsecurityownerdetails"))
					 tempcount++;
				 if(template.contains("@clsecurityowneraddress") || template.contains("@clsecurityownerdetails"))
					 tempcount++;
				 
				 if(tempcount>0)
				 {
					 String strtempsec="";
					 String naturechargedesc="";
					 String strtempownerdet="";
					 
					 for(int j=0;j<tempcount;j++)
					 {
						 if(template.contains("@rmsecurityowneraddress") || template.contains("@rmsecurityownerdetails"))
							 {
								 strtempsec="@rmsecurityowneraddress";	 naturechargedesc="6";  strtempownerdet="@rmsecurityownerdetails";
							 }
							 if(template.contains("@emsecurityowneraddress") || template.contains("@emsecurityownerdetails"))
							 {
								 strtempsec="@emsecurityowneraddress";	 naturechargedesc="5";  strtempownerdet="@emsecurityownerdetails";
							 }
							 if(template.contains("@trsecurityowneraddress") || template.contains("@trsecurityownerdetails"))
							 {
								 strtempsec="@trsecurityowneraddress";	 naturechargedesc="4";  strtempownerdet="@trsecurityownerdetails";
							 }
							 if(template.contains("@assecurityowneraddress") || template.contains("@assecurityownerdetails"))
							 {
								 strtempsec="@assecurityowneraddress";	 naturechargedesc="3";  strtempownerdet="@assecurityownerdetails";
							 }
							 if(template.contains("@plsecurityowneraddress") || template.contains("@plsecurityownerdetails"))
							 {
								 strtempsec="@plsecurityowneraddress";	 naturechargedesc="2";  strtempownerdet="@plsecurityownerdetails";
							 }
							 if(template.contains("@hysecurityowneraddress") || template.contains("@hysecurityownerdetails"))
							 {
								 strtempsec="@hysecurityowneraddress";	 naturechargedesc="1";  strtempownerdet="@hysecurityownerdetails";
							 }
							 if(template.contains("@clsecurityowneraddress") || template.contains("@clsecurityownerdetails"))
							 {
								 strtempsec="@clsecurityowneraddress";	 naturechargedesc="1111";  strtempownerdet="@clsecurityownerdetails";
							 }
							 
						    if(rs3!=null){rs3.close();}
							if(naturechargedesc.equals("1111"))
								 rs3=DBUtils.executeLAPSQuery("sel_secOwneraddress_naturecharge_clean1^"+strappno+"^"+hidfacslno+"^"+correctNull(rs1.getString("APP_SEC_SECID")));
							else
								 rs3=DBUtils.executeLAPSQuery("sel_secOwneraddress_naturecharge1^"+strappno+"^"+naturechargedesc+"^"+hidfacslno+"^"+correctNull(rs1.getString("APP_SEC_SECID")));
								arrappRow=new ArrayList();
								while(rs3.next())
								{		
									strCbsACno=correctNull(rs3.getString("PERAPP_CBSID"));
									String residentType=correctNull(rs3.getString("INDINFO_RESIDENT_STATUS"));
									arrappList=new ArrayList();
									arrappList.add(correctNull(rs3.getString("FULLNAME"))); //0
								 if(residentType.equals("N"))
								 {
									  arrappList.add(correctNull(rs3.getString("CON_COMADDR1"))); //1
									  arrappList.add(correctNull(rs3.getString("CON_COMADDR2")));//2
									  arrappList.add(correctNull(rs3.getString("CON_COMCITYNAME")));//3
									  arrappList.add(correctNull(rs3.getString("CON_COMZIP")));//4
									  arrappList.add(correctNull(rs3.getString("CON_COMSTATENAME")));//5
								 }
								 else
								 {
									  arrappList.add(correctNull(rs3.getString("CON_PERMADDR1"))); //1
									  arrappList.add(correctNull(rs3.getString("CON_PERMADDR2")));//2
									  arrappList.add(correctNull(rs3.getString("CON_PERMCITY")));//3
									  arrappList.add(correctNull(rs3.getString("CON_PERMZIP")));//4
									  arrappList.add(correctNull(rs3.getString("CON_PERMSTATE")));//5
								 }
								  String arrappchilddesp=correctNull(rs3.getString("PERAPP_SEX"));
								// for minor check
								  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								      if(rs!=null){ rs.close(); }
								  rs=DBUtils.executeQueryCBSConnection(strQuery1);
								     if(rs.next()){
								       arrappminor= correctNull(rs.getString("CUST_MINOR_FLG"));
								       guard_name=correctNull(rs.getString("minor_guard_name"));
								     }
								 if(arrappminor.equalsIgnoreCase("Y"))
								  { 
								  	arrappList.add(guard_name);
								  	arrappList.add("M/G");	 
								  	}
								  else if(arrappchilddesp.equalsIgnoreCase("M"))
								  {
									  arrappList.add(correctNull(rs3.getString("PERAPP_FATNAME")));//6
									  arrappList.add("S/o");	
								  }
								  else if(arrappchilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs3.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  {
									  arrappList.add(correctNull(rs3.getString("INDINFO_SPOUSE_NAME")));//6 
									  arrappList.add("W/o");	
								  } 
								  else if(arrappchilddesp.equalsIgnoreCase("F"))
								  {
									  arrappList.add(correctNull(rs3.getString("PERAPP_FATNAME")));//6
									  arrappList.add("D/o");	
								  } 
								  else 
								  {
									  arrappList.add(correctNull(rs3.getString("PERAPP_FATNAME")));//6
									  arrappList.add(" ");	
								  }  
								  String strAge=Helper.calculateAGE(correctNull(rs3.getString("DOB")));
								  arrappList.add(Helper.correctNull(strAge));
								 
									ArrayList nonindvRow=new ArrayList();
									  ArrayList temp1=new ArrayList();
									  ArrayList temp2=new ArrayList();
									  String perappid=correctNull(rs3.getString("perapp_id"));
									  String divisiontype="",div_name="",nonindiv="";;
										if(rs!=null){rs.close();}
										int dcount=0,spcount=0,pcount=0,tcount=0;
										temp="";
										itemp=0;
										String spconcernsubtype="",spsubtype="same";
										rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^SP^198");
										while(rs.next())
										{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
											if(!spconcernsubtype.equals(""))
											{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
												{ spsubtype="dif";	}
											}
											spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											itemp++;
										}
										if(itemp!=0)
											if(spsubtype.equals("same"))
										{ 
												if(itemp==1)
												nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
												else
												nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");
										}
										else
										{ nonindvRow.add(" Represented by its "); }
										rs.beforeFirst();
										while(rs.next())
										{
											spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											temp1=new ArrayList();
											if(itemp==1)
											{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{
												if(spsubtype.equals("same"))
												{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
												else
												{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											}
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
											temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
											String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
											// for minor check
											 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
											     if(rs4!=null){ rs4.close(); }
											 rs4=DBUtils.executeQueryCBSConnection(strQuery1);
											    if(rs4.next()){
											      arrappminor= correctNull(rs4.getString("CUST_MINOR_FLG"));
											      guard_name=correctNull(rs4.getString("minor_guard_name"));
											    }
											 if(arrappminor.equalsIgnoreCase("Y"))
											  { temp1.add(guard_name);
											   temp1.add("M/G");	 }
											  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
											  {  temp1.add("S/o");
											  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
											  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
											  { temp1.add("W/o");  
											  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
											  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
											  { temp1.add("D/o");
											  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											  else
											  {  temp1.add(" ");
											  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											nonindvRow.add(temp1);
											spcount++;
										}
										temp2.add(nonindvRow);
										nonindvRow=new ArrayList();
										itemp=0;
										String dconcernsubtype="";	String dsubtype="same";
										rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^D^197");
										while(rs.next())
										{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
											if(!dconcernsubtype.equals(""))
											{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
												{ dsubtype="dif";	}
											}
											dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											itemp++;
										}
										if(itemp!=0)
											if(dsubtype.equals("same"))
										{if(itemp==1)
											nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
										else
										nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
										else
										{ nonindvRow.add(" Represented by its ");	}
										rs.beforeFirst();
										while(rs.next())
										{
											dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											temp1=new ArrayList();
											if(itemp==1)
											{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{
												if(dsubtype.equals("same"))
												{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
												else
												{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											}
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
											temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
											String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
											// for minor check
											strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs4!=null){ rs4.close(); }
										 rs4=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs4.next()){
										      arrappminor= correctNull(rs4.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs4.getString("minor_guard_name"));
										    }
											  if(arrappminor.equalsIgnoreCase("Y"))
											  { temp1.add(guard_name);
											   temp1.add("M/G");	 }
											  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
											  {  temp1.add("S/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
											  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
											  { temp1.add("W/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
											  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
											  { temp1.add("D/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											  else
											  {  temp1.add(" ");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											nonindvRow.add(temp1);
											dcount++;
										}
										temp2.add(nonindvRow);
										nonindvRow=new ArrayList();
										itemp=0;
										String ptconcernsubtype="",ptsubtype="same";
										rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^PT^199");
										while(rs.next())
										{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
											if(!ptconcernsubtype.equals(""))
											{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
												{ ptsubtype="dif"; }
											}
											ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											itemp++;
										}
										if(itemp!=0)
											if(ptsubtype.equals("same"))
										{if(itemp==1)
											nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
										else
										nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
										else
										{ nonindvRow.add(" Represented by its "); }
										rs.beforeFirst();
										while(rs.next())
										{
											ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											temp1=new ArrayList();
											if(itemp==1)
											{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{
												if(ptsubtype.equals("same"))
												{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
												else
												{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											}
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
											temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
											String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
											// for minor check
											strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs4!=null){ rs4.close(); }
										 rs4=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs4.next()){
										      arrappminor= correctNull(rs4.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs4.getString("minor_guard_name"));
										    }
											 if(arrappminor.equalsIgnoreCase("Y"))
											  { temp1.add(guard_name);
											   temp1.add("M/G");	 }
											  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
											  {  temp1.add("S/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
											  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
											  { temp1.add("W/o");  
											  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
											  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
											  { temp1.add("D/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											  else 
											  {  temp1.add(" ");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											nonindvRow.add(temp1);
											pcount++;
										}
										temp2.add(nonindvRow);
										nonindvRow=new ArrayList();
										itemp=0;
										String tconcernsubtype="",tsubtype="same";
										rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^T^200");
										while(rs.next())
										{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
											if(!tconcernsubtype.equals(""))
											{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
												{ tsubtype="dif"; }
											}
											tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											itemp++;
										}
										if(itemp!=0)
											if(tsubtype.equals("same"))
										{if(itemp==1)
											nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
										else
										nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
										else
										{ nonindvRow.add(" Represented by its "); }
										rs.beforeFirst();
										while(rs.next())
										{
											tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
											temp1=new ArrayList();
											if(itemp==1)
											{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{
												if(tsubtype.equals("same"))
												{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
												else
												{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											}
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
											temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
											temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
											String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
											// for minor check
											strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs4!=null){ rs4.close(); }
										 rs4=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs4.next()){
										      arrappminor= correctNull(rs4.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs4.getString("minor_guard_name"));
										    }
											  if(arrappminor.equalsIgnoreCase("Y"))
											  { temp1.add(guard_name);
											   temp1.add("M/G");	 }
											  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
											  {  temp1.add("S/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
											  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
											  { temp1.add("W/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
											  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
											  { temp1.add("D/o");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											  else
											  {  temp1.add(" ");
											  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
											nonindvRow.add(temp1);
											tcount++;
										}
										temp2.add(nonindvRow);
										arrappList.add(temp2);
										arrappList.add(correctNull(rs3.getString("PERAPP_CONSTITUTIONNEW")));
										arrappList.add(correctNull(rs3.getString("PERAPP_CBSID")));
										arrappList.add(correctNull(rs3.getString("app_type")));
								       arrappRow.add(arrappList);
							  }
							 // hshRecord.put("arrappList",arrappRow);
						
						
							 if(template.contains(strtempsec))
							 {
		    					  StringBuffer tempappList=new StringBuffer();	
		    					  StringBuffer tempappList1=new StringBuffer();	
		    					  tempappList.append("<span align='justify'>");
		    					  ArrayList arrappRowdet=new ArrayList();
		    					     if(arrappRow.size()>0 && arrappRow!=null)
		    					     {
		    					     	for(int i=0;i<arrappRow.size();i++)
		    					     	{
		    					     		arrappRowdet=(ArrayList)arrappRow.get(i);
		    							     String constition=(String) arrappRowdet.get(10);
		    							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
		    							     
		    					     		if(arrappRow.size()==1)
		    					     		{
		    							    	if(constition.equals("01"))
		    							    	{
		    							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
		    							    	}
		    							    	else
		    							    	{
		    					     				if(arrIndvRow.size()>0)
		    									    {
		    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
		    						     				for(int j1=0;j1<arrIndvRow.size();j1++)
		    						     				{
		    									    		ArrayList temparr=new ArrayList();
		    									    		ArrayList temparr1=new ArrayList();
		    									    		temparr1=(ArrayList) arrIndvRow.get(j1);
		    									    		if(temparr1.size()>0)
		    									    		{
		    									    		tempappList.append(""+temparr1.get(0)+"<br/>");
		    									    		tempappList1.append(temparr1.get(0));
		    									    		for(int k=1;k < temparr1.size();k++)
		    									    		{
		    									    			temparr=(ArrayList) temparr1.get(k);
		    												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
		    												    tempappList1.append(temparr.get(0)+" ");
		    									    		}}
		    						     				}
		    						     				tempappList.append("");
		    									    }
		    					     				else
		    					     				{
		    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
		    					     				}
		    							    	}
		    					     		}
		    					     		else
		    					     		{
		    					     			if(constition.equals("01"))
		    					     			{
		    							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
		    					     			}
		    					     			else
		    					     			{
		    					     				if(arrIndvRow.size()>0)
		    									    {
		    								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
		    						     				for(int j1=0;j1<arrIndvRow.size();j1++)
		    						     				{
		    									    		ArrayList temparr=new ArrayList();
		    									    		ArrayList temparr1=new ArrayList();
		    									    		temparr1=(ArrayList) arrIndvRow.get(j1);
		    									    		if(temparr1.size()>0)
		    									    		{
		    									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
		    									    		tempappList1.append(temparr1.get(0));
		    									    		for(int k=1;k < temparr1.size();k++)
		    									    		{
		    									    			temparr=(ArrayList) temparr1.get(k);
		    												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
		    												    tempappList1.append(temparr.get(0)+" ");
		    									    		}}
		    						     				}
		    						     				tempappList.append("<br>");
		    									    }
		    					     				else
		    					     				{
		    								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
		    					     				}
		    					     				
		    					     			}
		    					     		}
		    					     		String  borrowername="";
		   							     if(!tempappList1.toString().equalsIgnoreCase("")){
		   							       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
		   							     }else{
		   								   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
		   							     }
		    						     	 String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
		    						     	 String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
		    						     	 ComProposalBean compbean = new ComProposalBean();
		    						     	   compbean.updDocborrowerdetails(strappno, hidfacslno, docid, borrowername, cbsid,strStatus,strapptype);
		    					     	}
		    					     }
		    					     tempappList.append("</span>");
		    					     template=template.replaceAll(strtempsec, tempappList.toString()); 
							 }
							 int appcoappdetailslno=1;
							 if(template.contains(strtempownerdet))
							 {
							 	StringBuffer tempappList=new StringBuffer();	
							 	 StringBuffer tempappList1=new StringBuffer();	
							     ArrayList arrappRowdet=new ArrayList();
							     tempappList.append("");	
							     if(arrappRow.size()>0 && arrappRow!=null)
							     {
							     	for(int i=0;i<arrappRow.size();i++)
							     	{
							     		 arrappRowdet=(ArrayList)arrappRow.get(i);
									     String constition=(String) arrappRowdet.get(10);
									     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
									     
									     if((arrappRow.size()==1))
									     {
									    	 if(constition.equals("01"))
											  {
									    		 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											  }
									    	 else
									    	 {
											    	if(arrIndvRow.size()>0)
											    	{
											    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											    	for(int j1=0;j1<arrIndvRow.size();j1++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j1);
											    		if(temparr1.size()>0)
											    		{
											    		tempappList.append(temparr1.get(0));
    										     		tempappList1.append(temparr1.get(0));

											    		for(int k=1;k < temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
	    										     		tempappList1.append(temparr.get(0)+" ");

											    		}}
											    	}
											    	}
											    	else
											    	{
											    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											    	}
									    	 }
									     }
									     else
									     {
										      if(constition.equals("01"))
											  {
												 tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											  }
										      else
										      {
											    	if(arrIndvRow.size()>0)
											    	{
														tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
												    	for(int j1=0;j1<arrIndvRow.size();j1++)
												    	{
												    		ArrayList temparr=new ArrayList();
												    		ArrayList temparr1=new ArrayList();
												    		temparr1=(ArrayList) arrIndvRow.get(j1);
												    		if(temparr1.size()>0)
												    		{
												    		tempappList.append(temparr1.get(0));
	    										     		tempappList1.append(temparr1.get(0));

												    		for(int k=1;k <temparr1.size();k++)
												    		{
												    			temparr=(ArrayList) temparr1.get(k);
															    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
		    										     		tempappList1.append(temparr.get(0)+" ");
												    		}
												    		}
												    	}
											    	}
											    	else
											    	{
														  tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											    	}
										      }
										      appcoappdetailslno++;
									     }
									     tempappList.append("<br><br>");
									     String  borrowername="";
		   							     if(!tempappList1.toString().equalsIgnoreCase("")){
		   							       borrowername=Helper.correctNull((String) arrappRowdet.get(0))+","+tempappList1.toString();
		   							     }else{
		   								   borrowername=Helper.correctNull((String) arrappRowdet.get(0));
		   							     }
				   					      String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
				   					      String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
				   					      ComProposalBean  compbean= new ComProposalBean();
				   					      compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
							     	}
							    }
							     template=template.replaceAll(strtempownerdet, tempappList.toString()); 
							 }
						}
				 }
				
				
				template1+=template+"<br style='page-break-before:always'>";
			}
			if(template1.equals(""))
			{
				template1=tempTemplate;
			}
			if(bflag)
				template1="";
			hshRecord.put("template1", template1);
		}
		catch(Exception e)
		{
		throw new EJBException(e.getMessage());
		}
		finally
		{
		try
			{
			if(rs!=null)
				{
				rs.close();
				}				
			}
		catch(Exception e1)
			{
			throw new EJBException(e1.getMessage());
			}
		}
		
		return hshRecord;
		
	}
	
	public HashMap getData(HashMap hshValues)
		{
		String strAppno=null;
		String strQuery=null,strQuery1=null;	
		ResultSet rs=null,rs1=null;
		HashMap hshRecord=new HashMap();
		ArrayList arrIJSPName=new ArrayList();
		ArrayList arrIDocCode=new ArrayList();
		ArrayList arrIDocDesc=new ArrayList();
		ArrayList arrIDocStatus=new ArrayList();
		ArrayList arrIDocDate=new ArrayList();
		ArrayList arrIDocScan=new ArrayList();
		ArrayList arrIRenDate=new ArrayList();
		ArrayList arrIDelDoc=new ArrayList();
		ArrayList arrIRemarks=new ArrayList();
		ArrayList arrIPrdDocDate = new ArrayList();
		ArrayList arrILDOC=new ArrayList();
		ArrayList arrASubType=new ArrayList();
		ArrayList arrAJSPName=new ArrayList();
		ArrayList arrADocCode=new ArrayList();
		ArrayList arrADocDesc=new ArrayList();
		ArrayList arrADocStatus=new ArrayList();
		ArrayList arrADocDate=new ArrayList();
		ArrayList arrADocScan=new ArrayList();
		ArrayList arrARenDate=new ArrayList();
		ArrayList arrADelDoc=new ArrayList();
		ArrayList arrARemarks=new ArrayList();
		ArrayList arrAPrdDocDate = new ArrayList();
		ArrayList arrTotPages = new ArrayList();
		ArrayList arrDocAttach = new ArrayList();
		ArrayList arrDocPrintCount=new ArrayList();
		String strEditlockflag="";
		String strInsFlag="update";
		String strHidAppDoc = correctNull((String)hshValues.get("hidAppDoc"));
		
		try
		{
			String strsessionModuleType = correctNull((String)hshValues.get("sessionModuleType"));
			if(strsessionModuleType.equals(""))
			{
				  strsessionModuleType = correctNull((String)hshValues.get("cattype"));
			}
    		String hidfacslno=Helper.correctInt((String)hshValues.get("sel_facilitysno"));

			strAppno=(String)hshValues.get("appno");
			strEditlockflag=(String)hshValues.get("hideditflag");
			
			if(strHidAppDoc.equals("A"))
			{
				strQuery=SQLParser.getSqlQuery("selprddoc^A^"+strAppno+"^"+strAppno);
				
				if(rs!=null)
					rs.close();
				
				rs=DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					if(!Helper.correctNull(rs.getString("doc_docsubtype")).equalsIgnoreCase("post"))
					{
						arrADocCode.add(rs.getString(2));
						arrADocDesc.add(rs.getString(3));
				
						String prdmandate=Helper.correctNull(rs.getString("prd_mandatory"));
						
							if(prdmandate.equals("Y")){
								arrADocStatus.add("Y");
							}
							else{
								arrADocStatus.add(correctNull((String)rs.getString(4)));
								}
						
						
						arrADocDate.add(correctNull(rs.getString(5)));
						arrTotPages.add(correctNull(rs.getString(6)));
						int intpage=rs.getInt(6);
						if(intpage>0)
						{
							arrADocScan.add("Yes");
						}
						else
						{
							arrADocScan.add("No");
						}
						arrARenDate.add(correctNull(rs.getString(7)));
						arrADelDoc.add("");
						arrARemarks.add(correctNull(rs.getString(9)));
						arrAPrdDocDate.add(correctNull(rs.getString(10)));
						arrAJSPName.add(correctNull(rs.getString("doc_jspname")));
						
						if(rs1!=null)
							rs1.close();
						rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^A^"+Helper.correctNull(rs.getString("doc_jspname")));
						if(rs1.next())
							arrDocAttach.add(Helper.correctNull(rs1.getString("cnt")));
						else
							arrDocAttach.add("0");
						
						arrASubType.add(correctNull(rs.getString("doc_docsubtype")));
					}
				}
				strInsFlag="insert";
				strQuery=SQLParser.getSqlQuery("commdocumentsel1^"+strAppno+"^A");
				if(rs!=null)
				rs.close();	
				rs=DBUtils.executeQuery(strQuery);
				
				while(rs.next())
				{
					if(!Helper.correctNull(rs.getString("doc_docsubtype")).equalsIgnoreCase("post"))
					{
						arrAJSPName.add(rs.getString(1));
						arrADocCode.add(rs.getString(2));
						arrADocDesc.add(rs.getString(3));
						arrADocStatus.add(rs.getString(7));
						arrADocDate.add("");
						
						arrADocScan.add("No");
						arrARenDate.add("");
						arrADelDoc.add("A");
						arrARemarks.add(Helper.correctNull(rs.getString("apdoc_remarks")));
						arrAPrdDocDate.add("");
						arrTotPages.add("");
						if(rs1!=null)
							rs1.close();
						rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^A^"+Helper.correctNull(rs.getString(1)));
						if(rs1.next())
							arrDocAttach.add(Helper.correctNull(rs1.getString("cnt")));
						else
							arrDocAttach.add("0");
						arrASubType.add(correctNull(rs.getString("doc_docsubtype")));
					}
				}
			}
			
			if(strHidAppDoc.equals("I"))
			{
				if(strsessionModuleType.equals("CORP") || strsessionModuleType.equals("AGR"))
				{
					strQuery=SQLParser.getSqlQuery("selprddoc_fac^I^"+strAppno+"^"+strAppno+"^"+hidfacslno);
					
				}
				else
				{
					strQuery=SQLParser.getSqlQuery("selprddoc^I^"+strAppno+"^"+strAppno);
				}
				
				if(rs!=null)
					rs.close();
				
				rs=DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					arrIDocCode.add(rs.getString(2));
					arrIDocDesc.add(rs.getString(3));
					String strDocStatus=correctNull((String)rs.getString(4));
					arrIDocStatus.add(strDocStatus);

					arrIDocDate.add(correctNull((String)rs.getString(5)));
					
					int intpage=rs.getInt(6);
					if(intpage>0)
					{
						arrIDocScan.add("Yes");
					}
					else
					{
						arrIDocScan.add("No");
					}
					arrIRenDate.add(correctNull(rs.getString(7)));
					arrIDelDoc.add("");
					arrIRemarks.add(correctNull(rs.getString(9)));
					arrILDOC.add(correctNull(""));
					arrIPrdDocDate.add(correctNull(rs.getString(10)));
					arrIJSPName.add(correctNull(rs.getString("doc_jspname")));
//					arrISubType.add(correctNull(rs.getString("doc_docsubtype")));
					if(rs1!=null)
						rs1.close();
					rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^I^"+Helper.correctNull(rs.getString("doc_jspname")));
					if(rs1.next())
						arrDocAttach.add(Helper.correctNull(rs1.getString("cnt")));
					else
						arrDocAttach.add("0");

					if(rs1!=null)
						rs1.close();
					if(strsessionModuleType.equals("CORP") || strsessionModuleType.equals("AGR"))
						rs1=DBUtils.executeLAPSQuery("sel_docPrintHistCount_facility^"+strAppno+"^DOC_"+Helper.correctNull(rs.getString("doc_jspname"))+"^"+hidfacslno);
					else
						rs1=DBUtils.executeLAPSQuery("sel_docPrintHistCount^"+strAppno+"^DOC_"+Helper.correctNull(rs.getString("doc_jspname")));
					if(rs1.next())
					{
						arrDocPrintCount.add(Helper.correctNull(rs1.getString("printcount")));
					}
					else
					{
						arrDocPrintCount.add("0");
					}
					hshRecord.put("cbscustid",correctNull(rs.getString("apdoc_approvercbsid")));
				}
				int postSancCount=0,preSancCount=0;
				String docsubtype="";
				strInsFlag="insert";
				if(strsessionModuleType.equals("CORP")|| strsessionModuleType.equals("AGR"))
				{
					strQuery=SQLParser.getSqlQuery("commdocumentsel1_fac^"+strAppno+"^I^"+hidfacslno);
				}
				else
				{
					strQuery=SQLParser.getSqlQuery("commdocumentsel1^"+strAppno+"^I");
				}
				if(rs!=null)
					rs.close();	
				
				rs=DBUtils.executeQuery(strQuery);
				while(rs.next())
				{				
					arrIJSPName.add(rs.getString(1));
					arrIDocCode.add(rs.getString(2));
					arrIDocDesc.add(rs.getString(3));
					arrIDocStatus.add(rs.getString(7));
					arrIDocDate.add(correctNull((String)rs.getString("doc_create_date")));
					arrIDocScan.add("No");
					arrIRenDate.add("");
					arrIDelDoc.add("I");
					arrIRemarks.add(Helper.correctNull(rs.getString("apdoc_remarks")));
					arrILDOC.add("");
					arrIPrdDocDate.add("");
					hshRecord.put("cbscustid", Helper.correctNull(rs.getString("APDOC_APPROVERCBSID")));
					if(rs1!=null)
						rs1.close();
					rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^I^"+Helper.correctNull(rs.getString(1)));
					if(rs1.next())
						arrDocAttach.add(Helper.correctNull(rs1.getString("cnt")));
					else
						arrDocAttach.add("0");
//					arrISubType.add(correctNull(rs.getString("doc_docsubtype")));
//					docsubtype=Helper.correctNull(rs.getString("DOC_DOCSUBTYPE"));
					
					if(rs1!=null)
						rs1.close();
					if(strsessionModuleType.equals("CORP") || strsessionModuleType.equals("AGR"))
						rs1=DBUtils.executeLAPSQuery("sel_docPrintHistCount_facility^"+strAppno+"^DOC_"+Helper.correctNull(rs.getString("doc_jspname"))+"^"+hidfacslno);
					else
						rs1=DBUtils.executeLAPSQuery("sel_docPrintHistCount^"+strAppno+"^DOC_"+Helper.correctNull(rs.getString("doc_jspname")));
					if(rs1.next())
					{
						arrDocPrintCount.add(Helper.correctNull(rs1.getString("printcount")));
					}
					else
					{
						arrDocPrintCount.add("0");
					}
					
				}
				if(rs1!=null)
					rs1.close();
				if(strsessionModuleType.equals("CORP") || strsessionModuleType.equals("AGR")){
					strQuery1=SQLParser.getSqlQuery("sel_doc_FacRejCheck^"+strAppno+"^"+hidfacslno);
					rs1=DBUtils.executeQuery(strQuery1);
				if(rs1.next())
				{
					if(correctNull((String)rs1.getString("facility_category")).equalsIgnoreCase("R"))
						hshRecord.put("Fac_RejectCheck","Y");
				}
				else
					hshRecord.put("Fac_RejectCheck","N");
				}
				hshRecord.put("preSancCount",String.valueOf(preSancCount));
				hshRecord.put("postSancCount",String.valueOf(postSancCount));
			}
			if(rs!=null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"32^OMNIDOCS");
			if(rs.next())
			{
				hshRecord.put("ipaddress",correctNull((String)rs.getString("stat_data_desc1")));
			}
	
			hshRecord.put("arrIJSPName",arrIJSPName);
			hshRecord.put("arrAJSPName",arrAJSPName);
			hshRecord.put("arrADocCode",arrADocCode);
			hshRecord.put("arrADocDesc",arrADocDesc);
			hshRecord.put("arrADocStatus",arrADocStatus);
			hshRecord.put("arrADocDate",arrADocDate);
			hshRecord.put("arrADocScan",arrADocScan);
			hshRecord.put("arrARendate",arrARenDate);
			hshRecord.put("arrADelDoc",arrADelDoc);
			hshRecord.put("arrARemarks",arrARemarks);
			hshRecord.put("arrAPrdDocDate",arrAPrdDocDate);
			hshRecord.put("arrIDocCode",arrIDocCode);
			hshRecord.put("arrIDocDesc",arrIDocDesc);
			hshRecord.put("arrIDocStatus",arrIDocStatus);
			hshRecord.put("arrIDocDate",arrIDocDate);
			hshRecord.put("arrIDocScan",arrIDocScan);
			hshRecord.put("arrIRendate",arrIRenDate);
			hshRecord.put("arrIDelDoc",arrIDelDoc);
			hshRecord.put("arrIRemarks",arrIRemarks);
			hshRecord.put("arrIPrdDocDate",arrIPrdDocDate);
			hshRecord.put("arrTotPages",arrTotPages);
			hshRecord.put("arrILDOC",arrILDOC);
			hshRecord.put("strInsFlag",strInsFlag);
			hshRecord.put("arrDocAttach",arrDocAttach);
			hshRecord.put("arrASubType",arrASubType);
			hshRecord.put("arrDocPrintCount",arrDocPrintCount);

			if(rs!=null)
				rs.close();
			
			strQuery=SQLParser.getSqlQuery("comfunsel1^"+strAppno);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("strAppType",Helper.correctNull(rs.getString("app_renew_flag")));
				hshRecord.put("APP_MIGRATION",Helper.correctNull(rs.getString("APP_MIGRATION")));
			}
			
			if(rs!=null)
				rs.close();
			if(strsessionModuleType.equals("CORP") || strsessionModuleType.equals("AGR"))
			{
				rs=DBUtils.executeLAPSQuery("sel_proposedLimit^"+strAppno+"^"+hidfacslno);
			}
			else
			{
				rs=DBUtils.executeLAPSQuery("checkcostloanprd^"+strAppno);
			}
			if(rs.next())
			{
				if(!Helper.correctNull(rs.getString("loan_releasedateofmclr")).equalsIgnoreCase(""))
				{
					hshRecord.put("strGuardetails","Y");
				}
			}
			if(rs!=null)	{rs.close();}
    		int maxallowedPrintCount=0;
    		rs=DBUtils.executeLAPSQuery("selotherparam_ratexpos^108");
    		if(rs.next())
    		{
    			hshRecord.put("maxallowedPrintCount",Helper.correctNull(rs.getString("LOAN_PARAMVAL")));
    		}
    		
				hshRecord.put("hidfacslno", hidfacslno);
				hshRecord.put("appholder", Helper.correctNull((String)hshValues.get("appholder")));
				hshRecord.put("strSolid", Helper.correctNull((String)hshValues.get("strSolid")));
				
				String strInwardOrgCode="",OrgCode="";
				int docAttCount=0;
				ArrayList arrdisbBranch=new ArrayList();
				OrgCode=Helper.correctNull((String)hshValues.get("strOrgCode"));
				rs=DBUtils.executeLAPSQuery("selworkflow^"+strAppno);		 
				if(rs.next())
				{
					strInwardOrgCode=Helper.correctNull(rs.getString("org_code"));
				}
				
				if(rs!=null){rs.close();}
				rs=DBUtils.executeLAPSQuery("sel_cbsloandisbbranch^"+strAppno);		 
				if(rs.next())
				{
					arrdisbBranch.add(Helper.correctNull(rs.getString("org_code")));
				}

				if(strInwardOrgCode.equals(OrgCode))
				{
					docAttCount++;
				}
				else if(arrdisbBranch.contains(OrgCode))
				{
					docAttCount++;
				}
				else if(Helper.correctNull((String)hshValues.get("appholder")).equals(Helper.correctNull((String)hshValues.get("strUserId"))))
				{
					docAttCount++;
				}
				else if((Helper.correctNull((String)hshValues.get("strOrgLevel"))).equalsIgnoreCase("D") && (strInwardOrgCode.substring(0, 9)).equals(OrgCode.substring(0, 9)))
				{
					docAttCount++;
				}
				else if((Helper.correctNull((String)hshValues.get("strOrgLevel"))).equalsIgnoreCase("R") && (strInwardOrgCode.substring(0, 6)).equals(OrgCode.substring(0, 6)))
				{
					docAttCount++;
				}
				else if((Helper.correctNull((String)hshValues.get("strOrgLevel"))).equalsIgnoreCase("C"))
				{
					docAttCount++;
				}

				hshRecord.put("docAttCount", Integer.toString(docAttCount));
				
				if(rs!=null)
					rs.close();
				
				strQuery=SQLParser.getSqlQuery("comfunsel1^"+strAppno);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					hshRecord.put("strAppType",Helper.correctNull(rs.getString("app_renew_flag")));
					hshRecord.put("APP_MIGRATION",Helper.correctNull(rs.getString("APP_MIGRATION")));
				}

			}
		catch(Exception e)
			{
			throw new EJBException(e.getMessage());
			}
		finally
			{
			try
				{
				if(rs!=null)
					{
					rs.close();
					}				
				}
			catch(Exception e1)
				{
				throw new EJBException(e1.getMessage());
				}
			}
		return hshRecord;
		}


	public HashMap getDocumentRules(HashMap hshValues) 
	{
		String strDocCode=null;
		ResultSet rs=null;
		HashMap hshRecord=new HashMap();
		String strPrimRule="";
		String strAltRule="";
		String selRemarks="";
		ArrayList arrCol=null;
		ArrayList arrRow=new ArrayList();
		String strsno=Helper.correctNull((String)hshValues.get("sno"));
		try
		{
			strDocCode=(String)hshValues.get("doc_code");			
			if(rs!=null)
				rs.close();
			
			rs=DBUtils.executeLAPSQuery("commdocview1^"+strDocCode);
			while(rs.next())
			{
				strPrimRule="<------      "+rs.getString(1)+ "      ------>" + "\n";
				strPrimRule+=rs.getString(2);
			}			
			rs.close();
			
			if(rs!=null)
				rs.close();
			
			rs=DBUtils.executeLAPSQuery("commdocview2^"+strDocCode);
			while(rs.next())
			{
				if(rs.getString(1)!=null)
				{
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull((String)rs.getString(1)));
					arrCol.add(Helper.correctNull((String)rs.getString(2)));
				/*strAltRule +="<------      "+ rs.getString(1)+ "    ------>" + "\n";
				strAltRule+=rs.getString(2)+"\n"+"\n";
				selRemarks+=rs.getString(2)+"~";*/
					arrRow.add(arrCol);
				}
			}
			rs.close();
			hshRecord.put("strPrimRule",strPrimRule);
			hshRecord.put("strAltRule",strAltRule);
			hshRecord.put("selRemarks",selRemarks);
			hshRecord.put("arrRow",arrRow);
			hshRecord.put("strDocCode",strDocCode);
			hshRecord.put("strsno",strsno);
			
			
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				
			}
			catch(Exception e1)
			{
				throw new EJBException("Error closing connection.."+e1);
			}
		}
		return hshRecord;
	}

	public HashMap getDocumentScan(HashMap hshValues) 
	{
		String strAppno=null;
		String strDocCode=null;
		String strQuery=null;
		ResultSet rs=null;
		HashMap hshRecord=new HashMap();
		try
		{
			strAppno=(String)hshValues.get("appno");
			strDocCode=(String)hshValues.get("doc_code");
			strQuery=SQLParser.getSqlQuery("commdocscansel^"+strAppno+"^"+strDocCode);
			
			if(rs!=null)
				rs.close();
			
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("appscan_appno",rs.getString(1));
				hshRecord.put("appscan_doccode",rs.getString(2));
				hshRecord.put("appscan_validfrom",correctNull(rs.getString(3)));
				hshRecord.put("appscan_validto",correctNull(rs.getString(4)));
				hshRecord.put("appscan_scanby",correctNull(rs.getString(5)));
				hshRecord.put("appscan_scandate",correctNull(rs.getString(6)));
				hshRecord.put("appscan_verifyby",correctNull(rs.getString(7)));
				hshRecord.put("appscan_verifydate",correctNull(rs.getString(8)));
				hshRecord.put("appscan_doccustody",correctNull(rs.getString(9)));
				hshRecord.put("appscan_imgtype",correctNull(rs.getString(10)));
				hshRecord.put("appscan_notes",correctNull(rs.getString(11)));
				hshRecord.put("appscan_status",correctNull(rs.getString(12)));
				hshRecord.put("apdoc_totpages",correctNull(rs.getString(13)));
				hshRecord.put("appscan_filename",correctNull(rs.getString(14)));
				hshRecord.put("appscan_flag","true");				
			}
			else
			{				
				hshRecord.put("appscan_flag","false");	
			}
			strQuery=SQLParser.getSqlQuery("documentscanname^"+strAppno+"^"+strDocCode);
			if(rs!=null)
				rs.close();
			
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				hshRecord.put("doc_desc1",correctNull(rs.getString("doc_desc")));
			}
			String strDocPath=(String)hshValues.get("hiddocpath");
			String strImgPath=(String)hshValues.get("hidimgpath");
			String strPage=(String)hshValues.get("apdoc_totpages");
			if(strPage==null)
			{
				strPage=(String)hshRecord.get("apdoc_totpages");
			}
			String strIP=(String)hshValues.get("hidserverip");
			String strFile=strIP+"&"+strAppno+"&"+strDocCode+"&"+strPage+"[1]"+".sdc";
			File filedoc=new File(strDocPath,strFile);
			File fileimg=new File(strImgPath,strFile);
			if(filedoc.exists())
			{
				hshRecord.put("docfile","y");
			}
			else
			{
				hshRecord.put("docfile","n");
			}
			if(fileimg.exists())
			{
				hshRecord.put("imgfile","y");
			}
			else
			{
				hshRecord.put("imgfile","n");
			}
			String comappid=Helper.correctNull((String)hshValues.get("comappid"));
			hshRecord.put("comappid",comappid);
			
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				
			}
			catch(Exception e1)
			{
				throw new EJBException("Error closing connection.."+e1);
			}
		}
		return hshRecord;

	}

	public void updateDocument(HashMap hshValues)
	{
		ResultSet rs=null;
		String strQuery="";
		HashMap hshQueryValues=new HashMap();
		HashMap hshQuery=new HashMap();
		ArrayList arrValues=new ArrayList();
		String[] strDocCode=null;
		String[] strDocStatus=null;
		String[] strScanStatus=null;
		//String[] strRenDate = null;
		String[] strRemarks = null;
		String[] strPrdDocDate = null;
		String strAppno=null;
		int intSize=0;
		//String strInsFlag=null;
		//String[] strSubDate=null;
		String[] strHidDel=null;
		String strAction = (String)hshValues.get("hidAction");
		String strNewDocCode = "";
		String strNewDocDate = "";
		String strAppDocType = (String)hshValues.get("hidAppDocType");
		//String strHidAppDoc = correctNull((String)hshValues.get("hidAppDoc"));
		String flag="";
		String strDesc1="";
		String strDesc2="";
		
		//For Document Remarks adding 
		String remarkflag=Helper.correctNull((String)hshValues.get("remarkflag"));
		String remarkdoccode=Helper.correctNull((String)hshValues.get("remarkdoccode"));
		String remarksdocvalue=Helper.correctNull((String)hshValues.get("remarksdocvalue"));
		
		String dcode=(String)hshValues.get("hidNewDocCode");
		
		String strdoccode[]=dcode.split("#");
		try
		{
			 strAppno=(String)hshValues.get("appno");
			 String strsessionModuleType = correctNull((String)hshValues.get("sessionModuleType"));
				if(strsessionModuleType.equals(""))
				{
					  strsessionModuleType = correctNull((String)hshValues.get("cattype"));
				}
					 
			 if (strAction.trim().equalsIgnoreCase("New"))
			 {
				flag="new";
				for(int i=0;i<strdoccode.length;i++)
				{
					intSize++;
				 	//strNewDocCode = (String)hshValues.get("hidNewDocCode");
					strNewDocDate = (String)hshValues.get("hidNewDocDate");		
					hshQuery=new HashMap();
					arrValues=new ArrayList();
					hshQuery.put("strQueryId","commdocumentins");
					arrValues.add(strAppno);
					arrValues.add(strdoccode[i]);
					arrValues.add("Y");
					arrValues.add(null);
					arrValues.add("0");
					arrValues.add(null);
					if(strAppDocType.trim().equalsIgnoreCase("I"))
					{
						arrValues.add("I");
					}
					else if(strAppDocType.trim().equalsIgnoreCase("A"))
					{
						arrValues.add("A");
					}
					else if(strAppDocType.trim().equalsIgnoreCase("O"))
					{
						arrValues.add("O");
					}
					else
					{
						arrValues.add("");
					}
					arrValues.add("");
					arrValues.add(Helper.correctNull((String)hshValues.get("strUserId")));
					if(strsessionModuleType.equalsIgnoreCase("CORP") || strsessionModuleType.equalsIgnoreCase("AGR"))
					{
						arrValues.add(Helper.correctNull((String)hshValues.get("sel_facilitysno")));
					}
					else
					{
						arrValues.add("");

					}
					hshQuery.put("arrValues",arrValues);
					hshQueryValues.put(Integer.toString(intSize),hshQuery);
				}
			}			
			else if(strAction.trim().equalsIgnoreCase("delete"))
			{	
				flag="delete";
				//intSize++;
				if(Helper.correctNull((String)hshValues.get("hidpagefrom")).equalsIgnoreCase("PSDA"))
					strNewDocCode = (String)hshValues.get("hidDocID");	
				else
					strNewDocCode = (String)hshValues.get("apdoc_del");			
				hshQuery=new HashMap();
				arrValues=new ArrayList();				
	 			strQuery=SQLParser.getSqlQuery("selAuditDocuments^"+strAppno+"^"+strNewDocCode);
				
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					strDesc1=rs.getString(1);
				}
//				hshQuery.put("strQueryId","delappdoc");
//				arrValues.add(strAppno);
//				arrValues.add(strNewDocCode);
//				hshQuery.put("arrValues",arrValues);
//				hshQueryValues.put(Integer.toString(intSize),hshQuery);
				
				
				intSize++;
				arrValues=new ArrayList();	
				hshQuery=new HashMap();
				arrValues.add("Y");
				arrValues.add(Helper.correctNull((String)hshValues.get("strUserId")));
				arrValues.add(strAppno);
				arrValues.add(strNewDocCode);
				if((strsessionModuleType.equals("CORP" ) || strsessionModuleType.equals("AGR"))&& strAppDocType.equalsIgnoreCase("I"))
				{
					arrValues.add(Helper.correctNull((String)hshValues.get("sel_facilitysno")));
					hshQuery.put("strQueryId","upd_delDocFlag_fac");
				}
				else
					hshQuery.put("strQueryId","upd_delDocFlag");
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(Integer.toString(intSize),hshQuery);
				
				
			}			 
			else if(strAction.trim().equalsIgnoreCase("update"))
			{
				
				//strInsFlag=(String)hshValues.get("strInsFlag");
//				 strDocCode=(String[])hshValues.get("apdoc_doccode");
//				 strDocStatus=(String[])hshValues.get("apdoc_substatus");
				 //strSubDate=(String[])hshValues.get("apdoc_subdate");
				 //strRenDate=(String[])hshValues.get("apdoc_rendate");
//				 strRemarks=(String[])hshValues.get("apdoc_remarks");
//				 strPrdDocDate=(String[])hshValues.get("apdoc_prddoc_date");
//	 			 strHidDel=(String[])hshValues.get("hidapdoc_del");	
//	 			 strScanStatus = (String[])hshValues.get("apdoc_scan_pages");
	 			 
	 			 if(hshValues.get("apdoc_doccode") instanceof java.lang.String)
	 			 {
	 				strDocCode=new String[1];
	 				strDocCode[0]=Helper.correctNull((String)hshValues.get("apdoc_doccode"));
	 			 }
	 			 else
	 			 {
	 				strDocCode=((String[])hshValues.get("apdoc_doccode"));
	 			 }
	 			 if(hshValues.get("apdoc_substatus") instanceof java.lang.String)
	 			 {
	 				strDocStatus=new String[1];
	 				strDocStatus[0]=Helper.correctNull((String)hshValues.get("apdoc_substatus"));
	 			 }
	 			 else
	 			 {
	 				strDocStatus=((String[])hshValues.get("apdoc_substatus"));
	 			 }
	 			 if(hshValues.get("apdoc_remarks") instanceof java.lang.String)
	 			 {
	 				strRemarks=new String[1];
	 				strRemarks[0]=Helper.correctNull((String)hshValues.get("apdoc_remarks"));
	 			 }
	 			 else
	 			 {
	 				strRemarks=((String[])hshValues.get("apdoc_remarks"));
	 			 }
	 			 if(hshValues.get("apdoc_prddoc_date") instanceof java.lang.String)
	 			 {
	 				strPrdDocDate=new String[1];
	 				strPrdDocDate[0]=Helper.correctNull((String)hshValues.get("apdoc_prddoc_date"));
	 			 }
	 			 else
	 			 {
	 				strPrdDocDate=((String[])hshValues.get("apdoc_prddoc_date"));
	 			 }
	 			 if(hshValues.get("hidapdoc_del") instanceof java.lang.String)
	 			 {
	 				strHidDel=new String[1];
	 				strHidDel[0]=Helper.correctNull((String)hshValues.get("hidapdoc_del"));
	 			 }
	 			 else
	 			 {
	 				strHidDel=((String[])hshValues.get("hidapdoc_del"));
	 			 }
//	 			 if(hshValues.get("apdoc_scan_pages") instanceof java.lang.String)
//	 			 {
//	 				strScanStatus=new String[1];
//	 				strScanStatus[0]=Helper.correctNull((String)hshValues.get("apdoc_scan_pages"));
//	 			 }
//	 			 else
//	 			 {
//	 				strScanStatus=((String[])hshValues.get("apdoc_scan_pages"));
//	 			 }
	 			 
				int len=0;
				for (int k=0;k<strHidDel.length;k++ )
				{
					if(!strHidDel[k].equals(""))
						len=1;
				}
				if(len<1)
				{
					flag="new";
				}
				else
				{
					flag="update";
				}
				if(flag.equals("update"))
				{	
					 for(int i=0;i<strDocCode.length;i++)
					 {			    
						intSize++;			
						hshQuery=new HashMap();
						arrValues=new ArrayList();
						hshQuery.put("strQueryId","commdocumentupd");
						arrValues.add(correctNull((String)strRemarks[i]));							
		
						if(strPrdDocDate[i]==null || strPrdDocDate[i].equals(""))
						{
							arrValues.add(null);
						}
						else
						{
							arrValues.add(strPrdDocDate[i]);
						}

						if(strDocStatus[i].trim().equalsIgnoreCase("N") || strDocStatus[i].trim().equalsIgnoreCase(""))
					    {
							arrValues.add("N");
						}
							else if (strDocStatus[i].trim().equalsIgnoreCase("Y"))
							{
								arrValues.add("y");
							}
							arrValues.add(strAppno);
							arrValues.add(strDocCode[i]);									
							hshQuery.put("arrValues",arrValues);
					   	 	hshQueryValues.put(String.valueOf(intSize),hshQuery);
					}			
						 strDesc2=correctNull((String)hshValues.get("hidDocumentType1"));
				}
			}
			 if(strDocCode!=null && strDocCode.length>1)
			 {
			 	if(flag.equals("new"))
			 	{
			 		intSize++;

			 		hshQuery=new HashMap();
			 		arrValues=new ArrayList();
			 		hshQuery.put("strQueryId","delprddoc");
			 		arrValues.add(strAppno);
				
			 		if(strAppDocType.trim().equalsIgnoreCase("I"))
			 		{
			 			arrValues.add("PI");
			 		}
			 		else if(strAppDocType.trim().equalsIgnoreCase("A"))
			 		{
			 			arrValues.add("PA");
			 		}
			 		else
				 	{
			 			arrValues.add("");
				 	}
					hshQuery.put("arrValues",arrValues);
					hshQueryValues.put(Integer.toString(intSize),hshQuery);
	
					 for(int i=0;i<strDocCode.length;i++)
					 {
						 if(strHidDel[i].trim().equals(""))
						 {
							if((strDocStatus[i].trim().equalsIgnoreCase("Y"))|| (strDocStatus[i].trim().equalsIgnoreCase("N"))||(strDocStatus[i].trim().equalsIgnoreCase("")))
							{
								intSize++;
								hshQuery=new HashMap();
								arrValues=new ArrayList();
								hshQuery.put("strQueryId","commdocumentins");
								arrValues.add(strAppno);
								arrValues.add(strDocCode[i]);
								if (strDocStatus[i].trim().equalsIgnoreCase("Y"))
								{
									arrValues.add("Y");						
								}
								else
								{
									arrValues.add("N");						
							    }	
								arrValues.add(null);
								
								if(strAppDocType.trim().equalsIgnoreCase("I"))
								{
									arrValues.add("0");						
								}
								else if(strAppDocType.trim().equalsIgnoreCase("A"))
								{
									arrValues.add("");
								}
								arrValues.add(null);				
								
							   if(strAppDocType.trim().equalsIgnoreCase("I"))
							 {
								arrValues.add("PI");
							 }
							else if(strAppDocType.trim().equalsIgnoreCase("A"))
							 {
								arrValues.add("PA");
							 }
							 else
							 {
								arrValues.add("");
							 }
			
								arrValues.add(correctNull((String)strRemarks[i]));
//								 if(strPrdDocDate[i]==null || strPrdDocDate[i].equals(""))
//									{
//									arrValues.add(null);
//									}
//									else
//									{
//									 arrValues.add(strPrdDocDate[i]);
//									}
								arrValues.add(Helper.correctNull((String)hshValues.get("strUserId")));
								 hshQuery.put("arrValues",arrValues);
								 hshQueryValues.put(String.valueOf(intSize),hshQuery);
							}
		
						 }
					 }
			 	}
			 
			} 
			 	if(remarkflag.equalsIgnoreCase("Remarks"))
			 	{
			 		hshQuery=new HashMap();
					arrValues=new ArrayList();
					hshQuery.put("strQueryId","updateDocRemarks");
					arrValues.add(remarksdocvalue);
					arrValues.add(strAppno);
					arrValues.add(remarkdoccode);
					hshQuery.put("arrValues",arrValues);
					hshQueryValues.put("1",hshQuery);
					hshQueryValues.put("size","1");
					EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			 	}
			 hshQueryValues.put("size",String.valueOf(intSize));
		 	   EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		 	   
				hshQuery=new HashMap();
				arrValues=new ArrayList();
				String strType="";
				String strDesc=correctNull((String)hshValues.get("hidDocumentType"));
				
				if(strAppDocType.equalsIgnoreCase("A"))
				{
					strType="Applicant";
				}
				else if(strAppDocType.equalsIgnoreCase("I"))
				{
					strType="Bank";
				}
				else if(strAppDocType.equalsIgnoreCase("O"))
				{
					strType="Others";
				}

				
				
		String strActionData="";
				//for Entering the values into auditrial
				if((strAction.equalsIgnoreCase("insert")) ||(strAction.equalsIgnoreCase("new")))
				{	

	             strActionData = "Document Type = "+strType+" "+"Document Description ="+strDesc;
	             strAction = "Insert";
				}
				else if(strAction.equalsIgnoreCase("update"))
				{	

	             strActionData = "Document Type = "+strType+" "+"Document Description ="+strDesc2;
	             strAction="Update";
				}

				else if (strAction.equalsIgnoreCase("delete"))
				{
					strActionData = "Document Type = "+strType+" "+"Document Description ="+strDesc1;
					strAction="Delete";
				}
				
				hshQuery.put("strQueryId","audittrial");
				arrValues.add("103");
				arrValues.add(correctNull((String)hshValues.get("strUserId")));
				arrValues.add(correctNull((String)hshValues.get("strClientIP")));
				arrValues.add(strAppno);
				arrValues.add(strActionData);
				arrValues.add(strAction);			
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("1",hshQuery);			
				hshQueryValues.put("size","1");
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
	
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
		finally
		{
			try
			{
				//EJBInvoker.executeStateLess("appeditlock",hshValues,"unLockApplication");
				if(rs!=null)
				{
					rs.close();
				}				
			}
			catch(Exception e1)
			{
				throw new EJBException(e1.getMessage());
			}
		}
	}

	public HashMap createFile(HashMap hshValues) 
	{
		String strPath="";
		String strFile="";
		String strAppno=null;
		String strDocCode=null;
		String strPage=null;
		String strIP=null;
		HashMap hshRecord=null;
		try
		{
			strPath=(String)hshValues.get("hiddocpath");
			strAppno=(String)hshValues.get("appscan_appno");
			strDocCode=(String)hshValues.get("doc_code");
			strPage=(String)hshValues.get("apdoc_totpages");
			strIP=(String)hshValues.get("hidserverip");
			strFile=strIP+"&"+strAppno+"&"+strDocCode+"&"+strPage+".sdc";
			File fileScan=new File(strPath,strFile);
			if(fileScan.exists())
			{
				fileScan.delete();
			}
			fileScan.createNewFile();
			hshRecord=getDocumentScan(hshValues);
			hshRecord.put("apdoc_totpages",hshValues.get("apdoc_totpages"));
	
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
		return hshRecord;
	}

    private void moveFile(HashMap hshValues) throws Exception
	{
		String strPath="";
		String strFile="";
		String strNewPath=(String)hshValues.get("hidimgpath");
		String strAppno=null;
		String strDocCode=null;
		String strPage=null;
		String strIP=null;
		try
		{
			strPath=(String)hshValues.get("hiddocpath");
			strAppno=(String)hshValues.get("appscan_appno");
			strDocCode=(String)hshValues.get("doc_code");
			strPage=(String)hshValues.get("apdoc_totpages");
			strIP=(String)hshValues.get("hidserverip");
			strFile=strIP+"&"+strAppno+"&"+strDocCode+"&"+strPage+"[1]"+".sdc";
			File fileScan=new File(strPath,strFile);
			if(fileScan.exists())
			{
				File fileScanNew=new File(strNewPath,strFile);
				if(!fileScanNew.exists())
				{
					fileScanNew.mkdir();
				}
				for(int i=0;i<Integer.parseInt(strPage);i++)
				{
					File tmpfile=new File(fileScan.toString(),strDocCode+i+".jpg");
					tmpfile.renameTo(new File(fileScanNew.toString(),strDocCode+i+".jpg"));
				}
				fileScan.delete();
			}
		}
		catch(Exception e)
		{
			throw new Exception("Error in moveFile.. "+e);
		}
	}

	public void updateDocumentScan(HashMap hshValues) 
	{
		HashMap hshQueryValues=new HashMap();
		HashMap hshQuery=new HashMap();
		String strQuery=null;
		ArrayList arrValues=new ArrayList();
		String strAppno="";
		String strDocCode="";
		ResultSet rs=null;
		try
		{
			strAppno=(String)hshValues.get("appscan_appno");
			strDocCode=(String)hshValues.get("doc_code");
			strQuery=SQLParser.getSqlQuery("commdocscansel^"+strAppno+"^"+strDocCode);
			
			if(rs!=null)
				rs.close();
			rs=DBUtils.executeQuery(strQuery);
			
			if(rs.next())
			{
				hshQuery.put("strQueryId","commdocscanupd");
				arrValues.add(hshValues.get("appscan_status"));
				arrValues.add(makeNull(hshValues.get("appscan_validfrom")));
				arrValues.add(makeNull(hshValues.get("appscan_validto")));
				arrValues.add(hshValues.get("appscan_scanby"));
				arrValues.add(hshValues.get("appscan_verifyby"));
				arrValues.add(makeNull(hshValues.get("appscan_verifydate")));
				arrValues.add(hshValues.get("appscan_doccustody"));
				arrValues.add(hshValues.get("appscan_imgtype"));
				arrValues.add(hshValues.get("appscan_notes"));
				arrValues.add(hshValues.get("appscan_appno"));
				arrValues.add(strDocCode);
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("1",hshQuery);
			}
			else
			{
				hshQuery.put("strQueryId","commdocscanins");
				arrValues.add(hshValues.get("appscan_appno"));
				arrValues.add(strDocCode);
				arrValues.add(hshValues.get("appscan_status"));
				arrValues.add(makeNull(hshValues.get("appscan_validfrom")));
				arrValues.add(makeNull(hshValues.get("appscan_validto")));
				arrValues.add(hshValues.get("appscan_scanby"));
				arrValues.add(makeNull(hshValues.get("appscan_verifyby")));
				arrValues.add(makeNull(hshValues.get("appscan_verifydate")));
				arrValues.add(hshValues.get("appscan_doccustody"));
				arrValues.add(hshValues.get("appscan_imgtype"));
				arrValues.add(hshValues.get("appscan_notes"));
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("1",hshQuery);
			}
			hshQuery=new HashMap();
			arrValues=new ArrayList();
			hshQuery.put("strQueryId","commdocscanupdpage");
			arrValues.add(hshValues.get("apdoc_totpages"));
			arrValues.add(hshValues.get("appscan_appno"));
			arrValues.add(strDocCode);
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("2",hshQuery);
			hshQueryValues.put("size","2");
		    EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			moveFile(hshValues);
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				
			}
			catch(Exception e1)
			{
				throw new EJBException("Error closing connection");
			}
		}
	}
	

	public HashMap getComFacDocuments(HashMap hshRequestValues) 
	{
		String strAppno=null;
		String strComDocType = null;
		String strQuery=null;
		String strcattype="";
		ResultSet rs=null;
		HashMap hshRecord=new HashMap();
		String constitution="",generalDoc="";
		String strFacsno="";
		ArrayList arrFacDocType = new ArrayList();
		ArrayList arrFacDocDesc = new ArrayList();
		ArrayList arrFacDocNo = new ArrayList();
		ArrayList arrFacDocdate = new ArrayList();
		ArrayList arrFacDoccode = new ArrayList();
		ArrayList arrFacDoccodeMaster = new ArrayList();
		ArrayList arrFacDocDescMaster = new ArrayList();			
		try
		{		
			strAppno=(String)hshRequestValues.get("appno");
			strComDocType = (String)hshRequestValues.get("hidComDocType");
			generalDoc=correctNull((String)hshRequestValues.get("general"));
			strcattype=correctNull((String)hshRequestValues.get("hidCategoryType"));
			strFacsno=correctNull((String)hshRequestValues.get("seltermid"));
			hshRecord = new HashMap();

			if(!generalDoc.equalsIgnoreCase("general"))
			{
				if(rs!=null)
					rs.close();
				/****************************************
				 * For getting the Customer Constitution 
				 *****************************************/
				
				if(rs!=null)
					rs.close();
				if(strcattype.equalsIgnoreCase("OPS"))
				{
					strQuery=SQLParser.getSqlQuery("sel_opscapital^"+strAppno);
					rs=DBUtils.executeQuery(strQuery);
					if (rs.next())
					{  
						constitution=correctNull(rs.getString("PERAPP_CONSTITUTION"));				
					}
					
					if(constitution.equalsIgnoreCase("02"))//Joint Borrowers
						constitution="OLC";
					else if(constitution.equalsIgnoreCase("07"))//PVT LTD COMPANY
						constitution="OLP";
					else if(constitution.equalsIgnoreCase("08"))//PUBLIC LTD COMPANY
						constitution="OCC";
					else if(constitution.equalsIgnoreCase("09"))//PARTNER SHIP
						constitution="OP";
					else if(constitution.equalsIgnoreCase("009"))//Sole Proprietor
						constitution="OS";
					else if(constitution.equalsIgnoreCase("01"))//Individual
						constitution="IN";
					else 										// Others
						constitution="OO";
				}
				else
				{
					strQuery=SQLParser.getSqlQuery("SelConstitution^"+strAppno);
					rs=DBUtils.executeQuery(strQuery);
					if (rs.next())
					{  
						constitution=correctNull(rs.getString("comapp_ownership"));				
					}
				}
				
				if(strFacsno.equals("0"))
				{
					strQuery = SQLParser.getSqlQuery("selFacDocMastergeneral^0^0^"+strComDocType.toUpperCase()+"^gen");
				}
				else
				{
					strQuery = SQLParser.getSqlQuery("selFacDocMaster^"+strComDocType.toUpperCase()+"^"+constitution+"^"+strFacsno+"^"+strAppno);
				}
	
				if(rs!=null)
					rs.close();	
			
				rs=DBUtils.executeQuery(strQuery);
				while (rs.next())
				{  
					arrFacDocDescMaster.add(correctNull(rs.getString("doc_desc")));
					arrFacDoccodeMaster.add(correctNull(rs.getString("doc_primary")));
				}
				strQuery = SQLParser.getSqlQuery("selcomfacilitydocuments^"+strFacsno+"^"+strComDocType.toUpperCase()+"^"+strAppno);
				if(rs!=null)
				rs.close();

				rs=DBUtils.executeQuery(strQuery);
				while (rs.next())
				{  
					arrFacDocDesc.add(correctNull(rs.getString(1)));
					arrFacDocType.add(correctNull(rs.getString(2)));
					arrFacDocNo.add(correctNull(rs.getString(3)));
					arrFacDocdate.add(correctNull(rs.getString(4)));
					arrFacDoccode.add(correctNull(rs.getString(5)));
				}
				hshRecord.put("arrFacDocDescMaster",arrFacDocDescMaster);
				hshRecord.put("arrFacDoccodeMaster",arrFacDoccodeMaster);
				hshRecord.put("arrFacDocDesc",arrFacDocDesc);
				hshRecord.put("arrFacDocType",arrFacDocType);
				hshRecord.put("arrFacDocNo",arrFacDocNo);
				hshRecord.put("arrFacDocdate",arrFacDocdate);
				hshRecord.put("arrFacilityId",strFacsno);
				hshRecord.put("arrFacDoccode",arrFacDoccode);
			} 
			rs = DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"32^OMNIDOCS");
			if(rs.next())
			{
				hshRecord.put("ipaddress",correctNull((String)rs.getString("stat_data_desc1")));
			}
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				
			}
			catch(Exception e1)
			{
				throw new EJBException(e1.getMessage());
			}
		}
		return hshRecord;
	}

	public void updateComFacilityDocuments(HashMap hshRequestValues) 
	{				
		ResultSet rs=null;
		String strBusiType="";
		String strcattype="";
		String strQuery="";
		try
		{
			HashMap hshQueryValues = new HashMap();
			HashMap hshQuery = new HashMap();
			ArrayList arrValues = null;
			String strFacsno="";
			
			String strAction = (String)hshRequestValues.get("hidAction");
			String strAppno=(String)hshRequestValues.get("appno");
			strcattype=correctNull((String)hshRequestValues.get("hidCategoryType"));
			
			//HashMap hshValue = (HashMap)getTokens(hshRequestValues);
			//String strFacId = (String)hshValue.get("strToken1");
			//String strFacType = (String)hshValue.get("strToken2");
			
			strFacsno=correctNull((String)hshRequestValues.get("seltermid"));
			
			String strComDocType = (String)hshRequestValues.get("hidComDocType");
			String comappid=(String)hshRequestValues.get("comappid");
			String txt_exp_date1=(String)hshRequestValues.get("txt_exp_date1");
			String dcode=(String)hshRequestValues.get("hidNewDocCode");
			//String chkstatus[]=(String[])hshRequestValues.get("doc_chkstatus");
			
			String strdoccode[]=dcode.split("#");
			int intUpdatesize=0;
			
			if(txt_exp_date1.equalsIgnoreCase("") && txt_exp_date1.equals(null))
			{
				txt_exp_date1="";	
			}
			
			String m=(String)hshRequestValues.get("hid_no");
			if(m.equalsIgnoreCase(""))
			{
				m="0";
			}
			String txt_expdate1="";
			
			if(!m.equalsIgnoreCase(""))
			{
			int m1=Integer.parseInt(m);
			 txt_expdate1=correctNull((String)hshRequestValues.get("txt_expdate1"+m1));
				if(txt_expdate1.equalsIgnoreCase(""))
				{
					txt_expdate1="";	
				}
			}
			/***************************************
			 * For getting the Customer ID 
			 ****************************************/
			if(rs!=null)
				rs.close();
			if(strcattype.equalsIgnoreCase("OPS"))
				strQuery=SQLParser.getSqlQuery("comfunsel4^"+strAppno+"^N");
			else
				strQuery=SQLParser.getSqlQuery("comfunsel3^"+strAppno);
			rs=DBUtils.executeQuery(strQuery);
			if (rs.next())
			{
				comappid=correctNull(rs.getString("demo_appid"));
			}
			
			/****************************************
			 * For getting the Customer Constitution 
			 *****************************************/
			
			if(rs!=null)
				rs.close();
			if(strcattype.equalsIgnoreCase("OPS"))
				strQuery=SQLParser.getSqlQuery("getconstitutionfromdemographic^"+comappid);
			else
				strQuery=SQLParser.getSqlQuery("comowner^"+comappid);	
			rs=DBUtils.executeQuery(strQuery);
			if (rs.next())
			{
				strBusiType=Helper.correctNull((String)rs.getString(1));
			}
				
				
			if(strAction.equals("insert"))
			{
				for(int i=0;i<strdoccode.length;i++)
				{
					if(!strdoccode[i].equals(""))
					{
						
						hshQuery=new HashMap();
						arrValues=new ArrayList();
						hshQuery.put("strQueryId","comfacilitydocumentins");
						intUpdatesize++;
						arrValues.add(strAppno);
						arrValues.add(strFacsno);
						//arrValues.add(strFacId);
						//arrValues.add(strFacType);
						if(strdoccode[i].equalsIgnoreCase(""))
						{
							arrValues.add("0");	
						}
						else{
							arrValues.add(strdoccode[i]);
						}
						arrValues.add(strComDocType.toUpperCase());
						arrValues.add("A");
						arrValues.add("N");
						arrValues.add(strBusiType);
						arrValues.add(txt_exp_date1);
						/*if(chkstatus[i].equalsIgnoreCase(""))
						{
							arrValues.add("0");	
						}
						else{
							arrValues.add(chkstatus[i]);
						}*/
						hshQuery.put("arrValues",arrValues);
						hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
					}
				}
				/*hshQuery=new HashMap();
				arrValues=new ArrayList();
				
				//for Entering the values into auditrial
	
				String  strActionData= "Facilities="+strFacsno+"~Document Code ="+correctNull((String)hshRequestValues.get("hidtermid"))+"~Document Type =A";			
				
				hshQuery.put("strQueryId","audittrial");*/
			//	intUpdatesize++;
				/*arrValues.add("81");
				arrValues.add(correctNull((String)hshRequestValues.get("strUserId")));
				arrValues.add(correctNull((String)hshRequestValues.get("strClientIP")));
				arrValues.add(strAppno);
				arrValues.add(strActionData);			
				arrValues.add("Insert");			
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize),hshQuery);*/
			}
			else if(strAction.equals("delete"))
			{
				String strTermsType = (String)hshRequestValues.get("hidterms");
				String termremarks = (String)hshRequestValues.get("hidcomments");
				hshQuery=new HashMap();
				arrValues=new ArrayList();
				if ((strTermsType.equalsIgnoreCase("A"))||(strTermsType.equalsIgnoreCase("P")))
				{
					hshQuery.put("strQueryId","comfacilitydocumentdelfirst");
					intUpdatesize++;
					arrValues.add("Y");	
					arrValues.add(termremarks);
				}
				arrValues.add(strAppno);
				arrValues.add(strFacsno);
				//arrValues.add(strFacId);
				//arrValues.add(strFacType);
				arrValues.add((String)hshRequestValues.get("hidtermid"));
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize),hshQuery);
				
				/*hshQuery=new HashMap();
				arrValues=new ArrayList();
		
				//for Entering the values into auditrial

				String  strActionData= "Facilities="+strFacsno+"~Document Code ="+correctNull((String)hshRequestValues.get("hidtermid"))+"~Document Type =A~Remarks  ="+termremarks;		
			
				hshQuery.put("strQueryId","audittrial");
				intUpdatesize++;
				arrValues.add("81");
				arrValues.add(correctNull((String)hshRequestValues.get("strUserId")));
				arrValues.add(correctNull((String)hshRequestValues.get("strClientIP")));
				arrValues.add(strAppno);
				arrValues.add(strActionData);			
				arrValues.add("Delete");			
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize),hshQuery);*/
			}	
				
			if(strAction.equals("update"))
			{
			for(int i=0;i<strdoccode.length;i++)
			  {
				 if(!strdoccode[i].equals(""))
				 	{
					intUpdatesize = intUpdatesize + 1;
					hshQuery=new HashMap();
					hshQuery.put("strQueryId","comfacilitydocumentupd");
					arrValues=new ArrayList();
					arrValues.add(txt_expdate1);
					arrValues.add(strAppno);
					 // String str=(String)hshRequestValues.get("hidtermid");
				    if(strdoccode[i].equalsIgnoreCase(""))
				    {
				    arrValues.add("0");	
				    }
				    else{
					arrValues.add(strdoccode[i]);
				    }
				    arrValues.add(strFacsno);
				    //arrValues.add(strFacId);
					//arrValues.add(strFacType);
				   	hshQuery.put("arrValues",arrValues);
					hshQueryValues.put("size", Integer
							.toString(intUpdatesize));
					hshQueryValues.put(Integer.toString(intUpdatesize), hshQuery);
					//EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				 	}
				}
			}
	
			else if(strAction.equals("undelete"))
			{
				hshQuery=new HashMap();				
				arrValues=new ArrayList();
				
				hshQuery.put("strQueryId","comfacilitydocumentdel1");
				intUpdatesize++;
				arrValues.add("N");								
				arrValues.add(strAppno);
				arrValues.add(strFacsno);
				//arrValues.add(strFacId);
				//arrValues.add(strFacType);
				arrValues.add((String)hshRequestValues.get("hidtermid"));
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize),hshQuery);
				
			/*	hshQuery=new HashMap();
				arrValues=new ArrayList();
		
				//for Entering the values into auditrial
	
					String  strActionData= "Facilities="+strFacsno+"~Document Code ="+correctNull((String)hshRequestValues.get("hidtermid"))+"~Document Type =A";		
				
				hshQuery.put("strQueryId","audittrial");
				intUpdatesize++;
				arrValues.add("80");
				arrValues.add(correctNull((String)hshRequestValues.get("strUserId")));
				arrValues.add(correctNull((String)hshRequestValues.get("strClientIP")));
				arrValues.add(strAppno);
				arrValues.add(strActionData);			
				arrValues.add("UnDelete");			
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(Integer.toString(intUpdatesize),hshQuery);	*/
			}
			hshQueryValues.put("size",Integer.toString(intUpdatesize));
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}		
		finally
		{	
			try
			{	
				if(rs != null)
				{
				 rs.close();
				}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
	}

	private HashMap getTokens(HashMap hshRequestValues)
	{
		HashMap hshRecord = new HashMap();
		try
		{
			String strseldata = (String)hshRequestValues.get("seltermid");
			StringTokenizer st = new StringTokenizer(strseldata,"^");
			String strFacId = st.nextToken();
			String strFacType = st.nextToken();
			hshRecord.put("strToken1",strFacId);
			hshRecord.put("strToken2",strFacType);
		}
		catch(Exception e)
		{
			throw new EJBException(e.toString());
		}
		return hshRecord;
	}

	public HashMap getDeletedDocument(HashMap hshRequestValues) 
	{	
		ResultSet rs = null;
		ArrayList arrTerms=new ArrayList();
		ArrayList arrTermsComments=new ArrayList();
		ArrayList arrTermId = new ArrayList();		
		HashMap hshRecord = new HashMap();
		String strQuery="";
		String strAppno = (String)hshRequestValues.get("appno");
		String strComDocType = (String)hshRequestValues.get("hidComDocType");
		//HashMap hshValue = (HashMap)getTokens(hshRequestValues);
		//String strFacId = (String)hshValue.get("strToken1");
		//String strFacType = (String)hshValue.get("strToken2");
		String strFacsno=correctNull((String)hshRequestValues.get("seltermid"));
		String page_from = correctNull((String)hshRequestValues.get("page_from"));
		
		try
		{			
			hshRecord = new HashMap();
			strQuery = SQLParser.getSqlQuery("deletedfacilitydocuments^"+strFacsno+"^"+strComDocType.toUpperCase()+"^"+strAppno);
			if(rs!=null)
				rs.close();
			rs=DBUtils.executeQuery(strQuery);
			while (rs.next())
			{  
				arrTerms.add(correctNull(rs.getString(1)));
				arrTermsComments.add(correctNull(rs.getString(2)));
				arrTermId.add(correctNull(rs.getString(3)));
			}
			hshRecord.put("arrTerms",arrTerms);
			hshRecord.put("arrTermsComments",arrTermsComments);
			hshRecord.put("arrTermId",arrTermId);
			hshRecord.put("page_from",page_from);			
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getData login  "+ce.toString());
		}
		finally
		{	
			try
			{	
				if(rs != null)
				{
					rs.close();
				}				
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshRecord;
	}
	
	public boolean updateAttachedDocument(HashMap hshValues) 
	{
		ResultSet rs=null;
		HashMap hshQueryValues=new HashMap();
		HashMap hshQuery=new HashMap();
		ArrayList arrValues=new ArrayList();
		String strApplicationNo=correctNull((String)hshValues.get("appscan_appno"));
		String strDocumentCode=correctNull((String)hshValues.get("doc_code"));
		
		try
		{ 			
			long filelength=0;
			byte bytimg[]=new byte[(int)filelength];
			bytimg=(byte[])hshValues.get("byteimg");
			hshQueryValues=new HashMap();
			hshQuery=new HashMap();
			arrValues=new ArrayList();
			arrValues.add(bytimg);
			arrValues.add(Helper.correctNull((String)hshValues.get("filename")));
			arrValues.add(strApplicationNo);
			arrValues.add(strDocumentCode);
			hshQueryValues.put("size","1");
			hshQuery.put("strQueryId","upd_scanned_document");
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		
		}
		catch(Exception e)
		{
			throw new EJBException("Error in updateAttachedDocument "+e.getMessage());	
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				 
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection in updateAttachedDocument"+e.getMessage());
			}
		}
		return true;
	}
	
	public HashMap viewDocumentScanningImage(HashMap hshValues) 
	{
		ResultSet rs=null;
		HashMap hshResult=new HashMap();
		String ApplicationNo = "";	
		String strQuery = "";	
		ApplicationNo=correctNull((String)hshValues.get("ApplicationNo"));
		String document_code=correctNull((String)hshValues.get("document_code"));
		Connection conn = null;
		Statement stmt = null;
		
		try
		{		
			AttachPhotoBean attatchPhotoBean = new AttachPhotoBean();
			conn=getConnection();
			stmt=conn.createStatement();
			strQuery=SQLParser.getSqlQuery("sel_scanned_document^"+ApplicationNo+"^"+document_code);
			StringTokenizer st=new StringTokenizer(strQuery,"#");
			if(st.hasMoreElements()){
				st.nextElement();
				strQuery=(String)st.nextElement();
			}
			rs=stmt.executeQuery(strQuery);
			String strFileExt="",mimeType="";
			if(rs.next())
			{
				Blob Blobdata =rs.getBlob("appscan_document");
				String strDocName = Helper.correctNull(rs.getString("appscan_filename"));
				if(!strDocName.equals(""))
				{
					if(strDocName.length()>=4)
					{
						strFileExt = strDocName.substring(strDocName.length() - 3, strDocName.length());
						mimeType =attatchPhotoBean.getMimeType(strFileExt.trim());
					}
					else
					{
						mimeType = "application/stream";
					}
				}					
				if(Blobdata!=null)
				{
	                byte[] byteDocData = Blobdata.getBytes(1, (int) Blobdata.length());
					if(byteDocData!=null)
					{
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						baos.write(byteDocData);
						hshResult.put("FILE_STREAM_NAME",strDocName);
						hshResult.put("FILE_STREAM_DISPOSITION_TYPE","inline");
						hshResult.put("FILE_STREAM", byteDocData);
						hshResult.put("FILE_STREAM_TYPE",mimeType);
					}
				}
				else
				{
					hshResult.put("Message","No Document Attached To View");
				}
			}
		}
		catch(Exception e)
		{
			throw new EJBException("Error in viewDocumentScanningImage"+e.getMessage());		
		}
		finally
		{
			try
			{
				if(conn!=null)
				{
					conn.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(rs!=null)
				{
					rs.close();
				}
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection (viewDocumentScanningImage)"+e.getMessage());
			}
		}
		return hshResult;
	}
	public boolean updateAttachedPdfDocument(HashMap hshValues) 
	{
		ResultSet rs=null;
		HashMap hshQueryValues=new HashMap();
		HashMap hshQuery=new HashMap();
		ArrayList arrValues=new ArrayList();
		String strDocumentCode=correctNull((String)hshValues.get("doc_code"));
		
		try	
		{ 	
			hshQueryValues=new HashMap();
			hshQuery=new HashMap();
			arrValues=new ArrayList();
			arrValues.add(strDocumentCode);	
			hshQueryValues.put("size","1");
			hshQuery.put("strQueryId","del_pdfdocument");
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			
			
			long filelength=0;
			byte bytimg[]=new byte[(int)filelength];
			bytimg=(byte[])hshValues.get("byteimg");
			hshQuery=new HashMap();
			arrValues=new ArrayList();
			arrValues.add(bytimg);
			arrValues.add(strDocumentCode);
			arrValues.add(Helper.correctNull((String)hshValues.get("filename")));
			hshQueryValues.put("size","1");
			hshQuery.put("strQueryId","ins_pdfdocument");
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		
		}
		catch(Exception e)
		{
			throw new EJBException("Error in updateAttachedDocument "+e.getMessage());	
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				 
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection in updateAttachedDocument"+e.getMessage());
			}
		}
		return true;
	}
	
	public HashMap viewDocumentPdfImage(HashMap hshValues) 
	{
		ResultSet rs=null;
		HashMap hshResult=new HashMap();
		String strQuery = "";	
		String strdocumentcode=null;
		Connection conn = null;
		Statement stmt = null;
		
		try
		{		
			
			strdocumentcode=correctNull((String)hshValues.get("document_code"));
			if(!strdocumentcode.equalsIgnoreCase(""))
			{
				AttachPhotoBean attatchPhotoBean = new AttachPhotoBean();
				conn=getConnection();
				stmt=conn.createStatement();
				strQuery=SQLParser.getSqlQuery("sel_pdfdocument^"+strdocumentcode);
				
				StringTokenizer st=new StringTokenizer(strQuery,"#");
				if(st.hasMoreElements()){
					st.nextElement();
					strQuery=(String)st.nextElement();
				}
				rs=stmt.executeQuery(strQuery);
				String strFileExt="",mimeType="";
				if(rs.next())
				{
					Blob Blobdata =rs.getBlob("pdf_documentimage");
					String strDocName = Helper.correctNull(rs.getString("pdf_documentname"));
					if(!strDocName.equals(""))
					{
						if(strDocName.length()>=4)
						{
							strFileExt = strDocName.substring(strDocName.length() - 3, strDocName.length());
							mimeType =attatchPhotoBean.getMimeType(strFileExt.trim());
						}
						else
						{
							mimeType = "application/stream";
						}
					}					
					if(Blobdata!=null)
					{
		                byte[] byteDocData = Blobdata.getBytes(1, (int) Blobdata.length());
						if(byteDocData!=null)
						{
							ByteArrayOutputStream baos = new ByteArrayOutputStream();
							baos.write(byteDocData);
							hshResult.put("FILE_STREAM_NAME",strDocName);
							hshResult.put("FILE_STREAM_DISPOSITION_TYPE","inline");
							hshResult.put("FILE_STREAM", byteDocData);
							hshResult.put("FILE_STREAM_TYPE",mimeType);
						}
					}
					else
					{
						hshResult.put("Message","No Document Attached To View");
					}
				}
				else
				{
					hshResult.put("Message","No Document Attached To View");
				}
			}
		}
		catch(Exception e)
		{
			throw new EJBException("Error in viewDocumentScanningImage"+e.getMessage());		
		}
		finally
		{
			try
			{
				if(conn!=null)
				{
					conn.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(rs!=null)
				{
					rs.close();
				}
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection (viewDocumentScanningImage)"+e.getMessage());
			}
		}
		return hshResult;
	}
	
	public HashMap getAnnexureI(HashMap hshReqValues) 
	{
		ResultSet rs 		= null;
		HashMap hshValues	= new HashMap();
		String strAppId="",strAppNo="", strOrgCode="";
		String strValuesIn="",strAmountValue="",strAmtValueIn="";
		double dblCDRatio	= 0.00,dblPerTotAdvance	= 0.00;
		try
		{
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			//Branch Name
			rs	= DBUtils.executeLAPSQuery("selmcbReportprint^"+strAppNo);
			
			if(rs.next())
			{
				hshValues.put("org_name", Helper.correctNull(correctNull(rs.getString("org_name"))));
				hshValues.put("org_opendate", correctNull(rs.getString("org_opendate")));
			}
			
			//Orgcode
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strOrgCode 	= correctNull(rs.getString("app_orgcode"));
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
				
				if(Helper.correctNull(rs.getString("APP_ORGLEVEL")).equalsIgnoreCase("C")||Helper.correctNull(rs.getString("APP_ORGLEVEL")).equalsIgnoreCase("D"))
				{
					if(rs != null)
					{
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_pertainingbr^" + strAppNo);
					if(rs.next())
					{
						hshValues.put("org_name", correctNull(rs.getString("org_name")));
						hshValues.put("org_opendate", correctNull(rs.getString("org_opendate")));
						strOrgCode=Helper.correctNull(rs.getString("org_code"));
					}
				}
			}
			
			if(!strOrgCode.equals(""))
			{
				strOrgCode	= strOrgCode.substring(0, 6)+"%";
			}
			
			//Values In
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			
			hshValues.put("strValuesIn", strValuesIn);
			
			
			rs	= DBUtils.executeLAPSQuery("sel_amountvalue^"+strAppNo);
			if(rs.next())
			{
		      strAmountValue= Helper.correctNull(rs.getString("com_amountvalue"));
		     hshValues.put("strAmountValue", strAmountValue);
			}
			if(strAmountValue.equalsIgnoreCase("C"))
			{strAmtValueIn ="Crore";}
			else if(strAmountValue.equalsIgnoreCase("L")){strAmtValueIn ="Lacs";}
			else {strAmtValueIn ="Rs";}
			
			hshValues.put("strAmtValueIn", strAmtValueIn);
			
			//Region
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_region^"+strOrgCode);
			if(rs.next())
			{
				hshValues.put("Reg_org_name",Helper.changetoTitlecase(correctNull(rs.getString("org_name"))));
			}
			
			//Brief Background
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("com_advanceason", correctNull(rs.getString("com_advanceason")));
				hshValues.put("com_advanceamt", correctNull(rs.getString("com_advanceamt")));
				hshValues.put("com_depositason", correctNull(rs.getString("com_depositason")));
				hshValues.put("com_depositamt", correctNull(rs.getString("com_depositamt")));
				hshValues.put("com_npaason", correctNull(rs.getString("com_npaason")));
				hshValues.put("com_npaamt", correctNull(rs.getString("com_npaamt")));
				hshValues.put("com_inspectiondate",correctNull(rs.getString("com_inspectiondate")));
				hshValues.put("com_inspectionamount",correctNull(rs.getString("com_inspectionamount")));
				
				if(Double.parseDouble(Helper.correctDouble(correctNull(rs.getString("com_depositamt"))))!=0.00)
				dblCDRatio			= (Double.parseDouble(Helper.correctDouble(correctNull(rs.getString("com_advanceamt"))))*100)/Double.parseDouble(Helper.correctDouble(correctNull(rs.getString("com_depositamt"))));
				if(Double.parseDouble(Helper.correctDouble(correctNull(rs.getString("com_advanceamt"))))!=0.00)
				dblPerTotAdvance	= (Double.parseDouble(Helper.correctDouble(correctNull(rs.getString("com_npaamt"))))*100)/Double.parseDouble(Helper.correctDouble(correctNull(rs.getString("com_advanceamt"))));
			}
			
			hshValues.put("dblCDRatio", String.valueOf(dblCDRatio));
			hshValues.put("dblPerTotAdvance", String.valueOf(dblPerTotAdvance));
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureI login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	
	public HashMap getAnnexureII(HashMap hshReqValues) 
	{
		ResultSet rs 		= null, rs1	= null,rs2=null,rs3=null,rs4=null,rs6=null;
		HashMap hshValues	= new HashMap();
		String strAppId="",strAppNo="",strValuesIn="", strVal="", strType="", strPromoterChk="", strVal1="",strVal2="",strNW="",strValuesIn1="";
		String strAmountValue="",strAmtValueIn="";
		HashMap hshReqDetails=null;
		HashMap hshRespDetails=null;				
		ArrayList arrRow	= new ArrayList();
		ArrayList arrCol	= new ArrayList();
		ArrayList arrRowPrmo	= new ArrayList();
		ArrayList arrColPrmo	= new ArrayList();
		ArrayList arrRowDefault	= new ArrayList();
		ArrayList arrColDefault	= new ArrayList();
		ArrayList arrRowEcgc	= new ArrayList();
		ArrayList arrColEcgc	= new ArrayList();
		ArrayList arrWLDefaulterRow	= new ArrayList();
		ArrayList arrWLDefaulterCol	= new ArrayList();
		ArrayList arrRestRow	= new ArrayList();
		ArrayList arrRestCol	= new ArrayList();
		ArrayList arrRowBor=new ArrayList();
		ArrayList arrColBor= null;
		
		String strCommentMgmtSno[]	= {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"};
		String strQuery="";
		String arrBranchtype[]={"1","2","3"};
		String strTypeArr[]	= null;
		String strTypecheck[]	= null;
		String strLoanType="";
		String strgstnumber="",srwhethergstn="",strexempted="";
		String strborrower="",strpurposeloan="",stragriallied="",strpermact="",strpermactelig="",
		strexposueelig="",strborroweravailed="",strborroweravailedelig="",strmsmerestscheme="",strmsmerestschemeelig="",strframework="",strframeworkelig="";
		
		try
		{
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			
			
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			if(rs!=null){rs.close();}
			
			//Values In
			if(strValuesIn.equals("C")){strValuesIn1			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn1	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn1	= "Rs";}
			
			hshValues.put("strValuesIn", strValuesIn1);
			
			rs	= DBUtils.executeLAPSQuery("sel_amountvalue^"+strAppNo);
			if(rs.next())
			{
		    strAmountValue= Helper.correctNull(rs.getString("com_amountvalue"));
		    hshValues.put("strAmountValue", strAmountValue);
			}
			
			if(strAmountValue.equalsIgnoreCase("C"))
			{strAmtValueIn ="Crore";}
			else if(strAmountValue.equalsIgnoreCase("L")){strAmtValueIn ="Lacs";}
			else{strAmtValueIn ="Rs";}
			
			hshValues.put("strAmtValueIn", strAmtValueIn);
			
			String strNewId="0";
			rs=DBUtils.executeLAPSQuery("findBorrowerOrgCom^"+strAppId);
			if(rs.next())
			{
				strNewId=Helper.correctNull((String)rs.getString("perapp_id"));
				arrColPrmo.add(strNewId);
				arrColPrmo.add(Helper.changetoTitlecase(Helper.correctNull(rs.getString("perapp_fname"))));
				arrColPrmo.add("A");
				arrRowPrmo.add(arrColPrmo);
			}
			if(rs!=null)
			{
				rs.close();
			}
			//Coapplicant,Promoters,Garunters;
			strQuery=SQLParser.getSqlQuery("selbeneficial^"+strAppId);
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				arrColBor=new ArrayList();
				arrColBor.add(Helper.correctNull((String)rs.getString("BEN_OWN_ID")));
				arrColBor.add(Helper.correctNull((String)rs.getString("BEN_OWN")));
				String identidoc=Helper.correctNull((String)rs.getString("ID_DOC"));
				strQuery=SQLParser.getSqlQuery("selectidentificationdoc^"+identidoc);
				rs2=DBUtils.executeQuery(strQuery);
				if(rs2.next())
				{
				arrColBor.add(Helper.correctNull((String)rs2.getString("STAT_DATA_DESC1")));
				}
				if(rs2!=null)
				{
					rs2.close();
				}
				arrColBor.add(Helper.correctNull((String)rs.getString("ID_DOC_NUM")));
				arrColBor.add(Helper.correctNull((String)rs.getString("PERC_SHARES_HELD")));
				String relatborr=Helper.correctNull((String)rs.getString("RELA_BORR"));
				strQuery=SQLParser.getSqlQuery("selectrelationshipwithborrower^"+relatborr);
				rs2=DBUtils.executeQuery(strQuery);
				if(rs2.next())
				{
				arrColBor.add(Helper.correctNull((String)rs2.getString("CBS_STATIC_DATA_DESC")));
				}
				if(rs2!=null)
				{
					rs2.close();
				}
				arrColBor.add(Helper.correctNull((String)rs.getString("NO_SHARES_HELD")));
				arrColBor.add(Helper.correctNull((String)rs.getString("GUART_AVB")));
				arrRowBor.add(arrColBor);
			}
			hshValues.put("arrRowBor", arrRowBor);
			String strCoAppExID="",strCoAppExType="",strCoAppID="";
			
			rs	= DBUtils.executeLAPSQuery("compromoterselectionpromoters^"+strAppNo);
			while(rs.next())
			{
				strType			= correctNull(rs.getString("com_compdttype"));
				strCoAppID			= correctNull(rs.getString("com_oldlapsid"));
				if((strCoAppID.equalsIgnoreCase(strCoAppExID)) && (strType.equalsIgnoreCase(strCoAppExType)))
					continue;
				if(!strType.equals(""))
				{
					arrColPrmo= new ArrayList();
					arrColPrmo.add(Helper.correctInt(rs.getString("com_compdtappid")));
					arrColPrmo.add(Helper.changetoTitlecase(Helper.correctNull(rs.getString("com_compdtfname"))));
					arrColPrmo.add(strType);
					arrColPrmo.add(Helper.correctNull(rs.getString("COM_COMPRELATIONSHIP")));
					arrRowPrmo.add(arrColPrmo);
				}
				
				strCoAppExID			= correctNull(rs.getString("com_oldlapsid"));
				strCoAppExType			= correctNull(rs.getString("com_compdttype"));
			}
			if(rs!=null){rs.close();}

			// Group management people
			rs	= DBUtils.executeLAPSQuery("com_groupmanagement_people^"+strAppNo);
			while(rs.next())
			{
				strType	= correctNull(rs.getString("COMAPP_DIVISIONTYPE"));
				if(!strType.equals(""))
				{
					arrColPrmo= new ArrayList();
					arrColPrmo.add(Helper.correctInt(rs.getString("comapp_div_appid")));
					arrColPrmo.add(Helper.changetoTitlecase(Helper.correctNull(rs.getString("COMAPP_DIV_NAME"))));
					arrColPrmo.add(strType);
					arrColPrmo.add(Helper.changetoTitlecase(Helper.correctNull(rs.getString("COMAPP_RELATION"))));
					arrRowPrmo.add(arrColPrmo);
				}	
			}
			if(rs!=null){rs.close();} 
			
			//Customer Profile
			
			rs	= DBUtils.executeLAPSQuery("sel_common_customer^"+strNewId);
			if(rs.next())
			{
				hshValues.put("perapp_title",  Helper.changetoTitlecase(Helper.correctNull(rs.getString("perapp_title"))));
				hshValues.put("perapp_name", Helper.correctNull(rs.getString("perapp_fname")));
				hshValues.put("cominfo_commencement_date", correctNull(rs.getString("cominfo_commencement_date")));
				hshValues.put("cominfo_incorporation_date", correctNull(rs.getString("cominfo_incorporation_date")));
				hshValues.put("perapp_dob", correctNull(rs.getString("perapp_dob")));
				hshValues.put("perapp_banksince", correctNull(rs.getString("perapp_banksince")));
				hshValues.put("COMINFO_GSTINREG", correctNull(rs.getString("COMINFO_GSTINREG")));
				hshValues.put("PERAPP_MSE_REGNO", correctNull(rs.getString("PERAPP_MSE_REGNO")));
				hshValues.put("COMINFO_GSTIN", correctNull(rs.getString("COMINFO_GSTIN")));
				hshValues.put("PERAPP_UDYOG_AADHAR", correctNull(rs.getString("PERAPP_UDYOG_AADHAR")));
				hshValues.put("perapp_panno", Helper.correctNull(rs.getString("perapp_panno")));
				hshValues.put("cominfo_cin", Helper.correctNull(rs.getString("cominfo_cin")));
				hshValues.put("PERAPP_LEGAL_ENTITYID", Helper.correctNull(rs.getString("PERAPP_LEGAL_ENTITYID")));
				hshValues.put("PERAPP_LEGAL_EXPIRYDATE", Helper.correctNull(rs.getString("PERAPP_LEGAL_EXPIRYDATE")));
				hshValues.put("COMINFO_IEC", Helper.correctNull(rs.getString("COMINFO_IEC")));
				hshValues.put("cominfo_employees_asondate", Helper.correctNull(rs.getString("cominfo_employees_asondate")));
				hshValues.put("cominfo_total_employees", Helper.correctNull(rs.getString("cominfo_total_employees")));
				if(rs1!=null){rs1.close();}
				rs1	= DBUtils.executeLAPSQuery("sel_CBSStaticDataPassingCode^2^"+correctNull(rs.getString("perapp_constitution")));
				if(rs1.next())
				{
					//if(correctNull((String)rs1.getString("cbs_static_data_code")).trim().equals(correctNull(rs.getString("perapp_constitution")).trim()))
					//{
						hshValues.put("cbs_static_data_desc", correctNull(rs1.getString("cbs_static_data_desc")));
					//}
				}
				if(rs1!=null)
				{
					rs1.close();
				}
				rs1	= DBUtils.executeLAPSQuery("selstatdatabyiddesc^110^"+correctNull(rs.getString("perapp_relation_bankstaff")));
				if(rs1.next())
				{
					//if(correctNull((String)rs1.getString("stat_data_desc")).trim().equals(correctNull(rs.getString("perapp_relation_bankstaff")).trim()))
					//{
						hshValues.put("stat_data_desc1", Helper.correctNull(rs1.getString("stat_data_desc1")));
					//}
				}
				hshValues.put("PERAPP_UDYAM_REGNO",Helper.correctNull((String)rs.getString("PERAPP_UDYAM_REGNO")));
				hshValues.put("PERAPP_SALES_TURNOVER",Helper.correctNull((String)rs.getString("PERAPP_SALES_TURNOVER")));
				hshValues.put("PERAPP_SALES_TURNOVER_DATE",Helper.correctNull((String)rs.getString("PERAPP_SALES_TURNOVER_DATE")));
				hshValues.put("PERAPP_CRITERIA_SALES_TURNOVER",Helper.correctNull((String)rs.getString("PERAPP_CRITERIA_SALES_TURNOVER")));
				rs2=DBUtils.executeLAPSQuery("selmiscust^243^"+Helper.correctNull((String)rs.getString("PERAPP_CRITERIA_SALES_TURNOVER")));
				if(rs2.next())
				{	
					hshValues.put("PERAPP_CRITERIA_SALES_TURNOVER", Helper.correctNull(rs2.getString("stat_data_desc1")));

				}
				hshValues.put("PERAPP_CERTIFICATION_DATE",Helper.correctNull((String)rs.getString("PERAPP_CERTIFICATION_DATE")));
				rs2=DBUtils.executeLAPSQuery("selmiscust^249^"+Helper.correctNull((String)rs.getString("PERAPP_MSME_CLASSIFICATION")));
				if(rs2.next())
				{	
					hshValues.put("PERAPP_MSME_CLASSIFICATION", Helper.correctNull(rs2.getString("stat_data_desc1")));

				}
				rs2=DBUtils.executeLAPSQuery("selmiscust^109^"+Helper.correctNull((String)rs.getString("perapp_status")));
				if(rs2.next())
				{	
					hshValues.put("perapp_status", Helper.correctNull(rs2.getString("stat_data_desc1")));

				}
				hshValues.put("perapp_relat_staffid", Helper.correctNull((String) rs
						.getString("perapp_relat_staffid")));
				rs3=DBUtils.executeLAPSQuery("selmiscust^110^"+Helper.correctNull((String)rs.getString("perapp_relation_bankstaff")));
				if(rs3.next())
				{	
					hshValues.put("perapp_relation_bankstaff", Helper.correctNull(rs3.getString("stat_data_desc1")));

				}
				if(Helper.correctNull((String)rs.getString("perapp_relation_bankstaff")).equalsIgnoreCase("005")||Helper.correctNull((String)rs.getString("perapp_relation_bankstaff")).equalsIgnoreCase("006")){
					hshValues.put("perapp_relation_staffname", Helper.correctNull((String) rs.getString("perapp_relation_staffname")));

			   }else{
				rs4=DBUtils.executeLAPSQuery("selmiscust^153^"+Helper.correctNull((String)rs.getString("perapp_relation_staffname")));
				if(rs4.next())
				{	
					hshValues.put("perapp_relation_staffname", Helper.correctNull(rs4.getString("stat_data_desc1")));

				}
			   }
				rs1=DBUtils.executeLAPSQuery("selmiscust^111^"+Helper.correctNull((String)rs.getString("perapp_blood_relation")));
				if(rs1.next())
				{	
					hshValues.put("perapp_blood_relation", Helper.correctNull(rs1.getString("stat_data_desc1")));

				}
				hshValues.put("PEREMP_ID", Helper.correctNull((String) rs
						.getString("PEREMP_ID")));
				hshValues.put("PEREMP_ESTABLISH", Helper.correctNull((String) rs
						.getString("PEREMP_ESTABLISH")));
				hshValues.put("peremp_department", Helper.correctNull((String) rs
						.getString("peremp_department")));
				hshValues.put("peremp_retdate", Helper.correctNull((String) rs
						.getString("peremp_retdate")));
				hshValues.put("perapp_relation_bankstaff_val", Helper.correctNull((String) rs
						.getString("perapp_relation_bankstaff")));
				hshValues.put("indinfo_is_staff", Helper.correctNull((String) rs
						.getString("indinfo_is_staff")));
				hshValues.put("PERAPP_INVOCDATE", Helper.correctNull((String) rs
						.getString("PERAPP_INVOCDATE")));
				
				hshValues.put("indinfo_dateof_joining", Helper.correctNull((String) rs
						.getString("indinfo_dateof_joining")));
				hshValues.put("indinfo_staff_id", Helper.correctNull((String) rs
						.getString("indinfo_staff_id")));
			}
			
			//Indv Query to retrieve all group info by Guhan 
			arrRowPrmo = new ArrayList();
			if(rs!=null)
			{
				rs.close();
			}
			rs=DBUtils.executeLAPSQuery("sel_All_GroupInfo^"+strAppId+"^"+strAppNo+"^"+strAppNo);
			while(rs.next())
			{
				arrColPrmo = new ArrayList();
				arrColPrmo.add(Helper.correctNull((String)rs.getString("perapp_id")));
				arrColPrmo.add(Helper.changetoTitlecase(Helper.correctNull(rs.getString("perapp_fname"))));
				arrColPrmo.add(Helper.correctNull((String)rs.getString("strtype")));
				arrColPrmo.add(Helper.correctNull((String)rs.getString("relationtype")));
				arrRowPrmo.add(arrColPrmo);
			}
			
			arrRow = new ArrayList();
			for(int i=0;i<arrRowPrmo.size();i++)
			{
				arrColPrmo=(ArrayList)arrRowPrmo.get(i);
				strPromoterChk	= "false";
				strType=Helper.correctNull((String)arrColPrmo.get(2));
				strTypecheck = strType.split("@");
				for(int j=0;j<strTypecheck.length;j++)
				{
						if(strPromoterChk.equalsIgnoreCase("false"))
						{
							strPromoterChk	= "true";
							rs	= DBUtils.executeLAPSQuery("sel_common_customer_newid^"+Helper.correctInt((String)arrColPrmo.get(0))+"^"+Helper.correctInt((String)arrColPrmo.get(0)));
							if(rs.next())
							{
								rs1	= DBUtils.executeLAPSQuery("selstatdatabyiddesc^110^"+correctNull(rs.getString("perapp_relation_bankstaff")));
								while(rs1.next())
								{
									//if(correctNull((String)rs1.getString("stat_data_desc")).trim().equals(correctNull((String)rs.getString("perapp_relation_bankstaff")).trim()))
									//{ 
										arrCol = new ArrayList();
										arrCol.add(arrColPrmo.get(0));
										arrCol.add(arrColPrmo.get(1));
										if(correctNull((String)rs1.getString("STAT_DATA_DESC")).equalsIgnoreCase("006"))
										{
											arrCol.add("Not Related");
										}
										else{
											arrCol.add(Helper.changetoTitlecase(Helper.correctNull(rs1.getString("stat_data_desc1"))));
										}
										arrRow.add(arrCol);
									//}
								}
							}
							else
							{
								arrCol = new ArrayList();
								arrCol.add(arrColPrmo.get(0));
								arrCol.add(arrColPrmo.get(1));
								arrCol.add("Not Related");
								arrRow.add(arrCol);
							}
						}
				}
			}
			hshValues.put("Relationship",arrRow);

			//Address of the customer Admin office/Registerd office
			String Address="",strAd1="",strAd2="",strAd3="",strCity="";
			String strDis="",strState="",app_constitution="",strZip="";
			 MastApplicantBean msb=new MastApplicantBean();
			 hshReqDetails=new HashMap();
			 hshReqDetails.put("strPageType", "annexure");
			 hshReqDetails.put("hidapplicantnewid", strNewId);
			 hshRespDetails=msb.getAddressDetails(hshReqDetails); 
			 hshValues.put("hshRespDetails", hshRespDetails);

			
			//Factory Details
			if(rs!=null){rs.close();}
			int intSize=arrBranchtype.length;
			arrRow=new ArrayList();
			arrCol = new ArrayList();
			for(int l =0;l<intSize;l++)
    		{
				arrRow=new ArrayList();
				rs	= DBUtils.executeLAPSQuery("selallfactorydetailsbytype^"+strNewId+"^"+arrBranchtype[l]);
				while(rs.next())
				{
					arrCol = new ArrayList(); 
					arrCol.add(correctNull((String)rs.getString("comapp_detailtype")));//0
					arrCol.add(correctNull((String)rs.getString("comapp_name")).toUpperCase());//1
					arrCol.add(correctNull((String)rs.getString("comapp_add")).toUpperCase());//2		
					String strCitycode = Helper.correctNull((String)rs.getString("comapp_city"));//4
					String strCityDesc="";
					if(!strCitycode.equalsIgnoreCase(""))
					{				
					if(rs1!=null)
					{
						rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("sel_citynamebycode^"+strCitycode);
					if(rs1.next())
					{
						
						strCityDesc = Helper.correctNull((String)rs1.getString("city_name"));					
					}
					}
					arrCol.add(strCitycode);//5
					arrCol.add(strCityDesc.toUpperCase());//6
					
					String strStatecode = Helper.correctNull((String)rs.getString("comapp_state"));	
					String strStateDesc="";
					if(!strStatecode.equalsIgnoreCase(""))
					{				
					if(rs1!=null)
					{
						rs1.close();
					}
					rs2=DBUtils.executeLAPSQuery("sel_statenamebycode^"+strStatecode);
					if(rs2.next())
					{
						
						strStateDesc = Helper.correctNull((String)rs2.getString("state_name"));					
					}
					}
					arrCol.add(strStatecode);//7
					arrCol.add(strStateDesc.toUpperCase());//8
					arrCol.add(correctNull((String)rs.getString("comapp_pincode")));//9
					arrRow.add(arrCol);
				}
				if(arrCol.size()>0)
				{
					hshValues.put("arrBranchRow"+l, arrRow);
				}
				arrCol = new ArrayList();
    		}
			
			if(rs!=null){rs.close();}

			//Defaulter's List
			boolean boolDefaulterFlag=false;
			boolean boolECGCIFlag=false;
			String strECGCIDate="",strDefaulterDate="";
			for(int i=0;i<arrRowPrmo.size();i++)
			{
				arrColPrmo=(ArrayList)arrRowPrmo.get(i);
				strPromoterChk	= "false";
				strType=Helper.correctNull((String)arrColPrmo.get(2));
				strTypecheck = strType.split("@");
				for(int j=0;j<strTypecheck.length;j++)
				{
						if(strPromoterChk.equalsIgnoreCase("false"))
						{
							strPromoterChk	= "true";
							String strDefsuitfill="";
							rs	= DBUtils.executeLAPSQuery("cusdefaulter_sel^"+Helper.correctInt((String)arrColPrmo.get(0))+"^"+Helper.correctInt((String)arrColPrmo.get(0)));
							if(rs.next())
							{	
								strVal	= correctNull(rs.getString("def_rbidefis"));
								if(strVal.equals("Y"))
								{
									boolDefaulterFlag=true;
									strVal	= "Yes";
									arrColDefault = new ArrayList();
									arrColDefault.add(arrColPrmo.get(0));
									arrColDefault.add(arrColPrmo.get(1));
									arrColDefault.add(strVal);
									arrColDefault.add(Helper.correctNull(rs.getString("asonRBIdate")));
									arrColDefault.add(Helper.correctNull(Helper.CLOBToString((rs.getClob("def_rbidefcomm")))));
									if(Helper.correctNull(Helper.correctNull(rs.getString("DEF_SUITFILED"))).equalsIgnoreCase("Y")){
										strDefsuitfill="Yes";
									}else{
										strDefsuitfill="No";
									}
									arrColDefault.add(strDefsuitfill);
									arrColDefault.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("DEF_SUITFILEDCOMM"))));
									arrRowDefault.add(arrColDefault);
									
								}
								else
								{
									strVal	= "No";
									arrColDefault = new ArrayList();
									arrColDefault.add(arrColPrmo.get(0));
									arrColDefault.add(arrColPrmo.get(1));
									arrColDefault.add(strVal);
									if(strDefaulterDate.equalsIgnoreCase(""))
										strDefaulterDate=Helper.correctNull(rs.getString("asonRBIdate"));
									arrColDefault.add(Helper.correctNull(rs.getString("asonRBIdate")));
									arrColDefault.add("Not applicable");
									if(Helper.correctNull(Helper.correctNull(rs.getString("DEF_SUITFILED"))).equalsIgnoreCase("Y")){
										strDefsuitfill="Yes";
									}else{
										strDefsuitfill="No";
									}
									arrColDefault.add(strDefsuitfill);
									arrColDefault.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("DEF_SUITFILEDCOMM"))));
									arrRowDefault.add(arrColDefault);
								}
								
									strVal	= "";
									strVal	= correctNull(rs.getString("def_ecgsepis"));
									
									if(strVal.equals("Y"))
									{
										boolECGCIFlag=true;
										strVal	= "Yes";
										arrColEcgc = new ArrayList();
										arrColEcgc.add(arrColPrmo.get(0));
										arrColEcgc.add(arrColPrmo.get(1));
										arrColEcgc.add(strVal);
										arrColEcgc.add(Helper.correctNull(rs.getString("asonECGCIdate")));
										arrColEcgc.add(Helper.correctNull(Helper.CLOBToString((rs.getClob("def_ecgsepcomm")))));
										arrRowEcgc.add(arrColEcgc);
									}
									else
									{
										if(strECGCIDate.equalsIgnoreCase(""))
											strECGCIDate=Helper.correctNull(rs.getString("asonECGCIdate"));
										strVal	= "No";
										arrColEcgc = new ArrayList();
										arrColEcgc.add(arrColPrmo.get(0));
										arrColEcgc.add(arrColPrmo.get(1));
										arrColEcgc.add(strVal);
										arrColEcgc.add(Helper.correctNull(rs.getString("asonECGCIdate")));
										arrColEcgc.add("Not Applicable");
										arrRowEcgc.add(arrColEcgc);
									}
									
									if(correctNull(rs.getString("def_wildefis")).equals("Y"))
									{
										boolECGCIFlag=true;
										strVal	= "Yes";
										arrWLDefaulterCol = new ArrayList();
										arrWLDefaulterCol.add(arrColPrmo.get(0));
										arrWLDefaulterCol.add(arrColPrmo.get(1));
										arrWLDefaulterCol.add(strVal);
										arrWLDefaulterCol.add(Helper.correctNull(rs.getString("asonWillfuldate")));
										arrWLDefaulterCol.add(Helper.correctNull(Helper.CLOBToString((rs.getClob("def_wilddefcomm")))));
										arrWLDefaulterRow.add(arrWLDefaulterCol);
									}
									else
									{
										strVal	= "No";
										arrWLDefaulterCol = new ArrayList();
										arrWLDefaulterCol.add(arrColPrmo.get(0));
										arrWLDefaulterCol.add(arrColPrmo.get(1));
										arrWLDefaulterCol.add(strVal);
										arrWLDefaulterCol.add(Helper.correctNull(rs.getString("asonWillfuldate")));
										arrWLDefaulterCol.add("Not Applicable");
										arrWLDefaulterRow.add(arrWLDefaulterCol);
									}
									
									if(Helper.correctNull(Helper.correctNull(rs.getString("DEF_SUITFILED"))).equalsIgnoreCase("Y"))
									{
										hshValues.put("com_whtrsuitactioncon","Yes");	
									}else if(Helper.correctNull(Helper.correctNull(rs.getString("DEF_SUITFILED"))).equalsIgnoreCase("N"))
									{
										hshValues.put("com_whtrsuitactioncon","No");	
									}
									hshValues.put("com_whtrsuitaction",Helper.correctNull(Helper.CLOBToString(rs.getClob("DEF_SUITFILEDCOMM"))));
							}
						}
				}
			}
			hshValues.put("arrRowDefault", arrRowDefault);
			hshValues.put("arrRowEcgc", arrRowEcgc);
			hshValues.put("strDefaulterFlag", boolDefaulterFlag+"");
			hshValues.put("strECGCIFlag", boolECGCIFlag+"");
			hshValues.put("strECGCIDate", strECGCIDate);
			hshValues.put("strDefaulterDate", strDefaulterDate);
			hshValues.put("arrRowWFDefault", arrWLDefaulterRow);
			if(rs!=null){rs.close();}
			
			boolean boolCRILCFlag=false;
			//CIBIL
			arrRow	= new ArrayList();
			for(int i=0;i<arrRowPrmo.size();i++)
			{
				arrColPrmo=(ArrayList)arrRowPrmo.get(i);
				strPromoterChk	= "false";
				String strSMACategory="";
				strType=Helper.correctNull((String)arrColPrmo.get(2));
				strTypecheck = strType.split("@");
				for(int j=0;j<strTypecheck.length;j++)
				{
						if(strPromoterChk.equalsIgnoreCase("false"))
						{
							String strCIBILScore="",strCRIFScore="";
							strPromoterChk	= "true";			
							rs	= DBUtils.executeLAPSQuery("cuscibildetails_sel^"+Helper.correctInt((String)arrColPrmo.get(0))+"^"+Helper.correctInt((String)arrColPrmo.get(0)));
							if(rs.next())
							{
								strVal	= correctNull(rs.getString("cibil_rat_status")).trim();
								StringBuffer strCIBILDetails=new StringBuffer();
								StringBuffer strCRIFDetails=new StringBuffer();
								
								strCIBILScore=Helper.correctNull(rs.getString("cibil_score"));
								strCRIFScore=Helper.correctNull(rs.getString("CRIF_SCORE"));
								
								if(strVal.equalsIgnoreCase("Y")){	strVal	= "Yes";}
								else if(strVal.equalsIgnoreCase("N")){strVal	= "No";}
								else{strVal	= "";}
									
								if(correctNull(rs.getString("cibil_rat_status")).trim().equalsIgnoreCase("Y"))
								{
									arrCol = new ArrayList();
									arrCol.add(arrColPrmo.get(0));
									arrCol.add(arrColPrmo.get(1)); //1
									arrCol.add(strVal);//2
									arrCol.add(Helper.correctNull(rs.getString("cibil_reporteddate")));//3
									arrCol.add(Helper.correctNull(rs.getString("cibil_score")));//4
									arrCol.add(Helper.correctNull((rs.getString("cibil_details"))));//5
									if(correctNull(rs.getString("cibil_smacategory")).trim().equalsIgnoreCase("Y")){
										strSMACategory="Yes";
										boolCRILCFlag=true;

									}
									else if(correctNull(rs.getString("cibil_smacategory")).trim().equalsIgnoreCase("NA")){
										strSMACategory="Not Applicable";
									}
									else{
										strSMACategory="No";
									}
									arrCol.add(Helper.correctNull(strSMACategory));//6
									arrCol.add(Helper.correctNull((rs.getString("cibil_smadetails"))));//7
									arrCol.add(strTypecheck[j]);//8
									arrCol.add(Helper.correctNull((rs.getString("cibil_CRILC"))));//9
									
									if(correctNull(rs.getString("CRIF_REFERED")).trim().equalsIgnoreCase("Y")){
										arrCol.add("Yes");//10
										arrCol.add(Helper.correctNull(rs.getString("CRIF_SCORE")));//11
										arrCol.add(Helper.correctNull(rs.getString("CRIF_DETAILS")));//12
										arrCol.add(Helper.correctNull(rs.getString("CRIF_DATE")));//13
									}
									else if(correctNull(rs.getString("CRIF_REFERED")).trim().equalsIgnoreCase("NA")){
										arrCol.add("Not Applicable");//10
										arrCol.add("");//11
										arrCol.add("");//12
										arrCol.add("");//13
									}
									else{
										arrCol.add("No");//10
										arrCol.add("");//11
										arrCol.add("");//12
										arrCol.add("");//13
									}
									
									if(rs2!=null)
										rs2.close();
									rs2=DBUtils.executeLAPSQuery("sel_cuscibildetails1^"+Helper.correctInt((String)arrColPrmo.get(0))+"^"+Helper.correctInt((String)arrColPrmo.get(0)));
									while(rs2.next())
									{
										if(Helper.correctNull(rs2.getString("cibil_rat_status")).equalsIgnoreCase("Y") && (Integer.parseInt(Helper.correctInt(rs2.getString("cibil_score")))!=Integer.parseInt(Helper.correctInt(strCIBILScore))))
										{
											if(!correctNull(rs.getString("cibil_score")).equalsIgnoreCase(Helper.correctNull(rs2.getString("cibil_score"))) && 
													!correctNull(rs.getString("cibil_reporteddate")).equalsIgnoreCase(Helper.correctNull(rs2.getString("cibil_reporteddate"))))
											{
												strCIBILDetails.append(Helper.correctNull(rs2.getString("cibil_score"))).append("-").append(Helper.correctNull(rs2.getString("cibil_reporteddate"))).append("@");
												strCIBILScore=Helper.correctInt(rs2.getString("cibil_score"));
											}
										}
										if(Helper.correctNull(rs2.getString("CRIF_REFERED")).equalsIgnoreCase("Y") && (Integer.parseInt(Helper.correctInt(rs2.getString("CRIF_SCORE")))!=Integer.parseInt(Helper.correctInt(strCRIFScore))))
										{
											if(!correctNull(rs.getString("crif_score")).equalsIgnoreCase(Helper.correctNull(rs2.getString("crif_score"))) && 
													!correctNull(rs.getString("crif_date")).equalsIgnoreCase(Helper.correctNull(rs2.getString("crif_date"))))
											{
												strCRIFDetails.append(Helper.correctNull(rs2.getString("CRIF_SCORE"))).append("-").append(Helper.correctNull(rs2.getString("CRIF_DATE"))).append("@");
												strCRIFScore=Helper.correctInt(rs2.getString("CRIF_SCORE"));
											}
										}
									}
									
									arrCol.add(strCIBILDetails.toString());
									arrCol.add(strCRIFDetails.toString());

									arrRow.add(arrCol);
								}
								else
								{
									arrCol = new ArrayList();
									arrCol.add(arrColPrmo.get(0));
									arrCol.add(arrColPrmo.get(1));
									arrCol.add(strVal);
									arrCol.add(Helper.correctNull(rs.getString("cibil_reporteddate")));
									arrCol.add("");
									arrCol.add("");
									if(correctNull(rs.getString("cibil_smacategory")).trim().equalsIgnoreCase("Y")){
										strSMACategory="Yes";

									}
									else if(correctNull(rs.getString("cibil_smacategory")).trim().equalsIgnoreCase("NA")){
										strSMACategory="Not Applicable";
									}
									else{
										strSMACategory="No";
									}
									arrCol.add(Helper.correctNull(strSMACategory));//6
									arrCol.add(Helper.correctNull((rs.getString("cibil_smadetails"))));//7
									arrCol.add(strTypecheck[j]);//8
									arrCol.add(Helper.correctNull((rs.getString("cibil_CRILC"))));//9
									
									if(correctNull(rs.getString("CRIF_REFERED")).trim().equalsIgnoreCase("Y")){
										arrCol.add("Yes");//10
										arrCol.add(Helper.correctNull(rs.getString("CRIF_SCORE")));//11
										arrCol.add(Helper.correctNull(rs.getString("CRIF_DETAILS")));//12
										arrCol.add(Helper.correctNull(rs.getString("CRIF_DATE")));//13
									}
									else if(correctNull(rs.getString("CRIF_REFERED")).trim().equalsIgnoreCase("NA")){
										arrCol.add("Not Applicable");//10
										arrCol.add("");//11
										arrCol.add("");//12
										arrCol.add("");//13
									}
									else{
										arrCol.add("No");//10
										arrCol.add("");//11
										arrCol.add("");//12
										arrCol.add("");//13
									}
									
									if(rs2!=null)
										rs2.close();
									rs2=DBUtils.executeLAPSQuery("sel_cuscibildetails1^"+Helper.correctInt((String)arrColPrmo.get(0))+"^"+Helper.correctInt((String)arrColPrmo.get(0)));
									while(rs2.next())
									{
										if(Helper.correctNull(rs2.getString("cibil_rat_status")).equalsIgnoreCase("Y") && (Integer.parseInt(Helper.correctInt(rs2.getString("cibil_score")))!=Integer.parseInt(Helper.correctInt(strCIBILScore))))
										{
											strCIBILDetails.append(Helper.correctNull(rs2.getString("cibil_score"))).append("-").append(Helper.correctNull(rs2.getString("cibil_reporteddate"))).append("@");
											strCIBILScore=Helper.correctInt(rs2.getString("cibil_score"));
										}
										if(Helper.correctNull(rs2.getString("CRIF_REFERED")).equalsIgnoreCase("Y") && (Integer.parseInt(Helper.correctInt(rs2.getString("CRIF_SCORE")))!=Integer.parseInt(Helper.correctInt(strCRIFScore))))
										{
											strCRIFDetails.append(Helper.correctNull(rs2.getString("CRIF_SCORE"))).append("-").append(Helper.correctNull(rs2.getString("CRIF_DATE"))).append("@");
											strCRIFScore=Helper.correctInt(rs2.getString("CRIF_SCORE"));
										}
									}
									
									arrCol.add(strCIBILDetails.toString());
									arrCol.add(strCRIFDetails.toString());
									
									arrRow.add(arrCol);
								}
								hshValues.put("whtrCIBIL", strVal);
							}
						}
				}
			}
			hshValues.put("arrRowCIBIL", arrRow);
			hshValues.put("strCRILCFlag", boolCRILCFlag+"");
			ArrayList arrDuplicate=new ArrayList();
			
			String strEmpstatus="";
			strCoAppExID="";strCoAppExType="";strCoAppID="";
			//Promoter/ Director /Co-Obligants/ Guarantors
			arrRow=new ArrayList();
			arrCol= new ArrayList();
			
			
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selpromotorsfromappprof^"+strAppNo+"^"+strAppNo+"^"+strAppNo);
			
			while(rs.next())
			{
				
				if(arrDuplicate.contains(Helper.correctInt(rs.getString("com_oldlapsid"))) && !Helper.correctInt(rs.getString("com_oldlapsid")).equalsIgnoreCase(""))
					continue;
				else
					arrDuplicate.add(Helper.correctInt(rs.getString("com_oldlapsid")));	
				
				if(rs2!=null)
					rs2.close();
				rs2=DBUtils.executeLAPSQuery("selpromotrsdirectordetails^"+Helper.correctInt(rs.getString("com_compdtappid")));
				if(rs2.next())
				{
					arrCol.add(Helper.changetoTitlecase(correctNull(rs2.getString("appname"))));//0
					
					arrCol.add(correctNull(rs2.getString("age")));//1
					strVal	= correctNull(rs2.getString("perapp_constitution"));
					strVal2	= correctNull(rs2.getString("perapp_networthason"));
					strNW	= Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs2.getString("perapp_networth"))));
					strEmpstatus=correctNull(rs2.getString("perapp_employment"));
					if(strEmpstatus.equals("1") || strEmpstatus.equals("9"))
					{
						arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs2.getString("perinc_takehome")))));//2
					}
					else
					{
						arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs2.getString("perinc_year1_income")))));//2
					}
					arrCol.add("");//3
					arrCol.add(strNW);//4
					arrCol.add(strVal2);//5
					arrCol.add("");//6
					arrCol.add(Helper.correctNull(rs2.getString("PERINC_YEAREND1")));//7
					arrCol.add(Helper.correctNull(Helper.correctNull(rs.getString("COM_COMPBORRNAME"))));//8
					arrCol.add(Helper.correctNull(Helper.correctNull(rs.getString("DIN_Number"))));//9
					arrCol.add(Helper.correctNull(Helper.correctNull(rs.getString("COMAPP_PERSONAL_GUARANTEE"))));//10
					arrCol.add(Helper.correctNull(Helper.correctNull(rs2.getString("perapp_cbsid"))));//11

					
					if(arrCol.size()>0)
					{
						arrRow.add(arrCol);
					}
					arrCol= new ArrayList();
				}
				else
				{
					arrCol.add(Helper.changetoTitlecase(correctNull(rs.getString("COM_COMPBORRNAME"))));//0
					arrCol.add("");//1
					arrCol.add("");//2
					arrCol.add("");//3
					arrCol.add("");//4
					arrCol.add("");//5
					arrCol.add("");//6
					arrCol.add("");//7
					arrCol.add("");//8
					arrCol.add("");//9
					arrCol.add("");//10
					if(arrCol.size()>0)
					{
						arrRow.add(arrCol);
					}
					arrCol= new ArrayList();
				}
			}
			hshValues.put("arrPromoterRow", arrRow);
			
			//Co-Obligants/ Guarantors 
			arrRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("compromoterselectionpromoters^"+strAppNo);
			String strid="0";
			while(rs.next())
			{
				
				if(Helper.correctNull((String)hshReqValues.get("strProcessNoteFlag")).equalsIgnoreCase("ECNew"))
				{
					if(arrDuplicate.contains(Helper.correctInt(rs.getString("id"))))
						continue;
					else
						arrDuplicate.add(Helper.correctInt(rs.getString("id")));
				}
				
				strVal			= "";
				strEmpstatus="";
				strPromoterChk	= "false";
				arrCol	= new ArrayList();
				
				strType			= correctNull(rs.getString("com_compdttype"));
				
				strCoAppID			= correctNull(rs.getString("com_oldlapsid"));
				if((strCoAppID.equalsIgnoreCase(strCoAppExID)) && (strType.equalsIgnoreCase(strCoAppExType)))
				continue;
				/*if(!strType.equals(""))
				{
					strTypeArr			= strType.split("@");
				}*/
				/*
				if(strTypeArr!=null)
				{
					for(int i=0;i<strTypeArr.length;i++)
					{
						if(strTypeArr[i].equalsIgnoreCase("G")||strTypeArr[i].equalsIgnoreCase("CO"))
						{
							if(strPromoterChk.equals("false"))
							{
								strVal1	= strTypeArr[i];*/
								//strPromoterChk	= "true";
								arrCol.add(Helper.changetoTitlecase(correctNull(rs.getString("com_compdtfname"))));//0
								
								if(rs1!=null){rs1.close();}
								rs1= DBUtils.executeLAPSQuery("sel_presanactionage^"+Helper.correctInt(rs.getString("com_compdtappid")));
								
								if(rs1.next())
								{
									strid=Helper.correctInt(rs.getString("com_compdtappid"));
									arrCol.add(correctNull(rs1.getString("age")));//1
									strVal	= correctNull(rs1.getString("perapp_constitution"));
									strVal2	= correctNull(rs1.getString("perapp_networthason"));
									strNW	= Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("perapp_networth"))));
									strEmpstatus=correctNull(rs1.getString("perapp_employment"));

								}
								else
								{
									arrCol.add("0");
								}
								
								if(strEmpstatus.equals("1") || strEmpstatus.equals("9"))
								{
									if(rs1!=null){rs1.close();}
									rs1= DBUtils.executeLAPSQuery("pergetIncome1^"+Helper.correctInt(rs.getString("com_compdtappid")));
									
									if(rs1.next())
									{
										arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("perinc_takehome")))));//2
									}
									else
									{
										arrCol.add("0.00");
									}
									
								}
								else
								{
									if(rs1!=null){rs1.close();}
									rs1= DBUtils.executeLAPSQuery("pergetIncome1^"+Helper.correctInt(rs.getString("com_compdtappid")));
									
									if(rs1.next())
									{
										arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("perinc_year1_income")))));//2
									}
									else
									{
										arrCol.add("0.00");
									}
								}
								arrCol.add(Helper.changetoTitlecase(Helper.correctNull((String)rs.getString("com_comprelationship"))));//3
								arrCol.add(strNW);//4
								arrCol.add(strVal2);//5
								arrCol.add(strType);//6
								if(rs1!=null){rs1.close();}
								rs2= DBUtils.executeLAPSQuery("pergetIncome1^"+strid);
								
								if(rs2.next())
								{
									arrCol.add(Helper.correctNull(rs2.getString("PERINC_YEAREND1")));//7
								}
								else
								{
									arrCol.add("");
								}
								arrCol.add(Helper.correctNull(rs.getString("com_compborrname")));//8
								arrCol.add(Helper.correctInt(rs.getString("com_compdtappid")));//9
								arrCol.add(Helper.correctInt(rs.getString("COM_COMPBORRNAME")));//10
								

                               rs1= DBUtils.executeLAPSQuery("sel_presanactionage^"+Helper.correctInt(rs.getString("com_compdtappid")));
								
								if(rs1.next())
								{
								arrCol.add(correctNull(rs1.getString("PERAPP_CBSID")));//11
								}
								if(arrCol.size()>0)
								{
									arrRow.add(arrCol);
								}
								arrCol= new ArrayList();
							//}
						//}
					//}
				//}
								
				strCoAppExID			= correctNull(rs.getString("com_oldlapsid"));
				strCoAppExType			= correctNull(rs.getString("com_compdttype"));
				
			}
			hshValues.put("arrGuaRow", arrRow);
			
			
			//Co-Obligants/ Guarantors 
			/*arrRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("compromoterselectionpromoters^"+strAppNo);
			
			while(rs.next())
			{
				strVal			= "";
				strPromoterChk	= "false";
				arrCol	= new ArrayList();
				
				strType			= correctNull(rs.getString("com_compdttype"));
				if(!strType.equals(""))
				{
					strTypeArr			= strType.split("@");
				}
				
				if(strTypeArr!=null)
				{
					for(int i=0;i<strTypeArr.length;i++)
					{
						if(strTypeArr[i].equalsIgnoreCase("G")||strTypeArr[i].equalsIgnoreCase("CO"))
						{
							if(strPromoterChk.equals("false"))
							{
								strVal1	= strTypeArr[i];
								strPromoterChk	= "true";
								arrCol.add(Helper.changetoTitlecase(correctNull(rs.getString("com_compdtfname"))+" "+correctNull(rs.getString("com_compdtmname"))+" "+correctNull(rs.getString("com_compdtlname"))));//0
								
								if(rs1!=null){rs1.close();}
								rs1= DBUtils.executeLAPSQuery("sel_presanactionage^"+rs.getString("com_compdtappid"));
								
								if(rs1.next())
								{
									arrCol.add(correctNull(rs1.getString("age")));//1
									strVal	= correctNull(rs1.getString("perapp_constitution"));
									strVal2	= correctNull(rs1.getString("perapp_networthason"));
									strNW	= Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("perapp_networth"))));
								}
								else
								{
									arrCol.add("0");
								}
								
								if(strVal.equals("01"))
								{
									if(rs1!=null){rs1.close();}
									rs1= DBUtils.executeLAPSQuery("pergetIncome1^"+rs.getString("com_compdtappid"));
									
									if(rs1.next())
									{
										arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("perinc_takehome")))));//2
									}
									else
									{
										arrCol.add("0.00");
									}
								}
								else
								{
									if(rs1!=null){rs1.close();}
									rs1= DBUtils.executeLAPSQuery("pergetIncome1^"+rs.getString("com_compdtappid"));
									
									if(rs1.next())
									{
										arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("perinc_year1_income")))));//2
									}
									else
									{
										arrCol.add("0.00");
									}
								}
								arrCol.add(Helper.correctNull((String)rs.getString("com_comprelationship")));//3
								arrCol.add(strNW);//4
								arrCol.add(strVal2);//5
							}
						}
					}
				}
				if(arrCol.size()>0)
				{
					arrRow.add(arrCol);
				}
			}
			hshValues.put("arrGuaRow", arrRow);*/
			
			//Management Comments
			for(int i=0;i<strCommentMgmtSno.length;i++)
			{
				if(rs!=null){rs.close();}
				rs	= DBUtils.executeLAPSQuery("sel_management^MangementInfo^"+strCommentMgmtSno[i]+"^"+strAppNo);
				if(rs.next())
				{
					hshValues.put("MgmtComments"+correctNull(rs.getString("com_sno")), correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
				}
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("sel_CustDetails^"+strNewId);
			if(rs.next())
			{
				hshValues.put("NatureofActivity",rs.getString("kyc_kycactivity"));
				hshValues.put("KYC_RISK",rs.getString("KYC_RISK"));
				hshValues.put("riskdesc",rs.getString("riskdesc"));
			}
			if(rs!=null)
			{
				rs.close();
			}	

			
			strQuery = SQLParser.getSqlQuery("sel_corporate_breifbackground_sec^"+strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("Sector",Helper.correctNull(rs.getString("com_sector")));
			}
			if(rs!=null)
			{
				rs.close();
			}	

			//Rating 
			arrRow = new ArrayList();
			String pagetype="cusratingnew";
			strQuery = SQLParser.getSqlQuery("cusratingnew_sel^"+strNewId);
			rs1 = DBUtils.executeQuery(strQuery);
			while(rs1.next())
			{
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs1.getString("RAT_ID")));//0
				arrCol.add(Helper.correctNull(rs1.getString("RAT_SNO")));//1
				arrCol.add(Helper.correctNull(rs1.getString("RAT_AGENCY")));//2
				arrCol.add(Helper.correctNull(rs1.getString("RATE_DATE")));//3
				arrCol.add(Helper.correctNull(rs1.getString("RAT_PARTICULARS")));//4
				arrCol.add(Helper.convertSetupToApplicationValues(strValuesIn, Double.parseDouble(Helper.correctDouble(rs1.getString("RAT_AMOUNT")))));//5
				arrCol.add(Helper.correctNull(rs1.getString("RAT_SYMBOL")));//6
				arrCol.add(Helper.CLOBToString(rs1.getClob("RAT_DESC")));//7
				arrCol.add(Helper.correctNull(rs1.getString("RAT_DUEDATE")));//8
				arrCol.add(Helper.correctNull(rs1.getString("RAT_RISK_WEIGHT")));//9
				arrRow.add(arrCol);
			}
			if(rs1!=null)
			{
				rs1.close();
			}
			hshValues.put("arrRowRating",arrRow);
				
			strQuery=SQLParser.getSqlQuery("sel_retailcomments^"+ strNewId+"^"+pagetype);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) 
			{
				hshValues.put("cmt_ratingcomments", Helper.CLOBToString(rs.getClob("cmt_comments")));
			}
			if(rs!=null)
			{
				rs.close();
			}
			String strPage="brief";
			strQuery = SQLParser.getSqlQuery("sel_comments^"+strPage+"^"+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) 
			{
				hshValues.put("cmt_Briefhistory", Helper.CLOBToString(rs.getClob("COM_COMMENTS")));
			}
			if(rs!=null)
			{
				rs.close();
			}
			strPage="brief2";
			strQuery = SQLParser.getSqlQuery("sel_comments^"+strPage+"^"+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) 
			{
				hshValues.put("cmt_Briefhistory2", Helper.CLOBToString(rs.getClob("COM_COMMENTS")));
			}
			if(rs!=null)
			{
				rs.close();
			}
			strPage="brief1";
			strQuery = SQLParser.getSqlQuery("sel_comments^"+strPage+"^"+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) 
			{
				hshValues.put("cmt_Briefhistory1", Helper.CLOBToString(rs.getClob("COM_COMMENTS")));
			}
			if(rs!=null)
			{
				rs.close();
			}
			
			String strMarktValOfShares="";
			arrRow = new ArrayList();
			arrCol = new ArrayList();
			strQuery = SQLParser.getSqlQuery("com_shareholdpatternsel^"+strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("COM_SHP_SNO")));//0	
				String strSharesheld=Helper.correctNull(rs.getString("COM_SHP_SHARESHELDBY"));
				if(!strSharesheld.equalsIgnoreCase(""))
				{			
				 rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"139"+"^"+strSharesheld);
				 if(rs1.next())
				 {
					 arrCol.add(Helper.changetoTitlecase(Helper.correctNull(rs1.getString("STAT_DATA_DESC1"))));//1
				 }
				 else
				 {
					 arrCol.add("");//1
				 }
				}
				else
				{
					arrCol.add("");//1
				}				
				arrCol.add(Helper.correctNull(rs.getString("COM_SHP_NOFSHARES")));//2		
				arrCol.add(Helper.correctNull(rs.getString("COM_SHP_FACVALUE")));//3		
				arrCol.add(Helper.correctNull(rs.getString("COM_SHP_AMOUNT")));//4	
				arrCol.add(Helper.correctNull(rs.getString("COM_SHP_PERCENT")));//5	
				arrCol.add(Helper.correctNull(rs.getString("COM_SHP_SHARESHELDBY")));//6
				arrCol.add(strSharesheld);//7
				arrCol.add(Helper.correctNull(rs.getString("COM_SHAREHOLDERNAME")));//7
				arrRow.add(arrCol);
				strMarktValOfShares = Helper.correctNull(rs.getString("COM_SHP_MRKTVALOFSHARES"));
			}
			hshValues.put("Shareholding",arrRow);
			hshValues.put("MrktValOfShares",strMarktValOfShares);
			
			arrRow = new ArrayList();
			arrCol = new ArrayList();
			strQuery = SQLParser.getSqlQuery("com_natureofsharessel^"+strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_SNO")));//0	
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_NATURESHAR")));//1
				String strnatureShar=Helper.correctNull(rs.getString("COM_NOS_NATURESHAR"));
				if(!strnatureShar.equalsIgnoreCase(""))
				{			
				 rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"140"+"^"+strnatureShar);
				 if(rs1.next())
				 {
					 arrCol.add(Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));//2
				 }
				 else
				 {
					 arrCol.add("");//1
				 }
				}
				else
				{
					 arrCol.add("");//1
				}	
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_AUTHSHAR")));//3	
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_AUTHVALUE")));//4		
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_ISSUSHAR")));//5		
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_ISSUVALUE")));//6	
				arrCol.add(Helper.correctNull(rs.getString("COM_NOS_NATURESHAR")));//7	
				
				arrRow.add(arrCol);
				
			}
			hshValues.put("Natureofshare",arrRow);	
			pagetype="natureofshare";
			strQuery=SQLParser.getSqlQuery("sel_retailcomments^"+ strAppNo+"^"+pagetype);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) 
			{
				hshValues.put("cmt_natureofshare", Helper.CLOBToString(rs.getClob("cmt_comments")));
			}
			if(rs!=null)
			{
				rs.close();
			}
			arrRow = new ArrayList();
			strQuery=SQLParser.getSqlQuery("sel_rating_year_audited^"+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) 
			{
				hshValues.put("IntRat","Y");
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("rdr_year")));
				if(Helper.correctNull(rs.getString("rdr_financial")).equals("a"))
				{
					arrCol.add("Audited");
				}
				else if(Helper.correctNull(rs.getString("rdr_financial")).equals("e"))
				{
					arrCol.add("Estimated");
				}
				else if(Helper.correctNull(rs.getString("rdr_financial")).equals("u"))
				{
					arrCol.add("Unaudited");
				}
				else if(Helper.correctNull(rs.getString("rdr_financial")).equals("p"))
				{
					arrCol.add("Projection");
				}else{
					arrCol.add(" ");
				}
				
				if(rs1!=null)
					rs1.close();
				rs1=DBUtils.executeLAPSQuery("sel_ratingCode_desc^"+Helper.correctNull(rs.getString("rdr_rating")));
				if(rs1.next())
					arrCol.add(Helper.correctNull(rs1.getString("RATING_DESC")));
				else
					arrCol.add(Helper.correctNull(rs.getString("rdr_rating")));
				
				arrRow.add(arrCol);
			}
			hshValues.put("arrRowRatingRMD",arrRow);
			if(rs!=null)
			{
				rs.close();
			}
			// Internal RMD Rating
			if(rs!=null){rs.close();}
			String cre_weight="";
			rs	= DBUtils.executeLAPSQuery("sel_rate_userid^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("cre_rating", correctNull(rs.getString("cre_rating")));
				cre_weight=correctNull(rs.getString("cre_weight"));
				if(cre_weight.equalsIgnoreCase("KB1"))
				{
					cre_weight+=" - Minimal Risk";
				}else if(cre_weight.equalsIgnoreCase("KB2"))
				{
					cre_weight+=" - Lowest Risk";
				}else if(cre_weight.equalsIgnoreCase("KB3"))
				{
					cre_weight+=" - Lower Risk";
				}else if(cre_weight.equalsIgnoreCase("KB4"))
				{
					cre_weight+=" - Low Risk";
				}else if(cre_weight.equalsIgnoreCase("KB5"))
				{
					cre_weight+=" - Moderate Risk";
				}else if(cre_weight.equalsIgnoreCase("KB6"))
				{
					cre_weight+=" - Average Risk";
				}else if(cre_weight.equalsIgnoreCase("KB7"))
				{
					cre_weight+=" - High Risk";
				}else if(cre_weight.equalsIgnoreCase("KB8"))
				{
					cre_weight+=" - Very high Risk";
				}else if(cre_weight.equalsIgnoreCase("KB9"))
				{
					cre_weight+=" - Sub standard (highest)";
				}else if(cre_weight.equalsIgnoreCase("KB10"))
				{
					cre_weight+=" - Doubt full/ loss (critical)";
				}
				hshValues.put("cre_weight", cre_weight);
				hshValues.put("cre_ratyear", correctNull(rs.getString("rating_year")));
				String cre_ratingType=correctNull(rs.getString("rating_yeartype"));
				
				if(cre_ratingType.equalsIgnoreCase("A"))
				{
					cre_ratingType="Audited";
				}else if(cre_ratingType.equalsIgnoreCase("U"))
				{
					cre_ratingType="Unaudited";
				}else if(cre_ratingType.equalsIgnoreCase("E"))
				{
					cre_ratingType="Estimated";
				}else if(cre_ratingType.equalsIgnoreCase("P"))
				{
					cre_ratingType="Projection";
				}
				else{
					cre_ratingType="";
				}
				hshValues.put("cre_rattype", cre_ratingType);
				
			}
			
			if(rs!=null){rs.close();}
			String SMACategory="";
			strQuery=SQLParser.getSqlQuery("cuscibildetails_sel^"+ strNewId+"^"+strNewId);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) 
			{
				hshValues.put("cibil_smadetails",correctNull(rs.getString("cibil_smadetails")));
				hshValues.put("cibil_CRILC",correctNull(rs.getString("cibil_CRILC")));
				SMACategory=correctNull(rs.getString("cibil_smacategory"));
				if(SMACategory.equalsIgnoreCase("Y")){
					SMACategory="Yes";
				}else{
					SMACategory="No";
				}
				hshValues.put("cibil_SMACategory",SMACategory);
			}
			
			if(rs!=null){rs.close();}
			String strCoAppArr[]	= null;
			strPromoterChk="";
			String strCoAppId="";
			if(rs2!=null){rs2.close();}
			strCoAppExID="";strCoAppExType="";strCoAppID="";
			rs2	= DBUtils.executeLAPSQuery("compromoterselectionpromoters^"+strAppNo);
			strid="0";
			arrRow=new ArrayList();
			arrCol = new ArrayList();
			String constitution="";
			ArrayList arrFacRow=new ArrayList();
			ArrayList arrFacCol=new ArrayList();
			while(rs2.next())
			{
				strVal			= "";
				
				strType			= correctNull(rs2.getString("com_compdttype"));
				strCoAppId      = correctNull(rs2.getString("com_compdtappid"));
				strCoAppID			= correctNull(rs2.getString("com_oldlapsid"));
				
				if((strCoAppID.equalsIgnoreCase(strCoAppExID)) && (strType.equalsIgnoreCase(strCoAppExType)))
					continue;
				
				if(!strType.equals(""))
				{
					strCoAppArr			= strType.split("@");
				}

				if(strCoAppArr!=null)
				{
					for(int i=0;i<strCoAppArr.length;i++)
					{
						arrCol = new ArrayList();
						if(strCoAppArr[i].equalsIgnoreCase("C"))
						{
							
							if(rs1!=null){rs1.close();}
							rs1	= DBUtils.executeLAPSQuery("sel_appnamebyId^"+strCoAppId);
							if(rs1.next())
							{
								arrCol.add(Helper.correctNull(rs1.getString("coappname")));//0
								arrCol.add(correctNull(rs1.getString("perapp_dob")));//1
								arrCol.add(correctNull(rs1.getString("perapp_banksince")));//2
								arrCol.add(correctNull(rs1.getString("perapp_constitution")));//3
								constitution=correctNull(rs1.getString("perapp_constitution"));
							}else{
								arrCol.add(" ");//0
								arrCol.add(" ");//1
								arrCol.add(" ");//2
								arrCol.add(" ");//3
							}
							
							if(rs1!=null){rs1.close();}
							rs1	= DBUtils.executeLAPSQuery("selborrowerdet_company^"+strCoAppId);
							if(rs1.next())
							{
								arrCol.add(Helper.correctNull(rs1.getString("cominfo_commencement_date")));//4
								arrCol.add(correctNull(rs1.getString("cominfo_incorporation_date")));//5
							}else{
								arrCol.add(" ");//4
								arrCol.add(" ");//5
							}
							StringBuffer strAddress1=new StringBuffer();
							StringBuffer strAddress2=new StringBuffer();
							StringBuffer strAddress3=new StringBuffer();
							StringBuffer FacAdAddress=new StringBuffer();
							
							strAd1="";strAd2="";strAd3="";strCity="";
							strDis="";strState="";strZip="";
							String strAdAd1="",strAdAd2="",strAdAd3="",strAdCity="";
							String strAdDis="",strAdState="",strAdZip="";
							String strFacAd1="",strFacAd2="",strFacCity="";
							String strFacDis="",strFacState="",strFacZip="";
							String strPerAd1="",strPerAd2="",strPerAd3="",strPerCity="";
							String strPerDis="",strPerState="",strPerZip="";
							if(rs1!=null){rs1.close();}
							strQuery=SQLParser.getSqlQuery("sel_customerdetail^"+strCoAppId);
							rs1=DBUtils.executeQuery(strQuery);
							if(rs1.next())
							{ 
								strAd1=correctNull(rs1.getString("CON_COMADDR1"));
								strAd2=correctNull(rs1.getString("CON_COMADDR2"));
								strAd3=correctNull(rs1.getString("CON_COMVILLAGE"));
								strCity=correctNull(rs1.getString("CON_COMCITY"));
								strDis=correctNull(rs1.getString("CON_COMDIST"));
								strState=correctNull(rs1.getString("CON_COMSTATE"));		
								strZip=correctNull(rs1.getString("CON_COMZIP"));
								if(!strAd1.equalsIgnoreCase(""))
							 	{ 
									strAddress1.append(strAd1);
							 	}
							 	if(!strAd2.equalsIgnoreCase(""))
							 	{
							 		strAddress1.append(",");
							 		strAddress1.append(strAd2);
							 	}
							 	if(!strAd3.equalsIgnoreCase(""))
							 	{
							 		strAddress1.append(",");
							 		strAddress1.append(strAd3);
							 	}
							 	if(!strCity.equalsIgnoreCase(""))
							 	{
									if(rs!=null)
									{rs.close();}
									rs=DBUtils.executeLAPSQuery("sel_citynamebycode^"+strCity);
									if(rs.next())
									{
										strAddress1.append(",");
								 		strAddress1.append(Helper.correctNull((String)rs.getString("city_name")));
									}
							 	}
							 	if(!strDis.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_distnamebycode^"+strDis);
							 		if(rs.next())
							 		{
							 			strAddress1.append(",");
							 			strAddress1.append(correctNull(rs.getString("district_desc")));
							 		}
							 	}
							 	if(!strState.equalsIgnoreCase(""))
							 	{
									if(rs!=null)
									{rs.close();}
									rs=DBUtils.executeLAPSQuery("sel_statenamebycode^"+strState);
									if(rs.next())
									{
										strAddress1.append(",");
								 		strAddress1.append(Helper.correctNull((String)rs.getString("state_name")));
									}
									
							 		if(!strZip.equalsIgnoreCase(""))
							 		{
							 			strAddress1.append("-");
							 			strAddress1.append(strZip);
							 		}
							 	}
							 	
							 	strAdAd1=correctNull(rs1.getString("CON_ADMADDR1"));
							 	strAdAd2=correctNull(rs1.getString("CON_ADMADDR2"));//
							 	strAdAd3=correctNull(rs1.getString("CON_ADMVILLAGE"));
							 	strAdDis=correctNull(rs1.getString("CON_ADMDIST"));
							 	strAdCity=correctNull(rs1.getString("CON_ADMCITY"));
							 	strAdState=correctNull(rs1.getString("CON_ADMSTATE"));
							 	strAdZip=correctNull(rs1.getString("CON_ADMZIP"));
							 	
							 	if(!strAdAd1.equalsIgnoreCase(""))
							 	{ 
							 		strAddress2.append(strAdAd1);
							 	}
							 	if(!strAdAd2.equalsIgnoreCase(""))
							 	{
							 		strAddress2.append(",");
							 		strAddress2.append(strAdAd2);
							 	}
							 	if(!strAdAd3.equalsIgnoreCase(""))
							 	{
							 		strAddress2.append(",");
							 		strAddress2.append(strAdAd3);
							 	}
							 	if(!strAdCity.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_citynamebycode^"+strAdCity);
							 		if(rs.next())
							 		{
							 			strAddress2.append(",");
							 			strAddress2.append(Helper.correctNull((String)rs.getString("city_name")));
							 		}
							 	}
							 	if(!strAdDis.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_distnamebycode^"+strAdDis);
							 		if(rs.next())
							 		{
							 			strAddress2.append(",");
							 			strAddress2.append(correctNull(rs.getString("district_desc")));
							 		}
							 	}
							 	if(!strAdState.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_statenamebycode^"+strAdState);
							 		if(rs.next())
							 		{
							 			strAddress2.append(",");
							 			strAddress2.append(Helper.correctNull((String)rs.getString("state_name")));
							 		}
							 		if(!strAdZip.equalsIgnoreCase(""))
							 		{
							 			strAddress2.append("-");
							 			strAddress2.append(strAdZip);
							 		}
							 	}
							 	
							 	strPerAd1=correctNull(rs1.getString("CON_PERMADDR1"));
							 	strPerAd2=correctNull(rs1.getString("CON_PERMADDR2"));
							 	strPerAd3=correctNull(rs1.getString("CON_PERMVILLAGE"));
							 	strPerDis=correctNull(rs1.getString("CON_PERMDIST"));	
							 	strPerCity=correctNull(rs1.getString("CON_PERMCITY"));
							 	strPerState=correctNull(rs1.getString("CON_PERMSTATE"));
							 	strPerZip=correctNull(rs1.getString("CON_PERMZIP"));
							 	
							 	if(!strPerAd1.equalsIgnoreCase(""))
							 	{ 
							 		strAddress3.append(strPerAd1);
							 	}
							 	if(!strPerAd2.equalsIgnoreCase(""))
							 	{
							 		strAddress3.append(",");
							 		strAddress3.append(strPerAd2);
							 	}
							 	if(!strPerAd3.equalsIgnoreCase(""))
							 	{
							 		strAddress3.append(",");
							 		strAddress3.append(strPerAd3);
							 	}
							 	if(!strPerCity.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_citynamebycode^"+strPerCity);
							 		if(rs.next())
							 		{
							 			strAddress3.append(",");
							 			strAddress3.append(Helper.correctNull((String)rs.getString("city_name")));
							 		}
							 	}
							 	if(!strPerDis.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_distnamebycode^"+strPerDis);
							 		if(rs.next())
							 		{
							 			strAddress3.append(",");
							 			strAddress3.append(correctNull(rs.getString("district_desc")));
							 		}
							 	}
							 	if(!strPerState.equalsIgnoreCase(""))
							 	{
							 		if(rs!=null)
							 		{rs.close();}
							 		rs=DBUtils.executeLAPSQuery("sel_statenamebycode^"+strPerState);
							 		if(rs.next())
							 		{
							 			strAddress3.append(",");
							 			strAddress3.append(Helper.correctNull((String)rs.getString("state_name")));
							 		}
							 		if(!strPerZip.equalsIgnoreCase(""))
							 		{
							 			strAddress3.append("-");
							 			strAddress3.append(strPerZip);
							 		}
							 	}
							 	
							}
							arrCol.add(strAddress1.toString());//6
							arrCol.add(strAddress2.toString());//7
							arrCol.add(strAddress3.toString());//8
							
								intSize=arrBranchtype.length;
								for(int l =0;l<intSize;l++)
					    		{
									FacAdAddress=new StringBuffer();
									strFacAd1="";strFacAd2="";strFacCity="";
									strFacState="";strFacZip="";
									arrFacRow=new ArrayList();
									if(rs!=null){rs.close();}
									rs	= DBUtils.executeLAPSQuery("selallfactorydetailsbytype^"+strCoAppId+"^"+arrBranchtype[l]);
									while(rs.next())
									{
										arrFacCol=new ArrayList();
										String strCitycode = Helper.correctNull((String)rs.getString("comapp_city"));
										String strCityDesc="";
										if(!strCitycode.equalsIgnoreCase(""))
										{				
										if(rs1!=null)
										{rs1.close();}
										rs1=DBUtils.executeLAPSQuery("sel_citynamebycode^"+strCitycode);
										if(rs1.next())
										{
											strCityDesc = Helper.correctNull((String)rs1.getString("city_name"));					
										}
										}
										
										String strStatecode = Helper.correctNull((String)rs.getString("comapp_state"));	
										String strStateDesc="";
										if(!strStatecode.equalsIgnoreCase(""))
										{				
										if(rs1!=null)
										{rs1.close();}
										rs1=DBUtils.executeLAPSQuery("sel_statenamebycode^"+strStatecode);
										if(rs1.next())
										{
											strStateDesc = Helper.correctNull((String)rs1.getString("state_name"));					
										}
										}
										strFacAd1=correctNull((String)rs.getString("comapp_name"));
										strFacAd2=correctNull((String)rs.getString("comapp_add"));
										strFacCity=strCityDesc;
										strFacState=strStateDesc;
										strFacZip=correctNull((String)rs.getString("comapp_pincode"));
										
										if(!strFacAd1.equalsIgnoreCase(""))
									 	{ 
											FacAdAddress.append(strFacAd1);
									 	}
									 	if(!strFacAd2.equalsIgnoreCase(""))
									 	{
									 		FacAdAddress.append(",");
									 		FacAdAddress.append(strFacAd2);
									 	}
									 	if(!strFacCity.equalsIgnoreCase(""))
									 	{
									 		FacAdAddress.append(",");
									 		FacAdAddress.append(strFacCity);
									 	}
									 	if(!strFacState.equalsIgnoreCase(""))
									 	{
									 		FacAdAddress.append(",");
									 		FacAdAddress.append(strFacState);
									 		if(!strFacZip.equalsIgnoreCase(""))
									 		{
									 			FacAdAddress.append("-");
									 			FacAdAddress.append(strFacZip);
									 		}
									 	}
									 	arrFacCol.add(FacAdAddress.toString());
									 	arrFacRow.add(arrFacCol);
									}
									arrCol.add(arrFacRow);//9 & 10 & 11
					    		}
							String strConsFlag="N";
							if(rs!=null){rs.close();}
							rs	= DBUtils.executeLAPSQuery("selconstitutiondesc^"+constitution);
							if(rs.next())
							{
									arrCol.add(correctNull(rs.getString("cbs_static_data_desc")));//12
									strConsFlag="Y";
							}
							//ArrayList arrConstitution = RefTableManager.getCodeAndDescription("2","CBS");
							else{
								arrCol.add(" ");//12
							}
						}
						if(arrCol.size()>0)
						{
							arrRow.add(arrCol);
						}
					}
				}
				strCoAppExID			= correctNull(rs2.getString("com_oldlapsid"));
				strCoAppExType			= correctNull(rs2.getString("com_compdttype"));
				
			}
			hshValues.put("arrCoApplicant", arrRow);
			
			if(rs != null){	rs.close();}
			pagetype="shareholdpattern";
			strQuery=SQLParser.getSqlQuery("sel_retailcomments^"+ strAppNo+"^"+pagetype);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) 
			{
				hshValues.put("cmt_shareholdingpattern", Helper.CLOBToString(rs.getClob("cmt_comments")));
			}
			
			strQuery = SQLParser.getSqlQuery("sel_comments^ratingcomments^" + strAppNo);
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next())
			{
				hshValues.put("strInternalrating_comment", correctNull(Helper.CLOBToString(rs.getClob("COM_COMMENTS"))));
			}
			
			
			
			if (rs != null)
				rs.close();
			
			java.text.NumberFormat jtn	= java.text.NumberFormat.getInstance();
			jtn.setMaximumFractionDigits(2);
			jtn.setMinimumFractionDigits(2);
			jtn.setGroupingUsed(false);
			
			strQuery = SQLParser.getSqlQuery("sel_per_bir^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			String bir_flag="";
			if (rs.next())
			{
				hshValues.put("bir_flag", Helper.correctNull(rs.getString("bir_flag")));
				bir_flag=Helper.correctNull(rs.getString("bir_flag"));
				
				if(Helper.correctNull((String)rs.getString("bir_flag")).equalsIgnoreCase("Y"))
				{	
					hshValues.put("bir_flag1", "Yes");
					hshValues.put("bir_submitteddate", Helper.correctNull(rs.getString("bir_submitteddate")));	
					hshValues.put("bir_receiptdate", Helper.correctNull(rs.getString("bir_receiptdate")));	
					hshValues.put("bir_charges", jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("bir_charges")))));
					hshValues.put("bir_comments", Helper.correctNull(rs.getString("bir_comments")));
					hshValues.put("bir_processdate", Helper.correctNull(rs.getString("bir_processdate")));
					hshValues.put("bir_service_name", Helper.correctNull(rs
							.getString("bir_service_name")));
					
					rs2=DBUtils.executeLAPSQuery("selmiscust^250^"+Helper.correctNull((String)rs.getString("bir_quality_report")));
					if(rs2.next())
					{	
						hshValues.put("bir_quality_report", Helper.correctNull(rs2.getString("stat_data_desc1")));

					}
					if(rs2!=null){
						rs2.close();
					}
					rs2=DBUtils.executeLAPSQuery("selmiscust^251^"+Helper.correctNull((String)rs.getString("bir_opinion_all")));
					if(rs2.next())
					{	
						hshValues.put("bir_opinion_all", Helper.correctNull(rs2.getString("stat_data_desc1")));

					}
				}
				else
				{
					hshValues.put("bir_flag1", "No");
					hshValues.put("bir_comments", Helper.correctNull(rs
							.getString("bir_comments")));
				}
			
			}	
			
			arrRow=new ArrayList();
			//Factory Details  
			rs = DBUtils.executeLAPSQuery("selectfactorydetails^" + strNewId);
			while (rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("factory_type")));//0
				arrCol.add(Helper.correctNull(rs.getString("comapp_name")));//1
				arrCol.add(Helper.correctNull(rs.getString("comapp_add")));//2
				arrCol.add(Helper.correctNull(rs.getString("district_desc")));//3
				arrCol.add(Helper.correctNull(rs.getString("city_name")));//4
				arrCol.add(Helper.correctNull(rs.getString("state_name")));//5
				arrCol.add(Helper.correctNull(rs.getString("comapp_pincode")));//6
				arrCol.add(Helper.correctNull(rs.getString("premisetype")));//7
				arrRow.add(arrCol);
			}
			
			hshValues.put("arrFactoryDetails", arrRow);
			
			arrRow=new ArrayList();
			//Buyer Information
			rs = DBUtils.executeLAPSQuery("sel_management_Assement^MangementInfo^6^" + strAppNo);
			while (rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("ASSEMENT_COMMENT")));//0
				arrCol.add(Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));//5
				arrCol.add(Helper.correctNull(rs.getString("assess_comments2")));//6
				arrCol.add(Helper.correctNull(rs.getString("assess_comments3")));//7
				arrRow.add(arrCol);
			}
			
			hshValues.put("arrBuyerInfo", arrRow);
			
			arrRow=new ArrayList();
			//Seller Information  
			rs = DBUtils.executeLAPSQuery("sel_management_Assement^MangementInfo^5^" + strAppNo);
			while (rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("ASSEMENT_COMMENT")));//0
				arrCol.add(Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));//5
				arrCol.add(Helper.correctNull(rs.getString("assess_comments2")));//6
				arrCol.add(Helper.correctNull(rs.getString("assess_comments3")));//7
				arrRow.add(arrCol);
			}
			
			hshValues.put("arrSellerInfo", arrRow);
			
			arrRow=new ArrayList();
			//Key Managerial Person  
			rs = DBUtils.executeLAPSQuery("sel_management_Assement^MangementInfo^15^" + strAppNo);
			while (rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("ASSEMENT_COMMENT")));//0
				arrCol.add(Helper.correctNull(rs.getString("ASSEMENT_COMMENT1")));//5
				arrCol.add(Helper.correctNull(rs.getString("assess_comments2")));//6
				arrCol.add(Helper.correctNull(rs.getString("assess_comments3")));//7
				arrRow.add(arrCol);
			}
			
			hshValues.put("arrKeyPersonInfo", arrRow);
			
			if(rs!=null)
				rs.close();
			arrRow=new ArrayList();
			rs=DBUtils.executeLAPSQuery("sel_captial_marketinfo^"+strAppNo);
			while(rs.next())
			{
					arrCol = new ArrayList();
					if(Integer.parseInt(Helper.correctInt(rs.getString("capital_sno")))==4)
					arrCol.add("As on "+Helper.correctNull(rs.getString("capital_part")));
					else
					arrCol.add(Helper.correctNull(rs.getString("capital_part")));
					arrCol.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("capital_bse")))));
					arrCol.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("capital_nse")))));
					arrRow.add(arrCol);
				
					if(Helper.correctNull(rs.getString("capital_listedinse")).equalsIgnoreCase("Y"))
					hshValues.put("strListedinSE","Yes");
					else if(Helper.correctNull(rs.getString("capital_listedinse")).equalsIgnoreCase("N"))
						hshValues.put("strListedinSE","No");
					else if(Helper.correctNull(rs.getString("capital_listedinse")).equalsIgnoreCase("NA"))
						hshValues.put("strListedinSE","Not Applicable");
					
					hshValues.put("strShareAson",Helper.correctNull(rs.getString("capital_shareason")));
			}
			
			hshValues.put("arrCaptialInfo",arrRow);
			
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^"+ strAppNo+"^MovementShares");
			if (rs.next()) 
			{
				hshValues.put("strShareCmts", Helper.CLOBToString(rs.getClob("cmt_comments")));
			}
			
			strQuery = SQLParser.getSqlQuery("sel_svanidhidetails1^"+strAppId);
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("PERAPP_CIG", Helper.correctNull(rs.getString("PERAPP_CIG")));
				hshValues.put("PERAPP_CIGNAME", Helper.correctNull(rs.getString("PERAPP_CIGNAME")));
				hshValues.put("PERAPP_CIGCODE", Helper.correctNull(rs.getString("PERAPP_CIGCODE")));
				hshValues.put("PERAPP_JLG", Helper.correctNull(rs.getString("PERAPP_JLG")));
				hshValues.put("PERAPP_JLGNAME", Helper.correctNull(rs.getString("PERAPP_JLGNAME")));
				hshValues.put("PERAPP_JLGCODE", Helper.correctNull(rs.getString("PERAPP_JLGCODE")));
				hshValues.put("PERAPP_NATIVITY", Helper.correctNull(rs.getString("PERAPP_NATIVITY")));
				hshValues.put("PERAPP_FAMILYAVAILABLE", Helper.correctNull(rs.getString("PERAPP_FAMILYAVAILABLE")));
				hshValues.put("PERAPP_VENDERIDCARDNO", Helper.correctNull(rs.getString("PERAPP_VENDERIDCARDNO")));
				hshValues.put("PERAPP_CARTVENDINGNO", Helper.correctNull(rs.getString("PERAPP_CARTVENDINGNO")));
				hshValues.put("PERAPP_LETTEROFRECOMMD", Helper.correctNull(rs.getString("PERAPP_LETTEROFRECOMMD")));
				hshValues.put("PERAPP_PLACEOFVENDING", Helper.correctNull(rs.getString("PERAPP_PLACEOFVENDING")));
				hshValues.put("PERAPP_DUROFVENDINGYRS", Helper.correctNull(rs.getString("PERAPP_DUROFVENDINGYRS")));
				hshValues.put("PERAPP_DUROFVENDINGMONTH", Helper.correctNull(rs.getString("PERAPP_DUROFVENDINGMONTH")));
				hshValues.put("PERAPP_STATIONARYVEYNDOR", Helper.correctNull(rs.getString("PERAPP_STATIONARYVEYNDOR")));
				hshValues.put("PERAPP_NEARESTLANDMARK", Helper.correctNull(rs.getString("PERAPP_NEARESTLANDMARK")));
				hshValues.put("PERAPP_MOBILEVEYNDOR", Helper.correctNull(rs.getString("PERAPP_MOBILEVEYNDOR")));
				hshValues.put("PERAPP_MOBILENEARESTLANDMARK", Helper.correctNull(rs.getString("PERAPP_MOBILENEARESTLANDMARK")));
				hshValues.put("PERAPP_WARDNO", Helper.correctNull(rs.getString("PERAPP_WARDNO")));
				hshValues.put("PERAPP_DISTRICT", Helper.correctNull(rs.getString("PERAPP_DISTRICT")));
				hshValues.put("PERAPP_PINCODE", Helper.correctNull(rs.getString("PERAPP_PINCODE")));
				hshValues.put("PERAPP_AVERAGEMONTHLY", Helper.correctNull(rs.getString("PERAPP_AVERAGEMONTHLY")));
				hshValues.put("PERAPP_BANKCode", Helper.correctNull(rs.getString("PERAPP_BANKNAME")));
				hshValues.put("PERAPP_BRANCHNAME", Helper.correctNull(rs.getString("PERAPP_BRANCHNAME")));
				hshValues.put("PERAPP_IFSCCODE", Helper.correctNull(rs.getString("PERAPP_IFSCCODE")));
				hshValues.put("PERAPP_ACCOUNTNO", Helper.correctNull(rs.getString("PERAPP_ACCOUNTNO")));
				hshValues.put("PERAPP_PAYMENTAGGREGATOR", Helper.correctNull(rs.getString("PERAPP_PAYMENTAGGREGATOR")));
				hshValues.put("PERAPP_UPIID", Helper.correctNull(rs.getString("PERAPP_UPIID")));
				hshValues.put("PERAPP_QRCODE", Helper.correctNull(rs.getString("PERAPP_QRCODE")));
				hshValues.put("PERAPP_TERM1CERTIFIED", Helper.correctNull(rs.getString("PERAPP_TERM1CERTIFIED")));
				hshValues.put("PERAPP_TERM1CERTIFIEDBY", Helper.correctNull(rs.getString("PERAPP_TERM1CERTIFIEDBY")));
				hshValues.put("PERAPP_TERMCERTIFIED2", Helper.correctNull(rs.getString("PERAPP_TERMCERTIFIED2")));
				hshValues.put("PERAPP_TERM2CERTIFIEDBY", Helper.correctNull(rs.getString("PERAPP_TERM2CERTIFIEDBY")));
				hshValues.put("perapp_pwd", Helper.correctNull(rs.getString("perapp_pwd")));
				hshValues.put("perapp_whtapplundertaken", Helper.correctNull(rs.getString("perapp_whtapplundertaken")));
				hshValues.put("perapp_localref1_name", Helper.correctNull(rs.getString("perapp_localref1_name")));
				hshValues.put("perapp_localref2_name", Helper.correctNull(rs.getString("perapp_localref2_name")));
				hshValues.put("perapp_localref1_mobile", Helper.correctNull(rs.getString("perapp_localref1_mobile")));
				hshValues.put("perapp_localref2_mobile", Helper.correctNull(rs.getString("perapp_localref2_mobile")));
				hshValues.put("perapp_localref1_address", Helper.correctNull(rs.getString("perapp_localref1_address")));
				hshValues.put("perapp_localref2_address", Helper.correctNull(rs.getString("perapp_localref2_address")));
				hshValues.put("perapp_govtschemes", Helper.correctNull(rs.getString("perapp_govtschemes")));
				hshValues.put("PERAPP_NATIVEOFACTIVITY", Helper.correctNull(rs.getString("PERAPP_NATIVEOFACTIVITY")));
				hshValues.put("PER_SVANIDHIAPPNO", Helper.correctNull(rs.getString("per_svanidhiappno")));

				if(!Helper.correctNull(rs.getString("PERAPP_NATIVITY")).equals(""))
				{
					if(rs1!=null)
					{
						rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"237"+"^"+Helper.correctNull(rs.getString("PERAPP_NATIVITY")));
					if(rs1.next())
					{
						hshValues.put("PERAPP_NATIVITY",Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));
					}
				}
				
				
				if(!Helper.correctNull(rs.getString("PERAPP_DISTRICT")).equals(""))
				{
					if(rs1!=null)
					{
						rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("sel_distnamebycode^"+Helper.correctNull(rs.getString("PERAPP_DISTRICT")));
					if(rs1.next())
					{
						hshValues.put("PERAPP_DISTRICTDesc",correctNull(rs1.getString("district_desc")));
					}
				}
				if(!Helper.correctNull(rs.getString("PERAPP_BANKNAME")).equals(""))
				{
					if(rs1!=null)
					{
						rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+Helper.correctNull(rs.getString("PERAPP_BANKNAME")));
					if(rs1.next())
					{
						hshValues.put("PERAPP_BANKNAMEDesc",Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));
					}
				}
				
				
				if(Helper.correctNull(rs.getString("PERAPP_PLACEOFVENDING")).equalsIgnoreCase("F"))
				{
					hshValues.put("PERAPP_PLACEOFVENDING_desc","Fixed Location");
				}
				else if(Helper.correctNull(rs.getString("PERAPP_PLACEOFVENDING")).equalsIgnoreCase("M"))
				{
					hshValues.put("PERAPP_PLACEOFVENDING_desc","Mobile");
				}
				
				
				String gvtsch=Helper.correctNull(rs.getString("perapp_govtschemes"));
				String govtschemes="";
				String[] gvtscharr = null;
				if(!gvtsch.equals(""))
				{
					gvtscharr=gvtsch.split("@");
				}
				if(gvtscharr.length>0)
				{
					for(int i=0;i<gvtscharr.length;i++)
					{
							if(rs1!=null)
							{
								rs1.close();
							}
							rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"239"+"^"+gvtscharr[i]);
							if(rs1.next())
							{
								govtschemes+=Helper.correctNull(rs1.getString("STAT_DATA_DESC1"))+"<br>";
							}
						
					}
				}
				hshValues.put("govtschemes",govtschemes);
			}
			
			if(rs!=null)
				rs.close();
			
			rs=DBUtils.executeLAPSQuery("sel_per_familyDetails^"+strAppId);
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("perapp_relationname")));
				if(!Helper.correctNull(rs.getString("perapp_relationtype")).equals(""))
				{
					if(rs1!=null)
					{
						rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"238"+"^"+Helper.correctNull(rs.getString("perapp_relationtype")));
					if(rs1.next())
					{
						arrCol.add(Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));
					}
					else
					{
						arrCol.add("");
					}
				}
				else
				{
					arrCol.add("");
				}
				arrCol.add(Helper.correctNull(rs.getString("perapp_relationage")));
				arrRow.add(arrCol);
			}
			
			hshValues.put("arrSvanidhi",arrRow);
			
			if(rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("chk_geclfacchk^"+strAppNo);
			while(rs.next())
			{
				if(Helper.correctNull(rs.getString("com_bankscheme")).equalsIgnoreCase("064"))
					hshValues.put("strSvanidhi","Y");
			}
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_appstatus^"+strAppNo);
			if(rs.next())
			{
				strLoanType=Helper.correctNull((String)rs.getString("app_loantype"));
				strLoanType=strLoanType.toLowerCase();
			}
			
			String strSector="",strSubSector="",mainactivity="",subactivity="",strcrtsales="";
			if(rs!=null){rs.close();}
			ArrayList arrMISRow	= new ArrayList();
			ArrayList arrMISCol	= new ArrayList();
			rs	= DBUtils.executeLAPSQuery("sel_misapp_desc^"+strAppNo+"^"+strLoanType);
			while(rs.next())
			{
				arrMISCol		= new ArrayList();
				arrMISCol.add(Helper.correctNull(rs.getString("FACILITY_DISPLAYDESC")));
				mainactivity	= Helper.correctNull(rs.getString("app_mainactivity"));
				subactivity	= Helper.correctNull(rs.getString("app_subactivity"));
			
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"7"+"^"+Helper.correctNull((String)rs.getString("app_subsector")));
				if(rs1.next())
				{
					strSubSector = Helper.correctNull((String)rs1.getString("mis_static_data_desc"));					
				}
				else
				{
					if(rs1!=null)
					{
					  rs1.close();				  
					}
					rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"8"+"^"+Helper.correctNull((String)rs.getString("app_subsector")));
					if(rs1.next())
					{
						strSubSector = Helper.correctNull((String)rs1.getString("mis_static_data_desc"));					
					}
					else
					{
						strSubSector = "";
					}
				}
				
				if(mainactivity.equalsIgnoreCase("01") || mainactivity.equalsIgnoreCase("02"))
				{
					arrMISCol.add(strSubSector);
				}
				else
				{
					if(rs1!=null){rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("sel_activity_codedetails^"+"2"+"^"+mainactivity);
					if(rs1.next())
					{
						arrMISCol.add(Helper.correctNull(rs1.getString("mis_static_data_desc")));
					}
					else
					{
						arrMISCol.add("");
					}
				}
				if(rs1!=null){rs1.close();}
				if(rs2!=null){rs2.close();}
				
				rs1	= DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"+mainactivity+"^"+subactivity);
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull(rs1.getString("mis_subactdesc")));
				}
				else
				{
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String)rs.getString("app_activitycode")));
				strSector=Helper.correctNull((String)rs.getString("app_sector"));
				if(strSector.equalsIgnoreCase("01") || strSector.equalsIgnoreCase("1"))
				{					
					arrMISCol.add("Priority Sector");
				}
				else if(strSector.equalsIgnoreCase("02") || strSector.equalsIgnoreCase("2"))
				{
					arrMISCol.add("Non Priority Sector");	
				}
				else
				{
					arrMISCol.add(" ");
				}
				arrMISCol.add(strSubSector);
				
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"11"+"^"+Helper.correctNull((String)rs.getString("app_sensitivesector")));
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull((String)rs1.getString("mis_static_data_desc")));					
				}
				else
				{
					arrMISCol.add("Nil");	
				}	
				if(Helper.correctNull(rs.getString("APP_STANDUP_INDIA")).equalsIgnoreCase("Y"))
					arrMISCol.add("Yes");
				else if(Helper.correctNull(rs.getString("APP_STANDUP_INDIA")).equalsIgnoreCase("N"))
					arrMISCol.add("No");
				else
					arrMISCol.add("");
				
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"23"+"^"+Helper.correctNull((String)rs.getString("APP_GOVTANNOUNCESCHEME")));
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull((String)rs1.getString("mis_static_data_desc")));					
				}
				else
				{
					arrMISCol.add("Nil");	
				}
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"17"+"^"+Helper.correctNull((String)rs.getString("APP_GUARANTEE")));
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull((String)rs1.getString("mis_static_data_desc")));					
				}
				else
				{
					arrMISCol.add("Nil");	
				}
				
				arrMISCol.add(Helper.correctNull(rs.getString("app_guarantee")));
				arrMISCol.add(Helper.correctNull(rs.getString("APP_GUARANTEEAMT")));
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				rs1=DBUtils.executeLAPSQuery("sel_cusdetails^"+strAppId);
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull(rs1.getString("PERAPP_UDYAM_REGNO")));
					arrMISCol.add(Helper.correctNull(rs1.getString("PERAPP_SALES_TURNOVER")));
					arrMISCol.add(Helper.correctNull(rs1.getString("PERAPP_SALES_TURNOVER_DATE")));

					strcrtsales=Helper.correctNull((String)rs1.getString("PERAPP_CRITERIA_SALES_TURNOVER"));
					rs2=DBUtils.executeLAPSQuery("selmiscust^243^"+strcrtsales);
					if(rs2.next())
					{	
						arrMISCol.add(Helper.correctNull(rs2.getString("STAT_DATA_DESC1")));
		
					}
					else{
						arrMISCol.add("");	
					}

				}else{
					arrMISCol.add("");	
					arrMISCol.add("");	
					arrMISCol.add("");	

				}
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				arrMISCol.add(Helper.correctNull(rs.getString("app_plantval")));
				arrMISCol.add(Helper.correctNull(rs.getString("app_indname")));
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"12"+"^"+Helper.correctNull((String)rs.getString("APP_AGRICULTURE")));
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull((String)rs1.getString("mis_static_data_desc")));					
				}
				else
				{
					arrMISCol.add("");	
				}
				arrMISCol.add(Helper.correctNull(rs.getString("APP_INVESTMENT_DATE")));
				rs2=DBUtils.executeLAPSQuery("selmiscust^248^"+Helper.correctNull((String)rs.getString("APP_CRITERIA_INVESTMENT")));
				if(rs2.next())
				{	
					arrMISCol.add(Helper.correctNull(rs2.getString("STAT_DATA_DESC1")));

				}
				else
				{
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull((String)rs.getString("facility")));
				if(rs1!=null)
				{
				  rs1.close();				  
				}
				rs1=DBUtils.executeLAPSQuery("sel_guarantee^"+"9"+"^"+Helper.correctNull((String)rs.getString("app_weakersec")));
				if(rs1.next())
				{
					arrMISCol.add(Helper.correctNull((String)rs1.getString("mis_static_data_desc")));					
				}else
				{
					arrMISCol.add("");
				}
				arrMISCol.add(Helper.correctNull(rs.getString("APP_MINISTRY_INDUSTRY")));
				if(rs6!=null)
				{
					rs6.close();
				}
				strQuery=SQLParser.getSqlQuery("sel_minorityconstitutionchk^"+strAppId);
				rs6=DBUtils.executeQuery(strQuery);
				if(rs6.next())
				{
					arrMISCol.add("Y");

				}else{
					arrMISCol.add("");
				}
				arrMISRow.add(arrMISCol);
		}
			hshValues.put("arrMISRow", arrMISRow);
			
			String strrestscheme="",strfacsno="";
			strQuery=SQLParser.getSqlQuery("sel_corp_rest_processnote^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{		
				arrRestCol		= new ArrayList();
				hshValues.put("APP_RENEW_FLAG",correctNull((String)rs.getString("APP_RENEW_FLAG")));	
				hshValues.put("FAC_RESTR_SCHEME",correctNull((String)rs.getString("FAC_RESTR_SCHEME")));
				strrestscheme=correctNull((String)rs.getString("FAC_RESTR_SCHEME"));
				strfacsno=correctNull((String)rs.getString("FACILITY_SNO"));
			if(!strrestscheme.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"154"+"^"+strrestscheme);
			if(rs1.next())
			{
				strrestscheme=Helper.correctNull(rs1.getString("stat_data_desc1"));
				arrRestCol.add(Helper.correctNull((String)rs1.getString("stat_data_desc1"))+" - " +strfacsno);	
			}
			else
			{
				arrRestCol.add("");
			}
			}
			else
			{
				arrRestCol.add("");
			}
			arrRestRow.add(arrRestCol);
			}
			hshValues.put("arrRestRow", arrRestRow);
			if(rs!=null){
				rs.close();
			}
			String corprestructureval="N";
			strQuery = SQLParser.getSqlQuery("sel_rest_assess_selection^"+strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next()){
				corprestructureval="Y";
				
			}
			hshValues.put("corprestructureval",corprestructureval);
			rs=DBUtils.executeLAPSQuery("sel_rest_Assesment^"+strAppNo);
			if (rs.next()) 
			{
				hshValues.put("COM_APPNO", Helper.correctNull(rs.getString("COM_APPNO")));	
				hshValues.put("COM_TYPE_OF_BORROWER", Helper.correctNull(rs.getString("COM_TYPE_OF_BORROWER")));	
				strborrower=Helper.correctNull(rs.getString("COM_TYPE_OF_BORROWER"));
				hshValues.put("COM_PURPOSE_OF_LOAN", Helper.correctNull(rs.getString("COM_PURPOSE_OF_LOAN")));
				strpurposeloan=Helper.correctNull(rs.getString("COM_PURPOSE_OF_LOAN"));
				hshValues.put("COM_AGRI_ALLIED", Helper.correctNull(rs.getString("COM_AGRI_ALLIED")));
				stragriallied=Helper.correctNull(rs.getString("COM_AGRI_ALLIED"));
				hshValues.put("COM_PERM_ACT", Helper.correctNull(rs.getString("COM_PERM_ACT")));
				strpermact=Helper.correctNull(rs.getString("COM_PERM_ACT"));
				hshValues.put("COM_PERM_ACT_ELIGIBLE", Helper.correctNull(rs.getString("COM_PERM_ACT_ELIGIBLE")));	
				strpermactelig=Helper.correctNull(rs.getString("COM_PERM_ACT_ELIGIBLE"));
				if(strpermactelig.equalsIgnoreCase("Y")){
					strpermactelig="Yes";
				}else if(strpermactelig.equalsIgnoreCase("N")){
					strpermactelig="No";
				}else{
					strpermactelig="";
				}
				hshValues.put("strpermactelig", strpermactelig);	
				hshValues.put("COM_EXPOSUE", Helper.correctNull(rs.getString("COM_EXPOSUE")));	
				hshValues.put("COM_EXPOSUE_ELIGIBLE", Helper.correctNull(rs.getString("COM_EXPOSUE_ELIGIBLE")));
				strexposueelig=Helper.correctNull(rs.getString("COM_EXPOSUE_ELIGIBLE"));
				if(strexposueelig.equalsIgnoreCase("Y")){
					strexposueelig="Yes";
				}else if(strexposueelig.equalsIgnoreCase("N")){
					strexposueelig="No";
				}else{
					strexposueelig="";
				}
				hshValues.put("strexposueelig", strexposueelig);
				hshValues.put("COM_BRW_AVAILED", Helper.correctNull(rs.getString("COM_BRW_AVAILED")));
				strborroweravailed=Helper.correctNull(rs.getString("COM_BRW_AVAILED"));
				if(strborroweravailed.equalsIgnoreCase("Y")){
					strborroweravailed="Yes";
				}else if(strborroweravailed.equalsIgnoreCase("N")){
					strborroweravailed="No";
				}else{
					strborroweravailed="";
				}
				hshValues.put("strborroweravailed", strborroweravailed);
				hshValues.put("COM_BRW_AVAILED_ELIGIBIE",Helper.correctNull(rs.getString("COM_BRW_AVAILED_ELIGIBIE")));
				strborroweravailedelig=Helper.correctNull(rs.getString("COM_BRW_AVAILED_ELIGIBIE"));
				if(strborroweravailedelig.equalsIgnoreCase("Y")){
					strborroweravailedelig="Yes";
				}else if(strborroweravailedelig.equalsIgnoreCase("N")){
					strborroweravailedelig="No";
				}else{
					strborroweravailedelig="";
				}
				hshValues.put("strborroweravailedelig", strborroweravailedelig);
				hshValues.put("COM_PRESENT_MOROTORIUM", Helper.correctNull(rs.getString("COM_PRESENT_MOROTORIUM")));	
				hshValues.put("COM_PREVIOUS_MOROTORIUM", Helper.correctNull(rs.getString("COM_PREVIOUS_MOROTORIUM")));	
				hshValues.put("COM_EXTENDED_DATE", Helper.correctNull(rs.getString("COM_EXTENDED_DATE")));
				hshValues.put("COM_GST_NUMBER", Helper.correctNull(rs.getString("COM_GST_NUMBER")));
				hshValues.put("COM_MSME_REST_SCHEME", Helper.correctNull(rs.getString("COM_MSME_REST_SCHEME")));
				strmsmerestscheme= Helper.correctNull(rs.getString("COM_MSME_REST_SCHEME"));
				if(strmsmerestscheme.equalsIgnoreCase("Y")){
					strmsmerestscheme="Yes";
				}else if(strmsmerestscheme.equalsIgnoreCase("N")){
					strmsmerestscheme="No";
				}else{
					strmsmerestscheme="";
				}
				hshValues.put("strmsmerestscheme", strmsmerestscheme);
				
				hshValues.put("COM_MSME_RESTR_SCHEME_ELIG", Helper.correctNull(rs.getString("COM_MSME_RESTR_SCHEME_ELIG")));	
				strmsmerestschemeelig= Helper.correctNull(rs.getString("COM_MSME_RESTR_SCHEME_ELIG"));
				if(strmsmerestschemeelig.equalsIgnoreCase("Y")){
					strmsmerestschemeelig="Yes";
				}else if(strmsmerestschemeelig.equalsIgnoreCase("N")){
					strmsmerestschemeelig="No";
				}else{
					strmsmerestschemeelig="";
				}
				hshValues.put("strmsmerestschemeelig", strmsmerestschemeelig);
				
				hshValues.put("COM_RESOL_FW", Helper.correctNull(rs.getString("COM_RESOL_FW")));
				
				strframework= Helper.correctNull(rs.getString("COM_RESOL_FW"));
				if(strframework.equalsIgnoreCase("Y")){
					strframework="Yes";
				}else if(strframework.equalsIgnoreCase("N")){
					strframework="No";
				}else{
					strframework="";
				}
				hshValues.put("strframework", strframework);
				hshValues.put("COM_RESOL_FW_ELIGIBLE", Helper.correctNull(rs.getString("COM_RESOL_FW_ELIGIBLE")));
				
				strframeworkelig= Helper.correctNull(rs.getString("COM_RESOL_FW_ELIGIBLE"));
				if(strframeworkelig.equalsIgnoreCase("Y")){
					strframeworkelig="Yes";
				}else if(strframeworkelig.equalsIgnoreCase("N")){
					strframeworkelig="No";
				}else{
					strframeworkelig="";
				}
				hshValues.put("strframeworkelig", strframeworkelig);
				hshValues.put("COM_OTHER_LOAN", Helper.correctNull(rs.getString("COM_OTHER_LOAN")));
				
			String 	strrestallied= Helper.correctNull(rs.getString("COM_RESTRUCTURE_ALLIED"));
				if(strrestallied.equalsIgnoreCase("Y")){
					strrestallied="Yes";
				}else if(strrestallied.equalsIgnoreCase("N")){
					strrestallied="No";
				}else{
					strrestallied="";
				}
				hshValues.put("strrestallied", strrestallied);
				
		 String	strrestalliedelig= Helper.correctNull(rs.getString("COM_REST_ALLIED_ELIGIBLE"));
				if(strrestalliedelig.equalsIgnoreCase("Y")){
					strrestalliedelig="Yes";
				}else if(strrestalliedelig.equalsIgnoreCase("N")){
					strrestalliedelig="No";
				}else{
					strrestalliedelig="";
				}
				hshValues.put("strrestalliedelig", strrestalliedelig);
				
				hshValues.put("COM_RESTRUCTURE_ALLIED", Helper.correctNull(rs.getString("COM_RESTRUCTURE_ALLIED")));
				hshValues.put("COM_REST_ALLIED_ELIGIBLE", Helper.correctNull(rs.getString("COM_REST_ALLIED_ELIGIBLE")));
			}
			if (rs != null) {
				rs.close();
			}
			if(rs1!=null){
				rs1.close();
			}
			if(!strborrower.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"260"+"^"+strborrower);
			if(rs1.next())
			{
				strborrower=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				strborrower="";
			}
			}
			else
			{
				strborrower="";
			}
			hshValues.put("strborrower", strborrower);
			if(rs1!=null){
				rs1.close();
			}
			if(!strpurposeloan.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"261"+"^"+strpurposeloan);
			if(rs1.next())
			{
				strpurposeloan=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				strpurposeloan="";
			}
			}
			else
			{
				strpurposeloan="";
			}
			hshValues.put("strpurposeloan", strpurposeloan);
			
			
			if(rs1!=null){
				rs1.close();
			}
			if(!stragriallied.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"262"+"^"+stragriallied);
			if(rs1.next())
			{
				stragriallied=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				stragriallied="";
			}
			}
			else
			{
				stragriallied="";
			}
			hshValues.put("stragriallied", stragriallied);
			
			if(rs1!=null){
				rs1.close();
			}
			if(!strpermact.equalsIgnoreCase(""))
			{
			rs1=DBUtils.executeLAPSQuery("selstatdatabyiddesc^"+"263"+"^"+strpermact);
			if(rs1.next())
			{
				strpermact=Helper.correctNull(rs1.getString("stat_data_desc1"));
			}
			else
			{
				strpermact="";
			}
			}
			else
			{
				strpermact="";
			}
			hshValues.put("strpermact", strpermact);
			if(rs1!=null){
				rs1.close();
			}
				
				rs1 = DBUtils.executeLAPSQuery("sel_common_customer^"+ strAppId);
				if(rs1.next())
				{
					hshValues.put("COMINFO_GSTIN", correctNull(rs1.getString("COMINFO_GSTIN")));
					strgstnumber=correctNull(rs1.getString("COMINFO_GSTIN"));
					srwhethergstn=correctNull(rs1.getString("COMINFO_GSTINREG"));
					strexempted=correctNull(rs1.getString("COMINFO_GST_EXEMPTED"));
					hshValues.put("COMINFO_GSTINREG", correctNull(rs1.getString("COMINFO_GSTINREG")));
					hshValues.put("COMINFO_GST_EXEMPTED", correctNull(rs1.getString("COMINFO_GST_EXEMPTED")));
					hshValues.put("perapp_cbsid", correctNull(rs1.getString("perapp_cbsid")));
					hshValues.put("perapp_fname", correctNull(rs1.getString("perapp_title"))+"."+correctNull(rs1.getString("perapp_fname")));
					hshValues.put("PERAPP_INVOCDATE", Helper.correctNull((String) rs1.getString("PERAPP_INVOCDATE")));

				}
				//added for Svanidhi 2.0 and 3.0
				
				if(rs != null){	rs.close();}
				rs= DBUtils.executeQuery(SQLParser.getSqlQuery("sel_SvanidhiStatus^"+strAppNo+"^3"));
				if(rs.next())
				{
					hshValues.put("StrSvanidhi3", "Y");

				}
				
				if(rs != null){	rs.close();}
				rs= DBUtils.executeQuery(SQLParser.getSqlQuery("sel_SvanidhiUniqueapp^"+strAppNo+"^3"));
				if(rs.next())
				{
					hshValues.put("SVANIDHI_UNIQUENO3", Helper.correctNull((String) rs.getString("SVANIDHI_UNIQUENO")));
					hshValues.put("SVANIDHI_ACCNUMBER3", Helper.correctNull((String) rs.getString("SVANIDHI_ACCNUMBER")));
					hshValues.put("SVANIDHI_OPENED_DATE3", Helper.correctNull((String) rs.getString("SVANIDHI_OPENED_DATE")));
					hshValues.put("SVANIDHI_CLOSED_DATE3", Helper.correctNull((String) rs.getString("SVANIDHI_CLOSED_DATE")));
					hshValues.put("SVANIDHI_SANCTIONED_AMOUNT3", Helper.correctNull((String) rs.getString("SVANIDHI_SANCTIONED_AMOUNT")));
					hshValues.put("SVANIDHI_REPAY_DAYS3", Helper.correctNull((String) rs.getString("SVANIDHI_REPAY_DAYS")));
					hshValues.put("SVANIDHI_ELIGIBLE_AMOUNT3", Helper.correctNull((String) rs.getString("SVANIDHI_ELIGIBLE_AMOUNT")));
					hshValues.put("SVANIDHI_BORROWER_AMOUNT3", Helper.correctNull((String) rs.getString("SVANIDHI_BORROWER_AMOUNT")));
					hshValues.put("SVANIDHI_PROPOSED_AMOUNT3", Helper.correctNull((String) rs.getString("SVANIDHI_PROPOSED_AMOUNT")));

				}
          
					
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureII login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	
	public HashMap getAnnexureVI(HashMap hshReqValues) 
	{
		ResultSet rs 		= null;
		HashMap hshValues	= new HashMap();
		String strAppId="",strAppNo="";
		
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		ArrayList arrRowtotal	= new ArrayList();
		ArrayList arrCol	= new ArrayList();
		ArrayList arrRow	= new ArrayList();
		double total=0.00,subtotal=0.00,totalFUNDWC=0.00,totalNONFUNDWC=0.00,totalTOTWC=0.00,totalTERMLOAN=0.00,totalnetsales=0.00;
		double totalnetworth=0.00,totaltoltnw=0.00,totalcurrratio=0.00,totalestproturn=0.00,totalfreetext1=0.00;
		double totalfreetext2=0.00,totalfreetext3=0.00,totalnetprofit=0.00;
		String value="",desc="",strValuesIn="";
		try
		{
			String strFlag = correctNull((String)hshReqValues.get("annxFlag"));
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			if(rs!=null){rs.close();}
			
			//Values In
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			hshValues.put("strValuesIn", strValuesIn);
			 
			if(rs!=null)
			{
				rs.close();
			}
			rs	= DBUtils.executeLAPSQuery("sel_swot^"+strAppNo);
			while(rs.next())
			{
				arrCol	= new ArrayList();	
				value=Helper.correctNull(rs.getString("com_selswot"));
				if(value.equalsIgnoreCase("1"))
				{
					desc="Strength";
				}
				else if(value.equalsIgnoreCase("2"))
				{
					desc="Weakness";
				}
				else if(value.equalsIgnoreCase("3"))
				{
					desc="Opportunities";
				}
				else
				{
					desc="Threats";
				}
				arrCol.add(desc);
				arrCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
				arrRow.add(arrCol);
			}
			hshValues.put("arrRow", arrRow);
			if(rs!=null)
			{
				rs.close();
			}
			// Industry Analysis
			rs	= DBUtils.executeLAPSQuery("sel_comments^Industry^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("com_comments", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
			}
			if(rs!=null)
			{
				rs.close();
			}
			rs	= DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"InterFirmComparsion");
			if(rs.next())
			{
				hshValues.put("cmt_comments", correctNull(Helper.CLOBToString(rs.getClob("cmt_comments"))));
				hshValues.put("cmt_intercomments", correctNull(Helper.CLOBToString(rs.getClob("cmt_intercomments"))));
			}
			if(rs!=null)
			{
				rs.close();
			}
			
			//Inter Company Comparison
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selinterfrimcompare^"+strAppNo);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				subtotal=0.00;
				arrOutCol.add(correctNull(rs.getString("interfirm_comname")));
				arrOutCol.add(correctNull(rs.getString("interfirm_year")));
				arrOutCol.add(correctNull(rs.getString("interfirm_fintype")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("INTERFIRM_FUNDWC")));
				totalFUNDWC=totalFUNDWC+subtotal;
				arrOutCol.add(Helper.correctDouble((String)rs.getString("INTERFIRM_FUNDWC")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("INTERFIRM_NONFUNDWC")));
				totalNONFUNDWC=totalNONFUNDWC+subtotal;
				arrOutCol.add(Helper.correctDouble((String)rs.getString("INTERFIRM_NONFUNDWC")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("INTERFIRM_TOTWC")));
				totalTOTWC=totalTOTWC+subtotal;
				arrOutCol.add(Helper.correctDouble((String)rs.getString("INTERFIRM_TOTWC")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("INTERFIRM_TERMLOAN")));
				totalTERMLOAN=totalTERMLOAN+subtotal;
				arrOutCol.add(Helper.correctDouble((String)rs.getString("INTERFIRM_TERMLOAN")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_netsales")));
				totalnetsales=totalnetsales+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_netsales")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_netprofit")));
				totalnetprofit=totalnetprofit+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_netprofit")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_tangnetworth")));
				totalnetworth=totalnetworth+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_tangnetworth")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_toltnw")));
				totaltoltnw=totaltoltnw+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_toltnw")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_currratio")));
				totalcurrratio=totalcurrratio+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_currratio")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_estproturn")));
				totalestproturn=totalestproturn+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_estproturn")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_freetext1")));
				totalfreetext1=totalfreetext1+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_freetext1")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_freetext2")));
				totalfreetext2=totalfreetext2+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_freetext2")));
				subtotal=Double.parseDouble(Helper.correctDouble((String)rs.getString("interfirm_freetext3")));
				totalfreetext3=totalfreetext3+subtotal;
				arrOutCol.add(Helper.correctDouble(rs.getString("interfirm_freetext3")));
				arrOutRow.add(arrOutCol);
			}
			arrRowtotal=new ArrayList();
			arrRowtotal.add(String.valueOf(totalFUNDWC));
			arrRowtotal.add(String.valueOf(totalNONFUNDWC));
			arrRowtotal.add(String.valueOf(totalTOTWC));
			arrRowtotal.add(String.valueOf(totalTERMLOAN));
			arrRowtotal.add(String.valueOf(totalnetsales));
			arrRowtotal.add(String.valueOf(totalnetprofit));
			arrRowtotal.add(String.valueOf(totalnetworth));
			arrRowtotal.add(String.valueOf(totaltoltnw));
			arrRowtotal.add(String.valueOf(totalcurrratio));
			arrRowtotal.add(String.valueOf(totalestproturn));
			arrRowtotal.add(String.valueOf(totalfreetext1));
			arrRowtotal.add(String.valueOf(totalfreetext2));
			arrRowtotal.add(String.valueOf(totalfreetext3));
			hshValues.put("arrIFCRow", arrOutRow);
			hshValues.put("arrRowtotal", arrRowtotal);
			
			
			//Inter Firm Comparison Others
			rs	= DBUtils.executeLAPSQuery("selinterfrimcompval^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("com_freetext1", correctNull(rs.getString("com_freetext1")));
				hshValues.put("com_freetext2", correctNull(rs.getString("com_freetext2")));
				hshValues.put("com_freetext3", correctNull(rs.getString("com_freetext3")));
			}
			
			hshValues.put("strFlag",strFlag);
			String strFinvaluesIn="";
			int strFinid=0;
			
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			if(rs.next())
			{
				strFinvaluesIn	= correctNull(rs.getString("fin_valuesarein"));
			}
			else{
				strFinvaluesIn="R";
			}
			if(rs!=null){rs.close();}
			
			//Financail Values In
			if(strFinvaluesIn.equals("C")){strFinvaluesIn = "Crore";}
			else if(strFinvaluesIn.equals("L")){strFinvaluesIn	= "Lacs";}
			else if(strFinvaluesIn.equals("R")){strFinvaluesIn	= "Rs";}
			hshValues.put("strFinvaluesIn", strFinvaluesIn);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureVI login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	
	public HashMap getAnnexureV(HashMap hshReqValues) 
	{
		ResultSet rs= null,rs1=null;		
		HashMap hshValues	= new HashMap();
		String strAppId="",strAppNo="", strVal="",strAmountValue="",strAmtValueIn="";
		String strYearSno="";		
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		String strValuesIn="";
		
		try
		{
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			hshValues.put("strValuesIn", strValuesIn);
			
			rs	= DBUtils.executeLAPSQuery("sel_amountvalue^"+strAppNo);
			if(rs.next())
			{
		     hshValues.put("com_amountvalue", Helper.correctNull(rs.getString("com_amountvalue")));
		     strAmountValue=Helper.correctNull(rs.getString("com_amountvalue"));
			}
			
			if(strAmountValue.equalsIgnoreCase("C"))
			{strAmtValueIn ="Crore";}
			else if(strAmountValue.equalsIgnoreCase("L")){strAmtValueIn ="Lacs";}
			else {strAmtValueIn ="Rs";}
			
			hshValues.put("strAmountValue", strAmountValue);
			hshValues.put("strAmtValueIn", strAmtValueIn);
			
			//Comments
			rs	= DBUtils.executeLAPSQuery("selothercommentsdetails^"+strAppNo);
			while(rs.next())
			{
				hshValues.put(correctNull(rs.getString("com_commentson"))+"Comments", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
			}
			
			if(rs!=null)
			{
				rs.close();
			}
			rs=DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^7^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("cesComments", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
				
			}
			if(rs!=null)
			{
				rs.close();
			}
			rs=DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^8^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("rocComments", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
				
			}	
			if(rs!=null)
			{
				rs.close();
			}
			rs=DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^10^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("centralreg", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
				
			}	
			if(rs!=null)
			{
				rs.close();
			}
			rs=DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^11^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("favbank", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
				
			}	
			
			//Other Details
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selothercommentsdetails^"+strAppNo);
			while(rs.next())
			{
				hshValues.put("com_interest",Helper.correctDouble(rs.getString("com_interest")));
				hshValues.put("com_otherincome",Helper.correctDouble(rs.getString("com_otherincome")));

				strVal	= correctNull(rs.getString("com_abg"));
				
				if(strVal.equals("Y")){strVal	= "Yes";}
				else if(strVal.equals("N")){strVal	= "No";}
				else{strVal	= "";}
				
				hshValues.put("com_abg",strVal);
				
				strVal	= correctNull(rs.getString("com_prta"));
				
				if(strVal.equals("Y")){strVal	= "Yes";}
				else if(strVal.equals("N")){strVal	= "No";}
				else{strVal	= "";}
				
				hshValues.put("com_prta",strVal);
				
				strVal	= correctNull(rs.getString("com_adbothersbank"));
				
				if(strVal.equals("Y")){strVal	= "Yes";}
				else if(strVal.equals("N")){strVal	= "No";}
				else{strVal	= "";}
				
				hshValues.put("com_adbothersbank",strVal);
				
			}
			
			//TL Comments
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_comments^term^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("TLComments", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
			}
			
			//OD/ CC Limits
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_odcclimit^"+strAppNo);
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				
				 strYearSno=Helper.correctNull((String)rs.getString("com_year_sno"));
				if(!strYearSno.equalsIgnoreCase(""))
				{
					if(rs1!=null)
					{
						rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("selotherfromtodates^"+strAppNo+"^"+strYearSno);
					if(rs1.next())
					{
						arrOutCol.add(correctNull(rs1.getString("com_fromdate")));		//0
						arrOutCol.add(correctNull(rs1.getString("com_todate")));		//1			
					}
					else
					{
						arrOutCol.add("");
						arrOutCol.add("");						
					}			
				}
				else
				{					
					arrOutCol.add("");
					arrOutCol.add("");					
				}				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_sanclimit")));		//2
				arrOutCol.add(Helper.correctDouble(rs.getString("com_maxdrbal")));		//3
				arrOutCol.add(Helper.correctDouble(rs.getString("com_mindrbal")));		//4
				arrOutCol.add(Helper.correctDouble(rs.getString("com_maxcrbal")));		//5
				arrOutCol.add(Helper.correctDouble(rs.getString("com_mincrbal")));		//6
				arrOutCol.add(Helper.correctDouble(rs.getString("com_amount")));		//7
				arrOutCol.add(Helper.correctInt(rs.getString("com_notimeexcess")));		//8
				arrOutCol.add(Helper.correctInt(rs.getString("com_noamtcheque")));		//9
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_crsummation"))));		//10
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_drsummation"))));		//11
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_creditsum")));		//12
				arrOutCol.add(Helper.correctDouble(rs.getString("com_debitsum")));		//13
				arrOutCol.add(Helper.CLOBToString(rs.getClob("com_odcccomments")));//14
				arrOutCol.add(strYearSno);//15
				arrOutCol.add(Helper.CLOBToString(rs.getClob("com_creditsumcomts")));//16
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrODCCRow", arrOutRow);
			
			//BPC Details
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_packingcredit^"+strAppNo);
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				if(correctNull(rs.getString("pc_seltype")).equals("1"))
				{
					arrOutCol.add(Helper.correctDouble(rs.getString("pc_sancamt")));
					arrOutCol.add(Helper.correctInt(rs.getString("pc_cheno")));
					arrOutCol.add(Helper.correctDouble(rs.getString("pc_cheamt")));
					arrOutCol.add(Helper.correctInt(rs.getString("pc_retno")));
					arrOutCol.add(Helper.correctDouble(rs.getString("pc_retamt")));
					arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("pc_remarks"))));
					arrOutCol.add(Helper.correctNull((String)rs.getString("pc_year_sno")));
				}
				
				if(arrOutCol.size()>0)
				{
					arrOutRow.add(arrOutCol);
				}
			}
			hshValues.put("arrBPCRow", arrOutRow);
			
			//Packing Credit /Shipping Loan
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_packingcredit^"+strAppNo);
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				if(correctNull(rs.getString("pc_seltype")).equals("2"))
				{
					arrOutCol.add(Helper.correctDouble(rs.getString("pc_sancamt")));
					arrOutCol.add(Helper.correctInt(rs.getString("pc_cheno")));
					arrOutCol.add(Helper.correctDouble(rs.getString("pc_cheamt")));
					arrOutCol.add(Helper.correctInt(rs.getString("pc_retno")));
					arrOutCol.add(Helper.correctDouble(rs.getString("pc_retamt")));
					arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("pc_remarks"))));
					arrOutCol.add(Helper.correctNull((String)rs.getString("pc_year_sno")));
					arrOutCol.add(Helper.correctNull((String)rs.getString("com_excesspermitted")));
				}
				
				if(arrOutCol.size()>0)
				{
					arrOutRow.add(arrOutCol);
				}
			}
			hshValues.put("arrPCSRow", arrOutRow);
			
			//Non Fund based Limits Inland LC Limit
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_com_nonfundloanlc^"+strAppNo+"^1");
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_sanctionedamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdpno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdpamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdaamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_importlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_importlcdaamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_importlcdpno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_importlcdpamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_devolvementno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_devolvementamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_permittedno")));
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_remark"))));
				arrOutCol.add(Helper.correctNull((String)rs.getString("COM_YEAR_SNO")));
		
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrNFBRow", arrOutRow);
			
			//Non Fund based Limits Import LC Limit - by DINESH on 11/04/2014
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_com_nonfundloanlc^"+strAppNo+"^4");
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_sanctionedamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdpno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdpamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdaamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_importlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_importlcdaamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_importlcdpno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_importlcdpamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_devolvementno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_devolvementamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_permittedno")));
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_remark"))));
				arrOutCol.add(Helper.correctNull((String)rs.getString("COM_YEAR_SNO")));

				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrNFBRowIM", arrOutRow);
			
			//Sanctioned Bank Guarantee Limit
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_com_nonfundloanlc^"+strAppNo+"^3");
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_sanctionedamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdpno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdpamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdaamt")));
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_remark"))));
				arrOutCol.add(Helper.correctNull((String)rs.getString("COM_YEAR_SNO")));
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrBGLmtRow", arrOutRow);
			
			//Sanctioned Buyers credit limit
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_com_nonfundloanlc^"+strAppNo+"^2");
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_sanctionedamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdpno")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdpamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_inlandlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_inlandlcdaamt")));
				arrOutCol.add(Helper.correctInt(rs.getString("com_importlcdano")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_importlcdaamt")));
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("com_remark"))));
				arrOutCol.add(Helper.correctNull((String)rs.getString("COM_YEAR_SNO")));

				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrBCLmtRow", arrOutRow);
			
			//Any Other Facility Comments
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_comments^otherfac^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("otherfacComments", correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
			}
			
			//Inspection Comments
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selcom_Rbiloanpolicyguide^"+strAppNo);
			
			while(rs.next())
			{
				hshValues.put(correctNull(rs.getString("comrbi_pagetype"))+"comrbi_asdate",correctNull(rs.getString("comrbi_asdate")));
				hshValues.put(correctNull(rs.getString("comrbi_pagetype"))+"comrbi_comments", correctNull(Helper.CLOBToString(rs.getClob("comrbi_comments"))));
				hshValues.put(correctNull(rs.getString("comrbi_pagetype"))+"comrbi_compliance", correctNull(Helper.CLOBToString(rs.getClob("comrbi_compliance"))));
				hshValues.put(correctNull(rs.getString("comrbi_pagetype"))+"com_auditconductedby", correctNull(rs.getString("com_auditconductedby")));
			}
			
			//Bills purchased
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_billspurchased^"+strAppNo+"^"+"1");
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();				
				strYearSno=Helper.correctNull((String)rs.getString("BP_YEAR_SNO"));
				if(!strYearSno.equalsIgnoreCase(""))
				{
					if(rs1!=null)
					{
					rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("selotherfromtodates^"+strAppNo+"^"+strYearSno);
					if(rs1.next())
					{
						arrOutCol.add(correctNull(rs1.getString("com_fromdate")));
						arrOutCol.add(correctNull(rs1.getString("com_todate")));					
					}
					else
					{
						arrOutCol.add("");
					    arrOutCol.add("");						
					}			
					}
					else
					{					
						arrOutCol.add("");
						arrOutCol.add("");					
					}				
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_sanctionamt")));//2
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number1")));//3
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount1")));//4
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number2")));//5
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount2")));//6
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number3")));//7
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount3")));//8
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number4")));//9
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount4")));//10
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number5")));//111
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount5")));//2
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number6")));//13
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount6")));//14
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number7")));//15
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount7")));//16
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number8")));//17
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount8")));//18
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number9")));//19
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount9")));//20
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number10")));//21
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount10")));//22
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number11")));//23
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount11")));//24
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_excess")));//25
				arrOutCol.add(correctNull(rs.getString("bp_comments")));//26
				arrOutCol.add(correctNull(rs.getString("BP_YEAR_SNO")));//27
				arrOutCol.add(Helper.CLOBToString(rs.getClob("bp_advancecmts")));//28
				arrOutCol.add(Helper.CLOBToString(rs.getClob("bd_idpmscnts")));//29

				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrBPurRow", arrOutRow);	
			
			// For Export Bills - by DINESH on 11/04/2014
			
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_billspurchased^"+strAppNo+"^"+"2");
			
			while(rs.next())
			{
				arrOutCol	= new ArrayList();				
				strYearSno=Helper.correctNull((String)rs.getString("BP_YEAR_SNO"));
				if(!strYearSno.equalsIgnoreCase(""))
				{
					if(rs1!=null)
					{
					rs1.close();
					}
					rs1=DBUtils.executeLAPSQuery("selotherfromtodates^"+strAppNo+"^"+strYearSno);
					if(rs1.next())
					{
						arrOutCol.add(correctNull(rs1.getString("com_fromdate")));
						arrOutCol.add(correctNull(rs1.getString("com_todate")));					
					}
					else
					{
						arrOutCol.add("");
					    arrOutCol.add("");						
					}			
					}
					else
					{					
						arrOutCol.add("");
						arrOutCol.add("");					
					}				
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_sanctionamt")));//2
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number1")));//3
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount1")));//4
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number2")));//5
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount2")));//6
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number3")));//7
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount3")));//8
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number4")));//9
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount4")));//10
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number5")));//11
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount5")));//12
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number6")));//13
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount6")));//14
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number7")));//15
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount7")));//16
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number8")));//17
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount8")));//18
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number9")));//19
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount9")));//20
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number10")));//21
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount10")));//22
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number11")));//23
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount11")));//24
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_excess")));//25
				arrOutCol.add(correctNull(rs.getString("bp_comments")));//26
				arrOutCol.add(correctNull(rs.getString("BP_YEAR_SNO")));//27
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number12")));//28
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount12")));//29
				arrOutCol.add(Helper.correctInt(rs.getString("bp_number13")));//30
				arrOutCol.add(Helper.correctDouble(rs.getString("bp_amount13")));//31
				arrOutCol.add(Helper.CLOBToString(rs.getClob("bp_advancecmts")));//32
				arrOutCol.add(Helper.CLOBToString(rs.getClob("bd_idpmscnts")));//33
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrBPurEXRow", arrOutRow);	
			
			// For Exposure to Industry by DINESH on 10/04/2014 
			if(rs!=null){rs.close();}
			rs = DBUtils.executeLAPSQuery("SEL_EXPOSURETOINDUSTRY^"+ strAppNo);
			if (rs.next()) 
			{
				hshValues.put("COM_ACTIVITY", Helper.correctNull((String)rs.getString("COM_ACTIVITY")));
				hshValues.put("COM_ADVANCEDATE", Helper.correctNull((String)rs.getString("COM_ADVANCEDATE")));
				hshValues.put("COM_PERCENTAGEGBCDATE", Helper.correctNull((String)rs.getString("COM_PERCENTAGEGBCDATE")));
				hshValues.put("COM_ADVANCEAMOUNT", Helper.correctDouble((String)rs.getString("COM_ADVANCEAMOUNT")));
				hshValues.put("COM_GBCPERCENTAGE", Helper.correctDouble((String)rs.getString("COM_GBCPERCENTAGE")));
				hshValues.put("COM_NPAAMOUNT", Helper.correctDouble((String)rs.getString("COM_NPAAMOUNT")));
				hshValues.put("COM_NPAGBCPERCENTAGE", Helper.correctDouble((String)rs.getString("COM_NPAGBCPERCENTAGE")));
				hshValues.put("COM_GBCDATE", Helper.correctNull((String)rs.getString("COM_GBCDATE")));
				hshValues.put("COM_GBCAMOUNT", Helper.correctDouble((String)rs.getString("COM_GBCAMOUNT")));
				hshValues.put("COM_CALBASE", Helper.correctDouble((String)rs.getString("COM_CALBASE")));
			}
			
			arrOutRow=new ArrayList();
			
			if(rs!=null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_nonfundloanothers^"+strAppNo+"^1");
			while(rs.next()) 
			{
				arrOutCol= new ArrayList();
				arrOutCol.add(Helper.correctNull(rs.getString("COM_SNO")));//0
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PAGETYPE")));//1
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PERMITTEDNO")));//2
				arrOutCol.add(Helper.correctDouble(rs.getString("COM_PERMITTEDAMT")));//3
				arrOutCol.add(Helper.replaceForJavaScriptString(Helper.CLOBToString(rs.getClob("COM_REMARK"))));//4
				arrOutCol.add(Helper.correctNull(rs.getString("COM_YEAR_SNO")));//5
				
				arrOutRow.add(arrOutCol);
			}
			
			hshValues.put("arrImpoCollection", arrOutRow);
			
			arrOutRow=new ArrayList();
			
			if(rs!=null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_nonfundloanothers^"+strAppNo+"^2");
			while(rs.next()) 
			{
				arrOutCol= new ArrayList();
				arrOutCol.add(Helper.correctNull(rs.getString("COM_SNO")));//0
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PAGETYPE")));//1
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PERMITTEDNO")));//2
				arrOutCol.add(Helper.correctDouble(rs.getString("COM_PERMITTEDAMT")));//3
				arrOutCol.add(Helper.replaceForJavaScriptString(Helper.CLOBToString(rs.getClob("COM_REMARK"))));//4
				arrOutCol.add(Helper.correctNull(rs.getString("COM_YEAR_SNO")));//5
				
				arrOutRow.add(arrOutCol);
			}
			
			hshValues.put("arrGoodsLoan", arrOutRow);
			
			arrOutRow=new ArrayList();
			
			if(rs!=null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_nonfundloanothers^"+strAppNo+"^3");
			while(rs.next()) 
			{
				arrOutCol= new ArrayList();
				arrOutCol.add(Helper.correctNull(rs.getString("COM_SNO")));//0
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PAGETYPE")));//1
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PERMITTEDNO")));//2
				arrOutCol.add(Helper.correctDouble(rs.getString("COM_PERMITTEDAMT")));//3
				arrOutCol.add(Helper.replaceForJavaScriptString(Helper.CLOBToString(rs.getClob("COM_REMARK"))));//4
				arrOutCol.add(Helper.correctNull(rs.getString("COM_YEAR_SNO")));//5
				
				arrOutRow.add(arrOutCol);
			}
			
			hshValues.put("arrWareHouseRec", arrOutRow);
			
			arrOutRow=new ArrayList();
			
			if(rs!=null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_nonfundloanothers^"+strAppNo+"^4");
			while(rs.next()) 
			{
				arrOutCol= new ArrayList();
				arrOutCol.add(Helper.correctNull(rs.getString("COM_SNO")));//0
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PAGETYPE")));//1
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PERMITTEDNO")));//2
				arrOutCol.add(Helper.correctDouble(rs.getString("COM_PERMITTEDAMT")));//3
				arrOutCol.add(Helper.replaceForJavaScriptString(Helper.CLOBToString(rs.getClob("COM_REMARK"))));//4
				arrOutCol.add(Helper.correctNull(rs.getString("COM_YEAR_SNO")));//5
				
				arrOutRow.add(arrOutCol);
			}
			
			hshValues.put("arrChequeDiscou", arrOutRow);
			
			arrOutRow=new ArrayList();
			
			if(rs!=null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_nonfundloanothers^"+strAppNo+"^5");
			while(rs.next()) 
			{
				arrOutCol= new ArrayList();
				arrOutCol.add(Helper.correctNull(rs.getString("COM_SNO")));//0
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PAGETYPE")));//1
				arrOutCol.add(Helper.correctNull(rs.getString("COM_PERMITTEDNO")));//2
				arrOutCol.add(Helper.correctDouble(rs.getString("COM_PERMITTEDAMT")));//3
				arrOutCol.add(Helper.replaceForJavaScriptString(Helper.CLOBToString(rs.getClob("COM_REMARK"))));//4
				arrOutCol.add(Helper.correctNull(rs.getString("COM_YEAR_SNO")));//5
				
				arrOutRow.add(arrOutCol);
			}
			
			hshValues.put("arrInLBillsDisco", arrOutRow);
			
			String pagetype = "Turnover";
			rs = DBUtils.executeLAPSQuery("sel_retailcomments^"+ strAppNo+"^"+pagetype);
			if (rs.next()) 
			{
				hshValues.put("cmt_comments"+pagetype,correctNull(Helper.CLOBToString(rs.getClob("cmt_comments"))));
			}
			
			if(rs!=null)
			{
				rs.close();
			}
			for(int i=1;i<14;i++)
			{
				rs=DBUtils.executeLAPSQuery("sel_comcommentscopmof^otherfac^"+i+"^"+strAppNo);
				if(rs.next())
				{
					hshValues.put("otherfac_comm"+i, correctNull(Helper.CLOBToString(rs.getClob("com_comments"))));
					
				}
			}
			
			// For Business Operation Details - by DINESH on 11/04/2014
			arrOutRow	=  new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selothercommentsdetails^"+strAppNo);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(Helper.correctDouble(rs.getString("com_interest")));	//0	
				arrOutCol.add(Helper.correctDouble(rs.getString("com_otherincome"))); //1
				arrOutCol.add(Helper.CLOBToString(rs.getClob("com_recoverystatus"))); //2
				arrOutCol.add(Helper.correctDouble(rs.getString("com_fromdate"))); //3
				arrOutCol.add(Helper.correctDouble(rs.getString("com_todate"))); //4
				arrOutCol.add(Helper.correctNull((String)rs.getString("COM_SNO"))); //5
				arrOutCol.add(Helper.correctNull((String)rs.getString("com_odinterest"))); //6
				arrOutCol.add(Helper.correctNull((String)rs.getString("com_forexincome"))); //7
				arrOutCol.add(Helper.correctNull((String)rs.getString("com_tlinterest"))); //8
				arrOutCol.add(Helper.correctNull((String)rs.getString("com_otherfacincome"))); //9
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrOthDetRow", arrOutRow);
			
			//For Exposure to Industry Comments - by DINESH on 15/04/2014
			
			if(rs!=null){rs.close();}
			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"+ "exptoinds");
			if (rs.next()) 
			{
				hshValues.put("fin_comments", Helper.CLOBToString(rs.getClob("fin_comments")));
				hshValues.put("fin_comments1", Helper.CLOBToString(rs.getClob("fin_comments1")));
			}
			
			//For Comments on Transaction in the existing accounts
			if(rs!=null){rs.close();}
			rs = DBUtils.executeLAPSQuery("sel_comments^commentsTrans^" + strAppNo);
			if (rs.next()) 
			{
				hshValues.put("strTransExistingAcc_comments",Helper .CLOBToString(rs.getClob("COM_COMMENTS")));
			}
			
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureV login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
				if(rs1 != null){	rs1.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	public HashMap getAnnexureIII(HashMap hshReqValues) 
	{
		ResultSet rs 		= null , rs1=null,rs2=null,rs3=null;
		HashMap hshValues	= new HashMap();
		String strAppId="",strAppNo="", strVal="",strValuesIn="",strVal1="";
		String strQuery	= "",strQuery2="",strQuery1="",strAmountValue="",strAmtValueIn="";
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		ArrayList arrOutRowCons	= new ArrayList();
		ArrayList arrGroupconcerns	= new ArrayList();
		String strLoanType="";
		String strOutstandingDate="";
		ArrayList arrColPrmo	= new ArrayList();
		ArrayList arrRowPrmo	= new ArrayList();
		
		String strValNew="";
		String strAssetClassification	= "";
		String strFacilityFC="";
		double strBankLimit=0.00,strBankOS=0.00,dblExposure=0.0;
		String strFacilityNature="";
		
		DecimalFormat dc = new DecimalFormat();
		dc.setGroupingUsed(false);
		dc.setMaximumFractionDigits(2);
		dc.setMinimumFractionDigits(2);
		String strFacility		= "";
		String strFacilityId="";
		String strFacilityFor	="";
		String strFacilityDesc="";
		String strAppOldId="";
		try
		{
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_applicantiddemo^"+strAppNo);
			if(rs.next())
			{
				strAppOldId	= correctNull(rs.getString("demo_comappid"));
			}
			
			//Values In
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			//Values In
			strValNew=strValuesIn;
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			
			hshValues.put("strValuesIn", strValuesIn);
			
			rs	= DBUtils.executeLAPSQuery("sel_amountvalue^"+strAppNo);
			if(rs.next())
			{
		     hshValues.put("com_amountvalue", Helper.correctNull(rs.getString("com_amountvalue")));
		     strAmountValue=Helper.correctNull(rs.getString("com_amountvalue"));
			}
			if(strAmountValue.equalsIgnoreCase("C"))
			{strAmtValueIn ="Crore";}
			else if(strAmountValue.equalsIgnoreCase("L")){strAmtValueIn ="Lacs";}
			else {strAmtValueIn ="Rs";}
			
			hshValues.put("strAmountValue", strAmountValue);
			hshValues.put("strAmtValueIn", strAmtValueIn);
			
			rs	= DBUtils.executeLAPSQuery("sel_appstatus^"+strAppNo);
			if(rs.next())
			{
				strLoanType	= correctNull((String)rs.getString("app_loantype"));
				strLoanType	= strLoanType.toLowerCase();
			}
			if(rs !=null)
			{
				rs.close();
			}
			//Banking Arrangement - Our Bank
			String bank_arran="N";
			/*rs	= DBUtils.executeLAPSQuery("com_BAOur_all^"+strAppNo);
			while(rs.next())
			{
				strFacility		= correctNull((String)rs.getString("combk_facility"));
				String strFacilityCode[]=strFacility.split("~");
				strFacilityId=Helper.correctInt(strFacilityCode[0]);
				strFacilityFor	= correctNull((String)rs.getString("combk_modtype"));
				strFacilityDesc="";
				
				if(strFacilityFor.equalsIgnoreCase("r")||strFacilityFor.equalsIgnoreCase("p"))
				{
					rs1	= DBUtils.executeLAPSQuery("selLoanPurpose^"+strFacilityId);
					if(rs1.next())
					{
						strFacilityDesc	= correctNull((String)rs1.getString("prddesc"));
						strFacilityFC=Helper.correctNull(rs1.getString("com_headfac"));
						strFacilityNature=Helper.correctNull(rs1.getString("COM_FACNATURE"));
					}
				}
				else
				{
					rs1	= DBUtils.executeLAPSQuery("sel_facilitycorp^"+strFacilityId);
					if(rs1.next())
					{
						strFacilityDesc	= correctNull((String)rs1.getString("prddesc"));
						strFacilityFC=Helper.correctNull((String)rs1.getString("com_headfac"));
						strFacilityNature=Helper.correctNull((String)rs1.getString("COM_FACNATURE"));
					}
				}
				
				
				arrOutCol	= new ArrayList();
				
				strBankLimit=Double.parseDouble(Helper.correctDouble(rs.getString("combk_limit")));
				if(strFacilityFC.equalsIgnoreCase("1")){
					strBankLimit=strBankLimit/50;
				}
				strBankOS=Double.parseDouble(Helper.correctDouble(rs.getString("combk_os")));
				if(strFacilityFC.equalsIgnoreCase("1")){
					strBankOS=strBankOS/50;
				}
				if(strFacilityNature.equalsIgnoreCase("2"))
				{
					arrOutCol.add("Term Loan");//0
				}else{
					arrOutCol.add(strFacilityDesc);//0
				}
				arrOutCol.add("");
				arrOutCol.add(String.valueOf(strBankLimit));
				arrOutCol.add(correctNull(rs.getString("combk_sancrefno")));
				arrOutCol.add(correctNull(rs.getString("combk_sancdate")));
				arrOutCol.add(Helper.correctDouble(rs.getString("combk_spread")));//5
				arrOutCol.add(String.valueOf(strBankOS));
				arrOutCol.add(correctNull(rs.getString("combk_osasondate")));
				arrOutCol.add(correctNull(rs.getString("combk_duedate")));
				arrOutCol.add(correctNull(rs.getString("combk_arrears")));
				arrOutCol.add(correctNull(rs.getString("combk_purpose")));	
				arrOutCol.add(correctNull(rs.getString("combk_inttype")));//11
				arrOutCol.add(Helper.correctDouble(rs.getString("combk_interestrate")));//12
				arrOutCol.add(Helper.correctNull(rs.getString("combk_fac_grp")));//13
				String strType=Helper.correctNull(rs.getString("combk_factype"));
				String strTypeDesc="";
				if(strType.equalsIgnoreCase("M")){
					strTypeDesc="Main Limit";
				}else if(strType.equalsIgnoreCase("S"))
				{
					strTypeDesc="Sub Limit";
				}
				arrOutCol.add(strTypeDesc);//14
				arrOutCol.add(Helper.correctNull(rs.getString("combk_remarks")));//15
				arrOutCol.add(strType);//16
				arrOutRow.add(arrOutCol);
				if(strOutstandingDate.equalsIgnoreCase(""))
				strOutstandingDate=correctNull(rs.getString("combk_osasondate"));
				hshValues.put("bank_arran", "Y");
			}*/
			
			if(rs !=null)
			{rs.close();}
			rs	= DBUtils.executeLAPSQuery("selectprocessnoteexistingfacilities^"+strAppNo+"^"+strAppNo);
			while(rs.next())
			{
				strFacilityFC=correctNull(rs.getString("com_headfac"));
				strBankLimit=Double.parseDouble(Helper.correctDouble(rs.getString("combk_limit")));
				strBankOS=Double.parseDouble(Helper.correctDouble(rs.getString("combk_os")));
				dblExposure=Double.parseDouble(Helper.correctDouble(rs.getString("com_exposure")));
				if(strFacilityFC.equalsIgnoreCase("1")){
					strBankLimit=strBankLimit/50;
					strBankOS=strBankOS/50;
					dblExposure=dblExposure/50;
				}
				arrOutCol	= new ArrayList();
				if(correctNull(rs.getString("facdesc")).equalsIgnoreCase("TL"))
					arrOutCol.add("Term Loan");
				else if(correctNull(rs.getString("facdesc")).equalsIgnoreCase("DL"))
					arrOutCol.add("DPN Loan");
				else if(correctNull(rs.getString("facdesc")).equalsIgnoreCase("OD"))
					arrOutCol.add("Overdraft");
				else 
					arrOutCol.add(correctNull(rs.getString("facdesc")));
				arrOutCol.add("");//1
				arrOutCol.add(String.valueOf(strBankLimit));//2
				arrOutCol.add(correctNull(rs.getString("combk_sancrefno")));//3
				arrOutCol.add(correctNull(rs.getString("combk_sancdate")));//4
				arrOutCol.add(correctNull(rs.getString("combk_spread")));//5
				arrOutCol.add(String.valueOf(strBankOS));//6
				arrOutCol.add(correctNull(rs.getString("combk_osasondate")));//7
				arrOutCol.add(correctNull(rs.getString("combk_duedate")));//8
				arrOutCol.add(correctNull(rs.getString("combk_arrears")));//9
				arrOutCol.add(correctNull(rs.getString("combk_purpose")));//10
				arrOutCol.add(correctNull(rs.getString("combk_inttype")));//11
				arrOutCol.add(correctNull(rs.getString("combk_interestrate")));//12
				arrOutCol.add(correctNull(rs.getString("combk_fac_grp")));//13
				String strType=Helper.correctNull(rs.getString("combk_factype"));
				if(strType.equalsIgnoreCase("M")){
					strType="Main Limit";
				}else if(strType.equalsIgnoreCase("S"))
				{
					strType="Sub Limit";
				}
				arrOutCol.add(strType);//14
				arrOutCol.add(correctNull(rs.getString("combk_remarks")));//15
				arrOutCol.add(correctNull(rs.getString("combk_factype")));//16
				arrOutCol.add(correctNull(rs.getString("combk_repaymentcmt")));//17
				arrOutCol.add(dblExposure+"");//18
				arrOutRow.add(arrOutCol);
				if(strOutstandingDate.equalsIgnoreCase(""))
					strOutstandingDate=correctNull(rs.getString("combk_osasondate"));
				
				
				if(Helper.correctNull(rs.getString("fac_type")).equalsIgnoreCase("P"))
				{
					if(rs1 !=null)
					{rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("selectprocessnoteproposedsublimfacilities^"+Helper.correctNull(rs.getString("combk_parentappno"))+"^"+Helper.correctNull(rs.getString("combk_parentfacsno")));
					while(rs1.next())
					{
						strFacilityFC=correctNull(rs1.getString("com_headfac"));
						strBankLimit=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_limit")));
						strBankOS=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_os")));
						dblExposure=Double.parseDouble(Helper.correctDouble(rs1.getString("com_exposure")));
						if(strFacilityFC.equalsIgnoreCase("1")){
							strBankLimit=strBankLimit/50;
							strBankOS=strBankOS/50;
							dblExposure=dblExposure/50;
						}
						arrOutCol	= new ArrayList();
						
						if(rs2!=null)
							rs2.close();
						rs2	= DBUtils.executeLAPSQuery("getfacdetforsanction^"+Helper.correctInt(rs.getString("combk_parentappno"))+"^"+Helper.correctInt(rs.getString("combk_parentfacsno")));
							
						if(rs2.next())
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")) +"(Sub Limit of "+correctNull(rs2.getString("FACILITY_DISPLAYDESC"))+")");
						}
						else
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")));
						}
						arrOutCol.add("");//1
						arrOutCol.add(String.valueOf(strBankLimit));//2
						arrOutCol.add(correctNull(rs1.getString("combk_sancrefno")));//3
						arrOutCol.add(correctNull(rs1.getString("combk_sancdate")));//4
						arrOutCol.add(correctNull(rs1.getString("combk_spread")));//5
						arrOutCol.add(String.valueOf(strBankOS));//6
						arrOutCol.add(correctNull(rs1.getString("combk_osasondate")));//7
						arrOutCol.add(correctNull(rs1.getString("combk_duedate")));//8
						arrOutCol.add(correctNull(rs1.getString("combk_arrears")));//9
						arrOutCol.add(correctNull(rs1.getString("combk_purpose")));//10
						arrOutCol.add(correctNull(rs1.getString("combk_inttype")));//11
						arrOutCol.add(correctNull(rs1.getString("combk_interestrate")));//12
						arrOutCol.add(correctNull(rs1.getString("combk_fac_grp")));//13
						strType=Helper.correctNull(rs1.getString("combk_factype"));
						if(strType.equalsIgnoreCase("M")){
							strType="Main Limit";
						}else if(strType.equalsIgnoreCase("S"))
						{
							strType="Sub Limit";
						}
						arrOutCol.add(strType);//14
						arrOutCol.add(correctNull(rs1.getString("combk_remarks")));//15
						arrOutCol.add(correctNull(rs1.getString("combk_factype")));//16
						arrOutCol.add(correctNull(rs1.getString("combk_repaymentcmt")));//17
						arrOutCol.add(dblExposure+"");//18
						arrOutRow.add(arrOutCol);
					}
				}
				else
				{
					if(rs1 !=null)
					{rs1.close();}
					rs1	= DBUtils.executeLAPSQuery("selectprocessnoteexistingsublimfacilities^"+strAppNo+"^"+Helper.correctNull(rs.getString("combk_parentappno"))+"^"+Helper.correctNull(rs.getString("combk_parentfacsno")));
					while(rs1.next())
					{
						strFacilityFC=correctNull(rs1.getString("com_headfac"));
						strBankLimit=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_limit")));
						strBankOS=Double.parseDouble(Helper.correctDouble(rs1.getString("combk_os")));
						dblExposure=Double.parseDouble(Helper.correctDouble(rs1.getString("com_exposure")));
						if(strFacilityFC.equalsIgnoreCase("1")){
							strBankLimit=strBankLimit/50;
							strBankOS=strBankOS/50;
							dblExposure=dblExposure/50;
						}
						arrOutCol	= new ArrayList();

						if(rs2!=null)
							rs2.close();
						rs2	= DBUtils.executeLAPSQuery("getfacdetforsanction^"+Helper.correctInt(rs.getString("combk_parentappno"))+"^"+Helper.correctInt(rs.getString("combk_parentfacsno")));
							
						if(rs2.next())
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")) +"(Sub Limit of "+correctNull(rs2.getString("FACILITY_DISPLAYDESC"))+")");
						}
						else
						{
							arrOutCol.add(correctNull(rs1.getString("facdesc")));
						}
						
						arrOutCol.add("");//1
						arrOutCol.add(String.valueOf(strBankLimit));//2
						arrOutCol.add(correctNull(rs1.getString("combk_sancrefno")));//3
						arrOutCol.add(correctNull(rs1.getString("combk_sancdate")));//4
						arrOutCol.add(correctNull(rs1.getString("combk_spread")));//5
						arrOutCol.add(String.valueOf(strBankOS));//6
						arrOutCol.add(correctNull(rs1.getString("combk_osasondate")));//7
						arrOutCol.add(correctNull(rs1.getString("combk_duedate")));//8
						arrOutCol.add(correctNull(rs1.getString("combk_arrears")));//9
						arrOutCol.add(correctNull(rs1.getString("combk_purpose")));//10
						arrOutCol.add(correctNull(rs1.getString("combk_inttype")));//11
						arrOutCol.add(correctNull(rs1.getString("combk_interestrate")));//12
						arrOutCol.add(correctNull(rs1.getString("combk_fac_grp")));//13
						strType=Helper.correctNull(rs1.getString("combk_factype"));
						if(strType.equalsIgnoreCase("M")){
							strType="Main Limit";
						}else if(strType.equalsIgnoreCase("S"))
						{
							strType="Sub Limit";
						}
						arrOutCol.add(strType);//14
						arrOutCol.add(correctNull(rs1.getString("combk_remarks")));//15
						arrOutCol.add(correctNull(rs1.getString("combk_factype")));//16
						arrOutCol.add(correctNull(rs1.getString("combk_repaymentcmt")));//17
						arrOutCol.add(dblExposure+"");//18
						arrOutRow.add(arrOutCol);
					}
				}
			}
			hshValues.put("arrBAOurRow", arrOutRow);
			
			//Banking Arrangement - Other Bank
			arrOutRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("com_BAOther^"+strAppNo);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(correctNull(rs.getString("combk_facility")));
				arrOutCol.add("");
				arrOutCol.add(Helper.correctDouble(rs.getString("combk_limit")));
				arrOutCol.add(correctNull(rs.getString("combk_sancrefno")));
				arrOutCol.add(correctNull(rs.getString("combk_sancdate")));
				arrOutCol.add(Helper.correctDouble(rs.getString("combk_spread")));
				arrOutCol.add(Helper.correctDouble(rs.getString("combk_os")));
				arrOutCol.add(correctNull(rs.getString("combk_osasondate")));
				arrOutCol.add(correctNull(rs.getString("combk_duedate")));
				arrOutCol.add(correctNull(rs.getString("combk_arrears")));
	
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrBAOtherRow", arrOutRow);
			//Added by bhaskar for other bank details
			String strOldAppId="";
			rs=DBUtils.executeLAPSQuery("selgetveryoldid^"+strAppId);
			if(rs.next())
			{
				strOldAppId=Helper.correctNull((String)rs.getString("perapp_oldid"));
			}
			arrOutRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("perbankingselectNewOldId^"+strOldAppId);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();				
				arrOutCol.add(correctNull(rs.getString("perbank_facility"))); // 0
				arrOutCol.add(""); // 1
				arrOutCol.add(Helper.correctDouble(rs.getString("perbank_limit"))); // 2
				arrOutCol.add(""); // 3
				arrOutCol.add(Helper.correctDouble(rs.getString("perbank_intrate"))); // 4
				arrOutCol.add(Helper.correctDouble(rs.getString("perbank_spread"))); // 5
				arrOutCol.add(Helper.correctDouble(rs.getString("perbank_os"))); // 6
				arrOutCol.add(correctNull(rs.getString("perbank_osasondate"))); // 7
				arrOutCol.add(correctNull(rs.getString("perbank_duedate"))); // 8
				arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("perbank_arrears")))); // 9
				if(Helper.correctNull(rs.getString("perbank_type")).equalsIgnoreCase("2"))
					arrOutCol.add("Term Loan"); // 10
				else if(Helper.correctNull(rs.getString("perbank_type")).equalsIgnoreCase("1"))
					arrOutCol.add("Working Capital"); // 10
				else
					arrOutCol.add(""); // 10
				
				if(rs2!=null) {rs2.close();}
				rs2=DBUtils.executeLAPSQuery("getstaticdescription^147^"+correctNull(rs.getString("perbank_bnkname")));
				if(rs2.next())
					arrOutCol.add(correctNull(rs2.getString("STAT_DATA_DESC1")));// 11
				else 
					arrOutCol.add("");// 11
				if(Helper.correctNull(rs.getString("perbank_loanpurpose")).equalsIgnoreCase("1"))
					arrOutCol.add("Agro processing"); // 12
				else if(Helper.correctNull(rs.getString("perbank_loanpurpose")).equalsIgnoreCase("2"))
					arrOutCol.add("Agriculture Infrastructure"); // 12
				else if(Helper.correctNull(rs.getString("perbank_loanpurpose")).equalsIgnoreCase("3"))
					arrOutCol.add("Others"); // 12
				else
					arrOutCol.add(""); // 12
				arrOutCol.add(correctNull(rs.getString("perbank_startdate"))); // 13
				arrOutCol.add(correctNull(rs.getString("PERBANK_SECDESCRIP"))); // 14
				arrOutCol.add(correctNull(rs.getString("PERBANK_SECVALUE"))); // 15
				
				arrOutRow.add(arrOutCol);
			}			
			hshValues.put("arrBAOtherRowNew", arrOutRow);
			//ended
			
			//Assets Classification
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("com_asset", correctNull(rs.getString("com_asset")));
			}
			
			//added by bhaskar for mis/cbs details
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selectMisDetails^"+strAppNo);
			String strRestructur="";
			while(rs.next())
			{
			  strRestructur	= strRestructur+correctNull(rs.getString("app_whetherrestructure"))+",";
			  if(correctNull(rs.getString("app_whetherrestructure")).equalsIgnoreCase("Y"))
			  {
				  hshValues.put("com_misremarks", correctNull(rs.getString("app_resreason")));				  
			  }
			}
			if(!strRestructur.equalsIgnoreCase(""))
			{
				strRestructur	= strRestructur.substring(0, (strRestructur.length()-1));
			}
			if(strRestructur.contains("Y"))
			{
				hshValues.put("com_misrestruc","Yes");
			}
			else
			{
				hshValues.put("com_misrestruc","No");
			}
			//ended
			
			//Banking Arrangment
			arrOutRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_BankingArrangementOther^"+strAppNo);
			
			while(rs.next())
			{
				arrOutCol		= new ArrayList();
				
				arrOutCol.add(Helper.correctInt(rs.getString("com_facsno")));
				arrOutCol.add(correctNull(rs.getString("combk_facility")));
				arrOutCol.add("");
				arrOutCol.add("");
				arrOutCol.add(correctNull(rs.getString("com_memberbank")));
				arrOutCol.add("");
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_existfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share1")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_existnonfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share2")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_proposedfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share3")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_proposednonfund")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_share4")));
				
				arrOutCol.add(Helper.correctDouble(rs.getString("com_limit")));
				arrOutCol.add(Helper.correctDouble(rs.getString("com_outstanding")));
				arrOutCol.add(correctNull(rs.getString("com_osason")));
				
				strVal1	= correctNull(rs.getString("com_facvalue"));
				
				if(!strVal1.equals(""))
				{
					strVal1	= strVal1.substring(strVal1.indexOf('~')+1, strVal1.indexOf('~')+2);
				}
				
				arrOutCol.add(strVal1);
				
				arrOutRow.add(arrOutCol);
			}
			
			hshValues.put("arrBARow", arrOutRow);
			
			//WC Comments
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_comments^BDCOM1^"+strAppNo);
			
			if(rs.next())
			{
				hshValues.put("WCComments", correctNull(Helper.CLOBToString(rs.getClob(("com_comments")))));
			}
			
			//TL Comments
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_comments^BDCOM2^"+strAppNo);
			if(rs.next())
			{
				hshValues.put("TLComments", correctNull(Helper.CLOBToString(rs.getClob(("com_comments")))));
			}
			
			//Group Concern - Our Bank
			arrOutRow	= new ArrayList();
						
			if(rs2!=null) {rs2.close();}
			int k=0;
			rs2=DBUtils.executeLAPSQuery("comapp_division_details_select^"+strAppId);
			while (rs2.next())
			{
				arrOutRow	= new ArrayList();
				arrOutCol	= new ArrayList();
				String strGroupAppid=Helper.correctInt(rs2.getString("comappnewID"));
				if(rs!=null) {rs.close();}
				rs	= DBUtils.executeLAPSQuery("sel_CGOur_CGWise^"+strAppNo+"^"+Helper.correctInt(rs2.getString("comapp_div_appid")));
				if(rs.next())
				{
					arrOutCol	= new ArrayList();
					String strId=correctNull(rs.getString("comgc_companyname"));
					arrOutCol.add(Helper.correctInt(rs2.getString("comapp_div_appid")));//0
					if(rs1!=null){rs1.close();}
					rs1=DBUtils.executeLAPSQuery("selcustomerdetails^"+strId);
					if(rs1.next())
					{
						arrOutCol.add(Helper.correctNull((String)rs1.getString("Perapp_TITLE")));//1
						arrOutCol.add(Helper.correctNull((String)rs1.getString("perapp_fname")));//2
					}
					else
					{
						arrOutCol.add("");//1
						arrOutCol.add("");//2
					}
					arrOutCol.add(Helper.correctNull((String)rs2.getString("com_compratinggrade1")));//3
					arrOutCol.add(Helper.correctNull((String)rs2.getString("com_compratingason1")));//4
					arrOutCol.add(Helper.correctNull((String)rs2.getString("com_compratingtype1")));//5
					arrOutRow.add(arrOutCol);
				}
				
				if(rs!=null) {rs.close();}
				rs	= DBUtils.executeLAPSQuery("sel_CGOur_CGWise^"+strAppNo+"^"+Helper.correctInt(rs2.getString("comapp_div_appid")));
				while(rs.next())
				{
					arrOutCol	= new ArrayList();
					arrOutCol.add(Helper.correctInt(rs2.getString("comapp_div_appid")));//0
					strFacilityFC=Helper.correctInt(rs.getString("com_headfac"));
					arrOutCol.add(Helper.correctNull(rs.getString("description")));
					arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs.getString("comgc_purpose"))));
					if(strFacilityFC.equalsIgnoreCase("1"))
						arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs.getString("comgc_limit")))/50));
					else
						arrOutCol.add(Helper.correctDouble(rs.getString("comgc_limit")));
					arrOutCol.add(correctNull(rs.getString("comgc_sancrefno")));
					arrOutCol.add(correctNull(rs.getString("comgc_sancdate")));
					arrOutCol.add(Helper.correctDouble(rs.getString("comgc_intrate")));
					if(strFacilityFC.equalsIgnoreCase("1"))
						arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs.getString("comgc_os")))/50));
					else
						arrOutCol.add(Helper.correctDouble(rs.getString("comgc_os")));
					arrOutCol.add(correctNull(rs.getString("comgc_osasondate")));
					arrOutCol.add(correctNull(rs.getString("comgc_duedate")));
					arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs.getString("comgc_arrears"))));
					String strId=correctNull(rs.getString("comgc_companyname"));
					if(rs1!=null){rs1.close();}
					rs1=DBUtils.executeLAPSQuery("selcustomerdetails^"+strId);
					if(rs1.next())
					{
						arrOutCol.add(correctNull((String)rs1.getString("perapp_fname")));//10
					}
					else
					{
						arrOutCol.add("");//10
					}
					if(rs1!=null){rs1.close();}
					rs1=DBUtils.executeLAPSQuery("cusrating_sel^"+strId);
					if(rs1.next())
					{
						arrOutCol.add(correctNull((String)rs1.getString("rat_type")));//11
						arrOutCol.add(correctNull((String)rs1.getString("rat_agency")));//12
					}	
					else
					{
						arrOutCol.add("");//11	
						arrOutCol.add("");//12
					}
					arrOutCol.add(correctNull(rs.getString("COMGC_REMARKS")));
					arrOutCol.add(correctNull(rs.getString("comgc_repaymentcmt")));
					arrOutCol.add(correctNull(rs.getString("comgc_factype")));
					arrOutRow.add(arrOutCol);
					
					if(rs3!=null) {rs3.close();}
					rs3	= DBUtils.executeLAPSQuery("sel_CGsublimits^"+strAppNo+"^"+Helper.correctInt(rs.getString("comgc_parentappno"))+"^"+Helper.correctInt(rs.getString("comgc_parentfacsno"))+"^"+Helper.correctInt(rs2.getString("comapp_div_appid")));
					while(rs3.next())
					{
						arrOutCol	= new ArrayList();
						arrOutCol.add(Helper.correctInt(rs2.getString("comapp_div_appid")));//0
						strFacilityFC=Helper.correctInt(rs3.getString("com_headfac"));
						arrOutCol.add(Helper.correctNull(rs3.getString("description"))+"(Sub Limit of "+Helper.correctNull(rs.getString("description"))+")");
						arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs3.getString("comgc_purpose"))));
						if(strFacilityFC.equalsIgnoreCase("1"))
							arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs3.getString("comgc_limit")))/50));
						else
							arrOutCol.add(Helper.correctDouble(rs3.getString("comgc_limit")));
						arrOutCol.add(correctNull(rs3.getString("comgc_sancrefno")));
						arrOutCol.add(correctNull(rs3.getString("comgc_sancdate")));
						arrOutCol.add(Helper.correctDouble(rs3.getString("comgc_intrate")));
						if(strFacilityFC.equalsIgnoreCase("1"))
							arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs3.getString("comgc_os")))/50));
						else
							arrOutCol.add(Helper.correctDouble(rs3.getString("comgc_os")));
						arrOutCol.add(correctNull(rs3.getString("comgc_osasondate")));
						arrOutCol.add(correctNull(rs3.getString("comgc_duedate")));
						arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs3.getString("comgc_arrears"))));
						arrOutCol.add("");//10
						arrOutCol.add("");//11	
						arrOutCol.add("");//12
						arrOutCol.add(correctNull(rs3.getString("COMGC_REMARKS")));
						arrOutCol.add(correctNull(rs3.getString("comgc_repaymentcmt")));
						arrOutCol.add(correctNull(rs3.getString("comgc_factype")));
						arrOutRow.add(arrOutCol);
				 }
			 }
				hshValues.put("arrCGOurRow"+strGroupAppid, arrOutRow);
			}
			
			//Group Concern - Other Bank
			arrOutRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_CGOther^"+strAppNo);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				arrOutCol.add(correctNull(rs.getString("comgc_facility")));
				arrOutCol.add("");
				arrOutCol.add(Helper.correctDouble(rs.getString("comgc_limit")));
				arrOutCol.add(correctNull(rs.getString("comgc_sancrefno")));
				arrOutCol.add(correctNull(rs.getString("comgc_sancdate")));
				arrOutCol.add(Helper.correctDouble(rs.getString("COMGC_INTERESTRATE")));
				arrOutCol.add(Helper.correctDouble(rs.getString("comgc_os")));
				arrOutCol.add(correctNull(rs.getString("comgc_osasondate")));
				arrOutCol.add(correctNull(rs.getString("comgc_duedate")));
				arrOutCol.add(correctNull(rs.getString("comgc_arrears")));

				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrCGOtherRow", arrOutRow);
			hshValues.put("strOutstandingDate", strOutstandingDate);
			
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_combankingdetails^"+strAppNo);
			if(rs.next())
			{ 
				strAssetClassification=correctNull(rs.getString("com_assetclass"));
				String strCommentonArrears="";
				strCommentonArrears=Helper.CLOBToString(rs.getClob("com_arrearcmt"));		
				if(strCommentonArrears.equalsIgnoreCase(""))
				{
					strCommentonArrears="Nil";
				}
				if(strAssetClassification.equalsIgnoreCase("S"))
				{
					strAssetClassification="Standard";
				}
				else if(strAssetClassification.equalsIgnoreCase("SS"))
				{
					strAssetClassification="Sub Standard";
				}
				else if(strAssetClassification.equalsIgnoreCase("D"))
				{
					strAssetClassification="Doubtful";
				}
				else if(strAssetClassification.equalsIgnoreCase("L"))
				{
					strAssetClassification="Loss";
				}
				else
				{
					strAssetClassification="NIL";
				}
				hshValues.put("com_asset",strAssetClassification);
				hshValues.put("strCommentonArrears",strCommentonArrears);
			}
			
			 ArrayList arrfacwisecol=new ArrayList();
	         ArrayList arrfacwisecollateral=new ArrayList();
	         ArrayList arrfacwiseRow=new ArrayList();
	         ArrayList arrOutCol1=new ArrayList();
	         ArrayList arrOutRow1=new ArrayList();
	         ArrayList arrOutColPro=new ArrayList();
	         ArrayList arrOutRowPro=new ArrayList();
	         ArrayList arrfacwiseCersaicol=new ArrayList();
	         
	         String strSecid="";
	         int j=0;
	      /*   // proposed facilities details
	         if(rs!=null) {rs.close();}
	         rs1=DBUtils.executeLAPSQuery("sel_facilitycodedesc_groupby^"+strAppNo) ;
		         while(rs1.next()) 
		         {
		        	    arrOutRow=new ArrayList();
		        	    arrOutCol= new ArrayList();
		        	    arrOutCol1=new ArrayList();
		        	    arrOutRow1=new ArrayList();
		        	    arrOutRowPro=new ArrayList();
		        	   k=0;
		        	 j=0;
			         rs=DBUtils.executeLAPSQuery("secExisFacilityDetailsView_facwise^"+strAppNo+"^"+"P^A"+"^"+Helper.correctInt((String)rs1.getString("facility_sno")));
			         while(rs.next())
			         {
		        	    arrOutCol= new ArrayList();
		        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("1"))
		        	    {
		        	    	if(k==0) {
		        	    		k++;
			        	    	arrOutCol.add(correctNull(rs1.getString("com_facdesc")));//0
			        	    	arrOutCol.add("");//1
								arrOutCol.add("");	//2				
								arrOutCol.add("");//3
								arrOutRow.add(arrOutCol);
			        	    	}
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
							arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
							arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
							if(strSecid.equalsIgnoreCase(""))
							{
								strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}else
							{
								strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}
							arrOutRow.add(arrOutCol);
		        	    }
		        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("2"))
		        	    {
		        	    	if(j==0) {
		        	    		j++;
			        	    	arrOutCol.add(correctNull(rs1.getString("com_facdesc")));//0
			        	    	arrOutCol.add("");//1
								arrOutCol.add("");	//2				
								arrOutCol.add("");//3
								arrOutRowPro.add(arrOutCol);
			        	    	}
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
							arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
							arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
							if(strSecid.equalsIgnoreCase(""))
							{
								strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}else
							{
								strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}
							arrOutRowPro.add(arrOutCol);
		        	    }
		        	 }
			         if(arrOutRow.size()>0)
			         arrfacwisecol.add(arrOutRow);
			         if(arrOutRowPro.size()>0)
			        	 arrOutColPro.add(arrOutRowPro);
		        }
		         hshValues.put("arrproposedSecfacwise", arrfacwisecol);*/
	         
	         
	         arrfacwisecol=new ArrayList();
	         if(rs!=null) {rs.close();}
	         strQuery1 = SQLParser.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_LOANTYPE='P'^A^"+strAppNo);
	         rs=DBUtils.executeQuery(strQuery1);
	         while(rs.next())
	         {
				
	        	 arrOutRow=new ArrayList();
					if(rs1!=null)
					rs1.close();
				 strQuery1 = SQLParser.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P'^A^"+correctNull(rs.getString("secid"))+"^"+strAppNo);
				 rs1=DBUtils.executeQuery(strQuery1) ;
		         while(rs1.next()) 
		         {
	        	    	arrOutCol= new ArrayList();
	        	    	arrOutCol.add(correctNull(rs1.getString("facility_catdesc")));//0
						arrOutCol.add(correctNull(rs1.getString("facility_proposed")));//1
						arrOutCol.add(correctNull(rs.getString("secdescription")));//2
						arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//3				
						arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//4
						arrOutCol.add(correctNull(rs.getString("secid")));//5
						if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
						{
							if(rs2!=null)
								rs2.close();
							rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("secid")));
							if(rs2.next())
							{
								arrOutCol.add(correctNull(rs2.getString("CERSAIID")));//5
							}
							else
							{
								arrOutCol.add("");
							}
								
						}
						else
						{
							arrOutCol.add(correctNull(rs.getString("CERSAIID")));//5
						}
						arrOutRow.add(arrOutCol);
		         }
		         
		         
		         if(arrOutRow.size()>0)
		         {
		        	 arrfacwisecol.add(arrOutRow); 
		         }
					
        	 }
	         
	         hshValues.put("arrproposedSecfacwise", arrfacwisecol);
		         
		         arrOutColPro=new ArrayList();
		         if(rs!=null) {rs.close();}
		         strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"+strAppNo+"^"+strAppNo+"^"+"P"+"^and app_sec_attached='A' ");	 
		         rs = DBUtils.executeQuery(strQuery1);
		         while(rs.next())
		         {
        	    	arrOutCol1= new ArrayList();
        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
					arrOutCol1.add(correctNull(rs.getString("cus_sec_netsecurity")));	//2				
					arrOutCol1.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
					arrOutCol1.add(correctNull(rs.getString("cus_sec_id")));//4
					if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
					{
						if(rs2!=null)
							rs2.close();
						rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("cus_sec_id")));
						if(rs2.next())
						{
							arrOutCol1.add(correctNull(rs2.getString("CERSAIID")));//5
						}
						else
						{
							arrOutCol1.add("");
						}
							
					}
					else
					{
						arrOutCol1.add(correctNull(rs.getString("CERSAIID")));//5
					}
					arrOutColPro.add(arrOutCol1);
				 }
		         hshValues.put("arrRowCollSec", arrOutColPro);
		         
		        /* arrOutColPro=new ArrayList();
		         arrOutRowPro=new ArrayList();
		         ArrayList arrproposed=new ArrayList();
		         if(rs!=null) {rs.close();}
		         rs1=DBUtils.executeLAPSQuery("sel_facilitycodedesc_groupby^"+strAppNo) ;
			         while(rs1.next()) 
			         {
			        	    arrOutRow=new ArrayList();
			        	    arrOutCol= new ArrayList();
			        	    arrOutRowPro=new ArrayList();
			        	   k=0;
			        	   j=0;
				         rs=DBUtils.executeLAPSQuery("secFacilityDetails_facwise^"+strAppNo+"^"+"P^F^A^"+Helper.correctInt((String)rs1.getString("facility_sno")));
				         while(rs.next())
				         {
			        	    arrOutCol= new ArrayList();
			        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("1"))
			        	    {
			        	    	if(k==0) {
			        	    		k++;
				        	    	arrOutCol.add(correctNull(rs1.getString("com_facdesc")));//0
				        	    	arrOutCol.add("");//1
									arrOutCol.add("");	//2				
									arrOutCol.add("");//3
									arrOutRow.add(arrOutCol);
				        	    	}
			        	    	arrOutCol= new ArrayList();
			        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
								arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
								arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
								if(strSecid.equalsIgnoreCase(""))
								{
									strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}else
								{
									strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}
								arrOutRow.add(arrOutCol);
			        	    }
			        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("2"))
			        	    {
			        	    	if(j==0) {
			        	    		j++;
				        	    	arrOutCol.add(correctNull(rs1.getString("com_facdesc")));//0
				        	    	arrOutCol.add("");//1
									arrOutCol.add("");	//2				
									arrOutCol.add("");//3
									arrOutRowPro.add(arrOutCol);
				        	    	}
			        	    	arrOutCol= new ArrayList();
			        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
								arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
								arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
								if(strSecid.equalsIgnoreCase(""))
								{
									strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}else
								{
									strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}
								arrOutRowPro.add(arrOutCol);
			        	    }
			        	 }
				         if(arrOutRow.size()>0)
				        	 arrproposed.add(arrOutRow);
				         if(arrOutRowPro.size()>0)
				        	 arrOutColPro.add(arrOutRowPro);
			        }*/
		         
		         
		         ArrayList arrproposed=new ArrayList();
		         if(rs!=null) {rs.close();}
		         strQuery1 = SQLParser.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_LOANTYPE='P' and  a.APP_SEC_SECUTYPE='F' ^A^"+strAppNo);
		         rs=DBUtils.executeQuery(strQuery1);
		         while(rs.next())
		         {
					
		        	 arrOutRow=new ArrayList();
						if(rs1!=null)
						rs1.close();
					 strQuery1 = SQLParser.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P' and  a.APP_SEC_SECUTYPE='F' ^A^"+correctNull(rs.getString("secid"))+"^"+strAppNo);
					 rs1=DBUtils.executeQuery(strQuery1) ;
			         while(rs1.next()) 
			         {
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(rs1.getString("facility_catdesc")));//0
							arrOutCol.add(correctNull(rs1.getString("facility_proposed")));//1
							arrOutCol.add(correctNull(rs.getString("secdescription")));//2
							arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//3				
							arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//4
							if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
							{
								if(rs2!=null)
									rs2.close();
								rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("secid")));
								if(rs2.next())
								{
									arrOutCol.add(correctNull(rs2.getString("CERSAIID")));//5
								}
								else
								{
									arrOutCol.add("");
								}
									
							}
							else
							{
								arrOutCol.add(correctNull(rs.getString("CERSAIID")));//5
							}
							arrOutCol.add(correctNull(rs.getString("secid")));//6
							arrOutRow.add(arrOutCol);
			         }
			         
			         
			         if(arrOutRow.size()>0)
			         {
			        	 arrproposed.add(arrOutRow); 
			         }
						
	        	 }
		         
			         hshValues.put("arrproposedFacility", arrproposed);
			         
		         
		         //for collateral
		         if(rs!=null){rs.close();}
		         arrOutRow1=new ArrayList();
		         k=0;
		         String strtemp="";
		         String strtempSecid="";
		         String strOriSecid="";
		         ///if(!strSecid.equalsIgnoreCase(""))
		         //{
		        	 //strtemp="CUS_SEC_ID not in("+strSecid+")";
		        	 //strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_specific^"+strAppNo+"^"+"P"+"^"+strtemp);
		        // }else
		         //{
		        	 strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"+strAppNo+"^"+strAppNo+"^"+"P"+"^ AND APP_SEC_SECUTYPE='F' and APP_SEC_ATTACHED='A'");	 
		         //}
		         rs = DBUtils.executeQuery(strQuery1);
		         while(rs.next())
		         {
        	    	arrOutCol1= new ArrayList();
        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
					arrOutCol1.add(correctNull(rs.getString("cus_sec_netsecurity")));	//2				
					arrOutCol1.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
					if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
					{
						if(rs2!=null)
							rs2.close();
						rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("cus_sec_id")));
						if(rs2.next())
						{
							arrOutCol1.add(correctNull(rs2.getString("CERSAIID")));//4
						}
						else
						{
							arrOutCol1.add("");
						}
							
					}
					else
					{
						arrOutCol1.add(correctNull(rs.getString("CERSAIID")));//4
					}
					arrOutCol1.add(correctNull(rs.getString("cus_sec_id")));//5
					/*if(strSecid.equalsIgnoreCase(""))
					{
						strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
					}else
					{
						strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
					}*/
					arrOutRow1.add(arrOutCol1);
				 }
		         hshValues.put("arrproposedCollateralSec", arrOutRow1);
		         hshValues.put("arrcollateralforPF", arrOutRow1);
		         
		         
		         
		         // Proposed Security Released
		         /*arrfacwisecol=new ArrayList();
		         if(rs!=null) {rs.close();}
		         rs1=DBUtils.executeLAPSQuery("sel_facilitycodedesc_groupby^"+strAppNo) ;
			         while(rs1.next()) 
			         {
			        	    arrOutRow=new ArrayList();
			        	    arrOutCol= new ArrayList();
			        	    arrOutCol1=new ArrayList();
			        	    arrOutRow1=new ArrayList();
			        	    arrOutRowPro=new ArrayList();
			        	   k=0;
			        	 j=0;
				         rs=DBUtils.executeLAPSQuery("secExisFacilityDetailsView_facwise^"+strAppNo+"^"+"P^D"+"^"+Helper.correctInt((String)rs1.getString("facility_sno")));
				         while(rs.next())
				         {
			        	    arrOutCol= new ArrayList();
			        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("1"))
			        	    {
			        	    	if(k==0) {
			        	    		k++;
				        	    	arrOutCol.add(correctNull(rs1.getString("com_facdesc")));//0
				        	    	arrOutCol.add("");//1
									arrOutCol.add("");	//2				
									arrOutCol.add("");//3
									arrOutRow.add(arrOutCol);
				        	    	}
			        	    	arrOutCol= new ArrayList();
			        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
								arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
								arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
								if(strSecid.equalsIgnoreCase(""))
								{
									strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}else
								{
									strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}
								arrOutRow.add(arrOutCol);
			        	    }
			        	 }
				         if(arrOutRow.size()>0)
				         arrfacwisecol.add(arrOutRow);
			        }*/
		         
		         arrfacwisecol=new ArrayList();
		         if(rs!=null) {rs.close();}
		         strQuery1 = SQLParser.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_LOANTYPE='P' ^D^"+strAppNo);
		         rs=DBUtils.executeQuery(strQuery1);
		         while(rs.next())
		         {
					
		        	 arrOutRow=new ArrayList();
						if(rs1!=null)
						rs1.close();
					 strQuery1 = SQLParser.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P'  ^D^"+correctNull(rs.getString("secid"))+"^"+strAppNo);
					 rs1=DBUtils.executeQuery(strQuery1) ;
			         while(rs1.next()) 
			         {
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(rs1.getString("facility_catdesc")));//0
							arrOutCol.add(correctNull(rs1.getString("facility_proposed")));//1
							arrOutCol.add(correctNull(rs.getString("secdescription")));//2
							arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//3				
							arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//4
							arrOutRow.add(arrOutCol);
			         }
			         
			         
			         if(arrOutRow.size()>0)
			         {
			        	 arrfacwisecol.add(arrOutRow); 
			         }
						
	        	 }
		         
			         hshValues.put("arrReleasedSecPrime", arrfacwisecol);
			         
			         arrOutColPro=new ArrayList();
			         if(rs!=null) {rs.close();}
			         strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"+strAppNo+"^"+strAppNo+"^"+"P"+"^and app_sec_attached='D' ");	 
			         rs = DBUtils.executeQuery(strQuery1);
			         while(rs.next())
			         {
	        	    	arrOutCol1= new ArrayList();
	        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
						arrOutCol1.add(correctNull(rs.getString("cus_sec_netsecurity")));	//2				
						arrOutCol1.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
						if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
						{
							if(rs2!=null)
								rs2.close();
							rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("cus_sec_id")));
							if(rs2.next())
							{
								arrOutCol1.add(correctNull(rs2.getString("CERSAIID")));//4
							}
							else
							{
								arrOutCol1.add("");
							}
								
						}
						else
						{
							arrOutCol1.add(correctNull(rs.getString("CERSAIID")));//4
						}
						arrOutColPro.add(arrOutCol1);
					 }
			         hshValues.put("arrReleasedSecCollateral", arrOutColPro);
	         //end
	         
	      // Existing facilities security details
		         arrfacwisecol=new ArrayList();
		          arrfacwisecollateral=new ArrayList();
		          arrfacwiseRow=new ArrayList();
		          arrOutCol1=new ArrayList();
		          arrOutRow1=new ArrayList();
		        ArrayList arrfacwisecol1=new ArrayList();
		         
	         if(rs!=null) {rs.close();}
	         rs1=DBUtils.executeLAPSQuery("sel_banking^" + strAppNo) ;
		         while(rs1.next()) {
		        	 k=0;j=0;
		        	    arrOutRow=new ArrayList();
		        	    arrOutRow1=new ArrayList();
		        	    arrOutCol= new ArrayList();
		        	    String strbnkFac = Helper.correctNull((String)rs1.getString("combk_facility"));
						String str_modtype=Helper.correctNull((String)rs1.getString("combk_modtype"));
						String[] bankFac = strbnkFac.split("~");
						strtemp=" ";
				         /*if(!strSecid.equalsIgnoreCase(""))
				         {
				        	 strtemp="CUS_SEC_ID not in("+strSecid+")";
				        	 strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_facwise_specific^"+strAppNo+"^"+"E"+"^"+bankFac[0]+"^"+bankFac[1]+"^"+strtemp);
				         }else
				         {*/
				        	 strQuery1 = SQLParser.getSqlQuery("selExistingFacilitySecDetails^"+strAppNo+"^"+"E^E"+"^"+bankFac[0]+"^"+bankFac[1]);	 
				         //}
			         rs = DBUtils.executeQuery(strQuery1);
			         while(rs.next())
			         {
		        	     if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("1"))
		        	     {
		        	    	if(k==0) {
		        	    		k++;
		        	    		arrOutCol= new ArrayList();
				        		 if(str_modtype.equalsIgnoreCase("c") || str_modtype.equalsIgnoreCase("a"))
				 				{
				 					rs2=DBUtils.executeLAPSQuery("sel_facilitycorp_desc^" + bankFac[0]);
				 					if(rs2.next())
				 					{
				 						arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
				 					}
				 					else
				 					{
				 						arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
				 					}
				 				}
				        		 else if(str_modtype.equalsIgnoreCase("r")||str_modtype.equalsIgnoreCase("p")) {
					        		 rs2=DBUtils.executeLAPSQuery("sel_retProductDesc^"+bankFac[0]);
					        		 if(rs2.next()){
					        			 arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
					        		 }
					        		 else {
					        			 arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
					        		 }
				        		 }
				        		 else
				        		 {
				        			 arrOutCol.add("");//1 //arr0
				        		 }
				        
									arrOutCol.add("");	//2				
									arrOutCol.add("");//3
									arrOutRow.add(arrOutCol);
				        	 }
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
							arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
							arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
							if(strSecid.equalsIgnoreCase(""))
							{
								strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}else
							{
								strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}
							arrOutRow.add(arrOutCol);
		        	    }
		        	     /*if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("2"))
		        	     {
		        	    	if(j==0) {
		        	    		j++;
		        	    		arrOutCol1= new ArrayList();
				        		 if(str_modtype.equalsIgnoreCase("c") || str_modtype.equalsIgnoreCase("a"))
				 				{
				 					rs2=DBUtils.executeLAPSQuery("sel_facilitycorp_desc^" + bankFac[0]);
				 					if(rs2.next())
				 					{
				 						arrOutCol1.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
				 					}
				 					else
				 					{
				 						arrOutCol1.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
				 					}
				 				}
				        		 else if(str_modtype.equalsIgnoreCase("r")) {
					        		 rs2=DBUtils.executeLAPSQuery("sel_retProductDesc^"+bankFac[0]);
					        		 if(rs2.next()){
					        			 arrOutCol1.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
					        		 }
					        		 else {
					        			 arrOutCol1.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
					        		 }
				        		 }
				        		 else
				        		 {
				        			 arrOutCol1.add("");//1 //arr0
				        		 }
				        
									arrOutCol1.add("");	//2				
									arrOutCol1.add("");//3
									arrOutRow1.add(arrOutCol1);
				        	 }
		        	    	arrOutCol1= new ArrayList();
		        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
							arrOutCol1.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
							arrOutCol1.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
							if(strSecid.equalsIgnoreCase(""))
							{
								strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}else
							{
								strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}
							arrOutRow1.add(arrOutCol1);
		        	    }*/
			         }
			         if(arrOutRow.size()>0)
			         arrfacwisecol.add(arrOutRow);
			        /* if(arrOutRow1.size()>0)
				         arrfacwisecol1.add(arrOutRow1);*/
		        }
		         
		         
		        /* if(rs!=null) {rs.close();}
		         rs1=DBUtils.executeLAPSQuery("sel_facilitycodedesc_groupby^"+strAppNo) ;
			         while(rs1.next()) 
			         {
			        	    arrOutRow=new ArrayList();
			        	    arrOutCol= new ArrayList();
			        	   k=0;
				         rs=DBUtils.executeLAPSQuery("secFacilityDetails_facwise^"+strAppNo+"^"+"P^E^A^"+Helper.correctInt((String)rs1.getString("facility_sno")));
				         while(rs.next())
				         {
			        	    arrOutCol= new ArrayList();
			        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("1"))
			        	    {
			        	    	if(k==0) {
			        	    		k++;
				        	    	arrOutCol.add(correctNull(rs1.getString("com_facdesc")));//0
				        	    	arrOutCol.add("");//1
									arrOutCol.add("");	//2				
									arrOutRow.add(arrOutCol);
				        	    	}
			        	    	arrOutCol= new ArrayList();
			        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
								arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
								arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
								if(strSecid.equalsIgnoreCase(""))
								{
									strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}else
								{
									strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
								}
								arrOutRow.add(arrOutCol);
			        	    }
			        	 }
				         if(arrOutRow.size()>0)
				        	 arrfacwisecol.add(arrOutRow);
			        }*/
		         arrfacwisecol=new ArrayList();
		         if(rs!=null) {rs.close();}
		         strQuery1 = SQLParser.getSqlQuery("seluniqueprimary_sec^and  a.APP_SEC_SECUTYPE='E' and app_sec_loantype='E' ^A^"+strAppNo);
		         rs=DBUtils.executeQuery(strQuery1);
		         while(rs.next())
		         {
					
		        	 arrOutRow=new ArrayList();
						if(rs1!=null)
						rs1.close();
					 strQuery1 = SQLParser.getSqlQuery("seluniqueprimarysec_facilitydetails^A^"+correctNull(rs.getString("secid"))+"^"+strAppOldId+"^"+strAppNo+"^A^"+correctNull(rs.getString("secid"))+"^"+strAppOldId+"^"+strAppNo);
					 rs1=DBUtils.executeQuery(strQuery1) ;
			         while(rs1.next()) 
			         {
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(rs1.getString("facility_catdesc")));//0
							arrOutCol.add(correctNull(rs1.getString("facility_proposed")));//1
							arrOutCol.add(correctNull(rs.getString("secdescription")));//2
							arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//3				
							arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//4
							
							if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
							{
								if(rs2!=null)
									rs2.close();
								rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("secid")));
								if(rs2.next())
								{
									arrOutCol.add(correctNull(rs2.getString("CERSAIID")));//5
								}
								else
								{
									arrOutCol.add("");
								}
									
							}
							else
							{
								arrOutCol.add(correctNull(rs.getString("CERSAIID")));//5
							}
							arrOutCol.add(correctNull(rs.getString("secid")));//4
							arrOutRow.add(arrOutCol);
			         }
			         
			         
			         if(arrOutRow.size()>0)
			         {
			        	 arrfacwisecol.add(arrOutRow); 
			         }
						
	        	 }
		         hshValues.put("arrExistingSecfacwise", arrfacwisecol);
		         
		         if(rs!=null)
		        	 rs.close();
		         arrOutRow1=new ArrayList();
		        // strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_existing^"+strAppNo+"^"+"E"+"^ and APP_SEC_ATTACHED='A' and app_sec_customerid='"+strAppOldId+"'");	 
		         strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_existing^"+strAppNo+"^"+strAppNo+"^"+"E"+"^ and APP_SEC_ATTACHED='A'  and APP_SEC_LOANTYPE='E'");	 
		         rs = DBUtils.executeQuery(strQuery1);
		         while(rs.next())
		         {
        	    	arrOutCol1= new ArrayList();
        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
					arrOutCol1.add(correctNull(rs.getString("cus_sec_netsecurity")));	//2				
					arrOutCol1.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
					
					if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
					{
						if(rs2!=null)
							rs2.close();
						rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("cus_sec_id")));
						if(rs2.next())
						{
							arrOutCol1.add(correctNull(rs2.getString("CERSAIID")));//4
						}
						else
						{
							arrOutCol1.add("");
						}
							
					}
					else
					{
						arrOutCol1.add(correctNull(rs.getString("CERSAIID")));//4
					}
					arrOutCol1.add(correctNull(rs.getString("cus_sec_id")));//5
					
					arrOutRow1.add(arrOutCol1);
				 }
		         
		         hshValues.put("arrcollateralforEF", arrOutRow1);
		         
		         
		        /* //for collateral
		         if(rs!=null){rs.close();}
		         arrOutRow1=new ArrayList();
		        strtemp="";
		         strtempSecid="";
		         strOriSecid="";
		        k=0;
		        if(!strSecid.equalsIgnoreCase(""))
		        {
		        	strtemp="CUS_SEC_ID not in("+strSecid+")";
		        	strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_specific^"+strAppNo+"^"+"E"+"^"+strtemp);
		        }
		        else
		        {
		        	strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"+strAppNo+"^"+"E");	 
		        }
		         rs = DBUtils.executeQuery(strQuery1);
	             while(rs.next())
		         {
	            	arrOutCol1= new ArrayList();
	        	    if(correctNull(rs.getString("app_sec_securitytype")).equalsIgnoreCase("2"))
	        	    {
	        	    	if(k==0) {
	        	    	arrOutCol1.add("Collateral");//0
	        	    	arrOutCol1.add("");//1
						arrOutCol1.add("");	//2				
						arrOutCol1.add("");//3
						arrOutRow1.add(arrOutCol1);
	        	    	}
	        	    	strOriSecid=Helper.correctNull((String)rs.getString("CUS_SEC_ID"));
	        	    	if(!strOriSecid.equalsIgnoreCase(strtempSecid))
	        	    	{
		        	    	arrOutCol1= new ArrayList();
		        	    	arrOutCol1.add(correctNull(rs.getString("sec_name")));//0
		        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
							arrOutCol1.add(correctNull(rs.getString("app_sec_securityvalue")));	//2				
							arrOutCol1.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
							if(strSecid.equalsIgnoreCase(""))
							{
								strSecid= "'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}else
							{
								strSecid = strSecid+",'"+Helper.correctNull((String)rs.getString("CUS_SEC_ID"))+"'";
							}
							arrOutRow1.add(arrOutCol1);
							k++;strtempSecid=strOriSecid;
	        	    }
	        	    }
		         }
		         hshValues.put("arrcollateralforEF", arrOutRow1);
	         //end
*/	         
	         
	
		         
	     	HashMap hshsecdet = new HashMap();
	     	HashMap hshsecdetFrom = new HashMap();
	     	hshsecdetFrom.put("valuesin", strValNew);
	    	hshsecdetFrom.put("appno", strAppNo);
	    	hshsecdetFrom.put("hidapplicantid", strOldAppId);
			hshsecdet = new SecurityMasterBean().getCollateralSecurityDisplaynew(hshsecdetFrom);
			hshValues.put("hshsecdet",hshsecdet);
			
			if(rs!=null){rs.close();}
			arrOutRow	= new ArrayList();
			rs=DBUtils.executeLAPSQuery("selgroupconcernDetails^"+strAppNo+"^"+strAppNo+"^"+strAppNo);
			String strTypeArr[]=null;
			while(rs.next())
			{
				arrOutCol= new ArrayList();
				String strId=Helper.correctInt(rs.getString("com_compdtappid"));
				//String strType=Helper.correctNull(rs.getString("COM_COMPDTTYPE"));
				//strType=strType.substring(0,((strType.length())-1));
				String strType = correctNull(rs.getString("com_compdttype"));
				if(!strType.equals(""))
				{
					strTypeArr= strType.split("@");
				}
				
				if(strTypeArr!=null)
				{
					for(int i=0;i<strTypeArr.length;i++)
					{
						if(strTypeArr[i].equalsIgnoreCase("SP")||strTypeArr[i].equalsIgnoreCase("PT")||strTypeArr[i].equalsIgnoreCase("D"))
						{
							strVal1	= strTypeArr[i];								
							if(strVal1.equalsIgnoreCase("SP")){		strVal1	= "Proprietor";}
							else if(strVal1.equalsIgnoreCase("PT")){strVal1	= "Partners";}
							else if(strVal1.equalsIgnoreCase("D")){strVal1	= "Directors";}
							else{strVal1	= "";}
						}
					}
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("selcustomerdetails^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("cbs_static_data_desc")));//0
					arrOutCol.add(correctNull((String)rs1.getString("perapp_fname")));//1
					arrOutCol.add(correctNull((String)rs1.getString("Perapp_TITLE")));//2
					
				}
				else
				{
					arrOutCol.add("");
					arrOutCol.add("");
					arrOutCol.add("");
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("sel_applKYCNorms^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("kyc_kycActivity")));//3				
				}
				else
				{
					arrOutCol.add("");
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("cusrating_sel^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("rat_type")));//4				
				}	
				else
				{
					arrOutCol.add("");//4	
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("perbankingselectNewOldId^"+strId);
				ArrayList arrGroupRowOthersAll=new ArrayList();
				ArrayList arrGroupColOthersAll=new ArrayList();
				while(rs1.next())
				{
					arrGroupColOthersAll=new ArrayList();
					if(rs2!=null) {rs2.close();}
					rs2=DBUtils.executeLAPSQuery("getstaticdescription^147^"+correctNull(rs1.getString("perbank_bnkname")));
					if(rs2.next())
					{
						arrGroupColOthersAll.add(correctNull(rs2.getString("STAT_DATA_DESC1")));
					}
					else {
						arrGroupColOthersAll.add("");
					}
					
					arrGroupColOthersAll.add(correctNull((String)rs1.getString("perbank_fundtype")));//1
					arrGroupColOthersAll.add(correctNull((String)rs1.getString("perbank_limit")));//2
					arrGroupColOthersAll.add(correctNull((String)rs1.getString("perbank_os")));//3
					arrGroupColOthersAll.add(correctNull((String)rs1.getString("perbank_osasondate")));//4	
					arrGroupRowOthersAll.add(arrGroupColOthersAll);
				}
				arrOutCol.add(arrGroupRowOthersAll);//5
				arrOutCol.add(strVal1);//6
				
				arrOutRow.add(arrOutCol);				
			}
			
		     hshValues.put("arrGroupConcernDetails", arrOutRow);			
			 arrOutRow	= new ArrayList();
			 arrGroupconcerns = new ArrayList();
			 if(rs!=null)
				 rs.close();
			 rs=DBUtils.executeLAPSQuery("selgroupConcernDetailsCustomer^"+strAppNo);
			while(rs.next())
			{
				arrOutRow=new ArrayList();
				arrOutCol= new ArrayList();
				String strId=Helper.correctNull(rs.getString("comapp_div_appid"));
				if(strId.equalsIgnoreCase(""))
				{
					strId=Helper.correctNull(rs.getString("comapp_div_id"));
				}
				arrGroupconcerns.add(strId);
				rs1=DBUtils.executeLAPSQuery("selcustomerdetails^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("cbs_static_data_desc")));//0
					arrOutCol.add(correctNull((String)rs1.getString("perapp_fname")));//1
					arrOutCol.add(correctNull((String)rs1.getString("Perapp_TITLE")));//2
				}
				else
				{
					arrOutCol.add("");
					arrOutCol.add(Helper.correctNull(rs.getString("comapp_div_name")));
					arrOutCol.add("M/S");
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("sel_applKYCNorms^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("kyc_kycActivity")));//3				
				}
				else
				{
					arrOutCol.add("");
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("cusrating_sel^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("rat_type")));//4				
				}	
				else
				{
					arrOutCol.add("");//3	
				}
				String strCoappVal=Helper.correctInt(rs.getString("com_oldlapsid"));
				if(rs1!=null){rs1.close();}
				rs1	= DBUtils.executeLAPSQuery("perbankingselectNewOldId^"+strCoappVal);
				ArrayList arrGroupRowOthersAll=new ArrayList();
				ArrayList arrGroupColOthersAll=new ArrayList();
				while(rs1.next())
				{
					arrGroupColOthersAll	= new ArrayList();				
					arrGroupColOthersAll.add(correctNull(rs1.getString("perbank_facility"))); // 0
					arrGroupColOthersAll.add(""); // 1
					arrGroupColOthersAll.add(Helper.correctDouble(rs1.getString("perbank_limit"))); // 2
					arrGroupColOthersAll.add(""); // 3
					arrGroupColOthersAll.add(Helper.correctDouble(rs1.getString("perbank_intrate"))); // 4
					arrGroupColOthersAll.add(Helper.correctDouble(rs1.getString("perbank_spread"))); // 5
					arrGroupColOthersAll.add(Helper.correctDouble(rs1.getString("perbank_os"))); // 6
					arrGroupColOthersAll.add(correctNull(rs1.getString("perbank_osasondate"))); // 7
					arrGroupColOthersAll.add(correctNull(rs1.getString("perbank_duedate"))); // 8
					arrGroupColOthersAll.add(correctNull(Helper.CLOBToString(rs1.getClob("perbank_arrears")))); // 9
					if(Helper.correctNull(rs1.getString("perbank_type")).equalsIgnoreCase("2"))
						arrGroupColOthersAll.add("Term Loan"); // 10
					else if(Helper.correctNull(rs1.getString("perbank_type")).equalsIgnoreCase("1"))
						arrGroupColOthersAll.add("Working Capital"); // 10
					else
						arrGroupColOthersAll.add(""); // 10
					
					if(rs2!=null) {rs2.close();}
					rs2=DBUtils.executeLAPSQuery("getstaticdescription^147^"+correctNull(rs1.getString("perbank_bnkname")));
					if(rs2.next())
						arrGroupColOthersAll.add(correctNull(rs2.getString("STAT_DATA_DESC1")));// 11
					else 
						arrGroupColOthersAll.add("");// 11
					if(Helper.correctNull(rs1.getString("perbank_loanpurpose")).equalsIgnoreCase("1"))
						arrGroupColOthersAll.add("Agro processing"); // 12
					else if(Helper.correctNull(rs1.getString("perbank_loanpurpose")).equalsIgnoreCase("2"))
						arrGroupColOthersAll.add("Agriculture Infrastructure"); // 12
					else if(Helper.correctNull(rs1.getString("perbank_loanpurpose")).equalsIgnoreCase("3"))
						arrGroupColOthersAll.add("Others"); // 12
					else
						arrGroupColOthersAll.add(""); // 12
					arrGroupColOthersAll.add(correctNull(rs1.getString("PERBANK_SECDESCRIP")));
					arrGroupColOthersAll.add(correctNull(rs1.getString("PERBANK_SECVALUE")));					
					arrGroupRowOthersAll.add(arrGroupColOthersAll);
				}
				arrOutCol.add(arrGroupRowOthersAll);//5
				arrOutCol.add(Helper.CLOBToString(rs.getClob("COMAPP_BANKERS")));//6
				arrOutCol.add(strId);//7
				arrOutCol.add(Helper.correctNull(rs.getString("COMAPP_DIVISIONTYPE")));//8
				arrOutRow.add(arrOutCol);
				
				strQuery1 = SQLParser.getSqlQuery("sel_GROUPASSETS^"+strAppNo+"^"+strId);
				rs1 = DBUtils.executeQuery(strQuery1);
				if(rs1.next()) 
				{
					String strAssettype=Helper.correctNull(rs1.getString("COM_ASSETCLASSIFICATION"));
					if(strAssettype.equalsIgnoreCase("S"))
					{
						strAssettype="Standard";
					}else if(strAssettype.equalsIgnoreCase("SS"))
					{
						strAssettype="Sub Standard";
					}else if(strAssettype.equalsIgnoreCase("D"))
					{
						strAssettype="Doubtful";
					}else if(strAssettype.equalsIgnoreCase("L"))
					{
						strAssettype="Loss";
					}
					hshValues.put("COM_ASSETCLASS"+strId,strAssettype);	
					hshValues.put("com_asscladate"+strId,Helper.correctNull(rs1.getString("COM_ASONDATE")));	
				}
				if(rs1!=null){rs1.close();}
				strQuery1 = SQLParser.getSqlQuery("sel_GROUPCOMMENTS^"+strAppNo+"^"+strId+"^"+"1");
				rs1 = DBUtils.executeQuery(strQuery1);
				if(rs1.next()) 
				{
					hshValues.put("Performance"+strId,Helper.CLOBToString(rs1.getClob("COM_COMMENTS")));	 
				}
				if(rs1!=null){rs1.close();}
				strQuery1 = SQLParser.getSqlQuery("sel_GROUPCOMMENTS^"+strAppNo+"^"+strId+"^"+"2");
				rs1 = DBUtils.executeQuery(strQuery1);
				if(rs1.next()) 
				{
					hshValues.put("CreditInfo"+strId,Helper.CLOBToString(rs1.getClob("COM_COMMENTS")));	 
				}
				if(rs1!=null){rs1.close();}
				strQuery1 = SQLParser.getSqlQuery("sel_GROUPCOMMENTS^"+strAppNo+"^"+strId+"^"+"3");
				rs1 = DBUtils.executeQuery(strQuery1);
				if(rs1.next()) 
				{
					hshValues.put("Confidential"+strId,Helper.CLOBToString(rs1.getClob("COM_COMMENTS")));	 
				}
				if(rs1!=null){rs1.close();}
				strQuery1 = SQLParser.getSqlQuery("sel_GROUPCOMMENTS^"+strAppNo+"^"+strId+"^"+"4");
				rs1 = DBUtils.executeQuery(strQuery1);
				if(rs1.next()) 
				{
					hshValues.put("Arrears"+strId,Helper.CLOBToString(rs1.getClob("COM_COMMENTS")));	 
				}
				hshValues.put("arrGroupConcernDetails1"+strId, arrOutRow);
				
				arrOutRow	= new ArrayList();
				arrOutCol	= new ArrayList();
				 if(rs1!=null){rs1.close();}
				   /* arrfacwisecol = new ArrayList();
			         rs1=DBUtils.executeLAPSQuery("sel_groupconcernsec^" + strAppNo+"^"+strId) ;
				         while(rs1.next()){
				        	 k=0;
				        	    arrOutRow=new ArrayList();
				        	    arrOutCol= new ArrayList();
				        	    String strbnkFac = Helper.correctNull((String)rs1.getString("comgc_facility"));
								String str_modtype=Helper.correctNull((String)rs1.getString("comgc_modtype"));
								strtemp="";
						       if(!strSecid.equalsIgnoreCase(""))
						       {
						       	 strtemp="and  app_sec_facid='"+strbnkFac+"' and CUS_SEC_ID not in("+strSecid+")";
						       }
						       else
						       {
						    	   strtemp="and  app_sec_facid='"+strbnkFac+"'";
						       //}
						      strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_groupspecific^"+strAppNo+"^"+"E"+"^"+strId+"^"+strtemp);
					         rs3 = DBUtils.executeQuery(strQuery1);
					         while(rs3.next())
					         {
				        	     if(correctNull(rs3.getString("app_sec_securitytype")).equalsIgnoreCase("1"))
				        	     {
				        	    	if(k==0) {
				        	    		k++;
				        	    		arrOutCol= new ArrayList();
						        		 if(str_modtype.equalsIgnoreCase("c") || str_modtype.equalsIgnoreCase("a"))
						 				{
						 					rs2=DBUtils.executeLAPSQuery("sel_facilitycorp_desc^" + strbnkFac);
						 					if(rs2.next())
						 					{
						 						arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
						 					}
						 					else
						 					{
						 						arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
						 					}
						 				}
						        		 else if(str_modtype.equalsIgnoreCase("r")) {
							        		 rs2=DBUtils.executeLAPSQuery("sel_retProductDesc^"+strbnkFac);
							        		 if(rs2.next()){
							        			 arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
							        		 }
							        		 else {
							        			 arrOutCol.add(correctNull(rs2.getString("com_facdesc")));//1 //arr0
							        		 }
						        		 }
						        		 else
						        		 {
						        			 arrOutCol.add("");//1 //arr0
						        		 }
						        
											arrOutCol.add("");	//2				
											arrOutCol.add("");//3
											arrOutRow.add(arrOutCol);
						        	 }
				        	    	arrOutCol= new ArrayList();
				        	    	arrOutCol.add(correctNull(Helper.CLOBToString(rs3.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
									arrOutCol.add(correctNull(rs3.getString("app_sec_securityvalue")));	//2				
									arrOutCol.add(correctNull(rs3.getString("cus_sec_valuation_date")));//3
									if(strSecid.equalsIgnoreCase(""))
									{
										strSecid= "'"+Helper.correctNull((String)rs3.getString("CUS_SEC_ID"))+"'";
									}else
									{
										strSecid = strSecid+",'"+Helper.correctNull((String)rs3.getString("CUS_SEC_ID"))+"'";
									}
									arrOutRow.add(arrOutCol);
				        	    }
					         }
					         if(arrOutRow.size()>0)
					         arrfacwisecol.add(arrOutRow);
				        }*/
				 
				 
				 arrfacwisecol=new ArrayList();
		         if(rs2!=null) {rs2.close();}
		         strQuery1 = SQLParser.getSqlQuery("seluniqueprimary_sec^ and app_sec_customerid='"+strCoappVal+"' and app_sec_borrower_id='"+strAppOldId+"' and  a.APP_SEC_LOANTYPE='E' and  a.APP_SEC_SECUTYPE='E' ^A^"+strAppNo);
		         rs2=DBUtils.executeQuery(strQuery1);
		         while(rs2.next())
		         {
					
		        	 arrOutRow=new ArrayList();
						if(rs1!=null)
						rs1.close();
					 strQuery1 = SQLParser.getSqlQuery("seluniqueprimarysec_groupconcerns^A^"+correctNull(rs2.getString("secid"))+"^"+strAppOldId+"^"+strCoappVal+"^"+strAppNo);
					 rs1=DBUtils.executeQuery(strQuery1) ;
			         while(rs1.next()) 
			         {
		        	    	arrOutCol= new ArrayList();
		        	    	arrOutCol.add(correctNull(rs1.getString("facility_catdesc")));//0
							arrOutCol.add(correctNull(rs1.getString("facility_proposed")));//1
							arrOutCol.add(correctNull(rs2.getString("secdescription")));//2
							arrOutCol.add(correctNull(rs2.getString("app_sec_securityvalue")));	//3				
							arrOutCol.add(correctNull(rs2.getString("cus_sec_valuation_date")));//4
							arrOutRow.add(arrOutCol);
			         }
			         
			         
			         if(arrOutRow.size()>0)
			         {
			        	 arrfacwisecol.add(arrOutRow); 
			         }
						
	        	 }
				         hshValues.put("arrExisSecRow"+strId, arrfacwisecol);
				         
				         
				         
				         //for collateral
				         if(rs1!=null){rs1.close();}
				         arrOutRow1=new ArrayList();
				         strtemp="";
					       /*if(!strSecid.equalsIgnoreCase(""))
					       {
					       	 strtemp=" and CUS_SEC_ID not in("+strSecid+")";
					       	strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_groupspecific^"+strAppNo+"^"+"E"+"^"+strId+"^"+strtemp);
					       }
					       else
					       {*/
					    	   strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView^"+strAppNo+"^"+strAppNo+"^"+"E"+"^ and app_sec_secutype='E' and app_sec_customerid='"+strCoappVal+"' and app_sec_borrower_id='"+strAppOldId+"'");
					       //}
				        k=0;
				         rs1 = DBUtils.executeQuery(strQuery1);
			             while(rs1.next())
				         {
			        	    	arrOutCol1= new ArrayList();
			        	    	//arrOutCol1.add(correctNull(rs1.getString("sec_name")));//0
			        	    	arrOutCol1.add(correctNull(Helper.CLOBToString(rs1.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
								arrOutCol1.add(correctNull(rs1.getString("cus_sec_netsecurity")));	//2				
								arrOutCol1.add(correctNull(rs1.getString("cus_sec_valuation_date")));//3
								/*if(strSecid.equalsIgnoreCase(""))
								{
									strSecid= "'"+Helper.correctNull((String)rs1.getString("CUS_SEC_ID"))+"'";
								}else
								{
									strSecid = strSecid+",'"+Helper.correctNull((String)rs1.getString("CUS_SEC_ID"))+"'";
								}*/
								arrOutRow1.add(arrOutCol1);
				         }
				         hshValues.put("arrExisSeccollRow"+strId, arrOutRow1);
				         //Existing Securities for Group Concerns
				         if(rs1!=null){rs1.close();}
				         arrOutRow1=new ArrayList();
				         String strPage="existingsecurity";
				         strQuery1 = SQLParser.getSqlQuery("sel_secManual_groupconcerns^"+strAppNo+"^"+strId+"^"+strPage);
				         rs1 = DBUtils.executeQuery(strQuery1);
			             if(rs1.next())
				         {
			            	 arrOutCol1= new ArrayList();
			            	 arrOutCol1.add(strId);//0
			            	 arrOutCol1.add(correctNull(Helper.CLOBToString(rs1.getClob("COMSEC_COMMENTS"))));//1
			            	 arrOutRow1.add(arrOutCol1);
				         }
			             hshValues.put("arrExisSecgroupRow"+strId, arrOutRow1);
			             
			           //Existing Facility for Group Concerns with our bank
			             if(rs1!=null){rs1.close();}
				         arrOutRow1=new ArrayList();
				         strPage="existingfacility";
				         strQuery1 = SQLParser.getSqlQuery("sel_secManual_groupconcerns^"+strAppNo+"^"+strId+"^"+strPage);
				         rs1 = DBUtils.executeQuery(strQuery1);
			             if(rs1.next())
				         {
			            	 arrOutCol1= new ArrayList();
			            	 arrOutCol1.add(strId);//0
			            	 arrOutCol1.add(correctNull(Helper.CLOBToString(rs1.getClob("COMSEC_COMMENTS"))));//1
			            	 arrOutRow1.add(arrOutCol1);
				         }
			             hshValues.put("arrExisFacgroupRow"+strId, arrOutRow1);
			         
			}
			hshValues.put("arrGroupconcerns", arrGroupconcerns);
			
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"existcreditfac");
			if(rs1.next())
			{
				hshValues.put("com_remarksExis", correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
			}
			
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"existcreditfacRepay");
			if(rs1.next())
			{
				hshValues.put("com_TermLaonREpay",Helper.correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
			}
			
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"groupconcernFac");
			if(rs1.next())
			{
				hshValues.put("com_GroupConfac", correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
				hshValues.put("com_GroupConfac1", correctNull(Helper.CLOBToString(rs1.getClob("cmt_intercomments"))));
			}
			
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"groupconcernRepay");
			if(rs1.next())
			{
				hshValues.put("com_Grouprepay", correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
			}

			//some personal loans/ business loans 
			arrOutRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("perbankingselectNewOldId^"+strAppId);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				
				if(rs1!=null) {rs1.close();}
				rs1=DBUtils.executeLAPSQuery("getstaticdescription^147^"+correctNull(rs.getString("perbank_bnkname")));
				if(rs1.next())
				{
					arrOutCol.add(correctNull(rs1.getString("STAT_DATA_DESC1")));
				}
				else {
					arrOutCol.add("");
				}
				arrOutCol.add(Helper.correctDouble(rs.getString("perbank_limit")));
				arrOutCol.add(Helper.correctDouble(rs.getString("perbank_os")));
				arrOutCol.add(correctNull(rs.getString("perbank_osasondate")));
				arrOutRow.add(arrOutCol);
			}
			hshValues.put("arrPersonalRow", arrOutRow);
			
			//Sec Coverage
			hshValues.put("arrNewRow", (ArrayList)hshsecdet.get("arrNewRow"));
			
			hshValues.put("dbl_totvalexis", (String)hshsecdet.get("dbl_totvalexis"));
			hshValues.put("dbl_totvalproposed", (String)hshsecdet.get("dbl_totvalproposed"));
			
			hshValues.put("dbl_secexitot", (String)hshsecdet.get("dbl_secexitot"));
			hshValues.put("dbl_secproptot", (String)hshsecdet.get("dbl_secproptot"));
			
			hshValues.put("dbl_secexicoverage", (String)hshsecdet.get("dbl_secexicoverage"));
			hshValues.put("dbl_secpropcoverage", (String)hshsecdet.get("dbl_secpropcoverage"));
			
			//Financial Position
			strQuery	= "";
			strQuery2="";
			ArrayList vecVal = new ArrayList();
			ArrayList vecRec1 = new ArrayList();
			ArrayList vecRec2 = new ArrayList();
			String strcomappid = correctNull((String) hshValues.get("comappid"));
			String strCompanyname = "0";
			String strindtype = correctNull((String) hshValues.get("industryType"));
				
			if(strcomappid.equalsIgnoreCase(""))
			{
				rs = DBUtils.executeLAPSQuery("comfunsel3^" + strAppNo);
				if(rs.next())
				{
					strcomappid=Helper.correctNull((String)rs.getString("demo_appid"));
				}
			}
			if(rs!=null){rs.close();}

			rs = DBUtils.executeLAPSQuery("com_interfirm_select^" + strindtype + "^" + strcomappid);
			while (rs.next()) 
			{
				vecRec1.add(correctNull((String) rs.getString("comapp_id")));
				vecRec2.add(correctNull((String) rs.getString("comapp_companyname")));
			}
			
			vecVal.add(vecRec1);
			vecVal.add(vecRec2);
			hshValues.put("vecVal", vecVal);
			hshValues.put("vecname", vecRec2);
			hshValues.put("vecid", vecRec1);
			for(int a=0;a<arrGroupconcerns.size();a++)
			{
				strCompanyname=Helper.correctNull((String)arrGroupconcerns.get(a));
			ArrayList arrfreetext=new ArrayList();
			ArrayList arrfinyear=new ArrayList();
			ArrayList arrfindatacol=new ArrayList();
			ArrayList arrfindatarow=new ArrayList();
			if(!strCompanyname.equalsIgnoreCase(""))
			{
				strQuery = SQLParser.getSqlQuery("selfingrpconcernval^" + strAppNo+"^"+strCompanyname);
				if (rs != null) rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) 
				{
					arrfreetext.add(Helper.correctNull(rs.getString("COM_FREETEXT1")));
					arrfreetext.add(Helper.correctNull(rs.getString("COM_FREETEXT2")));
					arrfreetext.add(Helper.correctNull(rs.getString("COM_FREETEXT3")));
					arrfreetext.add(Helper.correctNull(rs.getString("COM_FREETEXT4")));
					hshValues.put("intcompfreetxt_txt1", Helper.correctNull(rs.getString("COM_FREETEXT1"))); // 1
					hshValues.put("intcompfreetxt_txt2", correctNull(rs.getString("COM_FREETEXT2")));// 2
					hshValues.put("intcompfreetxt_txt3", correctNull(rs.getString("COM_FREETEXT3")));// 3
					hshValues.put("COM_FREETEXT4", correctNull(rs.getString("COM_FREETEXT4")));// 4 
				}
				hshValues.put("arrFinancialRow"+strCompanyname,arrfreetext);
				strQuery = SQLParser.getSqlQuery("selfingrpconcerncompare^" + strAppNo+"^"+strCompanyname);
				if (rs != null)rs.close();
				rs = DBUtils.executeQuery(strQuery);
				 k = 0;
				while (rs.next()) 
				{
					k = k + 1;
					arrfindatacol=new ArrayList();
					arrfinyear.add(Helper.correctNull(rs.getString("fingrpconcern_year")));//0
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_year")));//0
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_fintype")));//1
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_grosssales")));//2
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_netsales")));//3
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_netprofit")));//4
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_capital")));//5
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_tangnetworth")));//6
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_networkcap")));//7
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_toltnw")));//8
					
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_currratio")));//9
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_estproturn")));//10
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_totcapital")));//11
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_seccoverinclude")));
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_seccoverexclude")));
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_lastcredit")));
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_freetext1")));//15
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_freetext2")));//16
					arrfindatacol.add(Helper.correctNull(rs.getString("fingrpconcern_freetext3")));//17
					arrfindatacol.add(Helper.correctNull(rs.getString("FINGRPCONCERN_FREETEXT4")));//18
					arrfindatarow.add(arrfindatacol);
				}
			}
			strQuery = SQLParser.getSqlQuery("Applicantname_sel^" + strCompanyname);
			if (rs != null) rs.close();
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("compyname"+strCompanyname,Helper.correctNull(rs.getString("appname")));
				//hshValues.put("compyname",Helper.correctNull(rs.getString("comapp_div_name")));
			}
			hshValues.put("arrFinancialdata"+strCompanyname,arrfindatarow);
			hshValues.put("arrfinyear"+strCompanyname,arrfinyear);
			hshValues.put("companyname"+strCompanyname,strCompanyname);
			}
			//Assets Classification
			if(rs!=null){rs.close();}
			rs=DBUtils.executeLAPSQuery("sel_combankingdetails^"+strAppNo);
			if(rs.next())
			{
				strAssetClassification	= correctNull(rs.getString("com_assetclass"));
				hshValues.put("com_asscladate", correctNull(rs.getString("com_asscladate")));
			}
			
			if(strAssetClassification.equalsIgnoreCase("S"))
			{
				strAssetClassification="Standard";
			}
			else if(strAssetClassification.equalsIgnoreCase("SS"))
			{
				strAssetClassification="Sub Standard";
			}
			else if(strAssetClassification.equalsIgnoreCase("D"))
			{
				strAssetClassification="Doubtful";
			}
			else if(strAssetClassification.equalsIgnoreCase("L"))
			{
				strAssetClassification="Loss";
			}
			else
			{
				strAssetClassification="NIL";
			}
			
			hshValues.put("strAssetClassification",strAssetClassification);
			
			
			/*
			String strProposalWC="",strAnnxWC="",strProposalMB="",strAnnxMB="",strProposalTL="",strAnnxTL="";
			rs	= DBUtils.executeLAPSQuery("sel_proposalNoteCheck^"+strAppNo);
			while(rs.next())
			{
				if(Helper.correctNull((String)rs.getString("com_pagename")).equalsIgnoreCase("WC")) 
				{
					strAnnxWC = Helper.correctNull((String)rs.getString("com_annexure"));
				}
				if(Helper.correctNull((String)rs.getString("com_pagename")).equalsIgnoreCase("MB")) 
				{
					strAnnxMB = Helper.correctNull((String)rs.getString("com_annexure"));
				}
				if(Helper.correctNull((String)rs.getString("com_pagename")).equalsIgnoreCase("TL")) 
				{
					strAnnxTL = Helper.correctNull((String)rs.getString("com_annexure"));
				}
			}
			*/
			
			//For Banking Arrangement Comments - by DINESH on 29/04/2014
			
			if(rs!=null){rs.close();}
			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppNo + "^"+ "bankargmnt");
			if (rs.next()) 
			{
				hshValues.put("fin_comments1bankargmnt", Helper.CLOBToString(rs.getClob("fin_comments1")));
			}
			
			//-------------------------------------------------------------
			
			BankAppBean bankapp = new BankAppBean();
			
			HashMap hshReqVal = new HashMap();
			hshReqVal.put("hidAppNo", strAppNo);
			hshReqVal.put("PageType", "ANN3");
			hshReqVal =	bankapp.getConsortiumDetails(hshReqVal);
			hshReqVal.put("page", "ANNEXUREIII");
			hshValues.put("ANN3",hshReqVal);
			strQuery = SQLParser.getSqlQuery("sel_comments^seccomments^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
 			if(rs.next())
			{
				hshValues.put("hshAdditionalsec",Helper.CLOBToString(rs.getClob("COM_COMMENTS")));	
			}
			
			strQuery = SQLParser.getSqlQuery("sel_financial_comments^bankcomments^1^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("hshPerformance",Helper.CLOBToString(rs.getClob("com_comments")));	
			}
			strQuery = SQLParser.getSqlQuery("sel_financial_comments^bankcomments^2^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("hshCreditinforeport",Helper.CLOBToString(rs.getClob("com_comments")));	
			}
			strQuery = SQLParser.getSqlQuery("sel_financial_comments^bankcomments^3^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("hshConfidentialopinion",Helper.CLOBToString(rs.getClob("com_comments")));	
			}
			strQuery=SQLParser.getSqlQuery("sel_comments^secoverage2^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("cmt_presanccommentsforannex",Helper.CLOBToString(rs.getClob("com_comments")));
			}
			strQuery=SQLParser.getSqlQuery("sel_comments^secoverage3^"+strAppNo);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshValues.put("cmt_postsanccommentsforannex",Helper.CLOBToString(rs.getClob("com_comments")));
			}
			
			//Co obligant and Guarantor
			if (rs != null)
				rs.close();
			ArrayList arrGuarantors=new ArrayList();
			ArrayList arrCoobligant=new ArrayList();
			String guarappid="",netwoth="",strnetwoth="";
			String strCoAppExID="",strCoAppExType="",strCoAppID="",strCoAppType="";
			strQuery = SQLParser.getSqlQuery("compromoterselectionpromoters^"+ strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				
				strCoAppType			= correctNull(rs.getString("com_compdttype"));
				strCoAppID			= correctNull(rs.getString("com_oldlapsid"));
				
				
				if((strCoAppID.equalsIgnoreCase(strCoAppExID)) && (strCoAppType.equalsIgnoreCase(strCoAppExType)))
					continue;
				
				ArrayList arrVec4 = new ArrayList();
				ArrayList arrVecCo = new ArrayList();
				arrVec4.add(correctNull(rs.getString("com_compdtfname")));//0
				arrVec4.add(correctNull(rs.getString("com_compdtlname")));//1
				arrVec4.add(correctNull(rs.getString("com_compdtmname")));//2
				arrVec4.add(correctNull(rs.getString("com_compdaca")));//3
				arrVec4.add(correctNull(rs.getString("com_compdtaddress1")));//4
				arrVec4.add(correctNull(rs.getString("com_compdtaddress2")));//5
				arrVec4.add(correctNull(rs.getString("com_compdtcity")));//6
				arrVec4.add(correctNull(rs.getString("com_compdtstate")));//7
				arrVec4.add(correctNull(rs.getString("com_compdtpin")));//8
				String company_id = correctNull((String) rs
						.getString("com_compdtid"));
				guarappid=Helper.correctInt(rs.getString("com_compdtappid"));
				if (rs1 != null) {
					rs1.close();
				}
				strQuery = SQLParser.getSqlQuery("selcreditreport2^"
						+ strAppNo + "^" + company_id);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrVec4
							.add(correctNull(rs1
									.getString("CR_Total_MEANS")));//9
				} else {
					arrVec4.add("0.00");
				}
				arrVec4.add(correctNull(rs.getString("com_compdexp")));//10
				if (rs1 != null) {
					rs1.close();
				}
				rs1= DBUtils.executeLAPSQuery("sel_presanactionage^"+guarappid);
				
				if(rs1.next())
				{
					arrVec4.add(correctNull(rs1.getString("age")));//11
					strVal	= correctNull(rs1.getString("perapp_constitution"));
					netwoth	= correctNull(rs1.getString("perapp_networthason"));
					strnetwoth	= Helper.convertSetupToApplicationValues(strValNew, Double.parseDouble(Helper.correctDouble(rs1.getString("perapp_networth"))));
				}
				else
				{
					arrVec4.add("0");
				}
				
				if(strVal.equals("01"))
				{
					if(rs1!=null){rs1.close();}
					rs1= DBUtils.executeLAPSQuery("pergetIncome1^"+guarappid);
					
					if(rs1.next())
					{
						arrVec4.add(Helper.convertSetupToApplicationValues(strValNew, Double.parseDouble(Helper.correctDouble(rs1.getString("perinc_takehome")))));//12
					}
					else
					{
						arrVec4.add("0.00");
					}
					
				}
				else
				{
					if(rs1!=null){rs1.close();}
					rs1= DBUtils.executeLAPSQuery("pergetIncome1^"+guarappid);
					
					if(rs1.next())
					{
						arrVec4.add(Helper.convertSetupToApplicationValues(strValNew, Double.parseDouble(Helper.correctDouble(rs1.getString("perinc_year1_income")))));//12
					}
					else
					{
						arrVec4.add("0.00");
					}
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("sel_CBSStaticDataPassingCode^2^"+strVal);
				if(rs1.next())
				{
					arrVec4.add(correctNull(rs1
							.getString("cbs_static_data_desc")));//13
				}
				else
				{
					arrVec4.add(" ");
				}
				if(rs1!=null){rs1.close();}
				arrVec4.add(strnetwoth);//14
				arrVec4.add(netwoth);//15
				arrVec4.add(strVal);//16
				String strpromgua[] = correctNull(
						rs.getString("com_compdttype")).split("@");

				for (int i = 0; i < strpromgua.length; i++) {
					if (strpromgua[i].equals("G") && strpromgua[i].equals("CO")) {
						// log.info("Guarantor");
						arrGuarantors.add(arrVec4);
					}
					else if(strpromgua[i].equals("G"))
					{
						arrGuarantors.add(arrVec4);
					}
					else if(strpromgua[i].equals("CO"))
					{
						arrGuarantors.add(arrVec4);
					}
				}
				
				strCoAppExID			= correctNull(rs.getString("com_oldlapsid"));
				strCoAppExType			= correctNull(rs.getString("com_compdttype"));
			}
			hshValues.put("arrGuarantors", arrGuarantors);
			if (rs != null)
				rs.close();
			
			strQuery = SQLParser.getSqlQuery("sel_seccomments^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("COMSEC_APPCOVERAGE", Helper.correctNull(rs.getString("COMSEC_APPCOVERAGE")));
				hshValues.put("COMSEC_APPCOMMENTS", correctNull(Helper.CLOBToString(rs.getClob("COMSEC_APPCOMMENTS"))));
				hshValues.put("COMSEC_GROUPCOVERAGE",Helper.correctNull(rs.getString("COMSEC_GROUPCOVERAGE")));
				hshValues.put("COMSEC_GROUPCOMMENTS", correctNull(Helper.CLOBToString(rs.getClob("COMSEC_GROUPCOMMENTS"))));
				hshValues.put("strProposedSecurity", Helper.correctNull(rs.getString("COMSEC_ADDITIONALSECCOVERAGE")));
				hshValues.put("strProposedSecurityComments", correctNull(Helper.CLOBToString(rs.getClob("COMSEC_ADDITIONALSECCOMMENTS"))));
				hshValues.put("COMSEC_SECTYPE", Helper.correctNull(rs.getString("COMSEC_SECTYPE")));
				hshValues.put("COMSEC_FACGROUPCONCERN", Helper.correctNull(rs.getString("COMSEC_FACGROUPCONCERN")));
				hshValues.put("COMSEC_FACGROUPCONCERNCOMMENTS", correctNull(Helper.CLOBToString(rs.getClob("COMSEC_FACGROUPCONCERNCOMMENTS"))));
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_retailcomments^" + strAppNo+"^legal");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("security_legalopinioncmts", correctNull(Helper.CLOBToString(rs.getClob("cmt_comments"))));
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("selborrowerdet_company^" + strAppId);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				if(Helper.correctNull((String)rs.getString("cominfo_ownership_type")).equalsIgnoreCase("004")){
				 hshValues.put("companyinfo_typeofliability", correctNull(Helper.CLOBToString(rs.getClob("companyinfo_typeofliability"))));
				}
			}
			
			String strFinvaluesIn="";
			int strFinid=0;
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			if(rs.next())
			{
				strFinvaluesIn	= correctNull(rs.getString("fin_valuesarein"));
			}
			if(strFinvaluesIn.equals("C")){strFinvaluesIn			= "Crore";}
			else if(strFinvaluesIn.equals("L")){strFinvaluesIn	= "Lacs";}
			else {strFinvaluesIn	= "Rs";}
			hshValues.put("strFinValuesIn", strFinvaluesIn);
			
			strCoAppExID="";strCoAppExType="";strCoAppID="";
			
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("compromoterselectionpromoters^"+strAppNo);
			while(rs.next())
			{
				String strType			= correctNull(rs.getString("com_compdttype"));
				strCoAppID			= correctNull(rs.getString("com_oldlapsid"));
				
				if((strCoAppID.equalsIgnoreCase(strCoAppExID)) && (strType.equalsIgnoreCase(strCoAppExType)))
					continue;
				
				if(!strType.equals(""))
				{
					arrColPrmo.add(Helper.correctInt(rs.getString("com_oldlapsid")));
					if(rs1!=null){rs1.close();}
					rs1=DBUtils.executeLAPSQuery("selcustomerdetails^"+Helper.correctInt(rs.getString("com_compdtappid")));
					if(rs1.next())
					{
						arrColPrmo.add(Helper.correctNull(rs1.getString("Perapp_TITLE"))+"."+Helper.correctNull(rs1.getString("perapp_fname")));
					}
					else
					{
						arrColPrmo.add("");
					}
				}
				
				strCoAppExID			= correctNull(rs.getString("com_oldlapsid"));
				strCoAppExType			= correctNull(rs.getString("com_compdttype"));
			}
			hshValues.put("arrPromotors", arrColPrmo);
			
			if(rs2!=null){rs.close();}
			rs2=DBUtils.executeLAPSQuery("compromotertagselect^"+strAppNo);
			while(rs2.next())
			{
				String strAppid=Helper.correctInt(rs2.getString("com_oldlapsid"));
				arrOutRow=new ArrayList();
			if(rs!=null) {rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_CGOur_CGWise^"+strAppNo+"^"+strAppid);
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(strAppid);//0
				strFacilityFor=Helper.correctNull((String)rs.getString("comgc_modtype"));
				strFacilityId=Helper.correctInt(rs.getString("comgc_facility"));
				strFacilityFC=Helper.correctInt(rs.getString("com_headfac"));
				arrOutCol.add(Helper.correctNull(rs.getString("description")));
				arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs.getString("comgc_purpose"))));
				if(strFacilityFC.equalsIgnoreCase("1"))
					arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs.getString("comgc_limit")))/50));
				else
					arrOutCol.add(Helper.correctDouble(rs.getString("comgc_limit")));
				arrOutCol.add(correctNull(rs.getString("comgc_sancrefno")));
				arrOutCol.add(correctNull(rs.getString("comgc_sancdate")));
				arrOutCol.add(Helper.correctDouble(rs.getString("comgc_intrate")));
				if(strFacilityFC.equalsIgnoreCase("1"))
					arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs.getString("comgc_os")))/50));
				else
					arrOutCol.add(Helper.correctDouble(rs.getString("comgc_os")));
				arrOutCol.add(correctNull(rs.getString("comgc_osasondate")));
				arrOutCol.add(correctNull(rs.getString("comgc_duedate")));
				arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs.getString("comgc_arrears"))));
				String strId=correctNull(rs.getString("comgc_companyname"));
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("selcustomerdetails^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("perapp_fname")));//10
				}
				else
				{
					arrOutCol.add("");//10
				}
				if(rs1!=null){rs1.close();}
				rs1=DBUtils.executeLAPSQuery("cusrating_sel^"+strId);
				if(rs1.next())
				{
					arrOutCol.add(correctNull((String)rs1.getString("rat_type")));//11
					arrOutCol.add(correctNull((String)rs1.getString("rat_agency")));//12
				}	
				else
				{
					arrOutCol.add("");//11	
					arrOutCol.add("");//12
				}
				arrOutCol.add(correctNull(rs.getString("COMGC_REMARKS")));//13
				arrOutCol.add(correctNull(rs.getString("comgc_repaymentcmt")));//14
				arrOutCol.add(correctNull(rs.getString("comgc_factype")));
				arrOutRow.add(arrOutCol);
				
				if(rs3!=null) {rs3.close();}
					rs3	= DBUtils.executeLAPSQuery("sel_CGsublimits^"+strAppNo+"^"+Helper.correctInt(rs.getString("comgc_parentappno"))+"^"+Helper.correctInt(rs.getString("comgc_parentfacsno"))+"^"+strAppid);
					while(rs3.next())
					{
						arrOutCol	= new ArrayList();
						arrOutCol.add(strAppid);//0
						strFacilityFC=Helper.correctInt(rs3.getString("com_headfac"));
						arrOutCol.add(Helper.correctNull(rs3.getString("description"))+"(Sub Limit of "+Helper.correctNull(rs.getString("description"))+")");
						arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs3.getString("comgc_purpose"))));
						if(strFacilityFC.equalsIgnoreCase("1"))
							arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs3.getString("comgc_limit")))/50));
						else
							arrOutCol.add(Helper.correctDouble(rs3.getString("comgc_limit")));
						arrOutCol.add(correctNull(rs3.getString("comgc_sancrefno")));
						arrOutCol.add(correctNull(rs3.getString("comgc_sancdate")));
						arrOutCol.add(Helper.correctDouble(rs3.getString("comgc_intrate")));
						if(strFacilityFC.equalsIgnoreCase("1"))
							arrOutCol.add(String.valueOf(Double.parseDouble(Helper.correctDouble(rs3.getString("comgc_os")))/50));
						else
							arrOutCol.add(Helper.correctDouble(rs3.getString("comgc_os")));
						arrOutCol.add(correctNull(rs3.getString("comgc_osasondate")));
						arrOutCol.add(correctNull(rs3.getString("comgc_duedate")));
						arrOutCol.add(Helper.replaceForJavaScriptString(correctNull(rs3.getString("comgc_arrears"))));
						arrOutCol.add("");//10
						arrOutCol.add("");//11	
						arrOutCol.add("");//12
						arrOutCol.add(correctNull(rs3.getString("COMGC_REMARKS")));
						arrOutCol.add(correctNull(rs3.getString("comgc_repaymentcmt")));
						arrOutCol.add(correctNull(rs3.getString("comgc_factype")));
						arrOutRow.add(arrOutCol);
				 }
			}
			hshValues.put("arrPromoOurRow"+strAppid, arrOutRow);
		 }
			
			if(rs!=null)
				rs.close();
			rs=DBUtils.executeLAPSQuery("sel_com_comments^FPComments^"+strAppNo);
			while(rs.next())
			{
				String finsno=Helper.correctNull((String)rs.getString("com_sno"));
				if(finsno.equalsIgnoreCase("1"))
				{
						hshValues.put("strInterLockingFunds",Helper.correctNull(Helper.CLOBToString(rs.getClob(("com_comments")))));
				}
			}
			
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"Independenteval");
			if(rs1.next())
			{
				hshValues.put("strSecIndpendentEval", correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
			}
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"section185");
			if(rs1.next())
			{
				hshValues.put("strSecSection185", correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
			}
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("sel_retailcomments^"+strAppNo+"^"+"cersaicmts");
			if(rs1.next())
			{
				hshValues.put("strSecCERSAI", correctNull(Helper.CLOBToString(rs1.getClob("cmt_comments"))));
			}
			if(rs1!=null){rs1.close();}
			rs1=DBUtils.executeLAPSQuery("selcom_Rbiloanpolicyguide^"+strAppNo);
			while(rs1.next())
			{
				if(Helper.correctNull(rs1.getString("comrbi_pagetype")).equalsIgnoreCase("LEGAL"))
				{
					hshValues.put("COMRBI_CMDPROCESSLEGAL", correctNull(Helper.CLOBToString(rs1.getClob("COMRBI_CMDPROCESS"))));
				}
			}
			
			if(rs1!=null){rs1.close();}
		         
			 arrfacwiseCersaicol=new ArrayList();
	         if(rs!=null) {rs.close();}
	         strQuery1 = SQLParser.getSqlQuery("seluniqueprimary_sec_cersai^and  a.APP_SEC_LOANTYPE='P'^A^"+strAppNo);
	         rs=DBUtils.executeQuery(strQuery1);
	         while(rs.next())
	         {
				
	        	 arrOutRow=new ArrayList();
					if(rs1!=null)
					rs1.close();
				 strQuery1 = SQLParser.getSqlQuery("seluniqueprimarysec_facdetails^and  a.APP_SEC_LOANTYPE='P'^A^"+correctNull(rs.getString("secid"))+"^"+strAppNo);
				 rs1=DBUtils.executeQuery(strQuery1) ;
		         while(rs1.next()) 
		         {
		        	 String cus_sec_type = correctNull(rs.getString("CUS_SEC_TYPE"));
		        	 if(cus_sec_type.equalsIgnoreCase("10")||cus_sec_type.equalsIgnoreCase("11")||cus_sec_type.equalsIgnoreCase("12")
		     				||cus_sec_type.equalsIgnoreCase("13")||cus_sec_type.equalsIgnoreCase("15")||cus_sec_type.equalsIgnoreCase("16")
		     				||cus_sec_type.equalsIgnoreCase("17"))
		     				{
	        	    	arrOutCol= new ArrayList();
	        	    	arrOutCol.add(correctNull(rs1.getString("facility_catdesc")));//0
						arrOutCol.add(correctNull(rs1.getString("facility_proposed")));//1
						arrOutCol.add(correctNull(rs.getString("secdescription")));//2
						arrOutCol.add(correctNull(rs.getString("app_sec_securityvalue")));	//3				
						arrOutCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//4
						arrOutCol.add(correctNull(rs.getString("secid")));//5
						if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
						{
							if(rs2!=null)
								rs2.close();
							rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("secid")));
							if(rs2.next())
							{
								arrOutCol.add(correctNull(rs2.getString("CERSAIID")));//5
							}
							else
							{
								arrOutCol.add("");
							}
								
						}
						else
						{
							arrOutCol.add(correctNull(rs.getString("CERSAIID")));//5
						}
						arrOutCol.add(correctNull(rs.getString("SEC_CERSAIREFNO")));//6
						arrOutCol.add(correctNull(rs.getString("SEC_SEARCHPERFORM_DATE")));//7
						arrOutRow.add(arrOutCol);
		         }
		         
		         
		         if(arrOutRow.size()>0)
		         {
		        	 arrfacwiseCersaicol.add(arrOutRow); 
		         }
		         }	
        	 }
	         
	         hshValues.put("arrRowCersaiPri", arrfacwiseCersaicol);

	         if(rs!=null)
	        	 rs.close();
	         
	         ArrayList arrOutCersaiCol = new ArrayList();
	         ArrayList arrOutCersaiRow = new ArrayList();

	         strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_existing_cersai_coll^"+strAppNo);	 
	         rs = DBUtils.executeQuery(strQuery1);
	         while(rs.next())
	         {
	        	String appsecsecuritytype = correctNull(rs.getString("app_sec_securitytype"));
	        	arrOutCersaiCol= new ArrayList();
	    	    	arrOutCersaiCol.add(correctNull(Helper.CLOBToString(rs.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));//1
	    	    	arrOutCersaiCol.add(correctNull(rs.getString("cus_sec_netsecurity")));	//2				
					arrOutCersaiCol.add(correctNull(rs.getString("cus_sec_valuation_date")));//3
					
					if(Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))>=10 && Integer.parseInt(Helper.correctInt(rs.getString("CUS_SEC_TYPE")))<18)
					{
						if(rs2!=null)
							rs2.close();
						rs2=DBUtils.executeLAPSQuery("sel_CERSAIID^"+Helper.correctNull(rs.getString("cus_sec_id")));
						if(rs2.next())
						{
							arrOutCersaiCol.add(correctNull(rs2.getString("CERSAIID")));//4
						}
						else
						{
							arrOutCersaiCol.add("");
						}
							
					}
					else
					{
						arrOutCersaiCol.add(correctNull(rs.getString("CERSAIID")));//4
					}
					arrOutCersaiCol.add(correctNull(rs.getString("cus_sec_id")));//5
					arrOutCersaiCol.add(correctNull(rs.getString("SEC_CERSAIREFNO")));// 5
					arrOutCersaiCol.add(correctNull(rs.getString("sec_searchperform_date")));// 6

				arrOutCersaiRow.add(arrOutCersaiCol);
			 }
	         
	         hshValues.put("arrcollateralforcersai", arrOutCersaiRow);
	         
	         if(rs!=null)
	        	 rs.close();
	         
	         ArrayList arrOutCersaiQuesCol = new ArrayList();
	         ArrayList arrOutCersaiQuesRow = new ArrayList();

	         strQuery1 = SQLParser.getSqlQuery("secExisFacilityDetailsView_existing_cersai_Ques^"+strAppNo);	 
	         rs = DBUtils.executeQuery(strQuery1);
	         while(rs.next())
	         {
	        	 arrOutCersaiQuesCol= new ArrayList();
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("cus_sec_type")));// 1
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_ALREADY_MORTG")));// 2
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CHARG_REFLECT")));// 3
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_OTHERBNK_REMARK")));//4
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_REMARK_NOT_REFLECT")));// 5
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_PROP_OBSERVED")));// 6
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_REMARKS")));// 7
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("cus_sec_id")));// 8
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CERSAI_ID")));// 9
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CERSAIREFNO")));// 10	        	 
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_SEARCHPERFORM_DATE")));// 11
	        	 arrOutCersaiQuesCol.add(correctNull(rs.getString("SEC_CERSAI_DATE")));// 12

				arrOutCersaiQuesRow.add(arrOutCersaiQuesCol);
			 }
	         
	         hshValues.put("arrOutCersaiQues", arrOutCersaiQuesRow);
	         
		}
		catch(Exception ce)
		{
 			throw new EJBException("Error in getAnnexureIII login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
				if(rs1 != null){	rs1.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	public HashMap getAnnexureIV(HashMap hshReqValues) 
	{
		ResultSet rs 		= null;
		ResultSet rs1 		= null;
		HashMap hshValues	= new HashMap();
		HashMap hshFinValues= new HashMap();
		String strAppId="",strAppNo="", strVal="";
		int strFinid=0;
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		String strValuesIn="",strFinvaluesIn="";
		
		FinancialBean finobj	= new FinancialBean();
		
		try
		{
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			FinancialBean financial=new FinancialBean();
			HashMap hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			/*	hshRequestValues.put("pageval","LIABILITIES");
			hshRequestValues=financial.getData(hshRequestValues);
			
			hshValues.put("hshReqValues",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","ASSETS");
			hshRequestValues=financial.getData(hshRequestValues);
			
			hshValues.put("hshReqValues1",hshRequestValues);

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","PROFIT AND LOSS A/C");
			hshRequestValues=financial.getData(hshRequestValues);
			
			hshValues.put("hshReqValues2",hshRequestValues);*/
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			hshValues.put("strValuesIn", strValuesIn);
			
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			if(rs.next())
			{
				strFinvaluesIn	= correctNull(rs.getString("fin_valuesarein"));
			}
			else{
				strFinvaluesIn	= "R";
			}
			if(rs!=null){rs.close();}
			
			//Financail Values In
			if(strFinvaluesIn.equals("C")){strFinvaluesIn = "Crore";}
			else if(strFinvaluesIn.equals("L")){strFinvaluesIn	= "Lacs";}
			else if(strFinvaluesIn.equals("R")){strFinvaluesIn	= "Rs";}
			hshValues.put("strFinvaluesIn", strFinvaluesIn);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","LIABILITIES");
			hshRequestValues=financial.getData(hshRequestValues);
			hshValues.put("hshReqValues",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","ASSETS");
			hshRequestValues=financial.getData(hshRequestValues);
			hshValues.put("hshReqValues1",hshRequestValues);

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","PROFIT AND LOSS ACCOUNT");
			hshRequestValues=financial.getData(hshRequestValues);
			hshRequestValues.put("page","PROFIT AND LOSS ACCOUNT");
			hshValues.put("hshReqValues2",hshRequestValues);
			

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA1");
			hshRequestValues.put("pageType","AN4");
			hshRequestValues.put("printYear","Y");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
			hshValues.put("hshReqValues3",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA2");
			hshRequestValues.put("pageType","AN4");
			hshRequestValues.put("printYear","Y");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","PROFITABILITY/TURN OVER/ OPERATING");
			hshValues.put("hshReqValues4",hshRequestValues);
			
			//finPosition Comments
			rs=DBUtils.executeLAPSQuery("sel_comments^FPComments^"+strAppNo);
			/*
			 * The code is modified because as per the bank's requirement 
			 * the InterLock Fund comments should always appear as the 
			 * last comments in Annexure IV
			 */
			String strInterLockSno="",strInterLockValue="",strInterLockDesc="";
			while(rs.next())
			{
				strInterLockSno=Helper.correctNull((String)rs.getString("com_sno"));
				arrOutCol=new ArrayList();
				rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"141^"+Helper.correctNull((String)rs.getString("COM_SNO")));
				if(rs1.next())
				{
					arrOutCol.add(Helper.correctNull((String)rs1.getString("STAT_DATA_DESC1")));
					arrOutCol.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("COM_COMMENTS"))));
				}
				if(!strInterLockSno.equalsIgnoreCase("1"))
					arrOutRow.add(arrOutCol);
				else
				{
					strInterLockDesc=Helper.correctNull((String)rs1.getString("STAT_DATA_DESC1"));
					strInterLockValue=Helper.correctNull(Helper.CLOBToString(rs.getClob("COM_COMMENTS")));
				}
			}
			arrOutCol=new ArrayList();
			arrOutCol.add(strInterLockDesc);
			arrOutCol.add(strInterLockValue);
			arrOutRow.add(arrOutCol);
			hshValues.put("arrCommentsRow",arrOutRow);
			
			//End
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureIV login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	public HashMap getAnnexureVII(HashMap hshReqValues) 
	{
		ResultSet rs 		= null, rs1	= null,rs2=null;
		HashMap hshValues	= new HashMap();
		String strAppId="",strAppNo="", strVal="";
		
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		ArrayList arrOutRow1	= new ArrayList();
		ArrayList arrFacMjrTCCol	= new ArrayList();
		ArrayList arrFacMjrTCRow	= new ArrayList();		
		String strLoanType="",strQuery1="";
		String strLoanTypeUpper="";
		String strFaccode="",strFacsno="",termType="",strQuery="",strQuery2="";
		try
		{
			String strFlag = correctNull((String)hshReqValues.get("annxFlag"));
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			rs	= DBUtils.executeLAPSQuery("sel_appstatus^"+strAppNo);
			if(rs.next())
			{
				strLoanType=Helper.correctNull((String)rs.getString("app_loantype"));
				strLoanType=strLoanType.toLowerCase();
				strLoanTypeUpper=strLoanType.toUpperCase();
			}
			
			if(rs !=null)
			{
				rs.close();
			}
			
			int strPatentid=0;
			//General - Pre Setup+Applicant 
			rs	= DBUtils.executeLAPSQuery("sel_termandcond^"+strAppNo+"^G^pre"+"^"+strLoanTypeUpper+"^"+"0");
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(correctNull(rs.getString("terms_id")));
				arrOutCol.add(correctNull(rs.getString("terms_termdesc")));
				arrOutCol.add(correctNull(rs.getString("terms_prepost")));
				arrOutCol.add(correctNull(rs.getString("TERMS_PARENTID")));
				strPatentid=Integer.parseInt(Helper.correctInt((String)rs.getString("terms_id")));
				arrOutRow.add(arrOutCol);
				strQuery1 = SQLParser.getSqlQuery("sel_termandcond^"+strAppNo+"^G^pre"+"^"+strLoanTypeUpper+"^"+strPatentid);
				rs1=DBUtils.executeQuery(strQuery1);
				while(rs1.next())
				{
					arrOutCol	= new ArrayList();
					arrOutCol.add(correctNull(rs1.getString("terms_id")));
					arrOutCol.add(correctNull(rs1.getString("terms_termdesc")));
					arrOutCol.add(correctNull(rs1.getString("terms_prepost")));
					arrOutCol.add(correctNull(rs1.getString("TERMS_PARENTID")));
					arrOutRow.add(arrOutCol);
				}
				if(rs1 !=null)
				{
					rs1.close();
				}
				
			}
			hshValues.put("arrPreGenTCRow", arrOutRow);
			if(rs !=null)
			{
				rs.close();
			}
			
			
			//General - Post Setup+Applicant 
			arrOutRow= new ArrayList();
			rs	= DBUtils.executeLAPSQuery("sel_termandcond^"+strAppNo+"^G^post"+"^"+strLoanTypeUpper+"^"+"0");
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(correctNull(rs.getString("terms_id")));
				arrOutCol.add(correctNull(rs.getString("terms_termdesc")));
				arrOutCol.add(correctNull(rs.getString("terms_prepost")));
				arrOutCol.add(correctNull(rs.getString("TERMS_PARENTID")));
				strPatentid=Integer.parseInt(Helper.correctInt((String)rs.getString(3)));
				arrOutRow.add(arrOutCol);
				strQuery1 = SQLParser.getSqlQuery("sel_termandcond^"+strAppNo+"^G^post"+"^"+strLoanTypeUpper+"^"+strPatentid);
				rs1=DBUtils.executeQuery(strQuery1);
				while(rs1.next())
				{
					arrOutCol	= new ArrayList();
					arrOutCol.add(correctNull(rs1.getString("terms_id")));
					arrOutCol.add(correctNull(rs1.getString("terms_termdesc")));
					arrOutCol.add(correctNull(rs1.getString("terms_prepost")));
					arrOutCol.add(correctNull(rs1.getString("TERMS_PARENTID")));
					arrOutRow.add(arrOutCol);
				}
				if(rs1 !=null)
				{
					rs1.close();
				}
				
			}
			hshValues.put("arrPostGenTCRow", arrOutRow);
			if(rs !=null)
			{
				rs.close();
			}
			
			//Facility - Pre Setup+Applicant
			
			arrOutRow	= new ArrayList();
			rs	= DBUtils.executeLAPSQuery("sel_facilitydescandsno^"+strAppNo+"^"+strLoanType);
			while(rs.next())
			{
				arrFacMjrTCCol	= new ArrayList();
				arrFacMjrTCCol.add(Helper.correctNull(rs.getString("facility_sno")));
				arrFacMjrTCCol.add(Helper.correctNull(rs.getString("com_facdesc")));
				arrFacMjrTCCol.add(Helper.correctNull(rs.getString("com_facid")));
				arrFacMjrTCRow.add(arrFacMjrTCCol);
				strFaccode=Helper.correctNull((String)rs.getString("com_facid"));
				if(!strFaccode.equalsIgnoreCase("")){
					termType="P";
					strQuery1 = SQLParser.getSqlQuery("sel_Facterms^"+strFaccode+"^"+strAppNo+"^"+termType+"^"+"S"+"^"+strLoanTypeUpper+"^"+"0^ and terms_facsno='"+Helper.correctNull(rs.getString("facility_sno"))+"'");
					rs1=DBUtils.executeQuery(strQuery1);
					while(rs1.next())
					{
						arrOutCol	= new ArrayList();
						arrOutCol.add(correctNull(rs1.getString("terms_id")));
						arrOutCol.add(correctNull(rs1.getString("terms_termdesc")));
						arrOutCol.add(correctNull(rs1.getString("terms_facid")));
						arrOutCol.add(correctNull(rs1.getString("TERMS_PARENTID")));
						arrOutCol.add(correctNull(rs1.getString("terms_facsno")));
						arrOutRow.add(arrOutCol);
						strPatentid=Integer.parseInt(Helper.correctInt((String)rs1.getString(3)));
						
						strQuery2 = SQLParser.getSqlQuery("sel_Facterms^"+strFaccode+"^"+strAppNo+"^"+termType+"^"+"S"+"^"+strLoanTypeUpper+"^"+strPatentid+"^ and terms_facsno='"+Helper.correctNull(rs.getString("facility_sno"))+"'");
						rs2=DBUtils.executeQuery(strQuery2);
						while(rs2.next())
						{
							arrOutCol	= new ArrayList();
							arrOutCol.add(correctNull(rs2.getString("terms_id")));
							arrOutCol.add(correctNull(rs2.getString("terms_termdesc")));
							arrOutCol.add(correctNull(rs2.getString("terms_facid")));
							arrOutCol.add(correctNull(rs2.getString("TERMS_PARENTID")));
							arrOutCol.add(correctNull(rs2.getString("terms_facsno")));
							arrOutRow.add(arrOutCol);
						}
						if(rs2 != null)
							rs2.close();
					}
				
					if(rs1!=null)rs1.close();
					termType="A";
					strQuery1 = SQLParser.getSqlQuery("sel_Facterms^"+strFaccode+"^"+strAppNo+"^"+termType+"^"+"S"+"^"+strLoanTypeUpper+"^"+"0^ and terms_facsno='"+Helper.correctNull(rs.getString("facility_sno"))+"'");
					rs1=DBUtils.executeQuery(strQuery1);
					while (rs1.next())
					{  
						arrOutCol	= new ArrayList();
						arrOutCol.add(correctNull(rs1.getString("terms_id")));
						arrOutCol.add(correctNull(rs1.getString("terms_termdesc")));
						arrOutCol.add(correctNull(rs1.getString("terms_facid")));
						arrOutCol.add(correctNull(rs1.getString("TERMS_PARENTID")));
						arrOutCol.add(correctNull(rs1.getString("terms_facsno")));
						arrOutRow.add(arrOutCol);
					}
				}
			}
			hshValues.put("arrFacMjrTCRow", arrFacMjrTCRow);
			hshValues.put("arrFacPreTCRow", arrOutRow);
			if(rs !=null)
			{
				rs.close();
			}
			
			//Other - Pre Setup+Applicant 
			arrOutRow	= new ArrayList();
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_Othertermandcond^"+strAppNo+"^O"+"^"+strLoanTypeUpper+"^"+"0");
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(correctNull(rs.getString("terms_id")));
				arrOutCol.add(correctNull(rs.getString("terms_termdesc")));
				arrOutCol.add(correctNull(rs.getString("terms_termtype")));
				arrOutCol.add(correctNull(rs.getString("TERMS_PARENTID")));
				strPatentid=Integer.parseInt(Helper.correctInt((String)rs.getString(3)));
				arrOutRow.add(arrOutCol);
				strQuery1 = SQLParser.getSqlQuery("sel_Othertermandcond^"+strAppNo+"^O"+"^"+strLoanTypeUpper+"^"+strPatentid);
				rs1=DBUtils.executeQuery(strQuery1);
				while(rs1.next())
				{
					arrOutCol	= new ArrayList();
					arrOutCol.add(correctNull(rs1.getString("terms_id")));
					arrOutCol.add(correctNull(rs1.getString("terms_termdesc")));
					arrOutCol.add(correctNull(rs1.getString("terms_termtype")));
					arrOutCol.add(correctNull(rs1.getString("TERMS_PARENTID")));
					arrOutRow.add(arrOutCol);
				}
				if(rs1 !=null)
				{
					rs1.close();
				}
			}
			if(rs!=null)
			{
				rs.close();
			}
			hshValues.put("arrOtherPreTCRow", arrOutRow);
			
			//Instructions to Branch - Pre Setup+Applicant 
			arrOutRow	= new ArrayList();
			rs	= DBUtils.executeLAPSQuery("sel_Othertermandcond^"+strAppNo+"^B"+"^"+strLoanTypeUpper+"^"+"0");
			while(rs.next())
			{
				arrOutCol	= new ArrayList();
				arrOutCol.add(correctNull(rs.getString("terms_id")));
				arrOutCol.add(correctNull(rs.getString("terms_termdesc")));
				arrOutCol.add(correctNull(rs.getString("terms_prepost")));
				arrOutCol.add(correctNull(rs.getString("TERMS_PARENTID")));
				strPatentid=Integer.parseInt(Helper.correctInt((String)rs.getString(3)));
				arrOutRow.add(arrOutCol);
				strQuery1 = SQLParser.getSqlQuery("sel_Othertermandcond^"+strAppNo+"^B"+"^"+strLoanTypeUpper+"^"+strPatentid);
				rs1=DBUtils.executeQuery(strQuery1);
				while(rs1.next())
				{
					arrOutCol	= new ArrayList();
					arrOutCol.add(correctNull(rs1.getString("terms_id")));
					arrOutCol.add(correctNull(rs1.getString("terms_termdesc")));
					arrOutCol.add(correctNull(rs1.getString("terms_prepost")));
					arrOutCol.add(correctNull(rs1.getString("TERMS_PARENTID")));
					arrOutRow.add(arrOutCol);
				}
				if(rs1 !=null)
				{
					rs1.close();
				}
			}
			hshValues.put("arrInsBranchRow", arrOutRow);
			hshValues.put("strFlag",strFlag);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureVII login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	public HashMap getFinancialDataPrint(HashMap hshValues)
	{
		HashMap hshRecord=new HashMap();
		String strAppno=correctNull((String)hshValues.get("appno"));
		String pageval=correctNull((String)hshValues.get("pageval"));
		HashMap hshRequestValues=new HashMap();
		try
		{
			//strAppno
			FinancialBean financial=new FinancialBean();
			hshRequestValues.put("appno",strAppno);
			hshRequestValues.put("pageval",pageval);
			hshRequestValues=financial.getData(hshRequestValues);
			
		}
		catch(Exception e)
		{
			
		}
		return hshRequestValues;
	}
	
	
	
	
	
	

	public HashMap getAnnexureIX_Print(HashMap hshReqValues) 
	{
		ResultSet rs 		= null;
		ResultSet rs1 		= null;
		HashMap hshValues	= new HashMap();
		HashMap hshFinValues= new HashMap();
		int strFinid=0;
		String strAppId="",strAppNo="", strVal="",strFinvaluesIn="";
		
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		String strValuesIn="";
		ArrayList arr1 = new ArrayList();
		int Flow=0;
		
		FinancialBean finobj	= new FinancialBean();
		
		try
		{
			String strFlag = correctNull((String)hshReqValues.get("annxFlag"));
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			String strFormat=correctNull((String)hshReqValues.get("strFormat"));
			
			FinancialBean financial=new FinancialBean();
			HashMap hshRequestValues	= new HashMap();


			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","ASSETS");
			hshRequestValues.put("strFormat",strFormat);
			
			hshRequestValues=financial.getAnnexureIX(hshRequestValues);
			hshRequestValues.put("page","ASSETS");
			hshValues.put("hshReqValues1",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","LIABILITIES");
			hshRequestValues.put("strFormat",strFormat);
	
			hshRequestValues=financial.getAnnexureIX(hshRequestValues);
			hshRequestValues.put("page","LIABILITIES");
			hshValues.put("hshReqValues",hshRequestValues);
			
		
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("strFormat",strFormat);
			hshRequestValues.put("pageval","PROFIT AND LOSS ACCOUNT");
		
			hshRequestValues=financial.getAnnexureIX(hshRequestValues);
			hshRequestValues.put("page","PROFIT AND LOSS ACCOUNT");
			hshValues.put("hshReqValues2",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA1");
			hshRequestValues.put("pageType",strFormat);
			hshRequestValues.put("printYear","Y");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
			hshValues.put("hshReqValues3",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA2");
			hshRequestValues.put("pageType",strFormat);
			hshRequestValues.put("printYear","Y");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","PROFITABILITY/TURN OVER/ OPERATING");
			hshValues.put("hshReqValues4",hshRequestValues);
			
			// Added by SaravanaRaj for Values in
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			hshValues.put("strValuesIn", strValuesIn);
			if(rs!=null){rs.close();}
			//End
			hshValues.put("strFlag", strFlag);
			
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			if(rs.next())
			{
				strFinvaluesIn	= correctNull(rs.getString("fin_valuesarein"));
			}
			else{
				strFinvaluesIn	= "R";
			}
			if(rs!=null){rs.close();}
			
			//Financail Values In
			if(strFinvaluesIn.equals("C")){strFinvaluesIn = "Crore";}
			else if(strFinvaluesIn.equals("L")){strFinvaluesIn	= "Lacs";}
			else if(strFinvaluesIn.equals("R")){strFinvaluesIn	= "Rs";}
			hshValues.put("strFinvaluesIn", strFinvaluesIn);
			
			
			//finPosition Comments
			rs=DBUtils.executeLAPSQuery("sel_comments^FPComments^"+strAppNo);
			String strInterLockSno="",strInterLockValue="",strInterLockDesc="";
			while(rs.next())
			{
				strInterLockSno=Helper.correctNull((String)rs.getString("com_sno"));
				
				if(strInterLockSno.equalsIgnoreCase("1"))
					continue;
				
				rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"141^"+Helper.correctNull((String)rs.getString("COM_SNO")));
				if(rs1.next())
				{
					arrOutCol=new ArrayList();
					arrOutCol.add(Helper.correctNull(rs1.getString("STAT_DATA_DESC1")));
					arrOutCol.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("COM_COMMENTS"))));
					arrOutRow.add(arrOutCol);
					
					hshValues.put("fincommcheck","Y");
				}
			}
			hshValues.put("arrfinComments",arrOutRow);
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureIV login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	
	public HashMap getAnnexure(HashMap hshReqValues) 
	{
		ResultSet rs 		= null;
		ResultSet rs1 		= null;
		HashMap hshValues	= new HashMap();
		HashMap hshFinValues= new HashMap();
		String strAppId="",strAppNo="", strVal="";
		
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		String strValuesIn="";
		
		FinancialBean finobj	= new FinancialBean();
		
		try
		{
			strAppId	= correctNull((String)hshReqValues.get("appid"));
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			FinancialBean financial=new FinancialBean();
			HashMap hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			

			/*rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strAppNo);
			if (rs.next()) 
			{
				strValuesIn= Helper.correctNull(rs.getString("com_amountvalue"));
		   
			}*/
			String strFinvaluesIn="";
			int strFinid=0;
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("fin_valuesarein"));
			}
			else{
				strValuesIn="R";
			}
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			hshValues.put("strValuesIn", strValuesIn);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","LIABILITIES");
			hshRequestValues.put("printtype","Y");
			hshRequestValues=financial.getData(hshRequestValues);
			hshValues.put("hshReqValues",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","ASSETS");
			hshRequestValues.put("printtype","Y");
			hshRequestValues=financial.getData(hshRequestValues);
			hshValues.put("hshReqValues1",hshRequestValues);

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","PROFIT AND LOSS ACCOUNT");
			hshRequestValues.put("printtype","Y");
			hshRequestValues=financial.getData(hshRequestValues);
			hshRequestValues.put("page","PROFIT AND LOSS ACCOUNT");
			hshValues.put("hshReqValues2",hshRequestValues);
			

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA1");
			hshRequestValues.put("pageType","AN4");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
			hshValues.put("hshReqValues3",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA2");
			hshRequestValues.put("pageType","AN4");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","PROFITABILITY/TURN OVER/ OPERATING");
			hshValues.put("hshReqValues4",hshRequestValues);
			
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getAnnexureIV login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	
	public HashMap getMCLRAnnexure(HashMap hshReqValues) 
	{
		
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);
		
		
		ResultSet rs 		= null;
		ResultSet rs1 		= null,rs2=null;
		HashMap hshRecord	= new HashMap();
		String strFacsno="",strAppno="", strVal="";
		
		ArrayList arrRow	= new ArrayList();
		ArrayList arrCol	= new ArrayList();
		String strQuery="";
		String strArr[]=null;
		String strTemp="";
		String strFacAmount="0",strFacTenor="0",strFacCode="0";
		String strSpread1="1",strSpread2="2";
		
		
		try
		{
			strAppno	= correctNull((String)hshReqValues.get("appno"));
			int intFacCount=0;
			rs1=DBUtils.executeLAPSQuery("sel_facilitycodedesc_mclr^"+strAppno);
			while(rs1.next())
			{
				hshRecord=new HashMap();
				strFacsno=Helper.correctNull(rs1.getString("facility_sno"));
				hshRecord.put("strFacDesc", Helper.correctNull(rs1.getString("facility_displaydesc")));
 				hshRecord.put("strFacSno", strFacsno);
 				
 				strQuery=SQLParser.getSqlQuery("sel_com_facility_intfreq^"+strFacsno+"^"+strAppno);
 				rs=DBUtils.executeQuery(strQuery);
 				if(rs.next())
 				{
 					hshRecord.put("strIntDefinition", Helper.correctNull(rs.getString("com_facintdef")));
 					
 					strFacAmount=Helper.correctDouble(rs.getString("facility_sancamt"));
 					strFacTenor=Helper.correctNull(rs.getString("facility_months"));
 					strFacCode=Helper.correctNull(rs.getString("facility_code"));
 				}
 				if(rs!=null)
 					rs.close();
 				strQuery=SQLParser.getSqlQuery("sel_facility_mclrspread^"+strFacsno+"^"+strAppno);
 				rs=DBUtils.executeQuery(strQuery);
 				if(rs.next())
 				{
 					hshRecord.put("strCRKVal", jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_crp_total")))));
 					hshRecord.put("strBSPVal", jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_bsp_total")))));
 					
 				}
 				if(rs!=null)
 					rs.close();
 				
				intFacCount++;
 				double dblTotal=0.0;
 				strQuery=SQLParser.getSqlQuery("sel_facility_mclrspread^"+strFacsno+"^"+strAppno);
 				rs=DBUtils.executeQuery(strQuery);
 				if(rs.next())
 				{
 					strTemp=Helper.correctNull(rs.getString("facility_mclrtype"));
 					if(!strTemp.equalsIgnoreCase(""))
 					{
 						strArr=strTemp.split("@");
 						if(strArr.length>1)
 						{
 							if(rs2!=null)
 								rs2.close();
 							rs2=DBUtils.executeLAPSQuery("selcbsiddatadesc^34^"+strArr[0]);
 							if(rs2.next())
 							{
 								hshRecord.put("mclr_type",Helper.correctNull(rs2.getString("cbs_static_data_desc")));
 								hshRecord.put("mclr_type_code",Helper.correctNull(rs2.getString("cbs_static_data_passing_code")));
 								strSpread1=Helper.correctNull(rs2.getString("CBS_STATIC_SANC_REFNO"));
 								strSpread2=Helper.correctNull(rs2.getString("CBS_STATIC_CGTMSE"));
 							}
 						}
 					}
 					hshRecord.put("mclr_spread",jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_spread")))));
 					hshRecord.put("mclr_crp_total",jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_crp_total")))));
 					hshRecord.put("mclr_bsp_total",jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_bsp_total")))));
 					hshRecord.put("MCLR_MSME",jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("MCLR_MSME")))));
 					
 					dblTotal=Double.parseDouble(Helper.correctDouble(rs.getString("mclr_spread")))+
 					Double.parseDouble(Helper.correctDouble(rs.getString("mclr_crp_total")))+
 					Double.parseDouble(Helper.correctDouble(rs.getString("mclr_bsp_total")))+
 					Double.parseDouble(Helper.correctDouble(rs.getString("MCLR_MSME")));
 					
 					hshRecord.put("dblTotalIntRate",jtn.format(dblTotal));
 				}
 				
 				if(rs!=null)
 					rs.close();
 				arrRow=new ArrayList();
 				arrCol=new ArrayList();
 				strQuery=SQLParser.getSqlQuery("sel_facilitymclr^"+strSpread1+"^"+strFacsno+"^"+strAppno);
 				rs=DBUtils.executeQuery(strQuery);
 				while(rs.next())
 				{
 					arrCol=new ArrayList();
 					arrCol.add(Helper.correctNull(rs.getString("mclr_caption")));
 					if(!(Helper.correctNull(rs.getString("mclr_option")).equalsIgnoreCase("-") || Helper.correctNull(rs.getString("mclr_option")).equalsIgnoreCase("")))
 					{
 						strTemp=Helper.correctNull(rs.getString("mclr_option"));
 						strArr=strTemp.split("-");
 						
 						if(strArr.length>1)
 						{
 							if(rs2!=null)
 								rs2.close();
 							rs2=DBUtils.executeLAPSQuery("sel_mclrspreadmaster^"+strArr[0]);
 							if(rs2.next())
 							{
 								arrCol.add(Helper.correctNull(rs2.getString("mclr_desc")));
 							}
 							else
 							{
 								arrCol.add("");
 							}
 						}
 						else
 						{
 							arrCol.add("");
 						}
 					}
 					else
 					{
 						arrCol.add(" ");
 					}
 						
 					arrCol.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_spreadval")))));
 					arrRow.add(arrCol);
 				}
 				if(arrRow!=null && arrRow.size()>0)
 					hshRecord.put("arrRowCRP",arrRow);

 				arrRow=new ArrayList();
 				arrCol=new ArrayList();
 				if(rs!=null)
 					rs.close();
 				strQuery=SQLParser.getSqlQuery("sel_facilitymclr^"+strSpread2+"^"+strFacsno+"^"+strAppno);
 				rs=DBUtils.executeQuery(strQuery);
 				while(rs.next())
 				{
 					arrCol=new ArrayList();
 					arrCol.add(Helper.correctNull(rs.getString("mclr_caption")));
 					if(!(Helper.correctNull(rs.getString("mclr_option")).equalsIgnoreCase("-") || Helper.correctNull(rs.getString("mclr_option")).equalsIgnoreCase("")))
 					{
 						strTemp=Helper.correctNull(rs.getString("mclr_option"));
 						strArr=strTemp.split("-");
 						
 						if(strArr.length>1)
 						{
 							if(rs2!=null)
 								rs2.close();
 							rs2=DBUtils.executeLAPSQuery("sel_mclrspreadmaster^"+strArr[0]);
 							if(rs2.next())
 							{
 								arrCol.add(Helper.correctNull(rs2.getString("mclr_desc")));
 							}
 							else
 							{
 								arrCol.add("");
 							}
 						}
 						else
 						{
 							arrCol.add("");
 						}
 					}
 					else
 					{
 						arrCol.add(" ");
 					}
 					arrCol.add(jtn.format(Double.parseDouble(Helper.correctDouble(rs.getString("mclr_spreadval")))));
 					arrRow.add(arrCol);
 				}
 				if(arrRow!=null && arrRow.size()>0)
 					hshRecord.put("arrRowBSP",arrRow);
 				

 				hshReqValues.put("hshResult"+intFacCount, hshRecord);
			}
			
			hshReqValues.put("strFacCount",String.valueOf(intFacCount));
			
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in getMCLRAnnexure  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshReqValues; 
	}
public HashMap getDocumentDetails(HashMap hshValues)
	{
		HashMap hshRecord=new HashMap();	
		ResultSet rs=null,rs1=null;
		String strAppno="",strQuery="",docpagetype="";
		ArrayList arrCol=new ArrayList();
		ArrayList arrAppRow=new ArrayList();
		ArrayList arrBankRow=new ArrayList();
		ArrayList arrOtherRow=new ArrayList();
		
		JSONObject objOuter = new JSONObject();
		JSONObject data = new JSONObject();
		JSONObject objTable = new JSONObject();
		
		String line = "", strGeneratedFlag = "", strCustId = "", strActiontype = ""
				, strInputJSONRequest = "", strRes = "", strCustDesc = "", strEntity = ""
				, strApplicationNo = "", strFileName = ""
				, strUserId = "", strCreatedDate = "", strSNo = "", strDelFlag = "", strDelUseId =""
				, strDelDate = "", strDocFacslNo ="",strdigiprop="",strDmsRefNo="",strcredentials="",strstatus="";

		HashMap hshQueryValues = new HashMap();
		HashMap hshVal = new HashMap();
		ArrayList arrValue = null;
		ArrayList arrValues = null;
		HashMap hshValue = new HashMap();
		HashMap hshValue1 = new HashMap();
		HashMap hshQuery = new HashMap();
		
		try
		{
			
			strApplicationNo = Helper.correctNull((String)hshValues.get("appno"));
			String strOrgLevel=Helper.correctNull((String)hshValues.get("strOrgLevel"));
			strAppno=Helper.correctNull((String)hshValues.get("appno"));
			docpagetype=Helper.correctNull((String)hshValues.get("docpagetype"));
						
			if(docpagetype.equals("post"))
			{
				strQuery=SQLParser.getSqlQuery("sel_documentdetails_postsanc^"+strAppno+"^"+strAppno+"^post^"+strAppno+"^post");
			}
			else
			{
				strQuery=SQLParser.getSqlQuery("sel_documentdetails^"+strAppno+"^"+strAppno+"^pre^"+strAppno+"^pre");
			}
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				arrCol=new ArrayList();
				arrCol.add(Helper.correctNull(rs.getString("doc_jspname")));//0
				arrCol.add(Helper.correctNull(rs.getString("doc_docname")));//1
				arrCol.add(Helper.correctNull(rs.getString("doc_id")));//2
				arrCol.add(Helper.correctNull(rs.getString("APDOC_FAC_SLNO")));//3
				if(Helper.correctNull(rs.getString("doc_doctype")).equalsIgnoreCase("A"))
				{
					if(Helper.correctNull(rs.getString("DOC_DOCSUBTYPE")).equalsIgnoreCase("post"))
					{
						if(rs1!=null)
							rs1.close();
						rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^A^"+Helper.correctNull(rs.getString("doc_jspname")));
						if(rs1.next())
							arrCol.add(Helper.correctNull(rs1.getString("cnt")));//4
						else
							arrCol.add("0");
					}
					arrAppRow.add(arrCol);
				}
				else if(Helper.correctNull(rs.getString("doc_doctype")).equalsIgnoreCase("I"))
					arrBankRow.add(arrCol);
				else if(Helper.correctNull(rs.getString("doc_doctype")).equalsIgnoreCase("O"))
				{
					if(rs1!=null)
						rs1.close();
					rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^O^"+Helper.correctNull(rs.getString("doc_jspname")));
					if(rs1.next())
						arrCol.add(Helper.correctNull(rs1.getString("cnt")));//4
					else
						arrCol.add("0");
					arrOtherRow.add(arrCol);
				}
			}
			hshRecord.put("arrAppRow", arrAppRow);
			hshRecord.put("arrBankRow", arrBankRow);
			hshRecord.put("arrOtherRow", arrOtherRow);
			
			if(rs!=null)
				rs.close();
			if(Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("CORP") || Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("AGR"))
			{
				strQuery=SQLParser.getSqlQuery("sel_applicantcbsid_corp^"+strAppno);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					hshRecord.put("strCBSID", Helper.correctNull(rs.getString("perapp_cbsid")));
				}
				
			}
			else
			{
				strQuery=SQLParser.getSqlQuery("sel_applicantcbsid_retail^a^"+strAppno);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					hshRecord.put("strCBSID", Helper.correctNull(rs.getString("perapp_cbsid")));
				}
			}
			if(rs!=null)
			{
				rs.close();
			}	
			strQuery=SQLParser.getSqlQuery("get_Appstatus^"+strAppno);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				hshRecord.put("app_orgcode", Helper.correctNull(rs.getString("app_orgcode")));
				hshRecord.put("strAppType",Helper.correctNull(rs.getString("app_renew_flag")));
				hshRecord.put("strMigrationflag",Helper.correctNull(rs.getString("app_migration")));
			}
			hshRecord.put("appholder", Helper.correctNull((String)hshValues.get("appholder")));
			hshRecord.put("strUserId", Helper.correctNull((String)hshValues.get("strUserId")));
			hshRecord.put("strOrgCode", Helper.correctNull((String)hshValues.get("strOrgCode")));

			if(rs!=null){rs.close();}
			String inwardBranchCity="";
			ArrayList arrdisbBranch=new ArrayList();
			rs=DBUtils.executeLAPSQuery("selworkflow^"+strAppno);		 
			if(rs.next())
			{
				hshRecord.put("inward_orgcode", Helper.correctNull(rs.getString("org_code")));
			}
			if(rs!=null){rs.close();}
			rs=DBUtils.executeLAPSQuery("sel_cbsloandisbbranch^"+strAppno);		 
			if(rs.next())
			{
				arrdisbBranch.add(Helper.correctNull(rs.getString("org_code")));
			}
			
			String app_orgcode=Helper.correctNull((String)hshRecord.get("app_orgcode"));
			String inward_orgcode=Helper.correctNull((String)hshRecord.get("inward_orgcode"));
			String appholder=Helper.correctNull((String)hshValues.get("appholder"));
			String UserId=Helper.correctNull((String)hshValues.get("strUserId"));
			String OrgCode=Helper.correctNull((String)hshValues.get("strOrgCode"));
			
			int docAttCount=0;
			if(inward_orgcode.equals(OrgCode))
			{
				docAttCount++;
			}
			else if(arrdisbBranch.contains(OrgCode))
			{
				docAttCount++;
			}
			else if(appholder.equals(UserId))
			{
				docAttCount++;
			}
			else if(strOrgLevel.equalsIgnoreCase("D") && (inward_orgcode.substring(0, 9)).equals(OrgCode.substring(0, 9)))
			{
				docAttCount++;
			}
			else if(strOrgLevel.equalsIgnoreCase("R") && (inward_orgcode.substring(0, 6)).equals(OrgCode.substring(0, 6)))
			{
				docAttCount++;
			}
			else if(strOrgLevel.equalsIgnoreCase("C"))
			{
				docAttCount++;
			}
			
			hshRecord.put("docAttCount", Integer.toString(docAttCount));
			
			String StrIBMUN = ApplicationParams.getStrIbmUN();
//              String strurlibmUN= new BASE64Encoder().encode(StrIBMUN.getBytes());
            hshRecord.put("encubmurlun", StrIBMUN);
            
			String StrIBMPass = ApplicationParams.getStrlogintoibmPass();
//				String strurlibm= new BASE64Encoder().encode(StrIBMPass.getBytes());
            hshRecord.put("encubmurl", StrIBMPass);

		}
		catch(Exception e)
		{
			throw new EJBException("Exception in getDocumentDetails ========"+e.getMessage());
		}
			
		return hshRecord;
	}
	
//public HashMap getDocumentDetails(HashMap hshValues)
//{
//
//    HashMap hshRecord=new HashMap();    
//    ResultSet rs=null,rs1=null;
//    String strAppno="",strQuery="",docpagetype="";
//    ArrayList arrCol=new ArrayList();
//    ArrayList arrAppRow=new ArrayList();
//    ArrayList arrBankRow=new ArrayList();
//    ArrayList arrOtherRow=new ArrayList();
//    
//    JSONObject objOuter = new JSONObject();
//    JSONObject data = new JSONObject();
//    JSONObject objTable = new JSONObject();
//    
//    String line = "", strGeneratedFlag = "", strCustId = "", strActiontype = ""
//            , strInputJSONRequest = "", strRes = "", strCustDesc = "", strEntity = ""
//            , strApplicationNo = "", strFileName = ""
//            , strUserId = "", strCreatedDate = "", strSNo = "", strDelFlag = "", strDelUseId =""
//            , strDelDate = "", strDocFacslNo ="",strdigiprop="",strDmsRefNo="",strcredentials="",strstatus="";
//
//    HashMap hshQueryValues = new HashMap();
//    HashMap hshVal = new HashMap();
//    ArrayList arrValue = null;
//    ArrayList arrValues = null;
//    HashMap hshValue = new HashMap();
//    HashMap hshValue1 = new HashMap();
//    HashMap hshQuery = new HashMap();
//    
//    try
//    {
//        
//        strApplicationNo = Helper.correctNull((String)hshValues.get("appno"));
//        //-------------------------------------------------------------//
//        
//        hshQueryValues = new HashMap();
//		hshQuery=new HashMap();
//		arrValues = new ArrayList();
//		arrValues.add("04230001117");
//		arrValues.add("Y");
//		arrValues.add("1shiva");
//		arrValues.add("12121");
//		arrValues.add("K10213");
//		arrValues.add("035233913096");
//		hshQuery.put("arrValues", arrValues);
//		hshQuery.put("strQueryId", "ins_appdocuments_proposalapi");
//		hshQueryValues.put("1",hshQuery);
//		hshQueryValues.put("size","1");
//		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
//		
//		
//		
//		
//		hshQueryValues = new HashMap();
//		hshQuery = new HashMap();
//		arrValues=new ArrayList();
//		
//		hshQuery.put("strQueryId","ins_app_test");
//		
//		arrValues.add(strApplicationNo);
//		arrValues.add("1");
//		arrValues.add("");
//		arrValues.add("1");
//		
//		hshQuery.put("arrValues",arrValues);
//		hshQueryValues.put("size", "1");
//		hshQueryValues.put("1",hshQuery);
//		EJBInvoker.executeStateLess("dataaccess", hshQueryValues, "updateData");
//		
//		
//		//-----------------------------------------------------//
//        
//        
//        
//        
//
//        if(rs!=null)
//            rs.close();
//        
//        strQuery=SQLParser.getSqlQuery("sel_appstatus^"+strApplicationNo);
//        rs=DBUtils.executeQuery(strQuery);
//        if(rs.next())
//        {
//            strdigiprop=Helper.correctNull((String)rs.getString("APP_LOANSUBTYPE_DIGI"));
//            strstatus=Helper.correctNull((String)rs.getString("app_status"));
//
//        }
//        if(strdigiprop.equalsIgnoreCase("") && strstatus.equalsIgnoreCase("op"))
//        {
//            try{
//        //---------General STARTS--------------------//
//            strQuery=SQLParser.getSqlQuery("sel_leadnumber_appno^"+strApplicationNo);
//            rs=DBUtils.executeQuery(strQuery);
//            if(rs.next())
//            {
//                strDmsRefNo=Helper.correctNull((String)rs.getString("inward_no"));
//            }
//
//            String applicantIn="{" +
//            "\"LARNumber\":\""+strDmsRefNo+""+"\"}";
//            
//            System.out.print(applicantIn);
//            log.info("################@@@@@@@@@@@@@ GENERAL LOAN DOCUMENT REQUEST @@@@@@@@@@@@@################ "+applicantIn);
//            
//            URL Docdms_url = new URL(ApplicationParams.getStrgenDocupdurl());
//            log.info("GENERAL LOAN DOCUMENT URL=========== "+Docdms_url);
//            HttpURLConnection Docdms_urlcon = (HttpURLConnection) Docdms_url.openConnection();
//            Docdms_urlcon.setRequestProperty("User-Agent", "");
//            Docdms_urlcon.setDoInput(true);
//            Docdms_urlcon.setDoOutput(true);
//            Docdms_urlcon.setRequestMethod("POST");
//            Docdms_urlcon.setRequestProperty("Content-Type","application/json;charset=UTF-8");
//            
//            strcredentials=ApplicationParams.getStrgenDocupdun()+":"+ApplicationParams.getStrgenDocupdpd();
//            String strcredentialss= new BASE64Encoder().encode(strcredentials.getBytes());
//            Docdms_urlcon.setRequestProperty("Authorization","Basic" +strcredentialss);
//            log.info("GENERAL LOAN DOCUMENT CREDENTIALS=========== "+strcredentialss);
//
//            OutputStream Docdms_outputStream = Docdms_urlcon.getOutputStream();
//            OutputStreamWriter Docdms_osw = new OutputStreamWriter(Docdms_outputStream, "UTF8");
//            
//            BufferedWriter Docdms_bWriter = new BufferedWriter(Docdms_osw);
//            Docdms_bWriter.write(applicantIn);
//            Docdms_bWriter.close();
//    
//    
//                        
//                        InputStream Docdms_inputStream = Docdms_urlcon.getInputStream();
//                        InputStreamReader Docdms_isreader = new InputStreamReader(Docdms_inputStream,"UTF-8");
//                        
//                        BufferedReader Docdms_rd = new BufferedReader(Docdms_isreader);
//                
//                        if (Docdms_rd != null) {
//                            StringBuffer Docdms_result = new StringBuffer();
//                            while ((line = Docdms_rd.readLine()) != null) {
//                                Docdms_result.append(line);
//                            }
//                        log.info("################@@@@@@@@@@@@@ Response document list api Response @@@@@@@@@@@@@################"
//                                    + Docdms_result.toString());
//                
//                        
//                        if(!Docdms_result.toString().equalsIgnoreCase("")){
//                            JSONObject jsonReadTableResponseObj     =     new JSONObject(Docdms_result.toString());
//                            JSONArray jsonArray3 = jsonReadTableResponseObj.getJSONArray("output");
//
//                            int doclistlength=jsonArray3.length();
//                            if(doclistlength>0)
//                            {
//                                ArrayList arrtemp=new ArrayList();
//                                int sno=0;
//                                for(int i=0;i<doclistlength;i++)
//                                {
//                                    
//                                    JSONObject jsonObjectForValues = jsonArray3.getJSONObject(i);
//                                    
//                                    String strResDocCode = jsonObjectForValues.getString("DocCode");
//                                    String strUrl = jsonObjectForValues.getString("Docurl");
//                                    String generatedUrl = jsonObjectForValues.getString("Docurl");
//                                    String strDocType= "";
//
//                                    String strFile = jsonObjectForValues.getString("Docname");
//                                    
//                                    
//                                    String strdoctype="",strdocid="";
//                                    rs = DBUtils.executeLAPSQuery("sel_documentdetails_doccode^" + strResDocCode);
//                                    if(rs.next())
//                                    {
//                                        strdoctype=Helper.correctNull((String)rs.getString("doc_doctype"));
//                                        strdocid=Helper.correctNull((String)rs.getString("Document_ID"));
//                                    }
//                                    
//                                    //delete doc attachmennts
//                                    hshQuery=new HashMap();
//                                    arrValues = new ArrayList();
//                                    arrValues.add(strApplicationNo);
//                                    hshQuery.put("arrValues", arrValues);
//                                    hshQuery.put("strQueryId", "del_appdoc_genappl");
//                                    hshQueryValues.put("1",hshQuery);
//                                    
//                                    //delete external appplication document
//                                    hshQuery=new HashMap();
//                                    arrValues = new ArrayList();
//                                    arrValues.add(strApplicationNo);
//                                    hshQuery.put("arrValues", arrValues);
//                                    hshQuery.put("strQueryId", "del_docattach_genappl");
//                                    hshQueryValues.put("2",hshQuery);
//                                    hshQueryValues.put("size","2");
//                                    EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
//                                    
//                                    if(!arrtemp.contains(strResDocCode))
//                                    {
//                                        hshQuery=new HashMap();
//                                        arrValues = new ArrayList();
//                                        arrValues.add(strApplicationNo);
//                                        arrValues.add("Y");
//                                        arrValues.add(strdoctype);
//                                        arrValues.add(strdocid);
//                                        arrValues.add(strUserId);
//                                        arrValues.add(strDmsRefNo);
//                                        hshQuery.put("arrValues", arrValues);
//                                        hshQuery.put("strQueryId", "ins_appdocuments_proposalapi");
//                                        hshQueryValues.put("1",hshQuery);
//                                        hshQueryValues.put("size","1");
//                                        EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
//
//                                        arrtemp.add(strResDocCode);
//                                    }
//                            
//                                    SimpleDateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy"); 
//                                    Calendar calendar = Calendar.getInstance();
//                                    calendar.add(Calendar.DATE,90);
//                                    String strDay = dateFormat.format(calendar.getTime());
//                                    
//                                    sno++;
//                                    
//                                    hshQuery=new HashMap();
//                                    arrValues = new ArrayList();
//                                    arrValues.add(strApplicationNo);
//                                    arrValues.add(strdoctype);
//                                    arrValues.add(strResDocCode);
//                                    arrValues.add(strFile);//
//                                    arrValues.add(strUserId);
//                                    arrValues.add(String.valueOf(sno));
//                                    arrValues.add(""); //ref no
//                                    arrValues.add(strDay);
//                                    arrValues.add(strUrl);//
//                                    arrValues.add(""); //doc size
//                                    arrValues.add(generatedUrl);//
//                                    arrValues.add(strDmsRefNo);
//                                    arrValues.add(strDocType);
//                                    hshQuery.put("arrValues", arrValues);
//                                    hshQuery.put("strQueryId", "ins_appdocattachments_proposalapi");
//                                    hshQueryValues.put("1",hshQuery);
//                                    hshQueryValues.put("size","1");
//                                    EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
//                                }
//                            }
//                            
//                        }
//                        }
//            
//        
//        //---------General Ends--------------------//
//            }
//            catch(Exception e)
//            {
//                throw new EJBException("Exception in DMS API getDocumentDetails ========"+e.getMessage());
//            }
//        }
//        
//        
//        String strOrgLevel=Helper.correctNull((String)hshValues.get("strOrgLevel"));
//        strAppno=Helper.correctNull((String)hshValues.get("appno"));
//        docpagetype=Helper.correctNull((String)hshValues.get("docpagetype"));
//        if(docpagetype.equals("post"))
//        {
//            strQuery=SQLParser.getSqlQuery("sel_documentdetails_postsanc^"+strAppno+"^"+strAppno+"^post^"+strAppno+"^post");
//        }
//        else
//        {
//            strQuery=SQLParser.getSqlQuery("sel_documentdetails^"+strAppno+"^"+strAppno+"^pre^"+strAppno+"^pre");
//        }
//        rs=DBUtils.executeQuery(strQuery);
//        while(rs.next())
//        {
//            arrCol=new ArrayList();
//            arrCol.add(Helper.correctNull(rs.getString("doc_jspname")));//0
//            arrCol.add(Helper.correctNull(rs.getString("doc_docname")));//1
//            arrCol.add(Helper.correctNull(rs.getString("doc_id")));//2
//            arrCol.add(Helper.correctNull(rs.getString("APDOC_FAC_SLNO")));//3
//            if(Helper.correctNull(rs.getString("doc_doctype")).equalsIgnoreCase("A"))
//            {
//                if(Helper.correctNull(rs.getString("DOC_DOCSUBTYPE")).equalsIgnoreCase("post"))
//                {
//                    if(rs1!=null)
//                        rs1.close();
//                    rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^A^"+Helper.correctNull(rs.getString("doc_jspname")));
//                    if(rs1.next())
//                        arrCol.add(Helper.correctNull(rs1.getString("cnt")));//4
//                    else
//                        arrCol.add("0");
//                }
//                arrAppRow.add(arrCol);
//            }
//            else if(Helper.correctNull(rs.getString("doc_doctype")).equalsIgnoreCase("I"))
//                arrBankRow.add(arrCol);
//            else if(Helper.correctNull(rs.getString("doc_doctype")).equalsIgnoreCase("O"))
//            {
//                if(rs1!=null)
//                    rs1.close();
//                rs1=DBUtils.executeLAPSQuery("sel_docattachcnt^"+strAppno+"^O^"+Helper.correctNull(rs.getString("doc_jspname")));
//                if(rs1.next())
//                    arrCol.add(Helper.correctNull(rs1.getString("cnt")));//4
//                else
//                    arrCol.add("0");
//                arrOtherRow.add(arrCol);
//            }
//        }
//        hshRecord.put("arrAppRow", arrAppRow);
//        hshRecord.put("arrBankRow", arrBankRow);
//        hshRecord.put("arrOtherRow", arrOtherRow);
//        
//        if(rs!=null)
//            rs.close();
//        if(Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("CORP") || Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("AGR"))
//        {
//            strQuery=SQLParser.getSqlQuery("sel_applicantcbsid_corp^"+strAppno);
//            rs=DBUtils.executeQuery(strQuery);
//            if(rs.next())
//            {
//                hshRecord.put("strCBSID", Helper.correctNull(rs.getString("perapp_cbsid")));
//            }
//            
//        }
//        else
//        {
//            strQuery=SQLParser.getSqlQuery("sel_applicantcbsid_retail^a^"+strAppno);
//            rs=DBUtils.executeQuery(strQuery);
//            if(rs.next())
//            {
//                hshRecord.put("strCBSID", Helper.correctNull(rs.getString("perapp_cbsid")));
//            }
//        }
//        if(rs!=null)
//        {
//            rs.close();
//        }    
//        strQuery=SQLParser.getSqlQuery("get_Appstatus^"+strAppno);
//        rs=DBUtils.executeQuery(strQuery);
//        if(rs.next())
//        {
//            hshRecord.put("app_orgcode", Helper.correctNull(rs.getString("app_orgcode")));
//            hshRecord.put("strAppType",Helper.correctNull(rs.getString("app_renew_flag")));
//            hshRecord.put("strMigrationflag",Helper.correctNull(rs.getString("app_migration")));
//        }
//        hshRecord.put("appholder", Helper.correctNull((String)hshValues.get("appholder")));
//        hshRecord.put("strUserId", Helper.correctNull((String)hshValues.get("strUserId")));
//        hshRecord.put("strOrgCode", Helper.correctNull((String)hshValues.get("strOrgCode")));
//
//        if(rs!=null){rs.close();}
//        String inwardBranchCity="";
//        ArrayList arrdisbBranch=new ArrayList();
//        rs=DBUtils.executeLAPSQuery("selworkflow^"+strAppno);         
//        if(rs.next())
//        {
//            hshRecord.put("inward_orgcode", Helper.correctNull(rs.getString("org_code")));
//        }
//        if(rs!=null){rs.close();}
//        rs=DBUtils.executeLAPSQuery("sel_cbsloandisbbranch^"+strAppno);         
//        if(rs.next())
//        {
//            arrdisbBranch.add(Helper.correctNull(rs.getString("org_code")));
//        }
//        
//        String app_orgcode=Helper.correctNull((String)hshRecord.get("app_orgcode"));
//        String inward_orgcode=Helper.correctNull((String)hshRecord.get("inward_orgcode"));
//        String appholder=Helper.correctNull((String)hshValues.get("appholder"));
//        String UserId=Helper.correctNull((String)hshValues.get("strUserId"));
//        String OrgCode=Helper.correctNull((String)hshValues.get("strOrgCode"));
//        
//        int docAttCount=0;
//        if(inward_orgcode.equals(OrgCode))
//        {
//            docAttCount++;
//        }
//        else if(arrdisbBranch.contains(OrgCode))
//        {
//            docAttCount++;
//        }
//        else if(appholder.equals(UserId))
//        {
//            docAttCount++;
//        }
//        else if(strOrgLevel.equalsIgnoreCase("D") && (inward_orgcode.substring(0, 9)).equals(OrgCode.substring(0, 9)))
//        {
//            docAttCount++;
//        }
//        else if(strOrgLevel.equalsIgnoreCase("R") && (inward_orgcode.substring(0, 6)).equals(OrgCode.substring(0, 6)))
//        {
//            docAttCount++;
//        }
//        else if(strOrgLevel.equalsIgnoreCase("C"))
//        {
//            docAttCount++;
//        }
//        
//        hshRecord.put("docAttCount", Integer.toString(docAttCount));
//        
//        String StrIBMUN = ApplicationParams.getStrIbmUN();
////        String strurlibmUN= new BASE64Encoder().encode(StrIBMUN.getBytes());
//        hshRecord.put("encubmurlun", StrIBMUN);
//        
//        String StrIBMPass = ApplicationParams.getStrlogintoibmPass();
////        String strurlibm= new BASE64Encoder().encode(StrIBMPass.getBytes());
//        hshRecord.put("encubmurl", StrIBMPass);
//        
//    
//    }
//    catch(Exception e)
//    {
//        throw new EJBException("Exception in getDocumentDetails ========"+e.getMessage());
//    }
//    finally
//    {
//        try
//            {
//            if(rs!=null)
//                {
//                rs.close();
//                }                
//            }
//        catch(Exception e1)
//            {
//            throw new EJBException(e1.getMessage());
//            }
//    }
//    return hshRecord;
//}
			
	public HashMap getUploadedDocDetails(HashMap hshValues)
	{
		HashMap hshRecord = new HashMap();
		ResultSet rs=null,rs1=null;
		String strQuery="";
		
		ArrayList arrCol = new ArrayList();
		ArrayList arrRow = new ArrayList();
		int intSize = 0;	
		HashMap hshQueryValues=new HashMap();
		HashMap hshQuery=new HashMap();
		ArrayList arrValues=new ArrayList();
		try
		{
			String strAppno      = correctNull((String)hshValues.get("appno"));				
			String strDocType    = correctNull((String)hshValues.get("DocType"));
			String strDocCode    = correctNull((String)hshValues.get("DocCode"));
			String strHitPortion = correctNull((String)hshValues.get("hitportion"));
			String strCBSID = correctNull((String)hshValues.get("strCBSID"));
			String strfacslno = Helper.correctInt((String)hshValues.get("strfacslno"));
			String strModuleType = correctNull((String)hshValues.get("sessionModuleType"));
			String strappstatus=correctNull((String)hshValues.get("strappstatus"));
			if(strModuleType.equals(""))
			{
				  strModuleType = correctNull((String)hshValues.get("cattype"));
			}
			String str_FileDirectory ="";
			
			if(strHitPortion.equalsIgnoreCase("D")){
				
				String docattach_FlagDate="",strOrgSCode="",strDocattachDate="";
				rs=DBUtils.executeLAPSQuery("selotherparam_ratexpos^121");
				if(rs.next())
				{
					docattach_FlagDate = Helper.correctDate((String)rs.getString("LOAN_PARAMVAL"));;				
				}
				
				if(rs!=null)
						rs.close();
				rs=DBUtils.executeLAPSQuery("sel_apporg_scode^"+strAppno);
				if(rs.next())
				{
					strOrgSCode = Helper.correctNull((String)rs.getString("ORG_SCODE"));;	
				}		
				
				if(rs!=null)
					rs.close();
				rs=DBUtils.executeLAPSQuery("sel_msmedetails^"+strAppno);
				if(rs.next())
				{
					strOrgSCode = Helper.correctNull((String)rs.getString("MSME_ORGSCODE"));
					strCBSID=Helper.correctNull((String)rs.getString("MSME_CBSID"));
				}
				String strAppAttachments = correctNull((String)hshValues.get("hidNewDocCodeList"));							
				String strFileName = correctNull((String)hshValues.get("hidFileName"));							
				if(strAppAttachments.contains("@")){
					String[] strAppRej = strAppAttachments.split("@");					
					for(int i=0;i<strAppRej.length;i++){
						intSize ++;
						hshQuery=new HashMap();
						arrValues=new ArrayList();
						arrValues.add(Helper.correctNull((String)hshValues.get("strUserId")));
						arrValues.add(strAppno);
						arrValues.add(strDocType);
						arrValues.add(strDocCode);
						arrValues.add(strAppRej[i]);								
						if((strModuleType.equals("CORP") || strModuleType.equals("AGR"))&&strDocType.equalsIgnoreCase("I"))
						{
							arrValues.add(strfacslno);
							hshQuery.put("strQueryId","delete_perapp_docattach_fac");
						}
						else
						{
							hshQuery.put("strQueryId","delete_perapp_docattach");
						}
						hshQuery.put("arrValues",arrValues);
						hshQueryValues.put(Integer.toString(intSize),hshQuery);
						hshQueryValues.put("size",String.valueOf(intSize));
					}
				 	EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				}	
				
				if(strFileName.contains("@"))
				{
					String[] strAppDoc = strFileName.split("@");	
					String[] strAppRej = strAppAttachments.split("@");					
					for(int i=0;i<strAppDoc.length;i++)
					{
						strQuery= SQLParser.getSqlQuery("select_app_docattach_view_noflag^"+strAppno+"^"+strDocType+"^"+strDocCode+"^"+strAppRej[i]);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())			
						{
							strDocattachDate=Helper.correctDate(rs.getString("APA_CREATED_DATE"));
						}

						long docdatediff=0;
						docdatediff=Helper.dateDiff(docattach_FlagDate, strDocattachDate);
						
						if(docdatediff>=0)
						{
							if(!strCBSID.equalsIgnoreCase(""))
								str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strOrgSCode+"/"+strCBSID+"/"+strAppno;
							else
								str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strOrgSCode+"/"+strAppno;	
						}
						else
						{
							if(!strCBSID.equalsIgnoreCase(""))
								str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strCBSID+"/"+strAppno;
							else
								str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strAppno;
						}
						
						if(!strAppDoc[i].equalsIgnoreCase(""))
						{
							if(rs!=null)
								rs.close();
							strQuery=SQLParser.getSqlQuery("sel_attacheddocments^"+strAppno+"^"+strAppDoc[i]);										
						    rs=DBUtils.executeQuery(strQuery);
							if(!rs.next())
							{
								File resultfile			= new File(str_FileDirectory+"/"+strAppDoc[i].substring(0,strAppDoc[i].indexOf("."))+".zip");
								 if(resultfile.exists())
								 {
									 resultfile.delete();
								 }
							}
						}
					}
					
					File file			= new File(str_FileDirectory);
					if(file.list().length==0)
						file.delete();
				}
			}
			
			if(rs!=null)
				rs.close();
		if((strModuleType.equals("CORP") || strModuleType.equals("AGR"))&& strDocType.equalsIgnoreCase("I"))
		{
		    strQuery=SQLParser.getSqlQuery("select_perapp_docattach_fac^"+strAppno+"^"+strDocType+"^"+strDocCode+"^"+strfacslno);										
		}
		else
		{
		    strQuery=SQLParser.getSqlQuery("select_perapp_docattach^"+strAppno+"^"+strDocType+"^"+strDocCode);										
		}
		
		    rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				arrCol = new ArrayList();
				arrCol.add(Helper.correctInt(rs.getString("apa_sno")));
				arrCol.add(Helper.correctNull(rs.getString("apa_filename")));
				arrCol.add(Helper.correctNull(rs.getString("apa_userid")));
				arrCol.add(Helper.correctNull(rs.getString("APA_GENERATED_URL")));
				arrCol.add(Helper.correctNull(rs.getString("APA_DOCCODE")));
				arrRow.add(arrCol);				
			}
			rs.close();
			hshRecord.put("arrRow",arrRow);
			
			if(rs!=null)
				rs.close();
		    rs=DBUtils.executeLAPSQuery("seldeviateduser^"+strAppno);
			if(rs.next())
			{
				hshRecord.put("strAppHolder", Helper.correctNull(rs.getString("app_applnholder")));
			}
			else if(strModuleType.equalsIgnoreCase("PERM"))
			{
				if(rs!=null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selectdeviationdet^"+strAppno);
				rs = DBUtils.executeQuery(strQuery);	
	            if(rs.next())
	            {
	            	hshRecord.put("strAppHolder", correctNull(rs.getString("dev_applholder")));
	            }
			}
			else
			{
				if(rs!=null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("sel_fin_rating^"+strAppno);
				rs = DBUtils.executeQuery(strQuery);	
	            if(rs.next())
	            {
	            	hshRecord.put("strAppHolder", correctNull(rs.getString("fin_appholder")));
	            }
			}
        	hshRecord.put("strappstatus", strappstatus);

			
		}
		catch(Exception e){
			throw new EJBException(e.getMessage());
		}
		finally{
			try{				
				if(rs!=null){rs.close();}				
			}
			catch(Exception e1){
				throw new EJBException(e1.getMessage());
			}
		}
		return hshRecord;
	}
	public HashMap viewDocumentData(HashMap hshValues){
		HashMap hshResult=new HashMap();
		ResultSet rs=null;		
		String strArray[] = null;
		String strQuery="";
		ByteArrayOutputStream baos	= new ByteArrayOutputStream();
		
		String strAppNo   = Helper.correctNull((String)hshValues.get("appno"));
		String strDocType = Helper.correctNull((String)hshValues.get("DocType"));
		String strDocCode = Helper.correctNull((String)hshValues.get("DocCode"));
		String strSNo = Helper.correctNull((String)hshValues.get("snoNo"));
		String strCBSID = Helper.correctNull((String)hshValues.get("strCBSID"));
		if(strCBSID.equalsIgnoreCase(""))
		{
			strCBSID = Helper.correctNull((String)hshValues.get("DEV_CBSID"));
		}
			
		String strFileName="",strFileExtension = "",strMimeType="",strDocName="",strDocattachDate="";		
		String str_FileDirectory ="";
		
		String strOrgSCode="";

		try
		{
			
			
			String docattach_FlagDate="";
			rs=DBUtils.executeLAPSQuery("selotherparam_ratexpos^121");
			if(rs.next())
			{
				docattach_FlagDate = Helper.correctDate((String)rs.getString("LOAN_PARAMVAL"));;				
			}
			
			if(rs!=null)
					rs.close();
			rs=DBUtils.executeLAPSQuery("sel_apporg_scode^"+strAppNo);
			if(rs.next())
			{
				strOrgSCode = Helper.correctNull((String)rs.getString("ORG_SCODE"));;				
			}else{
				rs=DBUtils.executeLAPSQuery("sel_msmedetails^"+strAppNo);
				if(rs.next())
				{
					strOrgSCode = Helper.correctNull((String)rs.getString("MSME_ORGSCODE"));
					strCBSID=Helper.correctNull((String)rs.getString("MSME_CBSID"));
				}
			}
			
			if(rs!=null)
				rs.close();
			strQuery=SQLParser.getSqlQuery("select_app_docattach_view^"+strAppNo+"^"+strDocType+"^"+strDocCode+"^"+strSNo);			
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())			
			{
				strFileName = correctNull(rs.getString("apa_filename"));
				strDocName=correctNull(rs.getString("apa_filename"));
				strDocattachDate=Helper.correctDate(rs.getString("APA_CREATED_DATE"));
			}
			long docdatediff=0;
			docdatediff=Helper.dateDiff(docattach_FlagDate, strDocattachDate);
			
			if(docdatediff>=0)
			{
				if(!strCBSID.equalsIgnoreCase(""))
					str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strOrgSCode+"/"+strCBSID+"/"+strAppNo;
				else
					str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strOrgSCode+"/"+strAppNo;	
			}
			else
			{
				if(!strCBSID.equalsIgnoreCase(""))
					str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strCBSID+"/"+strAppNo;
				else
					str_FileDirectory=ApplicationParams.getStrdoclocation()+"/"+strAppNo;
			}
			
			
			
			if(!strFileName.equalsIgnoreCase(""))
			{
				File Directory 	= new File(str_FileDirectory+"/"+strFileName.substring(0, strFileName.lastIndexOf("."))+".zip");
				String strZipFile=str_FileDirectory+"/"+strFileName.substring(0, strFileName.lastIndexOf("."))+".zip";
				
				 byte byFileName[] = new byte[25*1024*1024];
				 
				if(Directory.exists())
				{
					/*Decryption*/
					//generating same key
					byte secretKey[] 	= "KarnatakaBaKLAPS".getBytes();
					Key secretKeySpec 	= new SecretKeySpec(secretKey, "AES");
					
					//creating and initialising cipher
					Cipher decrypt = Cipher.getInstance("AES");
					decrypt.init(Cipher.DECRYPT_MODE, secretKeySpec);
					
					//Creating Input Stream for Decompression
					FileInputStream fis 	= new FileInputStream(strZipFile);
					ZipInputStream zipIn 	= new ZipInputStream(fis);
			        ZipEntry entry 			= zipIn.getNextEntry();
			        String strUNZipFile			= str_FileDirectory+entry.getName();
			        
			        while (entry != null) 
			        {
			            int read = 0;
			            while ((read = zipIn.read(byFileName)) != -1) 
			            {
			                baos.write(byFileName, 0, read);
			            }
			            
			            byFileName = baos.toByteArray();
			            baos.close();
			            
			            zipIn.closeEntry();
			            entry = zipIn.getNextEntry();
			            zipIn.close();
			        }
			        
					//Encrypts or decrypts data based on the Cipher Intialization
					byFileName = decrypt.doFinal(byFileName);
					strMimeType = getMimeType(strFileExtension);

					if(byFileName!=null)
					{
					    
					    hshResult.put("photoimg", byFileName);
						hshResult.put("FILE_STREAM_NAME", strFileName );
						hshResult.put("FILE_STREAM_TYPE", strMimeType);
						hshResult.put("FILE_STREAM", byFileName);
						hshResult.put("FILE_STREAM_DISPOSITION_TYPE","inline");	
					}
				}
			}
		}
		catch(Exception e)
		{
			log.info("Exception in viewDocumentData ==="+e.getMessage());
			throw new EJBException("Exception in viewDocumentData ==="+e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				 
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection "+e.getMessage());
			}
		}
		return hshResult;
	}
	public String getMimeType(String format)
	{
		if (format.equalsIgnoreCase("a")) 
			return "text/a";
		else if (format.equalsIgnoreCase("abs"))
			return "audio/x-mpeg";
		else if (format.equalsIgnoreCase("ai"))
			return "application/postscript";
		else if (format.equalsIgnoreCase("aif"))
			return "audio/x-aiff";
		else if (format.equalsIgnoreCase("aifc"))
			return "audio/x-aiff";
		else if (format.equalsIgnoreCase("aiff"))
			return "audio/x-aiff";
		else if (format.equalsIgnoreCase("aim"))
			return "application/x-aim";
		else if (format.equalsIgnoreCase("art"))
			return "image/x-jg";
		else if (format.equalsIgnoreCase("asf"))
			return "video/x-ms-asf";
		else if (format.equalsIgnoreCase("asx"))
			return "video/x-ms-asf";
		else if (format.equalsIgnoreCase("au"))
			return "audio/basic";
		else if (format.equalsIgnoreCase("avi"))
			return "video/x-msvideo";
		else if (format.equalsIgnoreCase("avx"))
			return "video/x-rad-screenplay";
		else if (format.equalsIgnoreCase("bcpio"))
			return "application/x-bcpio";
		else if (format.equalsIgnoreCase("bin"))
			return "application/octet-stream";
		else if (format.equalsIgnoreCase("bmp"))
			return "image/bmp";
		else if (format.equalsIgnoreCase("body"))
			return "text/html";
		else if (format.equalsIgnoreCase("cdf"))
			return "application/x-cdf";
		else if (format.equalsIgnoreCase("cer"))
			return "application/x-x509-ca-cert";
		else if (format.equalsIgnoreCase("class"))
			return "application/java";
		else if (format.equalsIgnoreCase("cpio"))
			return "application/x-cpio";
		else if (format.equalsIgnoreCase("csh"))
			return "application/x-csh";
		else if (format.equalsIgnoreCase("css"))
			return "text/css";
		else if (format.equalsIgnoreCase("dib"))
			return "image/bmp";
		else if (format.equalsIgnoreCase("doc"))
			return "application/msword";
		else if (format.equalsIgnoreCase("docx"))
			return "application/msword";
		else if (format.equalsIgnoreCase("dtd"))
			return "text/plain";
		else if (format.equalsIgnoreCase("dv"))
			return "video/x-dv";
		else if (format.equalsIgnoreCase("dvi"))
			return "application/x-dvi";
		else if (format.equalsIgnoreCase("eps"))
			return "application/postscript";
		else if (format.equalsIgnoreCase("etx"))
			return "text/x-setext";
		else if (format.equalsIgnoreCase("exe"))
			return "application/octet-stream";
		else if (format.equalsIgnoreCase("gif"))
			return "image/gif";
		else if (format.equalsIgnoreCase("gtar"))
			return "application/x-gtar";
		else if (format.equalsIgnoreCase("gz"))
			return "application/x-gzip";
		else if (format.equalsIgnoreCase("hdf"))
			return "application/x-hdf";
		else if (format.equalsIgnoreCase("hqx"))
			return "application/mac-binhex40";
		else if (format.equalsIgnoreCase("htc"))
			return "text/x-component";
		else if (format.equalsIgnoreCase("htm"))
			return "text/html";
		else if (format.equalsIgnoreCase("html"))
			return "text/html";
		else if (format.equalsIgnoreCase("hqx"))
			return "application/mac-binhex40";
		else if (format.equalsIgnoreCase("ief"))
			return "image/ief";
		else if (format.equalsIgnoreCase("image_gif"))
			return "image/gif";
		else if (format.equalsIgnoreCase("image_jpeg"))
			return "image/jpeg";
		else if (format.equalsIgnoreCase("image_bmp"))
			return "image/bmp";
		else if (format.equalsIgnoreCase("image_x-png"))
			return "image/x-png";
		else if (format.equalsIgnoreCase("jad"))
			return "text/vnd.sun.j2me.app-descriptor";
		else if (format.equalsIgnoreCase("jar"))
			return "application/java-archive";
		else if (format.equalsIgnoreCase("java"))
			return "text/plain";
		else if (format.equalsIgnoreCase("jnlp"))
			return "application/x-java-jnlp-file";
		else if (format.equalsIgnoreCase("jpe"))
			return "image/jpeg";
		else if (format.equalsIgnoreCase("jpeg"))
			return "image/jpeg";
		else if (format.equalsIgnoreCase("jpg"))
			return "image/jpeg";
		else if (format.equalsIgnoreCase("js"))
			return "text/javascript";
		else if (format.equalsIgnoreCase("jsf"))
			return "text/plain";
		else if (format.equalsIgnoreCase("jspf"))
			return "text/plain";
		else if (format.equalsIgnoreCase("kar"))
			return "audio/x-midi";
		else if (format.equalsIgnoreCase("latex"))
			return "application/x-latex";
		else if (format.equalsIgnoreCase("m3u"))
			return "audio/x-mpegurl";
		else if (format.equalsIgnoreCase("mac"))
			return "image/x-macpaint";
		else if (format.equalsIgnoreCase("man"))
			return "application/x-troff-man";
		else if (format.equalsIgnoreCase("me"))
			return "application/x-troff-me";
		else if (format.equalsIgnoreCase("mid"))
			return "audio/x-midi";
		else if (format.equalsIgnoreCase("midi"))
			return "audio/x-midi";
		else if (format.equalsIgnoreCase("mif"))
			return "application/x-mif";
		else if (format.equalsIgnoreCase("mov"))
			return "video/quicktime";
		else if (format.equalsIgnoreCase("movie"))
			return "video/x-sgi-movie";
		else if (format.equalsIgnoreCase("mp1"))
			return "audio/x-mpeg";
		else if (format.equalsIgnoreCase("mp2"))
			return "audio/x-mpeg";
		else if (format.equalsIgnoreCase("mp3"))
			return "audio/x-mpeg";
		else if (format.equalsIgnoreCase("mpa"))
			return "audio/x-mpeg";
		else if (format.equalsIgnoreCase("mpe"))
			return "video/mpeg";
		else if (format.equalsIgnoreCase("mpeg"))
			return "video/mpeg";
		else if (format.equalsIgnoreCase("mpega"))
			return "audio/x-mpeg";
		else if (format.equalsIgnoreCase("mpg"))
			return "video/mpeg";
		else if (format.equalsIgnoreCase("mpv2"))
			return "video/mpeg2";
		else if (format.equalsIgnoreCase("ms"))
			return "application/x-wais-source";
		else if (format.equalsIgnoreCase("msdownload"))
			return "application/x-msdownload";
		else if (format.equalsIgnoreCase("nc"))
			return "application/x-netcdf";
		else if (format.equalsIgnoreCase("oda"))
			return "application/oda";
		else if (format.equalsIgnoreCase("pbm"))
			return "image/x-portable-bitmap";
		else if (format.equalsIgnoreCase("pct"))
			return "image/pict";
		else if (format.equalsIgnoreCase("pdf"))
			return "application/pdf";
		else if (format.equalsIgnoreCase("pgm"))
			return "image/x-portable-graymap";
		else if (format.equalsIgnoreCase("pic"))
			return "image/pict";
		else if (format.equalsIgnoreCase("pict"))
			return "image/pict";
		else if (format.equalsIgnoreCase("pls"))
			return "audio/x-scpls";
		else if (format.equalsIgnoreCase("png"))
			return "image/png";
		else if (format.equalsIgnoreCase("pnm"))
			return "image/x-portable-anymap";
		else if (format.equalsIgnoreCase("pnt"))
			return "image/x-macpaint";
		else if (format.equalsIgnoreCase("ppm"))
			return "image/x-portable-pixmap";
		else if (format.equalsIgnoreCase("ppt"))
			return "application/x-msdownload";
		else if (format.equalsIgnoreCase("pptx"))
			return "application/x-msdownload";
		else if (format.equalsIgnoreCase("ps"))
			return "application/postscript";
		else if (format.equalsIgnoreCase("psd"))
			return "image/x-photoshop";
		else if (format.equalsIgnoreCase("qt"))
			return "video/quicktime";
		else if (format.equalsIgnoreCase("qti"))
			return "image/x-quicktime";
		else if (format.equalsIgnoreCase("qtif"))
			return "image/x-quicktime";
		else if (format.equalsIgnoreCase("ras"))
			return "image/x-cmu-raster";
		else if (format.equalsIgnoreCase("rgb"))
			return "image/x-rgb";
		else if (format.equalsIgnoreCase("rm"))
			return "application/vnd.rn-realmedia";
		else if (format.equalsIgnoreCase("roff"))
			return "application/x-troff";
		else if (format.equalsIgnoreCase("rtf"))
			return "application/rtf";
		else if (format.equalsIgnoreCase("rtx"))
			return "text/richtext";
		else if (format.equalsIgnoreCase("sh"))
			return "application/x-sh";
		else if (format.equalsIgnoreCase("shar"))
			return "application/x-shar";
		else if (format.equalsIgnoreCase("smf"))
			return "audio/x-midi";
		else if (format.equalsIgnoreCase("sit"))
			return "application/x-stuffit";
		else if (format.equalsIgnoreCase("snd"))
			return "audio/basic";
		else if (format.equalsIgnoreCase("src"))
			return "application/x-wais-source";
		else if (format.equalsIgnoreCase("sv4cpio"))
			return "application/x-sv4cpio";
		else if (format.equalsIgnoreCase("sv4crc"))
			return "application/x-sv4crc";
		else if (format.equalsIgnoreCase("swf"))
			return "application/x-shockwave-flash";
		else if (format.equalsIgnoreCase("t"))
			return "application/x-troff";
		else if (format.equalsIgnoreCase("tar"))
			return "application/x-tar";
		else if (format.equalsIgnoreCase("tcl"))
			return "application/x-tcl";
		else if (format.equalsIgnoreCase("tex"))
			return "application/x-tex";
		else if (format.equalsIgnoreCase("texi"))
			return "application/x-texinfo";
		else if (format.equalsIgnoreCase("texinfo"))
			return "application/x-texinfo";
		else if (format.equalsIgnoreCase("tif"))
			return "image/tiff";
		else if (format.equalsIgnoreCase("tiff"))
			return "image/tiff";
		else if (format.equalsIgnoreCase("tr"))
			return "application/x-troff";
		else if (format.equalsIgnoreCase("tsv"))
			return "text/tab-separated-values";
		else if (format.equalsIgnoreCase("txt"))
			return "text/plain";
		else if (format.equalsIgnoreCase("ucc"))
			return "text/ucc";
		else if (format.equalsIgnoreCase("ulw"))
			return "audio/basic";
		else if (format.equalsIgnoreCase("ustar"))
			return "application/x-ustar";
		else if (format.equalsIgnoreCase("xbm"))
			return "image/x-xbitmap";
		else if (format.equalsIgnoreCase("xls"))
			return "application/vnd.ms-excel";
		else if (format.equalsIgnoreCase("xlsx"))
			return "application/vnd.ms-excel";
		else if (format.equalsIgnoreCase("xml"))
			return "text/xml";
		else if (format.equalsIgnoreCase("xpm"))
			return "image/x-xpixmap";
		else if (format.equalsIgnoreCase("xsl"))
			return "text/xml";
		else if (format.equalsIgnoreCase("xwd"))
			return "image/x-xwindowdump";
		else if (format.equalsIgnoreCase("wav"))
			return "audio/x-wav";
		else if (format.equalsIgnoreCase("svg"))
			return "image/svg+xml";
		else if (format.equalsIgnoreCase("svgz"))
			return "image/svg+xml";
		else if (format.equalsIgnoreCase("wbmp"))
			return "image/vnd.wap.wbmp";
		else if (format.equalsIgnoreCase("wml"))
			return "text/vnd.wap.wml";
		else if (format.equalsIgnoreCase("wmlc"))
			return "application/vnd.wap.wmlc";
		else if (format.equalsIgnoreCase("wmls"))
			return "text/vnd.wap.wmlscript";
		else if (format.equalsIgnoreCase("wmlscriptc"))
			return "application/vnd.wap.wmlscriptc";
		else if (format.equalsIgnoreCase("wrl"))
			return "x-world/x-vrml";
		else if (format.equalsIgnoreCase("Z"))
			return "application/x-compress";
		else if (format.equalsIgnoreCase("z"))
			return "application/x-compress";
		else if (format.equalsIgnoreCase("zip"))
			return "application/zip";
		else
			return "application/stream";
	}
	public HashMap printDocumentDetails(HashMap hshValues){
		HashMap hshResult=new HashMap();
		ResultSet rs=null,rs1=null;		
		ArrayList arrRow1=new ArrayList();
		ArrayList arrRow=new ArrayList();
		ArrayList arrCol=new ArrayList();
		String strAppNo   = Helper.correctNull((String)hshValues.get("appno"));
		String strType="",strBrachName="";
		try
		{
			String strfacilitysno=Helper.correctNull((String) hshValues.get("sel_facilitysno"));
			if(Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("RET")||Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("LAD") || Helper.correctNull((String)hshValues.get("sessionModuleType")).equalsIgnoreCase("DIGI"))
			{
				
				rs=DBUtils.executeLAPSQuery("sel_coapplicantdetails^"+strAppNo);
				while(rs.next())
				{
					if(!strType.equalsIgnoreCase(Helper.correctNull(rs.getString("demo_type"))) && !strType.equalsIgnoreCase(""))
					{
						arrRow1.add(arrRow);
						arrRow=new ArrayList();
					}
					
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("demo_type")));//0
					arrCol.add(Helper.correctNull(rs.getString("demo_oldappid")));//1
					arrCol.add(Helper.correctNull(rs.getString("fname")));//2
					arrCol.add(Helper.correctNull(rs.getString("demo_docprint")));//3
					arrCol.add(Helper.correctNull(rs.getString("DEMO_DOCACCOPERTED")));//4
					arrRow.add(arrCol);
					
					strType=Helper.correctNull(rs.getString("demo_type")); 
				}
				
				if(arrRow.size()>0)
					arrRow1.add(arrRow);
				
				if(rs!=null)
					rs.close();
				
				rs=DBUtils.executeLAPSQuery("checkcostloanprd^"+strAppNo);
				
				if(rs.next())
				{
					hshResult.put("strReleaseDateofMCLR",Helper.correctNull(rs.getString("loan_releasedateofmclr")));
					hshResult.put("strBrachCode",Helper.correctNull(rs.getString("LOAN_DOC_BRANCHCODE")));
					
					String strBrachCode=Helper.correctNull(rs.getString("LOAN_DOC_BRANCHCODE"));
					if(strBrachCode.equalsIgnoreCase(""))
					{
						if(rs1!=null)
							rs1.close();
						rs1=DBUtils.executeLAPSQuery("sel_cbsdetails^"+strAppNo+"^1");
						if(rs1.next())
						{
							strBrachCode=Helper.correctInt(rs1.getString("LOANDISBBRANCH"));
							hshResult.put("strBrachCode",strBrachCode);
						}
					}
					if(!strBrachCode.equalsIgnoreCase(""))
					{
						String strQuery1=SQLParser.getSqlQuery("selectorgname^"+strBrachCode);
						rs1=DBUtils.executeQuery(strQuery1);
						if(rs1.next())
						{
							 strBrachName=Helper.correctNull((String)rs1.getString("org_name"));
							 hshResult.put("strBrachName",strBrachName);
						}
					}
				}
				
				hshResult.put("strODFlag",Helper.correctNull((String)hshValues.get("schemeCode")));
			
			}
			else 
			{
				if(!strfacilitysno.equals(""))
				{
				rs=DBUtils.executeLAPSQuery("sel_facility_compDet^"+strAppNo+"^"+strfacilitysno+"^"+strAppNo);
				while(rs.next())
				{
					if(!strType.equalsIgnoreCase(Helper.correctNull(rs.getString("COM_COMPDTTYPE"))) && !strType.equalsIgnoreCase(""))
					{
						arrRow1.add(arrRow);
						arrRow=new ArrayList();
					}
					
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("COM_COMPDTTYPE")));//0
					arrCol.add(Helper.correctNull(rs.getString("perapp_id")));//1
					arrCol.add(Helper.correctNull(rs.getString("com_compdtfname")));//2
					arrCol.add(Helper.correctNull(rs.getString("COM_FAC_DOCPRINT")));//3
					arrCol.add(Helper.correctNull(rs.getString("COM_FAC_DOC_ACCOPERATED")));//4
					arrRow.add(arrCol);
					
					strType=Helper.correctNull(rs.getString("COM_COMPDTTYPE")); 
				}
				
				if(arrRow.size()>0)
					arrRow1.add(arrRow);
				
				if(rs!=null)
					rs.close();
				
				rs=DBUtils.executeLAPSQuery("sel_com_factype_value^"+strAppNo+"^"+strfacilitysno);
				if(rs.next())
				{
					hshResult.put("strODFlag",Helper.correctNull(rs.getString("com_facility_loantype")));
				}
				
				}
				if(rs!=null)
					rs.close();
				
				rs=DBUtils.executeLAPSQuery("sel_facility_mclrreldate^"+strAppNo+"^"+strfacilitysno);
				if(rs.next())
				{
					hshResult.put("strReleaseDateofMCLR",Helper.correctNull(rs.getString("FACILITY_MCLR_RELDATE")));
					hshResult.put("strBrachCode",Helper.correctNull(rs.getString("FACILITY_DOC_BRANCHCODE")));
					
					String strBrachCode=Helper.correctNull(rs.getString("FACILITY_DOC_BRANCHCODE"));
					if(strBrachCode.equalsIgnoreCase(""))
					{
						if(rs1!=null)
							rs1.close();
						rs1=DBUtils.executeLAPSQuery("sel_cbsdetails^"+strAppNo+"^"+strfacilitysno);
						if(rs1.next())
						{
							strBrachCode=Helper.correctInt(rs1.getString("LOANDISBBRANCH"));
							hshResult.put("strBrachCode",strBrachCode);
						}
					}
					if(!strBrachCode.equalsIgnoreCase(""))
					{
						String strQuery1=SQLParser.getSqlQuery("selectorgname^"+strBrachCode);
						rs1=DBUtils.executeQuery(strQuery1);
						if(rs1.next())
						{
							 strBrachName=Helper.correctNull((String)rs1.getString("org_name"));
							 hshResult.put("strBrachName",strBrachName);
						}
					}
				}
			}
			
			if(rs!=null)
				rs.close();
			
			rs=DBUtils.executeLAPSQuery("get_Appstat^"+strAppNo);
			
			if(rs.next())
			{
				hshResult.put("strSanctionDate",Helper.correctNull(rs.getString("app_processdate")));
				
				
			}
			
					
			hshResult.put("strfacilitysno",strfacilitysno);

			hshResult.put("arrRow",arrRow1);
		}
		catch(Exception e)
		{
			log.info("Exception in printDocumentDetails ==="+e.getMessage());
			throw new EJBException("Exception in printDocumentDetails ==="+e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				 
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection "+e.getMessage());
			}
		}
		return hshResult;
	}
	public void updateDocPrintDetails(HashMap hshValues)
	{
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		
		String strAppno=Helper.correctNull((String)hshValues.get("appno"));
		String strSessionModuleType=Helper.correctNull((String)hshValues.get("sessionModuleType"));
		int intQsize=0;
		try
		{
			String strfacslno=Helper.correctNull((String)hshValues.get("sel_facilitysno"));
			String[] strAppID= null;
			String[] strAppType= null;
			String[] strAccoper= null;
			 if(hshValues.get("hid_demoid") instanceof java.lang.String)
			 {
				 strAppID= new String[1];
				 strAppID[0]=(String)hshValues.get("hid_demoid");
			 }else{
				 strAppID=(String[])hshValues.get("hid_demoid");
			 }
			 if(hshValues.get("hid_apptype1") instanceof java.lang.String)
			 {
				 strAppType= new String[1];
				 strAppType[0]=(String)hshValues.get("hid_apptype1");
			 }else{
				 strAppType=(String[])hshValues.get("hid_apptype1");
			 }
			 
			 if(hshValues.get("selaccoperby") instanceof java.lang.String)
			 {
				 strAccoper= new String[1];
				 strAccoper[0]=(String)hshValues.get("selaccoperby");
			 }else{
				 strAccoper=(String[])hshValues.get("selaccoperby");
			 }
			 
			 if(strSessionModuleType.equalsIgnoreCase("RET") || strSessionModuleType.equalsIgnoreCase("LAD") || strSessionModuleType.equalsIgnoreCase("DIGI"))
			 {
				 
				 
				/*hshQuery = new HashMap();
				arrValues = new ArrayList();
				
				arrValues.add("a");
				arrValues.add(strAppno);
				
				intQsize=intQsize+1;
				hshQuery.put("strQueryId","upddocprint_demographicsapp");
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
				hshQueryValues.put("size",String.valueOf(intQsize));*/
					
					
				 if(strAppID!=null)
				 {
					for (int i = 0 ; i < strAppID.length; i++)
					{ 
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						
						arrValues.add(strAppType[i]);
						arrValues.add(strAccoper[i]);
						arrValues.add(strAppID[i]);
						arrValues.add(strAppno);
						
						intQsize=intQsize+1;
						hshQuery.put("strQueryId","upddocprint_demographics");
						hshQuery.put("arrValues",arrValues);
						hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
						hshQueryValues.put("size",String.valueOf(intQsize));	 
					}
				 }
				
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				
				arrValues.add(Helper.correctNull((String)hshValues.get("hid_branchcode")));

				arrValues.add(Helper.correctNull((String)hshValues.get("txt_releasedate")));

				arrValues.add(strAppno);
				
				intQsize=intQsize+1;
				hshQuery.put("strQueryId","upd_loanmclrdate");
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
				hshQueryValues.put("size",String.valueOf(intQsize));
				
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				
				arrValues.add("Y");
				arrValues.add(strAppno);
				
				intQsize=intQsize+1;
				hshQuery.put("strQueryId","upddocprint_applications");
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
				hshQueryValues.put("size",String.valueOf(intQsize));	
			 }
			 else if(strSessionModuleType.equalsIgnoreCase("CORP") || strSessionModuleType.equalsIgnoreCase("AGR"))
			 {
				 if(strAppID!=null)
				 {
					for (int i = 0 ; i < strAppID.length; i++)
					{ 
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						
						if(strAppType[i].equals("a"))
						{
							arrValues.add(strAppType[i]);
							arrValues.add(strAccoper[i]);
							arrValues.add(strAppno);
							intQsize=intQsize+1;
							hshQuery.put("strQueryId","upd_comdemographics_docprint");
							hshQuery.put("arrValues",arrValues);
							hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
							hshQueryValues.put("size",String.valueOf(intQsize));	
						}
						else
						{
							arrValues.add(strAppType[i]);
							arrValues.add(strAccoper[i]);
							arrValues.add(strAppID[i]);
							arrValues.add(strAppno);
							arrValues.add(strfacslno);
							intQsize=intQsize+1;
							hshQuery.put("strQueryId","upddocprint_comcompanydet");
							hshQuery.put("arrValues",arrValues);
							hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
							hshQueryValues.put("size",String.valueOf(intQsize));	
						}
						 
					}
				 }
				
				hshQuery = new HashMap();
				arrValues = new ArrayList();

				arrValues.add(Helper.correctNull((String)hshValues.get("txt_releasedate")));
				arrValues.add("Y");
				arrValues.add(Helper.correctNull((String)hshValues.get("hid_branchcode")));

				arrValues.add(strAppno);
				arrValues.add(strfacslno);

				intQsize=intQsize+1;
				hshQuery.put("strQueryId","upd_Facilitymclrdate");
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put(String.valueOf(intQsize),hshQuery);	
				hshQueryValues.put("size",String.valueOf(intQsize));
				 
			 }
			 		 
			 
			 if(intQsize>0)
				 EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		}
		catch(Exception e)
		{
			throw new EJBException(e.getMessage());
		}
	}
	public HashMap getDocumentPrintHistory(HashMap hshValues){
		HashMap hshResult=new HashMap();
		ResultSet rs=null;		
		ArrayList arrRow=new ArrayList();
		ArrayList arrCol=new ArrayList();
		String strAppNo   = Helper.correctNull((String)hshValues.get("appno"));
		String sessionModuleType=Helper.correctNull((String)hshValues.get("sessionModuleType"));
		String hidfacslno=Helper.correctNull((String)hshValues.get("hidfacslno"));
		try
		{
			if(sessionModuleType.equals("CORP") || sessionModuleType.equals("AGR"))
				rs=DBUtils.executeLAPSQuery("sel_documentprint_history_facility^"+strAppNo+"^"+hidfacslno );
			else
				rs=DBUtils.executeLAPSQuery("sel_documentprint_history^"+strAppNo);
			 while(rs.next())
				{
					
					arrCol=new ArrayList();
					arrCol.add(Helper.correctNull(rs.getString("doc_code")));//0
					arrCol.add(Helper.correctNull(rs.getString("doc_name")));//1
					arrCol.add(Helper.correctNull(rs.getString("doc_usrid")));//2
					arrCol.add(Helper.correctNull(rs.getString("usr_fname")));//3
					arrCol.add(Helper.correctNull(rs.getString("usr_mname")));//4
					arrCol.add(Helper.correctNull(rs.getString("usr_lname")));//5
					arrCol.add(Helper.correctNull(rs.getString("org_name")));//6
					arrCol.add(Helper.correctNull(rs.getString("doc_print_time")));//7
					arrRow.add(arrCol);
				}
				
			hshResult.put("arrRow",arrRow);
		}
		catch(Exception e)
		{
			log.info("Exception in Document Print History ==="+e.getMessage());
			throw new EJBException("Exception in Document Print History ==="+e.getMessage());
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}				 
			}
			catch(Exception e)
			{
				throw new EJBException("Error in closing Connection "+e.getMessage());
			}
		}
		return hshResult;
	}
	private String getDocTemplate1(HashMap hshValues) 
	{
		String template=Helper.correctNull((String)hshValues.get("strTemplate"));
		String strappno=Helper.correctNull((String)hshValues.get("appno"));
		String appid=Helper.correctNull((String)hshValues.get("appid"));
		String strStatus=Helper.correctNull((String)hshValues.get("strappstatus"));
		String strQuery="",strQuery1="",arrappminor="",guard_name="";
		ResultSet rs1=null;
		ResultSet rs2=null;
		ResultSet rs=null;
		ResultSet rs3=null,rs4=null;
		ArrayList arrappList=new ArrayList();
		ArrayList arrappRow=new ArrayList(); 
		HashMap hshQuery=null;
    	HashMap hshQueryValues=new HashMap();
		int itemp=0;
		String[] strArrsno={"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
		HashMap hshRecord=new HashMap();
		String hidfacslno="1";
		String strCbsACno="";
		String mclrType = "",strfacsno="1";
    	String docid=Helper.correctNull((String)hshValues.get("doc_id"));
		java.text.NumberFormat jtn= java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);	
		java.text.NumberFormat jtn1= java.text.NumberFormat.getInstance();
		jtn1.setMaximumFractionDigits(1);
		jtn1.setMinimumFractionDigits(1);
		jtn1.setGroupingUsed(false);
	ArrayList	arrValues=new ArrayList();
	String docOpenType=Helper.correctNull((String)hshValues.get("docOpenType"));
	String documentCode=Helper.correctNull((String)hshValues.get("documentCode"));
	String strUsrID=Helper.correctNull((String)hshValues.get("strUserId"));
	 arrappRow  = (ArrayList)hshValues.get("arrappRow");


		try
		{
	 		ComProposalBean compbean = new ComProposalBean();
	 		
			while(template.contains("@secloopstarted"))
			 {
				String temptemplate="",temp="";
			 	StringBuffer tempborrowermdtd= new StringBuffer();
			 	boolean bflag=false;
				int startindex = template.indexOf("@secloopstarted");
				int endindex = template.indexOf("@secloopended");
				temptemplate=template.substring(startindex,(endindex+("@secloopended").length()));
				
				if(temptemplate.contains("@borrowermdtd"))
				{
					bflag=true;
				 	tempborrowermdtd= new StringBuffer();
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_mdtd_securities^"+strappno+"^"+"'a','c'"+"^ ");
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{
						temp=temptemplate;
						String mdtdcomments=correctNull(Helper.CLOBToString(rs2.getClob("MDTD_COMMENTS")));
						String mdtddesc=correctNull(Helper.CLOBToString(rs2.getClob("CUS_SEC_SECURITY_DESCRIPTION")));
						temp=temp.replaceAll("@borrowermdtd", mdtdcomments);
						temp=temp.replaceAll("@borrowersecdesc", mdtddesc);
						temp=temp.replaceAll("@otherborrowermdtd", "");
						temp=temp.replaceAll("@otherborrowersecdesc", "");
						temp=temp.replaceAll("@secloopstarted", "");
						temp=temp.replaceAll("@secloopended", "");
						tempborrowermdtd.append(temp);
					}
				}
				if(temptemplate.contains("@otherborrowermdtd"))
				{
					bflag=true;
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_mdtd_securities^"+strappno+"^"+"'g','o','p'"+"^ ");
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{
						temp=temptemplate;
						String mdtdcomments=correctNull(Helper.CLOBToString(rs2.getClob("MDTD_COMMENTS")));
						String mdtddesc=correctNull(Helper.CLOBToString(rs2.getClob("CUS_SEC_SECURITY_DESCRIPTION")));
						temp=temp.replaceAll("@otherborrowermdtd", mdtdcomments);
						temp=temp.replaceAll("@otherborrowersecdesc", mdtddesc);
						temp=temp.replaceAll("@borrowermdtd", "");
						temp=temp.replaceAll("@borrowersecdesc", "");
						temp=temp.replaceAll("@secloopstarted", "");
						temp=temp.replaceAll("@secloopended", "");
						tempborrowermdtd.append(temp);
					}
				}
				if(bflag)
				{
					template=template.substring(0, startindex)+(tempborrowermdtd.toString())+template.substring((endindex+("@secloopended").length()), template.length()); 
				}
				else
				{
					template=template.replace("@secloopstarted",""); 
					template=template.replace("@secloopended",""); 
				}
			 }
			if(template.contains("@accountoperation"))
			 {
				 StringBuffer tempborrower= new StringBuffer();
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_borrower_accoperated^"+strappno+"^"+strappno);
					rs2=DBUtils.executeQuery(strQuery);
					int ccount=0;
					while(rs2.next())
					{
						if(ccount>0)
							tempborrower.append(", "+correctNull(rs2.getString("borrrowername")));
						else
							tempborrower.append(correctNull(rs2.getString("borrrowername")));
						ccount++;
					}
					template=template.replaceAll("@accountoperation", tempborrower.toString()); 
			 }
			String strMCLRRefType="O",strMCLRType="";
			
			if(template.contains("@minprodrange")||template.contains("@minprodint"))
			{
				
				if(rs2!=null){ rs2.close(); }
			 	strQuery=SQLParser.getSqlQuery("getappamt^"+strappno);
				rs2=DBUtils.executeQuery(strQuery);
				if(rs2.next())
				{
					strMCLRType=Helper.correctNull(rs2.getString("LOAN_MCLRTYPE"));
				}
				
				if(!strMCLRType.equalsIgnoreCase(""))
 				{
 					String strArr[]=strMCLRType.split("@");
 					if(strArr!=null && strArr.length>0)
 					{
 						if(rs2!=null)
 							rs2.close();
 						rs2=DBUtils.executeLAPSQuery("sel_CBSStaticDataPassingCode^34^"+strArr[0]);			
						if(rs2.next())
						{
								strMCLRRefType=Helper.correctNull(rs2.getString("cbs_static_data_passing_code")); 
							
						}
 					}
 				}
				
			}
			 if(template.contains("@minprodrange"))
			 {
				 if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_prod_minrange^"+strappno+"^"+strMCLRRefType);
					rs2=DBUtils.executeQuery(strQuery);
					if(rs2.next())
					{
						hshRecord.put("prd_minrange", correctNull(rs2.getString("minrange")));
					}
					template=template.replaceAll("@minprodrange", Helper.correctNull((String) hshRecord.get("prd_minrange"))); 
			 }
			 if(template.contains("@minprodint"))
			 {
				 if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_prod_mininterestrate^"+strappno+"^"+strMCLRRefType);
					rs2=DBUtils.executeQuery(strQuery);
					if(rs2.next())
					{
						hshRecord.put("min_interestrate", correctNull(rs2.getString("min_interestrate")));
					}
					template=template.replaceAll("@minprodint", Helper.correctNull((String) hshRecord.get("min_interestrate"))); 
			 }
			 
			 if(template.contains("@Existinglimit"))
			 {
				 	if(rs!=null){	rs.close(); }
				 	String exsting_limit="";
				 	strQuery=SQLParser.getSqlQuery("sel_renewal_limit_retail^"+strappno);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						exsting_limit=Helper.correctNull((String)rs.getString("loan_recmdamt"));
					}
					 template=template.replaceAll("@Existinglimit",exsting_limit ); 
			 }
			 
			String existing_limit="0";
			String current_limit="0";
		 	if(rs!=null){	rs.close(); }
		 	strQuery=SQLParser.getSqlQuery("sel_renewal_limit_retail^"+strappno);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				existing_limit=Helper.correctDouble(rs.getString("loan_recmdamt"));
				strCbsACno=Helper.correctNull(rs.getString("cbs_accountno"));
			}
			 if(template.contains("@proposedlimit") || template.contains("@changeinlimit"))
			 {
					if(rs!=null){	rs.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_renewal_Currentlimit_retail^"+strappno);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						current_limit=Helper.correctDouble((String)rs.getString("loan_recmdamt"));
					}
					
					double limitdiff= (Double.parseDouble(current_limit)-Double.parseDouble(existing_limit));
					
					if(template.contains("@proposedlimit"))
					{
						if(limitdiff>0)
							 template=template.replaceAll("@proposedlimit"," enhanced limit of Rs."+current_limit ); 
						else if(limitdiff<0)
							 template=template.replaceAll("@proposedlimit", "reduced limit of Rs."+current_limit ); 
						else
							 template=template.replaceAll("@proposedlimit", "existing limit of Rs."+current_limit ); 
					}
					if(template.contains("@changeinlimit"))
					{
						if(limitdiff>0)
							 template=template.replaceAll("@changeinlimit"," enhanced to Rs."+current_limit +"/-"); 
						else if(limitdiff<0)
							 template=template.replaceAll("@changeinlimit", "reduced to Rs."+current_limit +"/-"); 
						else
							 template=template.replaceAll("@changeinlimit", ""); 
					}
			 }
			 
			 if(template.contains("@repmths"))
			 {
				 	if(rs!=null){ rs.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_tl_repayschedule^"+strappno+"^1");
					rs=DBUtils.executeQuery(strQuery);
					int totalinst=0;
					while(rs.next())
					{
						String TL_FEQUENCY=	Helper.correctDouble((String)rs.getString("TL_FEQUENCY"));
						if(TL_FEQUENCY.equals("M"))
							totalinst=totalinst + Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")));
						else if(TL_FEQUENCY.equals("Q"))
							totalinst=totalinst + (Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")))* 3);
						else if(TL_FEQUENCY.equals("H"))
							totalinst=totalinst + (Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")))* 6);
						else if(TL_FEQUENCY.equals("Y"))
							totalinst=totalinst + (Integer.parseInt(Helper.correctInt((String)rs.getString("TL_NOOFINST")))* 12);
					} 
					 template=template.replaceAll("@repmths", String.valueOf(totalinst)); 
			 }
			 
			 if(template.contains("@TitleDeedDepositDetails"))
			 {
				 	String depositbranch="",depositdate="",datetemplate="";
				 	int depositcount=0;
				 	if(rs!=null){ rs.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_propsecattached_titledeeds^"+strappno+"^ ");
					rs=DBUtils.executeQuery(strQuery);
					while(rs.next())
					{
						if(depositcount!=0)
						{
							datetemplate=datetemplate.concat(", ");
						}
						depositbranch=Helper.correctNull(rs.getString("depositbranch"))+" - "+Helper.correctNull(rs.getString("ORG_ZIP"));
						String dateinwords1=Helper.correctNull(rs.getString("SEC_DEPOSIT_DATE"));
						String dateinwords2=Helper.convertDatetowords(Helper.correctNull(rs.getString("SEC_DEPOSIT_DATE")));
						if(!dateinwords1.equalsIgnoreCase(""))
							datetemplate=datetemplate+"on this "+dateinwords2.substring(0, 4)+" day of "+Helper.getMonths(Integer.parseInt(dateinwords1.substring(4, 5)))+" of "+dateinwords1.substring(6, 10)+" has deposited at "+depositbranch+" branch";
						else
							datetemplate=datetemplate+"on this "+"______"+" day of "+"___________________________"+" of "+"______________"+" has deposited at "+depositbranch+" branch";
						
						depositcount++;
					}		
					template=template.replaceAll("@TitleDeedDepositDetails", datetemplate); 
			 }
			
			 if(template.contains("@Securityowneraddress"))
			 {
				 ArrayList arrsecownerRow=new ArrayList();
				 ArrayList arrsecownerlist=new ArrayList();
				 	
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_secowner_addressdetails^"+strappno+"^ ");
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{	 String strCbsACno1=correctNull(rs2.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
  					  arrsecownerlist=new ArrayList();
  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
  					  if(residentType.equals("N"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
  					  }
  					  else
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
  					  }
  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
  					// for minor check
  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
  					     if(rs3!=null){ rs3.close(); }
  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
  					    if(rs3.next()){
  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
  					    }
  					 if(arrappminor.equalsIgnoreCase("Y"))
  					 { 
  							 arrsecownerlist.add(guard_name);
  							arrsecownerlist.add("M/G");	
  					 }
  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("S/o");	
  					  }
  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
  						  arrsecownerlist.add("W/o");	
  					  } 
  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("D/o");	 
  					  }
  					else 
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add(" ");	
  					  }  
  					  
  					  String strAge=Helper.calculateAGE(correctNull(rs2.getString("dob")));
  					  arrsecownerlist.add(Helper.correctNull(strAge));
  					
						ArrayList nonindvRow=new ArrayList();
						  ArrayList temp1=new ArrayList();
						  ArrayList temp2=new ArrayList();
						  String perappid=correctNull(rs2.getString("perapp_id"));
						  String divisiontype="",div_name="",nonindiv="";;
							if(rs!=null){rs.close();}
							int dcount=0,spcount=0,pcount=0,tcount=0;
							String temp="";
							itemp=0;
							String spconcernsubtype="",spsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^SP^198");
							while(rs.next())
							{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
								if(!spconcernsubtype.equals(""))
								{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ spsubtype="dif";	}
								}
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(spsubtype.equals("same"))
							{ 
							if(itemp==1)
								nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
								else
								nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(spsubtype.equals("same"))
									{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								spcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String dconcernsubtype="";	String dsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^D^197");
							while(rs.next())
							{
								if(!dconcernsubtype.equals(""))
								{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ dsubtype="dif";	}
								}
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(dsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its ");	}
							rs.beforeFirst();
							while(rs.next())
							{
								dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(dsubtype.equals("same"))
									{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								dcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String ptconcernsubtype="",ptsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^PT^199");
							while(rs.next())
							{
								if(!ptconcernsubtype.equals(""))
								{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ ptsubtype="dif"; }
								}
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(ptsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(ptsubtype.equals("same"))
									{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								pcount++;
							}
							temp2.add(nonindvRow);
							nonindvRow=new ArrayList();
							itemp=0;
							String tconcernsubtype="",tsubtype="same";
							rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^T^200");
							while(rs.next())
							{
								if(!tconcernsubtype.equals(""))
								{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
									{ tsubtype="dif"; }
								}
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								itemp++;
							}
							if(itemp!=0)
								if(tsubtype.equals("same"))
							{if(itemp==1)
								nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
							else
							nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
							else
							{ nonindvRow.add(" Represented by its "); }
							rs.beforeFirst();
							while(rs.next())
							{
								tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
								temp1=new ArrayList();
								if(itemp==1)
								{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								else
								{
									if(tsubtype.equals("same"))
									{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
									else
									{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
								}
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
								temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
								temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
								String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
								// for minor check
								 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
								     if(rs3!=null){ rs3.close(); }
								 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
								    if(rs3.next()){
								      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
								      guard_name=correctNull(rs3.getString("minor_guard_name"));
								    }
								  if(arrappminor.equalsIgnoreCase("Y"))
								  { temp1.add(guard_name);
								   temp1.add("M/G");	 }
								  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
								  {  temp1.add("S/o");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
								  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
								  { temp1.add("W/o");  
								  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
								  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
								  { temp1.add("D/o");
								  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								  else
								  {  temp1.add(" ");
								  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
								nonindvRow.add(temp1);
								tcount++;
							}
							temp2.add(nonindvRow);
							arrsecownerlist.add(temp2);
							arrsecownerlist.add(correctNull(rs2.getString("PERAPP_CONSTITUTIONNEW")));
  					  
  					  arrsecownerRow.add(arrsecownerlist);
					}
					
					  StringBuffer tempappList=new StringBuffer();	
					  tempappList.append("<span align='justify'>");
					  ArrayList arrappRowdet=new ArrayList();
					     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
					     {
					     	for(int i=0;i<arrsecownerRow.size();i++)
					     	{
					     		arrappRowdet=(ArrayList)arrsecownerRow.get(i);
							     String constition=(String) arrappRowdet.get(10);
							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
   
					     		if(arrsecownerRow.size()==1)
					     		{
							    	if(constition.equals("01"))
							    	{
							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
							    	}
							    	else
							    	{
					     				if(arrIndvRow.size()>0)
									    {
								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     				for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append(""+temparr1.get(0)+"<br/>");
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+"<br>"+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
									    		}}
						     				}
						     				tempappList.append("");
									    }
					     				else
					     				{
								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
							    	}
					     		}
					     		else
					     		{
					     			if(constition.equals("01"))
					     			{
							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     			}
					     			else
					     			{
					     				if(arrIndvRow.size()>0)
									    {
								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
						     				for(int j=0;j<arrIndvRow.size();j++)
						     				{
									    		ArrayList temparr=new ArrayList();
									    		ArrayList temparr1=new ArrayList();
									    		temparr1=(ArrayList) arrIndvRow.get(j);
									    		if(temparr1.size()>0)
									    		{
									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
									    		for(int k=1;k < temparr1.size();k++)
									    		{
									    			temparr=(ArrayList) temparr1.get(k);
												    tempappList.append(temparr.get(0)+"<br>"+temparr.get(6)+" "+temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
									    		}}
						     				}
						     				tempappList.append("<br>");
									    }
					     				else
					     				{
								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
					     				}
					     				
					     			}
					     		}
					     	}
					     }
					     tempappList.append("</span>");
					     template=template.replaceAll("@Securityowneraddress", tempappList.toString()); 
			 
				 }
			 if(template.contains("@borrowersecuritydetails"))
			 {
				 ArrayList arrsecownerRow=new ArrayList();
				 ArrayList arrsecownerlist=new ArrayList();
				 	
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_borrowerSec_details^"+strappno+"^"+"'a','c'"+"^ ");
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{	  String strCbsACno1=correctNull(rs2.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
  					  arrsecownerlist=new ArrayList();
  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
  					  if(residentType.equals("N"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
  					  }
  					  else
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
  					  }
  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
  					// for minor check
  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno1);
  					     if(rs3!=null){ rs3.close(); }
  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
  					    if(rs3.next()){
  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
  					    }
  					 if(arrappminor.equalsIgnoreCase("Y"))
  					 { 
  						 arrsecownerlist.add(guard_name);
  						arrsecownerlist.add("M/G");	
  					 }
  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("S/o");	
  					  }
  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
  						  arrsecownerlist.add("W/o");	
  					  } 
  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("D/o");	 
  					  }
  					 else 
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add(" ");	
  					  }  
  					  arrsecownerlist.add(Helper.calculateAGE(correctNull(rs2.getString("PERAPP_DOB"))));
  					  arrsecownerRow.add(arrsecownerlist);
					}
					
				 	 StringBuffer tempappList=new StringBuffer();	
				     ArrayList arrappRowdet=new ArrayList();
				     tempappList.append("");	
				     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
				     {
				     	for(int i=0;i<arrsecownerRow.size();i++)
				     	{
				     		 arrappRowdet=(ArrayList)arrsecownerRow.get(i);
				    		 if(arrsecownerRow.size()>1)
				    			 tempappList.append((i+1) +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				    		 else
				    			 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				     	}
				    }
				    template=template.replaceAll("@borrowersecuritydetails", tempappList.toString()); 
			 }
			 
			 
			 if(template.contains("@otherborrowersecuritydetails"))
			 {
				 ArrayList arrsecownerRow=new ArrayList();
				 ArrayList arrsecownerlist=new ArrayList();
				 	
				 	if(rs2!=null){ rs2.close(); }
				 	strQuery=SQLParser.getSqlQuery("sel_borrowerSec_details^"+strappno+"^"+"'g','o','p'"+"^ ");
					rs2=DBUtils.executeQuery(strQuery);
					while(rs2.next())
					{
						 String strCbsACno1=correctNull(rs2.getString("PERAPP_CBSID"));
					  String residentType=correctNull(rs2.getString("INDINFO_RESIDENT_STATUS"));
  					  arrsecownerlist=new ArrayList();
  					  arrsecownerlist.add(correctNull(rs2.getString("FULLNAME")));
  					  if(residentType.equals("N"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMADDR2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMCITYNAME")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMZIP")));
      					  arrsecownerlist.add(correctNull(rs2.getString("CON_COMSTATENAME")));
  					  }
  					  else
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr1")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permaddr2")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permcity")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permzip")));
      					  arrsecownerlist.add(correctNull(rs2.getString("con_permstate")));
  					  }
  					  String arrappchilddesp=correctNull(rs2.getString("PERAPP_SEX"));
  					// for minor check
  					 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno1);
  					     if(rs3!=null){ rs3.close(); }
  					 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
  					    if(rs3.next()){
  					      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
  					      guard_name=correctNull(rs3.getString("minor_guard_name"));
  					    }
  					 if(arrappminor.equalsIgnoreCase("Y"))
  					 { 
  						 arrsecownerlist.add(guard_name);
  						arrsecownerlist.add("M/G");	
  					 }
  					  else if(arrappchilddesp.equalsIgnoreCase("M"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("S/o");	
  					  }
  					  else if(arrappchilddesp.equalsIgnoreCase("F") && Helper.correctNull(rs2.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("INDINFO_SPOUSE_NAME")));
  						  arrsecownerlist.add("W/o");	
  					  } 
  					  else if(arrappchilddesp.equalsIgnoreCase("F"))
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add("D/o");	 
  					  }
  					 else 
  					  {
  						  arrsecownerlist.add(correctNull(rs2.getString("PERAPP_FATNAME")));
  						  arrsecownerlist.add(" ");	
  					  }  
  					  arrsecownerlist.add(Helper.calculateAGE(correctNull(rs2.getString("PERAPP_DOB"))));
  					  arrsecownerRow.add(arrsecownerlist);
					}
					
				 	 StringBuffer tempappList=new StringBuffer();	
				     ArrayList arrappRowdet=new ArrayList();
				     tempappList.append("");	
				     if(arrsecownerRow.size()>0 && arrsecownerRow!=null)
				     {
				     	for(int i=0;i<arrsecownerRow.size();i++)
				     	{
				     		 arrappRowdet=(ArrayList)arrsecownerRow.get(i);
				    		 if(arrsecownerRow.size()>1)
				    			 tempappList.append((i+1) +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");
				    		 else
				    			 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". "+"<br>");

				     	}
				    }
				    template=template.replaceAll("@otherborrowersecuritydetails", tempappList.toString()); 
			 }
			 if(template.contains("@odosbalance"))
			 {
				 if(ApplicationParams.getCbsIntegration().equalsIgnoreCase("TRUE"))
					 strQuery = SQLParser.getCBSSqlQuery("selliabpullingdirectacopening^"+strCbsACno);
				 else
					 strQuery = SQLParser.getCBSSqlQuery("selliabpullingdirectacopening1^"+strCbsACno);
				 
				 if(rs2!=null){ rs2.close(); }
				 rs2=DBUtils.executeQueryCBSConnection(strQuery);
				 if(rs2.next())
				 {
					 double dblOS=Double.parseDouble(Helper.correctDouble(rs2.getString("outstanding")));
					 DecimalFormat d=new DecimalFormat("0.00");
					 if(dblOS<0)
						 template=template.replaceAll("@odosbalance", "Rs. "+d.format(dblOS)+" /- [being the last figure in the account] as the balance due"); 
					 else
					 	template=template.replaceAll("@odosbalance", "Rs. "+d.format(dblOS)+" /- (Cr) [being the last figure in the account] as balance "); 

				 }
				 else
				 {
					 template=template.replaceAll("@odosbalance","");
				 }
				 
			 }
			 
			 //Security Keywords
			 
			 if(rs!=null){ rs.close();	}
			 ArrayList secDetails = new ArrayList();
			 ArrayList secROWDetails = new ArrayList();
			 String desc="and c.CUS_SEC_TYPE<>1";
			 strQuery=SQLParser.getSqlQuery("sel_secDescrip_naturecharge^"+ strappno+"^"+hidfacslno+"^"+desc);
			 rs=DBUtils.executeQuery(strQuery);
				while (rs.next())
				{
					secDetails = new ArrayList();
					secDetails.add(Helper.correctInt((String)rs.getString("CUS_SEC_NATUREOFCHARGE")));
					secDetails.add(correctNull(Helper.CLOBToString(rs.getClob("APP_SEC_DESCRIPTION"))));
					secROWDetails.add(secDetails);
				}
				
				//clean security
				if(rs!=null){	rs.close();	}
				desc="and c.CUS_SEC_TYPE=1";
				 strQuery=SQLParser.getSqlQuery("sel_secDescrip_naturecharge^"+ strappno+"^"+hidfacslno+"^"+desc);
				 rs=DBUtils.executeQuery(strQuery);
				while (rs.next())
				{
					secDetails = new ArrayList();
					secDetails.add("1111");
					secDetails.add(correctNull(Helper.CLOBToString(rs.getClob("APP_SEC_DESCRIPTION"))));
					secROWDetails.add(secDetails);
				}
				
				hshRecord.put("secDescription_naturecharge",secROWDetails);
			 
				
				//naturecharge-secdesc
				 int tempcount=0;
				 if(template.contains("@hypsecdesc"))
					 tempcount++;
				 if(template.contains("@plsecdesc"))
					 tempcount++;
				 if(template.contains("@assecdesc"))
					 tempcount++;
				 if(template.contains("@trsecdesc"))
					 tempcount++;
				 if(template.contains("@rmsecdesc"))
					 tempcount++;
				 if(template.contains("@emsecdesc"))
					 tempcount++;
				 if(template.contains("@clsecdesc"))
					 tempcount++;
				 
			 if(tempcount>0)
			 {
				 String strtempsec="";
				 String naturechargedesc="";
				for(int j=0;j<tempcount;j++)
				{
					 if(template.contains("@rmsecdesc"))
					 {
						 strtempsec="@rmsecdesc";	 naturechargedesc="6";
					 }
					 if(template.contains("@emsecdesc"))
					 {
						 strtempsec="@emsecdesc";	 naturechargedesc="5";
					 }
					 if(template.contains("@trsecdesc"))
					 {
						 strtempsec="@trsecdesc";	 naturechargedesc="4";
					 }
					 if(template.contains("@assecdesc"))
					 {
						 strtempsec="@assecdesc";	 naturechargedesc="3";
					 }
					 if(template.contains("@plsecdesc"))
					 {
						 strtempsec="@plsecdesc";	 naturechargedesc="2";
					 }
					 if(template.contains("@hypsecdesc"))
					 {
						 strtempsec="@hypsecdesc";	 naturechargedesc="1";
					 }
					 if(template.contains("@clsecdesc"))
					 {
						 strtempsec="@clsecdesc";	 naturechargedesc="1111";
					 }
					 
				  StringBuffer sbDescriptionofSecurity = new StringBuffer();
				  ArrayList arrsecDetails = new ArrayList();
				  ArrayList arrsecDetailCOL = new ArrayList();
				  arrsecDetails=(ArrayList)hshRecord.get("secDescription_naturecharge");
				  String naturecharge="";
				  int counttemp=0,k=0;
				  if(arrsecDetails.size()>0 && arrsecDetails!=null)
					{
					    for(int i=0;i<arrsecDetails.size();i++)
						{
					    	arrsecDetailCOL=(ArrayList) arrsecDetails.get(i);
							naturecharge=(String) arrsecDetailCOL.get(0);
							if(naturecharge.equals(naturechargedesc))
							{
								counttemp++;
							}
						}
						for(int i=0;i<arrsecDetails.size();i++)
						{
							arrsecDetailCOL=(ArrayList) arrsecDetails.get(i);
							naturecharge=(String) arrsecDetailCOL.get(0);
							
							if(naturecharge.equals(naturechargedesc))
							{
								if(counttemp>1)
								{
									sbDescriptionofSecurity.append((k+1)+")  "+arrsecDetailCOL.get(1)+"<br>"); 
									k++;
								}
								else
								{
									sbDescriptionofSecurity.append(arrsecDetailCOL.get(1)+"<br>");
								}
							}	
						}
					}
				  template=template.replaceAll(strtempsec, sbDescriptionofSecurity.toString()); 
				}
			}
			 
			//naturecharge-owneradderss & ownerdetails
			 tempcount=0;
			 if(template.contains("@hysecurityowneraddress") || template.contains("@hysecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@emsecurityowneraddress") || template.contains("@emsecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@assecurityowneraddress") || template.contains("@assecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@plsecurityowneraddress") || template.contains("@plsecurityownerdetails"))
				 tempcount++; 
			 if(template.contains("@rmsecurityowneraddress") || template.contains("@rmsecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@trsecurityowneraddress") || template.contains("@trsecurityownerdetails"))
				 tempcount++;
			 if(template.contains("@clsecurityowneraddress") || template.contains("@clsecurityownerdetails"))
				 tempcount++;
			 
			 if(tempcount>0)
			 {

				 String strtempsec="";
				 String naturechargedesc="";
				 String strtempownerdet="";
				 
				 for(int j=0;j<tempcount;j++)
				 {
					 if(template.contains("@rmsecurityowneraddress") || template.contains("@rmsecurityownerdetails"))
						 {
							 strtempsec="@rmsecurityowneraddress";	 naturechargedesc="6";  strtempownerdet="@rmsecurityownerdetails";
						 }
						 if(template.contains("@emsecurityowneraddress") || template.contains("@emsecurityownerdetails"))
						 {
							 strtempsec="@emsecurityowneraddress";	 naturechargedesc="5";  strtempownerdet="@emsecurityownerdetails";
						 }
						 if(template.contains("@trsecurityowneraddress") || template.contains("@trsecurityownerdetails"))
						 {
							 strtempsec="@trsecurityowneraddress";	 naturechargedesc="4";  strtempownerdet="@trsecurityownerdetails";
						 }
						 if(template.contains("@assecurityowneraddress") || template.contains("@assecurityownerdetails"))
						 {
							 strtempsec="@assecurityowneraddress";	 naturechargedesc="3";  strtempownerdet="@assecurityownerdetails";
						 }
						 if(template.contains("@plsecurityowneraddress") || template.contains("@plsecurityownerdetails"))
						 {
							 strtempsec="@plsecurityowneraddress";	 naturechargedesc="2";  strtempownerdet="@plsecurityownerdetails";
						 }
						 if(template.contains("@hysecurityowneraddress") || template.contains("@hysecurityownerdetails"))
						 {
							 strtempsec="@hysecurityowneraddress";	 naturechargedesc="1";  strtempownerdet="@hysecurityownerdetails";
						 }
						 if(template.contains("@clsecurityowneraddress") || template.contains("@clsecurityownerdetails"))
						 {
							 strtempsec="@clsecurityowneraddress";	 naturechargedesc="1111";  strtempownerdet="@clsecurityownerdetails";
						 }
						 
					    if(rs1!=null){rs1.close();}
						if(naturechargedesc.equals("1111"))
							 rs1=DBUtils.executeLAPSQuery("sel_secOwneraddress_naturecharge_clean^"+strappno+"^"+hidfacslno);
						else
							 rs1=DBUtils.executeLAPSQuery("sel_secOwneraddress_naturecharge^"+strappno+"^"+naturechargedesc+"^"+hidfacslno);
						arrappRow=new ArrayList();
						 while(rs1.next())
						  {		strCbsACno=correctNull(rs1.getString("PERAPP_CBSID"));
							  String residentType=correctNull(rs1.getString("INDINFO_RESIDENT_STATUS"));
							  arrappList=new ArrayList();
							  arrappList.add(correctNull(rs1.getString("FULLNAME"))); //0
							 if(residentType.equals("N"))
							 {
								  arrappList.add(correctNull(rs1.getString("CON_COMADDR1"))); //1
								  arrappList.add(correctNull(rs1.getString("CON_COMADDR2")));//2
								  arrappList.add(correctNull(rs1.getString("CON_COMCITYNAME")));//3
								  arrappList.add(correctNull(rs1.getString("CON_COMZIP")));//4
								  arrappList.add(correctNull(rs1.getString("CON_COMSTATENAME")));//5
							 }
							 else
							 {
								  arrappList.add(correctNull(rs1.getString("CON_PERMADDR1"))); //1
								  arrappList.add(correctNull(rs1.getString("CON_PERMADDR2")));//2
								  arrappList.add(correctNull(rs1.getString("CON_PERMCITY")));//3
								  arrappList.add(correctNull(rs1.getString("CON_PERMZIP")));//4
								  arrappList.add(correctNull(rs1.getString("CON_PERMSTATE")));//5
							 }
							  String arrappchilddesp=correctNull(rs1.getString("PERAPP_SEX"));
							// for minor check
							  strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
							      if(rs3!=null){ rs3.close(); }
							  rs3=DBUtils.executeQueryCBSConnection(strQuery1);
							     if(rs3.next()){
							       arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
							       guard_name=correctNull(rs3.getString("minor_guard_name"));
							     }
							 if(arrappminor.equalsIgnoreCase("Y"))
							  { 
							  	arrappList.add(guard_name);
							  	arrappList.add("M/G");	 
							  	}
							  else if(arrappchilddesp.equalsIgnoreCase("M"))
							  {
								  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
								  arrappList.add("S/o");	
							  }
							  else if(arrappchilddesp.equalsIgnoreCase("F")  && Helper.correctNull(rs1.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
							  {
								  arrappList.add(correctNull(rs1.getString("INDINFO_SPOUSE_NAME")));//6 
								  arrappList.add("W/o");	
							  } 
							  else if(arrappchilddesp.equalsIgnoreCase("F"))
							  {
								  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
								  arrappList.add("D/o");	
							  } 
							  else 
							  {
								  arrappList.add(correctNull(rs1.getString("PERAPP_FATNAME")));//6
								  arrappList.add(" ");	
							  }  
							  String strAge=Helper.calculateAGE(correctNull(rs1.getString("DOB")));
							  arrappList.add(Helper.correctNull(strAge));
							 
								ArrayList nonindvRow=new ArrayList();
								  ArrayList temp1=new ArrayList();
								  ArrayList temp2=new ArrayList();
								  String perappid=correctNull(rs1.getString("perapp_id"));
								  String divisiontype="",div_name="",nonindiv="";;
									if(rs!=null){rs.close();}
									int dcount=0,spcount=0,pcount=0,tcount=0;
									String temp="";
									itemp=0;
									String spconcernsubtype="",spsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^SP^198");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!spconcernsubtype.equals(""))
										{ if(!spconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ spsubtype="dif";	}
										}
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(spsubtype.equals("same"))
									{ 
											if(itemp==1)
											nonindvRow.add(" Represented by its "+spconcernsubtype+", ");
											else
											nonindvRow.add(" Represented by its "+spconcernsubtype+"S, ");
									}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										spconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(spsubtype.equals("same"))
											{ temp1.add(""+strArrsno[spcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[spcount]+") "+ spconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										 strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
										     if(rs3!=null){ rs3.close(); }
										 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
										    if(rs3.next()){
										      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
										      guard_name=correctNull(rs3.getString("minor_guard_name"));
										    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");  
										  	temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));}  
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  	temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  	 temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										spcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String dconcernsubtype="";	String dsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^D^197");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!dconcernsubtype.equals(""))
										{if(!dconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ dsubtype="dif";	}
										}
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(dsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+dconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+dconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its ");	}
									rs.beforeFirst();
									while(rs.next())
									{
										dconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(dsubtype.equals("same"))
											{temp1.add(""+strArrsno[dcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[dcount]+") "+ dconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
										  if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										dcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String ptconcernsubtype="",ptsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^PT^199");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!ptconcernsubtype.equals(""))
										{ if(!ptconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ ptsubtype="dif"; }
										}
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(ptsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+ptconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+ptconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										ptconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(ptsubtype.equals("same"))
											{ temp1.add(""+strArrsno[pcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{ temp1.add(""+strArrsno[pcount]+") "+ ptconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
										 if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");  
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else 
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										pcount++;
									}
									temp2.add(nonindvRow);
									nonindvRow=new ArrayList();
									itemp=0;
									String tconcernsubtype="",tsubtype="same";
									rs=DBUtils.executeLAPSQuery("comapp_division_details_selectfew_oldid^"+perappid+"^T^200");
									while(rs.next())
									{	strCbsACno=correctNull(rs.getString("PERAPP_CBSID"));
										if(!tconcernsubtype.equals(""))
										{if(!tconcernsubtype.equals(Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"))))
											{ tsubtype="dif"; }
										}
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										itemp++;
									}
									if(itemp!=0)
										if(tsubtype.equals("same"))
									{if(itemp==1)
										nonindvRow.add(" Represented by its "+tconcernsubtype+", ");
									else
									nonindvRow.add(" Represented by its "+tconcernsubtype+"S, ");}
									else
									{ nonindvRow.add(" Represented by its "); }
									rs.beforeFirst();
									while(rs.next())
									{
										tconcernsubtype=Helper.correctNull((String)rs.getString("COMAPP_DIVISIONSUBTYPE"));
										temp1=new ArrayList();
										if(itemp==1)
										{ temp1.add(Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										else
										{
											if(tsubtype.equals("same"))
											{ temp1.add(""+strArrsno[tcount]+") "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
											else
											{temp1.add(""+strArrsno[tcount]+") "+ tconcernsubtype+ " : "+Helper.correctNull((String)rs.getString("comapp_div_name"))); }
										}
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_address")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_city")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_pin")));
										temp1.add(Helper.correctNull((String)rs.getString("comapp_div_state")));
										temp1.add(Helper.calculateAGE(((String)rs.getString("PERAPP_DOB"))));
										String strPERAPP_SEX=correctNull(rs.getString("PERAPP_SEX"));
										// for minor check
										strQuery1 = SQLParser.getCBSSqlQuery("validate_minor_flag^"+strCbsACno);
									     if(rs3!=null){ rs3.close(); }
									 rs3=DBUtils.executeQueryCBSConnection(strQuery1);
									    if(rs3.next()){
									      arrappminor= correctNull(rs3.getString("CUST_MINOR_FLG"));
									      guard_name=correctNull(rs3.getString("minor_guard_name"));
									    }
										  if(arrappminor.equalsIgnoreCase("Y"))
										  { temp1.add(guard_name);
										   temp1.add("M/G");	 }
										  else if(strPERAPP_SEX.equalsIgnoreCase("M"))
										  {  temp1.add("S/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); }
										  else if(strPERAPP_SEX.equalsIgnoreCase("F") && Helper.correctNull(rs.getString("perapp_marstat")).equalsIgnoreCase("MARID"))
										  { temp1.add("W/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("indinfo_spouse_name"))));} 
										  else if(strPERAPP_SEX.equalsIgnoreCase("F"))
										  { temp1.add("D/o");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										  else
										  {  temp1.add(" ");
										  temp1.add(Helper.correctNull(((String)rs.getString("PERAPP_FATNAME")))); } 
										nonindvRow.add(temp1);
										tcount++;
									}
									temp2.add(nonindvRow);
									arrappList.add(temp2);
									arrappList.add(correctNull(rs1.getString("PERAPP_CONSTITUTIONNEW")));
									arrappList.add(correctNull(rs1.getString("PERAPP_CBSID")));
									arrappList.add(correctNull(rs1.getString("app_type")));

							  arrappRow.add(arrappList);
						  }
						 // hshRecord.put("arrappList",arrappRow);
					
					
						 if(template.contains(strtempsec))
						 {
	    					  StringBuffer tempappList=new StringBuffer();	
	    					  tempappList.append("<span align='justify'>");
	    					  ArrayList arrappRowdet=new ArrayList();
	    					     if(arrappRow.size()>0 && arrappRow!=null)
	    					     {
	    					     	for(int i=0;i<arrappRow.size();i++)
	    					     	{
	    					     		arrappRowdet=(ArrayList)arrappRow.get(i);
	    							     String constition=(String) arrappRowdet.get(10);
	    							     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
	    							    String borrowername=Helper.correctNull((String) arrappRowdet.get(0));
	    						     	String cbsid=Helper.correctNull((String) arrappRowdet.get(11));
	    						     	String strapptype=Helper.correctNull((String) arrappRowdet.get(12));
	    						     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);

	    					     		if(arrappRow.size()==1)
	    					     		{
	    							    	if(constition.equals("01"))
	    							    	{
	    							     		tempappList.append(" "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    							    	}
	    							    	else
	    							    	{
	    					     				if(arrIndvRow.size()>0)
	    									    {
	    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    						     				for(int j1=0;j1<arrIndvRow.size();j1++)
	    						     				{
	    									    		ArrayList temparr=new ArrayList();
	    									    		ArrayList temparr1=new ArrayList();
	    									    		temparr1=(ArrayList) arrIndvRow.get(j1);
	    									    		if(temparr1.size()>0)
	    									    		{
	    									    		tempappList.append(""+temparr1.get(0)+"<br/>");
	    									    		for(int k=1;k < temparr1.size();k++)
	    									    		{
	    									    			temparr=(ArrayList) temparr1.get(k);
	    												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+" "+temparr.get(7)+" <br> "+temparr.get(1)+"<br>"+temparr.get(2)+" <br> "+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
	    									    		}}
	    						     				}
	    						     				tempappList.append("");
	    									    }
	    					     				else
	    					     				{
	    								     		tempappList.append(arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    					     				}
	    							    	}
	    					     		}
	    					     		else
	    					     		{
	    					     			if(constition.equals("01"))
	    					     			{
	    							     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+"<br/>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    					     			}
	    					     			else
	    					     			{
	    					     				if(arrIndvRow.size()>0)
	    									    {
	    								     		tempappList.append(""+(i+1)+". "+ arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    						     				for(int j1=0;j1<arrIndvRow.size();j1++)
	    						     				{
	    									    		ArrayList temparr=new ArrayList();
	    									    		ArrayList temparr1=new ArrayList();
	    									    		temparr1=(ArrayList) arrIndvRow.get(j1);
	    									    		if(temparr1.size()>0)
	    									    		{
	    									    		tempappList.append("<br>"+temparr1.get(0)+"<br/>");
	    									    		for(int k=1;k < temparr1.size();k++)
	    									    		{
	    									    			temparr=(ArrayList) temparr1.get(k);
	    												    tempappList.append(temparr.get(0)+" <br> "+temparr.get(6)+" "+temparr.get(7)+"<br>"+temparr.get(1)+"<br> "+temparr.get(2)+" <br>"+temparr.get(3)+"<br> "+temparr.get(4)+"<br><br> ");
	    									    		}}
	    						     				}
	    						     				tempappList.append("<br>");
	    									    }
	    					     				else
	    					     				{
	    								     		tempappList.append(""+(i+1)+". "+arrappRowdet.get(0)+"<br>"+arrappRowdet.get(1)+"<br>"+arrappRowdet.get(2)+"<br>"+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+"<br>"+arrappRowdet.get(5)+"<br><br>");
	    					     				}
	    					     				
	    					     			}
	    					     		}
	    					     	}
	    					     }
	    					     tempappList.append("</span>");
	    					     template=template.replaceAll(strtempsec, tempappList.toString()); 
						 }
						 int appcoappdetailslno=1;
						 if(template.contains(strtempownerdet))
						 {
						 	StringBuffer tempappList=new StringBuffer();	
						 	
						     ArrayList arrappRowdet=new ArrayList();
						     tempappList.append("");	
						     if(arrappRow.size()>0 && arrappRow!=null)
						     {
						     	for(int i=0;i<arrappRow.size();i++)
						     	{
						     		 arrappRowdet=(ArrayList)arrappRow.get(i);
								     String constition=(String) arrappRowdet.get(10);
								     ArrayList arrIndvRow= (ArrayList) arrappRowdet.get(9);
								     
								     if((arrappRow.size()==1))
								     {
								    	 if(constition.equals("01"))
										  {
								    		 tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										  }
								    	 else
								    	 {
										    	if(arrIndvRow.size()>0)
										    	{
										    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	for(int j1=0;j1<arrIndvRow.size();j1++)
										    	{
										    		ArrayList temparr=new ArrayList();
										    		ArrayList temparr1=new ArrayList();
										    		temparr1=(ArrayList) arrIndvRow.get(j1);
										    		if(temparr1.size()>0)
										    		{
										    		tempappList.append(temparr1.get(0));
										    		for(int k=1;k < temparr1.size();k++)
										    		{
										    			temparr=(ArrayList) temparr1.get(k);
													    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
										    		}}
										    	}
										    	}
										    	else
										    	{
										    		tempappList.append(arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	}
								    	 }
								     }
								     else
								     {
									      if(constition.equals("01"))
										  {
											 tempappList.append(""+ appcoappdetailslno+ ". "+arrappRowdet.get(0)+", "+arrappRowdet.get(7)+" "+arrappRowdet.get(6)+", aged about "+arrappRowdet.get(8)+" years, residing at "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										  }
									      else
									      {
										    	if(arrIndvRow.size()>0)
										    	{
													tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
											    	for(int j1=0;j1<arrIndvRow.size();j1++)
											    	{
											    		ArrayList temparr=new ArrayList();
											    		ArrayList temparr1=new ArrayList();
											    		temparr1=(ArrayList) arrIndvRow.get(j1);
											    		if(temparr1.size()>0)
											    		{
											    		tempappList.append(temparr1.get(0));
											    		for(int k=1;k <temparr1.size();k++)
											    		{
											    			temparr=(ArrayList) temparr1.get(k);
														    tempappList.append(temparr.get(0)+" "+temparr.get(6)+" "+temparr.get(7)+", "+temparr.get(1)+", "+temparr.get(2)+" - "+temparr.get(3)+", "+temparr.get(4)+". ");
											    		}
											    		}
											    	}
										    	}
										    	else
										    	{
													  tempappList.append(""+ appcoappdetailslno +". "+arrappRowdet.get(0)+", "+arrappRowdet.get(1)+", "+arrappRowdet.get(2)+", "+arrappRowdet.get(3)+" - "+arrappRowdet.get(4)+", "+arrappRowdet.get(5)+". ");
										    	}
									      }
									      appcoappdetailslno++;
								     }
								     tempappList.append("<br><br>");
						     	}
						    }
						     template=template.replaceAll(strtempownerdet, tempappList.toString()); 
						 }
					}
			 }
			 
			 //Machinery hypothecation
			 if(template.contains("@machineryhypothecation"))
			 {
				 if(rs!=null)
		     			rs.close();
					 ArrayList hypmachRow= new ArrayList();

				 	strQuery = SQLParser.getSqlQuery("sel_securityhyp_Machinary^"+strappno+"^"+hidfacslno);
					rs = DBUtils.executeQuery(strQuery);
					while(rs.next())
					{
						String temp="Hypothecation of "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_MACHINERY_TYPE")))+" "+
									Helper.underLine(3,Helper.correctNull((String) rs.getString("sec_machinetype")))+" (Model - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("sec_year")))+") valued at Rs."
									+Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_NETSECURITY")))+"/- installed in the building bearing Door no. "+
									Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_BELONGSTO_DOORNO")))+ " situated in "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS1")))
									+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS2")))
									+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_PINCODE")))
									+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_MACHINERY_BELONGS")))
									+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_MACHINERY_BELONGS_NAME")))+".";
						hypmachRow.add(temp);
					}
					
					 StringBuffer sbhypmach = new StringBuffer();
					  ArrayList arrmachTemp = new ArrayList();
					  
					  sbhypmach.append(" ");
					  String strVal1 = "";
					  String temp2;
					  if(hypmachRow.size()>0 && hypmachRow!=null)
					  {
						  if(hypmachRow.size()==1)
						  {
							  temp2=(String) hypmachRow.get(0);
							  sbhypmach.append(temp2);
						  }
						  else
						  {
							  for(int i=0;i<hypmachRow.size();i++)
							  {
								  temp2=(String) hypmachRow.get(i); 
								  sbhypmach.append((i+1)+". "+temp2+"<br><br>");
							  }
						  }
					  }
					  template=template.replaceAll("@machineryhypothecation", sbhypmach.toString()); 
			 } 
		 
		//crop hypothecation 
			 
				 if(template.contains("@crophypothecation"))
				 {
					 if(rs!=null)
			     			rs.close();
						 ArrayList hypcropRow= new ArrayList();
					 	strQuery = SQLParser.getSqlQuery("sel_securityhyp_Crop^"+strappno+"^"+hidfacslno);
						rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							String temp="Hypothecation of "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_CLASSIFICATION")))+" valued at Rs."+
										Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_NETSECURITY")))+"/-"+" in"+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_AREA")))+ " "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_MEASUREMENT")))
										+" of land situated in Survey No"+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_SUR_NO")))
										+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS_1")))+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS_2")))
										+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))+" - "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_PIN")))
										+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_SALUTATION")))
										+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_BELONGING")))+".";
							hypcropRow.add(temp);
						}
						
						 StringBuffer sbhypcrop = new StringBuffer();
						  ArrayList arrCropTemp = new ArrayList();
						  
						  sbhypcrop.append(" ");
						  String strVal1 = "";
						  String temp2;
						  if(hypcropRow.size()>0 && hypcropRow!=null)
						  {
							  if(hypcropRow.size()==1)
							  {
								  temp2=(String) hypcropRow.get(0);
								  sbhypcrop.append(temp2);
							  }
							  else
							  {
								  for(int i=0;i<hypcropRow.size();i++)
								  {
									  temp2=(String) hypcropRow.get(i); 
									  sbhypcrop.append((i+1)+". "+temp2+"<br><br>");
								  }
							  }
						  }
						  template=template.replaceAll("@crophypothecation", sbhypcrop.toString()); 
				 }
				 
	 //Stockhypothetication
				
				 if(template.contains("@stockhypothecation"))
				 {
					 if(rs!=null)
			     			rs.close();
						 ArrayList hypstkRow= new ArrayList();
						 
					 strQuery = SQLParser.getSqlQuery("sel_securityhyp_stock^"+strappno+"^"+hidfacslno);
					 rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							String temp="Hypothecation of stock stored/stacked in Door No "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_STOCK_SURVEY")))+","+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS1")))
							+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS2")))+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(3,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))
							+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_STOCK_ZIP")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_STOCK_SAL")))
							+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_STOCK_NAME")))+".";
							hypstkRow.add(temp);
						}
						StringBuffer sbhypstock = new StringBuffer();
						ArrayList arrstkTemp = new ArrayList();
						  
						  sbhypstock.append(" ");
						  String strVal1 = "";
						  String temp2;
						  if(hypstkRow.size()>0 && hypstkRow!=null)
						  {
							  if(hypstkRow.size()==1)
							  {
								  temp2=(String) hypstkRow.get(0);
								  sbhypstock.append(temp2);
							  }
							  else
							  {
								  for(int i=0;i<hypstkRow.size();i++)
								  {
									  temp2=(String) hypstkRow.get(i); 
									  sbhypstock.append((i+1)+". "+temp2+"<br><br>");
								  }
							  }
						  }
						  template=template.replaceAll("@stockhypothecation", sbhypstock.toString()); 
				 }	 
				 
				 
				 //furniturehypothecation
				 if(template.contains("@furniturehypothecation"))
				 {
					 if(rs!=null)
			     			rs.close();
						 ArrayList hypfurRow= new ArrayList();
					 strQuery = SQLParser.getSqlQuery("sel_securityhyp_furniture^"+strappno+"^"+hidfacslno);
					 rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							String temp="Hypothecation of Furniture and Fixtures valued at Rs."+Helper.underLine(2,Helper.correctDouble((String) rs.getString("CUS_SEC_NETSECURITY")))+"/-"+" stored/installed in Door No "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_SURVEYNO")))
							+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS1")))+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_ADDRESS2")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))
							+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_PINCODE")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_SALUTATION")))
							+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_SALUTATION_NAME")))+".";
							hypfurRow.add(temp);
						}
						StringBuffer sbhypfur = new StringBuffer();
						  ArrayList arrfurTemp = new ArrayList();
						  
						  sbhypfur.append(" ");
						  String strVal1 = "";
						  String temp2;
						  if(hypfurRow.size()>0 && hypfurRow!=null)
						  {
							  if(hypfurRow.size()==1)
							  {
								  temp2=(String) hypfurRow.get(0);
								  sbhypfur.append(temp2);
							  }
							  else
							  {
								  for(int i=0;i<hypfurRow.size();i++)
								  {
									  temp2=(String) hypfurRow.get(i); 
									  sbhypfur.append((i+1)+". "+temp2+"<br><br>");
								  }
							  }
						  }
						  template=template.replaceAll("@furniturehypothecation", sbhypfur.toString()); 
				 }
				 
				 //book debt Hypothecation
				
				 if(template.contains("@bookdebtshypothecation"))
				 {
					 if(rs!=null)
			     			rs.close();
						 ArrayList hypbookRow= new ArrayList();
					 strQuery = SQLParser.getSqlQuery("sel_securityhyp_bookdebt^"+strappno+"^"+hidfacslno);
					 rs = DBUtils.executeQuery(strQuery);
						while(rs.next())
						{
							String temp="Hypothecation of Bills Receivables ";
							hypbookRow.add(temp);
						}
						StringBuffer sbhypfur = new StringBuffer();
						ArrayList arrfurTemp = new ArrayList();
						  
						  sbhypfur.append(" ");
						  String strVal1 = "";
						  String temp2;
						  if(hypbookRow.size()>0 && hypbookRow!=null)
						  {
							  if(hypbookRow.size()==1)
							  {
								  temp2=(String) hypbookRow.get(0);
								  sbhypfur.append(temp2);
							  }
							  else
							  {
								  for(int i=0;i<hypbookRow.size();i++)
								  {
									  temp2=(String) hypbookRow.get(i); 
									  sbhypfur.append((i+1)+". "+temp2+"<br><br>");
								  }
							  }
						  }
						  template=template.replaceAll("@bookdebtshypothecation", sbhypfur.toString()); 
				 }
				 
		// Livestock hypothecation
				 
					 if(template.contains("@livestockhypothecation"))
					 {
						 if(rs!=null)
				     			rs.close();
							
							 StringBuffer sbhyplive = new StringBuffer();
							 StringBuffer sbhypliveRow = new StringBuffer();
							 ArrayList arrliveTemp = new ArrayList();
							 strQuery = SQLParser.getSqlQuery("sel_securityhyp_livestock^"+strappno+"^"+hidfacslno);
							rs = DBUtils.executeQuery(strQuery);
							while(rs.next())
							{
								sbhyplive = new StringBuffer();
								ArrayList hypliveRow= new ArrayList();
								ArrayList hypliveDETRow= new ArrayList();
								ArrayList hypliveDETCol= new ArrayList();
								String temp="Hypothecation of "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_TOTNUMBER")))+" "+Helper.underLine(2,Helper.correctNull((String) rs.getString("SEC_NAME")))+"/s totally valued at Rs."+
											Helper.underLine(2,Helper.correctNull((String) rs.getString("CUS_SEC_NETSECURITY")))+"/-"+"  stored in Door No "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_APP_SURVEYNO")))
											+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_APP_ADDR1")))+", "+Helper.underLine(6,Helper.correctNull((String) rs.getString("SEC_APP_ADDR2")))
											+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("CITY_NAME")))+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("DISTRICT_DESC")))+" - "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_APP_PINCODE")))
											+", "+Helper.underLine(2,Helper.correctNull((String) rs.getString("STATE_NAME")))+" belonging to "+Helper.underLine(1,Helper.correctNull((String) rs.getString("SEC_APP_TITLE")))
											+" "+Helper.underLine(3,Helper.correctNull((String) rs.getString("SEC_APP_NAME")))+".";
								hypliveRow.add(temp);
								
								 if(rs2!=null)
						     			rs2.close();
								strQuery = SQLParser.getSqlQuery("sel_securityhyp_livestock_details^"+Helper.correctNull((String) rs.getString("SEC_SECURITYID")));
								rs2 = DBUtils.executeQuery(strQuery);
								while(rs2.next())
								{
									hypliveDETCol=new ArrayList();	
									hypliveDETCol.add(Helper.correctInt((String) rs2.getString("SEC_AGE")));
									hypliveDETCol.add(Helper.correctNull((String) rs2.getString("STAT_DATA_DESC1")));
									hypliveDETCol.add(Helper.correctNull((String) rs2.getString("SEC_IDMARK")));
									hypliveDETRow.add(hypliveDETCol);
								}
								

								  String strVal1 = "";
								  String temp2;
								  if(hypliveRow.size()>0 && hypliveRow!=null)
								  {
									  if(hypliveRow.size()==1)
									  {
										  temp2=(String) hypliveRow.get(0);
										  sbhyplive.append(temp2);
									  }
									  else
									  {
										  for(int i=0;i<hypliveRow.size();i++)
										  {
											  temp2=(String) hypliveRow.get(i); 
											  sbhyplive.append((i+1)+". "+temp2+"<br><br>");
										  }
									  }
								  }
								  
								  if(hypliveDETRow.size()>0 && hypliveDETRow!=null)
								  {
									  sbhyplive.append("<Table border='0' width='95%' align='center'>");
									  sbhyplive.append("<tr align='center'>");
									  sbhyplive.append("<td><b>Sl.No.</b></td>");
									  sbhyplive.append("<td><b>Age</b></td>");
									  sbhyplive.append("<td><b>Breed</b></td>");
									  sbhyplive.append("<td><b>Identification Marks</b></td>");
									  sbhyplive.append("</tr>");
									  
									  ArrayList hypliveDETtemp= new ArrayList();
									  for(int i=0;i<hypliveDETRow.size();i++)
									  {
										  hypliveDETtemp=(ArrayList) hypliveDETRow.get(i); 
										  sbhyplive.append("<tr align='center'>");
										  sbhyplive.append("<td>"+ (i+1)+". &nbsp;</td>");
										  sbhyplive.append("<td>"+ hypliveDETtemp.get(0) +"&nbsp;</td>");
										  sbhyplive.append("<td>"+ hypliveDETtemp.get(1) +"&nbsp;</td>");
										  sbhyplive.append("<td> "+ hypliveDETtemp.get(2) +"&nbsp;</td>");
										  sbhyplive.append("</tr>");
									  }
									  sbhyplive.append("</table>");
								  }
								  sbhypliveRow.append(sbhyplive);
							}
							  template=template.replaceAll("@livestockhypothecation", sbhypliveRow.toString()); 
					 }

		//@stockpremisesowneraddress
					 
		 if(template.contains("@stockpremisesowneraddress") || template.contains("@stockpremisesownerdetails"))
		 {
			 if(rs!=null)
	     			rs.close();
				 ArrayList hypstkRow= new ArrayList();
				 ArrayList hypstkRowAddress= new ArrayList();

			 strQuery = SQLParser.getSqlQuery("sel_securityhyp_stockPremises^"+strappno+"^"+hidfacslno);
			 rs = DBUtils.executeQuery(strQuery);
			 while(rs.next())
				{
					String tempDetails=Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS1"))+", "+Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS2"))+", "+Helper.correctNull((String) rs.getString("CITY_NAME"))
					+", "+Helper.correctNull((String) rs.getString("DISTRICT_DESC"))+" - "+Helper.correctNull((String) rs.getString("SEC_STOCK_ZIP"))+", "+Helper.correctNull((String) rs.getString("STATE_NAME"))+".";
					hypstkRow.add(tempDetails);
					
					String tempAddress=Helper.correctNull((String) rs.getString("SEC_STOCK_SAL"))+" "+Helper.correctNull((String) rs.getString("SEC_STOCK_NAME"))+"<br>"+Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS1"))
					+",<br>"+Helper.correctNull((String) rs.getString("SEC_STOCK_ADDRESS2"))+",<br>"+Helper.correctNull((String) rs.getString("CITY_NAME"))+",<br>"+Helper.correctNull((String) rs.getString("DISTRICT_DESC"))
					+" - "+Helper.correctNull((String) rs.getString("SEC_STOCK_ZIP"))+", <br>"+Helper.correctNull((String) rs.getString("STATE_NAME"))+".";
					hypstkRowAddress.add(tempAddress);
				}
				
				StringBuffer sbhypstockAddress = new StringBuffer();
				StringBuffer sbhypstock = new StringBuffer();
				ArrayList arrstkTemp = new ArrayList();
				  
				  sbhypstock.append(" ");
				  String strVal1 = "";
				  String temp2;
				  if(hypstkRow.size()>0 && hypstkRow!=null)
				  {
					  if(hypstkRow.size()==1)
					  {
						  temp2=(String) hypstkRow.get(0);
						  sbhypstock.append(temp2);
						  temp2=(String) hypstkRowAddress.get(0);
						  sbhypstockAddress.append(temp2);
					  }
					  else
					  {
						  for(int i=0;i<hypstkRow.size();i++)
						  {
							  temp2=(String) hypstkRow.get(i); 
							  sbhypstock.append((i+1)+". "+temp2+"<br><br>");
							  temp2=(String) hypstkRowAddress.get(i);
							  sbhypstockAddress.append((i+1)+". "+temp2+"<br><br>");
						  }
					  }
				  }
				  template=template.replaceAll("@stockpremisesownerdetails", sbhypstock.toString().toUpperCase()); 
				  template=template.replaceAll("@stockpremisesowneraddress", sbhypstockAddress.toString().toUpperCase()); 
		 }

		 
		 if(template.contains("@HUFMinorDetails"))
		 {
			 if(rs!=null){	rs.close(); }
			int i=0;
			
			StringBuffer sbTemp=new StringBuffer();
			
			sbTemp.append("<table border='0' width='95%' align='center' cellpadding='3' cellspacing='0' class='outertable'>");
			sbTemp.append("<tr>");
			sbTemp.append("<td><u>Name</u></td>");
			sbTemp.append("<td><u>Father Name</u></td>");
			sbTemp.append("<td><u>Date of Birth</u></td>");
			sbTemp.append("</tr>");
            
			strQuery=SQLParser.getSqlQuery("sel_kartaname^"+appid+"^K^002");
			rs=DBUtils.executeQuery(strQuery);
			while(rs.next())
			{
				if(Integer.parseInt(Helper.correctInt(rs.getString("age")))<18)
				{
					sbTemp.append("<tr>");
					sbTemp.append("<td>"+(++i)+") "+Helper.correctNull(rs.getString("name"))+"</td>");
					sbTemp.append("<td>"+Helper.correctNull(rs.getString("perapp_fatname"))+"</td>");
					sbTemp.append("<td>"+Helper.correctNull(rs.getString("perapp_dob"))+"</td>");
					sbTemp.append("</tr>");
				}
			}
			
			sbTemp.append("</table>");
			
			 template=template.replaceAll("@HUFMinorDetails", sbTemp.toString()); 
		 }
		 
		 if(template.contains("@Karta"))
		 {
			 if(rs!=null){	rs.close(); }
				strQuery=SQLParser.getSqlQuery("sel_kartaname^"+appid+"^K^001");
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					String borrowername=Helper.correctNull(rs.getString("name"));
		     		String cbsid=Helper.correctNull(rs.getString("PERAPP_CBSID"));
		     		String strapptype=Helper.correctNull(rs.getString("app_type"));
		     	    compbean.updDocborrowerdetails(strappno, strfacsno, docid, borrowername, cbsid,strStatus,strapptype);
					template=template.replaceAll("@Karta", Helper.correctNull(rs.getString("name"))); 
				}
				else
				{
					template=template.replaceAll("@Karta", ""); 
				}
		 }
		 
		 if(template.contains("@natureofactivity"))
		 {
			 if(rs!=null){	rs.close(); }
				strQuery=SQLParser.getSqlQuery("selkyc_kycActivity^"+appid);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					template=template.replaceAll("@natureofactivity", Helper.correctNull((String)rs.getString("kyc_kycActivity"))); 
				}
		 }
		 if(template.contains("@GrpBorrowersno"))
		  {
			 template=template.replaceAll("@GrpBorrowersno", ""); 
		  }
		 
		 if(template.contains("@PageBreak"))
			{
			 	template=template.replaceAll("@PageBreak","<br style='page-break-before:always'>");
			}
		 if(rs!=null){	rs.close(); }
		 ArrayList hypVehicleRow= new ArrayList();
		 ArrayList hypVehicleCol= new ArrayList();
//vehicle hypothication
		 if(template.contains("@VehicleHypothication"))
		 {
			 	strQuery = SQLParser.getSqlQuery("sel_securityhyp_vehicle^"+strappno);
				rs = DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					hypVehicleCol= new ArrayList();
					String vehType=Helper.correctNull((String) rs.getString("SEC_VEHICLETYPE"));
					if(vehType.equals("1"))
					{
						vehType="New";
					}
					else
					{
						vehType="old";
					}
					hypVehicleCol.add(vehType);  //0
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_MAKE")));//1
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_MODEL")));//2
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_PURCHASEVALUE")));//3
					if(Helper.correctNull((String) rs.getString("SEC_HPNO")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");//4
					else
						hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_HPNO")));//4
					
					if(Helper.correctNull((String) rs.getString("SEC_REGNO")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");//5
					else
						hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_REGNO")));//5
					
					if(Helper.correctNull((String) rs.getString("sec_ownername")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
						hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_ownername")));//6
					if(Helper.correctNull((String) rs.getString("sec_ownerdoorno")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_ownerdoorno")));//7
					if(Helper.correctNull((String) rs.getString("sec_owneraddress1")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_owneraddress1")));//8
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_owneraddress2")));//9
					if(Helper.correctNull((String) rs.getString("CITY_NAME")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("CITY_NAME")));//10
					if(Helper.correctNull((String) rs.getString("dISTRICT_DESC")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("dISTRICT_DESC")));//11
					if(Helper.correctNull((String) rs.getString("STATE_NAME")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("STATE_NAME")));//12
					if(Helper.correctNull((String) rs.getString("sec_ownerzipcode")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");
					else
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("sec_ownerzipcode")));//13
					hypVehicleCol.add(Helper.correctNull((String) rs.getString("CON_COUNTRY")));//14
					if(Helper.correctNull((String) rs.getString("SEC_CHASSISNO")).equalsIgnoreCase(""))
						hypVehicleCol.add("________________");//15
					else
						hypVehicleCol.add(Helper.correctNull((String) rs.getString("SEC_CHASSISNO")));//15
				
					hypVehicleRow.add(hypVehicleCol);
				}
				
				 StringBuffer sbhypVehicle = new StringBuffer();
				  ArrayList arrvehTemp = new ArrayList();
				  
				  sbhypVehicle.append(" ");
				  String strVal1 = "";
				  if(hypVehicleRow.size()>0 && hypVehicleRow!=null)
				  {
					  if(hypVehicleRow.size()==1)
					  {
						  arrvehTemp=(ArrayList) hypVehicleRow.get(0);
						  if(!Helper.correctNull((String)arrvehTemp.get(9)).equalsIgnoreCase("")){strVal1=arrvehTemp.get(9)+", ";}
						  sbhypVehicle.append("Hypothecation of "+arrvehTemp.get(0)+" "+arrvehTemp.get(1)+" (Model -  "+arrvehTemp.get(2)+") valued at Rs."+arrvehTemp.get(3)+"/- bearing Chassis number "+arrvehTemp.get(15)+" Engine number "+arrvehTemp.get(4)+" and Registration Number "+arrvehTemp.get(5)+" parked in the building bearing <br>");
					  
						  sbhypVehicle.append("Door No. "+arrvehTemp.get(7)+" ");
						  sbhypVehicle.append("Situated in "+arrvehTemp.get(8)+", "+strVal1+arrvehTemp.get(10)+" - "+arrvehTemp.get(13)+", "+arrvehTemp.get(12)+", "+arrvehTemp.get(14)+", ");
						  sbhypVehicle.append("belonging to Shri/Smt./M/s "+arrvehTemp.get(6) );

					  }
					  else
					  {
						  
						  for(int i=0;i<hypVehicleRow.size();i++)
						  {
							  arrvehTemp=(ArrayList) hypVehicleRow.get(i);
							  if(!Helper.correctNull((String)arrvehTemp.get(9)).equalsIgnoreCase("")){strVal1=arrvehTemp.get(9)+", ";}
							  else{strVal1="";}
							  sbhypVehicle.append((i+1)+". " +"Hypothecation of "+arrvehTemp.get(0)+" "+arrvehTemp.get(1)+" (Model -  "+arrvehTemp.get(2)+") valued at Rs."+arrvehTemp.get(3)+"/- bearing Engine number "+arrvehTemp.get(4)+" and Registration Number "+arrvehTemp.get(5)+" parked in the building bearing <br>");

							  sbhypVehicle.append("Door No : "+arrvehTemp.get(7)+" ");
							  sbhypVehicle.append("Situated in : "+arrvehTemp.get(8)+", "+strVal1+arrvehTemp.get(10)+" - "+arrvehTemp.get(13)+", "+arrvehTemp.get(12)+", "+arrvehTemp.get(14)+", ");
							  sbhypVehicle.append("belonging to Shri/Smt./M/s "+arrvehTemp.get(6)+"<br><br>" );
							  
						  }
					  
					  }
				  }
				
				  template=template.replaceAll("@VehicleHypothication", sbhypVehicle.toString()); 
		 }
		 if(template.contains("@CreditFacilities"))
			{
				StringBuffer sbCreditFacilities=new StringBuffer();
				
				sbCreditFacilities.append("<Table border='1' width='95%' align='center'>");
				sbCreditFacilities.append("<tr align='center'>");
			    sbCreditFacilities.append("<td>Sl.No.</td>");
			    sbCreditFacilities.append("<td>Name of the Bank/ Financiers/others</td>");
			    sbCreditFacilities.append("<td>Nature of facility</td>");
			    sbCreditFacilities.append("<td>Limit (Rs.)</td>");
			    sbCreditFacilities.append("<td>Balance Due (Rs.)</td>");
             sbCreditFacilities.append("<td colspan='2'>Securities & Value (Rs.)</td>");
             sbCreditFacilities.append("</tr>");
            int i=0;
             strQuery = SQLParser.getSqlQuery("perbankingselectNEW^"+Helper.correctNull(rs1.getString("perapp_id")));
				rs = DBUtils.executeQuery(strQuery);
				while(rs.next())
				{
					 sbCreditFacilities.append("<tr align='center'>");
				     sbCreditFacilities.append("<td>"+ (++i)+"&nbsp;</td>");
				     
				     String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
						rs2 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
						if(rs2.next())
						{
							strBankingcode=Helper.correctNull(rs2.getString("STAT_DATA_DESC1"));//1
						}
						else
						{
							strBankingcode="";
						}
					 sbCreditFacilities.append("<td align='left'>"+strBankingcode+"&nbsp;</td>");
					 
					 String perbank_type=Helper.correctInt((String)rs.getString("perbank_type"));
						if(perbank_type.equals("1"))
						{
							perbank_type="Working Capital";
						}
						else if(perbank_type.equals("2"))
						{
							perbank_type="Term Loan";
							
						}
						else
						{
							perbank_type="";
						}
					 sbCreditFacilities.append("<td>"+perbank_type+"&nbsp;</td>");
					 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_limit"))))+"&nbsp;</td>");
					 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_os"))))+"&nbsp;</td>");
				     sbCreditFacilities.append("<td colspan='2'>"+Helper.correctNull(rs.getString("PERBANK_SECDESCRIP"))+" - "+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_SECVALUE"))))+"</td>");
					 sbCreditFacilities.append("</tr>");
				}
				
				if(i==0)
				{
					sbCreditFacilities.append("<tr align='center'>");
					sbCreditFacilities.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
					sbCreditFacilities.append("</tr>");
				}
				

				sbCreditFacilities.append("</table>");
				template=template.replaceAll("@CreditFacilities", sbCreditFacilities.toString());
			}
		 
		 
		//Document print History Added by Aravind.S
 		if(docOpenType.equals("print"))
 		{
	    		String sno="";
	    		strQuery = SQLParser.getSqlQuery("sel_documentprint_count^"+strappno);
				rs = DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
				 sno=Helper.correctInt((String) rs.getString("count"));
				}
	    		
	    		hshQuery=new HashMap();
				arrValues=new ArrayList();
				hshQuery.put("strQueryId","ins_documentprint_history");
				arrValues.add(sno);
				arrValues.add(strappno);
				arrValues.add(documentCode);
				arrValues.add(strUsrID);
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("1",hshQuery);
				hshQueryValues.put("size","1");
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
 		}
			
			 
		}catch (Exception e) {
			log.info("Exception in getDocTemplate1 ==="+e.getMessage());
			throw new EJBException("Exception in getDocTemplate1 ==="+e.getMessage());
		}
		return template;
		
	}
	
	//coporate annexure tab
	public HashMap get_Corp_Annexure(HashMap hshReqValues) 
	{
		ResultSet rs 		= null;
		ResultSet rs1 		= null;
		HashMap hshValues	= new HashMap();
		HashMap hshFinValues= new HashMap();
		String strAppId="",strAppNo="", strVal="";
		int strFinid=0;
		ArrayList arrOutCol	= new ArrayList();
		ArrayList arrOutRow	= new ArrayList();
		String strValuesIn="",strFinvaluesIn="";
		
		FinancialBean finobj	= new FinancialBean();
		
		try
		{
			strAppNo	= correctNull((String)hshReqValues.get("appno"));
			
			rs	= DBUtils.executeLAPSQuery("sel_corpannex_perapp^"+strAppNo);
			if(rs.next())
			{
				strAppId	= (Helper.correctNull((String)rs.getString("DEMO_COMAPPNEWID")));
			}
			
			//strAppId	= correctNull((String)hshReqValues.get("appid"));
			
			
			FinancialBean financial=new FinancialBean();
			HashMap hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			/*	hshRequestValues.put("pageval","LIABILITIES");
			hshRequestValues=financial.getData(hshRequestValues);
			
			hshValues.put("hshReqValues",hshRequestValues);
			
			hshRequestValues	= new HashMap();9
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","ASSETS");
			hshRequestValues=financial.getData(hshRequestValues);
			
			hshValues.put("hshReqValues1",hshRequestValues);

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pageval","PROFIT AND LOSS A/C");
			hshRequestValues=financial.getData(hshRequestValues);
			
			hshValues.put("hshReqValues2",hshRequestValues);*/
			if(rs!=null){rs.close();}
			rs	= DBUtils.executeLAPSQuery("selorgno^"+strAppNo);
			if(rs.next())
			{
				strValuesIn	= correctNull(rs.getString("app_valuesin"));
			}
			
			if(strValuesIn.equals("C")){strValuesIn			= "Crore";}
			else if(strValuesIn.equals("L")){strValuesIn	= "Lacs";}
			else if(strValuesIn.equals("R")){strValuesIn	= "Rs";}
			hshValues.put("strValuesIn", strValuesIn);
			
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("comfinance_finappid^"+strFinid);
			if(rs.next())
			{
				strFinvaluesIn	= correctNull(rs.getString("fin_valuesarein"));
			}
			else{
				strFinvaluesIn	= "R";
			}
			if(rs!=null){rs.close();}
			
			rs	= DBUtils.executeLAPSQuery("sel_financeid^"+strAppNo);
			if(rs.next())
			{
				strFinid	= Integer.parseInt(Helper.correctInt((String)rs.getString("DEMO_FINSTANDARD")));
			}
			
			
			//Financail Values In
			if(strFinvaluesIn.equals("C")){strFinvaluesIn = "Crore";}
			else if(strFinvaluesIn.equals("L")){strFinvaluesIn	= "Lacs";}
			else if(strFinvaluesIn.equals("R")){strFinvaluesIn	= "Rs";}
			hshValues.put("strFinvaluesIn", strFinvaluesIn);
			
			
			/*hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","LIABILITIES");
			hshRequestValues=financial.getData(hshRequestValues);
			hshValues.put("hshReqValues",hshRequestValues);
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","ASSETS");
			hshRequestValues=financial.getData(hshRequestValues);
			hshValues.put("hshReqValues1",hshRequestValues);*/

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","PROFIT AND LOSS ACCOUNT");
			hshRequestValues=financial.getData(hshRequestValues);
			hshRequestValues.put("page","PROFIT AND LOSS ACCOUNT");
			hshValues.put("hshReqValues2",hshRequestValues);
			
			
			
			hshRequestValues	= new HashMap();
			hshRequestValues.put("strAppNo",strAppNo);
			hshRequestValues.put("strAppId",strAppId);
			hshRequestValues.put("printtype","Y");
			hshRequestValues.put("pageval","CorpAnnexure");
			hshRequestValues=financial.getCorpAnnexureII(hshRequestValues);
			hshRequestValues.put("page","CorpAnnexure");
			hshValues.put("hshReqValues5",hshRequestValues);
			
			

			hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA1");
			hshRequestValues.put("pageType","AN4");
			hshRequestValues.put("printYear","Y");
			hshRequestValues=financial.getCorpDataRatio(hshRequestValues);
			hshRequestValues.put("page","CAPITALISATION/COVERAGE/LIQUIDITY RATIOS");
			hshValues.put("hshReqValues3",hshRequestValues);
			
		/*	hshRequestValues	= new HashMap();
			hshRequestValues.put("appno",strAppNo);
			hshRequestValues.put("pagefrom","RA2");
			hshRequestValues.put("pageType","AN4");
			hshRequestValues.put("printYear","Y");
			hshRequestValues=financial.getDataRatio(hshRequestValues);
			hshRequestValues.put("page","PROFITABILITY/TURN OVER/ OPERATING");
			hshValues.put("hshReqValues2",hshRequestValues);*/
			
			//finPosition Comments
			rs=DBUtils.executeLAPSQuery("sel_comments^"+"FPComments^"+strAppNo);
			/*
			 * The code is modified because as per the bank's requirement 
			 * the InterLock Fund comments should always appear as the 
			 * last comments in Annexure IV
			 */
			String strInterLockSno="",strInterLockValue="",strInterLockDesc="";
			while(rs.next())
			{
				strInterLockSno=Helper.correctNull((String)rs.getString("com_sno"));
				arrOutCol=new ArrayList();
				rs1=DBUtils.executeLAPSQuery("getstaticdescription^"+"141^"+Helper.correctNull((String)rs.getString("COM_SNO")));
				if(rs1.next())
				{
					arrOutCol.add(Helper.correctNull((String)rs1.getString("STAT_DATA_DESC1")));
					arrOutCol.add(Helper.correctNull(Helper.CLOBToString(rs.getClob("COM_COMMENTS"))));
				}
				if(!strInterLockSno.equalsIgnoreCase("1"))
					arrOutRow.add(arrOutCol);
				else
				{
					strInterLockDesc=Helper.correctNull((String)rs1.getString("STAT_DATA_DESC1"));
					strInterLockValue=Helper.correctNull(Helper.CLOBToString(rs.getClob("COM_COMMENTS")));
				}
			}
			arrOutCol=new ArrayList();
			arrOutCol.add(strInterLockDesc);
			arrOutCol.add(strInterLockValue);
			arrOutRow.add(arrOutCol);
			hshValues.put("arrCommentsRow",arrOutRow);
			
			//End
		}
		catch(Exception ce)
		{
			throw new EJBException("Error in get_corp_annexure login  "+ce.toString());
		}
		finally
		{
			try
			{	
				if(rs != null){	rs.close();}
			}
			catch(Exception cf)
			{
				throw new EJBException("Error closing the connection "+cf.getMessage());
			}
		}
		return hshValues; 
	}
	
	
	public HashMap get_Corp_AnnexureData(HashMap hshValues) {
		
		String pagetab="";
		ResultSet rs 		= null;
		ResultSet rs1 		= null;
		try
		{
		
			String page = correctNull((String) hshValues.get("pageval"));
			pagetab = Helper.correctNull(page);
		}
			catch(Exception ce)
			{
				throw new EJBException("Error in get_Corp_AnnexureData  "+ce.toString());
			}
			finally
			{
				try
				{	
					if(rs != null){	rs.close();}
				}
				catch(Exception cf)
				{
					throw new EJBException("Error closing the connection "+cf.getMessage());
				}
			}
			return hshValues; 
		}
	
	private String getDocCreatedfacility(HashMap hshValues ){
		ResultSet rs=null;ResultSet rs1=null;
		String strQuery = "";
		String strQuery1 = "";
		java.text.NumberFormat jtn= java.text.NumberFormat.getInstance();
		String strappno=Helper.correctNull((String)hshValues.get("appno"));
		String template=Helper.correctNull((String)hshValues.get("strTemplate"));
		String perapp_id="";
		
		try{
		StringBuffer sbCreditFacilities=new StringBuffer();
		sbCreditFacilities.append("<Table border='1' width='95%' align='center'>");
		sbCreditFacilities.append("<tr align='center'>");
	    sbCreditFacilities.append("<td>Sl.No.</td>");
	    sbCreditFacilities.append("<td>Name of the Bank/ Financiers/others</td>");
	    sbCreditFacilities.append("<td>Nature of facility</td>");
	    sbCreditFacilities.append("<td>Limit (Rs.)</td>");
	    sbCreditFacilities.append("<td>Balance Due (Rs.)</td>");
        sbCreditFacilities.append("<td colspan='2'>Securities & Value (Rs.)</td>");
        sbCreditFacilities.append("</tr>");
        int i=0;
         if(rs1!=null){
				rs1.close();}
         if(rs!=null){
				rs.close();}
         String temp ="";
        strQuery = SQLParser.getSqlQuery("sel_appcoappdetailsprint^"+strappno);
		rs1 = DBUtils.executeQuery(strQuery);
		if(rs1.next())
		{
			temp = Helper.correctNull(rs1.getString("perapp_id"));
		}
		if(rs1!=null){
			rs1.close();}
		rs=DBUtils.executeLAPSQuery("perbankingselectNEW^"+temp);
		while(rs.next())
		{
			 sbCreditFacilities.append("<tr align='center'>");
		     sbCreditFacilities.append("<td>"+ (++i)+"&nbsp;</td>");
		     
		     String strBankingcode=Helper.correctNull((String)rs.getString("perbank_bnkname"));
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^"+"147"+"^"+strBankingcode);
				if(rs1.next())
				{
					strBankingcode=Helper.correctNull(rs1.getString("STAT_DATA_DESC1"));//1
				}
				else
				{
					strBankingcode="";
				}
			 sbCreditFacilities.append("<td align='left'>"+strBankingcode+"&nbsp;</td>");
			 
			 String perbank_type=Helper.correctInt((String)rs.getString("perbank_type"));
				if(perbank_type.equals("1"))
				{
					perbank_type="Working Capital";
				}
				else if(perbank_type.equals("2"))
				{
					perbank_type="Term Loan";
					
				}
				else
				{
					perbank_type="";
				}
			 sbCreditFacilities.append("<td>"+perbank_type+"&nbsp;</td>");
			 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_limit"))))+"&nbsp;</td>");
			 sbCreditFacilities.append("<td align='right'>"+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("perbank_os"))))+"&nbsp;</td>");
		     sbCreditFacilities.append("<td colspan='2'>"+Helper.correctNull(rs.getString("PERBANK_SECDESCRIP"))+" - "+jtn.format(Double.parseDouble(Helper.correctDouble((String)rs.getString("PERBANK_SECVALUE"))))+"</td>");
			 sbCreditFacilities.append("</tr>");
		}
		
		if(i==0)
		{
			sbCreditFacilities.append("<tr align='center'>");
			sbCreditFacilities.append("<td colspan='7' align='center'>  - Nil -&nbsp;</td>");
			sbCreditFacilities.append("</tr>");
		}

		sbCreditFacilities.append("</table>");
		template=template.replaceAll("@CreditFacilities", sbCreditFacilities.toString());
		}
		catch (Exception e)
		{
			throw new EJBException("Error closing the connection "+e.getMessage());
		} 
	return template;	
	}
	
	
	//DMS document for general loan
public HashMap getdmsdoc(HashMap hshValues) {
		HashMap hshRecord=new HashMap();	
		ResultSet rs=null,rs1=null;
		String strAppno="",strQuery="",docpagetype="";
		ArrayList arrCol=new ArrayList();
		ArrayList arrAppRow=new ArrayList();
		ArrayList arrBankRow=new ArrayList();
		ArrayList arrOtherRow=new ArrayList();
		
		JSONObject objOuter = new JSONObject();
		JSONObject data = new JSONObject();
		JSONObject objTable = new JSONObject();
		
		String line = "", strGeneratedFlag = "", strCustId = "", strActiontype = ""
				, strInputJSONRequest = "", strRes = "", strCustDesc = "", strEntity = ""
				, strApplicationNo = "", strFileName = ""
				, strUserId = "", strCreatedDate = "", strSNo = "", strDelFlag = "", strDelUseId =""
				, strDelDate = "", strDocFacslNo ="",strdigiprop="",strDmsRefNo="",strcredentials="",strstatus="";

		HashMap hshQueryValues = new HashMap();
		HashMap hshVal = new HashMap();
		ArrayList arrValue = null;
		ArrayList arrValues = null;
		HashMap hshValue = new HashMap();
		HashMap hshValue1 = new HashMap();
		HashMap hshQuery = new HashMap();
		
		try {
			
			strApplicationNo = Helper.correctNull((String)hshValues.get("appno"));
			
			
			hshQueryValues = new HashMap();
			hshQuery = new HashMap();
			arrValues=new ArrayList();
			
			hshQuery.put("strQueryId","ins_app_test");
			
			arrValues.add(strApplicationNo);
			arrValues.add("1");
			arrValues.add("SHIVA");
			arrValues.add("1");
			
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("size", "1");
			hshQueryValues.put("1",hshQuery);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues, "updateData");
			
			hshQuery=new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strApplicationNo);
			arrValues.add("Y");
			arrValues.add("98765");
			arrValues.add("98765");
			arrValues.add("K10231");
			arrValues.add("SD09876");
			hshQuery.put("arrValues", arrValues);
			hshQuery.put("strQueryId", "ins_appdocuments_proposalapi");
			hshQueryValues.put("1",hshQuery);
			hshQueryValues.put("size","1");
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
			
			//----------------------------------------------------------------------------------//
			
			
						// deleting existing doc
						//delete doc attachmennts
						hshQuery=new HashMap();
						arrValues = new ArrayList();
						arrValues.add(strApplicationNo);
						hshQuery.put("arrValues", arrValues);
						hshQuery.put("strQueryId", "del_appdoc_genappl");
						hshQueryValues.put("1",hshQuery);
						
						//delete external appplication document
						hshQuery=new HashMap();
						arrValues = new ArrayList();
						arrValues.add(strApplicationNo);
						hshQuery.put("arrValues", arrValues);
						hshQuery.put("strQueryId", "del_docattach_genappl");
						hshQueryValues.put("2",hshQuery);
						hshQueryValues.put("size","2");
						EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
						
						
						
						
						
						hshQueryValues = new HashMap();
						hshQuery=new HashMap();
						arrValues = new ArrayList();
						
						hshQuery.put("strQueryId","ins_appdocuments_proposalapi");
						
						arrValues.add("04230001117");
						arrValues.add("Y");
						arrValues.add("1shiva");
						arrValues.add("12121");
						arrValues.add("K10213");
						arrValues.add("035233913096");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("size","1");
						hshQueryValues.put("1",hshQuery);
						EJBInvoker.executeStateLess("dataaccess", hshQueryValues,"updateData");
						
						
			
		} catch (Exception e) {
			throw new EJBException("Exception in getDocumentDetails ========"+e.getMessage());
		}
	return	hshRecord;
	}
	
	
	}
	

