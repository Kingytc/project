package com.sai.laps.ejb.commworkflow;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Types;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;

import javax.ejb.EJBException;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.net.ssl.HttpsURLConnection;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.sai.laps.ejb.DigitalAppInterface.DigitalAppInterfaceBean;
import com.sai.laps.ejb.FinacleBean.FinacleInterfaceBean;
import com.sai.laps.ejb.bankapp.BankAppBean;
import com.sai.laps.ejb.bankappfi.BankAppFIBean;
import com.sai.laps.ejb.financial.FinancialBean;
import com.sai.laps.ejb.retailassessment.RetailAssessmentBean;
import com.sai.laps.helper.ApplicationParams;
import com.sai.laps.helper.AuditTrial;
import com.sai.laps.helper.BeanAdapter;
import com.sai.laps.helper.DBUtils;
import com.sai.laps.helper.EJBInvoker;
import com.sai.laps.helper.Helper;
import com.sai.laps.helper.MISLogger;
import com.sai.laps.helper.SQLParser;
import com.sai.laps.securitymaster.SecurityMasterBean;



import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.PrivateKey;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;

import javax.ejb.EJBException;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.naming.NamingException;
import javax.net.ssl.HttpsURLConnection;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.sai.laps.ejb.DigitalAppInterface.DigitalAppInterfaceBean;
import com.sai.laps.ejb.FinacleBean.FinacleInterfaceBean;
import com.sai.laps.ejb.bankapp.BankAppBean;
import com.sai.laps.ejb.bankappfi.BankAppFIBean;
import com.sai.laps.ejb.financial.FinancialBean;
import com.sai.laps.ejb.retailassessment.RetailAssessmentBean;
import com.sai.laps.helper.ApplicationParams;
import com.sai.laps.helper.AuditTrial;
import com.sai.laps.helper.BeanAdapter;
import com.sai.laps.helper.DBUtils;
import com.sai.laps.helper.EJBInvoker;
import com.sai.laps.helper.Helper;
import com.sai.laps.helper.KblEncyrptionDecyrption;
import com.sai.laps.helper.MISLogger;
import com.sai.laps.helper.OAuthTokenGeneration;
import com.sai.laps.helper.SQLParser;
import com.sai.laps.securitymaster.SecurityMasterBean;
import org.w3c.dom.Node;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import com.google.gson.Gson;
import java.lang.reflect.Type;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

//import javafx.scene.control.Alert;

@Stateless(name = "CommWorkflowBean", mappedName = "CommWorkflowHome")
@Remote (CommWorkflowRemote.class)
public class CommWorkflowBean extends BeanAdapter {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	static Logger log = Logger.getLogger(CommWorkflowBean.class);
	
	public HashMap getHistory(HashMap hshValues)  {
		String strQuery = "";
		String strAppno = "";
		ResultSet rs = null;
		ResultSet rs1 = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrFromflow = new ArrayList();
		ArrayList arrToflow = new ArrayList();
		ArrayList arrFromUsr = new ArrayList();
		ArrayList arrToUsr = new ArrayList();
		ArrayList arrDate = new ArrayList();
		ArrayList arrMailType = new ArrayList();
		HashMap hshQuery = new HashMap();
		HashMap hshQueryValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		String strAppstatus = Helper.correctNull((String) hshValues
				.get("strappstatus"));
		String strPSparams = "", strPageIdPS = "";
		try {

			String strAction = Helper.correctNull((String) hshValues
					.get("hidAction"));
			String strMsg = Helper.correctNull((String) hshValues
					.get("resultmsg"));// added
			strAppno = correctNull((String) hshValues.get("appno"));
			if (rs != null)
				rs.close();

			if (strAction.equalsIgnoreCase("updateparams")) {
				String strFacilitySno = correctNull((String) hshValues
						.get("hidParameters"));
				String strFacdetails[] = new String[2];
				String strFacsno[] = strFacilitySno.split("~");
				for (int i = 0; i < strFacsno.length; i++) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					String facilitydetails = strFacsno[i];
					strFacdetails = facilitydetails.split("\\^");

					hshQuery.put("strQueryId", "upd_apppostsanction");
					arrValues.add(Helper.correctNull(strFacdetails[1]));
					StringTokenizer st = new StringTokenizer(strFacdetails[1],
							"@");
					while (st.hasMoreElements()) {
						if (strPSparams.equalsIgnoreCase(""))
							strPSparams = "'" + (String) st.nextElement() + "'";
						else
							strPSparams = strPSparams + ",'"
									+ (String) st.nextElement() + "'";
					}
					if (!strPSparams.equalsIgnoreCase("")) {
						strQuery = SQLParser.getSqlQuery("selretailpageid_PS^"
								+ strPSparams);
						rs = DBUtils.executeQuery(strQuery);
						strPageIdPS = "";
						while (rs.next()) {
							if (strPageIdPS.equalsIgnoreCase(""))
								strPageIdPS = Helper.correctNull((String) rs
										.getString("ps_pageid"));
							else
								strPageIdPS = strPageIdPS
										+ Helper.correctNull((String) rs
												.getString("ps_pageid"));
						}
					}
					arrValues.add(strPageIdPS);
					arrValues.add(strAppno);
					arrValues.add(Helper.correctNull(strFacdetails[0]));
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
			}

			rs = DBUtils.executeLAPSQuery("commworkflowhistory^" + strAppno);
			while (rs.next()) {
				arrFromUsr.add(rs.getString(1));
				arrToUsr.add(rs.getString(2));
				arrFromflow.add(rs.getString(3));
				arrToflow.add(rs.getString(4));
				arrDate.add(rs.getString(5));
				arrMailType.add(rs.getString(6));
			}
			hshRecord.put("arrFromUsr", arrFromUsr);
			hshRecord.put("arrToUsr", arrToUsr);
			hshRecord.put("arrFromflow", arrFromflow);
			hshRecord.put("arrToflow", arrToflow);
			hshRecord.put("arrDate", arrDate);
			hshRecord.put("arrMailType", arrMailType);
			hshRecord.put("Stateflag", (String) hshValues.get("Stateflag"));

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("app_loantype", correctNull((String) rs
						.getString("app_loantype")));
				hshRecord.put("app_legalcomp", correctNull((String) rs
						.getString("app_legalcomp")));
				hshRecord.put("app_renew_flag", correctNull(rs
						.getString("app_renew_flag")));
				hshRecord.put("app_migration", correctNull(rs
						.getString("app_migration")));
				hshRecord.put("app_prdcode", correctNull(rs
						.getString("app_prdcode")));
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("selloan_details^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("prd_staffprd", correctNull((String) rs
						.getString("prd_staffprd")));
				hshRecord.put("repaymenttype", correctNull((String) rs
						.getString("loan_repaymenttype")));
				hshRecord.put("strLoanType", correctNull((String) rs
						.getString("PRD_LOANTYPE")));
				hshRecord.put("strPrdtype", correctNull((String) rs
						.getString("prd_type")));
				hshRecord.put("PRD_CGTMSE", correctNull((String) rs
						.getString("LOAN_CGTMSE_APPLICABLE")));
			}
			hshRecord.put("hidapplicantid", correctNull((String) hshValues
					.get("hidapplicantid")));
			hshRecord.put("appstatus", strAppstatus);
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("getagrvaluesin^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("appstatus", correctNull((String) rs
						.getString("app_status")));
			}
			strPageIdPS = "";
			strPSparams = "";
			boolean bflag = true;
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_pageid_PSapp^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (bflag) {
					strPageIdPS = "@";
					strPSparams = "@";
					bflag = false;
				}
				strPageIdPS = strPageIdPS
						+ Helper.correctNull(rs.getString("ps_modify_pageid"));
				strPSparams = strPSparams
						+ Helper.correctNull(rs.getString("ps_modify_terms"));

				// hshRecord.put("Page_Id_PS",
				// "@"+Helper.correctNull(rs.getString("ps_modify_pageid")));
				// hshRecord.put("strModifyterms",
				// "@"+Helper.correctNull(rs.getString("ps_modify_terms")));
			}

			hshRecord.put("Page_Id_PS", strPageIdPS);
			hshRecord.put("strModifyterms", strPSparams);

			rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
					+ strAppno);
			if (rs.next()) {
				hshRecord.put("com_proposalsanctype", Helper.correctNull(rs
						.getString("com_proposalsanctype")));
			}

			if (strPSparams.contains("BRTOMCLR")) {
				if (Helper.correctNull(
						(String) hshValues.get("sessionModuleType")).equals(
						"CORP")
						|| Helper.correctNull(
								(String) hshValues.get("sessionModuleType"))
								.equals("AGR")) {
					if (rs != null)
						rs.close();
					rs = DBUtils.executeLAPSQuery("sel_facilitycodedesc_mclr^"
							+ strAppno);
					while (rs.next()) {
						if (Helper.correctNull(
								rs.getString("facility_intsubtype"))
								.equalsIgnoreCase("MCLR")
								|| Helper.correctNull(
										rs.getString("facility_intsubtype"))
										.equalsIgnoreCase("MCLEC"))
							hshRecord.put("strMCLRFlag", "Y");
						else if (Helper.correctNull(
								rs.getString("facility_intsubtype"))
								.equalsIgnoreCase("SMTB")
								|| Helper.correctNull(
										rs.getString("facility_intsubtype"))
										.equalsIgnoreCase("TYGS"))
							hshRecord.put("strEBLRFlag", "Y");
					}
				} else {
					if (rs != null)
						rs.close();
					rs = DBUtils.executeLAPSQuery("sel_emiandgrossrent^"
							+ strAppno);
					if (rs.next()) {
						if (Helper.correctNull(rs.getString("loan_mclrtype"))
								.contains("ST@")
								|| Helper.correctNull(
										rs.getString("loan_mclrtype"))
										.contains("TG@"))
							hshRecord.put("strEBLRFlag", "Y");
						else
							hshRecord.put("strMCLRFlag", "Y");
					}
				}
			}

			if (Helper.correctNull((String) hshValues.get("sessionModuleType"))
					.equals("CORP")
					|| Helper.correctNull(
							(String) hshValues.get("sessionModuleType"))
							.equals("AGR")) {
				if (rs != null)
					rs.close();
				int CGTMSEcount = 0;
				strQuery = SQLParser
						.getSqlQuery("get_FacilityData^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					String temp = Helper.correctNull((String) rs
							.getString("FACILITY_WHT_CGTMSEAPPLY"));
					if (temp.equals("Y"))
						CGTMSEcount++;
				}
				if (CGTMSEcount > 0)
					hshRecord.put("PRD_CGTMSE", "Y");
				else
					hshRecord.put("PRD_CGTMSE", "N");
			}

			hshRecord.put("apistatus", correctNull((String) hshValues
					.get("strstatus")));
			hshRecord.put("apistatusdesc", correctNull((String) hshValues
					.get("resultmsg")));

			return hshRecord;
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}
	}

	public HashMap getAction(HashMap hshValues)  {

		String strAppno = "";
		String strQuery = "", strQuery1 = "";
		String strAppStatus = "";
		String strusrid = "";
		String strPrdType = "";
		String strAction = "";
		String strLoantype = "";
		String strorghead = "";
		String strCustid = "", strMSMEEXP = "", StrappLoansubtypeDigi = "";
		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null, rsnew = null, rs4 = null;
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);
		HashMap hshQuery = new HashMap();
		HashMap hshRecord = new HashMap();
		HashMap hshQueryValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		ArrayList arrFlowpoint = new ArrayList();
		ArrayList arrDone = new ArrayList();
		ArrayList arrClassDesc = new ArrayList();
		ArrayList arrMaxclass = new ArrayList();
		ArrayList arrAction = new ArrayList();
		ArrayList arrCol = new ArrayList();
		ArrayList arrBankRow = new ArrayList();
		ArrayList arrSentFAcility = new ArrayList();
		int intCount = 0;
		int intApproveCount = 0;
		double dblProposalin = 1, dbltotgross = 0.00;
		String strCBSACNoFlg = "", strloan_repaymenttype = "", strPrdPurpose = "", strLmsCheck = "";
		String strProductType = Helper.correctNull((String) hshValues
				.get("strProductType"));
		String strPrdcode = Helper.correctNull((String) hshValues
				.get("prdcode"));
		String strSessionModuleType = Helper.correctNull((String) hshValues
				.get("sessionModuleType"));
		String comapp_id = Helper.correctNull((String) hshValues
				.get("hidapplicantid"));
		String strFacilitySno = Helper.correctInt((String) hshValues
				.get("sel_facility"));
        String appholdercheck="";
		try {
			
			strAppno = correctNull((String) hshValues.get("appno"));
			strAction = correctNull((String) hshValues.get("hidAction"));
			strusrid = correctNull((String) hshValues.get("strUserId"));
			strCustid = correctNull((String) hshValues.get("hidapplicantnewid"));
			if (strCustid.equalsIgnoreCase(""))
				strCustid = Helper.correctNull((String) hshValues
						.get("hidapplicantid"));
			hshRecord.put("appno", strAppno);
			hshRecord.put("strAppNewid", strCustid);

			if (rs != null)
				rs.close();
			// To get the comments of the sanctioning officer, Application
			// status and sanctioned or rejected user
			strQuery = SQLParser.getSqlQuery("commworkflowsel2^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppStatus = rs.getString("app_status");
				strLoantype = correctNull(rs.getString("app_loantype"));
				appholdercheck=correctNull(rs.getString("APP_APPLNHOLDER"));

				hshRecord.put("ApproveRejectedby", correctNull(rs
						.getString("app_approvedby")));
				hshRecord.put("Sanction_Comments", correctNull(rs
						.getString("app_sanctioningcomments")));
				hshRecord.put("app_reviewdate", correctNull(rs
						.getString("app_reviewdate")));
				hshRecord.put("app_legalcomp", correctNull(rs
						.getString("app_legalcomp")));
				hshRecord.put("app_vetting", correctNull(rs
						.getString("app_vetting")));
				hshRecord.put("app_vettedby", correctNull(rs
						.getString("app_vettedby")));
				hshRecord.put("appstatus", strAppStatus);
				hshRecord.put("app_loantype", strLoantype);
				hshRecord.put("CBS_ACCOUNTNO", correctNull(rs
						.getString("CBS_ACCOUNTNO")));
				hshRecord.put("app_termflag", correctNull(rs
						.getString("app_termflag")));
				hshRecord.put("app_finalsanction", correctNull(rs
						.getString("app_finalsanction")));
				hshRecord.put("appholdercheck", correctNull(rs
						.getString("APP_APPLNHOLDER")));
				if (!correctNull(rs.getString("app_deviateduserid"))
						.equalsIgnoreCase("")) {
					hshRecord.put("deviationapproved", "Y");
				}
				StrappLoansubtypeDigi = correctNull(rs
						.getString("APP_LOANSUBTYPE_DIGI"));
				hshRecord.put("APP_LOANSUBTYPE_DIGI", StrappLoansubtypeDigi);
				hshRecord.put("app_stockaudit", correctNull(rs
						.getString("app_stockaudit")));
				hshRecord.put("app_creditaudit", correctNull(rs
						.getString("app_creditaudit")));

			}
			if (rs != null)
				rs.close();

			String strReasonStatus = "N";
			strQuery = SQLParser.getSqlQuery("sel_app_creditsales^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strReasonStatus = "Y";
			}
			hshRecord.put("strReasonStatus", strReasonStatus);
			if (rs != null)
				rs.close();
			String strcbsaccno = "";
			strQuery = SQLParser.getSqlQuery("sel_cbsaccno^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strcbsaccno = Helper.correctInt((String) rs
						.getString("CBS_ACCOUNTNO"));
			}

			if (rs != null)
				rs.close();

			log
					.info("====== Product Code for Before sel_productcode query execution ======="
							+ strPrdcode);
			strQuery = SQLParser.getSqlQuery("sel_productcode^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strPrdcode = Helper.correctInt((String) rs
						.getString("app_prdcode"));
			}

			if (rs != null)
				rs.close();

			log
					.info("====== Product Code for After sel_productcode query execution ======="
							+ strPrdcode);
			String strId = "7";

			strQuery = SQLParser.getSqlQuery("commworkflowsel1^" + strAppno
					+ "^<^9^>^0");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strQuery = SQLParser.getSqlQuery("commworkflowsel4^" + strAppno
						+ "^" + rs.getString(1));
				if (rs1 != null)
					rs1.close();

				if (rs2 != null)
					rs2.close();

				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrDone.add(rs1.getString(1));
				}
				arrFlowpoint.add(rs.getString(1));
				arrAction.add(rs.getString(2));
				arrMaxclass.add(rs.getString(3));

				strQuery1 = SQLParser.getSqlQuery("selclasslist_workflow^"
						+ strId + "^" + correctNull(rs.getString(3)));
				rs2 = DBUtils.executeQuery(strQuery1);
				if (rs2.next()) {
					arrClassDesc.add(rs2.getString(4));
				}
			}

			if (strAppStatus.equalsIgnoreCase("op")) {
				arrDone.add("0");
			} else {
				arrDone.add("1");
			}

			if (!(strAppStatus.equalsIgnoreCase("op") || strAppStatus
					.equalsIgnoreCase("ol"))) {
				if ((strAppStatus.equalsIgnoreCase("pa"))
						|| (strAppStatus.equalsIgnoreCase("ca"))) {
					strQuery = SQLParser.getSqlQuery("commworkflowsel1^"
							+ strAppno + "^<^17^>^8");
				} else if (strAppStatus.equalsIgnoreCase("pr")
						|| strAppStatus.equalsIgnoreCase("cr")) {
					strQuery = SQLParser.getSqlQuery("commworkflowsel1^"
							+ strAppno + "^<^25^>^16");
				}
				if (rs != null)
					rs.close();

				strId = "7";

				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					strQuery = SQLParser.getSqlQuery("commworkflowsel4^"
							+ strAppno + "^" + rs.getString(1));
					if (rs1 != null)
						rs1.close();

					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						arrDone.add(rs1.getString(1));
					}
					arrFlowpoint.add(rs.getString(1));
					arrAction.add(rs.getString(2));
					arrMaxclass.add(rs.getString(3));

					strQuery1 = SQLParser.getSqlQuery("selclasslist_workflow^"
							+ strId + "^" + correctNull(rs.getString(3)));
					if (rs2 != null)
						rs2.close();

					rs2 = DBUtils.executeQuery(strQuery1);
					if (rs2.next()) {
						arrClassDesc.add(rs2.getString(4));
					}
				}
			}

			strQuery = SQLParser.getSqlQuery("commworkflowsel5^" + strAppno
					+ "^" + strAppno + "^" + strAppno);
			if (rs != null)
				rs.close();

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strCurrFlowPoint", rs.getString(1));
				hshRecord.put("strDate", rs.getString(2));
				hshRecord.put("strDueDate", rs.getString(3));
				hshRecord.put("strMaxClass", rs.getString(4));
			} else {
				strQuery = SQLParser.getSqlQuery("commworkflowsel6^" + strAppno
						+ "^" + strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("strCurrFlowPoint", rs.getString(1));
					hshRecord.put("strDate", rs.getString(2));
					hshRecord.put("strDueDate", " ");
				} else {
					strQuery = SQLParser.getSqlQuery("commworkflowsel7^"
							+ strAppno + "^" + strAppno);
					if (rs != null)
						rs.close();

					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("strCurrFlowPoint", "1");
						hshRecord.put("strMaxClass", rs.getString(1));
						hshRecord.put("strDate", rs.getString(2));
						hshRecord.put("strDueDate", rs.getString(3));
					}
				}
			}
			strQuery = SQLParser.getSqlQuery("commworkflowsel3^" + strAppno);
			if (rs != null)
				rs.close();

			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("prd_skip", rs.getString(1));
				hshRecord.put("prd_approval", rs.getString(2));
				if (hshRecord.get("strMaxClass") == null) {
					hshRecord.put("strMaxClass", rs.getString(2));
				}
			}

			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("workflowusersanlimit^" + strusrid);
			if (rs.next()) {
				hshRecord.put("usrfunction", correctNull(rs
						.getString("usr_function")));
				hshRecord.put("usr_rmdflag", correctNull(rs
						.getString("usr_rmdflag")));
			}

			// To find applicant type whether retail or corporate
			if (strPrdType.length() <= 0) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("findapptype^" + strAppno);
				if (rs.next()) {
					strPrdType = correctNull(rs.getString("prd_type"));
					strPrdPurpose = correctNull(rs.getString("prd_purpose"));
				}
			}
			hshRecord.put("arrFlowpoint", arrFlowpoint);
			hshRecord.put("arrAction", arrAction);
			hshRecord.put("arrMaxclass", arrMaxclass);
			hshRecord.put("arrClassDesc", arrClassDesc);
			hshRecord.put("prdtype", strPrdType);
			hshRecord.put("arrDone", arrDone);
			hshRecord.put("strPrdPurpose", strPrdPurpose);

			// For Eligibility status check
			if (strLoantype.equalsIgnoreCase("P")) {
				HashMap hshchecklimit = new HashMap();
				hshValues.put("strPrdType", strPrdType);
				hshValues.put("prd_type", strPrdType);
				hshValues.put("strAppno", strAppno);
				hshValues.put("comappid", comapp_id);
				hshchecklimit = (HashMap) EJBInvoker.executeStateLess(
						"checkeligibility", hshValues, "getEligibility");
				hshRecord.put("APP_ELIGIBILITYCHK", Helper
						.correctInt((String) hshchecklimit
								.get("strEligibiltychk")));
			}
			if (strLoantype.equalsIgnoreCase("C")
					|| strLoantype.equalsIgnoreCase("A")) {
				// To find whether Inspection report has been generated for the
				// customer or not
				if (rs != null)
					rs.close();
				/*
				 * Commented by Arsath for Performance Tuning Not used in
				 * respective pages strQuery =
				 * SQLParser.getSqlQuery("sel_comInspectionReport^" + strAppno);
				 * rs = DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("inspection_flag","Y"); }
				 */
				// To find whether corporate scoring flag-105 has been received
				// or not
				/****
				 * To find whether rating is received or not as well as to find
				 * the rating is within the limit to forward or approve the
				 * application modified by sureshkumar ganapathy on 26-08-2009
				 * as per bank's new requirement
				 */

				/*
				 * Commented by Arsath for Performance TuningNot used in the
				 * respective pages String strCGRating=""; String CGRating="N";
				 * if(rs!=null) rs.close();
				 * 
				 * strQuery = SQLParser.getSqlQuery("getramrating105details^" +
				 * strAppno); rs = DBUtils.executeQuery(strQuery); if(rs.next())
				 * { //hshRecord.put("corporate105_score","Y");
				 * strCGRating=Helper
				 * .correctNull(rs.getString("currentrating_basemodel"));
				 * hshRecord.put("Creditrating",strCGRating);
				 * 
				 * }
				 * 
				 * if(!strCGRating.equalsIgnoreCase("")) { String
				 * strBorrowertype=""; String strDataid=""; if(rs!=null)
				 * rs.close(); strQuery = SQLParser.getSqlQuery("execsel_port^"
				 * + strAppno); rs=DBUtils.executeQuery(strQuery); if(rs.next())
				 * {
				 * strBorrowertype=correctNull(rs.getString("exec_borrowertype"
				 * )); } if(strBorrowertype.equalsIgnoreCase("E")) {
				 * strDataid="43"; } else
				 * if(strBorrowertype.equalsIgnoreCase("N")) { String
				 * IsTakeoveraccount=""; if(rs!=null) rs.close(); strQuery =
				 * SQLParser.getSqlQuery("pro_takeoversel^" + strAppno);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * IsTakeoveraccount=correctNull(rs.getString("istakeover")); }
				 * if(IsTakeoveraccount.equals("1")) { strDataid="52"; } else {
				 * strDataid="17"; } }
				 * 
				 * if(!strDataid.equals("")) { if(rs!=null) rs.close(); strQuery
				 * =
				 * SQLParser.getSqlQuery("getstaticdesc^"+strDataid+"^"+strCGRating
				 * ); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * CGRating="Y"; } } }
				 * 
				 * hshRecord.put("CGRating",CGRating);
				 */

				strQuery = SQLParser.getSqlQuery("selprosalvaluesin^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					if (rs.getString("prop_valuesin").equalsIgnoreCase("C")) {
						dblProposalin = 100;
					}
				}

				double dblproposedtotal_limit = 0.00;
				double dblcapoamt = 0.00;
				String strcpaflag = "N";
				String strcntflag = "N";

				strQuery = SQLParser.getSqlQuery("seltotpropmainlimit^"
						+ strAppno + "^" + "0");
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					dblproposedtotal_limit = Double.parseDouble(Helper
							.correctDouble(rs.getString("sanctionedamt")));
				}
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selothrparambycode^"
						+ "'CPAO'");
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					dblcapoamt = rs.getDouble("loan_paramval");
				}

				if ((dblproposedtotal_limit * dblProposalin) > (dblcapoamt)) {
					strcpaflag = "Y";
				}
				hshRecord.put("CPAFLAG", strcpaflag);

				strQuery = SQLParser.getSqlQuery("sel_creditprocesscondition^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strcntflag = "Y";
				}
				hshRecord.put("CNTFLAG", strcntflag);

				/*
				 * Commented by Arsath for Performance Tuning Variable Not Used
				 * anywhere in the respective page
				 * 
				 * 
				 * strQuery=SQLParser.getSqlQuery("Finacle_KYCNorms_corp^"+strAppno
				 * ); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("kycnorms","Y"); }
				 */

				// To check facility facility status
				strQuery = SQLParser.getSqlQuery("facilities_notcheck_count^'"
						+ strAppno + "'");
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("cnt");
					if (intCount > 0)
						hshRecord.put("FACNOTCHECK", "N");
				}
				// To check verification status
				strQuery = SQLParser.getSqlQuery("verification_notcheck_count^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("count");
					if (intCount == 0)
						hshRecord.put("VERFIcheck", "N");
				}

				// To check facility approve status
				strQuery = SQLParser.getSqlQuery("facilities_approve_count^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intApproveCount = rs.getInt("cnt");
					if (intApproveCount > 0)
						hshRecord.put("FACAPPROVECHECK", "Y");
				}

				// To check Repayment schedule for non-Emi
				String strValue = "'NE','OD','LC','CO','BG','DD','PC','PS'", strName = "", strCode = "";
				double dblEmiamount = 0.00, dblFacamount = 0.00;
				String strvaluesin = Helper.correctNull((String) hshValues
						.get("valuesin")), strFacdesc = "", strNEcheckflag = "Y";
				strQuery = SQLParser.getSqlQuery("seltermfinancefac_NE_new1^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					strCode = correctNull((String) rs.getString("facility_sno"));
					strName = correctNull((String) rs.getString("fac_desc"));
					String strFacCode = correctNull((String) rs
							.getString("com_facid"));
					dblFacamount = Double.parseDouble(Helper
							.convertApplicationToSetup(strvaluesin, Double
									.parseDouble(Helper.correctDouble(rs
											.getString("FACILITY_SANCAMT")))));
					if (rs2 != null)
						rs2.close();
					String strQuery2 = SQLParser
							.getSqlQuery("sel_otherdetails^" + strFacCode);
					rs2 = DBUtils.executeQuery(strQuery2);
					if (rs2.next()) {
						if (Helper.correctNull(
								(String) rs2.getString("COM_LOANACC"))
								.equalsIgnoreCase("Y")) {
							strQuery1 = SQLParser
									.getSqlQuery("sel_nerepaymentsum^"
											+ strAppno + "^" + strCode + "^P");
							if (rs1 != null)
								rs1.close();
							rs1 = DBUtils.executeQuery(strQuery1);
							if (rs1.next()) {
								dblEmiamount = Double.parseDouble(Helper
										.correctDouble(rs1
												.getString("TOTALSUM")));

								if (!(dblFacamount == dblEmiamount)) {
									strNEcheckflag = "N";
									if (strFacdesc.equalsIgnoreCase("")) {
										strFacdesc = strName;
									} else {
										strFacdesc = strFacdesc + "," + strName;
									}
								}
							}
						}
					}
				}
				hshRecord.put("strNEcheckflag", strNEcheckflag);
				hshRecord.put("strNEFacdesc", strFacdesc);

				if (rs != null)
					rs.close();
				double paramval_CGTMSEint = 0.00;
				strQuery = SQLParser.getSqlQuery("sel_laps_cg_parms");
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					paramval_CGTMSEint = Double.parseDouble(Helper
							.correctDouble((String) rs
									.getString("loan_paramval")));
					hshRecord.put("paramval_CGTMSEint", String
							.valueOf(paramval_CGTMSEint));
				}

				if (rs != null)
					rs.close();

				int flagcount = 0;
				int intflagcnt = 0;
				double dblCGTMSELimit = 0.0;
				double cgtmse_coverage = 0.00;
				strQuery = SQLParser
						.getSqlQuery("get_FacilityData^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					String strfacno = Helper.correctNull(rs
							.getString("facility_sno"));
					String wht_cgtsme_appl = Helper.correctNull(rs
							.getString("FACILITY_WHT_CGTMSEAPPLY"));
					if (wht_cgtsme_appl.equals("Y")) {
						if (rs1 != null)
							rs1.close();
						strQuery = SQLParser
								.getSqlQuery("sel_applicationExstng_fac^"
										+ strAppno + "^" + strfacno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							hshRecord.put("strCGTMSEFlag", "Y");
						} else {
							hshRecord.put("strCGTMSEFlag", "N");
							flagcount++;
						}
						hshRecord.put("strCGTMSEAvail", "Y");

						if (Helper.correctNull(
								(String) rs.getString("facility_sancstatus"))
								.equals("A")) {
							dblCGTMSELimit += Double.parseDouble(Helper
									.correctDouble(rs
											.getString("facility_sancamt")));
						}
						if (rs1 != null)
							rs1.close();
						double dblsancintrate = 0.00;
						strQuery = SQLParser.getSqlQuery("sel_sanc_intratechk^"
								+ strAppno + "^" + strfacno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							dblsancintrate = Double
									.parseDouble(Helper
											.correctDouble((String) rs1
													.getString("FACILITY_SANCINTEREST")));
							hshRecord.put("dblsancintrate", String
									.valueOf(dblsancintrate));
						}
						if (dblsancintrate > paramval_CGTMSEint) {
							hshRecord.put("strCGTMSEtotintrate1", "Y");
							intflagcnt++;
						} else {
							hshRecord.put("strCGTMSEtotintrate1", "N");
						}

						strQuery = SQLParser
								.getSqlQuery("sel_CropCgtmse_app_Exstng^"
										+ strAppno + "^" + strfacno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							cgtmse_coverage = Double.parseDouble(Helper
									.correctDouble((String) rs1
											.getString("CG_CGTMSE_COVERAGE")))
									+ Double
											.parseDouble(Helper
													.correctDouble((String) rs1
															.getString("cg_ourbank_coverage")));
						}
					}
				}
				if (flagcount > 0) {
					hshRecord.put("strCGTMSEFlag", "N");
				}

				if (intflagcnt > 0) {
					hshRecord.put("strCGTMSEtotintrate1", "Y");
				} else {
					hshRecord.put("strCGTMSEtotintrate1", "N");
				}

				hshRecord.put("dblCGTMSELimit", Helper
						.formatDoubleValue(dblCGTMSELimit));

				cgtmse_coverage = cgtmse_coverage + dblCGTMSELimit;
				if (rs != null)
					rs.close();
				if (rs1 != null)
					rs1.close();
				String strFacilityNo = "", strEntrepriseType = "", StrEntrepriseFlag = "", strEntrepriseError = "", strFacilitesSNNo = "", strerrorFlag = "";
				if (Helper.correctNull(
						(String) hshValues.get("sessionModuleType")).equals(
						"CORP")
						|| Helper.correctNull(
								(String) hshValues.get("sessionModuleType"))
								.equals("AGR")) {
					strQuery = SQLParser.getSqlQuery("sel_Fac_Entreprise^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						strFacilityNo = "";
						strEntrepriseType = "";
						StrEntrepriseFlag = "";
						strFacilityNo = Helper.correctNull(rs
								.getString("app_facility_sno"));
						strEntrepriseType = Helper.correctNull(rs
								.getString("APP_AGRICULTURE"));
						strQuery = SQLParser
								.getSqlQuery("sel_Fac_Entreprise_error^"
										+ strAppno + "^" + strFacilityNo);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							StrEntrepriseFlag = Helper.correctNull(rs1
									.getString("CG_MSE_UNIT_WO"));
							if ((strEntrepriseType.equalsIgnoreCase("19")
									|| strEntrepriseType.equalsIgnoreCase("22") || strEntrepriseType
									.equalsIgnoreCase("26"))
									&& (StrEntrepriseFlag.equalsIgnoreCase("N") || StrEntrepriseFlag
											.equalsIgnoreCase(""))) {
								strEntrepriseError = "Y";
							} else if ((StrEntrepriseFlag.equalsIgnoreCase("Y") || StrEntrepriseFlag
									.equalsIgnoreCase(""))) {
								if (strEntrepriseType.equalsIgnoreCase("19")) {
									strEntrepriseError = "N";
								} else if (strEntrepriseType
										.equalsIgnoreCase("22")) {
									strEntrepriseError = "N";
								} else if (strEntrepriseType
										.equalsIgnoreCase("26")) {
									strEntrepriseError = "N";
								} else {
									strEntrepriseError = "Y";
								}

							}

						}
						if (strEntrepriseError.equalsIgnoreCase("Y")) {
							strerrorFlag = "Y";
							strFacilitesSNNo = strFacilitesSNNo.concat(
									strFacilityNo).concat(",");
						}
					}
				}

				hshRecord.put("strEntrepriseError", strerrorFlag);
				hshRecord.put("strFacilitesSNNo", strFacilitesSNNo);

				if (rs != null)
					rs.close();
				double maxcgtmseLimit = 0.00;
				strQuery = SQLParser.getSqlQuery("selotherparam_ratexpos^115");
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					maxcgtmseLimit = Double.parseDouble(Helper
							.correctDouble((String) rs
									.getString("loan_paramval")));
					hshRecord.put("strmaxcgtmseLimit", Helper
							.formatDoubleValue(maxcgtmseLimit));
				}
				if (cgtmse_coverage > maxcgtmseLimit) {
					hshRecord.put("strCGTMSEcovLimit", "Y");
				} else {
					hshRecord.put("strCGTMSEcovLimit", "N");
				}
			}

			/*
			 * To avoid - While Approving or forwarding the Short review/
			 * Extension proposal or Short term loan proposal or Adhoc proposal
			 * system is asking for enter the KYC details even though it is
			 * filled.
			 */

			else if (strLoantype.equalsIgnoreCase("E")) {
				if (rs != null)
					rs.close();
				/*
				 * Commented by Arsath for Performance Tuning Variable Not Used
				 * anywhere in the page
				 * strQuery=SQLParser.getSqlQuery("Finacle_KYCNorms_corp^"
				 * +strAppno); rs=DBUtils.executeQuery(strQuery); if(rs.next())
				 * { hshRecord.put("kycnorms","Y"); }
				 */
				// To check facility facility status(All facility should be
				// approve/reject in terms of sanction)
				strQuery = SQLParser.getSqlQuery("facilities_notcheck_count^'"
						+ strAppno + "'");
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("cnt");
					if (intCount > 0)
						hshRecord.put("FACNOTCHECK", "N");
				}
				// To check facility approve status
				strQuery = SQLParser.getSqlQuery("facilities_approve_count^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intApproveCount = rs.getInt("cnt");
					if (intApproveCount > 0)
						hshRecord.put("FACAPPROVECHECK", "Y");
				}
			} else if (strLoantype.equalsIgnoreCase("U")) {
				if (rs != null)
					rs.close();
				/*
				 * Commented by Arsath for Performance Tuning Variable Not Used
				 * anywhere in the respective page
				 * strQuery=SQLParser.getSqlQuery
				 * ("Finacle_KYCNorms_corp^"+strAppno);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("kycnorms","Y"); }
				 */
				// To check facility facility status
				strQuery = SQLParser.getSqlQuery("facilities_notcheck_count^'"
						+ strAppno + "'");
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("cnt");
					if (intCount > 0)
						hshRecord.put("FACNOTCHECK", "N");
				}
				// To check facility approve status
				strQuery = SQLParser.getSqlQuery("facilities_approve_count^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intApproveCount = rs.getInt("cnt");
					if (intApproveCount > 0)
						hshRecord.put("FACAPPROVECHECK", "Y");
				}
			} else if (strLoantype.equalsIgnoreCase("H")) {
				if (rs != null)
					rs.close();
				/*
				 * Commented by Arsath for Performance Tuning Variable Not Used
				 * anywhere in the respective page
				 * strQuery=SQLParser.getSqlQuery
				 * ("Finacle_KYCNorms_corp^"+strAppno);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("kycnorms","Y"); }
				 */
				// To check facility facility status
				strQuery = SQLParser.getSqlQuery("facilities_notcheck_count^'"
						+ strAppno + "' and facility_category='A'");
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("cnt");
					if (intCount > 0)
						hshRecord.put("FACNOTCHECK", "N");
				}
				// To check facility approve status
				strQuery = SQLParser.getSqlQuery("facilities_approve_count^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intApproveCount = rs.getInt("cnt");
					if (intApproveCount > 0)
						hshRecord.put("FACAPPROVECHECK", "Y");
				}
			}
			/* **************** */
			else if (strLoantype.equalsIgnoreCase("T")) {

				// To find whether credit rating has been generated for the
				// customer or not
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selmeanscapital^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("creditrating_flag", "Y");
					hshRecord.put("creditrating_value", Helper.correctNull(rs
							.getString("adv_ratecheck")));
					hshRecord.put("creditrating_grade", Helper.correctNull(rs
							.getString("rating_grade")));
					hshRecord.put("creditrating", Helper.correctNull(rs
							.getString("rating")));
				}

				if (rs != null)
					rs.close();

				// To find whether Inspection report has been generated for the
				// customer or not
				/*
				 * Commented by Arsath for Performance Tuning Not used in
				 * respective pages strQuery =
				 * SQLParser.getSqlQuery("selops_inspectionreport^" + strAppno);
				 * rs = DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("inspection_flag","Y"); }
				 */
				/*
				 * Commented by Arsath for Performance Tuning Variable Not Used
				 * anywhere in the respective page
				 * strQuery=SQLParser.getSqlQuery
				 * ("Finacle_KYCNorms_corp^"+strAppno);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("kycnorms","Y"); }
				 */
				// To check facility facility status
				strQuery = SQLParser.getSqlQuery("facilities_notcheck_count^'"
						+ strAppno + "'");
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intCount = rs.getInt("cnt");
					if (intCount > 0)
						hshRecord.put("FACNOTCHECK", "N");
				}
				// To check facility approve status
				strQuery = SQLParser.getSqlQuery("facilities_approve_count^"
						+ strAppno);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					intApproveCount = rs.getInt("cnt");
					if (intApproveCount > 0)
						hshRecord.put("FACAPPROVECHECK", "Y");
				}
				if (rs != null) {
					rs.close();
				}

			} else {
				/*
				 * strQuery=SQLParser.getSqlQuery("Finacle_KYCNorms_retail^"+strAppno
				 * ); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("kycnorms","Y"); }
				 */

				if (strLoantype.equalsIgnoreCase("P")) {
					// To find whether sanctioned loan amount entered in the
					// loan details page of Appraisal or not

					if (rs != null)
						rs.close();

					strQuery = SQLParser.getSqlQuery("selLoanType^" + strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						if (correctNull(rs.getString("appraisal_flag")).equals(
								"Y")) {
							hshRecord.put("appraisalsanc", "Yes");
						} else {
							hshRecord.put("appraisalsanc", "No");
						}
					}

					if (rs != null)
						rs.close();
					// To find whether rating for retail products has been done
					// or not
					/*
					 * Commented by Arsath for Performance Tuning Variable Not
					 * Used anywhere in the respective page strQuery =
					 * SQLParser.getSqlQuery("getretailscore^" + strAppno); rs =
					 * DBUtils.executeQuery(strQuery); if(rs.next()) {
					 * hshRecord.put("rating_score","Y"); }
					 */
					// To find whether pre sanction inspection has been
					// conducted or not
					if (rs != null)
						rs.close();

					/*
					 * Commented by Arsath for Performance Tuning Not Used
					 * anywhere in the page
					 * strQuery=SQLParser.getSqlQuery("getpreinsreport^"
					 * +strAppno); rs=DBUtils.executeQuery(strQuery);
					 * if(rs.next()) { hshRecord.put("senddata","Y"); }
					 */

					if (rs != null)
						rs.close();
					/*
					 * Commented By Arsath for Performance Tuning Below field
					 * included in above query called "commworkflowsel2"
					 * strQuery
					 * =SQLParser.getSqlQuery("seldeviateduser^"+strAppno);
					 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
					 * if(!correctNull
					 * (rs.getString("app_deviateduserid")).equalsIgnoreCase
					 * ("")) { hshRecord.put("deviationapproved","Y"); } }
					 */
					String strRNEcheckflag = "Y";
					/*
					 * Modified by Arsath for Performance Tuning Unwanted query
					 * has been changed to minimal no of fields query
					 */
					double dbemi = 0.00, dbsancamt = 0.00, dblIntr = 0.00;
					int intTenor = 0, intHoliday = 0;
					strQuery1 = SQLParser
							.getSqlQuery("get_RepayTypeAndPurpose^" + strAppno);
					if (rs != null)
						rs.close();
					rs = DBUtils.executeQuery(strQuery1);
					if (rs.next()) {
						strloan_repaymenttype = Helper.correctNull(rs
								.getString("loan_repaymenttype"));
						dbsancamt = Double.parseDouble(Helper.correctDouble(rs
								.getString("sancamount")));
						dbltotgross = Double.parseDouble(Helper
								.correctDouble((String) rs
										.getString("loan_mongrossrent")));
						dblIntr = Double.parseDouble(Helper.correctDouble(rs
								.getString("loan_modintrate")));
						dblIntr = dblIntr / 100;
						intTenor = Integer.parseInt(Helper.correctInt(rs
								.getString("loan_reqterms")));
						hshRecord.put("strDocumentReceived", Helper
								.correctNull(rs.getString("loan_docrecvd")));

					}
					if (!strloan_repaymenttype.equalsIgnoreCase("1")) {
						String strFacility = "1";// FOr Retail
						String strIntrAmtFlag = "";
						if (rs != null)
							rs.close();
						/*
						 * Commented by Arsath for Performance Tuning
						 * 
						 * rs =DBUtils.executeLAPSQuery(
						 * "pergetloanProduct_selsancamount^" + strAppno);
						 * if(rs.next()) { dbsancamt=
						 * Double.parseDouble(Helper.correctDouble
						 * (rs.getString("sancamount"))); }
						 */

						strQuery1 = SQLParser.getSqlQuery("sel_nerepaymentsum^"
								+ strAppno + "^" + strFacility + "^P");
						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeQuery(strQuery1);
						if (rs1.next()) {
							dbemi = Double.parseDouble(Helper.correctDouble(rs1
									.getString("TOTALSUM")));
							if (dbemi != 0.00) {
								if (!(dbsancamt == dbemi)) {
									strRNEcheckflag = "N";
								}
							} else {
								strRNEcheckflag = "N";
							}
						}

						String strStaffPrd = "", strPType = "";
						if (rs1 != null) {
							rs1.close();
						}
						strQuery1 = SQLParser.getSqlQuery("findapptype^"
								+ strAppno);
						rs1 = DBUtils.executeQuery(strQuery1);
						if (rs1.next()) {
							strStaffPrd = Helper.correctNull(rs1
									.getString("prd_staffprd"));
							strPType = Helper.correctNull(rs1
									.getString("prd_type"));
						}

						if (strStaffPrd.equalsIgnoreCase("Y")
								&& (strPType.equalsIgnoreCase("pH") || strPType
										.equalsIgnoreCase("pA"))) {
							double dblIntrAmt = 0.00;

							strQuery1 = SQLParser.getSqlQuery("sel_emi^"
									+ strAppno);
							if (rs1 != null)
								rs1.close();
							rs1 = DBUtils.executeQuery(strQuery1);
							if (rs1.next()) {
								intHoliday = Integer
										.parseInt(Helper
												.correctInt(rs1
														.getString("loan_noofinstallment")));
								intTenor = intTenor - intHoliday;
							}
							dblIntrAmt = (dbsancamt * intTenor * dblIntr) / 100;
							strQuery1 = SQLParser
									.getSqlQuery("sel_nerepaymentsum^"
											+ strAppno + "^" + strFacility
											+ "^I");
							if (rs1 != null)
								rs1.close();
							rs1 = DBUtils.executeQuery(strQuery1);
							if (rs1.next()) {
								dbemi = Double.parseDouble(Helper
										.correctDouble(rs1
												.getString("TOTALSUM")));
								if (!(dblIntrAmt == dbemi)) {
									strIntrAmtFlag = "N";
								}
							} else {
								strIntrAmtFlag = "N";
							}
							hshRecord.put("strIntrAmt", String
									.valueOf(dblIntrAmt));
						}
						hshRecord.put("strIntrAmtFlag", strIntrAmtFlag);
					}
					hshRecord.put("strRNEcheckflag", strRNEcheckflag);

					if (rs != null)
						rs.close();
					double modintrate = 0.00, cgtmseSplitup = 0.00;
					double cgtmse_coverage = 0.00;
					String cgtmseappl = "";
					strQuery = SQLParser
							.getSqlQuery("get_perloandetails_renew1^"
									+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						modintrate = Double.parseDouble(Helper
								.correctDouble((String) rs
										.getString("loan_modintrate")));
						cgtmseSplitup = Double.parseDouble(Helper
								.correctDouble((String) rs
										.getString("LOAN_CG_PERCENT")));
						cgtmseappl = Helper.correctDouble((String) rs
								.getString("LOAN_CGTMSE_APPLICABLE"));

						cgtmse_coverage = Double.parseDouble(Helper
								.correctDouble(rs.getString("loan_recmdamt")));
					}
					if (cgtmseappl.equals("Y")) {
						if (rs != null)
							rs.close();
						double paramval_CGTMSEint = 0.00;
						double dblsancintrate = 0.00;
						strQuery = SQLParser.getSqlQuery("sel_laps_cg_parms");
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							paramval_CGTMSEint = Double.parseDouble(Helper
									.correctDouble((String) rs
											.getString("loan_paramval")));
							hshRecord.put("paramval_CGTMSEint", String
									.valueOf(paramval_CGTMSEint));
						}
						if ((modintrate + cgtmseSplitup) > paramval_CGTMSEint) {
							hshRecord.put("strCGTMSEtotintrate", "Y");
						} else {
							hshRecord.put("strCGTMSEtotintrate", "N");
						}

						if (rs != null)
							rs.close();

						strQuery = SQLParser.getSqlQuery("sel_cgtmseCorp3^"
								+ strAppno + "^1");
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							cgtmse_coverage += Double.parseDouble(Helper
									.correctDouble(rs
											.getString("CG_CGTMSE_COVERAGE")))
									+ Double
											.parseDouble(Helper
													.correctDouble(rs
															.getString("cg_ourbank_coverage")));
						}
						if (rs != null)
							rs.close();
						double maxcgtmseLimit = 0.00;
						strQuery = SQLParser
								.getSqlQuery("selotherparam_ratexpos^115");
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							maxcgtmseLimit = Double.parseDouble(Helper
									.correctDouble((String) rs
											.getString("loan_paramval")));
							hshRecord.put("strmaxcgtmseLimit", String
									.valueOf(maxcgtmseLimit));
						}
						if (cgtmse_coverage > maxcgtmseLimit) {
							hshRecord.put("strCGTMSEcovLimit", "Y");
						} else {
							hshRecord.put("strCGTMSEcovLimit", "N");
						}
					}
					String strFacilityNo = "", strEntrepriseType = "", StrEntrepriseFlag = "", strEntrepriseError = "", strFacilitesSNNo = "", strerrorFlag = "";
					if (strSessionModuleType.equalsIgnoreCase("RET")) {
						strQuery = SQLParser
								.getSqlQuery("sel_Fac_Entreprise_Ret^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							strFacilityNo = "1";
							strEntrepriseType = "";
							StrEntrepriseFlag = "";
							strEntrepriseType = Helper.correctNull(rs
									.getString("APP_AGRICULTURE"));
							strQuery = SQLParser
									.getSqlQuery("sel_Fac_Entreprise_error_Ret^"
											+ strAppno);
							rs1 = DBUtils.executeQuery(strQuery);
							if (rs1.next()) {
								StrEntrepriseFlag = Helper.correctNull(rs1
										.getString("CG_MSE_UNIT_WO"));
								if ((strEntrepriseType.equalsIgnoreCase("19")
										|| strEntrepriseType
												.equalsIgnoreCase("22") || strEntrepriseType
										.equalsIgnoreCase("26"))
										&& (StrEntrepriseFlag
												.equalsIgnoreCase("N") || StrEntrepriseFlag
												.equalsIgnoreCase(""))) {
									strEntrepriseError = "Y";
								} else if ((StrEntrepriseFlag
										.equalsIgnoreCase("Y") || StrEntrepriseFlag
										.equalsIgnoreCase(""))) {
									if (strEntrepriseType
											.equalsIgnoreCase("19")) {
										strEntrepriseError = "N";
									} else if (strEntrepriseType
											.equalsIgnoreCase("22")) {
										strEntrepriseError = "N";
									} else if (strEntrepriseType
											.equalsIgnoreCase("26")) {
										strEntrepriseError = "N";
									} else {
										strEntrepriseError = "Y";
									}

								}

							}
							if (strEntrepriseError.equalsIgnoreCase("Y")) {
								strerrorFlag = "Y";
								strFacilitesSNNo = strFacilitesSNNo.concat(
										strFacilityNo).concat(",");
							}
						}
					}
					hshRecord.put("strEntrepriseError", strerrorFlag);
					hshRecord.put("strFacilitesSNNo", strFacilitesSNNo);
				} else if (strLoantype.equalsIgnoreCase("A")) {
					// To find whether loan recommended amount entered in the
					// Appraisal Confirmation
					if (rs != null)
						rs.close();
					strQuery = SQLParser.getSqlQuery("sel_agrloanamt^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("loanrecommended", "Yes");
					}

					// To find whether sanctioned loan amount entered in the
					// loan details page of Appraisal or not

					if (rs != null)
						rs.close();

					strQuery = SQLParser.getSqlQuery("selLoanType^" + strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						if (correctNull(rs.getString("appraisal_flag")).equals(
								"Y")) {
							hshRecord.put("appraisalsanc", "Yes");
						} else {
							hshRecord.put("appraisalsanc", "No");
						}
						hshRecord.put("sanc_amt", Helper
								.correctNull((String) rs
										.getString("sanction_amount")));
					}

					// To find whether pre sanction inspection has been
					// conducted or not
					if (rs != null)
						rs.close();

					strQuery = SQLParser.getSqlQuery("sel_presanction^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("senddata", "Y");
					}
				}
				/*
				 * Commented by Arsath for Performance Tuning Below Field
				 * already used in the above query
				 * 
				 * rs=DBUtils.executeLAPSQuery("get_Sancamount^"+strAppno);
				 * if(rs.next()) {
				 * hshRecord.put("sanc_amt",Helper.correctNull(rs
				 * .getString(1))); }
				 */

				if (rs != null)
					rs.close();
				// To find whether duedilligence report has been generated for
				// the applicant or not
				boolean boolduediligence = false;
				strQuery = SQLParser
						.getSqlQuery("sel_duediligence^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					boolduediligence = true;
				}
				if (!boolduediligence) {
					if (rs != null)
						rs.close();
					strQuery = SQLParser
							.getSqlQuery("sel_duediligencecertificatebyappno^"
									+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						boolduediligence = true;
					}
				}

				if (boolduediligence) {
					hshRecord.put("duediligence", "Y");
				}

				if (rs != null)
					rs.close();
				// // To find whether Credit report has been generated for the
				// applicant or not
				strQuery = SQLParser.getSqlQuery("selcreditreportcount^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("creditreport",
							Integer.parseInt(correctNull(rs
									.getString("crcount"))) > 0 ? "Y" : "N");
				}

				if (rs != null)
					rs.close();

				strQuery = SQLParser.getSqlQuery("sel_appraisalQuest2^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("appraisalQuest", "Y");
				}

				/*
				 * For Checking whether CBS & MIS Details pages have filled
				 */
				strQuery = SQLParser.getSqlQuery("sel_cuscbsacdetails^"
						+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					if (!Helper.correctNull(rs1.getString("NATUREOFADV"))
							.equalsIgnoreCase(""))
						hshRecord.put("CBSDetails", "Y");
				}

				if (rs1 != null) {
					rs1.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_mispagedetails^"
						+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				String strPriorityType = "";
				if (rs1.next()) {
					strPriorityType = Helper.correctNull((String) rs1
							.getString("app_sector"));
				}
				if (!strPriorityType.equalsIgnoreCase("")) {
					hshRecord.put("MISDetails", "Y");
				}
				/*
				 * End - Checking whether CBS & MIS Details pages have filled
				 */

				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("selloan_details^" + strAppno);
				if (rs.next()) {
					hshRecord.put("prodcategory", (correctNull(rs
							.getString("category"))));
					hshRecord.put("subcategory", (correctNull(rs
							.getString("subcategory"))));
					hshRecord.put("mintrate", (correctNull(rs
							.getString("mintrate"))));
					hshRecord.put("lreqterms", (correctNull(rs
							.getString("lreqterms"))));
					hshRecord.put("amtreqd", (correctNull(rs
							.getString("amtreqd"))));
					hshRecord.put("emi", (correctNull(rs.getString("emi"))));
					hshRecord.put("loan_purposeofloan", (Helper.CLOBToString(rs
							.getClob("loan_purposeofloan"))));
					hshRecord.put("prd_desc", (correctNull(rs
							.getString("prd_desc"))));
					hshRecord.put("loan_margin", (correctNull(rs
							.getString("loan_margin"))));
					hshRecord.put("sanction_amount", correctNull(rs
							.getString("loan_recmdamt")));
					hshRecord.put("StaffFlag", correctNull(rs
							.getString("indinfo_is_staff")));
					hshRecord.put("PrincipalRatio", correctNull(rs
							.getString("prd_principal")));
					hshRecord.put("InterestRatio", correctNull(rs
							.getString("prd_interest")));
					hshRecord.put("InterestEMI", correctNull(rs
							.getString("loan_interest_emi")));
					hshRecord.put("loan_govt", correctNull(rs
							.getString("loan_govt")));
					hshRecord.put("loan_filedon", correctNull(rs
							.getString("loan_filedon")));
					hshRecord.put("staffproduct", correctNull(rs
							.getString("prd_staffprd")));
					hshRecord.put("app_isdeviated", correctNull(rs
							.getString("app_isdeviated")));
					hshRecord.put("AppAmt", correctNull(rs
							.getString("loan_appamt")));
					hshRecord.put("scorepattern", correctNull(rs
							.getString("buss_bussid")));
					hshRecord.put("repaymenttype", correctNull(rs
							.getString("loan_repaymenttype")));
					// strloan_repaymenttype=Helper.correctNull(rs.getString("loan_repaymenttype"));
					strMSMEEXP = Helper.correctDouble(rs
							.getString("loan_msmeexposure"));
					hshRecord.put("strCFR_VERIFIED", correctNull(rs
							.getString("LOAN_CFR_VERIFIED")));
					hshRecord.put("strCFR_BORNAME", correctNull(rs
							.getString("LOAN_CFR_BORNAME")));
					hshRecord.put("strCFR_DEV_RENFO", correctNull(rs
							.getString("LOAN_CFR_DEV_RENFO")));
					hshRecord.put("strSTATUS_VERIFIED", correctNull(rs
							.getString("STATUS_VERIFIED")));
					hshRecord.put("strprdbankscheme", correctNull(rs
							.getString("prd_bankscheme")));
				}
			}

			if (strAction.trim().equalsIgnoreCase("send")) {
				hshRecord.put("status", "success");

			}
			if (strAction.trim().equalsIgnoreCase("reallocate")) {
				hshRecord.put("status", "allocate");

			}
			if (strAction.trim().equalsIgnoreCase("lodge")) {
				hshRecord.put("status", "lodge");

			}
			if (strAction.trim().equalsIgnoreCase("dislodge")) {
				hshRecord.put("status", "dislodge");

			}
			if (strAction.trim().equalsIgnoreCase("flatfile")) {
				FinacleInterfaceBean FIB = new FinacleInterfaceBean();
				HashMap hshResult = new HashMap();
				if (strLoantype.equalsIgnoreCase("C")
						|| strLoantype.equalsIgnoreCase("A")) {
					hshResult = FIB.getAccountFlatFileReportCorpAgri(hshValues);
				} else {
					hshResult = FIB.getAccountFlatFileReport(hshValues);
				}
				hshRecord.put("hshResult", hshResult);
				log.info(hshResult);
			}
			if (strLoantype.equalsIgnoreCase("P")) {
				if (!strloan_repaymenttype.equalsIgnoreCase("1")) {
					String strFlowDateFlag = "";

					// selloan_account_details
					String strQuery12 = SQLParser
							.getSqlQuery("selloan_account_details^" + strAppno
									+ "^" + "1");
					ResultSet rs12 = DBUtils.executeQuery(strQuery12);
					if (rs12.next()) {
						strFlowDateFlag = "Y";
					} else {
						strFlowDateFlag = "N";
					}
					hshRecord.put("strFlowDateFlag", strFlowDateFlag);
				}
			} else // otherthan retail
			{
				String strValue = "'NE','OD','LC','CO','BG','DD','PC','PS'";
				strQuery = SQLParser.getSqlQuery("seltermfinancefac_NE_new^"
						+ strAppno + "^" + strValue);
				rs1 = DBUtils.executeQuery(strQuery);
				String strFlowDateFlag = "";

				while (rs1.next()) {
					String strfacilitySno = Helper.correctNull((String) rs1
							.getString("facility_sno"));
					String strFacCode = correctNull((String) rs1
							.getString("com_facid"));
					// selloan_account_details
					if (rs2 != null)
						rs2.close();
					String strQuery2 = SQLParser
							.getSqlQuery("sel_otherdetails^" + strFacCode);
					rs2 = DBUtils.executeQuery(strQuery2);
					if (rs2.next()) {
						if (Helper.correctNull(
								(String) rs2.getString("COM_LOANACC"))
								.equalsIgnoreCase("Y")) {
							String strQuery12 = SQLParser
									.getSqlQuery("selloan_account_details^"
											+ strAppno + "^" + strfacilitySno);
							ResultSet rs12 = DBUtils.executeQuery(strQuery12);
							if (rs12.next()) {
								strFlowDateFlag = strFlowDateFlag
										+ strfacilitySno + "@Y~";
							} else {
								strFlowDateFlag = strFlowDateFlag
										+ strfacilitySno + "@N~";
							}
						}
					}
				}
				hshRecord.put("strFlowDateFlag", strFlowDateFlag);
			}

			/*---------         For updating CBS Account Number         ---------*/
			if (strAction.trim().equalsIgnoreCase("addCBSAccount")) {
				if (rs != null)
					rs.close();

				String strcbsAccNo = "";
				String strFacSno = "";
				if (strLoantype.equalsIgnoreCase("P")) {

					if (ApplicationParams.getCbsIntegration().equalsIgnoreCase(
							"TRUE")) {
						strQuery = SQLParser
								.getCBSSqlQuery("sel_cbs_accno_fromfinacle_newconnection^"
										+ strAppno);
						rs = DBUtils.executeQueryCBSConnection(strQuery);
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_cbs_accno_fromfinacle^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
					}
					if (rs.next()) {
						strcbsAccNo = correctNull(rs.getString("FORACID"));
					}
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_cbs_accno_laps");
					arrValues.add(strcbsAccNo);
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else {
					if (rs != null)
						rs.close();

					if (ApplicationParams.getCbsIntegration().equalsIgnoreCase(
							"TRUE")) {
						strQuery = SQLParser
								.getCBSSqlQuery("sel_cbs_accno_fromfinacle_newconnection^"
										+ strAppno);
						rs = DBUtils.executeQueryCBSConnection(strQuery);
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_cbs_accno_fromfinacle^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
					}

					if (ApplicationParams.getCbsIntegration().equalsIgnoreCase(
							"TRUE")) {
						strQuery = SQLParser
								.getCBSSqlQuery("sel_cbs_accno_fromfinacle_newconnection^"
										+ strAppno);
						rs = DBUtils.executeQueryCBSConnection(strQuery);
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_cbs_accno_fromfinacle^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
					}
					while (rs.next()) {
						strcbsAccNo = "";
						strFacSno = "";
						strcbsAccNo = correctNull(rs.getString("foracid"));
						strFacSno = Helper.correctNull((String) rs
								.getString("facility_sno"));
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "updcorpfinacleaccno");
						arrValues.add(strcbsAccNo);
						arrValues.add(strAppno);
						arrValues.add(strFacSno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}

			}
			/*-----   End   ---*/
			/* ------------------ Start For Getting Target Data -------------- */
			String strModuleType = correctNull((String) hshValues
					.get("hidcategorytype"));
			if (strModuleType.equalsIgnoreCase("")
					|| strModuleType.equalsIgnoreCase("null"))
				strModuleType = correctNull((String) hshValues.get("cattype"));
			if (!strLoantype.equalsIgnoreCase("E")
					&& !strLoantype.equalsIgnoreCase("U")
					&& !strLoantype.equalsIgnoreCase("H")
					&& !strPrdType.equalsIgnoreCase("")
					&& (strPrdType.substring(0, 1).equalsIgnoreCase("p")
							|| strPrdType.substring(0, 1).equalsIgnoreCase("a")
							|| strPrdType.substring(0, 1).equalsIgnoreCase("C") || strPrdType
							.substring(0, 1).equalsIgnoreCase("T"))) {
				hshRecord = find_target_exceeded(strAppno, strPrdType,
						strModuleType, hshValues, hshRecord);
			}
			/* ------------------ End For Getting Target Data -------------- */

			String Authority = "";
			String Del_Power = "";
			strQuery = SQLParser.getSqlQuery("selapplnholderhead^" + strAppno);
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				strorghead = correctNull(rs1.getString("org_head"));
				Authority = correctNull(rs1.getString("usr_function"));
				if (Authority.equalsIgnoreCase("Delegated Authority")) {
					Del_Power = "Y";
				}
				hshRecord.put("Del_Authority", Del_Power);
			}
			if (strorghead.equals(strusrid)) {
				hshRecord.put("orghead", "Y");
			} else {
				hshRecord.put("orghead", "N");
			}
			/*
			 * if(rs!=null) { rs.close(); } conn=CLOBInvoker.getConnection();
			 * st=conn.createStatement();
			 * 
			 * rs=st.executeQuery(
			 * "select app_sanccomments from applications where	app_no=\'"
			 * +strAppno+"\'");
			 * 
			 * if(rs.next()) {
			 * 
			 * hshRecord.put("Sanction_Comments",correctNull(CLOBInvoker.
			 * CLOBToString(rs,"app_sanccomments")));
			 * 
			 * }
			 */

			/*
			 * strQuery=SQLParser.getSqlQuery("Finacle_KYCNorms^"+strCustid);
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * hshRecord.put("kycnorms","Y"); }
			 */

			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}

			String strcreditreport1 = null, strcreditreport2 = null;

			strQuery = SQLParser
					.getSqlQuery("selcreditreportcount^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {

				strcreditreport1 = "Y";

			}
			if (rs != null) {
				rs.close();
			}

			strQuery = SQLParser.getSqlQuery("selcreditreport_wrkflw_sel^"
					+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {

				strcreditreport2 = "Y";

			} else {
				strcreditreport2 = "N";
			}
			if (rs1 != null) {
				rs1.close();
			}
			/*
			 * Commented by Arsath for Performance Tuning Below Variables not
			 * used in the respective pages
			 * if(strcreditreport1.equalsIgnoreCase("Y") &&
			 * strcreditreport2.equalsIgnoreCase("Y")){
			 * hshRecord.put("CREDITREPORTFLAG","Y"); }else{
			 * hshRecord.put("CREDITREPORTFLAG","N"); }
			 */
			if (rs1 != null) {
				rs1.close();
			}
			String sendtoCBS = "N";
			int count = 0;
			arrSentFAcility = new ArrayList();
			strQuery = SQLParser.getSqlQuery("sel_AccountHandOffDetails^"
					+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				arrSentFAcility.add(Helper.correctNull(rs1.getString(2)));
				sendtoCBS = "Y";
				count = count + 1;
			}
			strQuery = SQLParser.getSqlQuery("sel_AccountHandOffDetails_nfb^"
					+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				arrSentFAcility.add(Helper.correctNull(rs1.getString(2)));
				sendtoCBS = "Y";
				count = count + 1;
			}
			hshRecord.put("arrSentFAcility", arrSentFAcility);
			hshRecord.put("strSendToCBSFlag", sendtoCBS);
			hshRecord.put("sentfacilitycount", Integer.toString(count));
			if (rs1 != null) {
				rs1.close();
			}

			if (ApplicationParams.getCbsIntegration().equalsIgnoreCase("TRUE")) {
				ResultSet rs3 = null;
				strQuery = SQLParser
						.getSqlQuery("sel_acct_cls_flg_newconnsubquery^"
								+ strAppno);
				rs3 = DBUtils.executeQuery(strQuery);
				String foracid = "";
				if (rs3.next()) {
					foracid = Helper
							.correctNull(rs3.getString("cbs_accountno"));
				}
				if (rs3 != null) {
					rs3.close();
				}
				if (foracid.length() != 0) {
					strQuery = SQLParser
							.getCBSSqlQuery("sel_acct_cls_flg_newconnection^"
									+ strAppno);
					rs1 = DBUtils.executeQueryCBSConnection(strQuery);
				}

			} else {
				strQuery = SQLParser
						.getSqlQuery("sel_acct_cls_flg^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);

			}

			if (rs1.next()) {
				strCBSACNoFlg = Helper.correctNull((String) rs1
						.getString("acct_cls_flg"));
			}
			hshRecord.put("strCBSACNoFlg", strCBSACNoFlg);

			/*
			 * Proposal to be forwarded to next level only by the Nodal Officer
			 */

			/* added by bhaskar for checkCredit rating befor sanction */

			if (rs1 != null)
				rs1.close();
			String strCreditFreezFlag = "";
			String strCreditRating = "";
			String strRmdUserCheck = "", strRmdUserCheckFlag = "N", strfinalsendflag = "N";
			rs1 = DBUtils.executeLAPSQuery("selcredfreezuserwise^" + strAppno
					+ "^" + strusrid);
			if (rs1.next()) {
				strCreditFreezFlag = Helper.correctNull((String) rs1
						.getString("cre_freeze"));
				strCreditRating = Helper.correctNull((String) rs1
						.getString("cre_rating"));
			}
			if (rs1 != null)
				rs1.close();

			rs1 = DBUtils.executeLAPSQuery("selcredfreezuser^" + strAppno + "^"
					+ strusrid);
			if (rs1.next()) {
				strfinalsendflag = "Y";
			}
			if (rs1 != null)
				rs1.close();

			rs1 = DBUtils.executeLAPSQuery("sel_rmdusercheck_rating^"
					+ strAppno);
			while (rs1.next()) {
				strRmdUserCheck = strRmdUserCheck
						+ Helper.correctNull(rs1.getString("USR_RMDFLAG"))
						+ "@";
			}
			if (!strRmdUserCheck.equalsIgnoreCase("")
					&& strRmdUserCheck.contains("@")) {
				strRmdUserCheck = strRmdUserCheck.substring(0, strRmdUserCheck
						.length() - 1);
			}

			if (strRmdUserCheck.contains("1")) {
				strRmdUserCheckFlag = "Y";
			}

			if (rs != null) {
				rs.close();
			}
			String strQry = "where CRE_APPNO='"
					+ strAppno
					+ "' and cre_weight is not null and cre_rating is not null and cre_rmdflag='Y' and cre_asondate=(select max(cre_asondate) from creditscoring where CRE_APPNO='"
					+ strAppno + "')";
			strQuery = SQLParser.getSqlQuery("selcreditscoring^" + strQry);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strRmdUserCheckFlag", "Y");

			} else {
				hshRecord.put("strRmdUserCheckFlag", "N");
			}

			hshRecord.put("strCreditFreezFlag", strCreditFreezFlag);
			hshRecord.put("strCreditRating", strCreditRating);
			// hshRecord.put("strRmdUserCheckFlag",strRmdUserCheckFlag);
			hshRecord.put("strfinalsendflag", strfinalsendflag);

			if (rs != null) {
				rs.close();
			}
			strQry = "where CRE_APPNO='"
					+ strAppno
					+ "' and cre_weight is not null and cre_rating is not null and cre_freeze='Y'";
			strQuery = SQLParser.getSqlQuery("selcreditscoring^" + strQry);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strRatingCheck", "Y");

			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_recentrating^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				if (Helper.correctNull(rs.getString("cre_nonpoolflag"))
						.equalsIgnoreCase("Y"))
					hshRecord.put("strNonPoolBasedRating", "Y");
				else
					hshRecord.put("strNonPoolBasedRating", "N");
			}

			/* end */

			// Checking for Source of Margin page have filled
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils.executeLAPSQuery("persourceofmargin_sel^" + strAppno);
			if (rs1.next()) {
				hshRecord.put("SOUREOFMARGIN", "Y");
			}
			if (rs1 != null)
				rs1.close();
			// Added for getting perapp_oldid
			String strOldid = "", strid = "", strRecAmt = "", strCBSID = "";
			double dbTot = 0.00;
			rs1 = DBUtils.executeLAPSQuery("get_perdemographics_oldid_renew^"
					+ strCustid);
			if (rs1.next()) {
				strOldid = correctNull(rs1.getString("perapp_oldid"));
				strCBSID = correctNull(rs1.getString("perapp_cbsid"));
			}

			if (rs1 != null)
				rs1.close();
			// Getting Delegate Power Amount for a user
			String strUserid = "", strgrpid = "", strSchemeid = "", strPowerAmt = "", strPrdLoanType = "", strsancpwramt = "";
			// strSchemeid=correctNull((String)hshValues.get("perapp_status"));
			strUserid = correctNull((String) hshValues.get("strUserId"));
			rs1 = DBUtils.executeLAPSQuery("sel_prdloantype^" + strAppno);
			if (rs1.next()) {
				strSchemeid = correctNull(rs1.getString("prd_bankscheme"));
				strPrdLoanType = correctNull(rs1.getString("prd_loantype"));
			}

			hshRecord.put("strSchemeCode", strSchemeid);

			rs1 = DBUtils.executeLAPSQuery("selUserId^" + strUserid);
			if (rs1.next()) {
				strgrpid = correctNull(rs1.getString("grp_id"));
			}
			if (rs != null)
				rs.close();
			String product_code = "";
			rs1 = DBUtils.executeLAPSQuery("sel_prdriskruleid^" + strAppno);
			if (rs1.next()) {
				product_code = correctNull(rs1.getString("APP_PRDCODE"));
				hshRecord.put("strLodgedDate", Helper.correctNull(rs1
						.getString("app_lodgeddate")));
				hshRecord.put("strLodgedRefNo", Helper.correctNull(rs1
						.getString("app_lodgedrefno")));
			}
			// rs=DBUtils.executeLAPSQuery("selPowerAmt^"+
			// strgrpid+"^"+strSchemeid);
			// if(rs.next())
			// {
			// strPowerAmt=correctNull(rs.getString("prd_power"));
			// }
			rs = DBUtils.executeLAPSQuery("sel_prdsanlmt^" + product_code + "^"
					+ strgrpid);
			if (rs.next()) {
				strPowerAmt = correctNull(rs.getString("sanction_limit"));
				log
						.info("<<<<<<<<<<===========strPowerAmt===================>>>>>>>>>>>>>>"
								+ strPowerAmt);
			}
			hshRecord.put("PowerAmt", strPowerAmt);

			if (rs != null)
				rs.close();

			rs1 = DBUtils.executeLAPSQuery("UniqAppidList1^" + strOldid);
			while (rs1.next()) {
				strid = correctNull(rs1.getString("perapp_id"));
				rs = DBUtils.executeLAPSQuery("selrecmdTotal^" + strid + "^"
						+ strSchemeid);
				if (rs.next()) {
					dbTot = dbTot
							+ Double.parseDouble(Helper.correctDouble((rs
									.getString("loan_recmdamt"))));
				}
			}
			hshRecord.put("AmtTotal", String.valueOf(jtn.format(dbTot)));

			String strmisaparam = "False";
			if (!strLoantype.equalsIgnoreCase("P")) {
				rs = DBUtils.executeLAPSQuery("sel_facilitycodedesc^"
						+ strAppno);
				while (rs.next()) {
					if (strmisaparam.equalsIgnoreCase("False")) {
						rs1 = DBUtils.executeLAPSQuery("sel_misappdetails^"
								+ strAppno + "^"
								+ correctNull(rs.getString("facility_sno")));
						if (rs1.next()) {
							strmisaparam = "False";
						} else {
							strmisaparam = "True";
						}
						if (strmisaparam.equalsIgnoreCase("False")) {
							rs1 = DBUtils
									.executeLAPSQuery("sel_cbsdetails^"
											+ strAppno
											+ "^"
											+ correctNull(rs
													.getString("facility_sno")));
							if (rs1.next()) {
								strmisaparam = "False";
							} else {
								strmisaparam = "True";
							}
						}
					}
				}
				String strBrief = "False";
				rs = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
						+ strAppno);
				if (rs.next()) {
					hshRecord.put("com_proposalsanctype", Helper.correctNull(rs
							.getString("com_proposalsanctype")));
					strBrief = "False";
					hshRecord.put("strCFR_VERIFIED", Helper.correctNull(rs
							.getString("COM_CFR_VERIFIED")));
					hshRecord.put("strCFR_BORNAME", Helper.correctNull(rs
							.getString("COM_CFR_BORNAME")));
					hshRecord.put("strCFR_DEV_RENFO", Helper.correctNull(rs
							.getString("COM_CFR_DEV_RENFO")));
					hshRecord.put("strSTATUS_VERIFIED", Helper.correctNull(rs
							.getString("STATUS_VERIFIED")));
				} else {
					strBrief = "True";
				}
				hshRecord.put("strmisaparam", strmisaparam);
				hshRecord.put("strBrief", strBrief);
			}
			if (strProductType.equalsIgnoreCase("pL")) {

				if (rsnew != null) {
					rsnew.close();
				}

				/*
				 * Commented by Arsath for Performance Tuning Field already
				 * included in previous query
				 * rsnew=DBUtils.executeLAPSQuery("selperprdmargin^"+strAppno);
				 * if(rsnew.next()) { dbltotgross =
				 * Double.parseDouble(Helper.correctDouble
				 * ((String)rsnew.getString("loan_costloanprd"))); }
				 */
				hshRecord.put("Totloangross", jtn.format(dbltotgross));
				Double dbltotleasegross = 0.00;
				if (rsnew != null) {
					rsnew.close();
				}
				rsnew = DBUtils.executeLAPSQuery("sel_grossleaseamnt^"
						+ strAppno);
				if (rsnew.next()) {
					dbltotleasegross = Double.parseDouble(Helper
							.correctDouble((String) rsnew
									.getString("per_grossrent")));
				}
				hshRecord.put("Totleasegross", jtn.format(dbltotleasegross));
			}
			int Takeovercount = 0;
			strQuery = SQLParser.getSqlQuery("Sel_takeover_house^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strTakeover = Helper.correctNull((String) rs
						.getString("phpa_take_over"));
				if (strTakeover.equalsIgnoreCase("Y")) {
					strQuery1 = SQLParser.getSqlQuery("Sel_takeover_count^"
							+ strAppno);
					rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						Takeovercount = Integer.parseInt(Helper
								.correctInt((String) rs1.getString("count")));
						if (Takeovercount < 1) {
							hshRecord.put("Takeoverflag", "Y");
						}
					}
				}
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("getsanctionamt^" + strCustid);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("Sanctionamt", Helper.correctInt((String) rs
						.getString("sanctionamt")));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("selratingflag^" + strPrdcode);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("prd_ratingflag", Helper.correctNull(
						(String) rs.getString("buss_bussid")).toUpperCase());
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_RenewFlg^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("apprenewflag", Helper.correctNull(
						rs.getString("app_renew_flag")).toUpperCase());
				if (Helper.correctNull(rs.getString("app_status"))
						.equalsIgnoreCase("pa")) {
					if (Helper.correctNull(rs.getString("app_renew_flag"))
							.equalsIgnoreCase("P")) {
						strQuery = SQLParser
								.getSqlQuery("selpostsanctionpendingapp^"
										+ strAppno + "^" + strAppno + "^"
										+ strAppno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							hshRecord.put("strUndoFlag", "N");
						} else {
							int intpsappcount = 0, intappcount = 0;
							if (rs1 != null)
								rs1.close();
							strQuery = SQLParser
									.getSqlQuery("sel_appundoflagchk^"
											+ strAppno);
							rs1 = DBUtils.executeQuery(strQuery);
							if (rs1.next()) {
								hshRecord.put("strUndoFlag", "N");
							}
						}
					} else {
						strQuery = SQLParser
								.getSqlQuery("selpostsanctionfacchkcorpagri^"
										+ strAppno + "^" + strAppno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							hshRecord.put("strUndoFlag", "N");
						}
					}

				}

			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_agmabovegroups^" + strusrid);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("ratinggroup", "Y");
			} else {
				hshRecord.put("ratinggroup", "N");
			}
			if (strSessionModuleType.equalsIgnoreCase("AGR")) {
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("selfacexeappno^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					if (Helper.correctNull(
							(String) rs.getString("facility_agrschemetype"))
							.equalsIgnoreCase("aQ")) {
						hshRecord.put("agrKCCFlag", "Y");
					}
				}
			}
			hshRecord.put("strPrdLoanType", strPrdLoanType);

			if (rs != null) {
				rs.close();
			}
			if (rs1 != null) {
				rs1.close();
			}
			String strFacSno = "";
			if (strSessionModuleType.equalsIgnoreCase("RET")) {
				strQuery = SQLParser
						.getSqlQuery("sel_attachedsecurities_retail^"
								+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("strSecuirtyFlag", "N");
				} else {
					hshRecord.put("strSecuirtyFlag", "Y");
				}
			} else if (strSessionModuleType.equalsIgnoreCase("DIGI")) {
				if (StrappLoansubtypeDigi.equals("PR")) {
					strQuery = SQLParser
							.getSqlQuery("sel_attachedsecurities_retail^"
									+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("strSecuirtyFlag", "N");
					} else {
						hshRecord.put("strSecuirtyFlag", "Y");
					}
				}
			} else {

				String strSecurityFlag = "N";
				boolean boolFlag = true;
				strQuery = SQLParser
						.getSqlQuery("sel_securitycheckforfacilitites^"
								+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					boolFlag = false;
					strFacSno = Helper
							.correctInt(rs1.getString("facility_sno"));
					if (strSecurityFlag.equalsIgnoreCase("N")) {
						strQuery = SQLParser
								.getSqlQuery("sel_attachedsecurities^"
										+ strAppno + "^" + strFacSno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							strSecurityFlag = "N";
						} else {
							strSecurityFlag = "Y";
						}
					}
				}
				if (boolFlag) {
					strSecurityFlag = "Y";
				}
				hshRecord.put("strSecuirtyFlag", strSecurityFlag);
			}
			hshRecord.put("strAppLevel", Helper.correctNull((String) hshValues
					.get("strOrgLevel")));

			// Sanction ref number availability check
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_sanc_ref_num^" + strAppno
					+ "^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strSancRefNum", "N");
			}

			// Base Rate check

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_baseratechk^" + strAppno
					+ "^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strBaseRateFlag", "Y");
			}

			boolean bflag = false;
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("chkinwardwithfacility^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			outerLoop: while (rs.next()) {
				if (Helper.correctNull(rs.getString("govt")).equalsIgnoreCase(
						"Y")
						&& Helper.correctNull(rs.getString("subsidyflag"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("sponsagency"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("schemetype"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("subsidytype"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("agency"))
								.equalsIgnoreCase("Y")) {
					bflag = true;
					break outerLoop;
				}
			}
			if (bflag) {
				hshRecord.put("strInwardCheck", "Y");
			} else {
				hshRecord.put("strInwardCheck", "N");
			}

			// To get the rating pending flag
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("selratingpendingapp_proposal^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("app_rating_pending", "Y");
			}

			// To check the Closed facilities
			if (rs1 != null)
				rs1.close();
			String strClosedFac = "", PERAPP_UDYOG_AADHAR = "";
			strQuery = SQLParser.getSqlQuery("sel_closedfac^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				if (strClosedFac.equalsIgnoreCase(""))
					strClosedFac = Helper.correctNull(rs1.getString(1));
				else
					strClosedFac = strClosedFac + "@"
							+ Helper.correctNull(rs1.getString(1));
			}
			hshRecord.put("strClosedFac", strClosedFac);

			// To Check the Amount tally flag for SHG
			String strFacNottally = "";
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("get_perapplicant_details^"
					+ strCustid);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strConstitution", Helper.correctNull((String) rs
						.getString("perapp_constitutionnew")));
				PERAPP_UDYOG_AADHAR = Helper.correctNull(rs
						.getString("PERAPP_UDYOG_AADHAR"));

				if (PERAPP_UDYOG_AADHAR.equalsIgnoreCase("")) {
					hshRecord.put("PERAPP_UDYOG_AADHAR1", "Y");

				} else {
					hshRecord.put("PERAPP_UDYOG_AADHAR1", "N");
				}
				// hshRecord.put("PERAPP_UDYOG_AADHAR",PERAPP_UDYOG_AADHAR);

				if (Integer.parseInt(Helper.correctInt((String) rs
						.getString("perapp_constitutionnew"))) >= 183
						&& Integer.parseInt(Helper.correctInt((String) rs
								.getString("perapp_constitutionnew"))) <= 191) {
					if (rs != null)
						rs.close();
					if (Helper.correctNull(
							(String) hshValues.get("sessionModuleType"))
							.equalsIgnoreCase("RET"))
						strQuery = SQLParser
								.getSqlQuery("sel_shgshareamount_retail^"
										+ strAppno);
					else
						strQuery = SQLParser.getSqlQuery("sel_shgshareAmount^"
								+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						if (Double.parseDouble(Helper.correctDouble(rs
								.getString("FACILITY_SANCAMT"))) == Double
								.parseDouble(Helper.correctDouble(rs
										.getString("sharesum")))) {
							// Do Nothing
						} else {
							if (strFacNottally.equalsIgnoreCase(""))
								strFacNottally = Helper.correctInt(rs
										.getString("FACILITY_SNO"));
							else
								strFacNottally = strFacNottally
										+ ", "
										+ Helper.correctInt(rs
												.getString("FACILITY_SNO"));
						}

						if (!strFacNottally.equalsIgnoreCase("")) {
							hshRecord.put("app_shg_tallied", "N");
							hshRecord.put("fac_not_tally", strFacNottally);
						}
					}
				}
			}

			if (rs != null)
				rs.close();
			String strMISCODEFlag = "";
			strQuery = SQLParser.getSqlQuery("select_mis_appdetails^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (rs1 != null)
					rs1.close();
				hshRecord.put("strMISCODEFlag", "Y");
				strQuery = SQLParser.getSqlQuery("sel_facdescription^"
						+ strAppno + "^"
						+ Helper.correctNull(rs.getString("app_facility_sno")));
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					strMISCODEFlag = strMISCODEFlag + ", "
							+ Helper.correctNull(rs1.getString("facility_sno"))
							+ "-"
							+ Helper.correctNull(rs1.getString("COM_FACDESC"));
				}
				hshRecord.put("strMISCODEFlagDesc", strMISCODEFlag
						.replaceFirst(",", ""));
			}

			if (rs != null)
				rs.close();
			if (strSessionModuleType.equalsIgnoreCase("RET")
					|| strSessionModuleType.equalsIgnoreCase("LAD")) {
				strQuery = SQLParser.getSqlQuery("chk_productavailability^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					if (Double.parseDouble(Helper.correctDouble(rs
							.getString("datediff"))) < 0
							|| Helper.correctNull(rs.getString("prd_stop"))
									.equals("y"))
						hshRecord.put("strReselectprd", "Y");
				}
			} else {
				strQuery = SQLParser.getSqlQuery("chk_facavailability^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("com_facility_stop"))
							.equalsIgnoreCase("1")) {
						hshRecord.put("strReselectprd", "Y");
						hshRecord.put("strReselectprdDesc", Helper
								.correctNull(rs.getString("facility_sno"))
								+ "-"
								+ Helper.correctNull(rs
										.getString("COM_FACDESC")));
					}
				}

				// Complicant tab Mandatory Take Over Loan
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("sel_takeover_details^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					if (Helper.correctNull(rs.getString("comtak_istakeover"))
							.equalsIgnoreCase("1")) {
						if (rs != null)
							rs.close();
						strQuery = SQLParser.getSqlQuery("takeovertermsel^"
								+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							hshRecord.put("strTakeOver", "Y");
						} else {
							hshRecord.put("strTakeOver", "N");
						}

						if (rs != null)
							rs.close();
						strQuery = SQLParser
								.getSqlQuery("sel_comtakeoverdetails^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							hshRecord.put("strTakeOverDetails", "Y");
						} else {
							hshRecord.put("strTakeOverDetails", "N");
						}

					}
				} else {
					hshRecord.put("strTakeOverDetails", "N");
				}

			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_appraiserdet^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strJewelAppraiser", "Y");
			}

			// Exposure Calculation done for Mahila UDyog Scheme
			double dblBorrowerExp = 0.0;
			if (strPrdType.equalsIgnoreCase("pU")) {
				dblBorrowerExp = getBorrowerMSMETotalLimit(strCustid, "R");

				hshRecord.put("strBorrowerExp", jtn.format(dblBorrowerExp));
				if (dblBorrowerExp > 1000000)
					hshRecord.put("strExposureChk", "F");
				else
					hshRecord.put("strExposureChk", "S");

				if (strAppStatus.equalsIgnoreCase("op")) {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_loandetailsMSMEExp");
					arrValues.add(jtn.format(dblBorrowerExp));
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);

					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else {
					hshRecord.put("strBorrowerExp", jtn.format(Double
							.parseDouble(Helper.correctDouble(strMSMEEXP))));
				}
			}
			//vindhya
			//exposure limit check for PAN check Except Gold Loan, Deposit Loan, Agriculture, SHG/JLG Borrowers begin 
			//checking limit amount 
			 double dblchecklimit = 0.0;
			 double dblchecklimit3 = 0.0;
			 String strQuery11="";
			 String strQuery12="";
			 if (strSessionModuleType.equalsIgnoreCase("AGR")) {
			 strQuery11 = SQLParser.getSqlQuery("sel_lapsapplicationparameters^133");
				rs = DBUtils.executeQuery(strQuery11);
				if (rs.next()) {
					dblchecklimit = Double.parseDouble((String) Helper.correctDouble(rs.getString("LOAN_PARAMVAL")));
				}
				
			 }
			 else if (strSessionModuleType.equalsIgnoreCase("CORP")) {
				 strQuery11 = SQLParser.getSqlQuery("sel_lapsapplicationparameters^134");
					rs = DBUtils.executeQuery(strQuery11);
					if (rs.next()) {
						dblchecklimit = Double.parseDouble((String) Helper.correctDouble(rs.getString("LOAN_PARAMVAL")));
					}
				 }
			 else
			 {
				 strQuery11 = SQLParser.getSqlQuery("sel_lapsapplicationparameters^135");
					rs = DBUtils.executeQuery(strQuery11);
					if (rs.next()) {
						dblchecklimit = Double.parseDouble((String) Helper.correctDouble(rs.getString("LOAN_PARAMVAL")));
					}
			}
			// hshRecord.put("strChecklimit", jtn.format(dblchecklimit));
			
			//checking limit amount
			String strPanCheck="";
			String strPanCheckcount="";
			if (rs != null)
				rs.close();

			strQuery = SQLParser
					.getSqlQuery("sel_lapsapplicationparameters^132"); 
			rs = DBUtils.executeQuery(strQuery);
			/*strQuery = SQLParser
					.getSqlQuery("getPANparameters^"+strAppno);
			rs = DBUtils.executeQuery(strQuery);*/
			
			if (rs.next()) {
				strPanCheck = Helper.correctNull(rs.getString("LOAN_PARAMVAL"));
				hshRecord.put("strPanCheck", strPanCheck);
			}
			/*if (rs.next()) {
				strPanCheckcount = Helper.correctNull(rs.getString("count"));
				if(strPanCheckcount.equals("0"))
				{
					hshRecord.put("strPanCheck", "Y");
				}
				else
					hshRecord.put("strPanCheck", "N");
				
			}*/
			
			double dblExplimit = 0.0;
			if (!strSessionModuleType.equalsIgnoreCase("AGR")) {
				
				dblExplimit = getExposureTotalLimit(strAppno, "R",strSessionModuleType);

				hshRecord.put("strdblExplimit", jtn.format(dblExplimit));
				//if (dblExplimit >= 50000)
				if (dblExplimit>= dblchecklimit)
					hshRecord.put("strExplimitchk", "F");
				else
					hshRecord.put("strExplimitchk", "S");			
				
			}
			double dblExplimitagr = 0.0;
			if (strSessionModuleType.equalsIgnoreCase("AGR")) {
				String strmainactcheck="";
				String strQuery2="";
				if (rs1 != null)
					rs1.close();

				strQuery2 = SQLParser
						.getSqlQuery("getmis_appdetailsagr^"+strAppno);
				rs1 = DBUtils.executeQuery(strQuery2);
				if (rs1.next()) {
					strmainactcheck = Helper.correctNull(rs1.getString("reccount"));					
					hshRecord.put("strmainactcheck", strmainactcheck);
				}
				if(strmainactcheck.equals("0"))
				{
					strQuery12 = SQLParser.getSqlQuery("sel_lapsapplicationparameters^136");
					rs = DBUtils.executeQuery(strQuery12);
					if (rs.next()) {
						dblchecklimit = Double.parseDouble((String) Helper.correctDouble(rs.getString("LOAN_PARAMVAL")));
					}
				}
				
				dblExplimitagr = getExposureTotalLimitagri(strAppno, "R",strmainactcheck);

				hshRecord.put("strdblExplimitagr", jtn.format(dblExplimitagr));
				if (dblExplimitagr >= dblchecklimit)
					hshRecord.put("strExplimitagrchk", "F");
				else
					hshRecord.put("strExplimitagrchk", "S");
			}
			hshRecord.put("strChecklimit", jtn.format(dblchecklimit));
			if (rs != null)
				rs.close();
			int pancount=0;
			strQuery = SQLParser.getSqlQuery("sel_for_pandetails^" + strAppno+ "^" + strAppno+ "^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if ((correctNull(rs.getString("PERAPP_PANNO")).equalsIgnoreCase("") || correctNull(rs.getString("PERAPP_PANNO")).equalsIgnoreCase("NOPAN")))
						{
							pancount++;
						}
				if(pancount>0)
				{
					hshRecord.put("Pancount", "N");
				}
				else
					hshRecord.put("Pancount", "Y");
				
			}
			
			//exposure limit check for PAN check Except Gold Loan, Depoist Loan, Agriculture, SHG/JLG Borrowers end 
			//vindhya	
			// document attachment check
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_app_attacheddocments^"
					+ strAppno + "^A");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strDocAttach_Flag", "Y");
			} else {
				hshRecord.put("strDocAttach_Flag", "N");
			}

			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("sel_allcomments^" + strAppno
					+ "^repaycomment");
			if (rs.next()) {
				hshRecord.put("strRepayComments", "Y");
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser
					.getSqlQuery("sel_lapsapplicationparameters^122");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strLmsCheck = Helper.correctNull(rs.getString("LOAN_PARAMVAL"));
			}
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("sel_inward_proposed_values^"
					+ strAppno);
			if (rs.next()) {
				hshRecord.put("strAppDocuments", Helper.correctNull(rs
						.getString("inward_docreceived")));
				hshRecord.put("strLARbankscheme", Helper.correctNull(rs
						.getString("inward_bankscheme")));
				if (strLmsCheck.equalsIgnoreCase("Y")
						&& (strAppStatus.equalsIgnoreCase("op") || strAppStatus
								.equalsIgnoreCase("ol"))) {
					if (!(correctNull(rs.getString("inw_leadno"))
							.equalsIgnoreCase("") || correctNull(
							rs.getString("inw_leadno")).equalsIgnoreCase("NA"))) {
						ArrayList arrParam = new ArrayList();
						arrParam.add(correctNull(rs.getString("inw_leadno"))
								.toUpperCase());
						if (ApplicationParams.getStrLMSConnection()
								.equalsIgnoreCase("TRUE"))
							rs = DBUtils.executeLMSQuery("chk_leadstatus1",
									arrParam);
						else
							rs = DBUtils.executeLAPSQuery("chk_leadstatus^"
									+ correctNull(rs.getString("inw_leadno"))
											.toUpperCase());
						if (rs.next()) {
							hshRecord.put("strLeadStatus", Helper
									.correctNull(rs.getString("lead_status")));
						} else {
							hshRecord.put("strLeadStatus", "N");
						}
					}
				}
			}
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("sel_per_bir^" + strAppno);
			if (rs.next()) {
				hshRecord.put("strBIRFlag", "Y");
			}

			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_per_CGTMSE^" + strAppno);
			if (rs.next()) {
				hshRecord.put("strCGTMSEFlag", "Y");
			} else {
				hshRecord.put("strCGTMSEFlag", "N");
			}
			// if((strProductType.equalsIgnoreCase("pS"))||(strLoantype.equalsIgnoreCase("C")
			// || strLoantype.equalsIgnoreCase("A")))
			{
				String strSecID = "";
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("chk_loanagainstsharesecvalue^"
						+ strAppno);
				while (rs.next()) {
					if (strSecID.equalsIgnoreCase(""))
						strSecID = Helper.correctNull(rs
								.getString("CUS_SEC_ID"));
					else
						strSecID = strSecID
								+ ","
								+ Helper
										.correctNull(rs.getString("CUS_SEC_ID"));
				}

				hshRecord.put("strUpdSecFlag", strSecID);

				strSecID = "";
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("chk_loanagainstsharesec^"
						+ strAppno);
				while (rs.next()) {
					if (strSecID.equalsIgnoreCase(""))
						strSecID = Helper.correctNull(rs
								.getString("CUS_SEC_ID"));
					else
						strSecID = strSecID
								+ ","
								+ Helper
										.correctNull(rs.getString("CUS_SEC_ID"));
				}

				hshRecord.put("strUnapprovedSecFlag", strSecID);

			}

			String strMaxPaidPercOurBank = "", strMaxPaidPercOthers = "";
			double dbltotalgrandLimit = 0.0;
			strQuery = SQLParser.getSqlQuery("sel_masterpercent^109','110^"
					+ Helper.getCurrentDateTime()
					+ "^ and LOAN_PARAM_ACTIVEFLAG='Y'");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (Helper.correctNull(rs.getString("loan_paramslno"))
						.equalsIgnoreCase("109"))
					strMaxPaidPercOurBank = Helper.correctNull(rs
							.getString("loan_paramval"));
				if (Helper.correctNull(rs.getString("loan_paramslno"))
						.equalsIgnoreCase("110"))
					strMaxPaidPercOthers = Helper.correctNull(rs
							.getString("loan_paramval"));
			}

			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("selcompanymaster_comname^000000001");
			if (rs.next()) {
				dbltotalgrandLimit = (Double.parseDouble(Helper
						.correctDouble(strMaxPaidPercOurBank)) * (Double
						.parseDouble(Helper.correctDouble(rs
								.getString("svm_companypaidup"))) + Double
						.parseDouble(Helper.correctDouble(rs
								.getString("svm_companyreservescapital"))))) / 100;
			}

			String strShareSec = "", strShareSecID = "";
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_equitsharesec^" + strAppno);
			while (rs.next()) {
				String strSecId = Helper
						.correctNull(rs.getString("CUS_SEC_ID"));
				String strCompanyCode = Helper.correctNull(rs
						.getString("CUS_COMPANYCODE"));
				int intExShareCnt = 0, intPresentShare = 0;
				double dblFaceValue = 0.0, dblPaidup = 0.0, dblMaxLimit = 0.00, dblTotalLmt = 0.0;

				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("sel_existingsharecnt^"
						+ strSecId + "^" + strSecId);
				if (rs1.next()) {
					intExShareCnt = Integer.parseInt(Helper.correctInt(rs1
							.getString("sharecnt")));
				}

				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("sel_presentsharecnt^"
						+ strSecId + "^" + strAppno + "^" + strSecId + "^"
						+ strAppno);
				if (rs1.next()) {
					intPresentShare = Integer.parseInt(Helper.correctInt(rs1
							.getString("sharecnt")));
				}

				intPresentShare += intExShareCnt;

				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("selcompanymaster_comname^"
						+ strCompanyCode);
				if (rs1.next()) {
					dblFaceValue = Double.parseDouble(Helper.correctDouble(rs1
							.getString("svm_facevalue")));
					dblPaidup = Double.parseDouble(Helper.correctDouble(rs1
							.getString("svm_companypaidup")));
				}

				dblMaxLimit = (Double.parseDouble(Helper
						.correctDouble(strMaxPaidPercOthers)) * dblPaidup) / 100;

				dblMaxLimit = Math.min(dblMaxLimit, dbltotalgrandLimit);
				dblTotalLmt = intPresentShare * dblFaceValue;

				if (dblTotalLmt > dblMaxLimit) {
					if (strShareSecID.equalsIgnoreCase(""))
						strShareSecID = strSecId;
					else
						strShareSecID = strShareSecID + "," + strSecId;
				}
			}
			hshRecord.put("strShareExceeds", strShareSecID);

			// Loan against Max amount check
			String strLASFlag = "";
			double dblDematAmt = 0.0, dblPhysicalShareAmt = 0.0;
			if (strLoantype.equalsIgnoreCase("C")
					|| strLoantype.equalsIgnoreCase("A")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sel_facility_details_interface^"
						+ strAppno);
				while (rs.next()) {
					if (Helper.correctNull(
							rs.getString("COM_LOANAGAINSTSHARES"))
							.equalsIgnoreCase("Y")) {
						strLASFlag = "Y";

						if (Helper.correctNull(rs.getString("COM_SHARETYPE"))
								.equalsIgnoreCase("P"))
							dblPhysicalShareAmt += Double.parseDouble(Helper
									.correctDouble(rs
											.getString("FACILITY_SANCAMT")));
						if (Helper.correctNull(rs.getString("COM_SHARETYPE"))
								.equalsIgnoreCase("D"))
							dblDematAmt += Double.parseDouble(Helper
									.correctDouble(rs
											.getString("FACILITY_SANCAMT")));
					}
				}
			} else {
				if (strProductType.equalsIgnoreCase("pS")) {
					strLASFlag = "Y";
					rs = DBUtils.executeLAPSQuery("selloandetailsamt^"
							+ strAppno);
					if (rs.next()) {
						if (Helper.correctNull(rs.getString("PRD_SHARETYPE"))
								.equalsIgnoreCase("P"))
							dblPhysicalShareAmt += Double.parseDouble(Helper
									.correctDouble(rs
											.getString("loan_recmdamt")));
						if (Helper.correctNull(rs.getString("PRD_SHARETYPE"))
								.equalsIgnoreCase("D"))
							dblDematAmt += Double.parseDouble(Helper
									.correctDouble(rs
											.getString("loan_recmdamt")));
					}
				}
			}
			if (strLASFlag.equalsIgnoreCase("Y")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sel_otherbanksharelimit^"
						+ strOldid);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("PERBANK_LOANPURPOSE"))
							.equalsIgnoreCase("4"))
						dblPhysicalShareAmt += Double.parseDouble(Helper
								.correctDouble(rs.getString("amt")));
					else if (Helper.correctNull(
							rs.getString("PERBANK_LOANPURPOSE"))
							.equalsIgnoreCase("5"))
						dblDematAmt += Double.parseDouble(Helper
								.correctDouble(rs.getString("amt")));
				}
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sum_retailloanagainstshare^"
						+ strOldid);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("PRD_SHARETYPE"))
							.equalsIgnoreCase("P"))
						dblPhysicalShareAmt += Double.parseDouble(Helper
								.correctDouble(rs.getString("amt")));
					else if (Helper.correctNull(rs.getString("PRD_SHARETYPE"))
							.equalsIgnoreCase("D"))
						dblDematAmt += Double.parseDouble(Helper
								.correctDouble(rs.getString("amt")));
				}
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sum_corpagriloanagainstshare^"
						+ strOldid);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("com_sharetype"))
							.equalsIgnoreCase("P"))
						dblPhysicalShareAmt += Double.parseDouble(Helper
								.correctDouble(rs.getString("amt")));
					else if (Helper.correctNull(rs.getString("com_sharetype"))
							.equalsIgnoreCase("D"))
						dblDematAmt += Double.parseDouble(Helper
								.correctDouble(rs.getString("amt")));
				}

				double dblPhysicalShareLimit = 0.0, dblDematshareLimit = 0.0;
				strQuery = SQLParser
						.getSqlQuery("selloanagainstparams^113','114");
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("loan_paramslno"))
							.equalsIgnoreCase("113"))
						dblPhysicalShareLimit = Double.parseDouble(Helper
								.correctDouble(rs.getString("loan_paramval")));
					if (Helper.correctNull(rs.getString("loan_paramslno"))
							.equalsIgnoreCase("114"))
						dblDematshareLimit = Double.parseDouble(Helper
								.correctDouble(rs.getString("loan_paramval")));
				}

				if (dblPhysicalShareAmt > dblPhysicalShareLimit) {
					hshRecord.put("strPhyLimitExceeds", "Y");
				}
				if (dblDematAmt > dblDematshareLimit) {
					hshRecord.put("strDematLimitExceeds", "Y");
				}

			}

			if (strLoantype.equalsIgnoreCase("C")
					|| strLoantype.equalsIgnoreCase("A")) {
				int a = 0, b = 0;
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("select_facility_details^"
						+ strAppno);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("COM_BANKSCHEME"))
							.equalsIgnoreCase("052")) {
						a++;
						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils
								.executeLAPSQuery("select_facility_chklist^"
										+ strAppno
										+ "^"
										+ Helper.correctNull(rs
												.getString("FACILITY_SNO")));
						if (rs1.next()) {
							b++;
						}
						hshRecord.put("strMSMEFacility", "Y");
					}

				}
				if (a == b)
					hshRecord.put("ChkMSMEFacility", "Y");
			}
			// for corporate and retail document attach check
			ArrayList arrDoc = new ArrayList();
			strQuery = SQLParser.getSqlQuery("chk_perapp_docattach^" + strAppno
					+ "^O");
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				arrDoc.add(Helper.correctNull(rs1.getString("apa_doccode")));
			}
			hshRecord.put("arrDoc", arrDoc);

			// to check query status for retail
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_querystatus^" + strAppno);
			if (rs.next()) {
				if (Integer.parseInt(Helper.correctInt(rs.getString("cnt"))) > 0)
					hshRecord.put("Query_Status", "No");
			}
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("chkforquerypendingcount^" + strAppno);
			if (rs.next()) {
				if (Integer.parseInt(Helper.correctInt(rs.getString("cnt"))) > 0)
				{
					hshRecord.put("Query_pending", "No");
				}
			}
			if (rs != null)
				rs.close();
			
			

			// for CheckList check by raja
			if (!strLoantype.equalsIgnoreCase("P")) {
				/*
				 * if(rs!=null) rs.close();
				 * 
				 * 
				 * strQuery=SQLParser.getSqlQuery("sel_appraisalgovtQuest^"+strAppno
				 * ); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * hshRecord.put("Checklist_check","Y"); } else {
				 * hshRecord.put("Checklist_check","N"); }
				 */

			}
			// for guarantor check in retail
			if (strLoantype.equalsIgnoreCase("P")) {
				int a = 0;
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("sel_guar_check^" + strAppno);
				while (rs.next()) {
					if (!Helper.correctNull(rs.getString("DEMO_APPID"))
							.equalsIgnoreCase("")) {
						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils
								.executeLAPSQuery("sel_guar_chklist^"
										+ Helper.correctNull(rs
												.getString("DEMO_APPID")));
						if (rs1.next()) {
							if (!Helper.correctNull(
									rs1.getString("perapp_profilestatus"))
									.equalsIgnoreCase("Y")) {
								a++;
							}
						}
					}
				}
				if (a > 0) {
					hshRecord.put("strGuarantor", "N");
				} else {
					hshRecord.put("strGuarantor", "Y");
				}
			}

			// guarantor check for corporate
			if (strLoantype.equalsIgnoreCase("C")
					|| strLoantype.equalsIgnoreCase("A")) {
				int a = 0;
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("incomplete_perappid_appcoapp^"
						+ strAppno + "^" + strAppno);
				while (rs.next()) {
					a++;
				}
				if (a > 0) {
					hshRecord.put("strGuarantor_corp", "N");
				} else {
					hshRecord.put("strGuarantor_corp", "Y");
				}
			}

			if (strLoantype.equalsIgnoreCase("P")) {
				if (rs2 != null)
					rs2 = null;

				String strGovtscheme = "";
				String strGovtCategory = "";
				String strfrom_date = "";
				String strto_date = "";

				strQuery = SQLParser
						.getSqlQuery("selperprdintrate^" + strAppno);
				rs2 = DBUtils.executeQuery(strQuery);
				if (rs2.next()) {
					strGovtscheme = Helper.correctNull(rs2
							.getString("govt_scheme"));
					hshRecord.put("strTenorAvail", Helper.correctInt(rs2
							.getString("loan_reqterms")));
					hshRecord.put("strGovtscheme", strGovtscheme);
				}

				if (strGovtscheme.equalsIgnoreCase("078")
						|| strGovtscheme.equalsIgnoreCase("079")) {
					hshRecord.put("strPMAY", "Y");
					strQuery = SQLParser.getSqlQuery("sel_PMAY_desc^"
							+ strAppno);
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						hshRecord.put("PMAY_HOUSE_CAT", "Y");
						hshRecord.put("strOwnedHouse", Helper.correctNull(rs2
								.getString("PMAY_BORR_PUCCA")));
						strGovtCategory = Helper.correctNull(rs2
								.getString("PMAY_HOUSE_CAT"));

					} else {
						hshRecord.put("PMAY_HOUSE_CAT", "N");
					}

					if (!strGovtCategory.equalsIgnoreCase("")) {
						String strProcessDate = Helper.getCurrentDateTime();

						if (rs2 != null)
							rs.close();
						rs2 = DBUtils
								.executeLAPSQuery("selappretailprocessdate^"
										+ strAppno);
						if (rs2.next()) {
							strProcessDate = Helper.correctNull(rs2
									.getString("app_processdate"));
						}

						if (rs2 != null)
							rs2 = null;
						strQuery = SQLParser.getSqlQuery("selPmayData_Active^"
								+ strGovtscheme + "^" + strGovtCategory);
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							if (!Helper.correctNull(
									rs2.getString("PM_FROM_DATE"))
									.equalsIgnoreCase("")) {
								hshRecord
										.put(
												"strValidFrom",
												String
														.valueOf(Helper
																.dateDiff(
																		Helper
																				.correctNull(rs2
																						.getString("PM_FROM_DATE")),
																		strProcessDate)));
							}
							if (!Helper.correctNull(
									rs2.getString("PM_FINISH_DATE"))
									.equalsIgnoreCase("")) {
								hshRecord
										.put(
												"strValidTo",
												String
														.valueOf(Helper
																.dateDiff(
																		Helper
																				.correctNull(rs2
																						.getString("PM_FINISH_DATE")),
																		strProcessDate)));
							}

							hshRecord.put("strFemaleownerReq", Helper
									.correctNull(rs2
											.getString("PM_FEMALE_OWNERSHIP")));
							hshRecord.put("strCarpetAreaReq", Helper
									.correctNull(rs2.getString("PM_AREA")));
							hshRecord.put("strTenorReq", Helper.correctInt(rs2
									.getString("PM_MAXLOAN_TENOR")));

						}

						if (rs2 != null)
							rs2.close();
						strQuery = SQLParser
								.getSqlQuery("sel_perapp_femaleBorrower^"
										+ strAppno);
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshRecord.put("strFemaleownerAvail", "Y");
						}

						if (rs2 != null)
							rs2.close();
						double prophousearea = 0.00;
						strQuery = SQLParser
								.getSqlQuery("sel_per_house_proposed_asset^"
										+ strAppno);
						rs2 = DBUtils.executeQuery(strQuery);
						while (rs2.next()) {
							prophousearea += Double
									.parseDouble(Helper.correctDouble(rs2
											.getString("PHPA_FLOORSPACE_AREA")));
						}

						hshRecord.put("strCarpetAreaAvail", String.valueOf(Math
								.round(prophousearea * 0.092903)));
					}
				}
			} else {
				ArrayList arrRow = new ArrayList();
				if (rs2 != null)
					rs2.close();
				strQuery = SQLParser.getSqlQuery("sel_bankschemes^" + strAppno);
				rs2 = DBUtils.executeQuery(strQuery);
				while (rs2.next()) {
					arrRow.add(Helper.correctNull(rs2.getString("scheme")));
				}

				hshRecord.put("arrSchemes", arrRow);
			}

			if (strLoantype.equalsIgnoreCase("P")) {
				ArrayList arrRow = new ArrayList();
				ArrayList arrCol1 = new ArrayList();
				if (rs2 != null)
					rs2.close();
				strQuery = SQLParser.getSqlQuery("sel_revalidfromApp^"
						+ strAppno);
				rs2 = DBUtils.executeQuery(strQuery);
				while (rs2.next()) {
					arrCol1 = new ArrayList();
					arrCol1.add(Helper.correctNull(rs2
							.getString("PRD_SANC_VALID")));// 0
					arrCol1.add(Helper.correctNull(rs2
							.getString("PRD_REVALID_DAYS")));// 1
					arrCol1.add(Helper.correctNull(rs2
							.getString("PRD_NOTAVAILED_DAYS")));// 2
					arrCol1.add(Helper.correctNull(rs2
							.getString("APP_PROCESSDATE")));// 3
					arrCol1.add("1");// 4
					arrCol1.add(Helper.correctNull(rs2
							.getString("APP_REVALIDATIONDATE")));// 5
					arrCol1.add(Helper.correctNull(rs2
							.getString("APP_REVALIDATIONFLAG")));// 6
					arrCol1.add(Helper.correctNull(rs2
							.getString("APP_REVALIDATIONSTATUS")));// 7
					arrCol1.add(Helper.correctNull(rs2
							.getString("APP_REVALIDATEDBY")));// 8
					arrCol1.add("1");
					arrRow.add(arrCol1);
					if (Helper.correctNull(
							rs2.getString("APP_REVALIDATIONFLAG"))
							.equalsIgnoreCase("Y"))
						hshRecord.put("strRevalidationFlag", "Y");
				}
				hshRecord.put("arrRevalidation", arrRow);
			} else {
				ArrayList arrRow = new ArrayList();
				ArrayList arrCol1 = new ArrayList();
				if (rs2 != null)
					rs2.close();
				strQuery = SQLParser.getSqlQuery("sel_fac_revalidation^"
						+ strAppno + "^ ");
				rs2 = DBUtils.executeQuery(strQuery);
				while (rs2.next()) {
					arrCol1 = new ArrayList();
					arrCol1.add(Helper.correctNull(rs2
							.getString("COM_SANC_DAYS")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("COM_REVALID_DAYS")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("COM_NOTAVAILED_DAYS")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("FAC_PROCESSDATE")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("facility_sno")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("fac_revalidationdate")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("fac_revalidationflag")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("fac_revalidationstatus")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("fac_revalidatedby")));
					arrCol1.add(Helper.correctNull(rs2
							.getString("facility_sno")));
					arrRow.add(arrCol1);
					if (Helper.correctNull(
							rs2.getString("fac_revalidationflag"))
							.equalsIgnoreCase("Y"))
						hshRecord.put("strRevalidationFlag", "Y");
				}
				hshRecord.put("arrRevalidation", arrRow);
			}

			// PostSanction Check for Retail & corporate check
			String strBoolFlag = "";
			String strParms = "", strTemp = "", strOrglevel = "";
			String[] strparams_div = null;
			String[] strOrg_array = null;
			int strAuthority = 0, class_value = 0;
			class_value = Integer.parseInt(Helper.correctInt((String) hshValues
					.get("strUserClass")));
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_post_sanction_applications^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strParms = Helper.correctNull(rs.getString("ps_modify_terms"));
				strparams_div = strParms.split("@");
				for (int i = 0; i < strparams_div.length; i++) {
					strTemp = strparams_div[i];
					if (rs2 != null)
						rs2.close();
					if (strLoantype.equalsIgnoreCase("P"))
						strQuery = SQLParser.getSqlQuery("sel_post_parameters^"
								+ strTemp);
					else
						strQuery = SQLParser
								.getSqlQuery("sel_post_parameters_corp^"
										+ strTemp);
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						if (strBoolFlag.equalsIgnoreCase("true")
								|| strBoolFlag.equalsIgnoreCase("")) {
							strOrglevel = Helper.correctNull(rs2
									.getString("PS_PARAM_ORGLEVEL"));
							strAuthority = Integer.parseInt(Helper
									.correctInt(rs2
											.getString("PS_PARAM_MINCLASS")));
							if ((strOrglevel.contains(Helper
									.correctNull((String) hshValues
											.get("strOrgLevel"))))
									&& (strAuthority <= class_value)) {
								strBoolFlag = "true";
							} else {
								strBoolFlag = "false";
							}
						}
					}
				}
			}// while end
			hshRecord.put("strBoolFlag", strBoolFlag);

			boolean boolBranchSanc = true;
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_postsancfacdetails^" + strAppno);
			while (rs.next()) {
				if (boolBranchSanc
						&& (Helper.correctNull(rs.getString("FACILITY_HEADID"))
								.equalsIgnoreCase("3") && Helper.correctNull(
								rs.getString("FACILITY_ID")).equalsIgnoreCase(
								"89"))
						&& (Helper.correctNull(rs.getString("FACILITY_HEADID"))
								.equalsIgnoreCase("5") && Helper.correctNull(
								rs.getString("FACILITY_ID")).equalsIgnoreCase(
								"51"))) {
					strParms = Helper.correctNull(rs
							.getString("ps_modify_terms"));
					strparams_div = strParms.split("@");
					for (int i = 0; i < strparams_div.length; i++) {
						if (!strparams_div[i].equalsIgnoreCase("INLIM")) {
							boolBranchSanc = false;
						}
					}
				} else {
					boolBranchSanc = false;
				}
			}

			if (rs.previous()) {
				if (boolBranchSanc) {
					hshRecord.put("strPostSancBranch", "true");
				} else {
					hshRecord.put("strPostSancBranch", "false");
				}
			} else {
				hshRecord.put("strPostSancBranch", "false");
			}

			if (rs1 != null)
				rs1.close();
			strQuery = SQLParser.getSqlQuery("sel_applKYCNorms^" + strCustid);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				hshRecord.put("kyc_activity", correctNull(rs1
						.getString("KYC_KYCactivity")));
			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_for_cgdetails^" + strAppno
					+ "^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("CGPan", correctNull((String) rs
						.getString("PERAPP_PANNO")));
				hshRecord.put("PERAPP_UDYOG_AADHAR", correctNull((String) rs
						.getString("PERAPP_UDYOG_AADHAR")));
			}
			String strRoiType = "", strRatingScore = "", strCRIFScore = "", strCIBILScore = "";

			strQuery1 = SQLParser.getSqlQuery("sel_creditRatingType^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery1);
			if (rs.next()) {
				strRatingScore = Helper.correctNull(rs.getString("cre_weight"));
			}
			if (rs1 != null)
				rs1.close();
			strQuery = SQLParser.getSqlQuery("cuscibildetails_sel^" + strCustid
					+ "^" + strCustid);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				strCRIFScore = Helper.correctNull(rs1.getString("CRIF_SCORE"));
				strCIBILScore = Helper
						.correctNull(rs1.getString("cibil_score"));
			}

			if (strLoantype.equalsIgnoreCase("P")) {
				String strScore = "";
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selloan_details^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("LOAN_ROISCORE", correctNull((String) rs
							.getString("LOAN_ROISCORE")));
					hshRecord.put("LOAN_ROITYPE", correctNull((String) rs
							.getString("LOAN_ROITYPE")));
					strRoiType = correctNull((String) rs
							.getString("LOAN_ROITYPE"));
				}

				if (strRoiType.equalsIgnoreCase("RATING"))
					strScore = strRatingScore;
				else if (strRoiType.equalsIgnoreCase("CRIF"))
					strScore = strCRIFScore;
				else if (strRoiType.equalsIgnoreCase("CIBIL"))
					strScore = strCIBILScore;

				hshRecord.put("LOAN_SetupScore", strScore);
			} else {
				int intDeviation = 0;
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("sel_Cgtmse_Sno^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					if (!(correctNull((String) rs.getString("FAC_ROITYPE"))
							.equalsIgnoreCase("") || correctNull(
							(String) rs.getString("FAC_ROITYPE"))
							.equalsIgnoreCase("O"))) {
						if (correctNull((String) rs.getString("FAC_ROITYPE"))
								.equalsIgnoreCase("RATING")
								&& !(correctNull((String) rs
										.getString("FAC_ROISCORE"))
										.equalsIgnoreCase(strRatingScore)))
							intDeviation++;
						else if (correctNull(
								(String) rs.getString("FAC_ROITYPE"))
								.equalsIgnoreCase("CIBIL")
								&& !(correctNull((String) rs
										.getString("FAC_ROISCORE"))
										.equalsIgnoreCase(strCIBILScore)))
							intDeviation++;
						else if (correctNull(
								(String) rs.getString("FAC_ROITYPE"))
								.equalsIgnoreCase("CRIF")
								&& !(correctNull((String) rs
										.getString("FAC_ROISCORE"))
										.equalsIgnoreCase(strCRIFScore)))
							intDeviation++;
					}

				}

				hshRecord.put("intDeviationCnt", String.valueOf(intDeviation));
			}

			if (rs1 != null) {
				rs1.close();
			}
			strQuery1 = SQLParser
					.getSqlQuery("sel_borrower_totalexposureamount^" + strAppno
							+ "^" + comapp_id);
			rs1 = DBUtils.executeQuery(strQuery1);
			if (rs1.next()) {
				hshRecord.put("strBorrExp", Helper.correctDouble(rs1
						.getString("APP_TOTALEXPOSURE")));
			}

			// Bureau Mandatory check for Individual

			if (strSessionModuleType.equalsIgnoreCase("RET")) {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getappcoappguarantor^"
						+ strAppno);
				while (rs1.next()) {
					if (Helper.correctNull(rs1.getString("demo_cibil"))
							.equalsIgnoreCase("")
							|| (Helper.correctNull(
									rs1.getString("DEMO_CIBIL_SCORE"))
									.equalsIgnoreCase("") || Helper
									.correctNull(
											rs1.getString("DEMO_CRIF_SCORE"))
									.equalsIgnoreCase(""))) {
						hshRecord.put("strCIBILChk", "No");
					}
				}
			} else {
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getappcoappguarantor_corp1^"
						+ strAppno);
				while (rs1.next()) {
					if (Helper.correctNull(rs1.getString("demo_cibil"))
							.equalsIgnoreCase("")
							|| (Helper.correctNull(
									rs1.getString("DEMO_CIBIL_SCORE"))
									.equalsIgnoreCase("") || Helper
									.correctNull(
											rs1.getString("DEMO_CRIF_SCORE"))
									.equalsIgnoreCase(""))) {
						hshRecord.put("strCIBILChk", "No");
						break;
					}
				}
			}

			{
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_standupindiaproposalchk^"
					+ strAppno);
			if (rs1.next()) {

				if (ApplicationParams.getCbsIntegration().equalsIgnoreCase(
						"TRUE")) {
					strQuery = SQLParser
							.getCBSSqlQuery("cbs_custdetails_select_newconnection^"
									+ strCBSID);
					rs = DBUtils.executeQueryCBSConnection(strQuery);
				} else {
					strQuery = SQLParser.getSqlQuery("cbs_custdetails_select^"
							+ strCBSID);
					rs = DBUtils.executeQuery(strQuery);
				}
				if (rs.next()) {
					String strCustConstitution = Helper.correctNull(rs
							.getString("cust_const"));
					if (strCustConstitution.equalsIgnoreCase("01")) {
						if (!(Helper.correctNull(rs.getString("cust_sex"))
								.equalsIgnoreCase("F") || (Helper.correctNull(
								rs.getString("cust_caste_code"))
								.equalsIgnoreCase("001") || Helper.correctNull(
								rs.getString("cust_caste_code"))
								.equalsIgnoreCase("002")))) {
							hshRecord.put("strStandupCheck", "No");
						}
					}
				}
			}

			// Draw Down Schedule check

			double dblSancAmt = 0.0, dblDisbAmt = 0.0;
			if (rs1 != null)
				rs1.close();
			rs1 = DBUtils.executeLAPSQuery("sel_dds^" + strAppno);
			while (rs1.next()) {
				dblSancAmt = Double.parseDouble(Helper.correctDouble(rs1
						.getString("facility_sanctioned")));
				dblDisbAmt = 0.0;
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("drawdownsclt^" + strAppno + "^"
						+ Helper.correctInt(rs1.getString("facility_sno")));
				while (rs.next()) {
					dblDisbAmt += Double.parseDouble(Helper.correctDouble(rs
							.getString("amt_qtr")));
				}

				if (dblSancAmt != dblDisbAmt) {
					hshRecord.put("strDrawDownFlag", "No");
				}

			}

			// MIS Details Activity Code check
			StringBuffer strFac = new StringBuffer();
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("chk_addfacilitymisdetails^"
					+ strAppno);
			while (rs.next()) {

				{

					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils
							.executeLAPSQuery("chk_misdetails^"
									+ Helper.correctNull(rs
											.getString("FAC_ADDAPPNO"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("FAC_ADDAPPSNO")));
					if (rs1.next()) {
						if (!Helper
								.correctDouble(rs.getString("APP_ACTIVITYCODE"))
								.equalsIgnoreCase(
										Helper.correctDouble(rs1
												.getString("APP_ACTIVITYCODE")))) {
							strFac
									.append(
											Helper.correctNull(rs
													.getString("FAC_SNO")))
									.append(
											" - Activity Code differs from the Regular Limit")
									.append("~");
						}
						if (!Helper.correctDouble(rs.getString("app_equipval"))
								.equalsIgnoreCase(
										Helper.correctDouble(rs1
												.getString("app_equipval")))) {
							strFac
									.append(
											Helper.correctNull(rs
													.getString("FAC_SNO")))
									.append(
											" -Original Investment in Equipments / Cost of Vehicles Used in Business  the Regular Limit")
									.append("~");
						}
						if (!Helper.correctDouble(rs.getString("app_plantval"))
								.equalsIgnoreCase(
										Helper.correctDouble(rs1
												.getString("app_plantval")))) {
							strFac
									.append(
											Helper.correctNull(rs
													.getString("FAC_SNO")))
									.append(
											" -Original Investment in Plant & Machineries/Equipments the Regular Limit")
									.append("~");
						}

					}
				}

			}

			hshRecord.put("strFacAdhocDet", strFac.toString());

			// To check the KFS Details
			if (rs1 != null)
				rs1.close();
			String strKFS = "";
			strQuery = SQLParser.getSqlQuery("select_keyfactfeesdata^"
					+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				if (strKFS.equalsIgnoreCase(""))
					strKFS = Helper.correctNull(rs1.getString("KF_FACSNO"));
				else
					strKFS = strKFS + "@"
							+ Helper.correctNull(rs1.getString("KF_FACSNO"));
			}
			hshRecord.put("strKFSDetails", strKFS);

			// To get the GECL facility
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("chk_geclfacchk^" + strAppno);
			while (rs.next()) {
				if (Helper.correctNull(rs.getString("com_bankscheme"))
						.equalsIgnoreCase("061"))
					hshRecord.put("strgeclavailable", "Y");
				if (Helper.correctNull(rs.getString("com_bankscheme"))
						.equalsIgnoreCase("064"))
					hshRecord.put("strSvanidhi", "Y");
				hshRecord.put("com_gecltype", Helper.correctNull(rs
						.getString("com_gecltype")));

			}
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("chk_cgssdfacchk^" + strAppno);
			String strcgssdavailable = "N";
			while (rs.next()) {
				strcgssdavailable = "Y";
			}
			hshRecord.put("strcgssdavailable", strcgssdavailable);

			if (rs != null)
				rs.close();

			String strCGSSDChk = "N";
			rs = DBUtils.executeLAPSQuery("sel_cgssd_detail^" + strAppno);
			if (rs.next()) {
				strCGSSDChk = "Y";
			}
			hshRecord.put("strCGSSDChk", strCGSSDChk);

			rs = DBUtils.executeLAPSQuery("sel_com_ksaeassessment^" + strAppno);
			if (rs.next()) {
				hshRecord.put("strGECLChk", "Y");
				hshRecord.put("strGECLFor", Helper.correctNull(rs
						.getString("com_eligiblebasedon")));
			}

			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_mithrachk^" + strAppno);
			while (rs.next()) {
				// if(!(Helper.correctNull(rs.getString("app_agriculture")).equalsIgnoreCase("7")||Helper.correctNull(rs.getString("app_agriculture")).equalsIgnoreCase("11")))
				{
					hshRecord.put("strMMithraChk", "N");
				}
			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sum_mmithrafacamt^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("strMithraFacTot", correctNull(rs
						.getString("total")));
			}
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
					+ strAppno + "^MMithra");
			while (rs.next()) {
				hshRecord.put("strAmount"
						+ Helper.correctNull(rs.getString("com_sno")), Helper
						.correctNull(rs.getString("com_details")));
			}

			String strFIDPN = "";
			boolean bflagDPN = false;
			int intCount1 = 0, intCount2 = 0;
			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("sel_dpnfacilities^" + strAppno);
			while (rs.next()) {
				bflagDPN = true;
				intCount1++;
				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("sel_dpn_assesmentdetails^"
						+ strAppno + "^FIDPN^"
						+ Helper.correctNull(rs.getString("facility_sno")));
				while (rs1.next()) {
					if (bflagDPN == true) {
						intCount2++;
						bflagDPN = false;
					}
					if (Helper.correctNull(rs1.getString("com_sno"))
							.equalsIgnoreCase("9")) {
						if (Double.parseDouble(Helper.correctDouble(rs1
								.getString("com_details"))) < Double
								.parseDouble(Helper.correctDouble(rs
										.getString("facility_sancamt")))) {
							if (strFIDPN.equalsIgnoreCase(""))
								strFIDPN = Helper.correctNull(rs
										.getString("facility_sno"))
										+ "-"
										+ Helper.correctNull(rs
												.getString("com_facdesc"))
										+ ",";
							else
								strFIDPN = strFIDPN
										+ Helper.correctNull(rs
												.getString("facility_sno"))
										+ "-"
										+ Helper.correctNull(rs
												.getString("com_facdesc"))
										+ ",";
						}
					}
				}

			}

			if (rs1 != null)
				rs1.close();
			strQuery = SQLParser
					.getSqlQuery("sel_svanidhidetails^" + strCustid);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				if (Helper.correctNull(rs1.getString("PERAPP_TERM1CERTIFIED"))
						.equalsIgnoreCase("Y")
						&& Helper.correctNull(
								rs1.getString("PERAPP_TERMCERTIFIED2"))
								.equalsIgnoreCase("Y")) {
					hshRecord.put("strSvanidhiTerm", "Y");
				}
			}

			if (intCount1 != intCount2) {
				hshRecord.put("strFIDPNChk", "N");
			}
			hshRecord.put("strFIDPNDet", strFIDPN);

			rs1 = DBUtils.executeLAPSQuery("selkyc_kycActivity^" + strCustid);
			if (rs1.next()) {
				hshRecord.put("KYC_KYCactivity", correctNull((String) rs1
						.getString("KYC_KYCactivity")));
			}

			if (rs != null)
				rs.close();
			if (Helper.correctNull((String) hshValues.get("strAppType"))
					.equalsIgnoreCase("S")) {
				rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
						+ strAppno + "^GECL-Restructure");
			} else {
				rs = DBUtils.executeLAPSQuery("sel_com_assesmentdetails^"
						+ strAppno + "^GECL");

			}
			if (rs.next()) {
				hshRecord.put("strGECLAssCheck", "Y");
			}
			if (StrappLoansubtypeDigi.equalsIgnoreCase("PC")) {

				String VERI_CHKBOX_VALUE = "", strverification = ",com_DEMOGRAPHICS where veri_appid=DEMO_COMAPPNEWID and VERI_APPNO=DEMO_APPNO and VERI_APPNO="
						+ "'" + strAppno + "'" + "";

				String[] VERI_CHKBOX_VALUES = null;
				strQuery = SQLParser.getSqlQuery("sel_verification_verifi^"
						+ strverification);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					VERI_CHKBOX_VALUE = correctNull((String) rs
							.getString("VERI_CHKBOX_VALUE"));
					VERI_CHKBOX_VALUES = VERI_CHKBOX_VALUE.split("@");
					if ((VERI_CHKBOX_VALUES[0].contains("BPV") || VERI_CHKBOX_VALUES[0]
							.contains("BPVNA"))
							&& (VERI_CHKBOX_VALUES[1].contains("RV") || VERI_CHKBOX_VALUES[1]
									.contains("RVNA"))
							&& (VERI_CHKBOX_VALUES[2].contains("PAN") || VERI_CHKBOX_VALUES[2]
									.contains("PANNA"))
							&& (VERI_CHKBOX_VALUES[3].contains("CV") || VERI_CHKBOX_VALUES[3]
									.contains("CVNA"))
							&& (VERI_CHKBOX_VALUES[4].contains("BNK") || VERI_CHKBOX_VALUES[4]
									.contains("BNKNA"))
							&& (VERI_CHKBOX_VALUES[5].contains("ITR") || VERI_CHKBOX_VALUES[5]
									.contains("ITRNA"))
							&& (VERI_CHKBOX_VALUES[6].contains("GSTIN") || VERI_CHKBOX_VALUES[6]
									.contains("GSTINNA"))
							&& (VERI_CHKBOX_VALUES[7].contains("UAN") || VERI_CHKBOX_VALUES[7]
									.contains("UANNA"))
							&& (VERI_CHKBOX_VALUES[8].contains("BS") || VERI_CHKBOX_VALUES[8]
									.contains("BSNA"))
							&& (VERI_CHKBOX_VALUES[9].contains("TPL") || VERI_CHKBOX_VALUES[9]
									.contains("TPLNA"))
							&& (VERI_CHKBOX_VALUES[10].contains("SFFS") || VERI_CHKBOX_VALUES[10]
									.contains("SFFSNA"))
							&& (VERI_CHKBOX_VALUES[11].contains("CLC") || VERI_CHKBOX_VALUES[11]
									.contains("CLCNA"))) {
						hshRecord.put("VERI_CHKBOX_VALUE", "Y");
					}
				}
				strverification = ",COM_COMPANYDETAILS where veri_appid=COM_COMPDTAPPID and VERI_APPNO=COM_COMPDTAPPNO and VERI_APPNO="
						+ "'" + strAppno + "'" + "";
				rs1.close();
				strQuery = SQLParser.getSqlQuery("sel_verification_verifi^"
						+ strverification);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					VERI_CHKBOX_VALUE = correctNull((String) rs
							.getString("VERI_CHKBOX_VALUE"));
					VERI_CHKBOX_VALUES = VERI_CHKBOX_VALUE.split("@");
					if ((VERI_CHKBOX_VALUES[0].contains("BPV") || VERI_CHKBOX_VALUES[0]
							.contains("BPVNA"))
							&& (VERI_CHKBOX_VALUES[1].contains("RV") || VERI_CHKBOX_VALUES[1]
									.contains("RVNA"))
							&& (VERI_CHKBOX_VALUES[2].contains("PAN") || VERI_CHKBOX_VALUES[2]
									.contains("PANNA"))
							&& (VERI_CHKBOX_VALUES[4].contains("BNK") || VERI_CHKBOX_VALUES[4]
									.contains("BNKNA"))
							&& (VERI_CHKBOX_VALUES[7].contains("UAN") || VERI_CHKBOX_VALUES[7]
									.contains("UANNA"))) {
						hshRecord.put("VERI_CHKBOX_VALUE_COAPP", "Y");
					}
				}
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = "";
			strQuery = SQLParser.getSqlQuery("sel_RenewFlg^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				if (!Helper.correctNull(rs.getString("app_renew_flag"))
						.equalsIgnoreCase("P")) {
					// if(!rs.getString("app_renew_flag").equalsIgnoreCase("P")){
					if (rs1 != null)
						rs1.close();
					strQuery = "";
					strQuery = SQLParser.getSqlQuery("sel_Undoflag_nfb^"
							+ strAppno);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshRecord.put("strUndoFlag", "N");
					}
					if (rs1 != null)
						rs1.close();
					strQuery = "";
					strQuery = SQLParser.getSqlQuery("sel_Undoflag_fb^"
							+ strAppno);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshRecord.put("strUndoFlag", "N");
					}
					if (rs1 != null)
						rs1.close();
					strQuery = "";
					strQuery = SQLParser.getCBSSqlQuery("sel_CBS_Undoflag_nfb^"
							+ strAppno);
					rs1 = DBUtils.executeQueryCBSConnection(strQuery);
					if (rs1.next()) {
						hshRecord.put("strUndoFlag", "N");
					}
					if (rs1 != null)
						rs1.close();
					strQuery = "";
					strQuery = SQLParser.getCBSSqlQuery("sel_CBS_Undoflag_fb^"
							+ strAppno);
					rs1 = DBUtils.executeQueryCBSConnection(strQuery);
					if (rs1.next()) {
						hshRecord.put("strUndoFlag", "N");
					}
				}
			}

			boolean intsubtypeflag = true;
			String strFacDesc = "";
			int i = 1;
			if (rs1 != null)
				rs1.close();
			strQuery = SQLParser
					.getSqlQuery("sel_faclityforcommentsonintrate_tag^"
							+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {

				rs = DBUtils
						.executeLAPSQuery("sel_comtintrate^"
								+ strAppno
								+ "^"
								+ Helper.correctNull((String) rs1
										.getString("TERM_SNO")));
				if (rs.next()) {
					if ((Helper.correctNull((String) rs
							.getString("COM_COMMENTS")).trim())
							.equalsIgnoreCase("")) {
						intsubtypeflag = false;
					}
				} else {
					if (i == 1) {
						intsubtypeflag = false;
						strFacDesc = Helper.correctNull((String) rs1
								.getString("TERM_DESC"));
						// hshRecord.put("strFacName",Helper.correctNull((String)rs1.getString("TERM_DESC")));
					} else {
						intsubtypeflag = false;
						strFacDesc = strFacDesc
								+ " , "
								+ Helper.correctNull((String) rs1
										.getString("TERM_DESC"));
						// hshRecord.put("strFacName",Helper.correctNull((String)rs1.getString("TERM_DESC")));
					}
					i++;
				}

			}
			hshRecord.put("strFacName", strFacDesc);

			if (intsubtypeflag) {
				hshRecord.put("strIntsubtypechk", "Y");
			} else {
				hshRecord.put("strIntsubtypechk", "N");
			}

			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_approvedby_appno^" + strAppno);
			while (rs1.next()) {
				if (Helper.correctNull(rs1.getString("COM_DETAILS"))
						.equalsIgnoreCase("A")) {
					hshRecord.put("strAppraisedFlag", "Y");
					
				}
				if (Helper.correctNull(rs1.getString("COM_DETAILS"))
						.equalsIgnoreCase("S")) {
					hshRecord.put("strSanctionFlag", "Y");
				}
			}

			boolean intcgssdflag = true;
			String strcgssdFacDesc = "";
			int j = 1;
			if (rs1 != null)
				rs1.close();
			strQuery = SQLParser.getSqlQuery("chk_cgssdsancchk^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {

				rs = DBUtils.executeLAPSQuery("chk_workflw^"
						+ strAppno
						+ "^"
						+ Helper.correctNull((String) rs1
								.getString("FACILITY_SNO")));
				if (rs.next()) {

				} else {
					if (j == 1) {
						intcgssdflag = false;
						strcgssdFacDesc = Helper.correctNull((String) rs1
								.getString("COM_FACDESC"));
					} else {
						intcgssdflag = false;
						strcgssdFacDesc = strcgssdFacDesc
								+ " , "
								+ Helper.correctNull((String) rs1
										.getString("COM_FACDESC"));
					}
					j++;
				}

			}

			hshRecord.put("strcgssdFacDesc", strcgssdFacDesc);

			if (intcgssdflag) {
				hshRecord.put("strcgssdchk", "Y");
			} else {
				hshRecord.put("strcgssdchk", "N");
			}
			if (rs1 != null)
				rs1.close();

			boolean intcgssdsanflag = true;
			String strcgssdFacDesc1 = "";
			double dblsancamt = 0.00, dblamtapplied = 0.00;
			int k = 1;
			strQuery = SQLParser.getSqlQuery("chk_cgssdamtsancchk^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {

				rs = DBUtils.executeLAPSQuery("chk_workflwsanchk^"
						+ strAppno
						+ "^"
						+ Helper.correctNull((String) rs1
								.getString("FACILITY_SNO")));
				if (rs.next()) {
					if (k == 1) {
						if (Double.parseDouble(Helper.correctDouble(rs1
								.getString("FACILITY_SANCAMT"))) < Double
								.parseDouble(Helper.correctDouble(rs
										.getString("COM_AMOUNTAPPL")))) {

							intcgssdsanflag = false;
						}

						strcgssdFacDesc1 = Helper.correctNull((String) rs1
								.getString("COM_FACDESC"));
					} else {
						if (Double.parseDouble(Helper.correctDouble(rs1
								.getString("FACILITY_SANCAMT"))) < Double
								.parseDouble(Helper.correctDouble(rs
										.getString("COM_AMOUNTAPPL")))) {
							intcgssdsanflag = false;
						}
						strcgssdFacDesc1 = strcgssdFacDesc1
								+ " , "
								+ Helper.correctNull((String) rs1
										.getString("COM_FACDESC"));
					}
					k++;

				}
			}

			hshRecord.put("strcgssdFacDesc1", strcgssdFacDesc1);

			if (intcgssdsanflag) {
				hshRecord.put("intcgssdsanflag", "Y");
			} else {
				hshRecord.put("intcgssdsanflag", "N");
			}
			if (rs1 != null)
				rs1.close();
			if (rs != null)
				rs.close();

			boolean perccgssdflag = true;
			String strcgssdFacDesc2 = "";
			double dblcgssdprec = 0.00, dblprodcgssdprec = 0.00;
			int p = 1;
			strQuery = SQLParser.getSqlQuery("chck_cgsdvalass^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {

				rs = DBUtils.executeLAPSQuery("chk_workflwsanchk^"
						+ strAppno
						+ "^"
						+ Helper.correctNull((String) rs1
								.getString("FACILITY_SNO")));
				if (rs.next()) {
					if (p == 1) {
						if (Double.parseDouble(Helper.correctDouble(rs1
								.getString("COM_CGSSDPERC"))) != Double
								.parseDouble(Helper.correctDouble(rs
										.getString("COM_CGSSD_PERC")))) {

							perccgssdflag = false;
						}
					} else {
						if (Double.parseDouble(Helper.correctDouble(rs1
								.getString("COM_CGSSDPERC"))) != Double
								.parseDouble(Helper.correctDouble(rs
										.getString("COM_CGSSD_PERC")))) {
							perccgssdflag = false;
						}
					}
					p++;

				}
			}

			hshRecord.put("strcgssdFacDesc2", strcgssdFacDesc2);

			if (perccgssdflag) {
				hshRecord.put("perccgssdflag", "Y");
			} else {
				hshRecord.put("perccgssdflag", "N");
			}

			if (rs1 != null)
				rs1.close();
			if (rs != null)
				rs.close();
			int metrocount = 0;
			if (strFacilitySno.equals("s") || strFacilitySno.equals("")
					|| strFacilitySno.equals("0")) {
				strQuery = SQLParser
						.getSqlQuery("select_corp_ncgtc_checkmetro_all^"
								+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {

					if (Helper.correctNull(
							(String) rs1.getString("CORP_METROPROJECT"))
							.equals("1")) {
						if (metrocount == 0) {
							metrocount = 1;
						} else {
							metrocount = metrocount + 1;
						}
					}
				}
				if (metrocount > 0) {
					hshRecord.put("CORP_METROPROJECT_FLAG", "1");
				} else {
					hshRecord.put("CORP_METROPROJECT_FLAG", "2");
				}
				if (rs1 != null)
					rs1.close();

				hshRecord.put("aadharchekflag", "N");

				int rowcount = 0;

				if (rs1 != null)
					rs1.close();
				String misactivittycodencgtcchkflag = "N";
				strQuery = SQLParser.getSqlQuery("chck_cgsdvalass_ncgtc_all^"
						+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					if (Helper.correctNull(
							(String) rs1.getString("COM_BANKSCHEME")).equals(
							"069")) {
						hshRecord.put("strschemecodevalue", Helper
								.correctNull((String) rs1
										.getString("COM_BANKSCHEME")));
						hshRecord.put("com_facility_emischeme", Helper
								.correctNull((String) rs1
										.getString("com_facility_emischeme")));
						rs = DBUtils.executeLAPSQuery("sel_misactcheck_ncgtc^"
								+ strAppno
								+ "^"
								+ Helper.correctNull((String) rs1
										.getString("FACILITY_SNO"))
								+ "^"
								+ Helper.correctNull((String) rs1
										.getString("COM_BANKSCHEME")));
						if (rs.next()) {
							strQuery = SQLParser
									.getSqlQuery("select_corp_ncgtc_all_aadhaar^"
											+ strAppno
											+ "^"
											+ Helper.correctNull((String) rs1
													.getString("FACILITY_SNO")));
							rs2 = DBUtils.executeQuery(strQuery);
							while (rs2.next()) {
								if (Helper.correctNull(
										rs2.getString("CORP_UDYOGAADHAAR"))
										.equals("")) {
									if (rowcount == 0) {
										rowcount = 1;
									} else {
										rowcount = rowcount + 1;
									}
								}
							}
						}
					}
				}
				if (rowcount > 0) {
					hshRecord.put("aadharchekflag", "N");
				} else {
					hshRecord.put("aadharchekflag", "Y");
				}
				String strChiefPromoter = "";
				strQuery = SQLParser.getSqlQuery("get_cheif_promoterflag^"
						+ strCustid);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					strChiefPromoter = Helper.correctNull((String) rs1
							.getString("COMAPP_CHF_PROMOTER"));
				}
				if (rs1 != null)
					rs1.close();
				if (strChiefPromoter.equals("")) {
					strChiefPromoter = "N";
				}
				hshRecord.put("COMAPP_CHF_PROMOTER", strChiefPromoter);
			} else {
				String aadharchek = "Y";

				strQuery = SQLParser
						.getSqlQuery("select_corp_ncgtc_all_aadhaar^"
								+ strAppno + "^" + strFacilitySno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					if (Helper.correctNull(
							(String) rs1.getString("CORP_UDYOGAADHAAR"))
							.equals("")) {
						aadharchek = "N";
					}
				}
				hshRecord.put("aadharchek", aadharchek);
				String misactivittycodencgtcchk = "N";
				strQuery = SQLParser.getSqlQuery("chck_cgsdvalass_ncgtc^"
						+ strAppno + "^" + strFacilitySno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					hshRecord.put("strschemecode", Helper
							.correctNull((String) rs1
									.getString("COM_BANKSCHEME")));
					hshRecord.put("com_facility_emischeme", Helper
							.correctNull((String) rs1
									.getString("com_facility_emischeme")));
					rs = DBUtils.executeLAPSQuery("sel_misactcheck_ncgtc^"
							+ strAppno
							+ "^"
							+ Helper.correctNull((String) rs1
									.getString("FACILITY_SNO"))
							+ "^"
							+ Helper.correctNull((String) rs1
									.getString("COM_BANKSCHEME")));
					if (rs.next()) {
						misactivittycodencgtcchk = "Y";

					}
				}
				hshRecord.put("misactivittycodencgtcchk",
						misactivittycodencgtcchk);
				if (rs1 != null)
					rs1.close();
				strQuery = SQLParser
						.getSqlQuery("select_corp_ncgtc_checkmetro^" + strAppno
								+ "^" + strFacilitySno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					hshRecord.put("CORP_METROPROJECT", Helper
							.correctNull((String) rs1
									.getString("CORP_METROPROJECT")));
				}
				if (rs1 != null)
					rs1.close();
				String strChiefPromoter1 = "";
				strQuery = SQLParser.getSqlQuery("get_cheif_promoterflag^"
						+ strCustid);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					strChiefPromoter1 = Helper.correctNull((String) rs1
							.getString("COMAPP_CHF_PROMOTER"));
				}
				if (rs1 != null)
					rs1.close();
				if (strChiefPromoter1.equals("")) {
					strChiefPromoter1 = "N";
				}
				hshRecord.put("COMAPP_CHF_PROMOTER", strChiefPromoter1);
				if (rs1 != null)
					rs1.close();
			}

			// ==============================mis activity code
			// check=======================//
			boolean misactivittycodechk = true;
			int q = 1;
			strQuery = SQLParser.getSqlQuery("chck_cgsdvalass^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {

				rs = DBUtils.executeLAPSQuery("sel_misactcheck^"
						+ strAppno
						+ "^"
						+ Helper.correctNull((String) rs1
								.getString("FACILITY_SNO")));
				if (rs.next()) {

				} else {
					if (q == 1) {
						misactivittycodechk = false;
					} else {
						misactivittycodechk = false;
					}
					q++;
				}
			}

			if (misactivittycodechk) {
				hshRecord.put("misactivittycodechk", "Y");
			} else {
				hshRecord.put("misactivittycodechk", "N");
			}
			if (rs1 != null)
				rs1.close();
			if (rs != null)
				rs.close();

			String perCbsId = "";
			strQuery = SQLParser.getSqlQuery("sel_cbs_perapp^" + strAppno + "^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				perCbsId = Helper.correctNull(rs.getString("perapp_Cbsid"));
				if (perCbsId.equals("")) {
					break;
				}
			}
			hshRecord.put("perCbsId", perCbsId);

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_cbs_status^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				String custflag = correctNull(rs
						.getString("PERAPP_CBSCUSTFLAG"));
				if (custflag.equals("N")) {
					hshRecord.put("ctrcustflag", custflag);
				}
			}

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_cbs_status^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				perCbsId = correctNull(rs.getString("PERAPP_CBSID"));
				if (perCbsId.equals("")) {
					break;
				}
			}
			hshRecord.put("perCbsId", perCbsId);

			if (rs != null)
				rs.close();

			String strAmberexist = "N", strAMBERRULES = "", amberApproval = "";
			rs = DBUtils.executeLAPSQuery("sel_appl_cibildetails^" + strAppno);
			while (rs.next()) {
				strAMBERRULES = Helper.correctNull((String) rs
						.getString("DEMO_DIGI_AMBERRULES"));
				if (!strAMBERRULES.equals("")) {
					strAmberexist = "Y";
					rs = DBUtils.executeLAPSQuery("sel_approve^"
							+ strAppno
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("PERAPP_ID")));
					if (rs.next()) {
						if (!(Helper.correctNull(
								(String) rs.getString("DEMO_AMBER_APPROVAL"))
								.equals("") || Helper.correctNull(
								(String) rs.getString("DEMO_AMBER_APPROVAL"))
								.equals("N")))
							amberApproval = "YN";
					}

				}

			}
			if (strAmberexist.equals("N"))
				amberApproval = "YN";
			hshRecord.put("amberApproval", amberApproval);
			if (rs1 != null)
				rs1.close();
			if (rs != null)
				rs.close();

			// ==========================corp mis customer detail
			// check======================//
			if (strSessionModuleType.equalsIgnoreCase("CORP")
					|| strSessionModuleType.equalsIgnoreCase("AGR")) {
				double dblsalesturnover = 0.00;
				String strsalesturnoverdate = "", strcriteriasales = "";
				int m = 0;
				strQuery = SQLParser.getSqlQuery("selmisfac^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {

					if (Helper.correctNull(rs1.getString("ACT_DISPLAYSCREEN"))
							.contains("@salesvalue@")
							&& Double
									.parseDouble(Helper
											.correctDouble((String) rs1
													.getString("PERAPP_SALES_TURNOVER"))) != Double
									.parseDouble(Helper
											.correctDouble((String) rs1
													.getString("APP_SALETURNOVER")))) {

						m++;
					}
					if (Helper.correctNull(rs1.getString("ACT_DISPLAYSCREEN"))
							.contains("@salesDate@")
							&& !Helper
									.correctNull(
											(String) rs1
													.getString("PERAPP_SALES_TURNOVER_DATE"))
									.equalsIgnoreCase(
											Helper
													.correctNull((String) rs1
															.getString("APP_SALESTURNOVER_DATE")))) {

						m++;
					}
					if (Helper.correctNull(rs1.getString("ACT_DISPLAYSCREEN"))
							.contains("@criteria@")
							&& !Helper
									.correctNull(
											(String) rs1
													.getString("PERAPP_CRITERIA_SALES_TURNOVER"))
									.equalsIgnoreCase(
											Helper
													.correctNull((String) rs1
															.getString("APP_CRITERIA_SALESTURNOVER")))) {

						m++;
					}
				}

				if (m > 0) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_msmeflagchk");
					arrValues.add("N");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
					hshRecord.put("corpmisappchk", "Y");
				} else {
					hshRecord.put("corpmisappchk", "N");
				}
			} else {

				int n = 0;
				strQuery = SQLParser.getSqlQuery("selretappchk^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {

					rs = DBUtils
							.executeLAPSQuery("selretmisappchk^" + strAppno);
					if (rs.next()) {
						if (Helper.correctNull(
								rs.getString("ACT_DISPLAYSCREEN")).contains(
								"@salesvalue@")
								&& Double
										.parseDouble(Helper
												.correctDouble((String) rs1
														.getString("PERAPP_SALES_TURNOVER"))) != Double
										.parseDouble(Helper
												.correctDouble((String) rs
														.getString("APP_SALETURNOVER")))) {

							n++;
						}
						if (Helper.correctNull(
								rs.getString("ACT_DISPLAYSCREEN")).contains(
								"@salesDate@")
								&& !Helper
										.correctNull(
												(String) rs1
														.getString("PERAPP_SALES_TURNOVER_DATE"))
										.equalsIgnoreCase(
												Helper
														.correctNull((String) rs
																.getString("APP_SALESTURNOVER_DATE")))) {

							n++;
						}
						if (Helper.correctNull(
								rs.getString("ACT_DISPLAYSCREEN")).contains(
								"@criteria@")
								&& !Helper
										.correctNull(
												(String) rs1
														.getString("PERAPP_CRITERIA_SALES_TURNOVER"))
										.equalsIgnoreCase(
												Helper
														.correctNull((String) rs
																.getString("APP_CRITERIA_SALESTURNOVER")))) {

							n++;
						}

					}

				}
				if (n > 0) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_msmeflagchk");
					arrValues.add("N");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					hshRecord.put("retmisappchk", "Y");
				} else {
					hshRecord.put("retmisappchk", "N");
				}

			}
			// ======================================end===============================//
			if (rs != null)
				rs.close();
			int intfacCount = 0, intTermCnt = 0;

			if (strSessionModuleType.equalsIgnoreCase("CORP")
					|| strSessionModuleType.equalsIgnoreCase("AGR")) {
				rs = DBUtils.executeLAPSQuery("sel_termloanfac^" + strAppno);
				while (rs.next()) {
					intfacCount++;
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^"
							+ strAppno + "^repaycomment^"
							+ Helper.correctNull(rs.getString("facility_sno")));
					if (rs1.next()) {
						if (!Helper.correctNull(
								rs1.getString("FIN_STAGEWISE_RELEASE"))
								.equalsIgnoreCase(""))
							intTermCnt++;
					}
				}
			} else {
				rs = DBUtils.executeLAPSQuery("findapptype^" + strAppno);
				if (rs.next()) {
					if (Helper.correctNull(rs.getString("PRD_LOANTYPE"))
							.equalsIgnoreCase("TL")
							|| Helper.correctNull(rs.getString("PRD_LOANTYPE"))
									.equalsIgnoreCase("DL")) {
						intfacCount++;
						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("sel_allcomments1^"
								+ strAppno + "^repaycomment^1");
						if (rs1.next()) {
							if (!Helper.correctNull(
									rs1.getString("FIN_STAGEWISE_RELEASE"))
									.equalsIgnoreCase(""))
								intTermCnt++;
						}
					}
				}
			}

			if (intfacCount == intTermCnt)
				hshRecord.put("strStagewiseFlag", "Y");
			if (rs1 != null)
				rs1.close();
			boolean doccheck = true;
			strQuery = SQLParser.getSqlQuery("sel_docsentocbschk^" + strAppno
					+ "^" + strFacilitySno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				if (Helper.correctNull(rs.getString("FACILITY_HEADID"))
						.equalsIgnoreCase("7")
						&& Helper.correctNull(rs.getString("FACILITY_ID"))
								.equalsIgnoreCase("99")) {
					doccheck = false;
				}
			}
			if (doccheck) {
				hshRecord.put("doccheck", "Y");
			} else {
				hshRecord.put("doccheck", "N");
			}
			// =======================reason for manual processing check
			// =============================//
			boolean strreasonproccchk = true;

			if (rs1 != null)
				rs1.close();
			strQuery = SQLParser.getSqlQuery("sel_creditsalechk^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strreasonproccchk = true;
			} else {
				strreasonproccchk = false;
			}

			if (strreasonproccchk) {
				hshRecord.put("strreasonproccchk", "Y");
			} else {
				hshRecord.put("strreasonproccchk", "N");
			}
			if (rs1 != null)
				rs1.close();
			hshRecord.put("strFacilitySno", strFacilitySno);

			// ======================================== validation for priority
			// sector guidlines==========================///
			if (rs != null)
				rs.close();
			int l = 0;
			if (strSessionModuleType.equalsIgnoreCase("RET")) {
				rs = DBUtils.executeLAPSQuery("sel_misshgdetcorp^" + strAppno
						+ "^" + "1");
				if (rs.next()) {
					hshRecord.put("purposeofloan", Helper.correctNull(rs
							.getString("purposeofloan")));
					rs2 = DBUtils.executeLAPSQuery("sel_misretcarpetvalid^"
							+ strAppno);
					if (rs2.next()) {
						if (Helper.correctNull(
								rs2.getString("ACT_DISPLAYSCREEN")).contains(
								"@proposedloanSHG@")
								&& Double.parseDouble(Helper
										.correctDouble((String) rs
												.getString("purposeofloan"))) != Double
										.parseDouble(Helper
												.correctDouble((String) rs2
														.getString("APP_PROPOSED_LOAN_SHG")))) {

							l++;
						}
						if (l > 0) {

							hshRecord.put("proposedshgchk", "Y");
						} else {
							hshRecord.put("proposedshgchk", "N");
						}

					}
				}
			} else {
				rs = DBUtils.executeLAPSQuery("sel_misshgdetcorp^" + strAppno
						+ "^" + strFacilitySno);
				if (rs.next()) {
					hshRecord.put("purposeofloan", Helper.correctNull(rs
							.getString("purposeofloan")));
					rs2 = DBUtils.executeLAPSQuery("sel_miscorpcarpetvalid^"
							+ strAppno + "^" + strFacilitySno);
					if (rs2.next()) {
						if (Helper.correctNull(
								rs2.getString("ACT_DISPLAYSCREEN")).contains(
								"@proposedloanSHG@")
								&& Double.parseDouble(Helper
										.correctDouble((String) rs
												.getString("purposeofloan"))) != Double
										.parseDouble(Helper
												.correctDouble((String) rs2
														.getString("APP_PROPOSED_LOAN_SHG")))) {

							l++;
						}
						if (l > 0) {

							hshRecord.put("proposedshgchk", "Y");
						} else {
							hshRecord.put("proposedshgchk", "N");
						}

					}
				}
			}
			if (rs != null)
				rs.close();
			if (rs2 != null)
				rs2.close();
			if (rs1 != null)
				rs1.close();
			double extBuild = 0.00, dbltotalextbuild = 0.00, extBuild1 = 0.00;
			String strbuildmeas = "";
			int b = 0;
			if (strSessionModuleType.equalsIgnoreCase("RET")) {

				strQuery = SQLParser.getSqlQuery("sel_carpet_ret^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {

					rs = DBUtils.executeLAPSQuery("sel_carpet_retdetails^"
							+ strAppno
							+ "^"
							+ Helper.correctNull((String) rs1
									.getString("APP_SEC_SECID")));
					if (rs.next()) {
						extBuild = Double.parseDouble(Helper
								.correctDouble((String) rs
										.getString("SEC_EXTENTOFBUILDING")));
						strbuildmeas = Helper.correctNull((String) rs
								.getString("sec_extofbuildmeas"));
						if (extBuild != 0) {
							if (strbuildmeas.equalsIgnoreCase("1"))
								extBuild1 = (extBuild * 4046.86);
							else if (strbuildmeas.equalsIgnoreCase("2"))
								extBuild1 = (extBuild * 10000);
							else if (strbuildmeas.equalsIgnoreCase("3"))
								extBuild1 = (extBuild * 0.092903);
							else if (strbuildmeas.equalsIgnoreCase("4"))
								extBuild1 = extBuild;
							else if (strbuildmeas.equalsIgnoreCase("05"))
								extBuild1 = extBuild * 0.836127;
							else if (strbuildmeas.equalsIgnoreCase("06"))
								extBuild1 = extBuild * 101.1714105;
							else if (strbuildmeas.equalsIgnoreCase("7"))
								extBuild1 = extBuild * 40.468564224;
							else if (strbuildmeas.equalsIgnoreCase("8"))
								extBuild1 = extBuild * 25.2929;
						}
						dbltotalextbuild += extBuild1;

						rs2 = DBUtils.executeLAPSQuery("sel_misretcarpetvalid^"
								+ strAppno);
						if (rs2.next()) {
							if (Helper.correctNull(
									rs2.getString("ACT_DISPLAYSCREEN"))
									.contains("@Carpet@")
									&& dbltotalextbuild != Double
											.parseDouble(Helper
													.correctDouble((String) rs2
															.getString("APP_CARPET_AREA")))) {

								b++;
							}
							if (b > 0) {

								hshRecord.put("carpetchk", "Y");
							} else {
								hshRecord.put("carpetchk", "N");
							}

						}

					}
				}
			}

			else {
				strQuery = SQLParser.getSqlQuery("sel_carpet_corp^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {

					rs = DBUtils.executeLAPSQuery("sel_carpet_corpdetails^"
							+ strAppno
							+ "^"
							+ Helper.correctNull((String) rs1
									.getString("APP_SEC_SECID")));
					if (rs.next()) {
						extBuild = Double.parseDouble(Helper
								.correctDouble((String) rs
										.getString("SEC_EXTENTOFBUILDING")));
						strbuildmeas = Helper.correctNull((String) rs
								.getString("sec_extofbuildmeas"));
						if (extBuild != 0) {
							if (strbuildmeas.equalsIgnoreCase("1"))
								extBuild1 = (extBuild * 4046.86);
							else if (strbuildmeas.equalsIgnoreCase("2"))
								extBuild1 = (extBuild * 10000);
							else if (strbuildmeas.equalsIgnoreCase("3"))
								extBuild1 = (extBuild * 0.092903);
							else if (strbuildmeas.equalsIgnoreCase("4"))
								extBuild1 = extBuild;
							else if (strbuildmeas.equalsIgnoreCase("05"))
								extBuild1 = extBuild * 0.836127;
							else if (strbuildmeas.equalsIgnoreCase("06"))
								extBuild1 = extBuild * 101.1714105;
							else if (strbuildmeas.equalsIgnoreCase("7"))
								extBuild1 = extBuild * 40.468564224;
							else if (strbuildmeas.equalsIgnoreCase("8"))
								extBuild1 = extBuild * 25.2929;
						}
						dbltotalextbuild += extBuild1;

						rs2 = DBUtils
								.executeLAPSQuery("sel_miscorpcarpetvalid^"
										+ strAppno + "^" + strFacilitySno);
						if (rs2.next()) {
							if (Helper.correctNull(
									rs2.getString("ACT_DISPLAYSCREEN"))
									.contains("@Carpet@")
									&& dbltotalextbuild != Double
											.parseDouble(Helper
													.correctDouble((String) rs2
															.getString("APP_CARPET_AREA")))) {

								b++;
							}
							if (b > 0) {

								hshRecord.put("carpetchk", "Y");
							} else {
								hshRecord.put("carpetchk", "N");
							}

						}
					}

				}
			}

			// check post sanction parameter enable/disable starts
			String livedate = ApplicationParams
					.getStrPostSancEnabDisablelivedate();
			String postsanctionflag = "";
			String applicationStatus = "";
			// check when application is created
			String appcreatedate = "";
			if (strAppno.equalsIgnoreCase("NEW")) {
				postsanctionflag = "NEW"; // new application created on live
											// date or after live date,Mode of
											// Payment has to come,NEW - New one
			} else {
				strQuery = SQLParser.getSqlQuery("getcreatedate^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {

					appcreatedate = rs.getString("createddate");
					applicationStatus = rs.getString("APP_STATUS");
				}
				System.out.println("Application created date-->"
						+ appcreatedate);
				System.out.println("Post Sanction  Live Date-->" + livedate);
				if (!livedate.equalsIgnoreCase("")
						&& !appcreatedate.equalsIgnoreCase("")) {
					String Pattern = "dd/MM/yyyy";
					DateFormat df = new SimpleDateFormat(Pattern);
					Date appcreationdate = df.parse(appcreatedate);
					Date postsanclivedate = df.parse(livedate);
					if (appcreationdate.before(postsanclivedate)
							&& applicationStatus.equalsIgnoreCase("op")) {
						postsanctionflag = "EOP"; // existing old open/pending
													// application,data has to
													// come based on
													// enable/disablein setup
													// and also saved parameters
													// must come infront end,EOP
													// - exiting open pending
					}
					if (appcreationdate.before(postsanclivedate)
							&& applicationStatus.equalsIgnoreCase("pa")) {
						postsanctionflag = "EPA"; // existing old approved
													// application,data should
													// not come based on
													// enable/disablein
													// setup,EPA - existing
													// process approved/undo
					}
					if (appcreationdate.equals(postsanclivedate)
							|| appcreationdate.after(postsanclivedate)) {
						postsanctionflag = "NEW"; // new applcication created on
													// live date or after live
													// date,data has to come
													// based on enable/disablein
													// setup,NEW - New one
					}
				}

			}
			hshRecord.put("postSanctionFlag", postsanctionflag);
			System.out.println("Post Sanction Flag-->" + postsanctionflag);
			// ends

			// check params enabled in post sanction setup starts
			Map<String, String> paramenableMap = new HashMap<String, String>();
			Map<String, String> paramDescriptionMap = new HashMap<String, String>();
			Map<String, String> setupParamMap = new HashMap<String, String>();
			strTemp = "";
			if (strSessionModuleType.equalsIgnoreCase("CORP")) {
				strTemp = "'C'";
			} else {
				strTemp = "'P'";
			}

			strQuery = SQLParser.getSqlQuery("sel_PostSancparamertersCorp^"
					+ strTemp);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				String paramId = rs.getString("PS_PARAM_ID");
				String flag = rs.getString("PS_ENABLE_DISABLE_FLAG");
				String paramdesc = rs.getString("PS_PARAM_DESC");
				paramenableMap.put(paramId, flag); // stores all flags of Enable
													// and disable of paramIDS
				setupParamMap.put(paramId, flag); // stores all flags of Enable
													// and disable of paramIDS
				paramDescriptionMap.put(paramId, paramdesc); // stores all param
																// description
																// of paramIDS
			}
			// hshRecord.put("setupParamMap", paramenableMap); // original setup
			// data and no need to sent in response
			// ends

			// take inserted params
			strQuery = SQLParser.getSqlQuery("sel_pageid_PSapp^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			String strPageIdPSApp = "", strParams = "";
			while (rs.next()) {
				if (strPageIdPSApp.equalsIgnoreCase(""))
					strPageIdPSApp = "@"
							+ Helper.correctNull((String) rs
									.getString("ps_modify_pageid"));
				else
					strPageIdPSApp = strPageIdPSApp
							+ Helper.correctNull((String) rs
									.getString("ps_modify_pageid"));

				if (strParams.equalsIgnoreCase(""))
					strParams = "@"
							+ Helper.correctNull((String) rs
									.getString("ps_modify_terms"));
				else
					strParams = strParams
							+ Helper.correctNull((String) rs
									.getString("ps_modify_terms"));
			}
			// ends

			// check save paramters in APP_POST_SANCTION that marked as disable
			// in setup
			String insertedparam = "";
			StringBuilder insertedParamters = new StringBuilder();
			if (!strParams.equalsIgnoreCase("")) {
				String[] savedparamArray = strParams.split("@");
				if (savedparamArray.length > 0) {
					int arrsize = savedparamArray.length;
					for (int z = 0; z < arrsize; z++) {
						if (!savedparamArray[i].equalsIgnoreCase("")) {
							if (paramenableMap.containsKey(savedparamArray[z])) {
								String flag = paramenableMap
										.get(savedparamArray[z]);
								if (flag.equalsIgnoreCase("D")) { // get disable
																	// paramids
									String paramdesc = paramDescriptionMap
											.get(savedparamArray[z]); // get
																		// description
																		// of
																		// paramids
									insertedParamters.append(paramdesc);
									insertedParamters.append(",");
									paramenableMap.put(savedparamArray[z], "E"); // override
																					// eventhough
																					// it
																					// is
																					// marked
																					// as
																					// D
																					// in
																					// setup
																					// but
																					// to
																					// display
																					// marked
																					// as
																					// E.
								}

							} else {
								paramenableMap.put(savedparamArray[z], "E"); // added
																				// into
																				// because
																				// it
																				// is
																				// saved
																				// in
																				// APP_POST_SANCTION
																				// for
																				// display
							}
						}
					}
					insertedparam = insertedParamters.toString();
					if (!insertedparam.equalsIgnoreCase("")) {
						insertedparam = insertedparam.substring(0,
								insertedparam.length() - 1);
					}
				}
			}
			hshRecord.put("insertedParamters", insertedparam);
			// hshRecord.put("paramenableMap", paramenableMap); // no need to
			// sent in response
			// ends

			// ==========================corp mis minority
			// check======================//
			if (strSessionModuleType.equalsIgnoreCase("CORP")
					|| strSessionModuleType.equalsIgnoreCase("AGR")) {
				int a = 0;
				strQuery = SQLParser.getSqlQuery("sel_corpmisdetminoritychk^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					strQuery = SQLParser
							.getSqlQuery("sel_corpmisdetminoritychksno^"
									+ strAppno
									+ "^"
									+ Helper.correctNull(rs
											.getString("APP_FACILITY_SNO")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						if (Helper.correctNull(
								(String) rs1.getString("PERAPP_CONSTITUTION"))
								.equalsIgnoreCase("01")) {
							if (!Helper
									.correctNull(
											(String) rs1
													.getString("MIS_IND_MINORITY"))
									.equalsIgnoreCase(
											Helper
													.correctNull((String) rs1
															.getString("INDINFO_MINORITY")))) {

								a++;
							}
							if (!Helper
									.correctNull(
											(String) rs1
													.getString("MIS_IND_RELIGION"))
									.equalsIgnoreCase(
											Helper
													.correctNull((String) rs1
															.getString("INDINFO_RELIGION")))) {

								a++;
							}
						} else {
							if (!Helper
									.correctNull(
											(String) rs1
													.getString("MIS_NONIND_MINORITY_COMMUNITY"))
									.equalsIgnoreCase(
											Helper
													.correctNull((String) rs1
															.getString("COMINFO_MINORITY_COMMUNITY")))) {

								a++;
							}
							if (!Helper
									.correctNull(
											(String) rs1
													.getString("MIS_NONIND_RELIGION"))
									.equalsIgnoreCase(
											Helper
													.correctNull((String) rs1
															.getString("PERAPP_RELIGION")))) {

								a++;
							}
						}
					}
				}

				if (a > 0) {

					hshRecord.put("corpmisminority", "Y");
				} else {
					hshRecord.put("corpmisminority", "N");
				}

			} else {
				int b1 = 0;
				strQuery = SQLParser.getSqlQuery("sel_retmisdetminoritychk^"
						+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					if (Helper.correctNull(
							(String) rs1.getString("PERAPP_CONSTITUTION"))
							.equalsIgnoreCase("01")) {
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_IND_MINORITY"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("INDINFO_MINORITY")))) {

							b1++;
						}
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_IND_RELIGION"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("INDINFO_RELIGION")))) {

							b1++;
						}
					} else {
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_NONIND_MINORITY_COMMUNITY"))
								.equalsIgnoreCase(
										Helper
												.correctNull((String) rs1
														.getString("COMINFO_MINORITY_COMMUNITY")))) {

							b1++;
						}
						if (!Helper.correctNull(
								(String) rs1.getString("MIS_NONIND_RELIGION"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("PERAPP_RELIGION")))) {

							b1++;
						}
					}
				}

				if (b1 > 0) {

					hshRecord.put("retmisminority", "Y");
				} else {
					hshRecord.put("retmisminority", "N");
				}
			}
			// ======================================end===============================//
			// ====================post sanction===========================//
			if (rs != null)
				rs.close();
			if (rs1 != null)
				rs1.close();
			if (strSessionModuleType.equalsIgnoreCase("CORP")
					|| strSessionModuleType.equalsIgnoreCase("AGR")) {
				int ab = 0;
				strQuery = SQLParser
						.getSqlQuery("sel_corpmisdetminoritychkpost^"
								+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				while (rs1.next()) {
					if (Helper.correctNull(
							(String) rs1.getString("PERAPP_CONSTITUTION"))
							.equalsIgnoreCase("01")) {
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_IND_MINORITY"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("INDINFO_MINORITY")))) {

							ab++;
						}
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_IND_RELIGION"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("INDINFO_RELIGION")))) {

							ab++;
						}
					} else {
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_NONIND_MINORITY_COMMUNITY"))
								.equalsIgnoreCase(
										Helper
												.correctNull((String) rs1
														.getString("COMINFO_MINORITY_COMMUNITY")))) {

							ab++;
						}
						if (!Helper.correctNull(
								(String) rs1.getString("MIS_NONIND_RELIGION"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("PERAPP_RELIGION")))) {

							ab++;
						}
					}
				}
				if (ab > 0) {

					hshRecord.put("corppostmisminority", "Y");
				} else {
					hshRecord.put("corppostmisminority", "N");
				}
			} else {
				int ac = 0;
				if (rs1 != null)
					rs1.close();
				strQuery = SQLParser
						.getSqlQuery("sel_retmisdetminoritychkpost^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					if (Helper.correctNull(
							(String) rs1.getString("PERAPP_CONSTITUTION"))
							.equalsIgnoreCase("01")) {
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_IND_MINORITY"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("INDINFO_MINORITY")))) {

							ac++;
						}
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_IND_RELIGION"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("INDINFO_RELIGION")))) {

							ac++;
						}
					} else {
						if (!Helper
								.correctNull(
										(String) rs1
												.getString("MIS_NONIND_MINORITY_COMMUNITY"))
								.equalsIgnoreCase(
										Helper
												.correctNull((String) rs1
														.getString("COMINFO_MINORITY_COMMUNITY")))) {

							ac++;
						}
						if (!Helper.correctNull(
								(String) rs1.getString("MIS_NONIND_RELIGION"))
								.equalsIgnoreCase(
										Helper.correctNull((String) rs1
												.getString("PERAPP_RELIGION")))) {

							ac++;
						}
					}
				}

				if (ac > 0) {

					hshRecord.put("retpostmisminority", "Y");
				} else {
					hshRecord.put("retpostmisminority", "N");
				}
			}
			// ========================================end==================================================//
			// ======================================end===============================//

			if (rs1 != null) {
				rs1.close();
			}

			if (strSessionModuleType.equalsIgnoreCase("DIGI")) {
				strQuery = SQLParser.getSqlQuery("getappamt^" + strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					String StrInterstType = Helper.correctNull((String) rs1
							.getString("loan_inttype"));
					String StrCReditRisk = Helper.correctNull((String) rs1
							.getString("loan_creditrskval"));
					String StrBussinStra = Helper.correctNull((String) rs1
							.getString("loan_busstatval"));

					if (StrCReditRisk.equalsIgnoreCase("")
							|| StrBussinStra.equalsIgnoreCase("")) {
						hshRecord.put("strCReditRisk", "Y");
					} else {
						double dblCReditRisk = Double.parseDouble(Helper
								.correctNull((String) rs1
										.getString("loan_creditrskval")));
						double dblBussinStra = Double.parseDouble(Helper
								.correctNull((String) rs1
										.getString("loan_busstatval")));
						if (StrInterstType.equalsIgnoreCase("Floating")) {
							if (dblCReditRisk < 0.00 || dblBussinStra < 0.00) {
								hshRecord.put("strCReditRisk", "Y");
							}
						}
					}
				}

			}

			if (rs2 != null) {
				rs2.close();
			}
			strQuery = SQLParser.getSqlQuery("selsecpropdet_cersai_appno^"
					+ strAppno);
			rs2 = DBUtils.executeQuery(strQuery);
			while (rs2.next()) {

				String cus_sec_type = correctNull(rs2.getString("cus_sec_type"));
				String secID = correctNull(rs2.getString("Sec_Id"));
				String SEC_CERSAIREFNO = "", SEC_SEARCHPERFORM_DATE = "", SEC_ALREADY_MORTG = "", sec_croptype = "";

				if (cus_sec_type.equalsIgnoreCase("10")
						|| cus_sec_type.equalsIgnoreCase("11")
						|| cus_sec_type.equalsIgnoreCase("12")
						|| cus_sec_type.equalsIgnoreCase("13")
						|| cus_sec_type.equalsIgnoreCase("15")
						|| cus_sec_type.equalsIgnoreCase("16")
						|| cus_sec_type.equalsIgnoreCase("17")) {
					SEC_CERSAIREFNO = correctNull(rs2
							.getString("SEC_CERSAIREFNO"));
					if (SEC_CERSAIREFNO.equalsIgnoreCase("")) {
						hshRecord.put("SEC_CERSAIREFNO", "Y");
					} else if (SEC_CERSAIREFNO.equalsIgnoreCase("undefined")) {
						hshRecord.put("SEC_CERSAIREFNO", "Y");
					}

					SEC_SEARCHPERFORM_DATE = correctNull(rs2
							.getString("SEC_SEARCHPERFORM_DATE"));
					if (SEC_SEARCHPERFORM_DATE.equalsIgnoreCase("")) {
						hshRecord.put("SEC_SEARCHPERFORM_DATE", "Y");
					} else if (SEC_SEARCHPERFORM_DATE
							.equalsIgnoreCase("undefined")) {
						hshRecord.put("SEC_SEARCHPERFORM_DATE", "Y");
					}

					SEC_ALREADY_MORTG = correctNull(rs2
							.getString("SEC_ALREADY_MORTG"));
					if (SEC_ALREADY_MORTG.equalsIgnoreCase("")) {
						hshRecord.put("SEC_ALREADY_MORTG", "Y");
					}
					if (rs1 != null) {
						rs1.close();
					}
					strQuery = SQLParser
							.getSqlQuery("selsecpropdet_cersai_statdata");
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						String datadesc = correctNull(rs1
								.getString("stat_data_desc1"));
						int intdatadesc = Integer.parseInt(Helper
								.correctInt(rs1.getString("stat_data_desc1")));

						if (rs != null) {
							rs.close();
						}
						String strcersiDate = correctNull(rs2
								.getString("SEC_SEARCHPERFORM_DATE"));
						String currdate = Helper.getCurrentDateTime();

						if (!strcersiDate.equalsIgnoreCase("")) {
							String strArr1[] = strcersiDate.split("@");
							for (int r = 0; r < strArr1.length; r++) {
								strcersiDate = strArr1[r];
								SimpleDateFormat cersaiDate = new SimpleDateFormat(
										"dd/MM/yyyy");// "yyyy-MM-dd""16/4/2021"
								java.util.Date date1;
								java.util.Date date2;
								date1 = cersaiDate.parse(strcersiDate);
								date2 = cersaiDate.parse(currdate);
								long diffInMillies = Math.abs(date2.getTime()
										- date1.getTime());
								long diff = TimeUnit.DAYS.convert(
										diffInMillies, TimeUnit.MILLISECONDS);
								if (diff > intdatadesc) {
									hshRecord.put("cersaidate", "Y");
								}
							}
						}
					}

				}
				if (cus_sec_type.equalsIgnoreCase("14")) {
					sec_croptype = correctNull(rs2.getString("sec_croptype"));
					if (sec_croptype.equalsIgnoreCase("")) {
						hshRecord.put("sec_croptype", "Y");
					}
				}
			}
			// ==============================Added for gecl
			// check=========================//
			if (rs1 != null) {
				rs1.close();
			}
			String strtakeovernorm = "", strgeclnewchk = "";
			strQuery = SQLParser.getSqlQuery("sel_takeovernorm^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				strtakeovernorm = Helper.correctNull((String) rs1
						.getString("COMTAK_ISTAKEOVER"));
				if (strtakeovernorm.equalsIgnoreCase("2")) {
					hshRecord.put("strtakeovernorm", "Y");
				}
			}
			if (rs != null) {
				rs.close();
			}
			if (rs1 != null) {
				rs1.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_facility_bankscheme_gecl^"
					+ strAppno + "^" + strFacilitySno);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				hshRecord.put("strgeclnewchk", "Y");

			}
			if (rs1 != null) {
				rs1.close();
			}
			log
					.info("**************************************strtakeovernorm******************"
							+ strtakeovernorm);
			log
					.info("**************************************strgeclnewchk******************"
							+ strgeclnewchk);
			if (!strCustid.equalsIgnoreCase("")) {
				rs = DBUtils.executeLAPSQuery("sel_common_customer^"
						+ strCustid);
				if (rs.next()) {
					hshRecord.put("majority_member", Helper.correctNull(rs
							.getString("COMINFO_MAJORITYMEMBER")));
					hshRecord.put("stake_held", Helper.correctNull(rs
							.getString("perapp_stakeheld_women")));
					hshRecord.put("constitutionnew", Helper
							.correctNull((String) rs
									.getString("perapp_constitutionnew")));
					hshRecord.put("indinfo_caste",
							Helper.correctNull((String) rs
									.getString("indinfo_caste")));
					hshRecord.put("perapp_sex", Helper.correctNull((String) rs
							.getString("perapp_sex")));
					hshRecord.put("strempasondate", Helper
							.correctNull((String) rs
									.getString("cominfo_employees_asondate")));
					hshRecord.put("strtotalemp", Helper.correctNull((String) rs
							.getString("cominfo_total_employees")));
					hshRecord.put("COMINFO_GSTINREG", Helper
							.correctNull((String) rs
									.getString("COMINFO_GSTINREG")));
					hshRecord.put("COMINFO_GST_EXEMPTED", Helper
							.correctNull((String) rs
									.getString("COMINFO_GST_EXEMPTED")));
					hshRecord.put("indinfo_minority", Helper
							.correctNull((String) rs
									.getString("indinfo_minority")));
					hshRecord.put("PERAPP_UDYAM_REGNO", Helper
							.correctNull((String) rs
									.getString("PERAPP_UDYAM_REGNO")));
					hshRecord.put("PERAPP_SALES_TURNOVER", Helper
							.correctNull((String) rs
									.getString("PERAPP_SALES_TURNOVER")));
					hshRecord.put("PERAPP_SALES_TURNOVER_DATE", Helper
							.correctNull((String) rs
									.getString("PERAPP_SALES_TURNOVER_DATE")));
					hshRecord
							.put(
									"PERAPP_CRITERIA_SALES_TURNOVER",
									Helper
											.correctNull((String) rs
													.getString("PERAPP_CRITERIA_SALES_TURNOVER")));
					hshRecord.put("cominfo_minority_community", Helper
							.correctNull((String) rs
									.getString("cominfo_minority_community")));
					hshRecord.put("indinfo_religion", Helper
							.correctNull((String) rs
									.getString("indinfo_religion")));
					hshRecord.put("perapp_religion", Helper
							.correctNull((String) rs
									.getString("perapp_religion")));
					// hshRecord.put("PERAPP_MINORITYINDUSTRY",Helper.correctNull((String)rs.getString("PERAPP_MINORITYINDUSTRY")));
					hshRecord.put("PERAPP_CERTIFICATION_DATE", Helper
							.correctNull((String) rs
									.getString("PERAPP_CERTIFICATION_DATE")));
					hshRecord.put("PERAPP_MSME_CLASSIFICATION", Helper
							.correctNull((String) rs
									.getString("PERAPP_MSME_CLASSIFICATION")));
					hshRecord.put("perapp_panno", correctNull(rs
							.getString("perapp_panno")));
				}
			}
			if (rs != null) {
				rs.close();
			}
			String strmsmeflag = "N";
			if (strSessionModuleType.equalsIgnoreCase("CORP")
					|| strSessionModuleType.equalsIgnoreCase("AGR")) {
				strQuery = SQLParser.getSqlQuery("se_corpmsme_newvalid^"
						+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					strmsmeflag = "Y";
				}
			} else {
				strQuery = SQLParser.getSqlQuery("sel_retmsmefech_newvalid^"
						+ strAppno);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					strmsmeflag = "Y";
				}
			}
			if (rs1 != null) {
				rs1.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_geclfacilities^" + comapp_id);
			while (rs.next()) {
				if (Helper.correctNull(rs.getString("com_gecltype"))
						.equalsIgnoreCase("GECL3")
						&& Helper.correctNull(rs.getString("FACILITY_STATUS"))
								.equalsIgnoreCase("pa")) {
					hshRecord.put("strgecl3propstatus", "Y");
				}
				if (Helper.correctNull(rs.getString("com_gecltype"))
						.equalsIgnoreCase("GECL2")
						&& Helper.correctNull(rs.getString("FACILITY_STATUS"))
								.equalsIgnoreCase("op")) {
					hshRecord.put("strgecl2propstatus", "Y");
				}
				if (Helper.correctNull(rs.getString("com_gecltype"))
						.equalsIgnoreCase("GECL1")
						&& Helper.correctNull(rs.getString("FACILITY_STATUS"))
								.equalsIgnoreCase("op")) {
					hshRecord.put("strgecl1propstatus", "Y");
				}
			}
			hshRecord.put("strmsmeflag", strmsmeflag);
			String strOldAppno = "", strSno = "", strOldSno = "", stroldpropsancdate = "", strmsmevaliddate = "", strgecl4date = "", strgecl4sancdate = "";
			if (rs != null) {
				rs.close();
			}
			if (strModuleType.equalsIgnoreCase("P")) {
				strFacilitySno = "1";
			}
			if (strFacilitySno.equalsIgnoreCase("")) {
				strFacilitySno = "0";
			}
			strQuery = SQLParser.getSqlQuery("sel_PS_oldproposancdatevalid^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strOldAppno = Helper.correctNull((String) rs
						.getString("PS_OLD_APP_NO"));
				strOldSno = Helper.correctNull((String) rs
						.getString("PS_OLD_APP_SNO"));
			}
			hshRecord.put("strOldAppno", strOldAppno);
			hshRecord.put("strOldSno", strOldSno);
			// For Application basic details
			if (rs != null)
				rs.close();
			if (!strOldAppno.equalsIgnoreCase("")) {

				strQuery = SQLParser.getSqlQuery("sel_PS_oldaccsancdetails^"
						+ strOldAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("strOldAppno", strOldAppno);
					hshRecord.put("orgname", Helper.correctNull((String) rs
							.getString("branch")));
					hshRecord.put("create_date", Helper.correctNull((String) rs
							.getString("create_date")));
					hshRecord.put("sanc_date", Helper.correctNull((String) rs
							.getString("sanc_date")));
					stroldpropsancdate = Helper.correctNull((String) rs
							.getString("sanc_date"));
				}
			}
			if (!stroldpropsancdate.equalsIgnoreCase("")) {
				strmsmevaliddate = "01/04/2021";

				DateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

				Date d1 = sdf.parse(stroldpropsancdate);
				Date d2 = sdf.parse(strmsmevaliddate);

				if (d1.after(d2)) {

					hshRecord.put("strmsmedate", "Y");
					log.info("date condition satisfied");

				}
			}
			log
					.info("<<<<<<<<<<<=================stroldpropsancdate===================>>>"
							+ stroldpropsancdate);

			if (rs4 != null) {
				rs4.close();
			}
			double dblsumgoldloan = 0.00, dbldepositloan = 0.00, dbltotalrecamt = 0.00;

			strQuery = SQLParser.getSqlQuery("getApprovedLoanDetails^"
					+ strAppno);
			rs4 = DBUtils.executeQuery(strQuery);
			if (rs4.next()) {
				dbltotalrecamt = Double.parseDouble(Helper.correctDouble(rs4
						.getString("loan_recmdamt")));
				// hshValues.put("strloan_recmdamt",correctNull(rs.getString("loan_recmdamt")));
			}
			log
					.info("<<<<<<<<<<<=================dbltotalrecamt===================>>>"
							+ dbltotalrecamt);

			if (rs != null)
				rs.close();
			if (rs1 != null)
				rs1.close();
			if (strProductType.equalsIgnoreCase("pG")) {
				rs = DBUtils.executeLAPSQuery("sum_goladloanamt^" + strOldid);
				while (rs.next()) {
					dblsumgoldloan += dbltotalrecamt
							+ Double.parseDouble(Helper.correctDouble(rs
									.getString("amt")));
				}
				log
						.info("<<<<<<<<<==========dblsumgoldloan================>>>>>>>>"
								+ dblsumgoldloan);

			} else if (strProductType.equalsIgnoreCase("pR")) {
				rs1 = DBUtils
						.executeLAPSQuery("sum_depositloanamt^" + strOldid);
				while (rs1.next()) {
					dbldepositloan += dbltotalrecamt
							+ Double.parseDouble(Helper.correctDouble(rs1
									.getString("amt")));
				}
				log
						.info("<<<<<<<<<==========dbldepositloan================>>>>>>>>"
								+ dbldepositloan);

			}
			hshRecord.put("dblsumgoldloan", String.valueOf(dblsumgoldloan));
			hshRecord.put("dbldepositloan", String.valueOf(dbldepositloan));
			if (rs != null)
				rs.close();
			if (rs1 != null)
				log.info("<<<<<<<<<<<======strgrpid========>>>>>>>>>>"
						+ strgrpid);
			log.info("<<<<<<<<<<<======product_code========>>>>>>>>>>"
					+ product_code);
			rs = DBUtils.executeLAPSQuery("sel_prddepositgoldsanlmt^"
					+ product_code + "^" + strgrpid);
			if (rs.next()) {
				strsancpwramt = correctNull(rs.getString("sanction_limit"));
				log
						.info("<<<<<<<<<<===========strsancpwramt===================>>>>>>>>>>>>>>"
								+ strsancpwramt);
			}
			hshRecord.put("sancPowerAmt", strsancpwramt);

			int depositcount = 0;
			String strdepositaccno = "";
			int mn = 1;
			if (strPrdType.equalsIgnoreCase("pR")) {
				strQuery = SQLParser.getSqlQuery("sel_depositdetails^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				String strmaturitydate = "", currdate = "";
				while (rs.next()) {
					strmaturitydate = Helper.correctNull((String) rs
							.getString("loan_matdate"));
					currdate = Helper.getCurrentDateTime();
					SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
					java.util.Date date1;
					java.util.Date date2;
					date1 = sdf.parse(strmaturitydate);
					date2 = sdf.parse(currdate);
					if (date1.before(date2)) { // date1 <date2
						if (mn == 1) {

							strdepositaccno = Helper.correctNull((String) rs
									.getString("LOAN_ACCNO"));
						} else {

							strdepositaccno = strdepositaccno
									+ " , "
									+ Helper.correctNull((String) rs
											.getString("LOAN_ACCNO"));
						}
						mn++;

						depositcount++;
						log
								.info("********************datecount************************"
										+ depositcount);

					}
					if (depositcount > 0) {

						hshRecord.put("depositmaturitydate", "Y");
					} else {
						hshRecord.put("depositmaturitydate", "N");
					}
					hshRecord.put("strdepositaccno", strdepositaccno);
				}
			}

			String StrLoanMclrType = "", StrMclrType = "", StrMclrEFFECTIVEFROM = "", Strappdate = "", Strroiupdflag = "", Strroiupddate = "", Strapppostparentdigi = "";
			java.util.Date date1;
			java.util.Date date2;
			java.util.Date date3;

			if (rs != null)
				rs.close();
			rs = DBUtils.executeLAPSQuery("comfunsel1^" + strAppno);
			if (rs.next()) {

				if (Helper.correctNull(rs.getString("app_renew_flag"))
						.equalsIgnoreCase("P")) {
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_parentDigiStatus^"
							+ strAppno);
					if (rs1.next()) {
						Strapppostparentdigi = "POSTPR";
						hshRecord.put("POSTPR", "POSTPR");
					}
				}
			}
			if (StrappLoansubtypeDigi.equalsIgnoreCase("PC")) {
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_roimsmeUpdate_mclrdate^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					StrLoanMclrType = Helper.correctNull(rs
							.getString("FACILITY_MCLRTYPE"));
					Strappdate = Helper.correctNull(rs
							.getString("APP_CREATEDATE"));// rs.getDate("APP_CREATEDATE");
					Strroiupdflag = Helper.correctNull(rs
							.getString("FACILITY_UPDROI_FLAG"));
					if (!Strroiupdflag.equalsIgnoreCase("Y")) {
						hshRecord.put("RoiFlag", "Y");
					}
					Strroiupddate = Helper.correctNull(rs
							.getString("FACILITY_UPDROI_DATE"));

					if (!StrLoanMclrType.equalsIgnoreCase("")) {
						String strArr1[] = StrLoanMclrType.split("@");
						for (int i1 = 0; i1 < strArr1.length; i1++) {
							StrMclrType = strArr1[0];
						}
					}
					if (!StrMclrType.equalsIgnoreCase("")
							&& !Strroiupddate.equalsIgnoreCase("")) {
						if (rs1 != null) {
							rs1.close();
						}
						strQuery = SQLParser.getSqlQuery("sel_roiUpdate_mclr^"
								+ StrMclrType + "^" + 'Y');
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							StrMclrEFFECTIVEFROM = Helper.correctNull(rs1
									.getString("MCLR_EFFECTIVEFROM"));
						}
						SimpleDateFormat roiDate = new SimpleDateFormat(
								"yyyy-MM-dd");// "yyyy-MM-dd"
						date1 = roiDate.parse(Strappdate);
						date2 = roiDate.parse(StrMclrEFFECTIVEFROM);
						if (Strroiupdflag.equals("Y")) {
							date3 = roiDate.parse(Strroiupddate);
							if (date3.before(date2)) {
								hshRecord.put("RoiUpdate", "Y");
							}
						} else {
							if (date1.before(date2)) {
								hshRecord.put("RoiUpdate", "Y");
							}
						}

					}
				}

			} else if (StrappLoansubtypeDigi.equalsIgnoreCase("PR")
					|| Strapppostparentdigi.equalsIgnoreCase("POSTPR")) {
				strQuery = SQLParser.getSqlQuery("sel_roiUpdate_mclrdate^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					StrLoanMclrType = Helper.correctNull(rs
							.getString("loan_mclrtype"));
					Strappdate = Helper.correctNull(rs
							.getString("APP_CREATEDATE"));// rs.getDate("APP_CREATEDATE");
					Strroiupdflag = Helper.correctNull(rs
							.getString("LOAN_UPDROI_FLAG"));
					Strroiupddate = Helper.correctNull(rs
							.getString("LOAN_UPDROI_DATE"));
				}
				if (!StrLoanMclrType.equalsIgnoreCase("")) {
					String strArr1[] = StrLoanMclrType.split("@");
					for (int i2 = 0; i2 < strArr1.length; i2++) {
						StrMclrType = strArr1[0];
					}
				}
				if (!StrMclrType.equalsIgnoreCase("")
						&& !Strroiupddate.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("sel_roiUpdate_mclr^"
							+ StrMclrType + "^" + 'Y');
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						StrMclrEFFECTIVEFROM = Helper.correctNull(rs
								.getString("MCLR_EFFECTIVEFROM"));
					}
					SimpleDateFormat roiDate = new SimpleDateFormat(
							"yyyy-MM-dd");// "yyyy-MM-dd"
					date1 = roiDate.parse(Strappdate);
					date2 = roiDate.parse(StrMclrEFFECTIVEFROM);
					if (Strroiupdflag.equals("Y")) {
						date3 = roiDate.parse(Strroiupddate);
						if (date3.before(date2)) {
							hshRecord.put("RoiUpdate", "Y");
						}
					} else {
						if (date1.before(date2)) {
							hshRecord.put("RoiUpdate", "Y");
						}
					}

				} else {
					if (!Strroiupdflag.equals("Y")) {
						hshRecord.put("RoiUpdate", "Y");
					}
				}

			}
			if (rs2 != null) {
				rs2.close();
			}
			String strRestructureInvoDate = "", strRestructureFlag = "";
			strQuery = SQLParser.getSqlQuery("sel_retrest_dateofrestrct^"
					+ strAppno);
			rs2 = DBUtils.executeQuery(strQuery);
			if (rs2.next()) {
				if (Helper.correctNull(rs2.getString("app_renew_flag"))
						.equalsIgnoreCase("S")) {
					if (Helper.correctNull(rs2.getString("APP_LOANTYPE"))
							.equalsIgnoreCase("P")) {
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("selpernature^"
								+ strAppno);
						if (rs1.next()) {
							strRestructureInvoDate = Helper.correctNull(rs1
									.getString("PERAPP_INVOCDATE"));
							if (strRestructureInvoDate.equalsIgnoreCase("")) {
								hshRecord.put("strRestructureInvoDate", "Y");
							}
						}

					}

				}
			} else {

				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_corprest_dateofrestrct^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					if (Helper.correctNull(rs.getString("app_renew_flag"))
							.equalsIgnoreCase("S")) {
						if (Helper.correctNull(rs.getString("APP_LOANTYPE"))
								.equalsIgnoreCase("C")) {
							strRestructureFlag = Helper.correctNull(rs
									.getString("FACILITY_RESTR_FLAG"));
							if (strRestructureFlag.equalsIgnoreCase("Y")) {
								if (rs1 != null) {
									rs1.close();
								}
								rs1 = DBUtils
										.executeLAPSQuery("queryforpromoters^"
												+ strAppno);
								if (rs1.next()) {
									strRestructureInvoDate = Helper
											.correctNull(rs1
													.getString("PERAPP_INVOCDATE"));
									if (strRestructureInvoDate
											.equalsIgnoreCase("")) {
										hshRecord.put("strRestructureInvoDate",
												"Y");
									}
								}
							}
						}
					}
				}

			}

			if (rs != null) {
				rs.close();
			}
			String bankingarrangement = "N";
			strQuery = SQLParser.getSqlQuery("sel_bankarrangemarrentchk^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				bankingarrangement = "Y";

			}
			hshRecord.put("bankingarrangement", bankingarrangement);
			if (rs1 != null) {
				rs1.close();
			}
			String strsolechk = "N";
			strQuery = SQLParser.getSqlQuery("sel_BankingArrangement^"
					+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				if (Helper.correctNull(rs1.getString("com_ba_type"))
						.equalsIgnoreCase("O")) {
					strsolechk = "Y";
				} else {
					strsolechk = "N";
				}
			}
			hshRecord.put("strsolechk", strsolechk);

			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}
			if (rs2 != null) {
				rs2.close();
			}
			String strwcmandatorycheck = "", strtlmandatorycheck = "";
			strQuery = SQLParser.getSqlQuery("sel_BankingArrangement^"
					+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				if (!Helper.correctNull(rs1.getString("com_wc_bnkarg"))
						.equalsIgnoreCase("")) {
					strwcmandatorycheck = "N";
					strQuery = SQLParser.getSqlQuery("sel_BAConsortiummandchk^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strwcmandatorycheck = "Y";
					}
				}
				if (!Helper.correctNull(rs1.getString("com_tl_bnkarg"))
						.equalsIgnoreCase("")) {
					strtlmandatorycheck = "N";
					strQuery = SQLParser
							.getSqlQuery("sel_BAConsortiummandchk_tl^"
									+ strAppno);
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						strtlmandatorycheck = "Y";
					}
				}
				hshRecord.put("strwctype", Helper.correctNull(rs1
						.getString("com_wc_bnkarg")));
				hshRecord.put("strtltype", Helper.correctNull(rs1
						.getString("com_tl_bnkarg")));
			}

			hshRecord.put("strtlmandatorycheck", strtlmandatorycheck);
			hshRecord.put("strwcmandatorycheck", strwcmandatorycheck);
			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}
			if (rs2 != null) {
				rs2.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_proposedLimit^" + strAppno
					+ "^" + strFacilitySno);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				hshRecord.put("facility_months", Helper.correctNull(rs1
						.getString("facility_months")));
				hshRecord.put("FACILITY_HOLIDAYPERIOD", Helper.correctNull(rs1
						.getString("FACILITY_HOLIDAYPERIOD")));
				hshRecord.put("FACILITY_RENEW_FLAG", Helper.correctNull(rs1
						.getString("FACILITY_RENEW_FLAG")));
			}
			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}

			strQuery = SQLParser.getSqlQuery("sel_mispagedetailscorp^"
					+ strAppno + "^" + strFacilitySno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("app_sector", Helper.correctNull(rs
						.getString("app_sector")));
				hshRecord.put("app_subsector", Helper.correctNull(rs
						.getString("app_subsector")));
			}

			if (rs != null) {
				rs.close();
			}
			String retrestructureval = "N";
			strQuery = SQLParser.getSqlQuery("sel_ret_tab_validation^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				retrestructureval = "Y";

			}
			if (rs != null) {
				rs.close();
			}
			String corprestructureval = "N";
			strQuery = SQLParser.getSqlQuery("sel_rest_assess_selection^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				corprestructureval = "Y";

			}
			//krishik Bhandar changes
			int rowcount1 = 0;
			if (rs1 != null)
				rs1.close();
			
			strQuery = SQLParser.getSqlQuery("get_schemecountenwr^"+ strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			while (rs1.next()) {
				if (Helper.correctNull((String) rs1.getString("COM_BANKSCHEME")).equals("074")) {
					hshRecord.put("strschemecodeenwr", Helper.correctNull((String) rs1.getString("COM_BANKSCHEME")));
					rowcount1++;
				}
			}
			if (rowcount1 > 0) {
				hshRecord.put("enwrschemeflag", "Y");
			if (rs != null) {
			rs.close();
				}
		String enwrdetails = "N";
		String strFacility="";
		strQuery = SQLParser.getSqlQuery("sel_agrenwrassessment^"
				+ strAppno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			strFacility=Helper.correctNull((String) rs.getString("ENWR_SNO"));
			if(strFacility.equals(""))
			{
				strFacility="0";
			}
			enwrdetails = "Y";

		}
		String enwrassessmentval = "N";
		
		strQuery = SQLParser.getSqlQuery("selagreNWRdetails^"+strFacility+"^"+ strAppno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			hshRecord.put("loansanctionamt", Helper.correctNull((String) rs.getString("ENWR_LOANSANCTIONAMT")));
			if(Helper.correctNull((String) rs.getString("ENWR_LOANSANCTIONAMT")).equals(""))
			{	
			enwrassessmentval ="N";
			}
			else
			{
			 enwrassessmentval ="Y";
			}

		}
		hshRecord.put("enwrdetails", enwrdetails);
		hshRecord.put("enwrassessmentval", enwrassessmentval);
			} else {
				hshRecord.put("enwrschemeflag", "N");
			}			
			//krishik Bhandar changes end
			if (rs != null) {
				rs.close();
			}
			String restructurechk = "N";
			strQuery = SQLParser.getSqlQuery("sel_rest_Assesment^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				restructurechk = "Y";
			}
			hshRecord.put("retrestructureval", retrestructureval);
			hshRecord.put("corprestructureval", corprestructureval);
			hshRecord.put("restructurechk", restructurechk);
			if (rs != null) {
				rs.close();
			}
			int gecl4count = 0;
			strQuery = SQLParser.getSqlQuery("sel_gecl4_borrower_info^"
					+ comapp_id + "^" + comapp_id);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {

				strgecl4date = "31/03/2021";
				strgecl4sancdate = Helper.correctNull((String) rs
						.getString("APP_PROCESSDATE"));
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				java.util.Date dateval1;
				java.util.Date dateval2;
				dateval1 = sdf.parse(strgecl4sancdate);
				dateval2 = sdf.parse(strgecl4date);
				if (dateval1.before(dateval2)) { // date1 <date2

					gecl4count++;
					log
							.info("********************gecl4count************************"
									+ gecl4count);

				}
			}
			if (gecl4count > 0) {

				hshRecord.put("gecl4countval", "Y");
			} else {
				hshRecord.put("gecl4countval", "N");
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_gecl4_assessdetail^"
					+ comapp_id);
			rs = DBUtils.executeQuery(strQuery);
			int intexposureval = 0, gelc4exposurecunt = 0;
			while (rs.next()) {
				intexposureval = Integer.parseInt(Helper.correctInt((String) rs
						.getString("COM_DETAILS")));
				if (intexposureval >= 1) {
					gelc4exposurecunt++;
				}
			}
			if (gelc4exposurecunt > 0) {

				hshRecord.put("gelc4exposurecuntval", "Y");
			} else {
				hshRecord.put("gelc4exposurecuntval", "N");
			}
			if (rs2 != null) {
				rs2.close();
			}

			double dbl_propgecl4totval = 0.00;
			strQuery = SQLParser.getSqlQuery("sel_geclfunchk^" + strAppno);
			rs2 = DBUtils.executeQuery(strQuery);
			while (rs2.next()) {

				dbl_propgecl4totval += Double
						.parseDouble(Helper.correctDouble((String) rs2
								.getString("proposedlimit")));

			}
			if (rs2 != null) {
				rs2.close();
			}
			if (rs != null) {
				rs.close();
			}
			if (rs1 != null) {
				rs1.close();
			}
			log
					.info("<<<<<<<<<<<<<<<=====================dbl_propgecl4totval======================>>>>>>>>>>>>>>>"
							+ dbl_propgecl4totval);
			hshRecord.put("dbl_propgecl4totval", String
					.valueOf(dbl_propgecl4totval));

			strQuery = SQLParser.getSqlQuery("sel_gecl4_loanamt^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			double dblgeclassval = 0.00;
			if (rs.next()) {
				dblgeclassval = Double.parseDouble(Helper
						.correctDouble((String) rs.getString("com_details")));
				if ((dbl_propgecl4totval != dblgeclassval)) {
					hshRecord.put("gecl4loanamt", "Y");
				}
				hshRecord.put("com_details", Helper.correctNull(rs
						.getString("com_details")));

			}
			if (rs != null) {
				rs.close();
			}
			if (rs1 != null) {
				rs1.close();
			}
			double dblgeclproposedamt = 0.00, dblgecl4prdamt = 0.00;
			double dbloutstandingbal = 0.00;
			rs1 = DBUtils.executeLAPSQuery("sel_gecl4exissancamt^"
					+ Helper.correctNull((String) hshValues
							.get("hidapplicantid")));
			while (rs1.next()) {
				dblgeclproposedamt += dbl_propgecl4totval
						+ Double.parseDouble(Helper.correctDouble(rs1
								.getString("totallimit")));
			}
			log
					.info("<<<<<<<<<==========dblgeclproposedamt================>>>>>>>>"
							+ dbl_propgecl4totval);
			hshRecord.put("dblgeclproposedamt", String
					.valueOf(dblgeclproposedamt));
			if (rs1 != null) {
				rs1.close();
			}
			rs1 = DBUtils.executeLAPSQuery("sel_geclidentchk^" + strAppno);
			if (rs1.next()) {
				dblgecl4prdamt = Double.parseDouble(Helper.correctDouble(rs1
						.getString("COM_GECL4_LIMITPROPOSED")));
				if ((dblgeclproposedamt > dblgecl4prdamt)) {
					hshRecord.put("gecl4prdamt", "Y");
				}
				dbloutstandingbal = Double.parseDouble(Helper.correctDouble(rs1
						.getString("COM_BAL_OUTSTANDING")));
				hshRecord.put("dbloutstandingbal", String
						.valueOf(dbloutstandingbal));
			}
			if (rs1 != null) {
				rs1.close();
			}
			String strgecl3rest = "";
			int gecl3count = 0;
			rs1 = DBUtils.executeLAPSQuery("sel_gecl3restructurechk^"
					+ strAppno);
			while (rs1.next()) {
				strgecl3rest = Helper.correctNull(rs1.getString("COM_DETAILS"));
				if (strgecl3rest.equalsIgnoreCase("Yes")) {
					gecl3count++;
				}
			}
			if (gecl3count > 0) {

				hshRecord.put("gecl3restructure", "Y");
			} else {
				hshRecord.put("gecl3restructure", "N");

			}

			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}
			if (rs2 != null) {
				rs2.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_rest_tenorchk^" + strAppno);
			rs1 = DBUtils.executeQuery(strQuery);
			int inttenorcount = 0;
			int intholidayperiod = 0;
			String strsector = "";
			String strsubsector = "";
			String strrenewflag = "";
			String strwhetherrest = "";
			String stractivitycode = "";
			String strscheme = "";
			String strmainact = "", strsubact = "";
			int inttenor = 0;
			while (rs1.next()) {
				intholidayperiod = Integer.parseInt(Helper
						.correctInt((String) rs1
								.getString("FACILITY_HOLIDAYPERIOD")));
				inttenor = Integer.parseInt(Helper.correctInt((String) rs1
						.getString("facility_months")));
				strsector = Helper.correctNull(rs1.getString("app_sector"));
				strsubsector = Helper.correctNull(rs1
						.getString("app_subsector"));
				strrenewflag = Helper.correctNull(rs1
						.getString("FACILITY_RENEW_FLAG"));
				strwhetherrest = Helper.correctNull(rs1
						.getString("facility_restr_flag"));
				stractivitycode = Helper.correctNull(rs1
						.getString("APP_ACTIVITYCODE"));
				strscheme = Helper.correctNull(rs1
						.getString("FAC_RESTR_SCHEME"));
				strmainact = Helper.correctNull(rs1
						.getString("ACT_MAINACTCODE"));
				strsubact = Helper.correctNull(rs1.getString("ACT_SUBACTCODE"));
				if ((strscheme.equalsIgnoreCase("27")
						|| strscheme.equalsIgnoreCase("28") || strscheme
						.equalsIgnoreCase("29"))
						&& (intholidayperiod > 24 || inttenor > 120)) {
					inttenorcount++;
				}
				if ((strwhetherrest.equalsIgnoreCase("Y"))
						&& (intholidayperiod > 24 || inttenor > 120)
						&& ((strsector.equalsIgnoreCase("01") && (strsubsector
								.equalsIgnoreCase("3")
								|| strsubsector.equalsIgnoreCase("4")
								|| strsubsector.equalsIgnoreCase("22")
								|| strsubsector.equalsIgnoreCase("24") || strsubsector
								.equalsIgnoreCase("25"))) || (strsector
								.equalsIgnoreCase("02") && (strsubsector
								.equalsIgnoreCase("64"))))) {
					inttenorcount++;
				}
				if ((strwhetherrest.equalsIgnoreCase("Y"))
						&& (intholidayperiod > 24 || inttenor > 120)
						&& ((strmainact.equalsIgnoreCase("01") && (strsubact
								.equalsIgnoreCase("11")
								|| strsubact.equalsIgnoreCase("12")
								|| strsubact.equalsIgnoreCase("14") || strsubact
								.equalsIgnoreCase("15"))))
						|| stractivitycode.equalsIgnoreCase("011807")
						|| stractivitycode.equalsIgnoreCase("011808")) {
					inttenorcount++;
				}
			}
			if (inttenorcount > 0) {
				hshRecord.put("strTenorRestructureChk", "Y");

			} else {
				hshRecord.put("strTenorRestructureChk", "N");
			}
			log.info("<<<<<<<<<<========inttenorcount=======>>>>>>>>>"
					+ inttenorcount);
			if (rs1 != null) {
				rs1.close();
			}
			int countval = 0;
			String strrestructuregecl3 = "";
			rs = DBUtils.executeLAPSQuery("sel_geclfacilities^" + comapp_id);
			while (rs.next()) {
				if (Helper.correctNull(rs.getString("com_gecltype"))
						.equalsIgnoreCase("GECL3")
						&& Helper.correctNull(rs.getString("FACILITY_STATUS"))
								.equalsIgnoreCase("pa")) {
					countval++;

				}

			}
			if (countval > 0) {
				hshRecord.put("strgecl3restpropstatus", "Y");
				strrestructuregecl3 = "Yes";

			} else {
				hshRecord.put("strgecl3restpropstatus", "N");
				strrestructuregecl3 = "No";

			}
			if (rs1 != null) {
				rs1.close();
			}
			double dblgecl1borrowerourbankamt = 0.00;
			rs1 = DBUtils
					.executeLAPSQuery("sel_gecl1_borroweramt^" + comapp_id);
			while (rs1.next()) {
				dblgecl1borrowerourbankamt += Double.parseDouble(Helper
						.correctDouble(rs1.getString("COM_DETAILS")));
			}
			log
					.info("<<<<<<<<<==========dblgecl1borrowerourbankamt================>>>>>>>>"
							+ dblgecl1borrowerourbankamt);
			hshRecord.put("dblgecl1borrowerourbankamt", String
					.valueOf(dblgecl1borrowerourbankamt));
			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_gecl1_restructure^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			String strassesborrowerval = "";
			while (rs.next()) {
				strassesborrowerval = Helper.correctNull(rs
						.getString("com_details"));
				if (!strassesborrowerval.equalsIgnoreCase(strrestructuregecl3)) {
					hshRecord.put("strgecl3brwval", "Y");
				}
				hshRecord.put("com_details", Helper.correctNull(rs
						.getString("com_details")));

			}
			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}
			double dblgecl1restval = 0.00;
			double dblgecl1restchk = 0.00;
			dblgecl1restchk = (dbloutstandingbal * dblgecl1borrowerourbankamt) / 100;
			strQuery = SQLParser.getSqlQuery("sel_gecl1_restructurechk^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				dblgecl1restval = Double.parseDouble(Helper.correctDouble(rs
						.getString("COM_DETAILS")));
				if ((dblgecl1restval != dblgecl1restchk)) {
					hshRecord.put("gecl1restchk", "Y");
				}
				hshRecord.put("com_details", Helper.correctNull(rs
						.getString("com_details")));

			}
			if (rs1 != null) {
				rs1.close();
			}
			if (rs != null) {
				rs.close();
			}

			if (rs != null) {
				rs.close();
			}
			String strWCbnkarg = "", strTLbnkarg = "", strWCtype = "", strTLtype = "";
			String strwccountchk = "N", strtlcountchk = "N";
			int strconswcCount = 0, strconsTLCount = 0;
			rs = DBUtils.executeLAPSQuery("sel_BAConsVal^" + strAppno);
			if (rs.next()) {
				strWCbnkarg = Helper.correctNull(rs.getString("com_wc_bnkarg"));
				strTLbnkarg = Helper.correctNull(rs.getString("com_tl_bnkarg"));

				strWCtype = Helper.correctNull(rs.getString("com_wc_type"));
				strTLtype = Helper.correctNull(rs.getString("com_tl_type"));

				strconswcCount = Integer.parseInt(Helper.correctInt(rs
						.getString("COM_WC_NO")));
				strconsTLCount = Integer.parseInt(Helper.correctInt(rs
						.getString("COM_TL_NO")));
				hshRecord.put("strconswcCountval", Integer
						.toString(strconswcCount));
				hshRecord.put("strconsTLCountval", Integer
						.toString(strconsTLCount));
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_consprtiummultiplechk^"
					+ strAppno);
			if (rs.next()) {
				if (strWCbnkarg.equalsIgnoreCase("C")
						&& (strWCtype.equalsIgnoreCase("M"))) {
					if (strconswcCount != Integer.parseInt(Helper.correctInt(rs
							.getString("count")))) {
						strwccountchk = "Y";
					}
				}
			}
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils
					.executeLAPSQuery("sel_consprtiummultiplechkconsortium^"
							+ strAppno);
			if (rs.next()) {
				if (strTLbnkarg.equalsIgnoreCase("C")
						&& strTLtype.equalsIgnoreCase("M")) {
					if (strconsTLCount != Integer.parseInt(Helper.correctInt(rs
							.getString("count")))) {
						strtlcountchk = "Y";
					}
				}
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_ahp_details^" + strAppno);
			if (rs.next()) {
				hshRecord.put("strAHPDet", "Y");
			} else {
				hshRecord.put("strAHPDet", "N");
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_sanccustdet_ahp^" + strAppno
					+ "^ d.demo_type in('a','c')");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("CON_RESIDENT_TYPE", Helper.correctNull(rs
						.getString("CON_RESTYPE")));
				hshRecord.put("custflag", "Y");
			}
			strQuery = SQLParser.getSqlQuery("sel_ahp_details^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("AHP_RESIDENT_TYPE", Helper.correctNull(rs
						.getString("AHP_RESIDENT_TYPE")));
				hshRecord.put("AHP_COSTLOANPRD", Helper.correctNull(rs
						.getString("AHP_COSTLOANPRD")));
				hshRecord.put("recordflag", "Y");

			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("selperprdmargin^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("TOTAL_COST", Helper.correctNull(rs
						.getString("loan_costloanprd")));

			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("getlreq^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("GOVT_SCHEME", Helper.correctNull(rs
						.getString("GOVT_SCHEME")));
				hshRecord.put("LOAN_GOVT", Helper.correctNull(rs
						.getString("LOAN_GOVT")));

			}
			//
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("get_RepayTypeAndPurpose^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("loan_repaymenttype", Helper.correctNull(rs
						.getString("loan_repaymenttype")));

			}
			if (strSessionModuleType.equalsIgnoreCase("CORP")) {
				if (rs != null)
					rs.close();

				rs = DBUtils.executeQuery(SQLParser
						.getSqlQuery("sel_SvanidhiStatus^" + strAppno + "^2"));
				if (rs.next()) {
					hshRecord.put("pmSvanidhi2", "Y");
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeQuery(SQLParser
						.getSqlQuery("sel_SvanidhiStatus^" + strAppno + "^3"));
				if (rs.next()) {
					hshRecord.put("pmSvanidhi3", "Y");
					hshRecord.put("proposed_amt3", Helper.correctNull(rs
							.getString("FACILITY_PROPOSED")));
					hshRecord.put("sanc_amt3", Helper.correctNull(rs
							.getString("FACILITY_SANCTIONED")));

					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeQuery(SQLParser
							.getSqlQuery("sel_SvanidhiUniqueapp^" + strAppno
									+ "^3"));
					if (rs1.next()) {

						hshRecord.put("pmSvanidhi3Assessment", "Y");
						hshRecord
								.put(
										"Svanidhiproposed_amt3",
										Helper
												.correctNull(rs1
														.getString("SVANIDHI_BORROWER_AMOUNT")));
						hshRecord
								.put(
										"Svanidhisanc_amt3",
										Helper
												.correctNull(rs1
														.getString("SVANIDHI_PROPOSED_AMOUNT")));

					}

				}
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(SQLParser
						.getSqlQuery("sel_svanidhidetails^" + strCustid));
				String unique_no = "";
				boolean flag = false;
				if (rs.next()) {
					unique_no = Helper.correctNull(rs
							.getString("per_svanidhiappno"));

					if (!("").equalsIgnoreCase(unique_no)) {
						rs1 = DBUtils.executeQuery(SQLParser
								.getSqlQuery("sel_svanidhiNo^" + unique_no
										+ "^" + strCustid));

						while (rs1.next()) {
							String perappid = Helper.correctNull(rs1
									.getString("PERAPP_ID"));
							rs2 = DBUtils.executeQuery(SQLParser
									.getSqlQuery("sel_SvanidhiPerapp^"
											+ perappid));

							if (rs2.next()) {
								flag = true;
							}

						}
					}
				}
				if (flag) {
					hshRecord.put("SVanidhi_uniqueno", "N");
				} else {
					hshRecord.put("SVanidhi_uniqueno", "Y");
				}

				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(SQLParser
						.getSqlQuery("sel_Svanidhifacilities^" + comapp_id
								+ "^" + "1"));
				if (rs.next()) {
					String svanidhiStatus = rs.getString("FACILITY_STATUS");
					if (("ca").equalsIgnoreCase(svanidhiStatus)) {
						hshRecord.put("Svanidhi1_Completed", "Y");
					}
				}
				if (rs != null)
					rs.close();
				rs = DBUtils.executeQuery(SQLParser
						.getSqlQuery("sel_Svanidhifacilities^" + comapp_id
								+ "^" + "2"));
				if (rs.next()) {
					String svanidhiStatus = rs.getString("FACILITY_STATUS");
					if (("ca").equalsIgnoreCase(svanidhiStatus)) {
						hshRecord.put("Svanidhi2_Completed", "Y");
					}
				}

			}

			log.info("strwccountchk=================>>>>>" + strwccountchk);
			log.info("strtlcountchk=================>>>>>" + strtlcountchk);
			hshRecord.put("strwccountchk", strwccountchk);
			hshRecord.put("strtlcountchk", strtlcountchk);
			if (rs != null) {
				rs.close();
			}
			String strmiansector = "";
			String strsubactsector = "";
			String strmisactivitycode = "";
			String strrestscheme = "";
			int inttottenorchk = 0;
			int intscheme = 0;
			if (strSessionModuleType.equalsIgnoreCase("CORP")
					|| strSessionModuleType.equalsIgnoreCase("AGR")) {
				rs = DBUtils.executeLAPSQuery("sel_rest_tenorchk^" + strAppno);
				while (rs.next()) {
					strsector = Helper.correctNull(rs.getString("app_sector"));
					strsubsector = Helper.correctNull(rs
							.getString("app_subsector"));
					strrenewflag = Helper.correctNull(rs
							.getString("FACILITY_RENEW_FLAG"));
					strwhetherrest = Helper.correctNull(rs
							.getString("facility_restr_flag"));
					stractivitycode = Helper.correctNull(rs
							.getString("APP_ACTIVITYCODE"));
					strrestscheme = Helper.correctNull(rs
							.getString("FAC_RESTR_SCHEME"));
					strmainact = Helper.correctNull(rs
							.getString("ACT_MAINACTCODE"));
					strsubact = Helper.correctNull(rs
							.getString("ACT_SUBACTCODE"));
					if (strrestscheme.equalsIgnoreCase("27")
							|| strrestscheme.equalsIgnoreCase("28")) {
						intscheme++;
					}
					if ((strrestscheme.equalsIgnoreCase("27"))
							&& ((strsector.equalsIgnoreCase("01") && (strsubsector
									.equalsIgnoreCase("3")
									|| strsubsector.equalsIgnoreCase("4")
									|| strsubsector.equalsIgnoreCase("22")
									|| strsubsector.equalsIgnoreCase("24") || strsubsector
									.equalsIgnoreCase("25"))) || (strsector
									.equalsIgnoreCase("02") && (strsubsector
									.equalsIgnoreCase("64"))))) {
						inttottenorchk++;
					}
					if ((strrestscheme.equalsIgnoreCase("28"))
							&& ((strmainact.equalsIgnoreCase("01") && (strsubact
									.equalsIgnoreCase("11")
									|| strsubact.equalsIgnoreCase("12")
									|| strsubact.equalsIgnoreCase("14") || strsubact
									.equalsIgnoreCase("15"))))
							|| stractivitycode.equalsIgnoreCase("011807")
							|| stractivitycode.equalsIgnoreCase("011808")) {
						inttottenorchk++;
					}

				}
			} else {
				rs = DBUtils.executeLAPSQuery("sel_retail_tenure^" + strAppno);
				if (rs.next()) {
					strsector = Helper.correctNull(rs.getString("app_sector"));
					strsubsector = Helper.correctNull(rs
							.getString("app_subsector"));
					stractivitycode = Helper.correctNull(rs
							.getString("APP_ACTIVITYCODE"));
					strrestscheme = Helper.correctNull(rs
							.getString("LOAN_RESTR_SCHEME"));
					if (strrestscheme.equalsIgnoreCase("27")
							|| strrestscheme.equalsIgnoreCase("28")) {
						intscheme++;
					}
					if ((strrestscheme.equalsIgnoreCase("27"))
							&& ((strsector.equalsIgnoreCase("01") && (strsubsector
									.equalsIgnoreCase("3")
									|| strsubsector.equalsIgnoreCase("4")
									|| strsubsector.equalsIgnoreCase("22")
									|| strsubsector.equalsIgnoreCase("24") || strsubsector
									.equalsIgnoreCase("25"))) || (strsector
									.equalsIgnoreCase("02") && (strsubsector
									.equalsIgnoreCase("64"))))) {
						inttottenorchk++;
					}
					if ((strrestscheme.equalsIgnoreCase("28"))
							&& ((strsector.equalsIgnoreCase("01") && (strsubsector
									.equalsIgnoreCase("11")
									|| strsubsector.equalsIgnoreCase("12")
									|| strsubsector.equalsIgnoreCase("14") || strsubsector
									.equalsIgnoreCase("15"))))
							|| stractivitycode.equalsIgnoreCase("011807")
							|| stractivitycode.equalsIgnoreCase("011808")) {
						inttottenorchk++;
					}
				}
			}
			if (inttottenorchk == intscheme) {
				hshRecord.put("strRestructureChk", "Y");

			} else {

				hshRecord.put("strRestructureChk", "N");

			}
			if (intscheme > 0) {
				hshRecord.put("strschemeChk", "Y");

			} else {
				hshRecord.put("strschemeChk", "N");
			}
			log.info("<<<<<<<<<<========inttottenorchk=======>>>>>>>>>"
					+ inttottenorchk);
			log.info("<<<<<<<<<<========intscheme=======>>>>>>>>>" + intscheme);
			// added for CIN check
			hshRecord.put("str_cusName", correctNull((String) hshValues
					.get("appname")));
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(SQLParser.getSqlQuery("sel_staffandCIN^"
					+ strCustid));
			String panNo = "";
			if (rs.next()) {
				hshRecord.put("CIN", correctNull((String) rs
						.getString("COMINFO_CIN")));
				panNo = correctNull((String) rs.getString("PERAPP_PANNO"));

				if (panNo != "") {
					String pan4 = panNo.substring(3, 4);
					if (pan4.equalsIgnoreCase("C")) {
						hshRecord.put("Listed_Company", "Y");
					} else {
						hshRecord.put("Listed_Company", "N");
					}
				}

			}

			String facInt = "", facSancInt = "", facSancStatus = "";
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_facno^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				facInt = correctNull((String) rs.getString("facility_interest"));
				facSancInt = correctNull((String) rs
						.getString("FACILITY_SANCINTEREST"));
				facSancStatus = correctNull((String) rs
						.getString("facility_sancstatus"));

				if (facSancStatus.equalsIgnoreCase("A")
						&& !facSancInt.equalsIgnoreCase(facInt)) {
					hshRecord.put("IntChngeMsg", "Y");
				}
			}

			rs = DBUtils.executeLAPSQuery("sel_app_perm_no^" + strAppno);
			if (rs.next()) {
				hshRecord.put("StrDigiLoanType", Helper.correctNull((String) rs
						.getString("APP_LOANSUBTYPE_DIGI")));
			}
			if (rs != null)
				rs.close();

			rs = DBUtils
					.executeLAPSQuery("select_facility_details^" + strAppno);
			while (rs.next()) {
				if (Helper.correctNull(rs.getString("COM_BANKSCHEME"))
						.equalsIgnoreCase("052")) {
					hshRecord.put("COM_BANKSCHEME", "052");
				}
			}
			if (rs != null)
				rs.close();

			double gecl1sno25 = 0.00;
			strQuery = SQLParser.getSqlQuery("sel_gecl1ext1snocomassessment^"
					+ strAppno + "^" + "5");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("gecl1sno25", String.valueOf(Double
						.parseDouble((String) Helper.correctDouble(rs
								.getString("totallimit")))));
			}

			strQuery = SQLParser.getSqlQuery("sel_geclextmaxrange^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("gecl1maxamount", String.valueOf(Double
						.parseDouble((String) Helper.correctDouble(rs
								.getString("FACILITY_SANCAMT")))));
			}

			rs1 = DBUtils.executeLAPSQuery("sel_geclidentchk^" + strAppno);
			if (rs1.next()) {
				hshRecord.put("strgeclident", Helper.correctNull((rs1
						.getString("COM_GECLTYPE"))));
			}
			if (rs != null) {
				rs.close();
			}
					
					   rs=DBUtils.executeLAPSQuery("sel_app_perm_no^"+ strAppno);			 
						if(rs.next()) 
						{
							hshRecord.put("StrDigiLoanType", Helper.correctNull((String)rs.getString("APP_LOANSUBTYPE_DIGI")));
						}
						if(rs!=null)
							rs.close();
						
						rs=DBUtils.executeLAPSQuery("select_facility_details^"+strAppno);
			 			while(rs.next())
			    		{
			 				if(Helper.correctNull(rs.getString("COM_BANKSCHEME")).equalsIgnoreCase("052"))
			 				{
			 					hshRecord.put("COM_BANKSCHEME","052");
			 				}
			 				if(Helper.correctNull(rs.getString("COM_BANKSCHEME")).equalsIgnoreCase("063"))
			 				{
			 					hshRecord.put("COM_BANKSCHEME","063");
			 				}
			    		}
						if(rs!=null)
							rs.close();
						
						 gecl1sno25=0.00;
 						strQuery=SQLParser.getSqlQuery("sel_gecl1ext1snocomassessment^"+strAppno+"^"+"25");
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							hshRecord.put("gecl1sno25",String.valueOf(Double.parseDouble((String)Helper.correctDouble(rs.getString("totallimit")))));
						}
						
						
						strQuery=SQLParser.getSqlQuery("sel_gecl2ext1snocomassessmentval^"+strAppno);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							hshRecord.put("gecl1sno25",String.valueOf(Double.parseDouble((String)Helper.correctDouble(rs.getString("com_details")))));
						}
						
						
						strQuery=SQLParser.getSqlQuery("sel_gecl3ext1snocomassessmentval^"+strAppno);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							hshRecord.put("gecl1sno25",String.valueOf(Double.parseDouble((String)Helper.correctDouble(rs.getString("com_details")))));
						}
						
						
						
						strQuery=SQLParser.getSqlQuery("sel_geclextmaxrange^"+strAppno);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							hshRecord.put("gecl1maxamount",String.valueOf(Double.parseDouble((String)Helper.correctDouble(rs.getString("FACILITY_SANCAMT")))));
						}
						
						rs1=DBUtils.executeLAPSQuery("sel_geclidentchk^"+strAppno);
				        if(rs1.next()){
				        	hshRecord.put("strgeclident", Helper.correctNull((rs1.getString("COM_GECLTYPE"))));
				        }

				        
				      //sel_gecl3extexistsangecl3val
				        if(strSessionModuleType.equalsIgnoreCase("CORP"))
				        {
				        String browwerid="";
				        
				        if((Helper.correctNull((String)hshValues.get("strAppType")).equalsIgnoreCase("F")) && (strSessionModuleType.equalsIgnoreCase("CORP"))
				        		&&( Helper.correctNull((String)hshRecord.get("strgeclident")).equalsIgnoreCase("GECL -1 extension") || 
				        				Helper.correctNull((String)hshRecord.get("strgeclident")).equalsIgnoreCase("GECL -2 extension") || 
				        				Helper.correctNull((String)hshRecord.get("strgeclident")).equalsIgnoreCase("GECL -3 extension")))
				        {
				        rs1=DBUtils.executeLAPSQuery("select_facborrowerid^"+strAppno);
				        if(rs1.next()){
				        	browwerid =Helper.correctNull((rs1.getString("borrower_id")));
				        }
				        
				        rs1=DBUtils.executeLAPSQuery("sel_gecl3extexistsangecl3val^"+browwerid);
				        if(rs1.next()){
				        	hshRecord.put("totallimit", Helper.correctNull((rs1.getString("totallimit"))));
				        	hshRecord.put("GECL3SANCATIONFLAG","Y");
				        }
				        //sel_gecl3extexistsangecl3val12
				        
				        
				        rs1=DBUtils.executeLAPSQuery("sel_gecl3extexistsangecl3val12^"+browwerid);
				        if(rs1.next()){
				        	hshRecord.put("totallimit", Helper.correctNull((rs1.getString("totallimit"))));
				        	hshRecord.put("GECL12SANCATIONFLAG","Y");
				        }
				        }
				        

				        if(rs != null)
						{
							rs.close();
						}
				        
				        
				        rs1=DBUtils.executeLAPSQuery("select_facborrowerid^"+strAppno);
				        if(rs1.next()){
				        	browwerid =Helper.correctNull((rs1.getString("borrower_id")));
				        }
				        if(rs1!=null)
						{	  rs1.close(); 
						}
				        
				        
				        if(browwerid.equalsIgnoreCase(""))
				        {
				        	browwerid=comapp_id;
				        }
				        rs = DBUtils.executeLAPSQuery("sel_parayatanbankdet^"+browwerid);
				        while(rs.next())
						{
							//hshRecord.put("perapp_facility_othbank", Helper.correctNull(rs.getString("perapp_facility_othbank")));	
							if(Helper.correctNull(rs.getString("perapp_facility_othbank")).equalsIgnoreCase("P"))
							{
								hshRecord.put("perapp_facility_othbankP","P");
							}
							if(Helper.correctNull(rs.getString("perapp_facility_othbank")).equalsIgnoreCase("G"))
							{
								hshRecord.put("perapp_facility_othbankG","G");
							}
						}
						if(rs1!=null)
						{	  rs1.close(); 
						}
						
				        
						int intcountgecl1=0,intcountgecl2=0,intfaccountgecl2=0,intfaccountgecl3=0,intcountgecl3=0,intcountgecl1ext=0,intfaccountgeclext1=0,intcountgecl2ext=0,intfaccountgeclext2=0,intcountgecl3ext=0,intfaccountgeclext3=0;
						rs = DBUtils.executeLAPSQuery("sel_geclfacilities13^"+browwerid);
						while(rs.next())
						{
							
							if(!Helper.correctNull(rs.getString("app_no")).equalsIgnoreCase(strAppno))
							{
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL1")){
									intcountgecl1++;
									hshRecord.put("GECLFLAG","Y");
								}
								
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL3")){
									intcountgecl3++;
									hshRecord.put("GECLFLAG","Y");
								}
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL -1 extension")){
									intcountgecl1ext++;
									hshRecord.put("GECLFLAG","Y");
								}
								
								
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL -3 extension")){
									intcountgecl3ext++;
									hshRecord.put("GECLFLAG","Y");
								}
								
								
								
							}
							else{
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL1")){
									intfaccountgecl2++;
									hshRecord.put("GECLFLAG","Y");
								}
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL3")){
									intfaccountgecl3++;
									hshRecord.put("GECLFLAG","Y");
								}
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL -1 extension")){
									intfaccountgeclext1++;
									hshRecord.put("GECLFLAG","Y");
								}
								
								if(Helper.correctNull(rs.getString("com_gecltype")).equalsIgnoreCase("GECL -3 extension")){
									intfaccountgeclext3++;
									hshRecord.put("GECLFLAG","Y");
								}
							}
						}
						
						if(rs!=null){
							rs.close();
						}
						int intcountparayatan=0,intfaccountparayatan=0;
						rs = DBUtils.executeLAPSQuery("sel_parayatanfacilities^"+browwerid);
						while(rs.next())
						{
							
							hshRecord.put("parayatanFlag","Y");
							if(!Helper.correctNull(rs.getString("app_no")).equalsIgnoreCase(strAppno))
							{
								
									intcountparayatan++;
								
							}
							else
							{
								
									intfaccountparayatan++;
								
							}
							}
						
						if(rs!=null){
							rs.close();
						}
						
						if(Helper.correctNull((String)hshRecord.get("perapp_facility_othbankG")).equalsIgnoreCase("G") &&
								Helper.correctNull((String)hshRecord.get("parayatanFlag")).equalsIgnoreCase("Y"))
						{
							hshRecord.put("parayatanGECLFlag","Y");
						}
						
						if(Helper.correctNull((String)hshRecord.get("perapp_facility_othbankP")).equalsIgnoreCase("P") &&
								Helper.correctNull((String)hshRecord.get("GECLFLAG")).equalsIgnoreCase("Y"))
						{
							hshRecord.put("parayatanGECLFlag","Y");
						}
						
						if(Helper.correctNull((String)hshRecord.get("parayatanFlag")).equalsIgnoreCase("Y") && 
								Helper.correctNull((String)hshRecord.get("GECLFLAG")).equalsIgnoreCase("Y"))
						{
							hshRecord.put("parayatanGECLFlag","Y");
						}
		}

				        if(strAppStatus.equalsIgnoreCase("op"))
				        {
				        	String cubsid="";
				        	String newConcode="";
				        	String cbsBen="";
				        	if(strSessionModuleType.equalsIgnoreCase("RET")||strSessionModuleType.equalsIgnoreCase("CORP")||strSessionModuleType.equalsIgnoreCase("AGR"))
				        	{
				        		if(strSessionModuleType.equalsIgnoreCase("RET"))
				        		{
				        	strQuery=SQLParser.getSqlQuery("selcusidnewforcheckben^"+strAppno);
							rs=DBUtils.executeQuery(strQuery);
				        		}
				        		else
				        		{
				        			strQuery=SQLParser.getSqlQuery("selcusidnewforcheckbenforagricorp^"+strAppno);
									rs=DBUtils.executeQuery(strQuery);
				        		}
							if(rs.next())
							{
								if(strSessionModuleType.equalsIgnoreCase("RET"))
								{
								cubsid=Helper.correctNull((rs.getString("DEMO_APPID")));
								}
								else
								{
									cubsid=Helper.correctNull((rs.getString("DEMO_COMAPPNEWID")));
								}
								
							}
							if(rs != null)
							{
								rs.close();
							}
							strQuery=SQLParser.getSqlQuery("selCONSTITUTIONNEW^"+cubsid);
							rs=DBUtils.executeQuery(strQuery);
							if(rs.next())
							{
								newConcode=Helper.correctNull((rs.getString("PERAPP_CONSTITUTIONNEW")));
								
							}
							if(rs != null)
							{
								rs.close();
							}
							strQuery=SQLParser.getSqlQuery("selcbsstaticid^"+newConcode);
							rs=DBUtils.executeQuery(strQuery);
							if(rs.next())
							{
								cbsBen=Helper.correctNull((rs.getString("CBS_BEN")));
								hshRecord.put("cbsBencheckid",cbsBen);
							}
							if(rs != null)
							{
								rs.close();
							}
							if(cbsBen.equalsIgnoreCase("Y"))
							{
								strQuery=SQLParser.getSqlQuery("selbeneficial^"+cubsid);
								rs=DBUtils.executeQuery(strQuery);
								if(!rs.next())
								{
									hshRecord.put("checkbenower","Kindly update Beneficial Owner details in Finacle-CRM-Relationship tab-Relationship tab-Relationship Type-Beneficiary" );	
								}
								else
								{
									hshRecord.put("checkbenower","");
								}
							}
							
							
							
				        	}
				        	
				        }
				        	String forPostcheck="";
				        	if(rs1!=null)
								rs1.close();
							rs1=DBUtils.executeLAPSQuery("get_APP_RENEW_FLAG^"+strAppno);			
							if(rs1.next())
							{
								
								forPostcheck=Helper.correctNull(rs1.getString("APP_RENEW_FLAG"));
								hshRecord.put("forPostcheck",forPostcheck);
							}
							if(!forPostcheck.equalsIgnoreCase("P"))
							{
				        if(strSessionModuleType.equalsIgnoreCase("RET")||strSessionModuleType.equalsIgnoreCase("CORP")||strSessionModuleType.equalsIgnoreCase("AGR"))
				        {
				        	String useridinclph="";
				        	String applicationinclph=""; 
				        	String appnoforcheck="";
				        	String strQueryforstaff="";
				        	if(rs != null)
							{
								rs.close();
							}
				        	strQuery=SQLParser.getSqlQuery("seluserinclph^"+appholdercheck);
							rs=DBUtils.executeQuery(strQuery);
							if(rs.next())
							{
					
								useridinclph="Y";
							}
							else
							{
								useridinclph="N";
							}
							if(rs != null)
							{
								rs.close();
							}
							appnoforcheck=correctNull((String)hshValues.get("hidApplicationNum"));
							strQuery=SQLParser.getSqlQuery("applicationinclphforquery^"+appnoforcheck);
							rs=DBUtils.executeQuery(strQuery);
							if(rs.next())
							{
								if(Helper.correctNull((rs.getString("INWARD_APPLNPROCESSAT"))).equalsIgnoreCase("6"))
								{
									applicationinclph="Y";
								}
								else
								{
									applicationinclph="N";
								}
							}
							if(useridinclph.equalsIgnoreCase("Y")||applicationinclph.equalsIgnoreCase("Y"))
							{
								if(rs != null)
								{
									rs.close();
								}
								if(rs1!=null)
								{
									rs1.close();
								}
								strQuery=SQLParser.getSqlQuery("legal_opinion_verification^"+strAppno);
				    			rs=DBUtils.executeQuery(strQuery);
				    			while(rs.next())
				    			{
				    				strQueryforstaff =SQLParser.getSqlQuery("lopverification^"+strAppno+"^"+Helper.correctNull((String)rs.getString("SEC_ID")));
				    				rs1=DBUtils.executeQuery(strQueryforstaff);
				    				if(rs1.next())
				    				{
				    					if(Helper.correctNull((String)rs1.getString("LO_VERIFIED_BY")).equalsIgnoreCase(""))
				    					{
				    					hshRecord.put("Lov_verification_check","Y");
				    					}
				    				}
				    				else
				    				{
				    					hshRecord.put("Lov_verification_check","Y");
				    				}
				    				
				    			}
								
								
							}
							
				        	
				        }

				        }

		

				        if(strAppStatus.equalsIgnoreCase("op"))
				        {
				        	String cubsid="";
				        	String newConcode="";
				        	String cbsBen="";
				        if(strSessionModuleType.equalsIgnoreCase("RET")||strSessionModuleType.equalsIgnoreCase("CORP")||strSessionModuleType.equalsIgnoreCase("AGR"))
				        {
				        	if(strSessionModuleType.equalsIgnoreCase("RET"))
			        		{
			        	strQuery=SQLParser.getSqlQuery("selcusidnewforcheckben^"+strAppno);
						rs=DBUtils.executeQuery(strQuery);
			        		}
			        		else
			        		{
			        			strQuery=SQLParser.getSqlQuery("selcusidnewforcheckbenforagricorp^"+strAppno);
								rs=DBUtils.executeQuery(strQuery);
			        		}
						if(rs.next())
						{
							if(strSessionModuleType.equalsIgnoreCase("RET"))
							{
							cubsid=Helper.correctNull((rs.getString("DEMO_APPID")));
							}
							else
							{
								cubsid=Helper.correctNull((rs.getString("DEMO_COMAPPNEWID")));
							}
							
						}
						if(rs != null)
						{
							rs.close();
						}
						strQuery=SQLParser.getSqlQuery("selCONSTITUTIONNEW^"+cubsid);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							newConcode=Helper.correctNull((rs.getString("PERAPP_CONSTITUTIONNEW")));
							
						}
						if(rs != null)
						{
							rs.close();
						}
						if(!newConcode.equalsIgnoreCase("01"))
						{
							 int myNum = 500000000; 
							 Double d2=Double.valueOf(myNum);
							double totexp=0.00;
							strQuery=SQLParser.getSqlQuery("getsumofexposure^"+strAppno+"^"+strAppno+"^"+strAppno+"^"+strAppno+"^"+strAppno+"^"+strAppno);
							rs=DBUtils.executeQuery(strQuery);
							if(rs.next())
							{
								totexp=Double.parseDouble((Helper.correctDouble((String)rs.getString("totexp"))));
								//totexp=500000000d;
							}
							if(rs != null)
							{
								rs.close();
							}
							if(totexp>=d2)
							{
								strQuery=SQLParser.getSqlQuery("selCONSTITUTIONNEW^"+cubsid);
								rs=DBUtils.executeQuery(strQuery);
								if(rs.next())
								{
									String leiid="";
									String leiissdate="";
									String leiexpdate="";
									String checkleiexpdate="";
									leiid=Helper.correctNull((String)rs.getString("PERAPP_LEGAL_ENTITYID"));
									leiissdate=Helper.correctNull((String)rs.getString("PERAPP_LEGAL_ISSUEDATE"));
									leiexpdate=Helper.correctNull((String)rs.getString("PERAPP_LEGAL_EXPIRYDATE"));
									//leiexpdate="24/06/2025";
									if(!leiexpdate.equalsIgnoreCase("")){
									String currdate = Helper.getCurrentDateTime();

									
									
									Date d1=new SimpleDateFormat("dd/MM/yyyy").parse(leiexpdate);  
					                Calendar cal = Calendar.getInstance();
					                cal.setTime(d1);
					                
					                Date d3=new SimpleDateFormat("dd/MM/yyyy").parse(currdate);  
					                Calendar cal2 = Calendar.getInstance();
					                cal.setTime(d3);

									//SimpleDateFormat sdformat = new SimpleDateFormat("yyyy-MM-dd");
									// Date d1 = sdformat.parse(leiexpdate);
								    // Date d3 = sdformat.parse(currdate);
								   //  System.out.println("The date 1 is: " + sdformat.format(d1));
								   //  System.out.println("The date 2 is: " + sdformat.format(d3));
								     if(d3.compareTo(d1) > 0) {
								    	 checkleiexpdate="Y";
								      }
								}
									if(leiid.equalsIgnoreCase("")||leiissdate.equalsIgnoreCase("")||leiexpdate.equalsIgnoreCase("")||checkleiexpdate.equalsIgnoreCase("Y"))
									{
										hshRecord.put("leierrormessage","Y");	
									}
									else
									{
										hshRecord.put("leierrormessage","N");	
									}
									
								}
								
							}
							
						}
				        }
				        }
				        if(rs != null)
						{
							rs.close();
						}
				        int lodgerightss=0;
				        int lodgerightstouser=0;
				        strQuery=SQLParser.getSqlQuery("checkLodgeRights");
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							lodgerightss=Integer.parseInt(Helper.correctNull((String)rs.getString("STAT_DATA_DESC")));
						}
						if(rs != null)
						{
							rs.close();
						}
						if(strusrid.equalsIgnoreCase(appholdercheck))
						{
						strQuery=SQLParser.getSqlQuery("checkUserclassforLodgeRights^"+appholdercheck);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							lodgerightstouser=Integer.parseInt(Helper.correctNull((String)rs.getString("USR_CLASS")));
						}
						if(lodgerightss<=lodgerightstouser)
						{
							hshRecord.put("lodgerightstousercheck","Y");
						}
						else
						{
							hshRecord.put("lodgerightstousercheck","N");
						}
						}
						 if(strSessionModuleType.equalsIgnoreCase("LAD"))
					        {
						if (rs != null)
							rs.close();
						strQuery = SQLParser.getSqlQuery("sel_perappintrocbsid^" + strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							hshRecord.put("PERAPP_INTROCBSID",Helper.correctNull((String)rs.getString("PERAPP_INTROCBSID")));
							hshRecord.put("PERAPP_FNAME",Helper.correctNull((String)rs.getString("PERAPP_FNAME")));
							hshRecord.put("JA_NAME",Helper.correctNull((String)rs.getString("JA_NAME")));
							hshRecord.put("JA_APPRAISERCBSID",Helper.correctNull((String)rs.getString("JA_APPRAISERCBSID")));
						}
					        }
						  if (strAppStatus.equalsIgnoreCase("op") && strSessionModuleType.equalsIgnoreCase("RET")) {
							  int countmsg= 0;
								if (rs != null) {
									rs.close();
								}
								strQuery = SQLParser.getSqlQuery("chkhousingloan^" + strAppno);
								rs = DBUtils.executeQuery(strQuery);
								if (rs.next()) {
									if (rs != null)
										rs.close();
									String dev2chk="";
									
									rs = DBUtils.executeLAPSQuery("securesel^" + strAppno);
									if (rs.next())
									{
									if(!("0").equalsIgnoreCase(Helper.correctNull(rs.getString("loan_noofinstallment"))))
									{
										String loan_servised =Helper.correctNull(rs.getString("loan_servised"));
										
										if (rs1 != null)
											rs1.close();
										rs1 = DBUtils.executeLAPSQuery("chkhousingloandeviation2^" + strAppno);
										if (!rs1.next())
										{
											 dev2chk="Y";
										}
										if((!loan_servised.equalsIgnoreCase("y"))&&dev2chk.equalsIgnoreCase("Y"))
										{
											 hshRecord.put("housingloanchkindevpag","Y");
										}
										if(dev2chk.equalsIgnoreCase(""))
										{
										if (rs1 != null)
											rs1.close();
										rs1 = DBUtils.executeLAPSQuery("chkhousingloandeviation^" + strAppno);
										if (!rs1.next())
										{
											++countmsg;
										}
										}
										
										
									}
								}
									
									
									
								}
								hshRecord.put("housingloanchk",String.valueOf(countmsg));
								
							}
						  if(rs != null)
							{
								rs.close();
							}
                           
						  
						  if(forPostcheck.equalsIgnoreCase("P") && strAppStatus.equalsIgnoreCase("op"))
					        {
							  if(rs1 != null)
								{
									rs1.close();
								}
							  rs1 = DBUtils.executeLAPSQuery("chkpostparameterchbbranch^" + strAppno);
								if (rs1.next())
								{
									String parentno=Helper.correctNull(rs1.getString("PS_OLD_APP_NO"));
									String chdslno=Helper.correctNull(rs1.getString("PS_APP_SNO"));
									String parentslno=Helper.correctNull(rs1.getString("PS_OLD_APP_SNO"));
							  if(strSessionModuleType.equalsIgnoreCase("RET"))
							  {
								  String parentappno="";
								  String parentcbsscode="";
								  String childcbsscode="";
								  if(rs != null)
									{
										rs.close();
									}
								  strQuery = SQLParser.getSqlQuery("selparentappnodet^" + strAppno);
									rs = DBUtils.executeQuery(strQuery);
									if (rs.next()) {
										parentappno=Helper.correctNull(rs.getString("app_parent_appno"));
									}
									//parent
									 if(rs != null)
										{
											rs.close();
										}
									 strQuery = SQLParser.getSqlQuery("chkLOANDISBBRANCHforPost^" + parentappno);
										rs = DBUtils.executeQuery(strQuery);
										if (rs.next()) {
											parentcbsscode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
										}
										//child
										if(rs != null)
										{
											rs.close();
										}
									 strQuery = SQLParser.getSqlQuery("chkLOANDISBBRANCHforPost^" + strAppno);
										rs = DBUtils.executeQuery(strQuery);
										if (rs.next()) {
											childcbsscode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
										}
										if(parentcbsscode.equals(childcbsscode))
										{
											hshRecord.put("CBSCHKFORPOST","Y");		
										}
							  }else if(strSessionModuleType.equalsIgnoreCase("CORP") || strSessionModuleType.equalsIgnoreCase("AGR"))
							  {
								  String parentcbsscode="";
								  String childcbsscode="";
								  
								  if(rs != null)
									{
										rs.close();
									}
								 strQuery = SQLParser.getSqlQuery("chkLOANDISBBRANCHforPostCA^" + parentno+"^"+parentslno);
									rs = DBUtils.executeQuery(strQuery);
									if (rs.next()) {
										parentcbsscode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
									}
									//child
									if(rs != null)
									{
										rs.close();
									}
								 strQuery = SQLParser.getSqlQuery("chkLOANDISBBRANCHforPostCA^" + strAppno+"^"+chdslno);
									rs = DBUtils.executeQuery(strQuery);
									if (rs.next()) {
										childcbsscode=Helper.correctNull(rs.getString("LOANDISBBRANCH"));
									}
									if(parentcbsscode.equals(childcbsscode))
									{
										hshRecord.put("CBSCHKFORPOST","Y");		
									}
								  
								  
							  }
								  
								}
					        }
				        
			
		}

		catch(Exception e)
		{
			throw new EJBException("Exception caught in getaction method===="+e.getMessage());
			
		}
		finally
		{
			try
			{
				if(rs != null)
				{
					rs.close();
				}

				if (rs1 != null) {
					rs1.close();
				}

				if (rs2 != null) {
					rs2.close();
				}

			} catch (Exception e1) {
				hshRecord.put("arrFlowpoint", arrFlowpoint);
				hshRecord.put("arrAction", arrAction);
				hshRecord.put("arrMaxclass", arrMaxclass);
				hshRecord.put("arrClassDesc", arrClassDesc);

				throw new EJBException(e1.getMessage());
			}
		}
		return hshRecord;
	}

	public HashMap getWorkflowUsers(HashMap hshValues)  {

		String strOrgCode = "";
		String strFunction = "";
		String strQuery = "";
		ResultSet rs = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrUsers = new ArrayList();
		try {

			strOrgCode = (String) hshValues.get("strOrgCode");
			strFunction = (String) hshValues.get("usr_func");
			/*
			 * if(strFunction.equals("All")) {
			 */
			strQuery = SQLParser.getSqlQuery("workflowusrhelp^'" + strOrgCode
					+ "'");
			/*
			 * } else {
			 * strQuery=SQLParser.getSqlQuery("workflowusrhelp^'"+strOrgCode+
			 * "' and usr_function='" + strFunction + "'"); }
			 */

			if (rs != null)
				rs.close();

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrUsers.add(rs.getString(1));
			}
			hshRecord.put("arrUsers", arrUsers);
			return hshRecord;
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}

	}

	/****/
	public HashMap getWorkUsers(HashMap hshValues)  {

		String strOrgCode = "";
		String strUsrClass = "";
		String strFunction = "";
		String strQuery = "";
		String strUsrDept = "";
		ResultSet rs = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrUsers = new ArrayList();
		ArrayList arrUserss = new ArrayList();
		try {

			strOrgCode = (String) hshValues.get("strOrgCode");
			strUsrClass = (String) hshValues.get("usr_class");
			strFunction = (String) hshValues.get("usr_func");
			strUsrDept = Helper.correctNull((String) hshValues.get("usr_dept"));
			if (strFunction.equals("All")) {
				if (strOrgCode.equalsIgnoreCase("001000000000000")
						&& !strUsrDept.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("workflowusrhelp^'"
							+ strOrgCode + "' and usr_class>" + strUsrClass
							+ " and usr_department='" + strUsrDept + "'");
				} else {
					strQuery = SQLParser.getSqlQuery("workflowusrhelp^'"
							+ strOrgCode + "' and usr_class>" + strUsrClass);
				}
			} else {
				if (strOrgCode.equalsIgnoreCase("001000000000000")
						&& !strUsrDept.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("workflowusrhelp^"
							+ strOrgCode + "and usr_class>" + strUsrClass
							+ "and usr_function='" + strFunction
							+ "' and usr_department'=" + strUsrDept + "'");
				} else {
					strQuery = SQLParser.getSqlQuery("workflowusrhelp^"
							+ strOrgCode + "and usr_class>" + strUsrClass
							+ "and usr_function='" + strFunction + "'");
				}
			}

			if (rs != null)
				rs.close();

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrUsers = new ArrayList();
				arrUsers.add(rs.getString(1));
				arrUsers.add(rs.getString(2));
				arrUserss.add(arrUsers);
			}
			hshRecord.put("arrUserss", arrUserss);
			return hshRecord;
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}

	}

	/****/
	public HashMap updateAction(HashMap hshValues)  {
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);
		String strAppno = "";
		String strPrdCode = "", strExcep = "$";
		ResultSet rs1 = null;
		String strAction = "";
		String strFromflowpoint = "";
		String strToflowpoint = "";
		String strFromuserid = "", strQuery = "", strPrdType = "";
		String strTouserid = "";// ,strOrgHead="";//,strExp="$";
		String strInwardno = "";
		ResultSet rs = null;
		ResultSet rs2 = null, rs4 = null;
		int intUpdateSize = 0;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		String strModuleType = "";
		String branch_code = "";
		String appstatus = "";
		String appstatus1 = "";
		String comapp_id = "";// smetype="",
		String str_sent_orgcode = "";
		// String strOrgSelect ="";
		String strOrgLevel = "";
		// java.sql.PreparedStatement ps=null;
		// Connection con1=null;
		// oracle.sql.CLOB clob=null;
		String strOrglevelnew="";
		String strOrgHeadnew="";
		String strappholder="";
		String strOrgcodenew="";
		String strExp = "$";
		String strModeOfOperation = "";
		String strDeptHead = "";
		String application_flag = "";
		String strNsdlRefnum = "";
		HashMap hshInPrinciple = null;
		String str_sentorglevelnew="";
		String strMessage = "", strMobileno = "", strRejReason = "", strName = "";
		try {
			StringBuilder sbAuditTrial = new StringBuilder();
			strModuleType = correctNull((String) hshValues
					.get("hidCategoryType"));
			if (strModuleType.equalsIgnoreCase("")
					|| strModuleType.equalsIgnoreCase("null"))
				strModuleType = correctNull((String) hshValues.get("cattype"));
			if (strModuleType.equalsIgnoreCase(""))
				strModuleType = correctNull((String) hshValues
						.get("sessionModuleType"));
			strPrdCode = (String) hshValues.get("prdcode");
			strAction = (String) hshValues.get("hidAction");
			strAppno = (String) hshValues.get("appno");
			strPrdType = (String) hshValues.get("prdtype");
			strFromflowpoint = correctNull((String) hshValues
					.get("mail_fromflowpoint"));
			strToflowpoint = (String) hshValues.get("mail_toflowpoint");
			strFromuserid = (String) hshValues.get("strUserId");
			strTouserid = (String) hshValues.get("hidmail_tousrid");
			strInwardno = correctNull((String) hshValues.get("inwardno"));
			branch_code = correctNull((String) hshValues.get("strOrgCode"));
			appstatus = correctNull((String) hshValues.get("appstatus"));
			// smetype=correctNull((String)hshValues.get("ssitype"));
			comapp_id = correctNull((String) hshValues.get("id"));
			str_sent_orgcode = correctNull((String) hshValues.get("org_code"));// Recieving
																				// user
																				// org
																				// code
			strOrgLevel = correctNull((String) hshValues.get("strOrgLevel"));// Sending
																				// User
																				// org_level
			/*
			 * strQuery=SQLParser.getSqlQuery("sel_cuscbsacdetails^"+strAppno);
			 * rs1=DBUtils.executeQuery(strQuery); if(!rs1.next()) {
			 * strExp=strExp+"You have not filled CBS Details page"; throw new
			 * Exception(strExp); }
			 * 
			 * if(rs1!=null) { rs1.close(); }
			 * strQuery=SQLParser.getSqlQuery("sel_mispagedetails^"+strAppno);
			 * rs1=DBUtils.executeQuery(strQuery); String strPriorityType="";
			 * if(rs1.next()) {
			 * strPriorityType=Helper.correctNull((String)rs1.getString
			 * ("app_sector")); } if(strPriorityType.equalsIgnoreCase("")) {
			 * strExp=strExp+"You have not filled MIS Details page"; throw new
			 * Exception(strExp); } if(rs1!=null) { rs1.close(); }
			 */

			/*
			 * Commented by Arsath for Performance Tuning Not used anywhere
			 * thats why removed
			 * strQuery=SQLParser.getSqlQuery("sel_cbsacdata^"+strAppno);
			 * rs1=DBUtils.executeQuery(strQuery); if(rs1.next()) {
			 * strModeOfOperation
			 * =Helper.correctNull((String)rs1.getString("mode_of_operation"));
			 * } if(!strModeOfOperation.equalsIgnoreCase("01")) { if(rs1!=null)
			 * { rs1.close(); }
			 * strQuery=SQLParser.getSqlQuery("getcoappguarantor^"+strAppno);
			 * rs1=DBUtils.executeQuery(strQuery); /if(!rs1.next()) {
			 * strExp=strExp+
			 * "Addition of minimum one Joint-Applicant/Co-Obligant/Guarantor is required"
			 * ; throw new Exception(strExp); } }
			 */
			if (rs1 != null) {
				rs1.close();
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues.get("comappid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidapplicantid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidBorrowerType"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues.get("comid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidapplicantid"));
			}

			if (strTouserid.equals("")) {
				strTouserid = strFromuserid;
			}
			String StrDigiLoanType = correctNull((String) hshValues.get("StrDigiLoanType"));
			if(StrDigiLoanType.equalsIgnoreCase(""))
			{
				strQuery = SQLParser.getSqlQuery("sel_appstatus^"+strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					StrDigiLoanType=Helper.correctNull((String)rs.getString("APP_LOANSUBTYPE_DIGI"));
				}
			}

			/*
			 * if(StrDigiLoanType.equalsIgnoreCase("PC")) { hshInPrinciple =
			 * this.msmeInPrinciple(hshValues); //strInprinciple =
			 * Helper.correctNull
			 * ((String)hshInPrinciple.get("InprincipleStatus")); }
			 */
			log.info("Action is ===" + strAction);
			log.info("appno  "
					+ Helper.correctNull((String) hshValues.get("appno")));
			log
					.info("sel_facility  "
							+ Helper.correctNull((String) hshValues
									.get("sel_facility")));
			log.info("strUserId  "
					+ Helper.correctNull((String) hshValues.get("strUserId")));
			if (strAction.equalsIgnoreCase("send")) {
				log.info("Before READY_FOR_SEND function");
				Connection conn = getConnection();
				CallableStatement cstmt = conn.prepareCall("{? = call READY_FOR_SEND(?,?,?)}");
				cstmt.registerOutParameter(1, Types.VARCHAR);
				cstmt.setString(2, Helper.correctNull((String) hshValues.get("appno")));
				cstmt.setString(3, Helper.correctNull((String) hshValues.get("sel_facility")));
				cstmt.setString(4, Helper.correctNull((String) hshValues.get("strUserId")));
				cstmt.executeUpdate();
				String returnVal = Helper.correctNull(cstmt.getString(1));
				log.info("After READY_FOR_SEND function : " + returnVal);
				conn.close();
				cstmt.close();
				if (!returnVal.equalsIgnoreCase("")) {
					throw new Exception(strExp + returnVal);
				}
			}
			if(strAction.equalsIgnoreCase("approve"))
			{
				String strAppno1=Helper.correctNull((String)hshValues.get("appno"));
				String strFacility_slno=Helper.correctNull((String)hshValues.get("sel_facility"));
					hshValues.put("appno", strAppno1);
					hshValues.put("facilitysno", strFacility_slno);
					if(!StrDigiLoanType.equalsIgnoreCase("PJ") && !StrDigiLoanType.equalsIgnoreCase("PR")&&!StrDigiLoanType.equalsIgnoreCase("PC")){
					HashMap returnval = getReadyForSAnctionUsingDBFunction(hshValues);
					String tempval = (String)returnval.get("returnVal");
					if(!tempval.equalsIgnoreCase("")){
						throw new Exception(strExp + tempval);
					}
			}
			}

			/*---------------   Fetching of organisation code of the Borrower (Target Master) --------------------- (20/11/2009)*/
			if (strPrdType.substring(0, 1).equalsIgnoreCase("p")
					|| strPrdType.substring(0, 1).equalsIgnoreCase("a")
					|| strPrdType.equalsIgnoreCase("T")) {
				rs = DBUtils.executeLAPSQuery("selorgwithborrower_retail^"
						+ comapp_id);
				if (rs.next()) {
					branch_code = correctNull((String) rs.getString("org_code"));
				}
			} else if (strPrdType.equalsIgnoreCase("C")) {
				rs = DBUtils
						.executeLAPSQuery("selorgwithborrower^" + comapp_id);
				if (rs.next()) {
					branch_code = correctNull((String) rs.getString("org_code"));
				}
			}
			if (rs != null)
				rs.close();
			/*---------------   End Fetching of organisation code of the Borrower (Target Master)--- By Kamal  ---------------------(20/11/2009)*/

			// --------------Start For Getting Application Status from
			// Database---------------
			rs = DBUtils.executeLAPSQuery("commworkflowsel2^" + strAppno);
			if (rs.next()) {
				appstatus1 = correctNull((String) rs.getString("app_status"));
				application_flag = Helper.correctNull((String) rs
						.getString("app_renew_flag"));
				strOrgcodenew=Helper.correctNull((String)rs.getString("APP_ORGCODE"));
				strOrglevelnew=Helper.correctNull((String)rs.getString("app_orglevel"));
			    strappholder=Helper.correctNull((String)rs.getString("APP_APPLNHOLDER"));
			}

			if (strModuleType.equalsIgnoreCase("RET")
					&& (strAction.equalsIgnoreCase("reject")
							|| strAction.equalsIgnoreCase("Approve") || strAction
							.equalsIgnoreCase("undo"))) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("selinwardappdata^" + strAppno);
				if (rs.next()) {
					strNsdlRefnum = correctNull(rs
							.getString("inward_nsdlrefno"));
				}
			}
			// --------------End For Getting Application Status from
			// Database---------------

			if (strAction != null
					&& (strAction.equalsIgnoreCase("send") || strAction
							.equalsIgnoreCase("Approve"))) {
				if (application_flag.equalsIgnoreCase("P")) {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "updapplicationsfinalsanction");
					arrValues.add(correctNull((String) hshValues
							.get("sel_finalsanction")));
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);

					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					hshQuery = new HashMap();
					arrValues = new ArrayList();
				}
			}
			// To check whether the flow points are available
			if (strAction.equalsIgnoreCase("send")
					|| strAction.equalsIgnoreCase("Reallocate")) {
				if (strToflowpoint.equalsIgnoreCase("")
						|| strFromflowpoint.equalsIgnoreCase("")) {
					throw new Exception("$ Flow Point Not found. Please again");
				}
			} else if (strAction.equalsIgnoreCase("Lodge")
					|| strAction.equalsIgnoreCase("approve")
					|| strAction.equalsIgnoreCase("reject")) {
				if (strFromflowpoint.equalsIgnoreCase("")) {
					throw new Exception("$ Flow Point Not found. Please again");
				}
			}

			String str_sentorglevel = "";
			String strOrgHead = "";

			if (rs != null)
				rs.close();
			strQuery = SQLParser
					.getSqlQuery("selorg_level^" + str_sent_orgcode);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				str_sentorglevel = correctNull((String) rs
						.getString("org_level"));
				strOrgHead = correctNull((String) rs.getString("org_head"));
			}
			if(rs!=null)
				rs.close();
			strQuery=SQLParser.getSqlQuery("selorg_level^"+strOrgcodenew);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				str_sentorglevelnew = correctNull((String)rs.getString("org_level"));
				strOrgHeadnew = correctNull((String)rs.getString("org_head"));
			}
			if (strAction != null && strAction.equalsIgnoreCase("send")) {

				hshQueryValues = new HashMap();
				// hshQuery = new HashMap();
				// arrValues = new ArrayList();
				// hshQuery.put("strQueryId","updinwardstatus");
				// arrValues.add("C");
				// arrValues.add(strInwardno);
				// hshQuery.put("arrValues",arrValues);
				// hshQueryValues.put("1",hshQuery);

				// mailMessage="Success";
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updmailbxchkstatus");
				arrValues.add("Y");
				arrValues.add(strTouserid);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				if (correctNull((String) hshValues.get("hidvettingreq"))
						.equalsIgnoreCase("TRUE")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_appvetting");
					arrValues.add(correctNull((String) hshValues
							.get("sel_datavetting")));
					arrValues.add(strFromuserid);
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "1");
					hshQueryValues.put("1", hshQuery);
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

				/*
				 *  CC to FGMO/RO/both from sending branch proposal to FGMO or
				 * CO
				 */
				String str_curorgcode = correctNull((String) hshValues
						.get("strOrgCode"));
				String strIsSaral = correctNull((String) hshValues
						.get("strIsSaral"));
				String strreg_head = "";
				String strzon_head = "";
				String strBranchtype = "";
				String str_temporgcode = "";
				HashMap hshQueryCC;
				ArrayList arrValuesCC;
				HashMap hshQueryValuesCC = new HashMap();
				if (rs != null)
					rs.close();

				/*
				 * CC to Head of the Organization while forwrding an application
				 * to that particular Organization Commented by Arsath for
				 * Performance Tuning Field included in previous query
				 * strQuery=SQLParser
				 * .getSqlQuery("selorg_level^"+str_sent_orgcode);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) { strOrgHead
				 * = correctNull((String)rs.getString("org_head")); }
				 */

				if (str_sentorglevel.equalsIgnoreCase("C")) {
					String strUsrDept = Helper.correctNull((String) hshValues
							.get("usr_department"));
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser
							.getSqlQuery("sel_CBSStaticDataPassingCode^20^"
									+ strUsrDept);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strDeptHead = Helper.correctNull((String) rs
								.getString("cbs_static_data_passing_code"));
					}
					if (strDeptHead.equalsIgnoreCase("")) {
						throw new Exception(
								"$ The Selected Department does not have Department Head ");
					}

					if (rs != null)
						rs.close();

					String strOrgScode = "";
					strQuery = SQLParser.getSqlQuery("workflowusersanlimit^"
							+ strDeptHead);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strOrgScode = Helper.correctNull(rs
								.getString("org_scode"));
					}

					hshQueryCC = new HashMap();
					arrValuesCC = new ArrayList();
					hshQueryCC.put("strQueryId", "commworkflowins");
					arrValuesCC.add(strAppno);
					arrValuesCC.add(strFromuserid);
					arrValuesCC.add(strDeptHead);
					arrValuesCC.add(strFromflowpoint);
					arrValuesCC.add(strToflowpoint);
					arrValuesCC.add("CC");

					arrValuesCC.add(correctNull((String) hshValues
							.get("strOrgShortCode")));
					if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("C"))
						arrValuesCC.add(correctNull((String) hshValues
								.get("strUserDepartment")));
					else if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("D"))
						arrValuesCC.add(correctNull((String) hshValues
								.get("strRLPFUser")));
					else
						arrValuesCC.add("");

					arrValuesCC.add(strOrgScode);
					arrValuesCC.add(strUsrDept);

					hshQueryCC.put("arrValues", arrValuesCC);
					hshQueryValuesCC.put("1", hshQueryCC);
				} else {

					if (rs != null)
						rs.close();

					String strOrgScode = "", strDept = "";
					strQuery = SQLParser.getSqlQuery("workflowusersanlimit^"
							+ strOrgHead);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strOrgScode = Helper.correctNull(rs
								.getString("org_scode"));
						strDept = Helper.correctNull(rs
								.getString("usr_rlpftype"));
					}

					hshQueryCC = new HashMap();
					arrValuesCC = new ArrayList();
					hshQueryCC.put("strQueryId", "commworkflowins");
					arrValuesCC.add(strAppno);
					arrValuesCC.add(strFromuserid);
					arrValuesCC.add(strOrgHead);
					arrValuesCC.add(strFromflowpoint);
					arrValuesCC.add(strToflowpoint);
					arrValuesCC.add("CC");

					arrValuesCC.add(correctNull((String) hshValues
							.get("strOrgShortCode")));
					if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("C"))
						arrValuesCC.add(correctNull((String) hshValues
								.get("strUserDepartment")));
					else if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("D"))
						arrValuesCC.add(correctNull((String) hshValues
								.get("strRLPFUser")));
					else
						arrValuesCC.add("");

					arrValuesCC.add(strOrgScode);
					if (str_sentorglevel.equalsIgnoreCase("D"))
						arrValuesCC.add(strDept);
					else
						arrValuesCC.add("");

					hshQueryCC.put("arrValues", arrValuesCC);
					hshQueryValuesCC.put("1", hshQueryCC);
				}
				hshQueryValuesCC.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValuesCC,
						"updateData");

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "commworkflowins");
				arrValues.add(strAppno);
				arrValues.add(strFromuserid);
				arrValues.add(strTouserid);
				arrValues.add(strFromflowpoint);
				arrValues.add(strToflowpoint);
				arrValues.add("C");

				if (rs != null)
					rs.close();

				String strOrgScode = "", strDept = "", strHeadUsrDept = "";
				strQuery = SQLParser.getSqlQuery("workflowusersanlimit^"
						+ strTouserid);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strOrgScode = Helper.correctNull(rs.getString("org_scode"));
					strDept = Helper.correctNull(rs.getString("usr_rlpftype"));
					strHeadUsrDept = Helper.correctNull(rs
							.getString("usr_department"));
				}

				arrValues.add(correctNull((String) hshValues
						.get("strOrgShortCode")));
				if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("C"))
					arrValues.add(correctNull((String) hshValues
							.get("strUserDepartment")));
				else if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("D"))
					arrValues.add(correctNull((String) hshValues
							.get("strRLPFUser")));
				else
					arrValues.add("");

				arrValues.add(strOrgScode);
				if (str_sentorglevel.equalsIgnoreCase("C"))
					arrValues.add(strHeadUsrDept);
				else if (str_sentorglevel.equalsIgnoreCase("D"))
					arrValues.add(strDept);
				else
					arrValues.add("");

				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				/*
				 * End
				 */
				/*
				 *  CC to FGMO/RO/both from sending branch proposal to FGMO or
				 * CO
				 */
				// check for org_level Zonal or Corporate
				/*
				 * if((strOrgLevel.equals("A")||(strIsSaral.equals("Y"))) &&
				 * (str_sentorglevel.equals("R") ||
				 * str_sentorglevel.equals("C"))) {
				 * if(str_sentorglevel.equals("C")) {
				 * strQuery=SQLParser.getSqlQuery
				 * ("selorg_level^"+str_curorgcode);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * strBranchtype =
				 * correctNull((String)rs.getString("org_branchtype")); }
				 * if(!strBranchtype.equals("LC")) {
				 * str_temporgcode=str_curorgcode.substring(0,9); if(rs!=null)
				 * rs.close();
				 * strQuery=SQLParser.getSqlQuery("selorg_level1^"+str_temporgcode
				 * +"^"+"D"); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * strreg_head = correctNull((String)rs.getString("org_head"));
				 * } if(rs!=null) rs.close(); hshQueryCC=new HashMap();
				 * arrValuesCC=new ArrayList();
				 * 
				 * hshQueryCC.put("strQueryId","commworkflowins");
				 * arrValuesCC.add(strAppno); arrValuesCC.add(strFromuserid);
				 * arrValuesCC.add(strreg_head);
				 * arrValuesCC.add(strFromflowpoint);
				 * arrValuesCC.add(strToflowpoint); arrValuesCC.add("CC");
				 * hshQueryCC.put("arrValues",arrValuesCC);
				 * hshQueryValuesCC.put("1",hshQueryCC);
				 * str_temporgcode=str_curorgcode.substring(0,6); if(rs!=null)
				 * rs.close();
				 * strQuery=SQLParser.getSqlQuery("selorg_level1^"+str_temporgcode
				 * +"^"+"R"); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * strzon_head = correctNull((String)rs.getString("org_head"));
				 * } if(rs!=null) rs.close(); hshQueryCC=new HashMap();
				 * arrValuesCC=new ArrayList();
				 * hshQueryCC.put("strQueryId","commworkflowins");
				 * arrValuesCC.add(strAppno); arrValuesCC.add(strFromuserid);
				 * arrValuesCC.add(strzon_head);
				 * arrValuesCC.add(strFromflowpoint);
				 * arrValuesCC.add(strToflowpoint); arrValuesCC.add("CC");
				 * hshQueryCC.put("arrValues",arrValuesCC);
				 * hshQueryValuesCC.put("size","2");
				 * hshQueryValuesCC.put("2",hshQueryCC);
				 * EJBInvoker.executeStateLess
				 * ("dataaccess",hshQueryValuesCC,"updateData"); }
				 * 
				 * } else if(str_sentorglevel.equals("R")) {
				 * str_temporgcode=str_curorgcode.substring(0,9); if(rs!=null)
				 * rs.close();
				 * strQuery=SQLParser.getSqlQuery("selorg_level1^"+str_temporgcode
				 * +"^"+"D"); rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * strreg_head = correctNull((String)rs.getString("org_head"));
				 * } if(rs!=null) rs.close();
				 * 
				 * hshQueryCC=new HashMap(); arrValuesCC=new ArrayList();
				 * hshQueryCC.put("strQueryId","commworkflowins");
				 * arrValuesCC.add(strAppno); arrValuesCC.add(strFromuserid);
				 * arrValuesCC.add(strreg_head);
				 * arrValuesCC.add(strFromflowpoint);
				 * arrValuesCC.add(strToflowpoint); arrValuesCC.add("CC");
				 * hshQueryCC.put("arrValues",arrValuesCC);
				 * hshQueryValuesCC.put("size","1");
				 * hshQueryValuesCC.put("1",hshQueryCC);
				 * EJBInvoker.executeStateLess
				 * ("dataaccess",hshQueryValuesCC,"updateData"); }
				 * 
				 * }
				 */
				/* ***************************************************************************************************** */
				// ------------------------------AuditTrial------------------------------
				String strflow_point = "";
				String strflow_workflow = "";
				// String strflow_function="";
				strQuery = SQLParser.getSqlQuery("selectflowpoint^" + strAppno
						+ "^" + strFromflowpoint);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					strflow_point = correctNull((String) rs
							.getString("prd_flowpoint"));
					strflow_workflow = correctNull((String) rs
							.getString("wrk_flowname"));
					// strflow_function=correctNull((String)rs.getString("prd_function"));
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selectusrid^" + strFromuserid);
				String str_usname = "";
				if (rs.next()) {
					str_usname = correctNull((String) rs.getString("username"));
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selectusrid^" + strTouserid);
				String str_tousname = "";
				if (rs.next()) {
					str_tousname = correctNull((String) rs
							.getString("username"));
				}
				if (rs != null)
					rs.close();

				sbAuditTrial
						.append("~Application Sent By=")
						.append(str_usname)
						.append("~Application Sent To=")
						.append(str_tousname)
						.append("~From FlowPoint=")
						.append(strflow_point)
						.append("~Flow Point Action=")
						.append(strflow_workflow)
						.append("~Action Type Requested=")
						.append(
								correctNull((String) hshValues.get("hidAction")));
				// -----------------------------------End--------------------------------

			}
			if (strAction.equalsIgnoreCase("approve")
					|| strAction.equalsIgnoreCase("reject")) {
				// assessmnet cost table entry
				if (strAction.equalsIgnoreCase("approve")) {
					HashMap hshresult2 = new HashMap();
					if (strModuleType.equalsIgnoreCase("RET")
							|| StrDigiLoanType.equalsIgnoreCase("PR")) {
						RetailAssessmentBean retailassess = new RetailAssessmentBean();
						hshresult2 = retailassess
								.getCommonAssessment(hshValues);
					} else if (strModuleType.trim().equalsIgnoreCase("CORP")) {
						hshValues.put("pageFrom", "RA1");
						FinancialBean finbean = new FinancialBean();
						hshresult2 = finbean.getDataRatio(hshValues);

						hshValues.put("pageFrom", "RA2");
						hshresult2 = finbean.getDataRatio(hshValues);

						hshValues.put("pageFrom", "RA3");
						hshresult2 = finbean.getDataRatio(hshValues);
					}
				}
				intUpdateSize = intUpdateSize + 1;
				// String strUserId =
				// correctNull((String)hshValues.get("strUserId"));

				double dblApprovedAmt = 0;

				hshQuery.put("strQueryId", "commworkflowupd");
				String mandatoryDocName = "", SanctioningAuthority = "", Sanction_Ref_Num = "";
				int mandatoryDocCount = 0;
				if (strAction.equalsIgnoreCase("approve")) {
					if (!(strModuleType.equalsIgnoreCase("RET") || StrDigiLoanType
							.equalsIgnoreCase("PR"))) {
						strQuery = SQLParser
								.getSqlQuery("sel_corporate_breifbackground^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							SanctioningAuthority = correctNull(rs
									.getString("com_sancauthority"));
							Sanction_Ref_Num = correctNull(rs
									.getString("com_sancrefno"));

							if (Sanction_Ref_Num.equalsIgnoreCase("")
									&& (SanctioningAuthority
											.equalsIgnoreCase("14")
											|| SanctioningAuthority
													.equalsIgnoreCase("15") || SanctioningAuthority
											.equalsIgnoreCase("16"))) {
								throw new Exception(
										"$ Please Enter Sanction Reference Number in Basic information Tab ");
							}
						}
					}
					// To check discretionary lending powers for appoving a
					// application

					hshValues.put("strProposalType", application_flag);
					dblApprovedAmt = (double) checkNewDiscretionaryPowers(hshValues);
					String strparentappno = "", strparentdigi = "";
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("sel_facilityrequired^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strparentappno = Helper.correctNull(rs
								.getString("app_parent_appno"));
						if (!strparentappno.equalsIgnoreCase("")) {
							if (rs1 != null) {
								rs1.close();
							}
							strQuery = SQLParser.getSqlQuery("sel_appstatus^"
									+ strparentappno);
							rs1 = DBUtils.executeQuery(strQuery);
							if (rs1.next()) {
								strparentdigi = Helper.correctNull(rs1
										.getString("APP_LOANSUBTYPE_DIGI"));
							}
						}
					}
					// To check all deviated entries are approved or rejected -
					// Added by Anitha.R
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("Sel_app_deviation^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {

						if ((!(Helper.correctNull(
								rs.getString("deviation_apprej"))
								.equalsIgnoreCase("A") || Helper.correctNull(
								rs.getString("deviation_apprej"))
								.equalsIgnoreCase("R")))
								&& !Helper.correctNull(
										rs.getString("deviation_type"))
										.equalsIgnoreCase("OD")
								&& !Helper.correctNull(
										rs.getString("deviation_type"))
										.equalsIgnoreCase("IRRN")) {
							if (!strparentdigi.equalsIgnoreCase("PR")) {
								throw new Exception(
										"$ Deviated Entries should be either approved or rejected ");
							}
						}
					}
					// Ends
					if (rs != null) {
						rs.close();
					}
					if (Helper.correctNull(
							(String) hshValues.get("hidCategoryType"))
							.equalsIgnoreCase("CORP")
							|| Helper.correctNull(
									(String) hshValues.get("hidCategoryType"))
									.equalsIgnoreCase("SME")) {
						rs = DBUtils.executeLAPSQuery("ramtolaps_report105^"
								+ strAppno);
						if (!rs.next()) {
							strExcep = strExcep
									+ "Risk rating is not done for this Application !...";
							throw new Exception(strExcep);
						}
					}

					if (rs1 != null)
						rs1.close();
					if (!strPrdCode.equalsIgnoreCase("")) {
						if (!Helper.correctNull(
								(String) hshValues.get("hidCategoryType"))
								.equalsIgnoreCase("CORP")
								&& !Helper.correctNull(
										(String) hshValues
												.get("hidCategoryType"))
										.equalsIgnoreCase("SRE")
								&& !Helper.correctNull(
										(String) hshValues
												.get("hidCategoryType"))
										.equalsIgnoreCase("STL")
								&& !Helper.correctNull(
										(String) hshValues
												.get("hidCategoryType"))
										.equalsIgnoreCase("ADC")) {
							rs1 = DBUtils.executeLAPSQuery("sel_mandatoryDoc^"
									+ strAppno + "^" + strPrdCode);
							while (rs1.next()) {
								mandatoryDocName = " " + mandatoryDocName
										+ rs1.getString("doc_desc") + ", ";
								mandatoryDocCount++;
							}
							if (mandatoryDocCount > 0) {
								strExcep = strExcep
										+ "Cannot be Approved!....  Following "
										+ mandatoryDocCount
										+ " Mandatory Documents are not submitted  :      ";
								strExcep = strExcep + mandatoryDocName;
								throw new Exception(strExcep);
							}
						}
					}
					String strUserID = Helper.correctNull((String) hshValues
							.get("strUserId"));
					String strAppUserID = "";
					strQuery = SQLParser.getSqlQuery("get_Appstatus^"
							+ strAppno);
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {
						strAppUserID = Helper.correctNull((String) rs2
								.getString("app_usrid"));
					}
					if (strAppUserID.equals(strUserID)) {
						strExcep = strExcep
								+ "You cannot Sanction the Proposal you created";
						throw new Exception(strExcep);
					}

				}
				hshValues.put("strApplicationType", application_flag);
				if (strModuleType.equals("DIGI")
						|| strModuleType.equals("CORP")) {
					if (StrDigiLoanType.equalsIgnoreCase("PR")
							|| StrDigiLoanType.equalsIgnoreCase("PC")) {
						hshValues.put("digiloan", "Y");
					}
				}
				String strReferenceno = getSanctionRefernceNumber(hshValues);
				if (strAction.equalsIgnoreCase("approve")) {
					arrValues.add("pa");

				} else {
					arrValues.add("pr");
				}

				// Modified by Pradeep
				arrValues.add((String) hshValues.get("strUserId"));
				arrValues.add((String) hshValues.get("txt_sanctioncomments"));

				arrValues.add((String) hshValues.get("strOrgShortCode"));
				arrValues.add((String) hshValues.get("strUserClass"));
				arrValues.add((String) hshValues.get("txt_reviewdate"));

				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdateSize), hshQuery);

				intUpdateSize = intUpdateSize + 1;
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "commworkflowins");
				arrValues.add(strAppno);
				arrValues.add(strFromuserid);
				arrValues.add(strFromuserid);
				arrValues.add(strFromflowpoint);
				if (strAction.equalsIgnoreCase("approve")) {
					arrValues.add("9");
				} else {
					arrValues.add("17");
				}
				arrValues.add("");

				arrValues.add(correctNull((String) hshValues
						.get("strOrgShortCode")));
				if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("C"))
					arrValues.add(correctNull((String) hshValues
							.get("strUserDepartment")));
				else if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("D"))
					arrValues.add(correctNull((String) hshValues
							.get("strRLPFUser")));
				else
					arrValues.add("");

				arrValues.add(correctNull((String) hshValues
						.get("strOrgShortCode")));
				if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("C"))
					arrValues.add(correctNull((String) hshValues
							.get("strUserDepartment")));
				else if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("D"))
					arrValues.add(correctNull((String) hshValues
							.get("strRLPFUser")));
				else
					arrValues.add("");

				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdateSize), hshQuery);
				// hshQueryValues.put("size","2");

				/*
				 * intUpdateSize = intUpdateSize + 1; hshQuery=new HashMap();
				 * arrValues=new ArrayList();
				 * hshQuery.put("strQueryId","commworkflowins");
				 * arrValues.add(strAppno); arrValues.add(strFromuserid);
				 * arrValues.add(strOrgHead);
				 * arrValues.add(hshValues.get("hidcurrflowpoint"));
				 * if(strAction.equalsIgnoreCase("approve")) {
				 * arrValues.add("9"); } else { arrValues.add("17"); }
				 * arrValues.add("CC"); hshQuery.put("arrValues",arrValues);
				 * hshQueryValues.put(Integer.toString(intUpdateSize),hshQuery);
				 */

				intUpdateSize = intUpdateSize + 1;
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updmailbxchkstatus");
				arrValues.add("Y");
				arrValues.add((String) hshValues.get("strUserId"));
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdateSize), hshQuery);

				if (rs2 != null)
					rs2.close();
				rs2 = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
						+ strAppno);
				if (rs2.next()) {

					if (!(Helper
							.correctNull(rs2.getString("com_sancauthority"))
							.equalsIgnoreCase("14")
							|| Helper.correctNull(
									rs2.getString("com_sancauthority"))
									.equalsIgnoreCase("15") || Helper
							.correctNull(rs2.getString("com_sancauthority"))
							.equalsIgnoreCase("16"))) {
						intUpdateSize = intUpdateSize + 1;
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "upd_com_delegationdate");
						arrValues.add(Helper.getCurrentDateTime());
						arrValues.add(strAppno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(Integer.toString(intUpdateSize),
								hshQuery);
					}
				} else {
					if (rs2 != null)
						rs2.close();

					rs2 = DBUtils.executeLAPSQuery("sel_date^" + strAppno);
					if (rs2.next()) {
						if (!(Helper.correctNull(
								rs2.getString("appraisal_sancauth"))
								.equalsIgnoreCase("14")
								|| Helper.correctNull(
										rs2.getString("appraisal_sancauth"))
										.equalsIgnoreCase("15") || Helper
								.correctNull(
										rs2.getString("appraisal_sancauth"))
								.equalsIgnoreCase("16"))) {
							intUpdateSize = intUpdateSize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery
									.put("strQueryId", "upd_com_delegationdate");
							arrValues.add(Helper.getCurrentDateTime());
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(Integer.toString(intUpdateSize),
									hshQuery);
						}

					}
				}

				// intUpdateSize = intUpdateSize + 1;
				// hshQuery=new HashMap();
				// arrValues=new ArrayList();
				// hshQuery.put("strQueryId","updcomworkflowappamt");
				// arrValues.add(jtn.format(dblApprovedAmt));
				// arrValues.add(strAppno);
				// hshQuery.put("arrValues",arrValues);
				// hshQueryValues.put(Integer.toString(intUpdateSize),hshQuery);
				if (strPrdType.trim().equalsIgnoreCase("C")) {
					intUpdateSize = intUpdateSize + 1;
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "updsanctionedfacilities");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put(Integer.toString(intUpdateSize),
							hshQuery);
				}

				/*
				 * Added by Jaleel for updating application table with legal
				 * compliance letter requirment
				 */

				intUpdateSize = intUpdateSize + 1;
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updapplicationslegalcomp");
				arrValues.add(correctNull((String) hshValues
						.get("sel_legalcomp")));
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(Integer.toString(intUpdateSize), hshQuery);

				hshQueryValues.put("size", Integer.toString(intUpdateSize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				if (!correctNull((String) hshValues.get("hiddatavetting"))
						.equalsIgnoreCase("Y")) {
					if (correctNull((String) hshValues.get("sel_datavetting"))
							.equalsIgnoreCase("Y")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "upd_appvetting");
						arrValues.add(correctNull((String) hshValues
								.get("sel_datavetting")));
						arrValues.add(strFromuserid);
						arrValues.add(strAppno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("size", "1");
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}

				if (strAction.equalsIgnoreCase("approve"))
					sbAuditTrial.append("~Application Approved");
				else
					sbAuditTrial.append("~Application Rejected");

				// MAHESH FOR UPDATING THE DATE IN THE SANCTIONING DATE IN THE
				// FACILITY TABLE
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				String qryCode = "";
				if (!(strModuleType.equalsIgnoreCase("RET")
						|| strModuleType.equalsIgnoreCase("LAD") || StrDigiLoanType
						.equalsIgnoreCase("PR"))) {
					hshQuery.put("strQueryId", "updfacprocessDate");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "1");
					hshQueryValues.put("1", hshQuery);
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
				String San_status = "", fac_sno = "";
				if (!(strModuleType.equalsIgnoreCase("RET")
						|| strModuleType.equalsIgnoreCase("LAD") || StrDigiLoanType
						.equalsIgnoreCase("PR"))) {

					if (strAction.equalsIgnoreCase("approve")) {
						strQuery = SQLParser
								.getSqlQuery("sel_facsanctionstatus^"
										+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							San_status = Helper.correctNull((String) rs
									.getString("facility_sancstatus"));
							fac_sno = Helper.correctNull((String) rs
									.getString("facility_sno"));
							if (San_status.equalsIgnoreCase("A")) {
								San_status = "pa";
							} else if (San_status.equalsIgnoreCase("R")) {
								San_status = "pr";
							}
							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "upd_facsanc_status");
							arrValues.add(San_status);
							arrValues.add(strAppno);
							arrValues.add(fac_sno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}

						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "copy_drawdown_history");
						arrValues.add(strAppno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("size", "1");
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");

					} else {
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "upd_fac_sancstatus");
						arrValues.add("pr");
						arrValues.add(strAppno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("size", "1");
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}
				// END MAHESH

				strQuery = SQLParser.getSqlQuery("sel_appstatus^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				String app_module = "";
				if (rs.next()) {
					app_module = Helper.correctNull((String) rs
							.getString("app_loantype"));
				}
				if (app_module.equals("A")) {
					HashMap HashMap1 = new HashMap();
					HashMap HashMap2 = new HashMap();
					ArrayList arraylist = new ArrayList();
					arraylist.add(strAppno);
					HashMap1.put("size", "1");
					HashMap2.put("strQueryId", "del_cropLoan");
					// arraylist.add("");
					HashMap2.put("arrValues", arraylist);
					HashMap1.put("1", HashMap2);
					EJBInvoker.executeStateLess("dataaccess", HashMap1,
							"updateData");

					strQuery = SQLParser.getSqlQuery("sel_corploanMaster");
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						String id = Helper.correctNull(rs
								.getString("corpLoan_id"));
						String per = Helper.correctNull(rs
								.getString("CORPLOAN_PERCENTAGE"));
						HashMap1 = new HashMap();
						HashMap2 = new HashMap();
						arraylist = new ArrayList();
						HashMap1.put("strQueryId", "insert_cropLoan");
						arraylist.add(strAppno);
						arraylist.add(id);
						arraylist.add(per);
						HashMap1.put("arrValues", arraylist);
						HashMap2.put("size", "1");
						HashMap2.put("1", HashMap1);
						EJBInvoker.executeStateLess("dataaccess", HashMap2,
								"updateData");
					}
				}

				/***
				 * Added by BhanuPrasath For Adding Eligibility into DataBase
				 */
				if (!application_flag.equalsIgnoreCase("P")) {
					HashMap hshchecklimit = new HashMap();
					hshValues.put("strPrdType", strPrdType);
					hshValues.put("prd_type", strPrdType);
					hshValues.put("appstatus1", appstatus1);
					hshValues.put("strAppno", strAppno);
					hshValues.put("comappid", comapp_id);
					hshValues.put("strPrdCode", strPrdCode);

					hshchecklimit = (HashMap) EJBInvoker.executeStateLess(
							"checkeligibility", hshValues, "getEligibility");
					ArrayList arrayListRow = new ArrayList();
					ArrayList arrayListCol = new ArrayList();
					arrayListRow = (ArrayList) hshchecklimit.get("arrRow");

					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					hshQuery.put("strQueryId", "del_eligibility_sanc_history");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					for (int k = 0; arrayListRow != null
							&& k < arrayListRow.size(); k++) {
						arrValues = new ArrayList();
						arrayListCol = (ArrayList) arrayListRow.get(k);
						if (arrayListCol != null && arrayListCol.size() > 0) {

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId",
									"insert_eligibility_sanc_history");
							arrValues.add(strAppno);
							arrValues.add(String.valueOf(arrayListCol.get(0)));
							arrValues.add(String.valueOf(arrayListCol.get(1)));
							arrValues.add(String.valueOf(arrayListCol.get(2)));
							arrValues.add(String.valueOf(arrayListCol.get(3)));

							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}
					if (!(strModuleType.equalsIgnoreCase("RET")
							|| strModuleType.equalsIgnoreCase("LAD") || StrDigiLoanType
							.equalsIgnoreCase("PR"))) {

						if (application_flag.equalsIgnoreCase("R")) {
							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId",
									"updcorpfinacleaccno_corpagri");
							arrValues.add("");
							arrValues.add("");
							arrValues.add("");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}

				}
				// Update inward table application status
				if (strInwardno.equalsIgnoreCase("")) {
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strInwardno = Helper.correctNull((String) rs
								.getString("app_inwardno"));
					}
				}
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updinwardappstatus");
				if (strAction.equalsIgnoreCase("approve")) {
					arrValues.add("pa");

				} else {
					arrValues.add("pr");
				}
				arrValues.add(strInwardno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");

				if (!strNsdlRefnum.equalsIgnoreCase("")) {
					String strDisbBranch = "";
					strRejReason = "";

					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("sel_cbsloandisbbranch^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strDisbBranch = Helper.correctNull(rs
								.getString("org_name"));
					}
					strRejReason = Helper.correctNull((String) hshValues
							.get("txt_sanctioncomments"));

					if (strRejReason.equalsIgnoreCase("")) {
						if (rs != null)
							rs.close();
						rs = DBUtils
								.executeLAPSQuery("sel_rejdesc^" + strAppno);
						while (rs.next()) {
							if ((strRejReason + Helper.correctNull(rs
									.getString("rej_desc"))).length() < 250)
								strRejReason = strRejReason
										+ Helper.correctNull(rs
												.getString("rej_desc")) + ",";
						}

						if (!strRejReason.equalsIgnoreCase(""))
							strRejReason = strRejReason.substring(0,
									strRejReason.length() - 1);
					}

					StringBuilder strOldAudit = new StringBuilder();

					if (rs != null)
						rs.close();
					strQuery = SQLParser.getSqlQuery("sel_nsdlremarks^"
							+ strNsdlRefnum);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strOldAudit.append("NSDL Status =").append(
								correctNull(rs.getString("nsdl_status")))
								.append("~Remarks= ").append(
										correctNull(rs
												.getString("nsdl_remarks")));
					}

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_modfiledate");
					if (strAction.equalsIgnoreCase("approve")) {
						arrValues.add("06");
						arrValues
								.add("Education Loan is sanctioned. You may Contact "
										+ strDisbBranch
										+ " Branch of Karnataka Bank");

					} else {
						arrValues.add("04");
						arrValues.add(strRejReason);
					}
					arrValues.add(strNsdlRefnum);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("2", hshQuery);
					hshQueryValues.put("size", "2");

					StringBuilder sbAuditTrial1 = new StringBuilder();
					sbAuditTrial1.append("NSDL Status = ").append(
							correctNull((String) arrValues.get(0))).append(
							"~Remarks= ").append(
							correctNull((String) arrValues.get(1)));

					AuditTrial.auditNewLog(hshValues, "432", strNsdlRefnum,
							sbAuditTrial1.toString(), strOldAudit.toString());
				}

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
				/***
				 * Ended by BhanuPrasath
				 */

				if (application_flag.equalsIgnoreCase("P")) {

					if (strAction.equalsIgnoreCase("approve")) {
						if (!(strModuleType.equalsIgnoreCase("RET") || StrDigiLoanType
								.equalsIgnoreCase("PR"))) {
							updatePostsanctionbkTables(hshValues);

							strQuery = SQLParser
									.getSqlQuery("seldistinctappno^" + strAppno);
							rs = DBUtils.executeQuery(strQuery);
							while (rs.next()) {
								HashMap hsh = new HashMap();
								hsh.put("hidapplicantid", comapp_id);
								hsh.put("hidAction", "freeze");
								hsh.put("appno", Helper.correctNull(rs
										.getString("appno")));
								SecurityMasterBean sm = new SecurityMasterBean();
								sm.getSecCollateralCoverage(hsh);

								hshQueryValues = new HashMap();
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								hshQuery.put("strQueryId",
										"update_renewFacility");
								arrValues.add(null);
								arrValues.add("0");
								arrValues.add(Helper.correctNull(rs
										.getString("appno")));
								arrValues.add(Helper.correctNull(rs
										.getString("ps_old_app_sno")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("size", "1");
								hshQueryValues.put("1", hshQuery);
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId",
									"updaterenewfacility_postsanc");
							arrValues.add("P");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						} else {

							if (rs4 != null)
								rs4.close();
							strQuery = SQLParser
									.getSqlQuery("sel_PS_oldaccnum^" + strAppno
											+ "^ ");
							rs4 = DBUtils.executeQuery(strQuery);
							if (rs4.next()) {
								String strMoratorium = "0", strPeriod = "0", strMoratoriumEx = "0", strPeriodEx = "0";
								if (rs != null)
									rs.close();
								rs = DBUtils.executeLAPSQuery("selloanterms^"
										+ strAppno);
								if (rs.next()) {
									strPeriod = Helper.correctInt(rs
											.getString("loan_reqterms"));
									strMoratorium = Helper.correctInt(rs
											.getString("loan_noofinstallment"));
								}

								if (rs != null)
									rs.close();
								rs = DBUtils.executeLAPSQuery("selloanterms^"
										+ Helper.correctNull(rs4
												.getString("PS_OLD_APP_NO")));
								if (rs.next()) {
									strPeriodEx = Helper.correctInt(rs
											.getString("loan_reqterms"));
									strMoratoriumEx = Helper.correctInt(rs
											.getString("loan_noofinstallment"));
								}

								if (Helper.correctNull(
										rs4.getString("ps_modify_terms"))
										.contains("MOEX")
										&& !(strPeriod.equals(strPeriodEx) && strMoratorium
												.equals(strMoratoriumEx))) {
									hshQueryValues = new HashMap();
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									hshQuery.put("strQueryId",
											"upd_app_post_sanction");
									arrValues.add("Y");
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put("1", hshQuery);
									hshQueryValues.put("size", "1");
									EJBInvoker.executeStateLess("dataaccess",
											hshQueryValues, "updateData");
								}
							}

							updatePostsanctionRetailbkTables(hshValues);

							strQuery = SQLParser
									.getSqlQuery("seldistinctappno^" + strAppno);
							rs = DBUtils.executeQuery(strQuery);
							if (rs.next()) {
								HashMap hsh = new HashMap();
								hsh.put("hidapplicantnewid",
										correctNull((String) hshValues
												.get("hidapplicantid")));
								hsh.put("hidapplicantid", comapp_id);
								hsh.put("hidAction", "freeze");
								hsh.put("appno", Helper.correctNull(rs
										.getString("appno")));
								BankAppFIBean bf = new BankAppFIBean();
								bf.getAttachedRetailSecurityDetails(hsh);

								hshQueryValues = new HashMap();
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								hshQuery.put("strQueryId",
										"renew_applicationflag");
								arrValues.add("");
								arrValues.add(Helper.correctNull(rs
										.getString("appno")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("size", "1");
								hshQueryValues.put("1", hshQuery);
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "renew_applicationflag");
							arrValues.add("P");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");

							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");

						}
					} else {
						if (!(strModuleType.equalsIgnoreCase("RET") || StrDigiLoanType
								.equalsIgnoreCase("PR"))) {

							strQuery = SQLParser
									.getSqlQuery("seldistinctappno^" + strAppno);
							rs = DBUtils.executeQuery(strQuery);
							while (rs.next()) {

								hshQueryValues = new HashMap();
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								hshQuery.put("strQueryId",
										"update_renewFacility");
								arrValues.add(null);
								arrValues.add("0");
								arrValues.add(Helper.correctNull(rs
										.getString("appno")));
								arrValues.add(Helper.correctNull(rs
										.getString("ps_old_app_sno")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("size", "1");
								hshQueryValues.put("1", hshQuery);
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId",
									"updaterenewfacility_postsanc");
							arrValues.add("P");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						} else {

							strQuery = SQLParser
									.getSqlQuery("seldistinctappno^" + strAppno);
							rs = DBUtils.executeQuery(strQuery);
							if (rs.next()) {

								hshQueryValues = new HashMap();
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								hshQuery.put("strQueryId",
										"renew_applicationflag");
								arrValues.add("");
								arrValues.add(Helper.correctNull(rs
										.getString("appno")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("size", "1");
								hshQueryValues.put("1", hshQuery);
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "renew_applicationflag");
							arrValues.add("P");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}
				}

				if (application_flag.equalsIgnoreCase("R")
						&& strAction.equalsIgnoreCase("reject")) {
					if (strModuleType.equalsIgnoreCase("RET")
							|| strModuleType.equalsIgnoreCase("LAD")
							|| StrDigiLoanType.equalsIgnoreCase("PR")) {
						strQuery = SQLParser
								.getSqlQuery("sel_facilityrequired^" + strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "renew_applicationflag");
							arrValues.add(null);
							arrValues.add(Helper.correctNull(rs
									.getString("app_parent_appno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}

					} else {
						strQuery = SQLParser.getSqlQuery("selrenewfac_details^"
								+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "update_renewFacility");
							arrValues.add(null);
							arrValues.add("0");
							arrValues.add(Helper.correctNull(rs
									.getString("facility_oldappno")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_oldappsno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}
				}

			}
			// ------------------ Start For Updating the Target
			// Master--------------------------------
			// if(strPrdType.substring(0,1).equalsIgnoreCase("p") ||
			// strPrdType.substring(0,1).equalsIgnoreCase("a") ||
			// strPrdType.substring(0,1).equalsIgnoreCase("C") ||
			// strPrdType.substring(0,1).equalsIgnoreCase("T"))
			if (!strModuleType.equalsIgnoreCase("SRE")
					&& !strModuleType.equalsIgnoreCase("STL")
					&& !strModuleType.equalsIgnoreCase("ADC")) {
				update_target_action(strAction, strAppno, strPrdType,
						branch_code, strModuleType, comapp_id, appstatus1);
			}
			// ------------------ End For Updating the Target Master By
			// Kamal-----------------------

			if (strAction.equalsIgnoreCase("send")
					|| strAction.equalsIgnoreCase("approve")) {
				// ====================== added for action
				// history=====================//

				if (Helper.correctNull((String) hshValues.get("mischeck"))
						.equalsIgnoreCase("Y")
						&& (appstatus.equalsIgnoreCase("Open/Pending") || appstatus
								.equalsIgnoreCase("op"))) {
					hshQuery = new HashMap();
					hshQueryValues = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					arrValues.add(Helper.correctNull((String) hshValues
							.get("strUserId")));
					arrValues.add(Helper.correctNull((String) hshValues
							.get("strOrgShortCode")));
					arrValues.add(Helper.correctNull((String) hshValues
							.get("strUserDepartment")));
					hshQuery.put("strQueryId", "ins_actionhistory");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
				// =========================end
				// ======================================//
			}
			if (strAction.equalsIgnoreCase("undo")) {

				if (!(strModuleType.equalsIgnoreCase("RET")
						|| strModuleType.equalsIgnoreCase("LAD") || StrDigiLoanType
						.equalsIgnoreCase("PR"))) {

					if (application_flag.equalsIgnoreCase("R")) {

						if (rs != null) {
							rs.close();
						}
						strQuery = SQLParser
								.getSqlQuery("sel_oldcbsaccdetails^" + strAppno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery
									.put("strQueryId", "updatecorpfinacleaccno");
							arrValues.add(Helper.correctNull(rs
									.getString("cbs_accountno")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_prefix")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_suffix")));
							arrValues.add(strAppno);
							arrValues.add(Helper.correctNull(rs
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}
				}
				if (appstatus.equalsIgnoreCase("Processed/Rejected")) {
					hshQueryValues = new HashMap();

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "commworkflowundo1");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery
							.put("strQueryId", "facilities_undo_facilitystatus");
					arrValues.add("");
					arrValues.add("");
					arrValues.add("op");
					arrValues.add("");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "2");
					hshQueryValues.put("2", hshQuery);
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					hshQuery.put("strQueryId", "del_eligibility_sanc_history");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
					// MAHESH FOR MAKING THE PROCESS DATE IN FACILITY TO NULL,
					// IF UNDO BUTTON IS CLICKED.
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					String qryCode = "";
					if (!(strModuleType.equalsIgnoreCase("RET")
							|| strModuleType.equalsIgnoreCase("LAD") || StrDigiLoanType
							.equalsIgnoreCase("PR"))) {
						hshQuery.put("strQueryId", "updfacprocessDateNull");
						arrValues.add(strAppno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("size", "1");
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
					// MAHESH ENDS
				} else {
					hshQueryValues = new HashMap();

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "commworkflowundo1");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "sanction_details_delete");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "2");
					hshQueryValues.put("2", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery
							.put("strQueryId", "facilities_undo_facilitystatus");
					arrValues.add("");
					arrValues.add("");
					arrValues.add("op");
					arrValues.add("");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "3");
					hshQueryValues.put("3", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "delloan_account_det");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "4");
					hshQueryValues.put("4", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "update_loanEMI");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "5");
					hshQueryValues.put("5", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "del_drawdown_history");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "6");
					hshQueryValues.put("6", hshQuery);

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");

					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					hshQuery.put("strQueryId", "del_eligibility_sanc_history");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

				/*
				 * For deleting entry in app_referencenumber table
				 */

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add("y");
				arrValues.add(strAppno);
				hshQuery.put("strQueryId", "updreferencenum");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);

				if (rs2 != null)
					rs2.close();
				rs2 = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
						+ strAppno);
				if (rs2.next()) {

					if (!(Helper
							.correctNull(rs2.getString("com_sancauthority"))
							.equalsIgnoreCase("14")
							|| Helper.correctNull(
									rs2.getString("com_sancauthority"))
									.equalsIgnoreCase("15") || Helper
							.correctNull(rs2.getString("com_sancauthority"))
							.equalsIgnoreCase("16"))) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQuery.put("strQueryId", "upd_com_delegationdate");
						arrValues.add("");
						arrValues.add(strAppno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("2", hshQuery);
						hshQueryValues.put("size", "2");
					}
				} else {
					if (rs2 != null)
						rs2.close();

					rs2 = DBUtils.executeLAPSQuery("sel_date^" + strAppno);
					if (rs2.next()) {
						if (!(Helper.correctNull(
								rs2.getString("appraisal_sancauth"))
								.equalsIgnoreCase("14")
								|| Helper.correctNull(
										rs2.getString("appraisal_sancauth"))
										.equalsIgnoreCase("15") || Helper
								.correctNull(
										rs2.getString("appraisal_sancauth"))
								.equalsIgnoreCase("16"))) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery
									.put("strQueryId", "upd_com_delegationdate");
							arrValues.add("");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("2", hshQuery);
							hshQueryValues.put("size", "2");
						}

					}
				}

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "update_mis_appdetails");
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("3", hshQuery);
				hshQueryValues.put("size", "3");

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				/*
				 * End
				 */

				sbAuditTrial
						.append("~Application Status changed to Open/Pending");

				/*
				 * Updating Undo Details
				 */
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(strFromuserid);
				arrValues.add("Y");
				arrValues.add(strAppno);
				hshQuery.put("strQueryId", "upd_undousrdet");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");

				if (strInwardno.equalsIgnoreCase("")) {
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strInwardno = Helper.correctNull((String) rs
								.getString("app_inwardno"));
					}
				}
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add("op");
				arrValues.add(strInwardno);
				hshQuery.put("strQueryId", "updinwardappstatus");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);
				hshQueryValues.put("size", "2");

				if (!strNsdlRefnum.equalsIgnoreCase("")) {
					StringBuilder strOldAudit = new StringBuilder();

					if (rs != null)
						rs.close();
					strQuery = SQLParser.getSqlQuery("sel_nsdlremarks^"
							+ strNsdlRefnum);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strOldAudit.append("NSDL Status =").append(
								correctNull(rs.getString("nsdl_status")))
								.append("~Remarks= ").append(
										correctNull(rs
												.getString("nsdl_remarks")));
					}

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_modfiledate");
					arrValues.add("02");
					arrValues.add("In Process");
					arrValues.add(strNsdlRefnum);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("3", hshQuery);
					hshQueryValues.put("size", "3");

					StringBuilder sbAuditTrial1 = new StringBuilder();
					sbAuditTrial1.append("NSDL Status = 02").append(
							"~Remarks=In Process ");

					AuditTrial.auditNewLog(hshValues, "432", strNsdlRefnum,
							sbAuditTrial1.toString(), strOldAudit.toString());
				}

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				if (application_flag.equalsIgnoreCase("P")) {
					if (appstatus.equalsIgnoreCase("Processed/Approved")
							|| appstatus.equalsIgnoreCase("pa")) {
						if (!(strModuleType.equalsIgnoreCase("RET") || StrDigiLoanType
								.equalsIgnoreCase("PR"))) {
							int intUpdatesize = 0;
							String strParameters = "";
							strQuery = SQLParser
									.getSqlQuery("sel_PS_oldaccnum^" + strAppno
											+ "^ ");
							rs = DBUtils.executeQuery(strQuery);
							while (rs.next()) {

								strParameters = Helper.correctNull(rs
										.getString("PS_MODIFY_TERMS"));

								strQuery = SQLParser
										.getSqlQuery("select_facilityCode^"
												+ strAppno
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("PS_APP_SNO")));
								rs1 = DBUtils.executeQuery(strQuery);
								if (rs1.next()) {
									if (!Helper.correctNull(
											rs1.getString("facility_group"))
											.equalsIgnoreCase("0")) {
										if (rs2 != null)
											rs2.close();
										strQuery = SQLParser
												.getSqlQuery("sel_post_sanction_applications^"
														+ strAppno
														+ "^ and ps_app_sno='"
														+ Helper
																.correctNull(rs1
																		.getString("facility_group"))
														+ "'");
										rs2 = DBUtils.executeQuery(strQuery);
										if (rs2.next()) {
											String strParam = "@"
													+ Helper
															.correctNull(rs2
																	.getString("ps_modify_terms"));
											if (!strParameters
													.contains("@MARGIN")
													&& !strParameters
															.contains("@MODSEC")
													&& !strParameters
															.contains("@SEC")) {
												if (strParam
														.contains("@MARGIN")
														|| strParam
																.contains("@MODSEC")
														|| strParam
																.contains("@SEC")) {
													strParameters = strParameters
															+ "@SEC";
												}
											}
											if (!strParameters
													.contains("@MARGIN")) {
												if (strParam.contains("@GUAR")) {
													strParameters = strParameters
															+ "@GUAR";
												}
											}
										}
									}
								}

								int count = 0;
								String arrTerms[] = strParameters.split("@");
								for (int i = 0; i < arrTerms.length; i++) {
									if (arrTerms[i].equalsIgnoreCase("DLA")
											|| arrTerms[i]
													.equalsIgnoreCase("DATEEX")
											|| arrTerms[i]
													.equalsIgnoreCase("REODWC")
											|| arrTerms[i]
													.equalsIgnoreCase("DLP")
											|| arrTerms[i]
													.equalsIgnoreCase("INLIM")
											|| arrTerms[i]
													.equalsIgnoreCase("MRI")) {
										count++;
									}
								}

								if (count == 0) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"upd_facilitystatus");
									arrValues.add("A");
									arrValues.add(strAppno);
									arrValues.add(rs.getString("PS_APP_SNO"));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								if (strParameters.contains("DLA")
										|| strParameters.contains("INLIM")
										|| strParameters.contains("DATEEX")
										|| strParameters.contains("REODWC")
										|| strParameters.contains("DLP")
										|| strParameters.contains("MRI")
										|| strParameters.contains("BRTOMCLR")
										|| strParameters.contains("MRS")
										|| strParameters.contains("MODGSS")
										|| strParameters.contains("MODBA")
										|| strParameters.contains("CGTMSE")) {

									strQuery = SQLParser
											.getSqlQuery("select_facilityCode_undo^"
													+ strAppno
													+ "^"
													+ Helper
															.correctNull(rs
																	.getString("PS_APP_SNO")));
									if (rs2 != null) {
										rs2.close();
									}
									rs2 = DBUtils.executeQuery(strQuery);
									if (rs2.next()) {
										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"updfacilitiespostsanc");
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_proposed")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_sancamt")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_tenor")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_months")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_interest")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_sancinterest")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_duedate")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_baserate")));
										arrValues.add(Helper.correctNull(rs2
												.getString("bplr")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_intsubtype")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_govtsponschem")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_schemetype")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_sponsagency")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_subsidytype")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_subsidyamunt")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_propbanktype")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_agency")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_leaderbank")));
										arrValues.add(Helper.correctNull(rs2
												.getString("fac_roitype")));
										arrValues.add(Helper.correctNull(rs2
												.getString("fac_roiscore")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("fac_processed_type")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("fac_premium_tenor")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("fac_premium_loan_amount")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("fac_ins_account_no")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("fac_ins_company_name")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("fac_ins_funded_company_name")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_perinstall")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("facility_reviewdate")));
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_SNO")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));
									}
								}
								// added for Banking Arrangement===//
								if (strParameters.contains("MODBA")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_BankingArrangment");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"upd_BankingArrangment_ps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_revBAConsortium_tl");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"upd_BAConsortium_tl_ps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_revBAConsortium");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"upd_BAConsortium_ps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

								}
								// ================end==========================//
								if (strParameters.contains("MIS")
										|| strParameters.contains("MISMOD")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_misappdetails");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappdetails table delete ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmisappdetailsps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappdetails table selectinsert ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_misappdisplayscreen");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappdisplayscreen table deletion ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmisappdisplayscreenps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappdisplayscreen table selectinsert ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_misappclassification");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappclassification table deletion ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmis_appclassificationps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappclassification table selectinsert ==="
													+ hshQuery);
								}
								if (strParameters.contains("CHBRANCH")
										|| strParameters.contains("MIS")
										|| strParameters.contains("MISMOD")
										|| strParameters.contains("CHDPOWER")
										|| strParameters
												.contains("CHSCHEMECODE")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"corpcbsdetailsdel");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updpercuscbsaccountdataps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("MRS")
										|| strParameters.contains("DLA")
										|| strParameters.contains("INLIM")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"delete_repayschedule_corp");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updtlrepayscheduleps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("DCCO")
										|| strParameters.contains("CHDCCO")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery
											.put("strQueryId", "del_management");
									arrValues.add("BreifDetaisTL");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updcomcommentsps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("SEC")
										|| strParameters.contains("MODSEC")
										|| strParameters.contains("MARGIN")
										|| strParameters.contains("GUAR")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_proposedsecuritydetails");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updappsecuritydetailsps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("LAD")
										|| strParameters.contains("SUBLIMIT")) {

									if (rs2 != null) {
										rs2.close();
									}
									strQuery = SQLParser
											.getSqlQuery("selectfacilitysublimitdel^"
													+ Helper
															.correctNull(rs
																	.getString("PS_OLD_APP_NO"))
													+ "^"
													+ Helper
															.correctNull(rs
																	.getString("PS_OLD_APP_SNO")));
									rs2 = DBUtils.executeQuery(strQuery);
									while (rs2.next()) {
										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"delfacilitysublimit");
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"del_misappdetails");
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										MISLogger
												.UpdateLogger("MISappdetails table delete ==="
														+ hshQuery);

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"del_misappdisplayscreen");
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										MISLogger
												.UpdateLogger("MISappdisplayscreen table delete ==="
														+ hshQuery);

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"del_misappclassification");
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										MISLogger
												.UpdateLogger("MISappclassification table delete ==="
														+ hshQuery);

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"corpcbsdetailsdel");
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"delete_repayschedule_corp");
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"del_management");
										arrValues.add("BreifDetaisTL");
										arrValues.add(Helper.correctNull(rs2
												.getString("facility_sno")));
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));
										if (!strParameters.contains("LAD")) {
											hshQuery = new HashMap();
											arrValues = new ArrayList();
											intUpdatesize = intUpdatesize + 1;
											hshQuery.put("strQueryId",
													"post_compromoterdel");
											arrValues
													.add(Helper
															.correctNull(rs2
																	.getString("facility_sno")));
											arrValues
													.add(Helper
															.correctNull(rs
																	.getString("PS_OLD_APP_NO")));
											hshQuery
													.put("arrValues", arrValues);
											hshQueryValues.put(String
													.valueOf(intUpdatesize),
													hshQuery);
											hshQueryValues.put("size", String
													.valueOf(intUpdatesize));

											hshQuery = new HashMap();
											arrValues = new ArrayList();
											intUpdatesize = intUpdatesize + 1;
											hshQuery
													.put("strQueryId",
															"del_proposedsecuritydetails");
											arrValues
													.add(Helper
															.correctNull(rs
																	.getString("PS_OLD_APP_NO")));
											arrValues
													.add(Helper
															.correctNull(rs2
																	.getString("facility_sno")));
											hshQuery
													.put("arrValues", arrValues);
											hshQueryValues.put(String
													.valueOf(intUpdatesize),
													hshQuery);
											hshQueryValues.put("size", String
													.valueOf(intUpdatesize));
										}
									}

								}
								if (strParameters.contains("GUAR")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_com_companydetails_ps");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updcom_companydetails_undo");
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								if (strParameters.contains("MRI")
										|| strParameters.contains("BRTOMCLR")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_facility_mclrspread");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmclrspreadps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_facilitysno_mclrspreadvalue");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmclrspreadvalueps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

								}
								// added for cgtmse
								if (strParameters.contains("CGTMSE")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updcgtmsedetailsps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_cgtmse_details_ps");
									// arrValues.add(Helper.correctNull(rs.getString("PS_OLD_APP_NO")));
									// arrValues.add(Helper.correctNull(rs.getString("PS_OLD_APP_SNO")));
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_APP_SNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								intUpdatesize = intUpdatesize + 1;
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								hshQuery.put("strQueryId",
										"update_renewFacility");
								arrValues.add("P");
								arrValues.add("0");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								arrValues.add(Helper.correctNull(rs
										.getString("ps_old_app_sno")));
								hshQueryValues.put(String
										.valueOf(intUpdatesize), hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intUpdatesize));
								hshQuery.put("arrValues", arrValues);
							}

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intUpdatesize = intUpdatesize + 1;
							hshQuery.put("strQueryId",
									"updaterenewfacility_postsanc");
							arrValues.add("");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intUpdatesize),
									hshQuery);
							hshQueryValues.put("size", String
									.valueOf(intUpdatesize));

							// Government Sponser Scheme Changes
							if (rs2 != null) {
								rs2.close();
							}
							String strExAppno = "";
							rs2 = DBUtils.executeLAPSQuery("sel_modgssappno^"
									+ strAppno);
							while (rs2.next()) {
								if (strExAppno.equalsIgnoreCase("")
										|| !strExAppno
												.equalsIgnoreCase(Helper
														.correctNull(rs2
																.getString("PS_OLD_APP_NO")))) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId", "delinwardreg");
									arrValues.add(Helper.correctNull(rs2
											.getString("APP_INWARDNO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"ins_appinwardreg_ps_undo");
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs2
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								strExAppno = Helper.correctNull(rs2
										.getString("PS_OLD_APP_NO"));

							}

							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						} else {
							int intUpdatesize = 0;
							String strParentInward = "";
							hshQueryValues = new HashMap();
							if (rs != null)
								rs.close();
							strQuery = SQLParser
									.getSqlQuery("sel_PS_oldaccnum^" + strAppno
											+ "^ ");
							rs = DBUtils.executeQuery(strQuery);
							if (rs.next()) {

								String strParameters = Helper.correctNull(rs
										.getString("PS_MODIFY_TERMS"));
								if (rs1 != null)
									rs1.close();
								rs1 = DBUtils.executeLAPSQuery("comfunsel1^"
										+ Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
								if (rs1.next()) {
									strParentInward = Helper.correctNull(rs1
											.getString("app_inwardno"));
								}

								if (strParameters.contains("DLA")
										|| strParameters.contains("SLILA")
										|| strParameters.contains("DLP")
										|| strParameters.contains("MRI")
										|| strParameters.contains("MODGSS")
										|| strParameters.contains("MOEX")
										|| strParameters.contains("CGTMSE")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"delloandetails_postsanc");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"insloandetailsbk_postsanc_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									strQuery = SQLParser
											.getSqlQuery("selectloandetails_purposeofloan_undo^"
													+ strAppno);
									if (rs4 != null) {
										rs4.close();
									}
									rs4 = DBUtils.executeQuery(strQuery);
									if (rs4.next()) {
										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery
												.put("strQueryId",
														"updateloandetails_purposeofloan_undo");
										arrValues
												.add(Helper
														.correctNull(rs4
																.getString("loan_purposeoflo")));
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));

										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery
												.put("strQueryId",
														"updappraisalsanction_postsanction");
										arrValues.add(Helper.correctNull(rs4
												.getString("loan_recmdamt")));
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));
									}
								}

								if (strParameters.contains("MOEX")
										|| strParameters.contains("MRS")) {

									strQuery = SQLParser
											.getSqlQuery("sel_loansecure_ps^"
													+ strAppno);
									if (rs2 != null) {
										rs2.close();
									}
									rs2 = DBUtils.executeQuery(strQuery);
									if (rs2.next()) {
										hshQuery = new HashMap();
										arrValues = new ArrayList();
										intUpdatesize = intUpdatesize + 1;
										hshQuery.put("strQueryId",
												"upd_per_loan_secure");
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("loan_noofinstallment")));
										arrValues.add(Helper.correctNull(rs2
												.getString("loan_servised")));
										arrValues
												.add(Helper
														.correctNull(rs2
																.getString("loan_periodicity")));
										arrValues.add(Helper.correctNull(rs
												.getString("PS_OLD_APP_NO")));
										hshQuery.put("arrValues", arrValues);
										hshQueryValues.put(String
												.valueOf(intUpdatesize),
												hshQuery);
										hshQueryValues.put("size", String
												.valueOf(intUpdatesize));
									}

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"upd_app_post_sanction");
									arrValues.add(null);
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								if (strParameters.contains("MIS")
										|| strParameters.contains("MISMOD")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_misappdetails");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappdetails table delete ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmisappdetailsps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("MISappdetails table selectinsert ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_misappdisplayscreen");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("misappdisplayscreen table delete ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmisappdisplayscreenps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("misappdisplayscreen table selectinsert ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_misappclassification");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("misappclassification table delete ==="
													+ hshQuery);

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updmis_appclassificationps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									MISLogger
											.UpdateLogger("misappclassification table selectinsert ==="
													+ hshQuery);
								}
								if (strParameters.contains("CHBRANCH")
										|| strParameters.contains("MIS")
										|| strParameters.contains("MISMOD")
										|| strParameters.contains("CHDPOWER")
										|| strParameters
												.contains("CHSCHEMECODE")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"corpcbsdetailsdel");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updpercuscbsaccountdataps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("MRS")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"delete_repayschedule_corp");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updtlrepayscheduleps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("SEC")
										|| strParameters.contains("MODSEC")
										|| strParameters.contains("GUAR")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_proposedsecuritydetails");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updappsecuritydetailsps_undo");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								if (strParameters.contains("GUAR")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"delper_demographics_postsanction");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updper_demographics_postsanction");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery
											.put("strQueryId",
													"del_com_groupconcerns_postsanction");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery
											.put("strQueryId",
													"updcom_groupconcerns_postsanction");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}
								if (strParameters.contains("MODGSS")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId", "delinwardreg");
									arrValues.add(strParentInward);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"ins_appinwardreg_ps_undo");
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId", "del_pmay_desc");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"undo_pmay_houseloan_details_ps");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_per_house_proposed_asset1");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"undo_per_house_proposed_asset_ps");
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

								}
								if (strParameters.contains("MODBA")) {
									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_BankingArrangment_ps");
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_revBAConsortium_tl_ps");
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_BAConsortium_ps");
									arrValues.add(strAppno);
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

								}
								// added for cgtmse
								if (strParameters.contains("CGTMSE")) {

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"updcgtmsedetailsps_undo");
									arrValues.add("1");
									arrValues.add(strAppno);
									arrValues.add(Helper.correctNull(rs
											.getString("PS_OLD_APP_NO")));
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));

									hshQuery = new HashMap();
									arrValues = new ArrayList();
									intUpdatesize = intUpdatesize + 1;
									hshQuery.put("strQueryId",
											"del_cgtmse_details_ps");
									arrValues.add(strAppno);
									arrValues.add("1");
									hshQuery.put("arrValues", arrValues);
									hshQueryValues.put(String
											.valueOf(intUpdatesize), hshQuery);
									hshQueryValues.put("size", String
											.valueOf(intUpdatesize));
								}

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intUpdatesize = intUpdatesize + 1;
								hshQuery.put("strQueryId",
										"renew_applicationflag");
								arrValues.add("P");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("size", String
										.valueOf(intUpdatesize));
								hshQueryValues.put(String
										.valueOf(intUpdatesize), hshQuery);

							}

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intUpdatesize = intUpdatesize + 1;
							hshQuery.put("strQueryId", "renew_applicationflag");
							arrValues.add("");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intUpdatesize),
									hshQuery);
							hshQueryValues.put("size", String
									.valueOf(intUpdatesize));

							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");

							int intQsize = 0;

							hshQueryValues = new HashMap();
							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delloandetailsbk_postsanc");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delapp_securitydetails_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId", "delmis_appdetails_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delmis_appdisplayscreen_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delmis_appclassification_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delper_cuscbsaccountdata_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery
									.put("strQueryId", "deltl_repayschedule_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delcom_groupconcerns_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery
									.put("strQueryId", "delper_demographics_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId",
									"delcom_companydetails_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery
									.put("strQueryId", "delete_appinwardreg_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							intQsize = intQsize + 1;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							hshQuery.put("strQueryId", "del_loansecure_ps");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);

							hshQueryValues
									.put("size", String.valueOf(intQsize));
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					} else if (appstatus.equalsIgnoreCase("Processed/Rejected")
							|| appstatus.equalsIgnoreCase("pr")) {
						if (!(strModuleType.equalsIgnoreCase("RET")
								|| strModuleType.equalsIgnoreCase("LAD") || StrDigiLoanType
								.equalsIgnoreCase("PR"))) {
							int intUpdatesize = 0;
							strQuery = SQLParser
									.getSqlQuery("sel_PS_oldaccnum^" + strAppno
											+ "^ ");
							rs = DBUtils.executeQuery(strQuery);
							while (rs.next()) {
								intUpdatesize = intUpdatesize + 1;
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								hshQuery.put("strQueryId",
										"update_renewFacility");
								arrValues.add("P");
								arrValues.add("0");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								arrValues.add(Helper.correctNull(rs
										.getString("ps_old_app_sno")));
								hshQueryValues.put(String
										.valueOf(intUpdatesize), hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intUpdatesize));
								hshQuery.put("arrValues", arrValues);
							}

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intUpdatesize = intUpdatesize + 1;
							hshQuery.put("strQueryId",
									"updaterenewfacility_postsanc");
							arrValues.add("");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intUpdatesize),
									hshQuery);
							hshQueryValues.put("size", String
									.valueOf(intUpdatesize));

							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						} else {
							int intUpdatesize = 0;
							hshQueryValues = new HashMap();
							if (rs != null)
								rs.close();
							strQuery = SQLParser
									.getSqlQuery("sel_PS_oldaccnum^" + strAppno
											+ "^ ");
							rs = DBUtils.executeQuery(strQuery);
							if (rs.next()) {
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intUpdatesize = intUpdatesize + 1;
								hshQuery.put("strQueryId",
										"renew_applicationflag");
								arrValues.add("P");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put("size", String
										.valueOf(intUpdatesize));
								hshQueryValues.put(String
										.valueOf(intUpdatesize), hshQuery);

							}

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intUpdatesize = intUpdatesize + 1;
							hshQuery.put("strQueryId", "renew_applicationflag");
							arrValues.add("");
							arrValues.add(strAppno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intUpdatesize),
									hshQuery);
							hshQueryValues.put("size", String
									.valueOf(intUpdatesize));

							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");

						}
					}

				}

				if (application_flag.equalsIgnoreCase("R")
						&& (appstatus.equalsIgnoreCase("Processed/Rejected") || appstatus
								.equalsIgnoreCase("pr"))) {
					if (strModuleType.equalsIgnoreCase("RET")
							|| strModuleType.equalsIgnoreCase("LAD")
							|| StrDigiLoanType.equalsIgnoreCase("PR")) {
						strQuery = SQLParser
								.getSqlQuery("sel_facilityrequired^" + strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {

							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "renew_applicationflag");
							arrValues.add("Y");
							arrValues.add(Helper.correctNull(rs
									.getString("app_parent_appno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}

					} else {
						strQuery = SQLParser.getSqlQuery("selrenewfac_details^"
								+ strAppno);
						rs = DBUtils.executeQuery(strQuery);
						while (rs.next()) {
							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "update_renewFacility");
							arrValues.add("Y");
							arrValues.add("0");
							arrValues.add(Helper.correctNull(rs
									.getString("facility_oldappno")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_oldappsno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("size", "1");
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}
				}

				if (strModuleType.equalsIgnoreCase("RET")
						|| strModuleType.equalsIgnoreCase("LAD")
						|| StrDigiLoanType.equalsIgnoreCase("PR")) {
					hshQueryValues = new HashMap();

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_retailapplicantid");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "1");
					hshQueryValues.put("1", hshQuery);

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else {
					hshQueryValues = new HashMap();

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_corpapplicantid");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_corpcoapp_applicantid");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "2");
					hshQueryValues.put("2", hshQuery);

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

			}

			if (strAction != null && (strAction.equalsIgnoreCase("reallocate"))) {
				// To insert into mail box

				hshQuery.put("strQueryId", "commworkflowins");
				arrValues.add(strAppno);
				arrValues.add(strFromuserid);
				arrValues.add(strTouserid);
				arrValues.add(strFromflowpoint);
				arrValues.add(strToflowpoint);
				arrValues.add("C");

				if (rs != null)
					rs.close();

				String strOrgScode = "", strDept = "", strHeadUsrDept = "";
				strQuery = SQLParser.getSqlQuery("workflowusersanlimit^"
						+ strTouserid);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strOrgScode = Helper.correctNull(rs.getString("org_scode"));
					strDept = Helper.correctNull(rs.getString("usr_rlpftype"));
					strHeadUsrDept = Helper.correctNull(rs
							.getString("usr_department"));
				}

				arrValues.add(correctNull((String) hshValues
						.get("strOrgShortCode")));
				if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("C"))
					arrValues.add(correctNull((String) hshValues
							.get("strUserDepartment")));
				else if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("D"))
					arrValues.add(correctNull((String) hshValues
							.get("strRLPFUser")));
				else
					arrValues.add("");

				arrValues.add(strOrgScode);
				if (str_sentorglevel.equalsIgnoreCase("C"))
					arrValues.add(strHeadUsrDept);
				else if (str_sentorglevel.equalsIgnoreCase("D"))
					arrValues.add(strDept);
				else
					arrValues.add("");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);

				// To update the mail check status and the application holder

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updmailbxchkstatus");
				arrValues.add("Y");
				arrValues.add(strTouserid);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "2");
				hshQueryValues.put("2", hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				// ------------------------------AuditTrial for
				// Reallocate------------------------------
				String strflow_point = "";
				String strflow_workflow = "";
				strQuery = SQLParser.getSqlQuery("selectflowpoint^" + strAppno
						+ "^" + strFromflowpoint);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					strflow_point = correctNull((String) rs
							.getString("prd_flowpoint"));
					strflow_workflow = correctNull((String) rs
							.getString("wrk_flowname"));
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selectusrid^" + strFromuserid);
				String str_usname = "";
				if (rs.next()) {
					str_usname = correctNull((String) rs.getString("username"));
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selectusrid^" + strTouserid);
				String str_tousname = "";
				if (rs.next()) {
					str_tousname = correctNull((String) rs
							.getString("username"));
				}
				if (rs != null)
					rs.close();

				sbAuditTrial
						.append("~Application Sent By=")
						.append(str_usname)
						.append("~Application Sent To=")
						.append(str_tousname)
						.append("~From FlowPoint=")
						.append(strflow_point)
						.append("~Flow Point Action=")
						.append(strflow_workflow)
						.append("~Action Type Requested=")
						.append(
								correctNull((String) hshValues.get("hidAction")));
				// -----------------------------------End--------------------------------

			}
			if (strAction != null && strAction.equalsIgnoreCase("Lodge")) {
				hshQueryValues = new HashMap();

				if (str_sentorglevel.equalsIgnoreCase("C")) {
					String strUsrDept = Helper.correctNull((String) hshValues
							.get("strUserDepartment"));
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser
							.getSqlQuery("sel_CBSStaticDataPassingCode^20^"
									+ strUsrDept);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strDeptHead = Helper.correctNull((String) rs
								.getString("cbs_static_data_passing_code"));
					}
					if (strDeptHead.equalsIgnoreCase("")) {
						throw new Exception(
								"$ The Selected Department does not have Department Head ");
					}

					if (rs != null)
						rs.close();

					String strOrgScode = "", strHeadUsrDept = "";
					strQuery = SQLParser.getSqlQuery("workflowusersanlimit^"
							+ strDeptHead);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strOrgScode = Helper.correctNull(rs
								.getString("org_scode"));
						strHeadUsrDept = Helper.correctNull(rs
								.getString("usr_department"));
					}

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "commworkflowins");
					arrValues.add(strAppno);
					arrValues.add(strFromuserid);
					arrValues.add(strDeptHead);
					arrValues.add(strFromflowpoint);
					arrValues.add(strFromflowpoint);
					arrValues.add("C");
					arrValues.add(correctNull((String) hshValues
							.get("strOrgShortCode")));
					if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("C"))
						arrValues.add(correctNull((String) hshValues
								.get("strUserDepartment")));
					else if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("D"))
						arrValues.add(correctNull((String) hshValues
								.get("strRLPFUser")));
					else
						arrValues.add("");

					arrValues.add(strOrgScode);
					arrValues.add(strHeadUsrDept);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
				} else {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "commworkflowins");
					arrValues.add(strAppno);
					arrValues.add(strFromuserid);
					arrValues.add(strOrgHead);
					arrValues.add(strFromflowpoint);
					arrValues.add(strFromflowpoint);
					arrValues.add("C");

					if (rs != null)
						rs.close();

					String strOrgScode = "", strDept = "", strHeadUsrDept = "";
					strQuery = SQLParser.getSqlQuery("workflowusersanlimit^"
							+ strOrgHead);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						strOrgScode = Helper.correctNull(rs
								.getString("org_scode"));
						strDept = Helper.correctNull(rs
								.getString("usr_rlpftype"));
					}

					arrValues.add(correctNull((String) hshValues
							.get("strOrgShortCode")));
					if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("C"))
						arrValues.add(correctNull((String) hshValues
								.get("strUserDepartment")));
					else if (correctNull((String) hshValues.get("strOrgLevel"))
							.equalsIgnoreCase("D"))
						arrValues.add(correctNull((String) hshValues
								.get("strRLPFUser")));
					else
						arrValues.add("");

					arrValues.add(strOrgScode);
					if (str_sentorglevel.equalsIgnoreCase("D"))
						arrValues.add(strDept);
					else
						arrValues.add("");

					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
				}

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updproposalstatus");
				arrValues.add("ol");
				if (str_sentorglevel.equalsIgnoreCase("C")) {
					arrValues.add(strDeptHead);
				} else {
					arrValues.add(strOrgHead);
				}
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updlodgedrefno");
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txt_lodgedrefno")));
				arrValues.add(Helper.correctNull((String) hshValues
						.get("strUserId")));
				arrValues.add(Helper.correctNull((String) hshValues
						.get("strOrgShortCode")));
				arrValues.add(Helper.correctNull((String) hshValues
						.get("strUserDepartment")));
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("3", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_fac_sancstatus");
				arrValues.add("ol");
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("4", hshQuery);

				hshQueryValues.put("size", "4");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
			if (strAction != null && strAction.equalsIgnoreCase("Dislodge")) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upddelodgeddate");
				arrValues.add("op");
				arrValues.add(Helper.correctNull((String) hshValues
						.get("strUserId")));
				arrValues.add(Helper.correctNull((String) hshValues
						.get("strOrgShortCode")));
				arrValues.add(Helper.correctNull((String) hshValues
						.get("strUserDepartment")));
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_fac_sancstatus");
				arrValues.add("op");
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);

				/*
				 * strQuery=SQLParser.getSqlQuery("commworkflowsel6^"+strAppno+"^"
				 * +strAppno); if(rs!=null) rs.close();
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * strTouserid
				 * =Helper.correctNull(rs.getString("mail_fromusrid")) ; }
				 * 
				 * hshQuery=new HashMap(); arrValues=new ArrayList();
				 * hshQuery.put("strQueryId","commworkflowins");
				 * arrValues.add(strAppno); arrValues.add(strFromuserid);
				 * arrValues.add(strTouserid); arrValues.add(strFromflowpoint);
				 * arrValues.add(strFromflowpoint); arrValues.add("C");
				 * hshQuery.put("arrValues",arrValues);
				 * hshQueryValues.put("2",hshQuery);
				 */

				hshQueryValues.put("size", "2");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
			if (strAction != null && strAction.equalsIgnoreCase("IntDeviation")) {
				String strRoiType = "", strRatingScore = "", strCRIFScore = "", strCIBILScore = "", strAppid = "";

				strAppid = Helper.correctNull((String) hshValues
						.get("hidapplicantnewid"));
				if (strAppid.equalsIgnoreCase(""))
					strAppid = Helper.correctNull((String) hshValues
							.get("hidapplicantid"));

				strQuery = SQLParser.getSqlQuery("sel_creditRatingType^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strRatingScore = Helper.correctNull(rs
							.getString("cre_weight"));
				}
				if (rs1 != null)
					rs1.close();
				strQuery = SQLParser.getSqlQuery("cuscibildetails_sel^"
						+ strAppid + "^" + strAppid);
				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					strCRIFScore = Helper.correctNull(rs1
							.getString("CRIF_SCORE"));
					strCIBILScore = Helper.correctNull(rs1
							.getString("cibil_score"));
				}

				{
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					int intCount = 0;
					if (rs != null)
						rs.close();
					strQuery = SQLParser.getSqlQuery("sel_Cgtmse_Sno^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						boolean bflag = false;
						if (correctNull((String) rs.getString("FAC_ROITYPE"))
								.equalsIgnoreCase("RATING")
								&& !(correctNull((String) rs
										.getString("FAC_ROISCORE"))
										.equalsIgnoreCase(strRatingScore))) {
							bflag = true;
						} else if (correctNull(
								(String) rs.getString("FAC_ROITYPE"))
								.equalsIgnoreCase("CIBIL")
								&& !(correctNull((String) rs
										.getString("FAC_ROISCORE"))
										.equalsIgnoreCase(strCIBILScore))) {
							bflag = true;
						} else if (correctNull(
								(String) rs.getString("FAC_ROITYPE"))
								.equalsIgnoreCase("CRIF")
								&& !(correctNull((String) rs
										.getString("FAC_ROISCORE"))
										.equalsIgnoreCase(strCRIFScore))) {
							bflag = true;
						}
						if (bflag) {
							intCount++;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "upd_facility_interest");
							arrValues.add("0.0");
							arrValues.add("0.0");
							arrValues.add("0.0");
							arrValues.add("0.0");
							arrValues.add("");
							arrValues.add("");
							arrValues.add("");
							arrValues.add(Helper.correctNull(rs
									.getString("FACILITY_SNO")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_appno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intCount),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intCount));

							intCount++;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId",
									"del_facilitysno_mclrspreadvalue");
							arrValues.add(Helper.correctNull(rs
									.getString("FACILITY_SNO")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_appno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intCount),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intCount));

							intCount++;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId",
									"del_facility_mclrspread");
							arrValues.add(Helper.correctNull(rs
									.getString("FACILITY_SNO")));
							arrValues.add(Helper.correctNull(rs
									.getString("facility_appno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intCount),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intCount));
						}
					}

					if (intCount > 0)
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");

				}
			}
			ArrayList arrValues1 = new ArrayList();

			if ((strModuleType.equalsIgnoreCase("CORP") || strModuleType
					.equalsIgnoreCase("AGR"))) {

				hshQuery = new HashMap();
				arrValues1 = new ArrayList();
				hshQuery.put("strQueryId", "upd_appaudit");
				arrValues1.add(correctNull((String) hshValues
						.get("sel_stock_audit")));
				arrValues1.add(correctNull((String) hshValues
						.get("sel_credit_audit")));
				arrValues1.add(strAppno);
				hshQuery.put("arrValues", arrValues1);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

			// ----------------------------------------Audittrial----------------------------------------
			String strCode = "";
			if (strModuleType.trim().equalsIgnoreCase("CORP"))
				strCode = "165";
			else if (strModuleType.trim().equalsIgnoreCase("OPS"))
				strCode = "202";
			else
				strCode = "71";
			AuditTrial.auditLog(hshValues, strCode, strAppno, sbAuditTrial
					.toString());
			// --------------------------------------------End-------------------------------------------
			HashMap hshResult = new HashMap();
			if (strAction.trim().equalsIgnoreCase("send")) {
				hshResult.put("status", "success");
			}
			if (strAction.trim().equalsIgnoreCase("reallocate")) {
				hshResult.put("status", "reallocate");

			}
			// update query for comments box using clob data type
			/*
			 * String status=""; if(strAction.equalsIgnoreCase("approve")) {
			 * status="pa";
			 * 
			 * } else { status="pr"; }
			 * 
			 * 
			 * String
			 * strSanctioncomments=Helper.correctNull((String)hshValues.get
			 * ("txt_sanctioncomments")); String strUserId =
			 * correctNull((String)hshValues.get("strUserId"));
			 * if(strAction.equalsIgnoreCase("approve") ||
			 * strAction.equalsIgnoreCase("reject")) {
			 * 
			 * if(con1!=null) { con1.close(); }
			 * con1=CLOBInvoker.getConnection();ps=con1.prepareStatement(
			 * "update applications set app_status=?, app_processdate=sysdate,app_approvedby=?, app_sanccomments=? where app_no=?"
			 * ); clob=CLOBInvoker.getCLOBInstance(con1);
			 * clob.putString(1,strSanctioncomments); ps.setString(1,status);
			 * ps.setString(2,strUserId); ps.setClob(3,clob);
			 * ps.setString(4,strAppno); ps.executeUpdate(); }
			 */
			// String
			// appno=Helper.correctNull((String)hshRequestValues.get("appno"));
			if (rs != null) {
				rs.close();
			}
			// MAHESH FOR STORING THE VALUES OF CROP MASTER AT THE TIME OF
			// SANCTIONING THE APPLICATION
			strQuery = SQLParser.getSqlQuery("sel_appstatus^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			String app_status = "";
			String app_module = "";
			while (rs.next()) {
				app_status = Helper.correctNull((String) rs
						.getString("app_status"));
				app_module = Helper.correctNull((String) rs
						.getString("app_loantype"));
			}
			if (!app_status.equals("op")) {
				if (app_module.equals("A")) {
					HashMap HashMap1 = new HashMap();
					HashMap HashMap2 = new HashMap();
					ArrayList arraylist = new ArrayList();
					arraylist.add(strAppno);
					HashMap1.put("size", "1");
					HashMap2.put("strQueryId", "del_cropLoan");
					// arraylist.add("");
					HashMap2.put("arrValues", arraylist);
					HashMap1.put("1", HashMap2);
					EJBInvoker.executeStateLess("dataaccess", HashMap1,
							"updateData");

					strQuery = SQLParser.getSqlQuery("sel_corploanMaster");
					rs = DBUtils.executeQuery(strQuery);
					while (rs.next()) {
						String id = Helper.correctNull(rs
								.getString("corpLoan_id"));
						String per = Helper.correctNull(rs
								.getString("CORPLOAN_PERCENTAGE"));
						HashMap1 = new HashMap();
						HashMap2 = new HashMap();
						arraylist = new ArrayList();
						HashMap1.put("strQueryId", "insert_cropLoan");
						arraylist.add(strAppno);
						arraylist.add(id);
						arraylist.add(per);
						HashMap1.put("arrValues", arraylist);
						HashMap2.put("size", "1");
						HashMap2.put("1", HashMap1);
						EJBInvoker.executeStateLess("dataaccess", HashMap2,
								"updateData");
					}
				}
			}

			// SMS Service for Housing Loan
			if ((strAction.equalsIgnoreCase("Approve") || strAction
					.equalsIgnoreCase("reject"))
					&& ApplicationParams.getSMSFlag().equalsIgnoreCase("TRUE")
					&& !application_flag.equalsIgnoreCase("P")) {
				boolean bflag = false, bdflag = false;
				String strAgentID = "", strAgent = "";
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("sel_inwarddetails^"
						+ strInwardno);
				if (rs.next()) {
					if ((Helper.correctNull(rs
							.getString("inward_applnprocessat"))
							.equalsIgnoreCase("6"))
					// &&(Helper.correctNull(rs.getString("inward_bankscheme")).equalsIgnoreCase("003")||Helper.correctNull(rs.getString("inward_bankscheme")).equalsIgnoreCase("102"))
					) {
						bflag = true;
					}
					strAgentID = Helper.correctNull(rs
							.getString("INWARD_AGENTID"));
					strAgent = Helper.correctNull(rs
							.getString("INWARD_LEADGENBY"));
					if (Helper.correctNull(
							rs.getString("INWARD_CANVASSEDBYSTAFF"))
							.equalsIgnoreCase("N")
							&& !strAgentID.equalsIgnoreCase(""))
						bdflag = true;

					if (bdflag
							&& !(strAgent.equalsIgnoreCase("BSA") || strAgent
									.equalsIgnoreCase("DSA"))) {
						if (rs != null)
							rs.close();

						rs = DBUtils
								.executeLAPSQuery("selstatdatabyiddesc^218^"
										+ strAgent);
						if (rs.next()) {
							if (!Helper.correctNull(
									rs.getString("stat_data_value"))
									.equalsIgnoreCase("Y"))
								bdflag = false;
						}
					}
				}

				if (bflag) {
					 strMessage = ""; strMobileno = ""; strRejReason = "";
					if (rs != null)
						rs.close();

					rs = DBUtils.executeLAPSQuery("sel_sms_master");
					if (rs.next()) {
						if (strAction.equalsIgnoreCase("Approve"))
							strMessage = Helper.correctNull(rs
									.getString("sms_approved"));
						else
							strMessage = Helper.correctNull(rs
									.getString("sms_reject"));
					}

					if (rs != null)
						rs.close();

					rs = DBUtils.executeLAPSQuery("sel_appdetails_sms^"
							+ strAppno);
					if (rs.next()) {
						strMessage = strMessage.replaceAll("@CName", Helper
								.correctNull(rs.getString("perapp_fname")));
						strMessage = strMessage.replaceAll("@SAMT", Helper
								.correctDouble(rs.getString("loan_recmdamt")));
						strMobileno = Helper.correctNull(rs
								.getString("con_mobile"));
					}

					if (strAction.equalsIgnoreCase("reject")) {
						if (rs != null)
							rs.close();
						int a = 1;
						rs = DBUtils
								.executeLAPSQuery("sel_rejdesc^" + strAppno);
						while (rs.next()) {
							strRejReason = strRejReason
									+ (a++)
									+ ") "
									+ Helper.correctNull(rs
											.getString("rej_desc")) + "\n";
						}
					}

					strMessage = strMessage.replaceAll("@LARNO", strInwardno)
							.replaceAll("@REJRSON", strRejReason);

					if (!strMobileno.equalsIgnoreCase("")) {
						log
								.info("================== Message Service================");
						String charset = "UTF-8", strFileIds = "";

						String query = null;
						URLConnection conn = null;

						try {
							query = String
									.format(
											"dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
											ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),
											URLEncoder
													.encode(ApplicationParams
															.getStrSMSUserID(),
															charset),
											ApplicationParams
													.getStrSMSPassword(),
													 URLEncoder
													.encode(ApplicationParams
															.getStrSMSSender(),
															charset),
											URLEncoder.encode(strMobileno,
													charset),
											URLEncoder.encode(ApplicationParams
													.getStrSMSTypeFlag(),
													charset),
											URLEncoder.encode(strMessage,
													charset));

							log
									.info("==================Invoking Service in Try Block================"
											+ ApplicationParams.getStrSMSURL()
											+ "?" + query);
							conn = new URL(ApplicationParams.getStrSMSURL()
									+ "?" + query).openConnection();
							log
									.info("================== Service Ended================");

						} catch (Exception e) {
							query = "dcode="
									+ ApplicationParams.getStrSMSDCode()
									+ "&userid="
									+ ApplicationParams.getStrSMSUserID()
									+ "&pwd="
									+ ApplicationParams.getStrSMSPassword()
									+ "&sender="
									+ ApplicationParams.getStrSMSSender()
									+ "&pno=" + strMobileno + "&msgtype="
									+ ApplicationParams.getStrSMSTypeFlag()
									+ "&msgtxt=" + strMessage;
							log
									.info("==================Invoking Service in Catch Block================"
											+ ApplicationParams.getStrSMSURL()
											+ "?" + query);
							conn = new URL(ApplicationParams.getStrSMSURL()
									+ "?" + query).openConnection();
							log
									.info("================== Service Ended================");

						}

						conn.setDoOutput(true);
						conn.setRequestProperty("Accept-Charset", charset);
						BufferedReader br = new BufferedReader(
								new InputStreamReader(conn.getInputStream()));
						String output;
						while ((output = br.readLine()) != null) {
							strFileIds = output;
						}

						hshQuery = new HashMap();
						hshQueryValues = new HashMap();
						arrValues = new ArrayList();
						arrValues.add(strMobileno);
						arrValues.add(strMessage);
						arrValues.add(strFileIds);
						arrValues.add(strInwardno);
						hshQuery.put("strQueryId", "ins_smshistroy");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");

					}

				}
				if (bdflag) {
					
					if (rs != null)
						rs.close();

					rs = DBUtils.executeLAPSQuery("sel_sms_master_others^"
							+ strAgent);
					if (rs.next()) {
						if (strAction.equalsIgnoreCase("Approve"))
							strMessage = Helper.correctNull(rs
									.getString("sms_approved"));
						else
							strMessage = Helper.correctNull(rs
									.getString("sms_rejected"));
					}

					if (rs != null)
						rs.close();

					rs = DBUtils.executeLAPSQuery("sel_appdetails_sms^"
							+ strAppno);
					if (rs.next()) {
						strMessage = strMessage.replaceAll("@CName", Helper
								.correctNull(rs.getString("perapp_fname")));
						strMessage = strMessage.replaceAll("@SAMT", Helper
								.correctDouble(rs.getString("loan_recmdamt")));
					}

					if (strAction.equalsIgnoreCase("reject")) {
						if (rs != null)
							rs.close();
						int a = 1;
						rs = DBUtils
								.executeLAPSQuery("sel_rejdesc^" + strAppno);
						while (rs.next()) {
							strRejReason = strRejReason
									+ (a++)
									+ ") "
									+ Helper.correctNull(rs
											.getString("rej_desc")) + "\n";
						}
					}
					if (rs != null)
						rs.close();

					rs = DBUtils.executeLAPSQuery("sel_BSADSA_agentname^"
							+ strAgentID);
					if (rs.next()) {
						strMobileno = Helper.correctNull(rs
								.getString("BSADSA_MOBILENON"));
						strName = Helper.correctNull(rs
								.getString("BSADSA_NAME"));

						if (!strName.equalsIgnoreCase("")) {
							strName = (strName.split("-"))[0];
						}
					}

					strMessage = strMessage.replaceAll("@LARNO", strInwardno)
							.replaceAll("@REJRSON", strRejReason).replace(
									"@AgentName", strName);

					if (!strMobileno.equalsIgnoreCase("")) {
						log
								.info("================== Message Service================");
						String charset = "UTF-8", strFileIds = "";

						String query = null;
						URLConnection conn = null;

						try {
							query = String
									.format(
											"dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
											ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),
											URLEncoder
													.encode(ApplicationParams
															.getStrSMSUserID(),
															charset),
											ApplicationParams
													.getStrSMSPassword(),
													 URLEncoder
													.encode(ApplicationParams
															.getStrSMSSender(),
															charset),
											URLEncoder.encode(strMobileno,
													charset),
											URLEncoder.encode(ApplicationParams
													.getStrSMSTypeFlag(),
													charset),
											URLEncoder.encode(strMessage,
													charset));

							log
									.info("==================Invoking Service in Try Block================"
											+ ApplicationParams.getStrSMSURL()
											+ "?" + query);
							conn = new URL(ApplicationParams.getStrSMSURL()
									+ "?" + query).openConnection();
							log
									.info("================== Service Ended================");

						} catch (Exception e) {
							query = "dcode="
									+ ApplicationParams.getStrSMSDCode()
									+ "&userid="
									+ ApplicationParams.getStrSMSUserID()
									+ "&pwd="
									+ ApplicationParams.getStrSMSPassword()
									+ "&sender="
									+ ApplicationParams.getStrSMSSender()
									+ "&pno=" + strMobileno + "&msgtype="
									+ ApplicationParams.getStrSMSTypeFlag()
									+ "&msgtxt=" + strMessage;
							log
									.info("==================Invoking Service in Catch Block================"
											+ ApplicationParams.getStrSMSURL()
											+ "?" + query);
							conn = new URL(ApplicationParams.getStrSMSURL()
									+ "?" + query).openConnection();
							log
									.info("================== Service Ended================");

						}

						conn.setDoOutput(true);
						conn.setRequestProperty("Accept-Charset", charset);
						BufferedReader br = new BufferedReader(
								new InputStreamReader(conn.getInputStream()));
						String output;
						while ((output = br.readLine()) != null) {
							strFileIds = output;
						}

						hshQuery = new HashMap();
						hshQueryValues = new HashMap();
						arrValues = new ArrayList();
						arrValues.add(strMobileno);
						arrValues.add(strMessage);
						arrValues.add(strFileIds);
						arrValues.add(strInwardno);
						hshQuery.put("strQueryId", "ins_smshistroy");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");

					}

			}
			
			strMessage=strMessage.replaceAll("@LARNO", strInwardno).replaceAll("@REJRSON", strRejReason).replace("@AgentName", strName);
			
			if(!strMobileno.equalsIgnoreCase(""))
			{
				log.info("================== Message Service================");
				String charset="UTF-8",strFileIds="";
				
				String query = null;
				URLConnection conn = null;
				
				try{
					/*query = String.format("dcode=%s&userid=%s&pwd=%s&sender=%s&pno=%s&msgtype=%s&msgtxt=%s",
							URLEncoder.encode(ApplicationParams.getStrSMSDCode(), charset), URLEncoder.encode(ApplicationParams.getStrSMSUserID(), charset), URLEncoder
									.encode(ApplicationParams.getStrSMSPassword(), charset), URLEncoder.encode(ApplicationParams.getStrSMSSender(), charset), URLEncoder
									.encode(strMobileno, charset), URLEncoder.encode(ApplicationParams.getStrSMSTypeFlag(), charset),
									URLEncoder.encode(strMessage, charset));*/
					
					
					query = String.format("dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
							ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(), URLEncoder.encode(ApplicationParams.getStrSMSUserID(), charset), 
									ApplicationParams.getStrSMSPassword(), URLEncoder.encode(ApplicationParams.getStrSMSSender(), charset), URLEncoder
									.encode(strMobileno, charset), URLEncoder.encode(ApplicationParams.getStrSMSTypeFlag(), charset),
									URLEncoder.encode(strMessage, charset));
					
					log.info("==================Invoking Service in Try Block================"+ApplicationParams.getStrSMSURL() + "?" + query);
					conn = new URL(ApplicationParams.getStrSMSURL() + "?" + query).openConnection();
					log.info("================== Service Ended================");
					
					
				}catch(Exception e)
				{
					query = "dcode="+ApplicationParams.getStrSMSDCode()+"&userid="+ApplicationParams.getStrSMSUserID()+"&pwd="+ApplicationParams.getStrSMSPassword()+"&sender="+ApplicationParams.getStrSMSSender()+"&pno="+strMobileno+"&msgtype="+ApplicationParams.getStrSMSTypeFlag()+"&msgtxt="+strMessage;
					log.info("==================Invoking Service in Catch Block================"+ApplicationParams.getStrSMSURL() + "?" + query);
					conn = new URL(ApplicationParams.getStrSMSURL() + "?" + query).openConnection();
					log.info("================== Service Ended================");
					
				}
			}
		
			// MAHESH ENDS
			
		}
			if((strAction.equalsIgnoreCase("approve")||strAction.equalsIgnoreCase("reject"))&&application_flag.equalsIgnoreCase("P"))
			{
			if(strOrglevelnew.equalsIgnoreCase("A"))
			{
				String strsms="";
				hshQueryValues = new HashMap();
				hshQuery=new HashMap();
				arrValues=new ArrayList();
				hshQuery.put("strQueryId","commworkflowinsnew");
				arrValues.add(strAppno);
				arrValues.add(strappholder);
				arrValues.add(strOrgHeadnew);
				arrValues.add(strFromflowpoint);
				arrValues.add(strToflowpoint);
				arrValues.add("C");
				if(rs != null)
				{
					rs.close();
				}
				strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strappholder);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					arrValues.add(Helper.correctNull(rs.getString("org_scode")));
					arrValues.add(Helper.correctNull(rs.getString("usr_department")));
				}
				if(rs != null)
				{
					rs.close();
				}
				strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strOrgHeadnew);
				rs=DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					arrValues.add(Helper.correctNull(rs.getString("org_scode")));
					arrValues.add(Helper.correctNull(rs.getString("usr_department")));
				}
				arrValues.add("Y");
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("1",hshQuery);
				
				hshQuery=new HashMap();
				arrValues=new ArrayList();
				hshQuery.put("strQueryId","updmailbxchkstatus");
				arrValues.add("Y");
				arrValues.add(strOrgHeadnew);
				arrValues.add(strAppno);
				hshQuery.put("arrValues",arrValues);
				hshQueryValues.put("size","2");
				hshQueryValues.put("2",hshQuery);
				
				/*if(rs != null)
				{
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_sms_master");
				if (rs.next()) {
					if (strAction.equalsIgnoreCase("Approve"))
						strsms = Helper.correctNull(rs
								.getString("SMS_POST_APPROVED"));
					else
						strsms = Helper.correctNull(rs
								.getString("SMS_PERMIS_REJECT"));
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("sel_appdetails_sms^"
						+ strAppno);
				if (rs.next()) {
					strsms = strsms.replaceAll("@CName", Helper
							.correctNull(rs.getString("perapp_fname")));
				}
				
				
				*/
				EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
				
			}
			else
			{
				String scodeforallmoduls="";
				String headoforg="";
				if((strModuleType.equalsIgnoreCase("CORP")||strModuleType.equalsIgnoreCase("AGR")))
				{
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("getscodefororghead^"+strAppno);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						scodeforallmoduls=Helper.correctNull(rs.getString("COM_PERTAINS_BRANCH"));
					}
				}
				else
				{
					
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("sel_retmclrresetfreq^"+strAppno);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						scodeforallmoduls=Helper.correctNull(rs.getString("LOAN_PERTAINS_BRANCH"));
					}
					
					
				}
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("getorgheadfromorgnisation^"+scodeforallmoduls);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						headoforg=Helper.correctNull(rs.getString("ORG_HEAD"));
					}
					hshQueryValues = new HashMap();
					hshQuery=new HashMap();
					arrValues=new ArrayList();
					hshQuery.put("strQueryId","commworkflowinsnew");
					arrValues.add(strAppno);
					arrValues.add(strappholder);
					arrValues.add(headoforg);
					arrValues.add(strFromflowpoint);
					arrValues.add(strToflowpoint);
					arrValues.add("C");
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strappholder);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						arrValues.add(Helper.correctNull(rs.getString("org_scode")));
						arrValues.add(Helper.correctNull(rs.getString("usr_department")));
					}
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+headoforg);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						arrValues.add(Helper.correctNull(rs.getString("org_scode")));
						arrValues.add(Helper.correctNull(rs.getString("usr_department")));
					}
					arrValues.add("Y");
					hshQuery.put("arrValues",arrValues);
					hshQueryValues.put("1",hshQuery);
					
					hshQuery=new HashMap();
					arrValues=new ArrayList();
					hshQuery.put("strQueryId","updmailbxchkstatus");
					arrValues.add("Y");
					arrValues.add(headoforg);
					arrValues.add(strAppno);
					hshQuery.put("arrValues",arrValues);
					hshQueryValues.put("size","2");
					hshQueryValues.put("2",hshQuery);
					
					EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
					
				}
				
				
			}
			return hshResult;
		}
		catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

				/*
				 * if(con1!=null) { con1.close(); } if(ps!=null) { ps.close(); }
				 * if(clob!=null) { clob.close(); }
				 */

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}

	}

	public String getSanctionRefernceNumber(HashMap hshValues) {
		String strRefno = "";
		String strAppno = "";
		String strSolid = "";
		String strFinancialYear = "";
		String strDateofSanc = "";
		String strOrgLevel = "";
		String strOrgCode = "";
		String strCPCCode = "";
		String strUserId = "";
		String strSancAuthority = "", strSancAuthority1 = "";
		String strSancAuthorityCode = "";
		String strUserDepartment = "";
		String strUserDesignation = "";
		String strBifur = "/";
		ResultSet rs = null;
		String strSno = "";
		ArrayList arrValues = new ArrayList();
		HashMap hshQuery = new HashMap();
		HashMap hshQueryValues = new HashMap();
		String strFinancialYear1 = "", strFinancialYear2 = "";
		String strQuery = "", StrappLoansubtypeDigi = "";
		String strFinacleSancRefNo = "", strAction = "", Appstatus = "", StrModuleType = "", strProductType = "";
		String strFRefno = "", strProposalsanctype = "", strApplicationType = "";
		try {
			strAction = Helper.correctNull((String) hshValues.get("hidAction"));
			if (strAction.equalsIgnoreCase("approve")) {
				Appstatus = "A";
			} else if (strAction.equalsIgnoreCase("reject")) {
				Appstatus = "R";
			}
			strAppno = Helper.correctNull((String) hshValues.get("strappno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = Helper.correctNull((String) hshValues.get("appno"));
			}
			strSolid = Helper.correctNull((String) hshValues.get("strSolid"));
			strOrgLevel = Helper.correctNull((String) hshValues
					.get("strOrgLevel"));
			strOrgCode = Helper.correctNull((String) hshValues
					.get("strOrgCode"));
			strUserDepartment = Helper.correctNull((String) hshValues
					.get("strUserDepartment"));
			strUserId = Helper.correctNull((String) hshValues.get("strUserId"));
			strCPCCode = strOrgCode.substring(0, 6);
			StrModuleType = Helper.correctNull((String) hshValues
					.get("sessionModuleType"));
			strProductType = Helper.correctNull((String) hshValues
					.get("strProductType"));
			strApplicationType = Helper.correctNull((String) hshValues
					.get("strApplicationType"));
			if (!(strSolid.equalsIgnoreCase("") || strAppno
					.equalsIgnoreCase(""))) {
				strFinancialYear = Helper.financialYear();
				rs = DBUtils.executeLAPSQuery("selCurrentdate");
				if (rs.next()) {
					strDateofSanc = Helper.correctNull((String) rs
							.getString("currentdate1"));
				}
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("setuserssel^" + strUserId);
				if (rs.next()) {
					strSancAuthorityCode = Helper.correctNull((String) rs
							.getString("user_designation"));
				}
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("selcbsiddatadesc^27^"
						+ strSancAuthorityCode);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strSancAuthority = Helper.correctNull((String) rs
							.getString("cbs_static_data_passing_code"));
					strSancAuthority1 = Helper.correctNull((String) rs
							.getString("cbs_static_data_passing_code"));
				}
				String digiloan = Helper.correctNull((String) hshValues
						.get("digiloan"));
				rs = DBUtils.executeLAPSQuery("commworkflowsel2^" + strAppno);
				if (rs.next()) {
					StrappLoansubtypeDigi = correctNull(rs
							.getString("APP_LOANSUBTYPE_DIGI"));
				}

				// if(digiloan.equals("Y") ||
				// StrModuleType.equalsIgnoreCase("DIGI"))
				if (StrappLoansubtypeDigi.equalsIgnoreCase("PR")) {
					if (strProductType.equals("pB")
							|| strProductType.equals("pM")) {
						strSancAuthority = "DIGI/" + strSancAuthority1;
					} else {
						strSancAuthority = "DIGI";
					}
				} else if (StrappLoansubtypeDigi.equalsIgnoreCase("PC")) {

					strSancAuthority = "DIGI/" + strSancAuthority1;
				}else if(StrappLoansubtypeDigi.equalsIgnoreCase("PJ")){
					
					strSancAuthority="DIGI/"+strSancAuthority1;
				}

				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("selfinancialyear");
				if (rs.next()) {
					strFinancialYear = Helper.correctNull((String) rs
							.getString("FinancialYear"));
					strFinancialYear1 = strFinancialYear.substring(0, 5);
					strFinancialYear2 = strFinancialYear.substring(7, 9);
					strFinancialYear = strFinancialYear1 + strFinancialYear2;
				}

				if (rs != null) {
					rs.close();
				}
				String SanctioningAuthority = "", Sanction_Ref_Num = "", Sanction_dep = "", strSancBranch = "";
				if (StrModuleType.equalsIgnoreCase("RET")
						|| StrModuleType.equalsIgnoreCase("LAD")) {
					rs = DBUtils.executeLAPSQuery("sel_date^" + strAppno);
					if (rs.next()) {
						SanctioningAuthority = correctNull(rs
								.getString("appraisal_sancauth"));
						Sanction_Ref_Num = correctNull(rs
								.getString("Sanc_Ref_No"));
						Sanction_dep = correctNull(rs
								.getString("appraisal_department"));
						strSancBranch = correctNull(rs
								.getString("APPRAISAL_BRANCH"));
						strProposalsanctype = "P";
					}
				} else if (Helper.correctNull(
						(String) hshValues.get("strModule")).equalsIgnoreCase(
						"DEV")) {
					rs = DBUtils.executeLAPSQuery("sel_basicinformation^"
							+ strAppno);
					if (rs.next()) {
						SanctioningAuthority = correctNull(rs
								.getString("PERM_SANC_AUTH"));
						Sanction_Ref_Num = correctNull(rs
								.getString("PERM_REFNO"));
						Sanction_dep = correctNull(rs
								.getString("PERM_SANC_DEPT"));
						strSancBranch = correctNull(rs
								.getString("PERM_SANC_BRANCH"));
					}

					if (!strSancAuthority.equalsIgnoreCase("")) {
						strSancAuthority = strSancAuthority.substring(0,
								strSancAuthority.length() - 1)
								+ "P";
					}
				} else if (StrappLoansubtypeDigi.equalsIgnoreCase("PR")
						&& (strProductType.equals("pB") || strProductType
								.equals("pM"))) {
					rs = DBUtils.executeLAPSQuery("sel_date^" + strAppno);
					if (rs.next()) {
						strSancBranch = correctNull(rs
								.getString("APPRAISAL_BRANCH"));
					}
				} else {
					rs = DBUtils
							.executeLAPSQuery("sel_corporate_breifbackground^"
									+ strAppno);
					if (rs.next()) {
						SanctioningAuthority = correctNull(rs
								.getString("com_sancauthority"));
						Sanction_Ref_Num = correctNull(rs
								.getString("com_sancrefno"));
						strProposalsanctype = correctNull(rs
								.getString("com_proposalsanctype"));
						Sanction_dep = correctNull(rs.getString("com_sancdept"));
						strSancBranch = correctNull(rs
								.getString("com_sancbranch"));
					}
				}

				if (strApplicationType.equalsIgnoreCase("P")) {
					if (!strSancAuthority.equalsIgnoreCase("BMR")
							&& !strSancAuthority.equalsIgnoreCase("")) {
						if (strProposalsanctype.equalsIgnoreCase("P"))
							strSancAuthority = strSancAuthority.substring(0,
									strSancAuthority.length() - 1)
									+ "P";
					}
				}

				if (strOrgLevel.equalsIgnoreCase("C")) {
					strUserDepartment = "";
					/*
					 * if(SanctioningAuthority.equalsIgnoreCase("28")) {
					 * strUserDepartment = "001"; } else
					 * if(SanctioningAuthority.equalsIgnoreCase("30")) {
					 * strUserDepartment = "002"; }
					 */
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "131" + "^" + strSancBranch);
					if (rs.next()) {
						strUserDepartment = Helper.correctNull((String) rs
								.getString("CBS_STATIC_SANC_REFNO"));
					}
					strRefno = strSancAuthority + strBifur + strUserDepartment
							+ strBifur + strSolid + strBifur;
					strFRefno = strSancAuthority + strBifur + strUserDepartment
							+ strBifur + strSolid + strBifur;
				} else if (strCPCCode.equalsIgnoreCase("001001")
						&& strOrgLevel.equalsIgnoreCase("R")) {
					strRefno = "CPC" + strSancAuthority + strBifur;
					strFRefno = "CPC" + strSancAuthority + strBifur;
				} else if (strCPCCode.equalsIgnoreCase("001001")
						&& strOrgLevel.equalsIgnoreCase("R")
						&& strApplicationType.equalsIgnoreCase("C")
						&& digiloan.equals("Y")) {
					strRefno = strSancAuthority + "CPC" + strBifur;
					strFRefno = strSancAuthority + "CPC" + strBifur;
				} else if (strOrgLevel.equalsIgnoreCase("R")) {
					strRefno = strSancAuthority + strBifur + strSolid
							+ strBifur;
					strFRefno = strSancAuthority + strBifur + strSolid
							+ strBifur;
				} else if (strOrgLevel.equalsIgnoreCase("D")
						&& Helper.correctNull(
								(String) hshValues.get("strRLPFUser"))
								.equalsIgnoreCase("012")) {
					strUserDepartment = "";
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_cbsstaticdescbycode^"
							+ "130" + "^" + Sanction_dep);
					if (rs.next()) {
						strUserDepartment = Helper.correctNull((String) rs
								.getString("CBS_STATIC_SANC_REFNO"));
					}
					strRefno = strSancAuthority + strBifur + strUserDepartment
							+ strBifur + strSolid + strBifur;
					strFRefno = strSancAuthority + strBifur + strUserDepartment
							+ strBifur + strSolid + strBifur;
				} else if (strOrgLevel.equalsIgnoreCase("A")) {
					strRefno = strSancAuthority + strBifur + strSolid
							+ strBifur;
					strFRefno = strSancAuthority + strBifur + strSolid
							+ strBifur;
				} else if (strOrgLevel.equalsIgnoreCase("B")) {
					// No Function
				} else {
					// No Function
				}
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("selreferencenumsno^"
						+ strOrgLevel + "^" + strFinancialYear);
				if (rs.next()) {
					strSno = Helper.correctNull((String) rs.getString("sno"));
				}

				int intsno = Integer.parseInt(strSno);
				intsno = ++intsno;
				strSno = Integer.toString(intsno);
				strRefno = strRefno + strSno + strBifur + strFinancialYear
						+ strBifur + strDateofSanc;
				strFinacleSancRefNo = strFRefno + strSno + strBifur
						+ strFinancialYear;

				if (Sanction_dep.equalsIgnoreCase("011")) {
					strRefno = "CPC" + strSancAuthority + strBifur + strSno
							+ strBifur + strFinancialYear + strBifur
							+ strDateofSanc;
					strFinacleSancRefNo = "CPC" + strSancAuthority + strBifur
							+ strSno + strBifur + strFinancialYear;
				} else if (Sanction_dep.equalsIgnoreCase("011")
						&& strApplicationType.equalsIgnoreCase("C")
						&& digiloan.equals("Y")) {
					strRefno = strSancAuthority + "CPC" + strBifur + strSno
							+ strBifur + strFinancialYear + strBifur
							+ strDateofSanc;
					strFinacleSancRefNo = strSancAuthority + "CPC" + strBifur
							+ strSno + strBifur + strFinancialYear;
				} else if (Sanction_dep.equalsIgnoreCase("012")) {

					String strRLPCCode = "CLPH", strOrgScode = strSolid;

					if ((strOrgScode.substring(0, 1)).equalsIgnoreCase("R"))
						strOrgScode = strOrgScode.substring(1, strOrgScode
								.length());

					if (rs != null) {
						rs.close();
					}
					rs = DBUtils
							.executeLAPSQuery("sel_cbsstaticdescbycode^130^"
									+ Sanction_dep);
					if (rs.next()) {
						strRLPCCode = Helper.correctNull(rs
								.getString("cbs_static_sanc_refno"));
					}

					strRefno = strSancAuthority + strBifur + strRLPCCode
							+ strBifur + strOrgScode + strBifur + strSno
							+ strBifur + strFinancialYear + strBifur
							+ strDateofSanc;
					strFinacleSancRefNo = strSancAuthority + strBifur
							+ strRLPCCode + strBifur + strOrgScode + strBifur
							+ strSno + strBifur + strFinancialYear;
				}

				if (SanctioningAuthority.equalsIgnoreCase("14")
						|| SanctioningAuthority.equalsIgnoreCase("15")
						|| SanctioningAuthority.equalsIgnoreCase("16")) {
					strRefno = Sanction_Ref_Num;
					strFinacleSancRefNo = Sanction_Ref_Num;
				}

				/*
				 * String
				 * digiloan=Helper.correctNull((String)hshValues.get("digiloan"
				 * )); if(digiloan.equals("Y")) {
				 * if(strSancAuthorityCode.equals("")) {
				 * strRefno="DIGI"+strRefno;
				 * strFinacleSancRefNo="DIGI"+strFinacleSancRefNo; } else {
				 * strRefno="DIGI/"+strRefno;
				 * strFinacleSancRefNo="DIGI/"+strFinacleSancRefNo; } }
				 */

				if (!Helper.correctNull((String) hshValues.get("strPageID"))
						.equalsIgnoreCase("Revalidation")) {
					hshQueryValues.put("size", "1");
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "insreferencenum");
					arrValues.add(strAppno);
					arrValues.add(strSolid);
					arrValues.add(strFinancialYear);
					arrValues.add(strOrgLevel);
					arrValues.add(strSno);
					arrValues.add(strRefno);
					arrValues.add(strFinacleSancRefNo);
					arrValues.add(Appstatus);
					arrValues.add("n");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

				if (!StrappLoansubtypeDigi.equals("")) {
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("sel_digiSancRefNo^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					int count = 0;
					String sno = "";
					while (rs.next()) {
						count++;
					}
					if (count > 1) {

						if (rs != null) {
							rs.close();
						}
						strQuery = SQLParser
								.getSqlQuery("sel_digiSancRefNodup^" + strAppno);
						rs = DBUtils.executeQuery(strQuery);
						if (rs.next()) {
							sno = Helper.correctNull(rs.getString("SNO"));

							hshQueryValues.put("size", "1");
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							hshQuery.put("strQueryId", "upd_appreferncenum");
							arrValues.add("y");
							arrValues.add(strAppno);
							arrValues.add(sno);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");

						}
					}

				}
			} else {
				throw new EJBException(
						"$$$Organisation SolID or Proposal number Not available");
			}

		} catch (Exception e) {
			throw new EJBException(
					"Error in generating Sanction Reference Number.." + e);
		}
		return strRefno;
	}

	public void getSave(HashMap hshSaveValues)  {

		String strAppno = "";
		ResultSet rs = null;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		int intCounter = 0;
		String strModuleType = "";
		String strAppstatus = "", strQuery = "";
		try {
			strModuleType = correctNull((String) hshSaveValues
					.get("hidCategoryType"));
			if (strModuleType.equalsIgnoreCase("")
					|| strModuleType.equalsIgnoreCase("null"))
				strModuleType = correctNull((String) hshSaveValues
						.get("cattype"));

			StringBuilder sbAt = new StringBuilder();

			strAppno = (String) hshSaveValues.get("appno");

			strAppstatus = correctNull((String) hshSaveValues.get("appstatus"));
			if (strAppstatus.equals("")) {
				strAppstatus = correctNull((String) hshSaveValues
						.get("appstatus1"));
			} else if (strAppstatus.equals("")) {
				strAppstatus = correctNull((String) hshSaveValues
						.get("app_status"));
			}
			strAppstatus = strAppstatus.equalsIgnoreCase("pa") ? "Processed/Approved"
					: strAppstatus.equalsIgnoreCase("pa") ? "Processed/Rejected"
							: strAppstatus;

			if (strAppstatus.equalsIgnoreCase("Processed/Approved")
					|| strAppstatus.equalsIgnoreCase("Processed/Rejected")) {
				hshQuery.put("strQueryId", "commworkflowclosapprove");
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(String.valueOf(++intCounter), hshQuery);
				hshQueryValues.put("size", String.valueOf(intCounter));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				String strInwardNo = "0";
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strInwardNo = Helper.correctNull((String) rs
							.getString("app_inwardno"));
				}
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updinwardappstatus");
				if (strAppstatus.equalsIgnoreCase("Processed/Approved"))
					arrValues.add("ca");
				if (strAppstatus.equalsIgnoreCase("Processed/Rejected"))
					arrValues.add("cr");
				arrValues.add(strInwardNo);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put(String.valueOf(++intCounter), hshQuery);
				hshQueryValues.put("size", String.valueOf(intCounter));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
				sbAt.append("~Application Saved");
			}

			// ------------------------------AuditTrial-----------------------------------
			String strCode = "";
			if (strModuleType.trim().equalsIgnoreCase("CORP"))
				strCode = "165";
			else if (strModuleType.trim().equalsIgnoreCase("OPS"))
				strCode = "202";
			else
				strCode = "71";
			AuditTrial.auditLog(hshSaveValues, strCode, strAppno, sbAt
					.toString());
			// ----------------------------------End--------------------------------------

		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		}
	}

	private double checkNewDiscretionaryPowers(HashMap hshValues)
			 {

		ResultSet rs = null, rs1 = null;
		String strUserId = "";
		String strAppno = "", strQuery = "", strExp = "$";
		// String strPrdType="";

		double dblPartyFund = 0;
		double dblPartyNonFund = 0;
		double dblPartyAnualCap = 0;
		double dblUnsecured = 0;
		double dblAdhocLimit = 0;
		double dblAdhocMonths = 0;
		double dblAdhocUnsecured = 0;
		double dbllccashmargin = 0;
		double dbllgcashmargin = 0;
		double dblbankdeposit = 0;
		double dbllgpb = 0;

		// double dblTotalProposedAmt=0;
		double dblPartyTotalreglmt = 0;

		double dblWorkingCapital = 0;
		double dblTermLoan = 0;
		// double dblSanctionedFund=0;
		double dblPartyTotalSanctionedFund = 0;
		double dblPartyTotalSanctionedNonFund = 0;

		double dblPartyTotalTermSanctionedFund = 0;
		double dblPartyTotalWorkSanctionedFund = 0;
		double dblPartyTotalUnsecured = 0;

		double dblPartyTotalUnsecuredadvns = 0;

		double dblPartyTotalAdhoc = 0;
		double dblPartyTotalAdhocunsec = 0;
		double AdhocMon = 0;

		double dblPartyTotalLGcash = 0;
		double dblPartyTotalLCcash = 0;
		double dblPartyTotalBankdeposit = 0;
		double dblPartyTotalLCprimebank = 0;

		double dblPrdSancLimit = 0;
		double dblPrdLoanAmt = 0;

		String apploantype = correctNull((String) hshValues.get("apploantype"));
		String appno = correctNull((String) hshValues.get("appno"));
		String usrid = correctNull((String) hshValues.get("txt_usrid"));
		String strProposalType = correctNull((String) hshValues
				.get("strProposalType"));

		try {

			strAppno = correctNull((String) hshValues.get("appno"));
			strUserId = correctNull((String) hshValues.get("strUserId"));

			// ------------------------------------(1)-Lending Powers 1.Per
			// Party Borrower Limit--------------------
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("seluserdiscpowers^" + strUserId);

			if (rs.next()) {
				dblPartyAnualCap = rs.getDouble("disc_perpartyanncap");
				// dblGroupLimit = rs.getDouble("disc_grouplimit");
				dblPartyFund = rs.getDouble("disc_perptyfundbased");
				dblWorkingCapital = rs.getDouble("disc_workingcapital");
				dblUnsecured = rs.getDouble("disc_perptyunsecured");
				dblTermLoan = rs.getDouble("disc_termloan");
				dblPartyNonFund = rs.getDouble("disc_perptynonfund");

				dbllccashmargin = rs.getDouble("disc_lc");
				dbllgcashmargin = rs.getDouble("disc_guarantee");
				dblbankdeposit = rs.getDouble("disc_bankdeposits");
				dbllgpb = rs.getDouble("disc_lcpb");

				dblAdhocLimit = rs.getDouble("disc_adhocsanclimit");
				dblAdhocMonths = rs.getDouble("disc_adhocmonths");
				dblAdhocUnsecured = rs.getDouble("disc_adhocunsecured");

			}
			if (apploantype.equalsIgnoreCase("A")
					|| apploantype.equalsIgnoreCase("T")
					|| apploantype.equalsIgnoreCase("C")
					|| apploantype.equals("H") || apploantype.equals("U")
					|| apploantype.equals("E")) {

				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selborrowerRegFacilities^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					String strFacilitycode = correctNull((String) rs
							.getString("facility_code"));
					String strFcailitycat = correctNull((String) rs
							.getString("facility_category"));
					String strFacilitheaid = correctNull((String) rs
							.getString("facility_headid"));

					double dblsanctionedamt = rs.getDouble("facility_sancamt");

					if (strFacilitycode.equalsIgnoreCase("SEC")) {
						if (strFcailitycat.equalsIgnoreCase("A")) {
							dblPartyTotalAdhoc = dblPartyTotalAdhoc
									+ dblsanctionedamt;
						}
						// For Calculating total fundbased term loan limits
						else if (strFcailitycat.equalsIgnoreCase("R")
								&& (strFacilitheaid.trim()
										.equalsIgnoreCase("1"))) {
							dblPartyTotalTermSanctionedFund = dblPartyTotalTermSanctionedFund
									+ dblsanctionedamt; // For Calculating Term
														// loan
							dblPartyTotalSanctionedFund = dblPartyTotalSanctionedFund
									+ dblsanctionedamt; // For Calculating Fund
														// Total
							dblPartyTotalreglmt = dblPartyTotalreglmt
									+ dblsanctionedamt; // For Calculating
														// Perparty
						}
						// For Calculating total fundbased workingcapital loan
						// limits
						else if (strFcailitycat.equalsIgnoreCase("R")
								&& (strFacilitheaid.trim()
										.equalsIgnoreCase("3"))) {
							dblPartyTotalWorkSanctionedFund = dblPartyTotalWorkSanctionedFund
									+ dblsanctionedamt;// For Calculating
														// Working Capital loan
							dblPartyTotalSanctionedFund = dblPartyTotalSanctionedFund
									+ dblsanctionedamt; // For Calculating Fund
														// Total
							dblPartyTotalreglmt = dblPartyTotalreglmt
									+ dblsanctionedamt; // For Calculating
														// Perparty
						} else if (strFcailitycat.equalsIgnoreCase("R")
								&& (strFacilitheaid.trim()
										.equalsIgnoreCase("4"))) {
							dblPartyTotalSanctionedNonFund = dblPartyTotalSanctionedNonFund
									+ dblsanctionedamt;// For Calculating Non
														// Fund Total
							dblPartyTotalreglmt = dblPartyTotalreglmt
									+ dblsanctionedamt; // For Calculating
														// Perparty
						}

					}
					// For Calculating total Unsecured loan limits
					else if (strFacilitycode.equalsIgnoreCase("UNSEC")) {
						if (strFcailitycat.equalsIgnoreCase("A")) {
							dblPartyTotalAdhocunsec = dblPartyTotalAdhocunsec
									+ dblsanctionedamt;
							dblPartyTotalAdhoc = dblPartyTotalAdhoc
									+ dblsanctionedamt;
						} else if (strFcailitycat.equalsIgnoreCase("R")
								&& (strFacilitheaid.trim()
										.equalsIgnoreCase("1"))) {
							dblPartyTotalTermSanctionedFund = dblPartyTotalTermSanctionedFund
									+ dblsanctionedamt; // For Calculating Term
														// loan
							dblPartyTotalSanctionedFund = dblPartyTotalSanctionedFund
									+ dblsanctionedamt; // For Calculating Fund
														// Total
							dblPartyTotalreglmt = dblPartyTotalreglmt
									+ dblsanctionedamt; // For Calculating
														// Perparty
						} else if (strFcailitycat.equalsIgnoreCase("R")
								&& (strFacilitheaid.trim()
										.equalsIgnoreCase("3"))) {
							dblPartyTotalWorkSanctionedFund = dblPartyTotalWorkSanctionedFund
									+ dblsanctionedamt;// For Calculating
														// Working Capital loan
							dblPartyTotalSanctionedFund = dblPartyTotalSanctionedFund
									+ dblsanctionedamt; // For Calculating Fund
														// Total
							dblPartyTotalreglmt = dblPartyTotalreglmt
									+ dblsanctionedamt; // For Calculating
														// Perparty
							dblPartyTotalUnsecured = dblPartyTotalUnsecured
									+ dblsanctionedamt; // For Calculating
														// Unsecured
						} else if (strFcailitycat.equalsIgnoreCase("R")
								&& (strFacilitheaid.trim()
										.equalsIgnoreCase("4"))) {
							dblPartyTotalSanctionedNonFund = dblPartyTotalSanctionedNonFund
									+ dblsanctionedamt;// For Calculating Non
														// Fund Total
							dblPartyTotalreglmt = dblPartyTotalreglmt
									+ dblsanctionedamt; // For Calculating
														// Perparty
						}
					}
					// For Calculating total LC 100% cash margin loan limits
					else if (strFacilitycode.equalsIgnoreCase("LC100")) {
						dblPartyTotalLCcash = dblPartyTotalLCcash
								+ dblsanctionedamt;
					}
					// For Calculating total LG 100% cash margin loan limits
					else if (strFacilitycode.equalsIgnoreCase("LG100")) {
						dblPartyTotalLGcash = dblPartyTotalLGcash
								+ dblsanctionedamt;
					}
					// For Calculating total Banks deposits loan limits
					else if (strFacilitycode.equalsIgnoreCase("BOD")) {
						dblPartyTotalBankdeposit = dblPartyTotalBankdeposit
								+ dblsanctionedamt;
					} else if (strFacilitycode.equalsIgnoreCase("LCPB")) {
						dblPartyTotalLCprimebank = dblPartyTotalLCprimebank
								+ dblsanctionedamt;
					}

					if (strFcailitycat.equalsIgnoreCase("A")
							&& AdhocMon < rs.getDouble("facility_months")) {
						AdhocMon = rs.getDouble("facility_months");
					}
				}

				// changes done by suresh as per the new requirement given by
				// ullhas on oct 25 2010
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("selborrowerallFacilities^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					if (correctNull((String) rs.getString("facility_code"))
							.equalsIgnoreCase("UNSEC")) {
						dblPartyTotalUnsecuredadvns = dblPartyTotalUnsecuredadvns
								+ rs.getDouble("facility_sancamt");
					}

					if (Helper.correctNull(rs.getString("facility_typefor"))
							.equalsIgnoreCase("P")) {
						if (rs1 != null)
							rs1.close();
						strQuery = SQLParser.getSqlQuery("sel_PS_oldaccnum^"
								+ strAppno + "^ and ps_app_sno='"
								+ correctNull(rs.getString("facility_sno"))
								+ "'");
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							if (!(Helper.correctNull(
									rs1.getString("PS_MODIFY_TERMS")).contains(
									"DLA") || Helper.correctNull(
									rs1.getString("PS_MODIFY_TERMS")).contains(
									"INLIM"))) {
								continue;
							}
						}
					}

					// Lending Powers Checked for Each facility Individually
					// added by Punitha

					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("chk_corpagrilendingpower^"
							+ strUserId + "^"
							+ correctNull(rs.getString("facility_code")));
					if (rs1.next()) {
						if (Double.parseDouble(Helper.correctDouble(rs1
								.getString("sanction_limit"))) < Double
								.parseDouble(Helper.correctDouble(rs
										.getString("facility_sancamt")))) {
							strExp = strExp
									+ "Discretionary lending power not sufficient for the limit ("
									+ Helper.correctNull(rs
											.getString("facility_sno")) + " - "
									+ Helper.correctNull(rs.getString("desc1"))
									+ ")";
						}
					} else {
						strExp = strExp
								+ "Lending power not Defined in setup for a facility ("
								+ Helper.correctNull(rs
										.getString("facility_sno")) + " - "
								+ Helper.correctNull(rs.getString("desc1"))
								+ ")";
					}
				}
				// end of changes

				/************************************************************************
				 * Short Review/ Extension loan cannot be approved same user in
				 * the year*
				 * ***********************************************************************/

				int exist = 0;
				if (apploantype.equals("E")) {
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser
							.getSqlQuery("selShorReviewExt_year_User^" + usrid
									+ "^<=^" + appno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						exist = rs.getInt(1);
					}

					if (rs != null) {
						rs.close();
					}
					if (exist >= 1) {
						strExp = strExp
								+ "Another application cannot be approved by the same user in the year";
						throw new Exception(strExp);
					}

				}

				/*************************************************************************************************/
				/************************************************************************
				 * To get Proposal values are in *
				 * ***********************************************************************/
				if (rs != null) {
					rs.close();
				}

				double dblProposalIn = 100000.0f;
				rs = DBUtils.executeLAPSQuery("selprosalvaluesin^" + strAppno);
				String strproposalin = "";
				if (rs.next()) {
					strproposalin = rs.getString("prop_valuesin");
				}

				if (strproposalin.equalsIgnoreCase("C")) {
					dblProposalIn = 10000000.0;
				} else if (strproposalin.equalsIgnoreCase("L")) {
					dblProposalIn = 100000.0;
				} else if (strproposalin.equalsIgnoreCase("A")
						|| strproposalin.equalsIgnoreCase("R")) {
					dblProposalIn = 1.00;
				} else {
					strExp = strExp
							+ "Error in getting datas for Amount wise  \\n\\n";
				}
				/*************************************************************************************************/
				// To check the discretionary limits
				dblPartyTotalreglmt = dblPartyTotalreglmt * dblProposalIn; // PER
																			// PARTY
																			// in
																			// actuals
				dblPartyTotalSanctionedFund = dblPartyTotalSanctionedFund
						* dblProposalIn; // Funndbased in actuals
				dblPartyTotalSanctionedNonFund = dblPartyTotalSanctionedNonFund
						* dblProposalIn;// Non Funndbased in actuals
				dblPartyTotalTermSanctionedFund = dblPartyTotalTermSanctionedFund
						* dblProposalIn;// TERMLOAN PER PARTY LIMIT
				dblPartyTotalWorkSanctionedFund = dblPartyTotalWorkSanctionedFund
						* dblProposalIn; // WORKING CAPITAL PER PARTY LIMIT
				dblPartyTotalUnsecured = dblPartyTotalUnsecured * dblProposalIn; // Total
																					// Unsecured
																					// Loan
				dblPartyTotalLCcash = dblPartyTotalLCcash * dblProposalIn;
				dblPartyTotalLGcash = dblPartyTotalLGcash * dblProposalIn;
				dblPartyTotalLCprimebank = dblPartyTotalLCprimebank
						* dblProposalIn;
				dblPartyTotalBankdeposit = dblPartyTotalBankdeposit
						* dblProposalIn;
				dblPartyTotalUnsecuredadvns = dblPartyTotalUnsecuredadvns
						* dblProposalIn;
				dblPartyTotalAdhoc = dblPartyTotalAdhoc * dblProposalIn; // ADHOC
																			// in
																			// actuals
				dblPartyTotalAdhocunsec = dblPartyTotalAdhocunsec
						* dblProposalIn;

				if (apploantype.equals("H")) {
					if ((dblAdhocLimit < dblPartyTotalAdhoc)) {
						strExp = strExp
								+ "Discretionary lending power for adhoc limit should not exceed more than "
								+ Helper.formatDoubleValue(dblAdhocLimit)
								+ "\\n\\n";
					}
					if ((dblAdhocUnsecured < dblPartyTotalAdhocunsec)) {
						strExp = strExp
								+ "Discretionary lending power for adhoc unsecured limit should not exceed more than "
								+ Helper.formatDoubleValue(dblAdhocUnsecured)
								+ "\\n\\n";
					}
					// if(dblAdhocMonths<AdhocMon)
					// {
					// strExp = strExp +
					// "Adhoc months should not exceed more than "+dblAdhocMonths+"\\n\\n";
					// }
				} else {
					if (dblPartyAnualCap < dblPartyTotalreglmt) {
						strExp = strExp
								+ "Per party discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblPartyAnualCap)
								+ "\\n\\n";
					}
					if ((dblPartyFund < dblPartyTotalSanctionedFund)) {
						strExp = strExp
								+ "Per party fund based discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblPartyFund)
								+ "\\n\\n";
					}
					if ((dblTermLoan < dblPartyTotalTermSanctionedFund)) {
						strExp = strExp
								+ "Per party Term Loan discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblTermLoan)
								+ "\\n\\n";
					}
					if ((dblWorkingCapital < dblPartyTotalWorkSanctionedFund)) {
						strExp = strExp
								+ "Per party Working Capital discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblWorkingCapital)
								+ "\\n\\n";
					}
					if ((dblPartyNonFund < dblPartyTotalSanctionedNonFund)) {
						strExp = strExp
								+ "Per party non-fund based discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblPartyNonFund)
								+ "\\n\\n";
					}
					if ((dblUnsecured < dblPartyTotalUnsecured)) {
						strExp = strExp
								+ "Per party Unsecured working capital discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblUnsecured)
								+ "\\n\\n";
					}
					// changes done by suresh as per the new requirement given
					// by ullhas on oct 25 2010
					if ((dblUnsecured < dblPartyTotalUnsecuredadvns)) {
						strExp = strExp
								+ "Per party Unsecured discretionary lending power (Including sub limits) should not exceed more than "
								+ Helper.formatDoubleValue(dblUnsecured)
								+ "\\n\\n";
					}
					// end of changes
					if ((dbllccashmargin < dblPartyTotalLCcash)) {
						strExp = strExp
								+ "Per party LC with 100% Cash Margin discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dbllccashmargin)
								+ "\\n\\n";
					}
					if ((dbllgcashmargin < dblPartyTotalLGcash)) {
						strExp = strExp
								+ "Per party LG with 100% Cash Margin discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dbllgcashmargin)
								+ "\\n\\n";
					}
					if ((dblbankdeposit < dblPartyTotalBankdeposit)) {
						strExp = strExp
								+ "Per party Bank's Own Deposit discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dblbankdeposit)
								+ "\\n\\n";
					}
					if ((dbllgpb < dblPartyTotalLCprimebank)) {
						strExp = strExp
								+ "Per party LC of prime bank discretionary lending power should not exceed more than "
								+ Helper.formatDoubleValue(dbllgpb) + "\\n\\n";
					}
					if ((dblAdhocLimit < dblPartyTotalAdhoc)) {
						strExp = strExp
								+ "Discretionary lending power for adhoc limit should not exceed more than "
								+ Helper.formatDoubleValue(dblAdhocLimit)
								+ "\\n\\n";
					}
					if ((dblAdhocUnsecured < dblPartyTotalAdhocunsec)) {
						strExp = strExp
								+ "Discretionary lending power for adhoc unsecured limit should not exceed more than "
								+ Helper.formatDoubleValue(dblAdhocUnsecured)
								+ "\\n\\n";
					}
					// if(dblAdhocMonths<AdhocMon)
					// {
					// strExp = strExp +
					// "Adhoc months should not exceed more than "+dblAdhocMonths+"\\n\\n";
					// }
				}
				dblPartyTotalreglmt = dblPartyTotalreglmt / dblProposalIn;

				// if(rs1!=null)
				// rs1.close();
				// rs1=DBUtils.executeLAPSQuery("seladhocfacilitydetails^"+strAppno);
				// if(rs1.next())
				// {
				// if(Helper.correctNull(rs1.getString("facility_status")).equalsIgnoreCase("ca"))
				// {
				// strExp = strExp +
				// "Base Facility for Adhoc Limit ("+Helper.correctNull(rs1.getString("sno"))+" - "+Helper.correctNull(rs1.getString("displaydesc"))+") Expired. Kindly change the Base facility.";
				// }
				// }
			} else {

				String strPrdCode = "";
				String strapplicationdeviated = "";
				String strDeviateduserid = "";
				boolean boolcheckdiscretionary = false;
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selperprdintrate^" + strAppno);
				if (rs.next()) {
					strPrdCode = correctNull((String) rs
							.getString("app_prdcode"));
					strapplicationdeviated = correctNull((String) rs
							.getString("app_isdeviated"));
					strDeviateduserid = correctNull((String) rs
							.getString("app_deviateduserid"));
				}
				if (!strapplicationdeviated.equalsIgnoreCase("Y")) {
					boolcheckdiscretionary = true;
				} else if (strapplicationdeviated.equalsIgnoreCase("Y")) {
					if (strDeviateduserid.equalsIgnoreCase("")) {
						strExp = strExp
								+ "After Approving the Deviation only Application can be approved";
					} else {
						boolcheckdiscretionary = true;
					}
				}

				if (strProposalType.equalsIgnoreCase("P")) {
					if (rs1 != null)
						rs1.close();
					strQuery = SQLParser.getSqlQuery("sel_PS_oldaccnum^"
							+ strAppno + "^ and ps_app_sno='1'");
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						if (Helper
								.correctNull(rs1.getString("PS_MODIFY_TERMS"))
								.contains("DLA")) {
							boolcheckdiscretionary = true;
						} else {
							boolcheckdiscretionary = false;
						}
					}
				}
				if (boolcheckdiscretionary) {
					if (rs != null)
						rs.close();

					rs = DBUtils.executeLAPSQuery("selLoanAmt^" + strAppno);
					if (rs.next()) {
						dblPrdLoanAmt = rs.getDouble("loanamt");
					}
					if (dblPrdLoanAmt > 0) {
						dblPrdLoanAmt = dblPrdLoanAmt / 100000; // values are
																// converting
																// from rupees
																// to lacs
					}
					strQuery = SQLParser.getSqlQuery("selretailsanctionlimit^"
							+ strPrdCode + "^" + strUserId);
					if (rs != null)
						rs.close();

					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						dblPrdSancLimit = rs.getDouble("sanction_limit");
					}
					if (dblPrdSancLimit > 0) {
						dblPrdSancLimit = dblPrdSancLimit / 100000; // values
																	// are
																	// converting
																	// from
																	// rupees to
																	// lacs
					}
					if (dblPrdSancLimit < dblPrdLoanAmt) {
						strExp = strExp
								+ "Discretionary lending power should be within your powers";// not
																								// exceed
																								// more
																								// than
																								// "+jtn.format(dblPrdSancLimit)
																								// ;
					}
					dblPartyTotalreglmt = dblPrdLoanAmt;
				}
			}
			if (!strExp.trim().equals("$")) {
				throw new Exception(strExp);
			}
			// double dblPartyExistingNonFund=0;
			// double dblGroupExistingFund=0;
			// double dblGroupProposedFund=0;
			// double dblGroupSanctionedFund=0;
			// double dblGroupExistingNonFund=0;
			// double dblGroupProposedNonFund=0;
			// double dblGroupSanctionedNonFund=0;
			//					
			// double dblAnnualPerBorrower=0;
			//					
			// double dblGroupSanctionedTotalFund=0;
			// double dblGroupSanctionTotalNonFund=0;
			//					
			// double dblgroupFundLimit=0;
			// double dblgroupNonFundLimit=0;
			// double dblTotalGroupLimit=0;
			// double dblTotalAdhocLimit=0;

			// String IsGroup="N",strGroup="";
			// int intGroup=0;
			// /**************************************************************
			// * To check Adhoc limits
			// **************************************************************/
			// if(rs != null)
			// rs.close();
			// rs=DBUtils.executeLAPSQuery("selSancadhocfacilities^"+strAppno);
			// String strAdhocMonths="";
			// int AdhocMon=0;
			// //double dblAdhocExistingFund=0;
			// //double dblAdhocExistingNonFund=0;
			// //double dblAdhocProposedFund=0;
			// //double dblAdhocProposedNonFund=0;
			// //double dblMonths=0;
			// double dblAdhocFund=0;
			// double dblAdhocNonFund=0;
			// double dblAdhocFundLimit=0;
			// double dblAdhocNonFundLimit=0;
			// while(rs.next())
			// {
			// String strAdhocFacType =
			// correctNull((String)rs.getString("facility_for"));
			// // dblMonths = rs.getDouble("facility_months");
			// double dblval1=0,dblval2=0,dblval3=0;
			// if(strAdhocFacType.trim().equals("F"))
			// {
			// dblval1 = rs.getDouble("facility_existing");
			// dblAdhocFund = rs.getDouble("facility_sancamt");
			//												
			// dblTotalAdhocProposedFund = dblTotalAdhocProposedFund +
			// dblAdhocFund;
			// dblval3=dblval1+dblAdhocFund;
			// dblAdhocFundLimit=dblAdhocFundLimit+dblval3;
			// }
			// else if(strAdhocFacType.trim().equals("NF"))
			// {
			// dblval1 = rs.getDouble("facility_existing");
			// dblval2 = rs.getDouble("facility_sancamt");
			// dblAdhocNonFund = dblval2 - dblval1;
			// dblTotalAdhocProposedNonFund = dblTotalAdhocProposedNonFund +
			// dblAdhocNonFund;
			// dblval3=dblval1+dblAdhocNonFund;
			// dblAdhocNonFundLimit=dblAdhocNonFundLimit+dblval3;
			// }
			// }
			// dblAdhocProposed = dblTotalAdhocProposedFund +
			// dblTotalAdhocProposedNonFund;
			// dblTotalProposedAmt=dblPartyPropAggregate+dblAdhocProposed;
			// /***************************************************************************
			// * Adhoc Months
			// ***********************************************************/
			//										
			// if(rs != null)
			// rs.close();
			//					            		
			// rs=DBUtils.executeLAPSQuery("selAdhocMonths^"+strAppno);
			// if(rs.next())
			// {
			// strAdhocMonths=correctNull(rs.getString("facility_fmonths"));
			// if(!strAdhocMonths.equalsIgnoreCase("")){
			// AdhocMon=Integer.parseInt(strAdhocMonths);}
			// }
			// Exposure
			// double dblPercSancFund=0;
			// if(dblAdhocPercentage>0)
			// {
			// dblPercSancFund = (dblSanctionedFund * (dblAdhocPercentage/100));
			// }
			// if((dblPercSancFund>0) && (dblAdhocLimit>0))
			// {
			// if(dblPercSancFund<dblAdhocLimit)
			// {
			// dblAdhocLimit = dblPercSancFund;
			// }
			// }
			// else if((dblPercSancFund>0) && (dblAdhocLimit==0))
			// {
			// dblAdhocLimit = dblPercSancFund;
			// }
			// dblTotalGroupLimit=dblTotalGroupFundLimit+dblTotalGroupNonFundLimit;
			// if(!strGroup.trim().equals(""))
			// {
			// intGroup = Integer.parseInt(strGroup);
			// }
			//
			// if(intGroup>0)
			// {
			// IsGroup ="Y";
			// }

			/*
			 * if(IsGroup.trim().equals("Y")) {
			 * 
			 * if(rs != null) rs.close();
			 * 
			 * rs=DBUtils.executeLAPSQuery("selgroupSancfacilities^"+strAppno);
			 * while(rs.next()) { String strFacilityType =
			 * correctNull((String)rs.getString("facility_for"));
			 * if(strFacilityType.trim().equals("F")) { //dblGroupExistingFund =
			 * rs.getDouble("facility_existing"); //dblGroupProposedFund =
			 * rs.getDouble("facility_sancamt"); //dblGroupSanctionedFund =
			 * dblGroupProposedFund-dblGroupExistingFund;
			 * //dblGroupSanctionedTotalFund
			 * =dblGroupSanctionedTotalFund+dblGroupSanctionedFund; } else
			 * if(strFacilityType.trim().equals("NF")) {
			 * //dblGroupExistingNonFund = rs.getDouble("facility_existing");
			 * //dblGroupProposedNonFund = rs.getDouble("facility_sancamt");
			 * //dblGroupSanctionedNonFund =
			 * dblGroupProposedNonFund-dblGroupExistingNonFund;
			 * //dblGroupSanctionTotalNonFund
			 * =dblGroupSanctionTotalNonFund+dblGroupSanctionedNonFund; } } }
			 */
			// dblGroupProposed = dblGroupSanctionedTotalFund +
			// dblGroupSanctionTotalNonFund;
			// To check annual cap
			// find financial year
			/*
			 * int intYear=0,intMonth=0; String strFrom="",strTo="";
			 * 
			 * if(rs != null) rs.close();
			 * 
			 * rs=DBUtils.executeLAPSQuery("selcurrentyear"); if(rs.next()) {
			 * intYear = rs.getInt("curryear"); intMonth =
			 * rs.getInt("curmonth"); if((intMonth>=4) && (intMonth<=12)) {
			 * strFrom = "01/04/"+Integer.toString(intYear); strTo =
			 * "31/03/"+Integer.toString(intYear+1); } else { strFrom =
			 * "01/04/"+Integer.toString(intYear-1); strTo =
			 * "31/03/"+Integer.toString(intYear); } }
			 */
			// double dblApprovedPerBorrowercom=0;
			// double dblApprovedPerBorrowerper=0;
			/*
			 * strQuery=SQLParser.getSqlQuery("seluserapprovedperborrowercom^"+strAppno
			 * +"^"+strUserId+"^"+strFrom+"^"+strTo); if(rs != null) rs.close();
			 * 
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * dblApprovedPerBorrowercom = rs.getDouble("approvedamt"); }
			 */

			/*
			 * strQuery=SQLParser.getSqlQuery("seluserapprovedperborrowerper^"+strUserId
			 * +"^"+strFrom+"^"+strTo); if(rs != null) rs.close();
			 * 
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * dblApprovedPerBorrowerper = rs.getDouble("approvedamt"); }
			 */

			// dblAnnualPerBorrower = dblApprovedPerBorrowercom +
			// dblApprovedPerBorrowerper + dblPartyDiff;
			// dblAnnualPerBorrower = dblApprovedPerBorrowercom;
			/*
			 * strQuery=SQLParser.getSqlQuery("seluserapprovedpergroup^"+strAppno
			 * +"^"+strUserId+"^"+strFrom+"^"+strTo); if(rs != null) rs.close();
			 * 
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * dblApprovedPerGroup = rs.getDouble("approvedamt"); }
			 */
			// dblAnnualPerGroup = dblApprovedPerGroup + dblGroupDiff;
			// To check export credit limit
			/*
			 * if(rs != null) rs.close();
			 * 
			 * rs=DBUtils.executeLAPSQuery("selexportcreditlimit^"+strAppno);
			 * double dblExportCreditExistingFund=0; double
			 * dblExportCreditProposedFund=0; double
			 * dblExportCreditExistingNonFund=0; double
			 * dblExportCreditProposedNonFund=0; while(rs.next()) { String
			 * strFacType = correctNull((String)rs.getString("facility_for"));
			 * double dblval1=0,dblval2=0; if(strFacType.trim().equals("F")) {
			 * dblval1 = rs.getDouble("existing"); dblval2 =
			 * rs.getDouble("proposed"); dblExportCreditExistingFund =
			 * dblExportCreditExistingFund + dblval1;
			 * dblExportCreditProposedFund = dblExportCreditProposedFund +
			 * dblval2; } else if(strFacType.trim().equals("NF")) { dblval1 =
			 * rs.getDouble("existing"); dblval2 = rs.getDouble("proposed");
			 * dblExportCreditExistingNonFund = dblExportCreditExistingNonFund +
			 * dblval1; dblExportCreditProposedNonFund =
			 * dblExportCreditProposedNonFund + dblval2; } }
			 */

			// dblExportCreditProposed = dblExportCreditProposedFund +
			// dblExportCreditProposedNonFund;
			/*
			 * double dblExportCreditLimit=0; if(intUserClass <740 ) {
			 * dblExportCreditPower = (dblPartyFund (125/100)); // 125 percent
			 * of fund based limit for below GM } else if((intUserClass >= 740)
			 * && ( intUserClass < 800 ) ) { dblExportCreditPower =
			 * (dblPartyFund (150/100)); // 150 percent of fund based limit for
			 * GM }
			 */

			// if(rs != null)
			// rs.close();
			//					
			// rs=DBUtils.executeLAPSQuery("selunsecuredfacilities^"+strAppno);
			// //double dblUnsecExisting=0;
			// double dblUnsecProposed=0;
			// //double dblUnsecSanctioned=0;
			// if(rs.next())
			// {
			// //dblUnsecExisting = rs.getDouble("existing");
			// dblUnsecProposed = rs.getDouble("sanctioned");
			// }
			// dblUnsecProposed=dblUnsecProposed*dblProposalIn;
			// dblAnnualPerBorrower=dblAnnualPerBorrower*dblProposalIn;
			// dblExportCreditProposed=dblExportCreditProposed*dblProposalIn;

			// else if(strPrdType.trim().equalsIgnoreCase("T"))
			// {
			// if(rs != null)
			// rs.close();
			//				
			// rs=DBUtils.executeLAPSQuery("selOPSborrowerRegFacilities^"+strAppno);
			//				
			//
			// String IsGroup="N";
			// //String strGroup="";
			// //int intGroup=0;
			// while(rs.next())
			// {
			// String strFacilityType =
			// correctNull((String)rs.getString("facility_for"));
			// String strFacilitheaid =
			// correctNull((String)rs.getString("facility_headid"));
			// if(strFacilityType.trim().equals("F"))
			// {
			// dblPartyExistingFund = rs.getDouble("facility_existing");
			// dblPartyProposedFund = rs.getDouble("facility_sancamt");
			// dblPartyTotalSanctionedFund=dblPartyTotalSanctionedFund+dblPartyProposedFund;
			// dblParyTotalExistingFund=dblParyTotalExistingFund+dblPartyExistingFund;
			// dblTotalGroupFundLimit=dblTotalGroupFundLimit+dblPartyProposedFund;
			// }
			// else if(strFacilityType.trim().equals("NF"))
			// {
			// dblPartyProposedNonFund = rs.getDouble("facility_sancamt");
			// dblPartyTotalSanctionedNonFund=dblPartyTotalSanctionedNonFund+dblPartyProposedNonFund;
			// dblTotalGroupNonFundLimit=dblTotalGroupNonFundLimit+dblPartyProposedNonFund;
			// }
			// if((strFacilityType.trim().equals("F")) &&
			// (strFacilitheaid.trim().equalsIgnoreCase("1")))
			// {
			// dblPartyTermProposedFund = rs.getDouble("facility_sancamt");
			// dblPartyTermSanctionedFund = dblPartyTermProposedFund;
			// dblPartyTotalTermSanctionedFund=dblPartyTotalTermSanctionedFund+dblPartyTermSanctionedFund;
			// }
			// else if((strFacilityType.trim().equals("F")) &&
			// (strFacilitheaid.trim().equalsIgnoreCase("3")))
			// {
			// dblPartyWorkProposedFund = rs.getDouble("facility_sancamt");
			// dblPartyWorkSanctionedFund = dblPartyWorkProposedFund;
			// dblPartyTotalWorkSanctionedFund=dblPartyTotalWorkSanctionedFund+dblPartyWorkSanctionedFund;
			// }
			// }
			// dblSanctionedFund = dblParyTotalExistingFund;
			// dblPartyPropAggregate = dblPartyTotalSanctionedFund +
			// dblPartyTotalSanctionedNonFund;//PARTY LIMIT
			//			
			// // To check Adhoc limits
			// if(rs != null)
			// rs.close();
			// rs=DBUtils.executeLAPSQuery("selSancadhocfacilities^"+strAppno);
			// String strAdhocMonths="";
			// int AdhocMon=0;
			//				
			// while(rs.next())
			// {
			// String strAdhocFacType =
			// correctNull((String)rs.getString("facility_for"));
			// if(strAdhocFacType.trim().equals("F"))
			// {
			// dblTotalAdhocProposedFund = dblTotalAdhocProposedFund +
			// rs.getDouble("facility_sancamt");
			// }
			// else if(strAdhocFacType.trim().equals("NF"))
			// {
			// dblTotalAdhocProposedNonFund = dblTotalAdhocProposedNonFund +
			// rs.getDouble("facility_sancamt");
			// }
			// }
			//
			// dblAdhocProposed = dblTotalAdhocProposedFund +
			// dblTotalAdhocProposedNonFund;
			// dblTotalProposedAmt=dblPartyPropAggregate+dblAdhocProposed;
			//					
			// //Exposure
			// //dblTotalRegAdhocLimit=dblTotalGroupLimit+dblTotalAdhocLimit;
			// double dblPercSancFund=0;
			// if(dblAdhocPercentage>0)
			// {
			// dblPercSancFund = (dblSanctionedFund * (dblAdhocPercentage/100));
			// }
			// if((dblPercSancFund>0) && (dblAdhocLimit>0))
			// {
			// if(dblPercSancFund<dblAdhocLimit)
			// {
			// dblAdhocLimit = dblPercSancFund;
			// }
			// }
			// else if((dblPercSancFund>0) && (dblAdhocLimit==0))
			// {
			// dblAdhocLimit = dblPercSancFund;
			// }
			//				
			// //------------------------------------------------------------------------------------
			// //Adhoc Months
			//				
			// if(rs != null)
			// rs.close();
			//          		
			// rs=DBUtils.executeLAPSQuery("selAdhocMonths^"+strAppno);
			// if(rs.next())
			// {
			// strAdhocMonths=correctNull(rs.getString("facility_fmonths"));
			// if(!strAdhocMonths.equalsIgnoreCase("")){
			// AdhocMon=Integer.parseInt(strAdhocMonths);}
			// }
			// //-------------------------------------------------------------------
			//						
			// // if(rs != null)
			// // rs.close();
			// //
			// //
			// rs=DBUtils.executeLAPSQuery("selunsecuredfacilities^"+strAppno);
			// // double dblUnsecProposed=0;
			// // double dblUnsecSanctioned=0;
			// // if(rs.next())
			// // {
			// // dblUnsecProposed = rs.getDouble("sanctioned");
			// // dblUnsecSanctioned=dblUnsecSanctioned+dblUnsecProposed;
			// // }
			//
			//
			// // To check the discretionary limits
			//				
			// if(dblPartyAnualCap<dblTotalProposedAmt)
			// {
			// strExp = strExp +
			// "Per party discretionary lending power should not exceed more than "+jtn.format(dblPartyAnualCap);
			// }
			// else if(dblPartyFund<dblPartyTotalSanctionedFund)
			// {
			// strExp = strExp +
			// "Per party fund based discretionary lending power should not exceed more than "+jtn.format(dblPartyFund);
			// }
			// else if(dblTermLoan<dblPartyTotalTermSanctionedFund)
			// {
			// strExp = strExp +
			// "Per party Term Loan discretionary lending power should not exceed more than "+jtn.format(dblTermLoan);
			// }
			// else if(dblWorkingCapital<dblPartyTotalWorkSanctionedFund)
			// {
			// strExp = strExp +
			// "Per party Working Capital discretionary lending power should not exceed more than "+jtn.format(dblWorkingCapital);
			// }
			// else if(dblPartyNonFund<dblPartyTotalSanctionedNonFund)
			// {
			// strExp = strExp +
			// "Per party non-fund based discretionary lending power should not exceed more than "+jtn.format(dblPartyNonFund);
			// }
			// else if(dblAdhocLimit1<dblAdhocProposed)
			// {
			// strExp = strExp +
			// "Discretionary lending power for adhoc limit should not exceed more than "+jtn.format(dblAdhocLimit);
			// }
			// else if(dblPartyFund< (dblAdhocProposed + dblSanctionedFund))
			// {
			// strExp = strExp +
			// "Discretionary lending power for adhoc facilities should not exceed more than "+jtn.format(dblPartyFund)
			// +" of fund based limit";
			// }
			// else if(dblAdhocMonths<AdhocMon)
			// {
			// strExp = strExp +
			// "Adhoc months should not exceed more than "+dblAdhocMonths;
			// }
			// // else if((dblGroupLimit<dblTotalProposedAmt) &&
			// (IsGroup.trim().equals("Y")))
			// // {
			// // strExp = strExp +
			// "Discretionary lending power should not exceed more than "+jtn.format(dblGroupLimit)
			// +" per group";
			// // }
			// // else if(dblUnsecured<dblUnsecSanctioned)
			// // {
			// // strExp = strExp +
			// "Discretionary lending power for per party Unsecured loan should not exceed more than "+jtn.format(dblUnsecured);
			// // }
			// }
		} catch (Exception e) {
			throw new EJBException(e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e) {
				throw new EJBException(e.toString());
			}
		}
		return dblPartyTotalreglmt;
	}

	public HashMap getNPAHistory(HashMap hshValues)  {
		String strAppno = "";
		ResultSet rs = null;
		ResultSet rs1 = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrFromflow = new ArrayList();
		ArrayList arrToflow = new ArrayList();
		ArrayList arrFromUsr = new ArrayList();
		ArrayList arrToUsr = new ArrayList();
		ArrayList arrDate = new ArrayList();
		ArrayList arrMailType = new ArrayList();

		try {

			strAppno = correctNull((String) hshValues.get("appno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("npa_appno"));
			}
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("npaworkflowhistory^" + strAppno);
			while (rs.next()) {
				arrFromUsr.add(rs.getString(1));
				arrToUsr.add(rs.getString(2));
				arrFromflow.add(rs.getString(3));
				arrToflow.add(rs.getString(4));
				arrDate.add(rs.getString(5));
				arrMailType.add(rs.getString(6));
			}
			/*
			 * if(strAction.trim().equalsIgnoreCase("send")) {
			 * hshRecord.put("status","success"); }
			 */
			hshRecord.put("arrFromUsr", arrFromUsr);
			hshRecord.put("arrToUsr", arrToUsr);
			hshRecord.put("arrFromflow", arrFromflow);
			hshRecord.put("arrToflow", arrToflow);
			hshRecord.put("arrDate", arrDate);
			hshRecord.put("arrMailType", arrMailType);
			hshRecord.put("Stateflag", hshValues.get("Stateflag"));

			return hshRecord;
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}
	}

	public HashMap getNPAAction(HashMap hshValues)  {

		String strAppno = "";
		String strQuery = "", strQuery1 = "";
		String strAppStatus = "";
		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		ResultSet rs6 = null;

		HashMap hshRecord = new HashMap();
		ArrayList arrFlowpoint = new ArrayList();
		ArrayList arrDone = new ArrayList();
		ArrayList arrClassDesc = new ArrayList();
		ArrayList arrMaxclass = new ArrayList();
		ArrayList arrAction = new ArrayList();
		// ArrayList arrFunction = new ArrayList();
		String strusrid = (String) hshValues.get("strUserId");
		String npatype = "";
		HashMap hshResult = new HashMap();
		String approveflag = "";

		try {
			strAppno = Helper.correctNull((String) hshValues.get("appno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = Helper.correctNull((String) hshValues
						.get("npa_appno"));
			}
			npatype = Helper.correctNull((String) hshValues
					.get("hidmoduletype"));

			String appstatus = "";
			String state = "";
			String state1 = "";
			strQuery = SQLParser.getSqlQuery("getnpastatusforworkflow^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				appstatus = Helper.correctNull((String) rs
						.getString("npa_status"));
				hshRecord.put("appholder", Helper.correctNull((String) rs
						.getString("npa_holduser")));
				hshRecord.put("processedby", Helper.correctNull((String) rs
						.getString("npa_processedby")));
				log
						.info("--------------------->>>>>>>>>>>>>>>>>>>>>>>>.............^^^^^^^^^^^^^^^^"
								+ Helper.correctNull((String) rs
										.getString("npa_processedby")));

			}
			if ((appstatus.equalsIgnoreCase("op"))
					|| (appstatus.equalsIgnoreCase("pp"))) {
				state = "p";
				strQuery = SQLParser.getSqlQuery("npaworkflowsel1^" + npatype
						+ "^" + state);
				strAppStatus = "op";
			} else if (appstatus.equalsIgnoreCase("pa")
					|| appstatus.equalsIgnoreCase("ca")) {
				state = "p";
				state1 = "a";
				strQuery = SQLParser.getSqlQuery("npaworkflowforapp^" + npatype
						+ "^" + state + "^" + state1);
			} else if (appstatus.equalsIgnoreCase("pr")
					|| appstatus.equalsIgnoreCase("cr")) {
				state = "p";
				state1 = "r";
				// strQuery=SQLParser.getSqlQuery("npaworkflowsel1^"+npatype+"^"+state);
				strQuery = SQLParser.getSqlQuery("npaworkflowforapp^" + npatype
						+ "^" + state + "^" + state1);
			}

			String strId = "7";

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strQuery = SQLParser.getSqlQuery("npaworkflowsel4^" + strAppno
						+ "^" + rs.getString(1));
				if (rs1 != null)
					rs1.close();

				if (rs2 != null)
					rs2.close();

				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrDone.add(rs1.getString(1));
				}
				arrFlowpoint.add(rs.getString(1));
				arrAction.add(rs.getString(2));
				arrMaxclass.add(rs.getString(3));

				strQuery1 = SQLParser.getSqlQuery("selclasslist_workflow^"
						+ strId + "^" + correctNull((String) rs.getString(3)));
				rs2 = DBUtils.executeQuery(strQuery1);
				if (rs2.next()) {
					arrClassDesc.add(rs2.getString(4));
				}

				// arrFunction.add(rs.getString(4));

			}
			if (strAppStatus.equalsIgnoreCase("op")) {
				arrDone.add("0");
			} else {
				arrDone.add("1");
			}
			if ((appstatus.equalsIgnoreCase("op"))
					|| (appstatus.equalsIgnoreCase("pp"))) {
				strQuery = SQLParser.getSqlQuery("npaworkflowpoint^" + strAppno
						+ "^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("strCurrFlowPoint", rs.getString(1));
					hshRecord.put("strDate", rs.getString(2));
				} else {
					strQuery = SQLParser.getSqlQuery("npaworkflowpoint2^"
							+ strAppno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshRecord.put("strCurrFlowPoint", "1");
						hshRecord.put("strDate", rs.getString(1));
					}
				}
			} else if (appstatus.equalsIgnoreCase("pr")
					|| appstatus.equalsIgnoreCase("cr")) {
				strQuery = SQLParser.getSqlQuery("npaworkflowpoint2^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("strCurrFlowPoint", "17");
					hshRecord.put("strDate", rs.getString(1));
				}
			} else if (appstatus.equalsIgnoreCase("pa")
					|| appstatus.equalsIgnoreCase("ca")) {
				strQuery = SQLParser.getSqlQuery("npaworkflowpoint2^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("strCurrFlowPoint", "9");
					hshRecord.put("strDate", rs.getString(1));
				}
			}

			hshRecord.put("appstatus", strAppStatus);
			hshRecord.put("arrFlowpoint", arrFlowpoint);
			hshRecord.put("arrAction", arrAction);
			hshRecord.put("arrMaxclass", arrMaxclass);
			hshRecord.put("arrClassDesc", arrClassDesc);
			// hshRecord.put("arrFunction",arrFunction);
			hshRecord.put("arrDone", arrDone);

			String strAction = correctNull((String) hshValues.get("hidAction"));
			if (strAction.trim().equalsIgnoreCase("send")) {
				hshRecord.put("status", "success");
			} else if (strAction.trim().equalsIgnoreCase("approve")) {
				hshRecord.put("status", "approve");
			} else if (strAction.trim().equalsIgnoreCase("reject")) {
				hshRecord.put("status", "reject");
			} else if (strAction.trim().equalsIgnoreCase("save")) {
				hshRecord.put("status", "save");
			}
			strQuery = SQLParser.getSqlQuery("getnpaauthority^" + npatype);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("npa_module", Helper.correctNull((String) rs
						.getString("npa_module")));
				hshRecord.put("app_class", Helper.correctNull((String) rs
						.getString("npa_approve")));
				hshRecord.put("rej_class", Helper.correctNull((String) rs
						.getString("npa_reject")));
				hshRecord.put("skip_class", Helper.correctNull((String) rs
						.getString("npa_skip")));
			}
			if (!(strAction.trim().equalsIgnoreCase("approve") || strAction
					.trim().equalsIgnoreCase("save"))) {
				hshResult = (HashMap) EJBInvoker.executeStateLess("npacommon",
						hshValues, "getdelegatedwork");
				approveflag = Helper.correctNull((String) hshResult
						.get("approveflag"));
			}
			hshRecord.put("approveflag", approveflag);

			rs = DBUtils.executeLAPSQuery("workflowusersanlimit^" + strusrid);
			if (rs.next()) {
				hshRecord.put("usrfunction", correctNull(rs
						.getString("usr_function")));
			}
			/*
			 * strQuery=SQLParser.getSqlQuery("selnpaapplnholderhead^"+strAppno);
			 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
			 * hshRecord.put("enableorgselect"
			 * ,correctNull(rs.getString("org_head"
			 * )).equalsIgnoreCase(strUserName)?"Y":"N"); } else {
			 * hshRecord.put("enableorgselect","Y"); }
			 */

			return hshRecord;
		}

		catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

				if (rs1 != null) {
					rs1.close();
				}

				if (rs2 != null) {
					rs2.close();
				}
				if (rs6 != null) {
					rs6.close();
				}

			} catch (Exception e1) {
				throw new EJBException(e1.getMessage());
			}
		}
	}

	public HashMap updateNPAAction(HashMap hshValues)  {
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);
		String strAppno = "";
		ResultSet rs1 = null;
		String strAction = "";
		HashMap hshResult = null;
		hshResult = new HashMap();
		String npatype = "";
		String strFromflowpoint = "";
		String strToflowpoint = "";
		String strFromuserid = "";
		String strTouserid = "";
		ResultSet rs = null;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		int intupdatesize = 0;
		StringBuilder sbAuditData = new StringBuilder();

		try {
			strAction = (String) hshValues.get("hidAction");
			strAppno = Helper.correctNull((String) hshValues.get("appno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = Helper.correctNull((String) hshValues
						.get("npa_appno"));
			}
			strFromflowpoint = (String) hshValues.get("mail_fromflowpoint");
			strToflowpoint = (String) hshValues.get("mail_toflowpoint");
			strFromuserid = (String) hshValues.get("strUserId");
			strTouserid = (String) hshValues.get("hidmail_tousrid");
			npatype = (String) hshValues.get("hidmoduletype");
			// npa_appno=Helper.correctNull((String)hshValues.get("npa_appno"));

			if (strTouserid.equals("")) {
				strTouserid = strFromuserid;
			}

			if (rs != null)
				rs.close();

			if (strAction.equalsIgnoreCase("send")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				intupdatesize++;
				hshQuery.put("strQueryId", "insnpamailbox");
				arrValues.add(strAppno);
				arrValues.add(strFromuserid);
				arrValues.add(strTouserid);
				arrValues.add(strFromflowpoint);
				arrValues.add(strToflowpoint);
				arrValues.add(npatype);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("" + intupdatesize, hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				intupdatesize++;
				hshQuery.put("strQueryId", "updnpaapplications");
				arrValues.add(strTouserid);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("" + intupdatesize, hshQuery);

				if (correctNull((String) hshValues.get("appstatus"))
						.equalsIgnoreCase("Open/Pending")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					intupdatesize++;
					hshQuery.put("strQueryId", "updnpaapplnstatus");
					arrValues.add("pp");
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("" + intupdatesize, hshQuery);
				}

				hshQueryValues.put("size", "" + intupdatesize);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData.append("~ Application Sent By =" + strFromuserid)
						.append("~ Application Sent To =" + strTouserid)
						.append("~ From FlowPoint =" + strFromflowpoint)
						.append("~ To FlowPoint =" + strToflowpoint);

			} else if (strAction.equalsIgnoreCase("approve")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "app_npaapplication");
				arrValues.add("pa");
				arrValues.add(strFromuserid);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
				sbAuditData.append("~ Application Approved");

			} else if (strAction.equalsIgnoreCase("reject")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "app_npaapplication");
				arrValues.add("pr");
				arrValues.add(strFromuserid);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData.append("~ Application Rejected");
			} else if (strAction.equalsIgnoreCase("undo")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "app_npaapplication");
				arrValues.add("op");
				arrValues.add(strFromuserid);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData
						.append("~ Application Status Changed to Open/Pending");

			} else if (strAction.equalsIgnoreCase("save")) {
				if (correctNull((String) hshValues.get("hidmoduletype"))
						.equalsIgnoreCase("STAT")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_npaapplnclosed");//
					arrValues.add("ca");
					arrValues.add(strFromuserid);
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "1");
					hshQueryValues.put("1", hshQuery);
				} else {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "npaapplicationsave");//
					arrValues.add(strFromuserid);
					arrValues.add(strAppno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "1");
					hshQueryValues.put("1", hshQuery);
				}

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData.append("~ Application Freezed");

			}

			AuditTrial.auditNewLog(hshValues, "374", strAppno, sbAuditData
					.toString(), "");

		} catch (Exception e) {
			throw new EJBException(e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}
		return hshResult;

	}

	public HashMap getTermsConditions(HashMap hshValues)  {
		HashMap hshResult = new HashMap();
		ResultSet rs = null;
		String strQuery = "";
		ArrayList arrRow = new ArrayList();
		String strAppno = Helper.correctNull((String) hshValues.get("appno"));
		try {
			String strorgname = Helper.correctNull((String) hshValues
					.get("strOrgName"));
			strQuery = SQLParser.getSqlQuery("seltermsandconditionval^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				ArrayList arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("terms_termdesc")));
				arrRow.add(arrCol);
			}
			hshResult.put("arrRow", arrRow);
			hshResult.put("strorgname", strorgname);

		} catch (Exception ae) {
			throw new EJBException(ae.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}

		return hshResult;

	}

	public HashMap updateMONAction(HashMap hshValues)  {
		// String strCbsid="";
		String strAction = "";
		HashMap hshResult = null;
		hshResult = new HashMap();
		String strFromflowpoint = "";
		String strToflowpoint = "";
		String strFromuserid = "";
		String strTouserid = "";
		String strmmrno = "";
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();

		try {
			strAction = (String) hshValues.get("hidAction");
			// strCbsid=(String)hshValues.get("cbsid");
			strFromflowpoint = (String) hshValues.get("mail_fromflowpoint");
			strToflowpoint = (String) hshValues.get("mail_toflowpoint");
			strFromuserid = (String) hshValues.get("strUserId");
			strTouserid = (String) hshValues.get("hidmail_tousrid");
			strmmrno = (String) hshValues.get("mmrno");

			String strcbsname = correctNull((String) hshValues.get("cbsname"));
			// String strmonth =
			// correctNull((String)hshValues.get("mon_month"));
			// String stryear = correctNull((String)hshValues.get("mon_year"));

			if (!strmmrno.equalsIgnoreCase("")) {
				if (strTouserid.equals("")) {
					strTouserid = strFromuserid;
				}

				if (strAction.equalsIgnoreCase("send")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "insmonmailbox");
					// arrValues.add(strCbsid);
					arrValues.add(strFromuserid);
					arrValues.add(strTouserid);
					arrValues.add(strFromflowpoint);
					arrValues.add(strToflowpoint);
					// arrValues.add(strmonth);
					// arrValues.add(stryear);
					arrValues.add(strcbsname);
					arrValues.add(strmmrno);
					arrValues.add("C");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_monmmrstatus");
					arrValues.add("P");
					arrValues.add(strTouserid);
					arrValues.add(strmmrno);
					// arrValues.add(strCbsid);
					// arrValues.add(stryear);
					// arrValues.add(strmonth);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", "2");
					hshQueryValues.put("2", hshQuery);

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
			}

		} catch (Exception e) {
			throw new EJBException(e.toString());
		}
		return hshResult;
	}

	public HashMap getMONHistory(HashMap hshValues)  {
		// String strAppno="";
		ResultSet rs = null;
		ResultSet rs1 = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrFromflow = new ArrayList();
		ArrayList arrToflow = new ArrayList();
		ArrayList arrFromUsr = new ArrayList();
		ArrayList arrToUsr = new ArrayList();
		ArrayList arrDate = new ArrayList();
		ArrayList arrMailType = new ArrayList();

		try {
			// String strcbsname =
			// correctNull((String)hshValues.get("cbsname"));
			// String strmonth =
			// correctNull((String)hshValues.get("mon_month"));
			// String stryear = correctNull((String)hshValues.get("mon_year"));
			String strmmrno = correctNull((String) hshValues.get("mmrno"));
			// strAppno=(String)hshValues.get("cbsid");
			// if(strAppno.equalsIgnoreCase(""))
			// {
			// strAppno=(String)hshValues.get("hidAppno");
			// }
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("monworkflowhistory^" + strmmrno);
			while (rs.next()) {
				arrFromUsr.add(rs.getString(1));
				arrToUsr.add(rs.getString(2));
				arrFromflow.add(rs.getString(3));
				arrToflow.add(rs.getString(4));
				arrDate.add(rs.getString(5));
				arrMailType.add(rs.getString(6));
			}
			hshRecord.put("arrFromUsr", arrFromUsr);
			hshRecord.put("arrToUsr", arrToUsr);
			hshRecord.put("arrFromflow", arrFromflow);
			hshRecord.put("arrToflow", arrToflow);
			hshRecord.put("arrDate", arrDate);
			hshRecord.put("arrMailType", arrMailType);
			hshRecord.put("Stateflag", hshValues.get("Stateflag"));
			// hshRecord.put("strmonth",strmonth);
			// hshRecord.put("stryear",stryear);
			// hshRecord.put("strcbsname",strcbsname);
			return hshRecord;
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}
	}

	public HashMap getMONAction(HashMap hshValues)  {

		String strQuery = "";
		String strQuery1 = "";

		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;

		HashMap hshRecord = new HashMap();
		ArrayList arrFlowpoint = new ArrayList();
		ArrayList arrDone = new ArrayList();
		ArrayList arrClassDesc = new ArrayList();
		ArrayList arrMaxclass = new ArrayList();
		ArrayList arrAction = new ArrayList();
		String strUserId = (String) hshValues.get("strUserId");
		String strOrgHead = "";
		String strflag = "n";

		try {

			String strcbsname = correctNull((String) hshValues.get("cbsname"));
			String strcbsid = Helper.correctNull((String) hshValues
					.get("cbsid"));
			// String strmonth =
			// correctNull((String)hshValues.get("mon_month"));
			// String stryear = correctNull((String)hshValues.get("mon_year"));
			String strmmrno = correctNull((String) hshValues.get("mmrno"));
			// String state="";
			String strMailuserid = "";

			strQuery = SQLParser.getSqlQuery("monworkflowpoint^" + strmmrno);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshRecord.put("strCurrFlowPoint", rs.getString(1));
				hshRecord.put("strDate", rs.getString(2));
				strMailuserid = correctNull(rs.getString("monmail_tousrid"));
			} else {
				hshRecord.put("strCurrFlowPoint", "1");
			}

			String type = "MON";
			strQuery = SQLParser.getSqlQuery("monworkflowsel1^" + type + "^p");

			String strId = "7";

			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				strQuery = SQLParser.getSqlQuery("monworkflowsel4^" + strmmrno
						+ "^" + rs.getString(1));
				if (rs1 != null)
					rs1.close();

				rs1 = DBUtils.executeQuery(strQuery);
				if (rs1.next()) {
					arrDone.add(rs1.getString(1));
				}
				arrFlowpoint.add(rs.getString(1));
				arrAction.add(rs.getString(2));
				arrMaxclass.add(rs.getString(3));

				if (rs2 != null)
					rs2.close();

				strQuery1 = SQLParser.getSqlQuery("selclasslist_workflow^"
						+ strId + "^" + correctNull(rs.getString(3)));
				rs2 = DBUtils.executeQuery(strQuery1);
				if (rs2.next()) {
					arrClassDesc.add(rs2.getString(4));
				}
			}

			hshRecord.put("arrFlowpoint", arrFlowpoint);
			hshRecord.put("arrAction", arrAction);
			hshRecord.put("arrMaxclass", arrMaxclass);
			hshRecord.put("arrClassDesc", arrClassDesc);
			hshRecord.put("arrDone", arrDone);
			// hshRecord.put("strmonth",strmonth);
			// hshRecord.put("stryear",stryear);
			hshRecord.put("strcbsname", strcbsname);

			String strAction = correctNull((String) hshValues.get("hidAction"));
			if (strAction.trim().equalsIgnoreCase("send")) {
				hshRecord.put("status", "success");
			}

			strQuery = SQLParser.getSqlQuery("sel_branchheadcomments^"
					+ strmmrno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("mon_observationdetails", "Y");
			}

			strQuery = SQLParser.getSqlQuery("sel_organisationdetails^"
					+ Helper.correctNull((String) hshValues.get("strOrgCode")));
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strOrgHead = Helper.correctNull(rs.getString("org_head"));
			}
			if (strOrgHead.equalsIgnoreCase(strUserId)) {
				strflag = "y";
			}

			/*
			 * strQuery =
			 * SQLParser.getSqlQuery("sel_mmrcurrrentuser^"+strcbsid+"^"
			 * +strmonth+"^"+stryear+"^"+strcbsid+"^"+strmonth+"^"+stryear); rs
			 * = DBUtils.executeQuery(strQuery); if (rs.next()) {
			 * 
			 * }
			 */

			if (strMailuserid.equalsIgnoreCase(strUserId)) {
				hshRecord.put("sendenable", "yes");
			}
			hshRecord.put("strflag", strflag);

			rs = DBUtils.executeLAPSQuery("workflowusersanlimit^" + strUserId);
			if (rs.next()) {
				hshRecord.put("usrfunction", correctNull(rs
						.getString("usr_function")));
			}

			return hshRecord;
		}

		catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}

				if (rs1 != null) {
					rs1.close();
				}

				if (rs2 != null) {
					rs2.close();
				}
			} catch (Exception e1) {
				throw new EJBException(e1.getMessage());
			}
		}
	}

	public HashMap updateTermLoanReview(HashMap hshValues)  {

		String strAction = "";
		HashMap hshResult = null;
		String strAccno = "";
		String strcbsid = "";
		String stryear = "";
		String strFromuserid = "";
		String strTouserid = "";
		String strComments = "";

		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		hshResult = new HashMap();
		StringBuilder sbAuditData = new StringBuilder();
		try {

			strAction = Helper.correctNull((String) hshValues.get("hidAction"));
			strAccno = Helper.correctNull((String) hshValues.get("hidtlrno"));
			strcbsid = Helper.correctNull((String) hshValues.get("cbsid"));

			strFromuserid = Helper.correctNull((String) hshValues
					.get("strUserId"));
			strTouserid = Helper.correctNull((String) hshValues
					.get("hidmail_tousrid"));
			stryear = Helper.correctNull((String) hshValues.get("reviewYear"));
			strComments = Helper.correctNull((String) hshValues
					.get("txt_sanctioncomments"));

			if (strTouserid.equals("")) {
				strTouserid = strFromuserid;
			}

			if (strAction.equalsIgnoreCase("send")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "ins_termloanreviewmailbox");
				arrValues.add(strcbsid);
				arrValues.add(strAccno);
				arrValues.add(strTouserid);
				arrValues.add(strFromuserid);
				arrValues.add(stryear);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId",
						"tlr_applications_update_reviewholder");
				arrValues.add(strTouserid);
				arrValues.add(strAccno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);
				hshQueryValues.put("size", "2");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData.append("Select Organisation =" + strFromuserid)
						.append("Select Recipient =" + strTouserid);
			} else if (strAction.equalsIgnoreCase("approve")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId",
						"tlr_applications_update_approvestaus");
				arrValues.add("pa");
				arrValues.add(strComments);
				arrValues.add(strFromuserid);
				arrValues.add(strAccno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData.append("~ Application Approved");
			}

			else if (strAction.equalsIgnoreCase("undo")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId",
						"tlr_applications_update_approvestaus");
				arrValues.add("op");
				arrValues.add("");
				arrValues.add(strFromuserid);
				arrValues.add(strAccno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", "1");
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				sbAuditData
						.append("~ Application Status Changed to Open/Pending");
			}
			AuditTrial.auditNewLog(hshValues, "336", strAccno, sbAuditData
					.toString(), "");

		} catch (Exception e) {
			throw new EJBException(e.toString());
		}
		return hshResult;

	}

	public HashMap getTermLoanReview(HashMap hshValues)  {
		String strQuery = "";
		ResultSet rs = null;
		HashMap hshRecord = new HashMap();
		String strAction = "";
		try {
			String strCustid = correctNull((String) hshValues.get("cbsid"));
			String strCustAccno = correctNull((String) hshValues
					.get("hidtlrno"));
			String strReviewYear = correctNull((String) hshValues
					.get("reviewYear"));
			strQuery = SQLParser.getSqlQuery("tlr_applications_select^"
					+ strCustAccno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("appstatus", correctNull((String) rs
						.getString("tlr_status")));
				hshRecord.put("review_comments", correctNull((String) rs
						.getString("tlr_comments")));
				hshRecord.put("tlr_processedby", correctNull((String) rs
						.getString("tlr_processedby")));

			}

			strQuery = SQLParser.getSqlQuery("sel_monitoringtermloanreview^"
					+ strCustid + "^" + strCustAccno + "^" + strReviewYear);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("MON_TERMLOANREVIEW_TOUSRID",
						correctNull((String) rs
								.getString("MON_TERMLOANREVIEW_TOUSRID")));
			}

			if (correctNull((String) hshValues.get("hidAction")).trim()
					.equalsIgnoreCase("send")) {
				hshRecord.put("status", "success");
			}

		}

		catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				throw new EJBException(e1.getMessage());
			}
		}
		return hshRecord;
	}

	public HashMap getTermLoanReviewHistory(HashMap hshValues)
			 {
		String strAppno = "";
		ResultSet rs = null;
		HashMap hshRecord = new HashMap();
		ArrayList arrFromUsr = new ArrayList();
		ArrayList arrToUsr = new ArrayList();
		ArrayList arrDate = new ArrayList();

		try {
			String strcbsname = correctNull((String) hshValues.get("cbsname"));
			strAppno = (String) hshValues.get("hidtlrno");
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = (String) hshValues.get("hidAppno");
			}
			rs = DBUtils.executeLAPSQuery("reviwnoteworkflowhistory^"
					+ strAppno);
			while (rs.next()) {
				arrFromUsr.add(correctNull((String) rs.getString("touserid")));
				arrToUsr.add(correctNull((String) rs.getString("fromuserid")));
				arrDate.add(correctNull((String) rs
						.getString("mon_termloanreview_maildate")));
			}
			hshRecord.put("arrFromUsr", arrFromUsr);
			hshRecord.put("arrToUsr", arrToUsr);
			hshRecord.put("arrDate", arrDate);
			hshRecord.put("Stateflag", hshValues.get("Stateflag"));
			hshRecord.put("strcbsname", strcbsname);

			return hshRecord;
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}
	}

	public void updateCreditProcessAudit(HashMap hsh)  {
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = null;
		ArrayList arrValues = null;
		String strAction = (String) hsh.get("hidAction");
		String appno = "";
		String[] strNorms = null;
		String[] strSelreason = null;
		String[] strreason = null;
		String[] strSlno = null;

		appno = correctNull((String) hsh.get("appno"));

		if (appno.equalsIgnoreCase("") || appno.equalsIgnoreCase("null")
				|| appno.equalsIgnoreCase(null)) {
			appno = correctNull((String) hsh.get("comm_appno"));
		}
		try {
			if (hsh.get("hidnorms") instanceof java.lang.String) {
				strNorms = new String[1];
				strNorms[0] = (String) hsh.get("hidnorms");
			} else {
				strNorms = (String[]) hsh.get("hidnorms");
			}

			if (hsh.get("hidslno") instanceof java.lang.String) {
				strSlno = new String[1];
				strSlno[0] = (String) hsh.get("hidslno");
			} else {
				strSlno = (String[]) hsh.get("hidslno");
			}

			if (hsh.get("sel_reasons") instanceof java.lang.String) {
				strSelreason = new String[1];
				strSelreason[0] = (String) hsh.get("sel_reasons");
			} else {
				strSelreason = (String[]) hsh.get("sel_reasons");
			}

			if (hsh.get("txt_reasons") instanceof java.lang.String) {
				strreason = new String[1];
				strreason[0] = (String) hsh.get("txt_reasons");
			} else {
				strreason = (String[]) hsh.get("txt_reasons");
			}

			if (strAction.trim().equals("edit")) {

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "del_creditprocesscondition");
				arrValues.add(appno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "del_creditprocessaspects");
				arrValues.add(appno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				for (int i = 0; i < strNorms.length; i++) {
					if (strNorms[i] != "") {
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						hshQueryValues.put("size", "1");
						hshQuery.put("strQueryId", "ins_creditprocessaspects");
						arrValues.add(appno);
						arrValues.add(Integer.toString(i));
						arrValues.add(strNorms[i]);
						arrValues.add(strSelreason[i]);
						arrValues.add(strreason[i]);
						arrValues.add(strSlno[i]);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "ins_creditprocesscondition");
				arrValues.add(appno);
				arrValues.add(Helper.correctNull((String) hsh.get("txt_vide")));
				arrValues.add(Helper.correctNull((String) hsh
						.get("txt_conditions")));
				arrValues.add(Helper.correctNull((String) hsh
						.get("txt_remarks")));
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			} else if (strAction.trim().equals("delete")) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "del_creditprocesscondition");
				arrValues.add(appno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "del_creditprocessaspects");
				arrValues.add(appno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			}
		} catch (Exception ce) {
			throw new EJBException("inside update" + ce.toString());
		}
	}

	public HashMap getCreditProcessAudit(HashMap hsh)  {
		String strQuery = "";
		ResultSet rs = null;
		HashMap hshValues = new HashMap();
		ArrayList arrCol = null;
		ArrayList arrRow = new ArrayList();
		String appno = "";
		HashMap hshMoragageDetails = new HashMap();
		// int flag;
		try {
			appno = correctNull((String) hsh.get("appno"));
			if (appno.equalsIgnoreCase("") || appno.equalsIgnoreCase("null")
					|| appno.equalsIgnoreCase(null)) {
				appno = correctNull((String) hsh.get("comm_appno"));
			}
			if (appno.equalsIgnoreCase("") || appno.equalsIgnoreCase("null")
					|| appno.equalsIgnoreCase(null)) {
				appno = correctNull((String) hsh.get("txt_creditappno"));
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_creditprocesscondition^"
					+ appno);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshValues.put("processappno", Helper.correctNull((String) rs
						.getString("com_crdprocesscondappno")));
				hshValues.put("processcondvide", Helper.correctNull((String) rs
						.getString("com_crdprocesscondvide")));
				hshValues.put("processcondition", Helper
						.correctNull((String) rs
								.getString("com_crdprocesscond")));
				hshValues.put("processremarks", Helper.correctNull((String) rs
						.getString("com_crdprocessremarks")));
			}

			strQuery = SQLParser.getSqlQuery("sel_creditprocessaspects^"
					+ appno);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(Helper.correctNull((String) rs
						.getString("com_crdprocessaspect")));
				arrCol.add(Helper.correctNull((String) rs
						.getString("com_crdprocessaspectobser")));
				arrCol.add(Helper.correctNull((String) rs
						.getString("com_crdprocessaspectcomments")));
				arrCol.add(Helper.correctNull((String) rs
						.getString("COM_CRDPROCESSASPECTSLNO")));
				arrCol.add(Helper.correctNull((String) rs
						.getString("com_crdprocessaspectappno")));

				arrRow.add(arrCol);
			}
			if (arrRow.size() == 0) {
				if (rs != null) {
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("getstaticdatavalues^" + "51");
				while (rs.next()) {
					arrCol = new ArrayList();
					arrCol.add(Helper.correctNull((String) rs
							.getString("stat_data_desc1")));
					arrCol.add("S");
					arrCol.add("");
					arrCol.add(Helper.correctNull((String) rs
							.getString("stat_data_desc")));
					arrRow.add(arrCol);
				}
			}
			hshValues.put("arrRow", arrRow);
			hshValues.put("credit_appno", appno);

			if (Helper.correctNull((String) hsh.get("flag")).equalsIgnoreCase(
					"Report")) {
				hshMoragageDetails = getCreditMoragageDetails(hsh);
				hshValues.put("hshMoragageDetails", hshMoragageDetails);
				hshValues.put("OrgName", Helper.correctNull((String) hsh
						.get("strOrgName")));
				hshValues.put("UserName", Helper.correctNull((String) hsh
						.get("strUserName")));

				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("selborrowertype^" + appno);
				if (rs.next()) {
					hshValues.put("appname", Helper.correctNull((String) rs
							.getString("perapp_fname")));
				}
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("sel_creditauditapproveddetails^"
						+ appno);
				if (rs.next()) {
					hshValues.put("APP_PROCESSDATE", Helper
							.correctNull((String) rs
									.getString("APP_PROCESSDATE")));
					hshValues.put("APP_APPROVEDBY", Helper
							.correctNull((String) rs
									.getString("APP_APPROVEDBY")));
					hshValues.put("APPROVED_ORGNAME", Helper
							.correctNull((String) rs.getString("org_name")));
					hshValues.put("APPROVED_FNAME", Helper
							.correctNull((String) rs.getString("usr_fname")));
					hshValues.put("APPROVED_LNAME", Helper
							.correctNull((String) rs.getString("usr_lname")));

				}
			}

		} catch (Exception e) {
			log.error("error occured" + e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception ce) {
				throw new EJBException("Error in getData login  "
						+ ce.toString());
			}
		}

		return hshValues;

	}

	public void updateCreditMoragageDetails(HashMap hshValues)
			 {
		ResultSet rs = null;
		String strQuery = null;
		String strAppno = "";
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();

		try {
			String strAction = correctNull((String) hshValues.get("hidAction"));
			strAppno = correctNull((String) hshValues.get("appno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("comm_appno"));
			}

			String straddress = correctNull((String) hshValues
					.get("txt_address"));
			String strvisitdate = correctNull((String) hshValues
					.get("txt_visitdate"));
			String strSno = correctNull((String) hshValues.get("hidsno"));

			if (strAction.equalsIgnoreCase("insert")) {
				strQuery = "selmaxcreditmoragagedetails";
				rs = DBUtils.executeLAPSQuery(strQuery);
				if (rs.next()) {
					strSno = correctNull((String) rs
							.getString("creditmortgageddetailseqno"));
				}
				if (rs != null) {
					rs.close();
				}
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "ins_creditmortgageddetail");
				arrValues.add(strAppno);
				arrValues.add(strSno);
				arrValues.add(straddress);
				arrValues.add(strvisitdate);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			} else if (strAction.equalsIgnoreCase("update")) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();

				hshQuery.put("strQueryId", "upd_creditmortgageddetail");
				arrValues.add(strAppno);
				arrValues.add(strSno);
				arrValues.add(straddress);
				arrValues.add(strvisitdate);
				arrValues.add(strAppno);
				arrValues.add(strSno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			} else if (strAction.equalsIgnoreCase("Delete")) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "del_creditmortgageddetail");
				arrValues.add(strAppno);
				arrValues.add(strSno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

		} catch (Exception e) {
			throw new EJBException("Error in update " + e.getMessage());
		}

		finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing in the connection "
						+ cf.getMessage());
			}
		}
	}

	public HashMap getCreditMoragageDetails(HashMap hshValues)
			 {
		HashMap hshRecord = new HashMap();
		ArrayList arrCol = new ArrayList();
		ArrayList arrRow = new ArrayList();
		ResultSet rs = null;
		String strAppno = "";
		try {
			strAppno = correctNull((String) hshValues.get("appno"));
			if (strAppno.equalsIgnoreCase("")) {
				strAppno = correctNull((String) hshValues.get("comm_appno"));
			}
			rs = DBUtils.executeLAPSQuery("sel_creditmortgageddetail^"
					+ strAppno);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull((String) rs
						.getString("com_creditmortgageddetailappno")));
				arrCol.add(correctNull((String) rs
						.getString("com_creditmortgageddetailseqno")));
				arrCol.add(correctNull((String) rs
						.getString("com_creditmortgageddetailplace")));
				arrCol.add(correctNull((String) rs
						.getString("com_creditmortgageddetaildate")));
				arrRow.add(arrCol);
			}
			if (rs != null) {
				rs.close();
			}

			hshRecord.put("arrRow", arrRow);
			hshRecord.put("CreditMoragageDetails_appno", strAppno);

		} catch (Exception e1) {
			throw new EJBException("Error in getData :: " + e1.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return hshRecord;
	}

	/*
	 * public HashMap getTATHistory(HashMap hshValues) {
	 * String strQuery=""; String strAppno=""; ResultSet rs=null; ResultSet
	 * rs1=null; HashMap hshRecord=new HashMap(); ArrayList arrFromflow=new
	 * ArrayList(); ArrayList arrToflow=new ArrayList(); ArrayList
	 * arrFromUsr=new ArrayList(); ArrayList arrToUsr=new ArrayList(); ArrayList
	 * arrDate=new ArrayList(); ArrayList arrMailType=new ArrayList();
	 * 
	 * 
	 * try {
	 * 
	 * strAppno=(String)hshValues.get("appno");
	 * 
	 * if(rs!=null) rs.close();
	 * 
	 * rs=DBUtils.executeLAPSQuery("sel_TATWorkFlow^"+strAppno); if(rs.next()) {
	 * hshRecord
	 * .put("app_recevied_date",Helper.correctNull((String)rs.getString(
	 * "app_recevied_date")));
	 * hshRecord.put("doc_recevied_date",Helper.correctNull
	 * ((String)rs.getString("doc_recevied_date")));
	 * if(!(Helper.correctNull((String
	 * )rs.getString("doc_recevied_date")).equalsIgnoreCase("-"))) {
	 * hshRecord.put("doc_recevied_remarks","Documents Completed"); }
	 * hshRecord.put("app_created_date",Helper.correctNull((String)rs.getString(
	 * "app_created_date")));
	 * if(!(Helper.correctNull((String)rs.getString("app_created_date"
	 * )).equalsIgnoreCase("-"))) {
	 * hshRecord.put("app_created_remarks","Application Created"); } }
	 * if(rs!=null) rs.close();
	 * 
	 * rs=DBUtils.executeLAPSQuery("sel_TATCommWorkFlowHistroy^"+strAppno);
	 * while(rs.next()) {
	 * arrFromUsr.add(Helper.correctNull((String)rs.getString(
	 * "mail_fromusrid")));
	 * arrToUsr.add(Helper.correctNull((String)rs.getString("mail_tousrid")));
	 * arrDate.add(Helper.correctNull((String)rs.getString("maildate")));
	 * arrToflow.add(Helper.correctNull((String)rs.getString("wrk_flowname")));
	 * } hshRecord.put("arrFromUsr",arrFromUsr);
	 * hshRecord.put("arrToUsr",arrToUsr); hshRecord.put("arrToflow",arrToflow);
	 * hshRecord.put("arrDate",arrDate);
	 * 
	 * 
	 * hshRecord.put("app_loantype",correctNull((String)hshValues.get("apploantype"
	 * )));
	 * 
	 * return hshRecord; } catch(Exception e) { throw new
	 * EJBException(e.getMessage()); } finally { try { if(rs != null) {
	 * rs.close(); } if(rs1 != null) { rs1.close(); }
	 * 
	 * } catch(Exception e1) { throw new
	 * EJBException("Error closing connection.."+e1); } } }
	 */

	/*
	 * --------------------Start For Getting Target Master Data While Approve /
	 * undo an application
	 */

	private HashMap getTargetMasterDetails(String strAppno, String strPrdType,
			String branch_code, String strModuleType, String comapp_id,
			String strAction) {
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		Calendar cal = Calendar.getInstance();
		String cur_date = "";
		String cur_month = "";
		String cur_year = "";
		String target_code = "";
		String target_desc = "";
		double recmdamt = 0;
		String govt_sponser = "";
		String govt_scheme = "";
		ResultSet rs = null;
		ResultSet rs1 = null;
		HashMap hshTargetData = null;
		String per_emp = "";
		String per_lineactivity = "";
		String perapp_title = "";
		String bsr_code = "";
		String smetype = "";
		String ind_type = "";
		String msme_indirect[] = { "65922", "65934", "93001" };
		String[] bsr_agri_indir = { "01181", "01182", "01402", "01409",
				"40102", "51201", "51202", "51205", "51403", "51501", "52301",
				"52302", "52303", "65103", "65901", "65902", "65904", "65905",
				"65909", "65921", "65931", "67101" };
		String[] bsr_agri_dir = { "01101", "01102", "01103", "01104", "01105",
				"01106", "01107", "01108", "01109", "01111", "01119", "01121",
				"01122", "01123", "01124", "01125", "01126", "01127", "01129",
				"01151", "01152", "01153", "01154", "01157", "01159", "01201",
				"01202", "01203", "01204", "01209", "02001", "05001", "40104" };
		String[] bsr_msme_services_others = { "11201", "40103", "41001",
				"45001", "45002", "45003", "45004", "45005", "45011", "45012",
				"45013", "45019", "52102", "60101", "60301", "62001", "62101",
				"63001", "63011", "63012", "63013", "63019", "64101", "64201",
				"64202", "65101", "65102", "65104", "65109", "65903", "65906",
				"65907", "65908", "65910", "65911", "65912", "65915", "65916",
				"65929", "65932", "65933", "65939", "66001", "66002", "66003",
				"67102", "67103", "67104", "67105", "67201", "67301", "70001",
				"71101", "71201", "71301", "72201", "75001", "85301", "90001",
				"91101", "91901" };
		String[] bsr_msme_manufacturing = { "01401", "10001", "11101", "12001",
				"13101", "13201", "14101", "15101", "15102", "15103", "15104",
				"15201", "15301", "15302", "15303", "15401", "15402", "15403",
				"15404", "15405", "15406", "15407", "15408", "15409", "15501",
				"15502", "16001", "16003", "17101", "17102", "17103", "17104",
				"17105", "17201", "17202", "17203", "17204", "17209", "18101",
				"18102", "18201", "19101", "19102", "19201", "19202", "20101",
				"21001", "21002", "21003", "22101", "23101", "23201", "23301",
				"24101", "24102", "24103", "24104", "24201", "24202", "24203",
				"24204", "24211", "24212", "24213", "24214", "24219", "24301",
				"25101", "25102", "25201", "25202", "26101", "26901", "26902",
				"26903", "26904", "26905", "27101", "27201", "27301", "27302",
				"28101", "28901", "29101", "29109", "29201", "29202", "29203",
				"29204", "29205", "29206", "29207", "29208", "29209", "29301",
				"30001", "30002", "31101", "31201", "31301", "31401", "31501",
				"31901", "32101", "33101", "33201", "33301", "34101", "34201",
				"34301", "35101", "35201", "35301", "35901", "35909", "36101",
				"36901", "36902", "36903", "36904", "36905", "36906", "36907",
				"36909", "37001", "40101", "40105", "40201", "40301" };
		String[] bsr_msme_services_retail_trade = { "50001", "50002", "50005",
				"51101", "51203", "51204", "51301", "51302", "51303", "51401",
				"51402", "51404", "51405", "51406", "51409", "51502", "51901",
				"51902", "51909", "52101", "52201", "52311", "52312", "52313",
				"52319", "52401", "52501" };
		String[] bsr_msme_services_profself = { "50003", "72101", "72209",
				"72301", "72901", "72909", "73001", "74101", "74201", "74301",
				"74401", "74901", "85101", "85102", "85201", "92101", "92109",
				"92201", "92301", "92401", "93001", "93002", "93003", "93101",
				"93102", "93103", "93104", "93105", "93106", "93109" };
		String[] bsr_msme_services_small_business = { "55101", "55201", "55301" };
		String[] bsr_msme_services_rto = { "60201", "60202", "60203", "60204",
				"61101", "61202" };
		String[] bsr_union_home = { "65923", "65935", "95011" };
		String[] bsr_union_education = { "65924", "80001", "80002", "80003",
				"95014" };
		String[] bsr_union_miles = { "95012" };
		String[] bsr_union_comfort = { "95013", "95019" };
		String[] bsr_union_shares = { "95015" };
		String[] bsr_union_trade = { "50001", "50002", "50003", "50005",
				"51101", "51201", "51202", "51203", "51204", "51205", "51301",
				"51302", "51303", "51401", "51402", "51403", "51404", "51405",
				"51406", "51409", "51501", "51502", "51901", "51902", "51909",
				"52101", "52102", "52201", "52301", "52302", "52303", "52311",
				"52312", "52313", "52319", "52401", "52501" };
		boolean is_msme_direct = false;
		ArrayList arrcol = null;
		ArrayList arrrow = null;
		int no_of_new_accounts = 1;

		try {
			arrrow = new ArrayList();
			hshTargetData = new HashMap();

			// ------------------Start for getting sanctioned loan
			// amount--------------------------------
			if ((strPrdType.substring(0, 1)).equalsIgnoreCase("p")
					|| (strPrdType.substring(0, 1)).equalsIgnoreCase("a")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("get_govtscheme^" + strAppno);
				if (rs.next()) {
					recmdamt = rs.getDouble("loan_recmdamt");
					govt_sponser = Helper
							.correctNull(rs.getString("LOAN_GOVT"));
					govt_scheme = Helper.correctNull(rs
							.getString("GOVT_SCHEME"));
				}
			} else if (strPrdType.trim().equalsIgnoreCase("T")
					|| strPrdType.trim().equalsIgnoreCase("C")) {
				if (rs != null)
					rs.close();

				rs = DBUtils.executeLAPSQuery("get_sanctionamt^" + strAppno);
				if (rs.next()) {
					recmdamt = Double.parseDouble(rs.getString("proposed"));
					no_of_new_accounts = Integer.parseInt(rs
							.getString("no_of_accounts"));
				}
			}
			if (rs != null)
				rs.close();

			rs = DBUtils.executeLAPSQuery("sel_applications^" + strAppno);
			if (rs.next()) {
				String valuesin = Helper.correctNull(rs
						.getString("app_valuesin"));
				if (!valuesin.equals("")) {
					if (valuesin.equalsIgnoreCase("T"))
						recmdamt = recmdamt * 1000.00;
					else if (valuesin.equalsIgnoreCase("L"))
						recmdamt = recmdamt * 100000.00;
					else if (valuesin.equalsIgnoreCase("C"))
						recmdamt = recmdamt * 10000000.00;
				} else {
					if (strPrdType.trim().equalsIgnoreCase("C"))
						recmdamt = recmdamt * 100000.00;
				}

			}
			// ------------------End for getting sanctioned loan
			// amount-------------------------------------

			// ----------------Start for getting BSR
			// code---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("T")
					|| strPrdType.trim().equalsIgnoreCase("C")) {
				if (strPrdType.trim().equalsIgnoreCase("T")) {
					if (rs != null)
						rs.close();
					rs = DBUtils.executeLAPSQuery("get_bsrcode_terti^"
							+ comapp_id);
					if (rs.next()) {
						bsr_code = Helper.correctNull(rs
								.getString("perapp_companyname"));

					}
				} else {
					if (rs != null)
						rs.close();
					rs = DBUtils.executeLAPSQuery("get_bsrcode_corp^"
							+ comapp_id);
					if (rs.next()) {
						bsr_code = Helper.correctNull(rs
								.getString("comapp_companyid"));

					}
				}
				if (!bsr_code.equals("")) {

					String temp_bsr[] = bsr_code.trim().split("-", 0);
					bsr_code = temp_bsr[0];
				}
			}
			// ----------------End for getting BSR
			// code---------------------------------------------------

			// ----------------Start for getting Employment
			// Type---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("T")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("per_employment_type^"
						+ comapp_id);
				if (rs.next()) {
					per_emp = Helper.correctNull(rs
							.getString("perapp_employment"));
					per_lineactivity = Helper.correctNull(rs
							.getString("perapp_eduothers"));
					perapp_title = Helper.correctNull(rs
							.getString("perapp_title"));
				}
			}
			// ----------------End for getting Employment
			// Type---------------------------------------------------

			// ----------------Start for getting Industry
			// Type---------------------------------------------------
			if ((strPrdType.substring(0, 1)).equalsIgnoreCase("C")) {
				if (strModuleType.equalsIgnoreCase("SME")) {
					if (rs != null)
						rs.close();
					rs = DBUtils.executeLAPSQuery("selindtype^" + comapp_id);
					if (rs.next()) {
						smetype = Helper.correctNull(rs
								.getString("comapp_ssitype"));
						ind_type = rs.getString("Scale");
					}
				}
			}
			// ----------------End for getting Industry
			// Type---------------------------------------------------

			// ----------------Start for getting target code for Govt Sponsored
			// Schemes---------------------------------------------------
			if ((strPrdType.substring(0, 1)).equalsIgnoreCase("p")) {
				if (govt_sponser.equals("1")) {
					if (govt_scheme.equals("1"))
						govt_scheme = "PMRY";
					else if (govt_scheme.equals("2"))
						govt_scheme = "SGSY";
					else if (govt_scheme.equals("3"))
						govt_scheme = "SJSRY";
					else if (govt_scheme.equals("4"))
						govt_scheme = "SLRS";
					else if (govt_scheme.equals("5"))
						govt_scheme = "OTHER";
					else if (govt_scheme.equals("6"))
						govt_scheme = "DRI";
					if (govt_scheme.length() > 0) {
						arrcol = new ArrayList();
						arrcol.add(govt_scheme); // code for target master
						arrcol.add(govt_scheme); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					}
				}
			}
			// ----------------End for getting target code for Govt Sponsored
			// Schemes---------------------------------------------------

			// ----------------Start for getting target code for MSME
			// Services---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("T")) {
				if (per_emp.equals("7")) {
					if (per_lineactivity.equals("7_1")) {
						/*
						 * for(int
						 * i=0;i<bsr_msme_services_small_business.length;i++) {
						 * if
						 * (bsr_msme_services_small_business[i].equals(bsr_code
						 * )) {
						 */
						target_code = "MSMIB";
						target_desc = "MSME SERVICES - SMALL BUSINESS - Micro";
						/*
						 * break; } }
						 */
					} else if (per_lineactivity.equals("7_2")) {
						if (target_code.equalsIgnoreCase("")) {
							/*
							 * for(int
							 * i=0;i<bsr_msme_services_profself.length;i++) {
							 * if(
							 * bsr_msme_services_profself[i].equals(bsr_code)) {
							 */
							target_code = "MSMIP";
							target_desc = "MSME SERVICES - PROF. & SELF EMPLOYEES - Micro";
							/*
							 * break; } }
							 */
						}
					} else if (per_lineactivity.equals("7_3")) {
						/*
						 * for(int i=0;i<bsr_msme_services_rto.length;i++) {
						 * if(bsr_msme_services_rto[i].equals(bsr_code)) {
						 */
						target_code = "MSMIO";
						target_desc = "MSME SERVICES - SWRTO - Micro";
						/*
						 * break; } }
						 */
					} else if (per_lineactivity.equals("7_4")) {
						/*
						 * for(int i=0;i<bsr_msme_services_others.length;i++) {
						 * if(bsr_msme_services_others[i].equals(bsr_code)) {
						 */
						target_code = "MSMIE";
						target_desc = "MSME SERVICES - OTHERS - Micro";
						/*
						 * break; } }
						 */
					}
				} else if (per_emp.equals("6")) {
					/*
					 * for(int i=0;i<bsr_msme_services_retail_trade.length;i++)
					 * { if(bsr_msme_services_retail_trade[i].equals(bsr_code))
					 * {
					 */
					target_code = "MSMIT";
					target_desc = "MSME SERVICES - RETAIL TRADE - Micro";
					/*
					 * break; } }
					 */
				}
				if (target_code.length() > 0) {
					is_msme_direct = true;
					arrcol = new ArrayList();
					arrcol.add(target_code); // code for target master
					arrcol.add(target_desc); // description of target master
												// code
					arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
					arrrow.add(arrcol);
					arrcol = null;
					target_code = "";
					target_desc = "";
				}
			} else if (strPrdType.trim().equalsIgnoreCase("C")) {
				if (ind_type.equalsIgnoreCase("1")) {
					for (int i = 0; i < bsr_msme_services_others.length; i++) {
						if (bsr_msme_services_others[i].equals(bsr_code)) {
							if (smetype.equals("1")) {
								target_code = "MSMIE";
								target_desc = "MSME SERVICES - OTHERS - Micro";
							} else if (smetype.equals("2")) {
								target_code = "MSSME";
								target_desc = "MSME SERVICES - OTHERS - Small";
							}
							break;
						}
					}
					if (target_code.equalsIgnoreCase("")) {
						for (int i = 0; i < bsr_msme_services_retail_trade.length; i++) {
							if (bsr_msme_services_retail_trade[i]
									.equals(bsr_code)) {
								if (smetype.equals("1")) {
									target_code = "MSMIT";
									target_desc = "MSME SERVICES - RETAIL TRADE - Micro";
								} else if (smetype.equals("2")) {
									target_code = "MSSMT";
									target_desc = "MSME SERVICES - RETAIL TRADE - Small";
								}
								break;
							}
						}
					}
					if (target_code.equalsIgnoreCase("")) {
						for (int i = 0; i < bsr_msme_services_profself.length; i++) {
							if (bsr_msme_services_profself[i].equals(bsr_code)) {
								if (smetype.equals("1")) {
									target_code = "MSMIP";
									target_desc = "MSME SERVICES - PROF. & SELF EMPLOYEES - Micro";
								} else if (smetype.equals("2")) {
									target_code = "MSSMP";
									target_desc = "MSME SERVICES - PROF. & SELF EMPLOYEES - Small";
								}
								break;
							}
						}
					}
					if (target_code.equalsIgnoreCase("")) {
						for (int i = 0; i < bsr_msme_services_small_business.length; i++) {
							if (bsr_msme_services_small_business[i]
									.equals(bsr_code)) {
								if (smetype.equals("1")) {
									target_code = "MSMIB";
									target_desc = "MSME SERVICES - SMALL BUSINESS - Micro";
								} else if (smetype.equals("2")) {
									target_code = "MSSMB";
									target_desc = "MSME SERVICES - SMALL BUSINESS - Small";
								}
								break;
							}
						}
					}
					if (target_code.equalsIgnoreCase("")) {
						for (int i = 0; i < bsr_msme_services_rto.length; i++) {
							if (bsr_msme_services_rto[i].equals(bsr_code)) {
								if (smetype.equals("1")) {
									target_code = "MSMIO";
									target_desc = "MSME SERVICES - SWRTO - Micro";
								} else if (smetype.equals("2")) {
									target_code = "MSSMO";
									target_desc = "MSME SERVICES - SWRTO - Small";
								}
								break;
							}
						}
					}

					if (target_code.length() > 0) {
						is_msme_direct = true;
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					}
				}
			}
			// ----------------End for getting target code for MSME
			// Services---------------------------------------------------

			// ----------------Start for getting target code for MSME
			// Manufacturing---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("T")) {
				if (per_emp.equals("8")) {
					/*
					 * if(perapp_title.equalsIgnoreCase("M/S")) { for(int
					 * i=0;i<bsr_msme_manufacturing.length;i++) {
					 * if(bsr_msme_manufacturing[i].equals(bsr_code)) {
					 */
					target_code = "MM_MI";
					target_desc = "MSME MANUFACTURING - Micro";
					/*
					 * break; } }
					 */
					// }
					if (target_code.length() > 0) {
						is_msme_direct = true;
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					}
				}
			} else if (strPrdType.trim().equalsIgnoreCase("C")) {
				if (ind_type.equalsIgnoreCase("Manufacturing")) {
					for (int i = 0; i < bsr_msme_manufacturing.length; i++) {
						if (bsr_msme_manufacturing[i].equals(bsr_code)) {
							if (smetype.equals("1")) {
								target_code = "MM_MI";
								target_desc = "MSME MANUFACTURING - MICRO";
							} else if (smetype.equals("2")) {
								target_code = "MM_SM";
								target_desc = "MSME MANUFACTURING - SMALL";
							} else if (smetype.equals("3")) {
								target_code = "MM_ME";
								target_desc = "MSME MANUFACTURING - MEDIUM";
							}
							break;
						}
					}
					if (target_code.length() > 0) {
						is_msme_direct = true;
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					}
				}
			}
			// ----------------End for getting target code for MSME
			// Manufacturing---------------------------------------------------

			// ----------------Start for getting target code for
			// Agriculture---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("T")
					|| strPrdType.trim().equalsIgnoreCase("C")) {
				for (int i = 0; i < bsr_agri_indir.length; i++) {
					if (bsr_agri_indir[i].equals(bsr_code)) {
						target_code = "A_IN";
						target_desc = "AGRICULTURE - INDIRECT";
						break;
					}
				}
				if (target_code.equalsIgnoreCase("")) {
					for (int i = 0; i < bsr_agri_dir.length; i++) {
						if (bsr_agri_dir[i].equals(bsr_code)) {
							target_code = "A_DI";
							target_desc = "AGRICULTURE - DIRECT";
							break;
						}
					}
				}
				if (target_code.length() > 0) {
					arrcol = new ArrayList();
					arrcol.add(target_code); // code for target master
					arrcol.add(target_desc); // description of target master
												// code
					arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
					arrrow.add(arrcol);
					arrcol = null;
					target_code = "";
					target_desc = "";
				}
			} else if ((strPrdType.substring(0, 1)).equalsIgnoreCase("a")) {
				target_code = "A_DI";
				target_desc = "AGRICULTURE - DIRECT";
				arrcol = new ArrayList();
				arrcol.add(target_code); // code for target master
				arrcol.add(target_desc); // description of target master code
				arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
				arrrow.add(arrcol);
				arrcol = null;
				target_code = "";
				target_desc = "";
			}
			// ----------------End for getting target code for
			// Agriculture---------------------------------------------------

			// ----------------Start for getting target code for MSME
			// Enterprises---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("T")
					|| strPrdType.trim().equalsIgnoreCase("C")) {
				if (strPrdType.trim().equalsIgnoreCase("C")) {
					for (int i = 0; i < msme_indirect.length; i++) {
						if (msme_indirect[i].equals(bsr_code)) {
							target_code = "MA_IN";
							target_desc = "MSME - INDIRECT";
							break;
						}
					}
				}
				if (!target_code.equals("MA_IN")) {
					if (is_msme_direct) {
						target_code = "MA_DI";
						target_desc = "MSME - DIRECT";
					}
				}
				if (target_code.length() > 0) {
					arrcol = new ArrayList();
					arrcol.add(target_code); // code for target master
					arrcol.add(target_desc); // description of target master
												// code
					arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
					arrrow.add(arrcol);
					arrcol = null;
					target_code = "";
					target_desc = "";
				}
			}
			// ----------------End for getting target code for MSME
			// Enterprises---------------------------------------------------

			// ----------------Start for getting target code for Union
			// Home---------------------------------------------------
			if (strPrdType.equalsIgnoreCase("pH")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("perpropertydet_select_proptype^"
						+ strAppno);
				if (rs.next()) {
					if (rs.getInt("prop_type") == 2) {
						target_code = "HOM_U";
						target_desc = "UNION HOME - URBAN AREAS";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					} else if (rs.getInt("prop_type") == 3
							|| rs.getInt("prop_type") == 4) {
						target_code = "HOM_R";
						target_desc = "UNION HOME - RURAL / SEMI URBAN AREAS";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					}
				}
				target_code = "R_HOM";
				target_desc = "UNION HOME";
				arrcol = new ArrayList();
				arrcol.add(target_code); // code for target master
				arrcol.add(target_desc); // description of target master code
				arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
				arrrow.add(arrcol);
				arrcol = null;
				target_code = "";
				target_desc = "";
			} else if (strPrdType.trim().equalsIgnoreCase("C")
					|| strPrdType.trim().equalsIgnoreCase("T")) {
				for (int i = 0; i < bsr_union_home.length; i++) {
					if (bsr_union_home[i].equals(bsr_code)) {
						target_code = "R_HOM";
						target_desc = "UNION HOME";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
						break;
					}
				}
			}
			// ----------------End for getting target code for Union
			// Home---------------------------------------------------

			// ----------------Start for getting target code for Union
			// Education---------------------------------------------------
			if (strPrdType.equalsIgnoreCase("pE")) {
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("organisations_select_branchin^"
						+ branch_code);
				if (rs.next()) {
					if (rs.getInt("org_branchin") == 2) {
						target_code = "EDU_U";
						target_desc = "UNION EDUCATION - URBAN AREAS";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					} else if (rs.getInt("org_branchin") == 3
							|| rs.getInt("org_branchin") == 5) {
						target_code = "EDU_R";
						target_desc = "UNION EDUCATION - RURAL / SEMI URBAN AREAS";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
					}
				}
				target_code = "R_EDU";
				target_desc = "UNION EDUCATION";
				arrcol = new ArrayList();
				arrcol.add(target_code); // code for target master
				arrcol.add(target_desc); // description of target master code
				arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
				arrrow.add(arrcol);
				arrcol = null;
				target_code = "";
				target_desc = "";
			} else if (strPrdType.trim().equalsIgnoreCase("C")
					|| strPrdType.trim().equalsIgnoreCase("T")) {
				for (int i = 0; i < bsr_union_education.length; i++) {
					if (bsr_union_education[i].equals(bsr_code)) {
						target_code = "R_EDU";
						target_desc = "UNION EDUCATION";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
						break;
					}
				}
			}
			// ----------------End for getting target code for Union
			// Education---------------------------------------------------

			// ----------------Start for getting target code for Retail
			// Lending---------------------------------------------------
			if ((strPrdType.substring(0, 1)).equalsIgnoreCase("p")) {
				if (strPrdType.equalsIgnoreCase("pA")) {
					target_code = "R_MIL";
					target_desc = "UNION MILES";
				} else if (strPrdType.equalsIgnoreCase("pI")) {
					target_code = "R_HEA";
					target_desc = "UNION HEALTH";
				} else if (strPrdType.equalsIgnoreCase("pO")) {
					target_code = "R_SMI";
					target_desc = "UNION SMILE";
				} else if (strPrdType.equalsIgnoreCase("pP")) {
					target_code = "R_CAS";
					target_desc = "UNION CASH";
				} else if (strPrdType.equalsIgnoreCase("pM")) {
					target_code = "R_MOR";
					target_desc = "UNION MORTGAGE";
				} else if (strPrdType.equalsIgnoreCase("pD")) {
					if (rs != null)
						rs.close();
					rs = DBUtils.executeLAPSQuery("securesel^" + strAppno);
					if (rs.next()) {
						String loan_secure = rs.getString("loan_secure");
						if (loan_secure.equalsIgnoreCase("s")) {
							target_code = "R_CS";
							target_desc = "UNION COMFORT - SECURED";
						} else {
							target_code = "R_CC";
							target_desc = "UNION COMFORT - CLEAN";
						}
					}
				}

				if (target_code.length() > 0) {
					arrcol = new ArrayList();
					arrcol.add(target_code); // code for target master
					arrcol.add(target_desc); // description of target master
												// code
					arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
					arrrow.add(arrcol);
					arrcol = null;
					target_code = "";
					target_desc = "";
				}
			} else if (strPrdType.trim().equalsIgnoreCase("C")
					|| strPrdType.trim().equalsIgnoreCase("T")) {
				for (int i = 0; i < bsr_union_miles.length; i++) {
					if (bsr_union_miles[i].equals(bsr_code)) {
						target_code = "R_MIL";
						target_desc = "UNION MILES";
						break;
					}
				}
				if (target_code.length() > 0) {
					for (int i = 0; i < bsr_union_comfort.length; i++) {
						if (bsr_union_comfort[i].equals(bsr_code)) {
							target_code = "R_CS";
							target_desc = "UNION COMFORT - SECURED";
							break;
						}
					}
				}
				if (target_code.length() > 0) {
					arrcol = new ArrayList();
					arrcol.add(target_code); // code for target master
					arrcol.add(target_desc); // description of target master
												// code
					arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan Amount
					arrrow.add(arrcol);
					arrcol = null;
					target_code = "";
					target_desc = "";
				}
			}
			// ----------------End for getting target code for Retail
			// Lending---------------------------------------------------

			// ----------------Start for getting target code for Union
			// Trade---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("C")) {
				for (int i = 0; i < bsr_union_trade.length; i++) {
					if (bsr_union_trade[i].equals(bsr_code)) {
						target_code = "R_TRA";
						target_desc = "UNION TRADE";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
						break;
					}
				}
			}
			// ----------------End for getting target code for Union
			// Trade---------------------------------------------------

			// ----------------Start for getting target code for Union
			// Shares---------------------------------------------------
			if (strPrdType.trim().equalsIgnoreCase("C")) {
				for (int i = 0; i < bsr_union_shares.length; i++) {
					if (bsr_union_shares[i].equals(bsr_code)) {
						target_code = "R_SHA";
						target_desc = "UNION SHARES";
						arrcol = new ArrayList();
						arrcol.add(target_code); // code for target master
						arrcol.add(target_desc); // description of target master
													// code
						arrcol.add(jtn.format(recmdamt)); // Sanctioned Loan
															// Amount
						arrrow.add(arrcol);
						arrcol = null;
						target_code = "";
						target_desc = "";
						break;
					}
				}
			}
			// ----------------End for getting target code for Union
			// Shares---------------------------------------------------

			// ---------------------Start for setting current
			// date-----------------------------
			if (rs != null)
				rs.close();
			if (strAction.equalsIgnoreCase("undo")) {
				rs = DBUtils.executeLAPSQuery("compropform6^" + strAppno);
				if (rs.next()) {
					cur_date = Helper.correctNull(rs
							.getString("app_processdate"));
				}
			} else {
				cur_date = Helper.getCurrentDateTime();
			}
			cur_month = cur_date.substring(3, 5);
			cur_year = cur_date.substring(6, 10);

			// ---------------------End for setting current
			// date-----------------------------

			// ---------------------Start for setting from and to date for
			// month-----------------------------
			cal.set(Integer.parseInt(cur_date.substring(6, 10)), Integer
					.parseInt(cur_date.substring(3, 5)) - 1, Integer
					.parseInt(cur_date.substring(0, 2)));
			String from_date = "01/" + cur_date.substring(3, 5) + "/"
					+ cur_date.substring(6, 10);
			String to_date = Integer.toString(cal
					.getActualMaximum(Calendar.DAY_OF_MONTH))
					+ "/"
					+ cur_date.substring(3, 5)
					+ "/"
					+ cur_date.substring(6, 10);
			hshTargetData.put("from_date", from_date);
			hshTargetData.put("to_date", to_date);
			// ---------------------End for setting from and to date for
			// month-----------------------------

			// -----------------------------Start for setting sanctioned
			// accounts and amount in arrrow for
			// month-------------------------------------
			/*
			 * for(int i=0;i<arrrow.size();i++) {
			 * arrcol=(ArrayList)arrrow.get(i); if(rs != null) rs.close();
			 * rs=DBUtils
			 * .executeLAPSQuery("getsanction_target^"+from_date+"^"+to_date
			 * +"^"+arrcol.get(0).toString()+"^"+branch_code); if(rs.next()) {
			 * arrcol.add(Integer.toString(rs.getInt("TARGET_SANCTION_NOACC")));
			 * // sanctioned no of accounts for month
			 * arrcol.add(jtn.format(rs.getDouble("TARGET_SANCTION_AMOUNT")));
			 * // sanctioned amount for month } else {
			 * arrcol.add("NO DATA FOUND"); arrcol.add("NO DATA FOUND"); }
			 * arrrow.set(i,arrcol); arrcol=null; }
			 */
			// -----------------------------End for setting sanctioned accounts
			// and amount in arrrow for
			// month-------------------------------------
			// ---------------------Start for setting from and to date for
			// year-----------------------------
			/*
			 * if(Integer.parseInt(cur_month)<4)
			 * cur_year=Integer.toString(Integer.parseInt(cur_year)-1);
			 * hshTargetData.put("cur_year",cur_year); from_date =
			 * "01/04/"+cur_year; cur_year =
			 * Integer.toString(Integer.parseInt(cur_year)+1); to_date =
			 * "31/03/"+cur_year;
			 */

			// ---------------------End for setting from and to date for
			// year-----------------------------
			// -----------------------------Start for setting sanctioned,target
			// accounts and amount in arrrow for
			// year-------------------------------------
			for (int i = 0; i < arrrow.size(); i++) {
				arrcol = (ArrayList) arrrow.get(i);
				if (rs != null)
					rs.close();
				rs = DBUtils.executeLAPSQuery("getsanction_target^" + from_date
						+ "^" + to_date + "^" + arrcol.get(0).toString() + "^"
						+ branch_code);
				if (rs.next()) {
					arrcol.add(Integer.toString(rs
							.getInt("TARGET_SANCTION_NOACC")));
					arrcol.add(jtn.format(rs
							.getDouble("TARGET_SANCTION_AMOUNT")));
					arrcol.add(Integer.toString(rs.getInt("TARGET_NOACC")));
					arrcol.add(jtn.format(rs.getDouble("TARGET_AMOUNT")));
				} else {
					arrcol.add("NO DATA FOUND");
					arrcol.add("NO DATA FOUND");
					arrcol.add("NO DATA FOUND");
					arrcol.add("NO DATA FOUND");
				}
				arrrow.set(i, arrcol);
				arrcol = null;
			}
			// -----------------------------End for setting sanctioned,target
			// accounts and amount in arrrow for
			// year-------------------------------------*/

			hshTargetData.put("arrrow", arrrow);
			hshTargetData.put("no_of_new_accounts", Integer
					.toString(no_of_new_accounts));
			return hshTargetData;

		} catch (Exception e) {
			throw new EJBException("Error in getTargetMasterDetails :: "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing in the connection "
						+ cf.getMessage());
			}
		}
	}

	private void update_target_action(String strAction, String strAppno,
			String strPrdType, String branch_code, String strModuleType,
			String comapp_id, String appstatus1) {
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);

		ResultSet rs = null;

		try {
			if (strAction.equalsIgnoreCase("approve")
					|| (strAction.equalsIgnoreCase("undo") && appstatus1
							.equalsIgnoreCase("pa"))) {
				double sanction_amt = 0;
				double recmdamt = 0;
				int no_ofacc = 0;
				int noofquery = 0;
				String from_date = "", to_date = "", from_date_yearly = "", to_date_yearly = "";
				String target_code = "", target_desc = "", cur_year = "";
				HashMap hshTargetMasterData = new HashMap();
				HashMap hshQuery = null;
				HashMap hshQueryValues = null;
				ArrayList arrValues = null;
				ArrayList arrrow = null;
				ArrayList arrcol = null;
				hshQueryValues = new HashMap();
				hshTargetMasterData = getTargetMasterDetails(strAppno,
						strPrdType, branch_code, strModuleType, comapp_id,
						strAction);
				arrrow = (ArrayList) hshTargetMasterData.get("arrrow");
				from_date = Helper.correctNull(hshTargetMasterData.get(
						"from_date").toString());
				to_date = Helper.correctNull(hshTargetMasterData.get("to_date")
						.toString());
				// cur_year=Helper.correctNull(hshTargetMasterData.get("cur_year").toString());
				// from_date_yearly = "01/04/"+cur_year;
				// to_date_yearly =
				// "31/03/"+Integer.toString(Integer.parseInt(cur_year)+1);
				int no_of_accounts = Integer.parseInt(Helper
						.correctInt(hshTargetMasterData.get(
								"no_of_new_accounts").toString()));
				for (int i = 0; i < arrrow.size(); i++) {
					arrcol = (ArrayList) arrrow.get(i);
					target_code = arrcol.get(0).toString();
					target_desc = arrcol.get(1).toString();
					recmdamt = Double.parseDouble(arrcol.get(2).toString());
					// -----------------Start for updating target master for
					// monthly data-----------------
					/*
					 * if(!arrcol.get(3).toString().equalsIgnoreCase("NO DATA FOUND"
					 * )) { no_ofacc=Integer.parseInt(arrcol.get(3).toString());
					 * sanction_amt
					 * =Double.parseDouble(arrcol.get(4).toString());
					 * if(strAction.equalsIgnoreCase("approve")) {
					 * no_ofacc=no_ofacc+no_of_accounts; sanction_amt =
					 * sanction_amt + recmdamt; } else
					 * if(strAction.equalsIgnoreCase("undo")) {
					 * if(no_ofacc>=no_of_accounts && sanction_amt>=recmdamt) {
					 * no_ofacc=no_ofacc-no_of_accounts; sanction_amt =
					 * sanction_amt - recmdamt; } } noofquery=noofquery+1;
					 * hshQuery =new HashMap(); arrValues =new ArrayList();
					 * arrValues.add(Integer.toString(no_ofacc));
					 * arrValues.add(jtn.format(sanction_amt));
					 * arrValues.add(from_date); arrValues.add(to_date);
					 * arrValues.add(target_code); arrValues.add(branch_code);
					 * hshQuery.put("arrValues",arrValues);
					 * hshQuery.put("strQueryId","updsanction_target");
					 * hshQueryValues.put(Integer.toString(noofquery),hshQuery);
					 * }
					 */
					// -----------------End for updating target master for
					// monthly data-----------------
					// -----------------Start for updating target master for
					// Yearly data-----------------
					if (!arrcol.get(5).toString().equalsIgnoreCase(
							"NO DATA FOUND")) {
						no_ofacc = Integer.parseInt(arrcol.get(3).toString());
						sanction_amt = Double.parseDouble(arrcol.get(4)
								.toString());
						if (strAction.equalsIgnoreCase("approve")) {
							no_ofacc = no_ofacc + no_of_accounts;
							sanction_amt = sanction_amt + recmdamt;
						} else if (strAction.equalsIgnoreCase("undo")) {
							if (no_ofacc >= no_of_accounts
									&& sanction_amt >= recmdamt) {
								no_ofacc = no_ofacc - no_of_accounts;
								sanction_amt = sanction_amt - recmdamt;
							}
						}
						noofquery = noofquery + 1;
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						arrValues.add(Integer.toString(no_ofacc));
						arrValues.add(jtn.format(sanction_amt));
						arrValues.add(from_date);
						arrValues.add(to_date);
						arrValues.add(target_code);
						arrValues.add(branch_code);
						hshQuery.put("arrValues", arrValues);
						hshQuery.put("strQueryId", "updsanction_target");
						hshQueryValues.put(Integer.toString(noofquery),
								hshQuery);
					}
					// -----------------End for updating target master for
					// Yearly data-----------------
					arrcol = null;
				}

				if (noofquery > 0) {
					hshQueryValues.put("size", Integer.toString(noofquery));
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
			}
		} catch (Exception e) {
			throw new EJBException("Error in update_target_action :: "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing in the connection "
						+ cf.getMessage());
			}
		}
	}

	private HashMap find_target_exceeded(String strAppno, String strPrdType,
			String strModuleType, HashMap hshValues, HashMap hshRecord) {
		ResultSet rs = null;
		try {
			String branch_code = "", alert_desc = "", comapp_id = "";
			int target_no_ofacc = 0, sanction_no_ofacc = 0;
			double target_amt = 0.00, sanction_amt = 0.00, loan_recmdamt = 0.00;

			HashMap hshTargetMasterData = new HashMap();
			ArrayList arrrow = null;
			ArrayList arrcol = null;
			String target_desc = "";
			comapp_id = correctNull((String) hshValues.get("id"));
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues.get("comappid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidapplicantid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidBorrowerType"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues.get("comid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidapplicantid"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues.get("hidDemoId"));
			}
			if (comapp_id.equals("")) {
				comapp_id = correctNull((String) hshValues
						.get("hidapplicantnewid"));
			}

			/*---------------   Fetching of organisation code of the Borrower (Target Master) ---------------------*/
			if (strPrdType.substring(0, 1).equalsIgnoreCase("p")
					|| strPrdType.substring(0, 1).equalsIgnoreCase("a")
					|| strPrdType.equalsIgnoreCase("T")) {
				rs = DBUtils.executeLAPSQuery("selorgwithborrower_retail^"
						+ comapp_id);
				if (rs.next()) {
					branch_code = correctNull((String) rs.getString("org_code"));
				}
			} else if (strPrdType.equalsIgnoreCase("C")) {
				rs = DBUtils
						.executeLAPSQuery("selorgwithborrower^" + comapp_id);
				if (rs.next()) {
					branch_code = correctNull((String) rs.getString("org_code"));
				}
			}
			if (rs != null)
				rs.close();
			/*---------------   End Fetching of organisation code of the Borrower (Target Master)--- By Kamal  ---------------------*/
			hshTargetMasterData = getTargetMasterDetails(strAppno, strPrdType,
					branch_code, strModuleType, comapp_id, "get");

			arrrow = (ArrayList) hshTargetMasterData.get("arrrow");
			for (int i = 0; i < arrrow.size(); i++) {
				arrcol = (ArrayList) arrrow.get(i);
				target_desc = arrcol.get(1).toString();
				loan_recmdamt = Double.parseDouble(arrcol.get(2).toString());

				// -----------------Start for checking whether target exceeded
				// for Monthly data-----------------
				if (!arrcol.get(5).toString().equalsIgnoreCase("NO DATA FOUND")) {
					sanction_no_ofacc = Integer.parseInt(arrcol.get(3)
							.toString());
					sanction_amt = Double.parseDouble(arrcol.get(4).toString());
					target_no_ofacc = Integer
							.parseInt(arrcol.get(5).toString());
					target_amt = Double.parseDouble(arrcol.get(6).toString());

					if (alert_desc.length() > 0) {
						alert_desc = alert_desc + "   ";
					}

					if ((sanction_no_ofacc + 1) > target_no_ofacc
							&& (loan_recmdamt + sanction_amt) > target_amt) {
						alert_desc = alert_desc
								+ "The target for no of accounts and loan amount for "
								+ target_desc + " has been exceeded";
					} else if ((sanction_no_ofacc + 1) > target_no_ofacc) {
						alert_desc = alert_desc
								+ "The target for no of accounts for "
								+ target_desc + " has been exceeded";
					} else if ((loan_recmdamt + sanction_amt) > target_amt) {
						alert_desc = alert_desc
								+ "The target for loan amount for "
								+ target_desc + " has been exceeded";
					}
				}
				// -----------------End for checking whether target exceeded for
				// Yearly data-----------------
				arrcol = null;

			}

			if (alert_desc.length() > 0) {
				hshRecord.put("target_exceeded", "Y");
				hshRecord.put("alert_desc", Helper.correctNull(alert_desc));
			} else {
				hshRecord.put("target_exceeded", "N");
			}

		} catch (Exception e) {
			throw new EJBException("Error in find_target_exceeded :: "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing in the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;
	}

	public void updateWorkFlowComments(HashMap hshValues)  {
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();

		String strAppno = "";
		String strAction = "";
		int intUpdatesize = 0;
		StringBuilder sbActionData = new StringBuilder();
		StringBuilder sbOldAudit = new StringBuilder();
		String strQuery = "";
		ResultSet rs = null;
		try {
			strAction = correctNull((String) hshValues.get("hidAction"));
			strAppno = correctNull((String) hshValues.get("appno"));
			/***
			 * For Audit Trial Old Data - By Karthikeyan.S on 20/09/2013
			 */
			strQuery = SQLParser.getSqlQuery("sel_workflowcomment^" + strAppno
					+ "^"
					+ Helper.correctNull((String) hshValues.get("sel_level")));
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strOrgLevelOldAudit = Helper.correctNull((String) rs
						.getString("workflowcom_ORGLEVEL"));
				String strOrgLevelDescOldAudit = "";
				if (strOrgLevelOldAudit.equalsIgnoreCase("C")) {
					strOrgLevelDescOldAudit = "Head Office";
				} else if (strOrgLevelOldAudit.equalsIgnoreCase("R")) {
					strOrgLevelDescOldAudit = "Regional Office";
				} else if (strOrgLevelOldAudit.equalsIgnoreCase("D")) {
					strOrgLevelDescOldAudit = "CPC";
				} else if (strOrgLevelOldAudit.equalsIgnoreCase("A")) {
					strOrgLevelDescOldAudit = "CLPU";
				} else if (strOrgLevelOldAudit.equalsIgnoreCase("B")) {
					strOrgLevelDescOldAudit = "Branch";
				}
				sbOldAudit.append("Organisation = ").append(
						strOrgLevelDescOldAudit).append("~Comment = ")
						.append(
								Helper.CLOBToString(rs
										.getClob("workflowcom_COMMENTS")));
			}
			/***
			 * End - Audit Trial Old Data
			 */
			if (strAction.equals("update")) {
				arrValues = new ArrayList();
				hshQuery = new HashMap();
				intUpdatesize++;
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshValues.get("sel_level")));
				hshQuery.put("strQueryId", "del_workflowcomment");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("" + intUpdatesize, hshQuery);

				arrValues = new ArrayList();
				hshQuery = new HashMap();
				intUpdatesize++;
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshValues.get("sel_level")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_Comment")));
				hshQuery.put("strQueryId", "ins_workflowcomment");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("" + intUpdatesize, hshQuery);

			} else if (strAction.equals("delete")) {
				arrValues = new ArrayList();
				hshQuery = new HashMap();
				intUpdatesize++;
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshValues.get("sel_level")));
				hshQuery.put("strQueryId", "del_workflowcomment");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("" + intUpdatesize, hshQuery);
			}
			hshQueryValues.put("size", "" + intUpdatesize);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updateData");
			/***
			 * For Audit Trial New Data - By Karthikeyan.S on 20/09/2013
			 */
			if (strAction.equals("update")) {
				String strOrgLevel = Helper.correctNull((String) hshValues
						.get("sel_level"));
				String strOrgLevelDesc = "";
				if (strOrgLevel.equalsIgnoreCase("C")) {
					strOrgLevelDesc = "Head Office";
				} else if (strOrgLevel.equalsIgnoreCase("R")) {
					strOrgLevelDesc = "Regional Office";
				} else if (strOrgLevel.equalsIgnoreCase("D")) {
					strOrgLevelDesc = "CPC";
				} else if (strOrgLevel.equalsIgnoreCase("A")) {
					strOrgLevelDesc = "CLPU";
				} else if (strOrgLevel.equalsIgnoreCase("B")) {
					strOrgLevelDesc = "Branch";
				}
				sbActionData.append("Organisation = " + strOrgLevelDesc)
						.append("~Comment = ").append(
								Helper.correctNull((String) hshValues
										.get("txt_Comment")));
			}
			AuditTrial.auditNewLog(hshValues, "230", strAppno, sbActionData
					.toString(), sbOldAudit.toString());
			/***
			 * End - Audit Trial New Data
			 */
		} catch (Exception ex) {
			throw new EJBException(
					"Error in updateWorkFlowComments of CommWorkflowBean :: "
							+ ex.toString());
		}
	}

	/* added by gokul */

	public void updateDrawDownSchedule(HashMap hshValues)  {

		HashMap hshQueryValues;
		HashMap hshQuery;
		ArrayList arrValues;
		String strAppno = null;
		String strSno = null;
		String quaterstartdate = "";
		String quaterenddate = "";
		String totquater = "";
		String amtquater = "";
		String strQuery = "";
		ResultSet rs = null;
		String strDDSno = "";
		String hidaction = correctNull((String) hshValues.get("hidAction"));
		strAppno = Helper.correctNull((String) hshValues.get("appno"));
		strSno = Helper.correctInt((String) hshValues.get("sel_facilitysno"));

		try {
			if (Helper.correctNull((String) hshValues.get("apploantype"))
					.equalsIgnoreCase("P"))
				strSno = "1";

			hshQueryValues = new HashMap();
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			if (hidaction.equals("delete")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(strAppno);
				arrValues.add(strSno);
				arrValues.add(Helper.correctNull(Helper
						.correctNull((String) hshValues.get("hidSno"))));
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "del_drawdown");
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(Helper.correctNull(strAppno));
				arrValues.add(Helper.correctNull(strSno));
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add(Helper.correctNull((String) hshValues
						.get("hidSno")));
				arrValues.add(hidaction);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_drawdown_history");
				hshQueryValues.put("2", hshQuery);

				hshQueryValues.put("size", "2");
			}

			else if (hidaction.equals("insert")) {
				strQuery = SQLParser.getSqlQuery("sel_maxsno_drawdown^"
						+ strAppno + "^" + strSno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strDDSno = Helper.correctInt((String) rs
							.getString("maxsno"));
				}
				quaterstartdate = Helper.correctNull((String) hshValues
						.get("txt_quaterstartdate"));
				quaterenddate = Helper.correctNull((String) hshValues
						.get("txt_quaterenddate"));
				totquater = Helper.correctNull((String) hshValues
						.get("txt_totquater"));
				amtquater = Helper.correctNull((String) hshValues
						.get("txt_amtquater"));

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(Helper.correctNull(strAppno));
				arrValues.add(Helper.correctNull(strSno));
				arrValues.add(Helper.correctNull(quaterstartdate));
				arrValues.add(Helper.correctNull(quaterenddate));
				arrValues.add(Helper.correctNull(totquater));
				arrValues.add(Helper.correctNull(amtquater));
				arrValues.add(strDDSno);

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_drawdownschedule");
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(Helper.correctNull(strAppno));
				arrValues.add(Helper.correctNull(strSno));
				arrValues.add(Helper.correctNull(quaterstartdate));
				arrValues.add(Helper.correctNull(quaterenddate));
				arrValues.add(Helper.correctNull(totquater));
				arrValues.add(Helper.correctNull(amtquater));
				arrValues.add(strDDSno);
				arrValues.add(hidaction);

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_drawdown_history");
				hshQueryValues.put("2", hshQuery);

				hshQueryValues.put("size", "2");

			} else if (hidaction.equals("update")) {
				quaterstartdate = Helper.correctNull((String) hshValues
						.get("txt_quaterstartdate"));
				quaterenddate = Helper.correctNull((String) hshValues
						.get("txt_quaterenddate"));
				totquater = Helper.correctNull((String) hshValues
						.get("txt_totquater"));
				amtquater = Helper.correctNull((String) hshValues
						.get("txt_amtquater"));

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(Helper.correctNull(quaterstartdate));
				arrValues.add(Helper.correctNull(quaterenddate));
				arrValues.add(Helper.correctNull(totquater));
				arrValues.add(Helper.correctNull(amtquater));
				arrValues.add(Helper.correctNull(strAppno));
				arrValues.add(Helper.correctNull(strSno));
				arrValues.add(Helper.correctNull(Helper
						.correctNull((String) hshValues.get("hidSno"))));
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "upd_drawdownschedule");
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(Helper.correctNull(strAppno));
				arrValues.add(Helper.correctNull(strSno));
				arrValues.add(Helper.correctNull(quaterstartdate));
				arrValues.add(Helper.correctNull(quaterenddate));
				arrValues.add(Helper.correctNull(totquater));
				arrValues.add(Helper.correctNull(amtquater));
				arrValues.add(Helper.correctNull((String) hshValues
						.get("hidSno")));
				arrValues.add(hidaction);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_drawdown_history");
				hshQueryValues.put("2", hshQuery);

				hshQueryValues.put("size", "2");
			}
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updateData");
		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		}
	}

	public HashMap getDrawDownSchedule(HashMap hshValues)  {
		HashMap hshRecord;
		String strAppno = "";
		String strSno = "";
		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		String strQuery = "";
		ArrayList arrRow = new ArrayList();
		ArrayList arrCol = null;

		try {
			hshRecord = new HashMap();

			strAppno = correctNull((String) hshValues.get("appno"));
			strSno = Helper.correctInt((String) hshValues
					.get("sel_facilitysno"));
			if (Helper.correctNull((String) hshValues.get("apploantype"))
					.equalsIgnoreCase("P"))
				strSno = "1";

			strQuery = SQLParser.getSqlQuery("drawdownsclt^" + strAppno + "^"
					+ strSno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("qtr_start_date")));
				arrCol.add(correctNull(rs.getString("qtr_end_date")));
				arrCol.add(correctNull(rs.getString("tot_qtr")));
				arrCol.add(correctNull(rs.getString("amt_qtr")));
				arrCol.add(correctNull(rs.getString("DD_SNO")));
				// hshRecord.put("maxdate",correctNull(rs.getString("maxdate")));

				arrRow.add(arrCol);
			}
			hshRecord.put("arrRow", arrRow);

			hshRecord.put("strSno", strSno);
			hshRecord.put("schemeCode", Helper.correctNull((String) hshValues
					.get("schemeCode")));

			rs1 = DBUtils.executeLAPSQuery("sel_facilitycodedesc_dds^"
					+ strAppno);
			{
				if (rs1.next())

				{
					hshRecord.put("strFacDesc", Helper.correctNull(rs1
							.getString("facility_displaydesc")));
				}
			}

			rs1 = DBUtils.executeLAPSQuery("sel_dds_facilitysanc^" + strAppno
					+ "^" + strSno);
			{
				if (rs1.next())

				{
					hshRecord.put("sancamount", Helper.correctNull(rs1
							.getString("facility_sancamt")));
				}
			}

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("app_loantype", correctNull((String) rs
						.getString("app_loantype")));
				hshRecord.put("app_legalcomp", correctNull((String) rs
						.getString("app_legalcomp")));
				hshRecord.put("app_renew_flag", correctNull(rs
						.getString("app_renew_flag")));
			}

			if (rs != null)
				rs.close();
			if (Helper.correctNull((String) hshValues.get("apploantype"))
					.equalsIgnoreCase("P")) {
				strQuery = SQLParser.getSqlQuery("getlreq^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("Sanc_amt", Helper.correctDouble((String) rs
							.getString("loan_recmdamt")));
				}
			} else {
				strQuery = SQLParser.getSqlQuery("sel_facbasedonsnogrp^"
						+ strAppno + "^" + strSno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshRecord.put("Sanc_amt", Helper.correctDouble((String) rs
							.getString("FACILITY_SANCAMT")));
				}
			}
		} catch (Exception e) {
			throw new EJBException("Error in getWorkFlowDrawDownSchedule"
					+ e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception ex) {
				throw new EJBException(
						"Error in Closing the connection in getWorkFlowComments of CommWorkflowBean"
								+ ex.toString());
			}
		}
		return hshRecord;
	}

	public HashMap getWorkFlowComments(HashMap hshValues)  {
		HashMap hshRecord;
		ResultSet rs = null;
		String strAppno = "";
		String strQuery = "";
		String strLevel = "";
		String strApplevel = "";

		try {
			hshRecord = new HashMap();
			strAppno = correctNull((String) hshValues.get("appno"));
			strLevel = correctNull((String) hshValues.get("sel_level"));
			strQuery = SQLParser.getSqlQuery("commworkflowsel2^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strAppStatus = rs.getString("app_status");
				String strLoantype = correctNull(rs.getString("app_loantype"));
				strApplevel = correctNull(rs.getString("app_orglevel"));
				hshRecord.put("appstatus", strAppStatus);
				hshRecord.put("app_loantype", strLoantype);
				hshRecord.put("app_legalcomp", correctNull(rs
						.getString("app_legalcomp")));
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_workflowcomment^" + strAppno
					+ "^" + strLevel);

			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshRecord.put("appno", correctNull(rs
						.getString("workflowcom_appno")));
				hshRecord.put("comment", Helper.CLOBToString(rs
						.getClob("workflowcom_comments")));

			}
			if (strApplevel.equals("S"))
				hshRecord.put("remarksapplevel", strApplevel);

			hshRecord.put("remarksorglevel", strLevel);
		} catch (Exception ex) {
			throw new EJBException(
					"Error in getWorkFlowComments of CommWorkflowBean :: "
							+ ex.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception ex) {
				throw new EJBException(
						"Error in Closing the connection in getWorkFlowComments of CommWorkflowBean"
								+ ex.toString());
			}
		}
		return hshRecord;
	}

	public void updateTLRStatus(HashMap hshSaveValues)  {

		String strAppno = null;
		String strUserId = null;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		int intCounter = 0;
		StringBuilder sbAuditData = new StringBuilder();
		try {

			strAppno = Helper.correctNull((String) hshSaveValues
					.get("hidtlrno"));
			strUserId = Helper.correctNull((String) hshSaveValues
					.get("strUserId"));
			hshQuery.put("strQueryId", "tlr_applications_update_closedstatus");
			arrValues.add("ca");
			arrValues.add(strUserId);
			arrValues.add(strAppno);
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(++intCounter), hshQuery);
			hshQueryValues.put("size", String.valueOf(intCounter));
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updateData");

			sbAuditData.append("~ Application Freezed");
			AuditTrial.auditNewLog(hshSaveValues, "336", strAppno, sbAuditData
					.toString(), "");

		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		}
	}

	public HashMap getTermsofSanctionFacilityData(HashMap hshValues)
			 {
		HashMap hshRecord = null;
		ArrayList arrVal = null;
		ArrayList arrData = null;
		String strQuery = null;
		String strQuery1 = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs3 = null;
		String strAppno = null;
		String strBorrowId = null;
		int intGroup = 0;
		java.text.NumberFormat jtn = java.text.NumberFormat.getInstance();
		jtn.setMaximumFractionDigits(2);
		jtn.setMinimumFractionDigits(2);
		jtn.setGroupingUsed(false);
		double dblExist = 0.00, dblProposed = 0.00, dblDiff = 0.00, dblTotDiff = 0.00, dblTotExist = 0.00;
		boolean recordflag = false;

		try {
			hshRecord = new HashMap();
			arrData = new ArrayList();
			strAppno = correctNull((String) hshValues.get("appno"));
			strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hshRecord.put("app_loantype", correctNull((String) rs
						.getString("app_loantype")));
				hshRecord.put("app_legalcomp", correctNull((String) rs
						.getString("app_legalcomp")));
			}
			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("facilitieslist_selectall^"
					+ strAppno + "^" + intGroup);
			rs = DBUtils.executeQuery(strQuery);
			dblExist = 0.00;
			dblProposed = 0.00;
			dblDiff = 0.00;
			int lngGrpSize = 0;
			ArrayList arrSubGrp = new ArrayList();
			String strExist = "", strProposed = "";
			String strSancAmt = "";
			String strSancStatus = "", strSno = "";

			String strBSSVal = "", strCRPVal = "", strMCLRType = "";

			while (rs.next()) {
				intGroup = rs.getInt("facility_sno");
				arrVal = new ArrayList();
				arrVal.add(correctNull(rs.getString("facility_headid")));// 1
				arrVal.add(correctNull(rs.getString("facheaddesc")));// 2
				arrVal.add(correctNull(rs.getString("facility_id")));// 3
				arrVal.add(correctNull(rs.getString("facdesc")));// 4
				strBorrowId = correctNull(rs.getString("borrower_id"));
				arrVal.add(strBorrowId);// 5
				arrVal.add(correctNull(rs.getString("facility_date")));// 6
				dblExist = rs.getDouble("facility_existing");
				dblProposed = rs.getDouble("facility_proposed");
				dblTotExist = dblTotExist + dblExist;
				dblDiff = dblProposed - dblExist;
				dblTotDiff = dblTotDiff + dblDiff;
				strExist = jtn.format(dblExist);
				strProposed = jtn.format(dblProposed);
				String strDiff = jtn.format(dblDiff);
				String strMargin = correctNull(rs.getString("facility_margin"));
				strSno = correctNull(rs.getString("facility_sno"));

				lngGrpSize = 0;
				arrSubGrp = new ArrayList();
				rs3 = DBUtils.executeQuery(SQLParser
						.getSqlQuery("selFacilityListSize^" + strAppno + "^"
								+ intGroup));
				while (rs3.next()) {
					lngGrpSize = lngGrpSize + 1;
					arrSubGrp.add(Helper.correctNull((String) rs3
							.getString("facility_sno")));
				}
				if (rs3 != null)
					rs3.close();

				String strFacInterest = correctNull(rs
						.getString("facility_interest"));
				String strIntadjust = correctNull(rs
						.getString("facility_intadjustment"));
				arrVal.add(strExist);// 7
				arrVal.add(strProposed);// 8
				arrVal.add(strDiff);// 9
				arrVal.add(strIntadjust);// 10
				arrVal.add(strSno);// 11
				arrVal
						.add(correctNull((String) rs
								.getString("facility_group")));// 12
				arrVal.add(correctNull((String) rs.getString("facility_desc")));// 13
				arrVal.add(correctNull((String) rs
						.getString("facility_category")));// 14
				arrVal
						.add(correctNull((String) rs
								.getString("facility_months")));// 15
				arrVal.add(correctNull((String) rs
						.getString("facility_branchname")));// 16
				arrVal.add(strFacInterest); // 17
				arrVal.add(strMargin);// 18
				arrVal.add(correctNull((String) rs.getString("BPLR")));// 19
				arrVal.add(correctNull((String) rs.getString("facility_dp")));// 20
				arrVal.add(correctNull((String) rs
						.getString("facility_outstanding")));// 21
				arrVal
						.add(correctNull((String) rs
								.getString("security_value"))); // 22
				arrVal.add(correctNull((String) rs.getString("cbs_accountno")));// 23
				arrVal.add(Integer.toString(lngGrpSize));// 24
				arrVal.add(arrSubGrp);// 25
				arrVal.add(correctNull((String) rs
						.getString("facility_intremarks")));// 26
				arrVal
						.add(correctNull((String) rs
								.getString("facility_osason")));// 27
				arrVal.add(correctNull((String) rs
						.getString("facility_existbanktype")));// 28
				arrVal.add(Helper.correctNull((String) rs
						.getString("facility_propbanktype")));// 29
				arrVal.add(Helper.correctNull((String) rs
						.getString("facility_purpose")));// 30
				arrVal.add(Helper.correctNull((String) rs
						.getString("facility_sancinterest")));// 31
				strSancStatus = Helper.correctNull((String) rs
						.getString("facility_sancstatus"));
				arrVal.add(strSancStatus);// 32
				strSancAmt = Helper.checkDecimal(Helper
						.correctDouble((String) rs
								.getString("facility_sancamt")));
				arrVal.add(strSancAmt);// 33
				arrVal.add(Helper.correctNull((String) rs
						.getString("facility_sancintremarks")));// 34
				arrVal.add(Helper.correctNull((String) rs
						.getString("facility_for")));// 35
				arrVal.add(Helper
						.CLOBToString(rs.getClob("facility_rejreason")));// 36
				// arrVal.add(Helper.correctNull((String)rs.getString("fcaility_intrate_flag")));//35

				// To select the post sanction parameters
				String strQueryPS = SQLParser
						.getSqlQuery("sel_postsanctiondet^"
								+ Helper.correctNull((String) rs
										.getString("facility_sno")) + "^"
								+ strAppno);
				ResultSet rsPS = DBUtils.executeQuery(strQueryPS);
				if (rsPS.next()) {
					arrVal.add(Helper.correctNull(rsPS
							.getString("PS_MODIFY_TERMS")));
					arrVal.add("Y");
				} else {
					arrVal.add("");
					arrVal.add("N");
				}

				// To take MCLR spread value
				if (rsPS != null)
					rsPS.close();
				strQueryPS = SQLParser.getSqlQuery("sel_facility_mclrspread^"
						+ Helper.correctNull((String) rs
								.getString("facility_sno")) + "^" + strAppno);
				rsPS = DBUtils.executeQuery(strQueryPS);
				if (rsPS.next()) {
					arrVal.add(Helper.correctDouble(rsPS
							.getString("mclr_spread")));// 39
					strBSSVal = Helper.correctDouble(rsPS
							.getString("mclr_bsp_total"));

					strCRPVal = Helper.correctDouble(rsPS
							.getString("mclr_crp_total"));

					String strArr[] = Helper.correctNull(
							rsPS.getString("facility_mclrtype")).split("@");
					if (strArr != null && strArr.length > 0) {
						if (rs3 != null)
							rs3.close();
						rs3 = DBUtils
								.executeLAPSQuery("sel_CBSStaticDataPassingCode^34^"
										+ strArr[0]);
						if (rs3.next()) {
							strMCLRType = Helper.correctNull(rs3
									.getString("cbs_static_data_passing_code"));
						} else
							strMCLRType = "";
					} else
						strMCLRType = "";

				} else {
					arrVal.add("0.00");// 39
					strBSSVal = "0.00";

					strCRPVal = "0.00";
					strMCLRType = "";

				}

				// To get the fund based exposure of a borrower

				double MSMEexpval = 0.00;
				boolean boolMSMEprd = false;

				if (rsPS != null) {
					rsPS.close();
				}

				rsPS = DBUtils.executeLAPSQuery("sel_MSME_product^"
						+ Helper.correctNull((String) rs
								.getString("facility_sno")) + "^" + strAppno);
				if (rsPS.next()) {
					boolMSMEprd = true;
				}

				if (boolMSMEprd) {
					MSMEexpval = getBorrowerMSMETotalLimit(Helper
							.correctNull((String) hshValues
									.get("hidapplicantid")), "R");

					arrVal.add("Y");// 40
					arrVal.add("" + MSMEexpval);// 41
				} else {
					arrVal.add("N");// 40
					arrVal.add("" + MSMEexpval);// 41
				}

				if (rsPS != null) {
					rsPS.close();
				}

				rsPS = DBUtils.executeLAPSQuery("sel_oldfac_processdate_PS^"
						+ strAppno + "^"
						+ Helper.correctNull(rs.getString("facility_sno")));
				if (rsPS.next()) {
					if (Integer.parseInt(Helper.correctInt(rsPS
							.getString("dayval"))) < 0) {
						arrVal.add("N");
					} else {
						arrVal.add("Y");
					}
				} else {
					arrVal.add("Y");
				}
				arrVal
						.add(Helper.correctNull(rs
								.getString("facility_inttype")));// 43
				arrVal.add(strBSSVal);// 44

				double modintrate = 0.00, cgtmseSplitup = 0.00;
				String cgtmseappl = "";

				modintrate = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("FACILITY_SANCINTEREST")));
				cgtmseSplitup = Double.parseDouble(Helper
						.correctDouble((String) rs
								.getString("FACILITY_CG_SPLIT_INT_RATE")));
				cgtmseappl = Helper.correctDouble((String) rs
						.getString("FACILITY_WHT_CGTMSEAPPLY"));

				hshRecord.put("cgtMseSplitUp", cgtmseSplitup);
				double cgtmse_coverage = 0.00, dblsancintrate = 0.00;
				if (cgtmseappl.equals("Y")) {
					if (rsPS != null)
						rsPS.close();
					double paramval_CGTMSEint = 0.00;
					strQuery = SQLParser.getSqlQuery("sel_laps_cg_parms");
					rsPS = DBUtils.executeQuery(strQuery);
					if (rsPS.next()) {
						paramval_CGTMSEint = Double.parseDouble(Helper
								.correctDouble((String) rsPS
										.getString("loan_paramval")));
						hshRecord.put("paramval_CGTMSEint", Helper
								.formatDoubleValue(paramval_CGTMSEint));
					}
					if ((modintrate + cgtmseSplitup) > paramval_CGTMSEint) {
						hshRecord.put("strCGTMSEtotintrate", "Y");
					} else {
						hshRecord.put("strCGTMSEtotintrate", "N");
					}

					if (rsPS != null)
						rsPS.close();

					strQuery = SQLParser
							.getSqlQuery("sel_CropCgtmse_app_Exstng^"
									+ strAppno
									+ "^"
									+ Helper.correctNull(rs
											.getString("facility_sno")));
					rsPS = DBUtils.executeQuery(strQuery);
					if (rsPS.next()) {
						cgtmse_coverage = Double.parseDouble(Helper
								.correctDouble((String) rsPS
										.getString("CG_CGTMSE_COVERAGE")))
								+ Double
										.parseDouble(Helper
												.correctDouble((String) rsPS
														.getString("cg_ourbank_coverage")));
					}
					if (rsPS != null)
						rsPS.close();
					double maxcgtmseLimit = 0.00;
					strQuery = SQLParser
							.getSqlQuery("selotherparam_ratexpos^115");
					rsPS = DBUtils.executeQuery(strQuery);
					if (rsPS.next()) {
						maxcgtmseLimit = Double.parseDouble(Helper
								.correctDouble((String) rsPS
										.getString("loan_paramval")));
						hshRecord.put("strmaxcgtmseLimit", Helper
								.formatDoubleValue(maxcgtmseLimit));
					}
					if (cgtmse_coverage > maxcgtmseLimit) {
						hshRecord.put("strCGTMSEcovLimit", "Y");
					} else {
						hshRecord.put("strCGTMSEcovLimit", "N");
					}
				}

				arrVal.add(Helper.correctNull((String) hshRecord
						.get("strCGTMSEtotintrate")));// 45
				arrVal.add(Helper.correctDouble((String) hshRecord
						.get("paramval_CGTMSEint")));// 46
				arrVal.add(Helper.formatDoubleValue(cgtmse_coverage));// 47
				arrVal.add(Helper.correctDouble((String) hshRecord
						.get("strmaxcgtmseLimit")));// 48
				arrVal.add(cgtmseappl);// 49
				arrVal.add(correctNull(""));// 50
				arrVal.add(correctNull(rs.getString("FACILITY_DEVIATION")));// 51
				arrVal.add(correctNull(rs.getString("FACILITY_CONCESSION")));// 52
				arrVal
						.add(correctNull(rs
								.getString("FACILITY_AS_PER_CIRCULAR")));// 53
				arrVal.add(correctNull(rs
						.getString("FACILITY_MOD_INTRATE_REASON")));// 54
				arrVal.add(Helper.correctNull((String) rs
						.getString("fcaility_intrate_flag")));// 55
				arrVal.add(correctNull(rs
						.getString("FACILITY_MOD_INTRATE_CONC")));// 56
				arrVal.add(Helper.correctNull((String) rs
						.getString("FACILITY_MODE_INTRATE_CIR")));// 57
				// for mis details check
				if (rsPS != null) {
					rsPS.close();
				}
				
				//if(rsPS!=null) rsPS.close();
//				if(intGroup)
//				{
//					intGroup="0";
//				}
				
				strQueryPS = SQLParser.getSqlQuery("sel_misappdetails^"
						+ strAppno + "^" + intGroup);
				rsPS = DBUtils.executeQuery(strQueryPS);
				if (rsPS.next()) {
					arrVal.add("Y");// 50
				} else {
					arrVal.add("N");// 50
				}

				arrVal.add(strCRPVal);
				arrVal.add(strMCLRType);

				strQueryPS="";
				strQueryPS = SQLParser.getSqlQuery("selupdateROIInFInancleoldroifacility^"+strAppno+"^"+Helper.correctNull(rs.getString("facility_sno")));
				rsPS = DBUtils.executeQuery(strQueryPS);
				if(rsPS.next())
				{
					arrVal.add(correctNull(rsPS.getString("facility_effintroidate")));//62
				}
				else
				{
					arrVal.add("");//62
				}
				
				
				
				if(rsPS!=null) rsPS.close();
//				if(intGroup)
//				{
//					intGroup="0";
//				}
				strQueryPS = SQLParser.getSqlQuery("sel_postsanctiondateroicorpagrimridet12^"+strAppno+"^"+Helper.correctNull(rs.getString("facility_sno")));
				rsPS = DBUtils.executeQuery(strQueryPS);
				if(rsPS.next())
				{
					arrVal.add("Y");//63
				}
				else
				{
					arrVal.add("N");//63
				}
				arrData.add(arrVal);

				if (correctNull(rs.getString("facility_reattachflag"))
						.equalsIgnoreCase("Y")) {
					hshRecord.put("strReselectFlag", "Y");
					hshRecord.put("strReselectDesc", correctNull(rs
							.getString("facheaddesc"))
							+ "-" + correctNull(rs.getString("facdesc")));
				}

				strQuery1 = SQLParser.getSqlQuery("facilitieslist_selectall^"
						+ strAppno + "^" + intGroup);
				rs1 = DBUtils.executeQuery(strQuery1);
				while (rs1.next()) {
					arrVal = new ArrayList();
					arrVal.add(correctNull(rs1.getString("facility_headid")));// 1
					arrVal.add(correctNull(rs1.getString("facheaddesc")));// 2
					arrVal.add(correctNull(rs1.getString("facility_id")));// 3
					arrVal.add(correctNull(rs1.getString("facdesc")));// 4
					strBorrowId = correctNull(rs1.getString("borrower_id"));
					arrVal.add(strBorrowId);// 5
					arrVal.add(correctNull(rs1.getString("facility_date")));// 6
					dblExist = rs1.getDouble("facility_existing");
					dblProposed = rs1.getDouble("facility_proposed");
					strExist = jtn.format(dblExist);
					dblDiff = dblProposed - dblExist;
					strProposed = jtn.format(dblProposed);
					strDiff = jtn.format(dblDiff);
					strMargin = correctNull(rs1.getString("facility_margin"));
					strFacInterest = correctNull(rs1
							.getString("facility_interest")); // raman
					strIntadjust = correctNull(rs1
							.getString("facility_intadjustment"));
					strSno = correctNull(rs1.getString("facility_sno"));
					arrVal.add(strExist);// 7
					arrVal.add(strProposed);// 8
					arrVal.add(strDiff);// 9
					arrVal.add(strIntadjust);// 10
					arrVal.add(strSno);// 11
					arrVal.add(correctNull((String) rs1
							.getString("facility_group")));// 12
					arrVal.add(correctNull((String) rs1
							.getString("facility_desc")));// 13
					arrVal.add(correctNull((String) rs1
							.getString("facility_category")));// 14
					arrVal.add(correctNull((String) rs1
							.getString("facility_months")));// 15
					arrVal.add(correctNull((String) rs1
							.getString("facility_branchname")));// 16
					arrVal.add(strFacInterest); // 17
					arrVal.add(correctNull(strMargin));// 18
					arrVal.add(correctNull((String) rs1.getString("BPLR")));// 19
					arrVal.add(correctNull((String) rs1
							.getString("facility_dp")));// 20
					arrVal.add(correctNull((String) rs1
							.getString("facility_outstanding")));// 21
					arrVal.add(correctNull((String) rs1
							.getString("security_value")));// 22
					arrVal.add(correctNull((String) rs1
							.getString("cbs_accountno")));// 23
					arrVal.add(Integer.toString(lngGrpSize));// 24
					arrVal.add(arrSubGrp);// 25
					arrVal.add(correctNull((String) rs1
							.getString("facility_intremarks")));// 26
					arrVal.add(correctNull((String) rs1
							.getString("facility_osason")));// 27
					arrVal.add(correctNull((String) rs1
							.getString("facility_existbanktype")));// 28
					arrVal.add(correctNull((String) rs1
							.getString("facility_propbanktype")));// 29
					arrVal.add(Helper.correctNull((String) rs1
							.getString("facility_purpose")));// 30
					arrVal.add(Helper.correctNull((String) rs1
							.getString("facility_sancinterest")));// 31
					arrVal.add(Helper.correctNull((String) rs1
							.getString("facility_sancstatus")));// 32
					arrVal.add(Helper.correctNull((String) rs1
							.getString("facility_sancamt")));// 33
					arrVal.add(Helper.correctNull((String) rs1
							.getString("facility_sancintremarks")));// 34
					arrVal.add(Helper.checkDecimal(Helper
							.correctDouble(strSancAmt)));// 35 Main limit
															// sanction amount
					arrVal.add(strSancStatus);// 36 Main limit sanciton status
					arrVal.add(Helper.correctNull((String) rs1
							.getString("facility_for")));// 37
					arrVal.add(Helper.CLOBToString(rs1
							.getClob("facility_rejreason")));// 38

					// To select the post sanction parameters
					strQueryPS = SQLParser.getSqlQuery("sel_postsanctiondet^"
							+ Helper.correctNull((String) rs1
									.getString("facility_sno")) + "^"
							+ strAppno);
					rsPS = DBUtils.executeQuery(strQueryPS);
					if (rsPS.next()) {
						arrVal.add(Helper.correctNull(rsPS
								.getString("PS_MODIFY_TERMS")));
						arrVal.add("Y");
					} else {
						arrVal.add("");
						arrVal.add("N");
					}

					// To take MCLR spread value
					if (rsPS != null)
						rsPS.close();
					strQueryPS = SQLParser
							.getSqlQuery("sel_facility_mclrspread^"
									+ Helper.correctNull((String) rs1
											.getString("facility_sno")) + "^"
									+ strAppno);
					rsPS = DBUtils.executeQuery(strQueryPS);
					if (rsPS.next()) {
						arrVal.add(Helper.correctDouble(rsPS
								.getString("mclr_spread")));// 39
						strBSSVal = Helper.correctDouble(rsPS
								.getString("mclr_bsp_total"));

						strCRPVal = Helper.correctDouble(rsPS
								.getString("mclr_crp_total"));

						String strArr[] = Helper.correctNull(
								rsPS.getString("facility_mclrtype")).split("@");
						if (strArr != null && strArr.length > 0) {
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("sel_CBSStaticDataPassingCode^34^"
											+ strArr[0]);
							if (rs3.next()) {
								strMCLRType = Helper
										.correctNull(rs3
												.getString("cbs_static_data_passing_code"));
							} else
								strMCLRType = "";
						} else
							strMCLRType = "";

					} else {
						arrVal.add("0.00");// 39
						strBSSVal = "0.00";

						strCRPVal = "0.00";
						strMCLRType = "";

					}
					hshRecord.put("strSno", strSno);
					// To get the fund based exposure of a borrower

					double MSMEexpval_sub = 0.00;
					boolean boolMSMEprd_sub = false;

					if (rsPS != null) {
						rsPS.close();
					}

					rsPS = DBUtils.executeLAPSQuery("sel_MSME_product^"
							+ Helper.correctNull((String) rs
									.getString("facility_sno")) + "^"
							+ strAppno);
					if (rsPS.next()) {
						boolMSMEprd_sub = true;
					}

					if (boolMSMEprd_sub) {
						MSMEexpval_sub = getBorrowerMSMETotalLimit(Helper
								.correctNull((String) hshValues
										.get("hidapplicantid")), "R");

						arrVal.add("Y");// 42
						arrVal.add(Helper.formatDoubleValue(MSMEexpval_sub));// 43
					} else {
						arrVal.add("N");// 42
						arrVal.add(Helper.formatDoubleValue(MSMEexpval_sub));// 43
					}

					if (rsPS != null) {
						rsPS.close();
					}

					rsPS = DBUtils
							.executeLAPSQuery("sel_oldfac_processdate_PS^"
									+ strAppno
									+ "^"
									+ Helper.correctNull(rs
											.getString("facility_sno")));
					if (rsPS.next()) {
						if (Integer.parseInt(Helper.correctInt(rsPS
								.getString("dayval"))) < 0) {
							arrVal.add("N");
						} else {
							arrVal.add("Y");
						}
					} else {
						arrVal.add("Y");
					}
					arrVal.add(Helper.correctNull(rs1
							.getString("facility_inttype")));// 44
					arrVal.add(strBSSVal);// 45
					cgtmse_coverage = 0.00;
					modintrate = Double.parseDouble(Helper
							.correctDouble((String) rs1
									.getString("FACILITY_SANCINTEREST")));
					cgtmseSplitup = Double.parseDouble(Helper
							.correctDouble((String) rs1
									.getString("FACILITY_CG_SPLIT_INT_RATE")));
					cgtmseappl = Helper.correctDouble((String) rs1
							.getString("FACILITY_WHT_CGTMSEAPPLY"));
					if (cgtmseappl.equals("Y")) {
						if (rsPS != null)
							rsPS.close();
						double paramval_CGTMSEint = 0.00;
						strQuery = SQLParser.getSqlQuery("sel_laps_cg_parms");
						rsPS = DBUtils.executeQuery(strQuery);
						if (rsPS.next()) {
							paramval_CGTMSEint = Double.parseDouble(Helper
									.correctDouble((String) rsPS
											.getString("loan_paramval")));
							hshRecord.put("paramval_CGTMSEint", Helper
									.formatDoubleValue(paramval_CGTMSEint));
						}
						if ((modintrate + cgtmseSplitup) > paramval_CGTMSEint) {
							hshRecord.put("strCGTMSEtotintrate", "Y");
						} else {
							hshRecord.put("strCGTMSEtotintrate", "N");
						}

						if (rsPS != null)
							rsPS.close();

						strQuery = SQLParser
								.getSqlQuery("sel_CropCgtmse_app_Exstng^"
										+ strAppno
										+ "^"
										+ Helper.correctNull(rs
												.getString("facility_sno")));
						rsPS = DBUtils.executeQuery(strQuery);
						if (rsPS.next()) {
							cgtmse_coverage = Double.parseDouble(Helper
									.correctDouble((String) rsPS
											.getString("CG_CGTMSE_COVERAGE")))
									+ Double
											.parseDouble(Helper
													.correctDouble((String) rsPS
															.getString("cg_ourbank_coverage")));
						}
						if (rsPS != null)
							rsPS.close();
						double maxcgtmseLimit = 0.00;
						strQuery = SQLParser
								.getSqlQuery("selotherparam_ratexpos^115");
						rsPS = DBUtils.executeQuery(strQuery);
						if (rsPS.next()) {
							maxcgtmseLimit = Double.parseDouble(Helper
									.correctDouble((String) rsPS
											.getString("loan_paramval")));
							hshRecord.put("strmaxcgtmseLimit", Helper
									.formatDoubleValue(maxcgtmseLimit));
						}
						if (cgtmse_coverage > maxcgtmseLimit) {
							hshRecord.put("strCGTMSEcovLimit", "Y");
						} else {
							hshRecord.put("strCGTMSEcovLimit", "N");
						}
					}

					arrVal.add(Helper.correctNull((String) hshRecord
							.get("strCGTMSEtotintrate")));// 46
					arrVal.add(Helper.correctDouble((String) hshRecord
							.get("paramval_CGTMSEint")));// 47
					arrVal.add(Helper.formatDoubleValue(cgtmse_coverage));// 48
					arrVal.add(Helper.correctDouble((String) hshRecord
							.get("strmaxcgtmseLimit")));// 49
					arrVal.add(cgtmseappl);// 50
					// for mis details check
					if (rsPS != null)
						rsPS.close();
					strQueryPS = SQLParser.getSqlQuery("sel_misappdetails^"
							+ strAppno + "^" + intGroup);
					rsPS = DBUtils.executeQuery(strQueryPS);
					if (rsPS.next()) {
						arrVal.add("Y");// 51
					} else {
						arrVal.add("N");// 51
					}

					arrVal.add(strCRPVal);// 52
					arrVal.add(strMCLRType);// 53
					arrVal.add("");// 54
					arrVal
							.add(correctNull(rs1
									.getString("FACILITY_DEVIATION")));// 55
					arrVal
							.add(correctNull(rs1
									.getString("FACILITY_CONCESSION")));// 56
					arrVal.add(correctNull(rs1
							.getString("FACILITY_AS_PER_CIRCULAR")));// 57
					arrVal.add(correctNull(rs1
							.getString("FACILITY_MOD_INTRATE_REASON")));// 58
					arrVal.add(Helper.correctNull((String) rs1
							.getString("fcaility_intrate_flag")));// 59
					arrVal.add(correctNull(rs1
							.getString("FACILITY_MOD_INTRATE_CONC")));// 60
					arrVal.add(Helper.correctNull((String) rs1
							.getString("FACILITY_MODE_INTRATE_CIR")));// 61
					if(rsPS!=null) rsPS.close();
//					if(intGroup)
//					{
//						intGroup="0";
//					}
					strQueryPS="";
					strQueryPS = SQLParser.getSqlQuery("selupdateROIInFInancleoldroifacility^"+strAppno+"^"+Helper.correctNull(rs1.getString("facility_sno")));
					rsPS = DBUtils.executeQuery(strQueryPS);
					if(rsPS.next())
					{
						arrVal.add(correctNull(rsPS.getString("facility_effintroidate")));//62
					}
					else
					{
						arrVal.add("");//62
					}
					
					
					
					if(rsPS!=null) rsPS.close();
//					if(intGroup)
//					{
//						intGroup="0";
//					}
					strQueryPS = SQLParser.getSqlQuery("sel_postsanctiondateroicorpagrimridet12^"+strAppno+"^"+Helper.correctNull(rs1.getString("facility_sno")));
					rsPS = DBUtils.executeQuery(strQueryPS);
					if(rsPS.next())
					{
						arrVal.add("Y");//63
					}
					else
					{
						arrVal.add("N");//63
					}
					arrData.add(arrVal);
					recordflag = true;

					if (correctNull(rs1.getString("facility_reattachflag"))
							.equalsIgnoreCase("Y")) {
						hshRecord.put("strReselectFlag", "Y");
						hshRecord.put("strReselectDesc", correctNull(rs1
								.getString("facheaddesc"))
								+ "-" + correctNull(rs1.getString("facdesc")));
					}

				}
			}
			hshRecord.put("borrowid", strBorrowId);
			hshRecord.put("appno", strAppno);
			hshRecord.put("totexist", jtn.format(dblTotExist));
			hshRecord.put("totdiff", jtn.format(dblTotDiff));
			hshRecord.put("arrData", arrData);
			if (recordflag)
				hshRecord.put("recordflag", "Y");
			else
				hshRecord.put("recordflag", "N");

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selotherparam_ratexpos^104");
			if (rs.next()) {
				hshRecord.put("strIntDevLimit", Helper.correctNull(rs
						.getString("LOAN_PARAMVAL")));
			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_for_cgdetails^" + strAppno
					+ "^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("CGPan", correctNull((String) rs
						.getString("PERAPP_PANNO")));
				hshRecord.put("PERAPP_UDYOG_AADHAR", correctNull((String) rs
						.getString("PERAPP_UDYOG_AADHAR")));
			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("selfac_san_intrate^" + strAppno
					+ "^" + strSno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshRecord.put("FACILITY_SANCINTEREST", correctNull((String) rs
						.getString("FACILITY_SANCINTEREST")));
			}
		} catch (Exception e) {
			throw new EJBException("Error in getTermofSanctionFacilityData :: "
					+ e.getMessage());
		} finally {
			try {
				if (rs != null)
					rs.close();

				if (rs1 != null)
					rs1.close();
			} catch (Exception cf) {
				throw new EJBException("Error closing in the connection "
						+ cf.getMessage());
			}
		}
		return hshRecord;
	}

	public double getBorrowerMSMETotalLimit(String strAppID, String strValuesin)
			 {
		ResultSet rs = null;
		String strQuery = "";
		String strTotalLimit = "";
		String strAppOldID = "";
		double dblTotAmount = 0.00;
		try {
			strQuery = SQLParser.getSqlQuery("select_perappoldid^" + strAppID);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppOldID = Helper.correctNull((String) rs
						.getString("perapp_oldid"));
			}
			if (!strAppOldID.equalsIgnoreCase("")) {
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_borrowertotallimit_msme^"
						+ strAppOldID);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					dblTotAmount = Double.parseDouble((String) Helper
							.correctDouble(rs.getString("totallimit")));
				}
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("seltotliability_msme^"
						+ strAppOldID);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					dblTotAmount = dblTotAmount
							+ Double.parseDouble((String) Helper
									.correctDouble(rs.getString("totallimit")));
				}
			}
			strTotalLimit = Helper.convertSetupToApplicationValues(strValuesin,
					dblTotAmount);
		} catch (Exception ce) {
			throw new EJBException("Error in getBorrowerTotalLimit "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
		}
		return Double.parseDouble(strTotalLimit);
	}
	
	//vindhya begin
	public double getExposureTotalLimit(String strAppID, String strValuesin ,String strSessionModuleType)
	 {
		ResultSet rs = null;
		String strQuery = "";
		String strExposureTotalLimit = "";
		String strAppOldID = "";
		double dblExposuretotallimit = 0.00;
		
		try {
			/*strQuery = SQLParser.getSqlQuery("select_perappoldid^" + strAppID);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppOldID = Helper.correctNull((String) rs
						.getString("perapp_oldid"));
			}
			if (!strAppOldID.equalsIgnoreCase("")) {
				if (rs != null) {
					rs.close();
				}*/
			
			 if(strSessionModuleType.equalsIgnoreCase("CORP"))
			 {	 
				strQuery = SQLParser.getSqlQuery("sel_exposurelimit_corp^" +strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					dblExposuretotallimit = Double.parseDouble((String) Helper
							.correctDouble(rs.getString("totexp")));
				}
			 }
			 else
			 {
				 strQuery = SQLParser.getSqlQuery("sel_exposurelimit_ret^" +strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						dblExposuretotallimit = Double.parseDouble((String) Helper
								.correctDouble(rs.getString("totexp")));
					}
			 }
				
			//}
			strExposureTotalLimit = Helper.convertSetupToApplicationValues(strValuesin,
					dblExposuretotallimit);
		} catch (Exception ce) {
			throw new EJBException("Error in getExposureTotalLimit "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
	}
	return Double.parseDouble(strExposureTotalLimit);
}
	public double getExposureTotalLimitagri(String strAppID, String strValuesin, String misactcode)
	 {
		ResultSet rs = null;
		String strQuery = "";
		String strExposureTotalLimitagr = "";
		String strAppOldID = "";
		double dblExposuretotallimitagr = 0.00;
		try {
			/*strQuery = SQLParser.getSqlQuery("select_perappoldid^" + strAppID);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppOldID = Helper.correctNull((String) rs
						.getString("perapp_oldid"));
			}
			if (!strAppOldID.equalsIgnoreCase("")) {
				if (rs != null) {
					rs.close();
				}*/
			
				if(misactcode.equals("0"))
				{
					strQuery = SQLParser.getSqlQuery("sel_exposurelimit_agrother^" +strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID);
				}
				else
				{
					strQuery = SQLParser.getSqlQuery("sel_exposurelimit_agr^" +strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID+"^"+strAppID);
				}
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					dblExposuretotallimitagr = Double.parseDouble((String) Helper
							.correctDouble(rs.getString("totexp")));
				}
				
			//}
			strExposureTotalLimitagr = Helper.convertSetupToApplicationValues(strValuesin,
					dblExposuretotallimitagr);
		} catch (Exception ce) {
			throw new EJBException("Error in getExposureTotalLimitagri "
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception cf) {
				throw new EJBException("Error closing the connection "
						+ cf.getMessage());
			}
	}
	return Double.parseDouble(strExposureTotalLimitagr);
}	
	
	//vindhya end

	public void updateTermsofSanctionFacilityData(HashMap hshValues)
			 {

		HashMap hshQuery = new HashMap();
		HashMap hshQueryValues = new HashMap();
		ArrayList arrValues = new ArrayList();
		String strAppno = null;
		String strAction = null;
		String strFacSno = null;
		String strMSMEexposure = null;
		int updateSize = 0;
		String strQuery = "", strhidStatus = "", strusrid = "";
		ResultSet rs = null, rs1 = null;
		int count = 0;
		String strsno = "";
		try {
			strAppno = correctNull((String) hshValues.get("appno"));
			strAction = correctNull((String) hshValues.get("hidAction"));
			strFacSno = correctNull((String) hshValues.get("hidfacid"));
			strhidStatus = correctNull((String) hshValues.get("hidparam"));
			strMSMEexposure = Helper.correctDouble((String) hshValues
					.get("txt_msmeexposure"));
			strusrid = correctNull((String) hshValues.get("strUserId"));

			StringBuilder strOldAudit = new StringBuilder();
			strQuery = "sel_maxcorpno^" + strAppno;
			rs = DBUtils.executeLAPSQuery(strQuery);
			if (rs.next()) {
				strsno = Helper.correctNull((String) rs.getString("COM_SNO"));
			}
			if (Helper.correctNull((String) hshValues.get("hidAction"))
					.equalsIgnoreCase("Update")
					|| Helper.correctNull((String) hshValues.get("hidAction"))
							.equalsIgnoreCase("Delete")) {
				strQuery = SQLParser.getSqlQuery("sel_sanclimit_audittrial^"
						+ strAppno + "^" + strFacSno + "^" + strAppno + "^"
						+ strFacSno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strOldAudit.append("Nature of facilities =")
							.append(
									correctNull((String) rs
											.getString("facility_desc")));
					strOldAudit.append(" ~Existing Limit= ").append(
							Helper.formatDoubleValue(Double.parseDouble(Helper
									.correctDouble(rs
											.getString("facility_existing")))));
					strOldAudit.append(" ~Proposed Limit = ").append(
							Helper.formatDoubleValue(Double.parseDouble(Helper
									.correctDouble(rs
											.getString("facility_proposed")))));
					strOldAudit.append(" ~Rate of Interest = ").append(
							correctNull((String) rs
									.getString("facility_interest")));
					strOldAudit
							.append(" ~Amount Sanctioned (Rs. in Lacs)= ")
							.append(
									Helper
											.formatDoubleValue(Double
													.parseDouble(Helper
															.correctDouble(rs
																	.getString("facility_sancamt")))));
					strOldAudit
							.append(" ~Sanctioned Rate of Interest (%) = ")
							.append(
									Helper
											.correctDouble((String) rs
													.getString("facility_sancinterest")));
					strOldAudit.append(
							" ~Sanctioned Rate of Interest Remarks = ").append(
							Helper.correctDouble((String) rs
									.getString("facility_sancintremarks")));
					if (correctNull(
							(String) rs.getString("facility_sancstatus"))
							.equalsIgnoreCase("A"))
						strOldAudit.append(" ~Decision = ").append("Approve");
					else if (correctNull(
							(String) rs.getString("facility_sancstatus"))
							.equalsIgnoreCase("R"))
						strOldAudit.append(" ~Decision = ").append("Reject");
					else
						strOldAudit.append(" ~Decision = ").append("");
				}
			}
			if (strAction.equalsIgnoreCase("delete")) {
				updateSize++;
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add("");
				arrValues.add(strAppno);
				arrValues.add(strFacSno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "facility_update_termofsanction");
				hshQueryValues.put(Integer.toString(updateSize), hshQuery);
				hshQueryValues.put("size", Integer.toString(updateSize));
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			} else if (strAction.equalsIgnoreCase("update")) {

				updateSize++;
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues
						.add(correctNull((String) hshValues.get("txt_sancamt")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_sanc_roi")));
				arrValues
						.add(correctNull((String) hshValues.get("sel_status")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_sanc_roiremarks")));
				if (correctNull((String) hshValues.get("sel_status"))
						.equalsIgnoreCase("R"))
					arrValues.add(correctNull((String) hshValues
							.get("txtarea_rejection")));
				else
					arrValues.add("");
				arrValues.add(strMSMEexposure);
				arrValues.add(correctNull((String) hshValues
						.get("txt_dev_penality")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_concession")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_asper_circular")));
				arrValues.add(correctNull((String) hshValues
						.get("hidsel_reasonfor")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_hidden_flag")));
				arrValues.add(correctNull((String) hshValues
						.get("hidsel_reasonforconc")));
				arrValues.add(correctNull((String) hshValues
						.get("hidsel_reasonforcircular")));
				arrValues.add(strAppno);
				arrValues.add(strFacSno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "facility_update_termofsanction");
				hshQueryValues.put(Integer.toString(updateSize), hshQuery);
				hshQueryValues.put("size", Integer.toString(updateSize));

				updateSize++;
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				// hshQueryValues=new HashMap();
				arrValues.add(strsno);
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshValues
						.get("txt_sanc_roi")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_app_roi")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_dev_penality")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_concession")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_asper_circular")));
				arrValues.add(strusrid);
				arrValues.add(correctNull((String) hshValues
						.get("hidsel_reasonfor")));
				arrValues.add(correctNull((String) hshValues
						.get("hidsel_reasonforconc")));
				arrValues.add(correctNull((String) hshValues
						.get("hidsel_reasonforcircular")));

				arrValues.add(correctNull((String) hshValues
						.get("strOrgShortCode")));
				if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("C"))
					arrValues.add(correctNull((String) hshValues
							.get("strUserDepartment")));
				else if (correctNull((String) hshValues.get("strOrgLevel"))
						.equalsIgnoreCase("D"))
					arrValues.add(correctNull((String) hshValues
							.get("strRLPFUser")));
				else
					arrValues.add("");
				arrValues.add(strFacSno);
				// hshQueryValues.put("size","2");
				// hshQuery.put("arrValues",arrValues);
				// /hshQuery.put("strQueryId","ins_sancrate_history");
				// hshQueryValues.put("2",hshQuery);

				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "ins_sancrate_history");
				hshQueryValues.put(Integer.toString(updateSize), hshQuery);
				hshQueryValues.put("size", Integer.toString(updateSize));

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				if (!strFacSno.equalsIgnoreCase("")) {
					if (rs != null) {
						rs.close();
					}
					rs = DBUtils.executeLAPSQuery("sel_facbasedonsnogrp^"
							+ strAppno + "^" + strFacSno);
					if (rs.next()) {
						boolean bflag = true;
						String strMainfac = Helper.correctNull((String) rs
								.getString("facility_group"));
						String strStatus = Helper.correctNull((String) rs
								.getString("facility_sancstatus"));
						if ((strMainfac.equalsIgnoreCase("0"))
								&& (strStatus.equalsIgnoreCase("R"))) {
							bflag = false;
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(correctNull((String) hshValues
									.get("sel_status")));
							arrValues.add(strAppno);
							arrValues.add(strFacSno);
							hshQuery.put("arrValues", arrValues);
							hshQuery.put("strQueryId", "upd_sumlimitstatus");
							hshQueryValues.put(Integer.toString(updateSize),
									hshQuery);
							hshQueryValues.put("size", Integer
									.toString(updateSize));
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}

						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils
								.executeLAPSQuery("select_postsancfacdetails^"
										+ strAppno + "^" + strFacSno);
						while (rs1.next()) {
							bflag = false;
							if (!Helper.correctNull(
									rs1.getString("ps_modify_terms"))
									.equalsIgnoreCase("")) {
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								arrValues.add("");
								arrValues.add(strAppno);
								arrValues.add(Helper.correctNull(rs1
										.getString("facility_sno")));
								hshQuery.put("arrValues", arrValues);
								hshQuery
										.put("strQueryId", "upd_facilitystatus");
								hshQueryValues.put(
										Integer.toString(updateSize), hshQuery);
								hshQueryValues.put("size", Integer
										.toString(updateSize));
								EJBInvoker.executeStateLess("dataaccess",
										hshQueryValues, "updateData");
							}
						}
						if (bflag) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add("");
							arrValues.add(strAppno);
							arrValues.add(strFacSno);
							hshQuery.put("arrValues", arrValues);
							hshQuery.put("strQueryId", "upd_sumlimitstatus");
							hshQueryValues.put(Integer.toString(updateSize),
									hshQuery);
							hshQueryValues.put("size", Integer
									.toString(updateSize));
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}

					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues
							.add(correctNull((String) hshValues.get("hidCRP")));
					arrValues.add(correctNull((String) hshValues
							.get("hidBSSval")));
					arrValues.add(strAppno);
					arrValues.add(strFacSno);
					hshQuery.put("arrValues", arrValues);
					hshQuery.put("strQueryId", "upd_facilitymclrspread");
					hshQueryValues.put(Integer.toString(updateSize), hshQuery);
					hshQueryValues.put("size", Integer.toString(updateSize));
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

				strQuery = SQLParser.getSqlQuery("sel_cgtmse_int^" + strAppno
						+ "^" + strFacSno);
				rs = DBUtils.executeQuery(strQuery);
				String FACILITY_SNO = "";
				String CGTMSEAPPLY = "";
				Double CTMSEinterest = 0.00;
				Double totalCGTMSE = 0.00;
				Double SancInt = Double.parseDouble(Helper
						.correctDouble((String) hshValues.get("txt_sanc_roi")));
				if (rs.next()) {
					FACILITY_SNO = Helper.correctNull(rs
							.getString("FACILITY_SNO"));
					CGTMSEAPPLY = Helper.correctNull(rs
							.getString("FACILITY_WHT_CGTMSEAPPLY"));
					CTMSEinterest = Double.parseDouble(Helper.correctDouble(rs
							.getString("FACILITY_CG_SPLIT_INT_RATE")));

					totalCGTMSE = (CTMSEinterest + SancInt);

					if (CGTMSEAPPLY.equals("Y")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						arrValues.add(String.valueOf(totalCGTMSE));
						// arrValues.add(correctNull((String)hshValues.get("txt_sanc_roi")));
						// arrValues.add(String.valueOf(SancInt));
						arrValues.add(strAppno);
						arrValues.add(FACILITY_SNO);

						hshQuery.put("arrValues", arrValues);
						hshQuery.put("strQueryId", "upd_Cgtmse");
						hshQueryValues.put("size", "1");
						hshQueryValues.put("1", hshQuery);
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}
			}

			// code to delete MIS details
			if (strhidStatus.equalsIgnoreCase("MISDEL")) {
				String strProposalFlag = "";
				if (rs != null)
					rs.close();
				strQuery = SQLParser.getSqlQuery("select_facilityCode^"
						+ strAppno + "^" + strFacSno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strProposalFlag = Helper.correctNull(rs
							.getString("FACILITY_TYPEFOR"));
				}
				if (strProposalFlag.equalsIgnoreCase("P")) {
					if (rs != null)
						rs.close();
					strQuery = SQLParser.getSqlQuery("sel_corpcbsdetails^"
							+ strAppno + "^" + strFacSno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						if (Helper.correctNull(rs.getString("DRAWING_PWR_IND"))
								.equalsIgnoreCase("D")
								|| Helper.correctNull(
										rs.getString("DRAWING_PWR_IND"))
										.equalsIgnoreCase("E")) {
							hshQueryValues = new HashMap();
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(correctNull((String) hshValues
									.get("txt_sancamt")));
							arrValues.add(strAppno);
							arrValues.add(strFacSno);
							hshQuery.put("arrValues", arrValues);
							hshQuery.put("strQueryId", "updcbsdetails");
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");

							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");
						}
					}
				} else {
					hshQueryValues = new HashMap();
					updateSize++;
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					arrValues.add(strAppno);
					arrValues.add(strFacSno);
					hshQuery.put("arrValues", arrValues);
					hshQuery.put("strQueryId", "update_mis_appdetailssno");
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");

					if (rs != null)
						rs.close();
					strQuery = SQLParser.getSqlQuery("sel_corpcbsdetails^"
							+ strAppno + "^" + strFacSno);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						if (Helper.correctNull(rs.getString("DRAWING_PWR_IND"))
								.equalsIgnoreCase("D")
								|| Helper.correctNull(
										rs.getString("DRAWING_PWR_IND"))
										.equalsIgnoreCase("E")) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(correctNull((String) hshValues
									.get("txt_sancamt")));
							arrValues.add(strAppno);
							arrValues.add(strFacSno);
							hshQuery.put("arrValues", arrValues);
							hshQuery.put("strQueryId", "updcbsdetails");
							hshQueryValues.put("2", hshQuery);
							hshQueryValues.put("size", "2");
						} else {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strAppno);
							arrValues.add(strFacSno);
							hshQuery.put("arrValues", arrValues);
							hshQuery.put("strQueryId", "setcbsdetailsdel");
							hshQueryValues.put("2", hshQuery);
							hshQueryValues.put("size", "2");
						}
					}

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues
						.add(correctNull((String) hshValues.get("txt_sancamt")));
				arrValues.add(strAppno);
				arrValues.add(strFacSno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "upd_securityamount");
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

			/** Audit Trial **/
			// /if(Helper.correctNull((String)hshValues.get("hidRecordflag")).equalsIgnoreCase("N"))
			// {
			// hshValues.put("hidAction","Insert");
			// }
			StringBuilder sbAt = new StringBuilder();
			if (Helper.correctNull((String) hshValues.get("hidAction"))
					.equalsIgnoreCase("Update")
					|| Helper.correctNull((String) hshValues.get("hidAction"))
							.equalsIgnoreCase("Insert")) {
				sbAt.append("Nature of facilities =").append(
						correctNull((String) hshValues.get("txt_facname")));
				sbAt.append(" ~Existing Limit= ").append(
						correctNull((String) hshValues.get("txt_existlimit")));
				sbAt.append(" ~Proposed Limit = ")
						.append(
								correctNull((String) hshValues
										.get("txt_proposedlimit")));
				sbAt.append(" ~Rate of Interest = ").append(
						correctNull((String) hshValues.get("txt_roi")));
				sbAt.append(" ~Amount Sanctioned (Rs. in Lacs)= ").append(
						Helper.formatDoubleValue(Double.parseDouble(Helper
								.correctDouble((String) hshValues
										.get("txt_sancamt")))));
				sbAt.append(" ~Sanctioned Rate of Interest (%) = ").append(
						correctNull((String) hshValues.get("txt_sanc_roi")));
				sbAt.append(" ~Sanctioned Rate of Interest Remarks = ").append(
						correctNull((String) hshValues
								.get("txt_sanc_roiremarks")));
				if (correctNull((String) hshValues.get("sel_status"))
						.equalsIgnoreCase("A"))
					sbAt.append(" ~Decision = ").append("Approve");
				else if (correctNull((String) hshValues.get("sel_status"))
						.equalsIgnoreCase("R"))
					sbAt.append(" ~Decision = ").append("Reject");
			}
			AuditTrial.auditNewLog(hshValues, "288", strAppno, sbAt.toString(),
					strOldAudit.toString());
		} catch (Exception ce) {
			throw new EJBException(
					"Error in updateTermsofSanctionFacilityData method"
							+ ce.toString());
		}
	}

	/*
	 * --------------------End For Getting Target Master Data While Approve /
	 * undo an application
	 */

	public void updateLegalComplianceData(HashMap hshValues)
			 {
		HashMap hashval = new HashMap();
		String appno = "";
		String strQuery = "";

		ResultSet rs = null;
		HashMap hshQuery = null;
		HashMap hshQueryValues = null;
		ArrayList arrValues = null;
		String userid1 = "", userid2 = "", username1 = "", username2 = "", desig1 = "", desig2 = "";
		String strAppno = "", hidaction = "";

		try {
			hshQueryValues = new HashMap();
			strAppno = correctNull((String) hshValues.get("appno"));

			userid1 = correctNull((String) hshValues.get("text_id1"));
			userid2 = correctNull((String) hshValues.get("text_id2"));
			username1 = correctNull((String) hshValues.get("text_name1"));
			username2 = correctNull((String) hshValues.get("text_name2"));
			desig1 = correctNull((String) hshValues.get("text_desig1"));
			desig2 = correctNull((String) hshValues.get("text_desig2"));
			hidaction = correctNull((String) hshValues.get("hidAction"));

			if (hidaction.equals("insert")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();

				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "delete_legalcompliance_details");
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();

				hshQuery.put("strQueryId", "insert_legalcompliance_details");
				arrValues.add(strAppno);
				arrValues.add(Integer.toString(1));
				arrValues.add(userid1);
				arrValues.add(username1);
				arrValues.add(desig1);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();

				hshQuery.put("strQueryId", "insert_legalcompliance_details");
				arrValues.add(strAppno);
				arrValues.add(Integer.toString(2));
				arrValues.add(userid2);
				arrValues.add(username2);
				arrValues.add(desig2);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("3", hshQuery);
				hshQueryValues.put("size", "3");
			} else if (hidaction.equals("delete")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();

				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("strQueryId", "delete_legalcompliance_details");
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
			}

			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updateData");
			/** Audit Trial **/
			StringBuilder sbAt = new StringBuilder();
			if ((hidaction.equalsIgnoreCase("update"))
					|| (hidaction.equalsIgnoreCase("insert"))) {
				sbAt.append("UserID1 =").append(
						correctNull((String) hshValues.get("text_id1")));
				sbAt.append(" ~Name1 = ").append(
						correctNull((String) hshValues.get("text_name1")));
				sbAt.append(" ~Designation1 = ").append(
						correctNull((String) hshValues.get("text_desig1")));
				sbAt.append(" ~UserID2 =").append(
						correctNull((String) hshValues.get("text_id2")));
				sbAt.append(" ~Name2 = ").append(
						correctNull((String) hshValues.get("text_name2")));
				sbAt.append(" ~Designation2 = ").append(
						correctNull((String) hshValues.get("text_desig2")));
				if (correctNull((String) hshValues.get("hidRecordflag"))
						.equalsIgnoreCase("Y")) {
					hshValues.put("hidAction", "update");
				}
			}
			AuditTrial.auditLog(hshValues, "324", strAppno, sbAt.toString());
		} catch (Exception ce) {
			throw new EJBException("Error in updateLegalComplianceData method"
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception ex) {
				throw new EJBException(
						"Error in Closing the connection in updateLegalComplianceData of CommWorkflowBean"
								+ ex.toString());
			}
		}
	}

	public HashMap getlegalComplianceData(HashMap hshValues)
			 {
		HashMap hashval = new HashMap();
		String appno = "";
		String strQuery = "";
		String strApploantype = "";
		String recordflag = "N";
		ResultSet rs = null;

		try {
			appno = correctNull((String) hshValues.get("appno"));

			strQuery = SQLParser
					.getSqlQuery("sel_app_processorgscode^" + appno);
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hashval.put("branprocessedby", correctNull((String) rs
						.getString("org_name")));
				strApploantype = correctNull((String) rs
						.getString("app_loantype"));
				hashval.put("app_loantype", strApploantype);
				hashval.put("app_processdate", correctNull((String) rs
						.getString("app_processdate")));
			}

			if (strApploantype.equalsIgnoreCase("P")
					|| strApploantype.equalsIgnoreCase("A")) {
				strQuery = SQLParser.getSqlQuery("comfunsel2^" + appno);
			} else if ((strApploantype.equalsIgnoreCase("C"))
					|| (strApploantype.equalsIgnoreCase("E"))
					|| (strApploantype.equalsIgnoreCase("U"))
					|| (strApploantype.equalsIgnoreCase("H"))) {
				strQuery = SQLParser.getSqlQuery("comfunsel3^" + appno);
			} else if (strApploantype.equalsIgnoreCase("T")) {
				strQuery = SQLParser.getSqlQuery("comfunsel4^" + appno + "^N");
			}
			rs = DBUtils.executeQuery(strQuery);

			if (rs.next()) {
				hashval.put("apporgname", correctNull((String) rs
						.getString("org_name")));
			}

			hashval.put("appno", correctNull((String) hshValues.get("appno")));
			hashval.put("appname", correctNull((String) hshValues
					.get("borrowername")));

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("select_legalcompliance_details^"
					+ appno);
			rs = DBUtils.executeQuery(strQuery);
			int i = 0;
			while (rs.next()) {
				if (i == 0) {
					hashval.put("slno", correctNull(rs.getString("alc_sno")));
					hashval.put("userid1", correctNull(rs
							.getString("alc_userid")));
					hashval.put("username1", correctNull(rs
							.getString("alc_username")));
					hashval.put("desig1", correctNull(rs
							.getString("alc_designation")));
				} else if (i == 1) {
					hashval.put("slno", correctNull(rs.getString("alc_sno")));
					hashval.put("userid2", correctNull(rs
							.getString("alc_userid")));
					hashval.put("username2", correctNull(rs
							.getString("alc_username")));
					hashval.put("desig2", correctNull(rs
							.getString("alc_designation")));
				}
				i++;
				recordflag = "Y";
			}
			hashval.put("recordflag", recordflag);
		} catch (Exception ce) {
			throw new EJBException("Error in getlegalComplianceData method"
					+ ce.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception ex) {
				throw new EJBException(
						"Error in Closing the connection in getlegalComplianceData of CommWorkflowBean"
								+ ex.toString());
			}
		}
		return hashval;
	}

	/*
	 * @Author : Anees Fathima.H
	 * 
	 * @Date : 19/03/2014
	 * 
	 * @Purpose : For fetching some Loan Account Details for Account Opening
	 */
	public HashMap getLoanAccountData(HashMap hshValues)  {
		HashMap hshResult = new HashMap();
		try {
			ArrayList arrRow = null;
			String strfacility = correctNull((String) hshValues.get("facility"));
			if (strfacility.length() == 0)
				strfacility = correctNull((String) hshValues
						.get("select_facility"));
			if (strfacility.length() == 0)
				strfacility = "0";
			String strappno = correctNull((String) hshValues.get("appno"));
			if (strappno.length() == 0)
				strappno = correctNull((String) hshValues.get("strappno"));

			String strLoantype = "", strAppStatus = "";
			String strQuery = SQLParser.getSqlQuery("commworkflowsel2^"
					+ strappno);
			ResultSet rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strAppStatus = Helper.correctNull((String) rs
						.getString("app_status"));
				strLoantype = Helper.correctNull(rs.getString("app_loantype"));
				hshResult.put("app_legalcomp", correctNull((String) rs
						.getString("app_legalcomp")));
				hshResult.put("appstatus", strAppStatus);
				hshResult.put("app_loantype", strLoantype);
				if (strLoantype.equalsIgnoreCase("P")) {
					strfacility = "1";
				}
			}
			if (rs != null)
				rs.close();

			if (!strfacility.equalsIgnoreCase("0") && strfacility.length() > 0) {
				strQuery = SQLParser.getSqlQuery("selloan_account_details^"
						+ strappno + "^" + strfacility);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshResult.put("flow_start_date", Helper
							.correctNull((String) rs
									.getString("flow_start_date")));
					hshResult.put("loan_sno", Helper.correctNull((String) rs
							.getString("loan_sno")));

				}
				if (strLoantype.equalsIgnoreCase("P")) {
					if (strAppStatus.equalsIgnoreCase("pa"))
						hshResult.put("strStatusDesc", "Active");
					else if (strAppStatus.equalsIgnoreCase("ca"))
						hshResult.put("strStatusDesc", "Closed");
				} else {
					if (rs != null) {
						rs.close();
					}
					strQuery = SQLParser.getSqlQuery("select_facilityCode^"
							+ strappno + "^" + strfacility);
					rs = DBUtils.executeQuery(strQuery);
					if (rs.next()) {
						hshResult.put("strCloseDate", Helper.correctNull(rs
								.getString("facility_clsdate")));
						hshResult.put("strStatus", Helper.correctNull(rs
								.getString("facility_status")));
						if (Helper.correctNull(rs.getString("facility_status"))
								.equalsIgnoreCase("pa")) {
							hshResult.put("strStatusDesc", "Active");
						} else if (Helper.correctNull(
								rs.getString("facility_status"))
								.equalsIgnoreCase("ca")) {
							hshResult.put("strStatusDesc", "Closed");
						}
					}
				}
				if (rs != null) {
					rs.close();
				}
			}
			hshResult.put("strfacility", strfacility);

			if (rs != null)
				rs.close();

			strQuery = SQLParser.getSqlQuery("sel_prdtype^" + strappno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshResult.put("Strprdtype", Helper.correctNull((String) rs
						.getString("prd_type")));
			}

		} catch (Exception e) {
			log.error("Error in getLoanAccountData = " + e.toString());
		} finally {

		}
		return hshResult;
	}

	public void updateLoanAccountData(HashMap hshValues)  {
		try {
			String strappno = correctNull((String) hshValues.get("appno"));
			if (strappno.length() == 0)
				strappno = correctNull((String) hshValues.get("strappno"));
			String strAction = correctNull((String) hshValues.get("hidAction"));
			String strfacility = correctNull((String) hshValues
					.get("select_facility"));
			String strSno = Helper.correctDouble((String) hshValues
					.get("hidsno"));
			String strFlowStartDate = Helper.correctNull((String) hshValues
					.get("txt_flowstartdate"));
			String strLoanType = Helper.correctNull((String) hshValues
					.get("hidLoantype"));
			if (strLoanType.equalsIgnoreCase("P")) {
				strfacility = "1";
			}
			if (strAction.equalsIgnoreCase("update")) {
				String strQuery = SQLParser
						.getSqlQuery("selloan_account_details^" + strappno
								+ "^" + strfacility);
				ResultSet rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					HashMap hshQuery = new HashMap();
					HashMap hshQueryValues = new HashMap();
					ArrayList arrValues = new ArrayList();

					hshQuery.put("strQueryId", "updloan_account_details");
					arrValues = new ArrayList();
					arrValues.add(strFlowStartDate);
					arrValues.add(strappno);
					arrValues.add(strfacility);
					arrValues.add(strSno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else {
					String strQuery1 = SQLParser
							.getSqlQuery("selmaxloan_account_details^"
									+ strappno + "^" + strfacility);
					ResultSet rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						strSno = correctNull((String) rs1.getString("loan_sno"));
					}
					if (rs1 != null) {
						rs1.close();
					}
					if (!strSno.equalsIgnoreCase("")) {
						HashMap hshQuery = new HashMap();
						HashMap hshQueryValues = new HashMap();
						ArrayList arrValues = new ArrayList();

						hshQuery.put("strQueryId", "insloan_account_details");
						arrValues = new ArrayList();
						arrValues.add(strappno);
						arrValues.add(strfacility);
						arrValues.add(strSno);
						arrValues.add(strFlowStartDate);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}
				if (rs != null) {
					rs.close();
				}

			} else if (strAction.equalsIgnoreCase("delete")) {
				HashMap hshQuery = new HashMap();
				HashMap hshQueryValues = new HashMap();
				ArrayList arrValues = new ArrayList();

				hshQuery.put("strQueryId", "delloan_account_details");
				arrValues.add(strappno);
				arrValues.add(strfacility);
				arrValues.add(strSno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("size", "1");
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
		} catch (Exception e) {
			log.error("Error in updateLoanAccountData = " + e.toString());
		} finally {

		}
	}

	public void updRestrFacilityDetails(HashMap hshValues)  {
		try {
			String strappno = correctNull((String) hshValues.get("appno"));
			if (strappno.length() == 0)
				strappno = correctNull((String) hshValues.get("strappno"));
			String strAction = correctNull((String) hshValues.get("hidAction"));
			String strfacility = correctNull((String) hshValues
					.get("select_facility"));
			String strSno = Helper.correctDouble((String) hshValues
					.get("hidsno"));
			String strEffectiveDate = Helper.correctNull((String) hshValues
					.get("txt_effectivedate"));
			String strLoanType = Helper.correctNull((String) hshValues
					.get("hidLoantype"));
			if (strLoanType.equalsIgnoreCase("P")) {
				strfacility = "1";
			}
			if (strAction.equalsIgnoreCase("update")) {
				String strQuery = SQLParser
						.getSqlQuery("selloan_account_details^" + strappno
								+ "^" + strfacility);
				ResultSet rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					HashMap hshQuery = new HashMap();
					HashMap hshQueryValues = new HashMap();
					ArrayList arrValues = new ArrayList();

					hshQuery.put("strQueryId", "updrestrloan_account_details");
					arrValues = new ArrayList();
					arrValues.add(strEffectiveDate);
					arrValues.add(strappno);
					arrValues.add(strfacility);
					arrValues.add(strSno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else {
					String strQuery1 = SQLParser
							.getSqlQuery("selmaxloan_account_details^"
									+ strappno + "^" + strfacility);
					ResultSet rs1 = DBUtils.executeQuery(strQuery1);
					if (rs1.next()) {
						strSno = correctNull((String) rs1.getString("loan_sno"));
					}
					if (rs1 != null) {
						rs1.close();
					}
					if (!strSno.equalsIgnoreCase("")) {
						HashMap hshQuery = new HashMap();
						HashMap hshQueryValues = new HashMap();
						ArrayList arrValues = new ArrayList();

						hshQuery.put("strQueryId",
								"insrestrloan_account_details");
						arrValues = new ArrayList();
						arrValues.add(strappno);
						arrValues.add(strfacility);
						arrValues.add(strSno);
						arrValues.add(strEffectiveDate);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}
				}
				if (rs != null) {
					rs.close();
				}

			} else if (strAction.equalsIgnoreCase("delete")) {
				HashMap hshQuery = new HashMap();
				HashMap hshQueryValues = new HashMap();
				ArrayList arrValues = new ArrayList();

				hshQuery.put("strQueryId", "delloan_account_details");
				arrValues.add(strappno);
				arrValues.add(strfacility);
				arrValues.add(strSno);
				hshQuery.put("arrValues", arrValues);
				hshQuery.put("size", "1");
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}
		} catch (Exception e) {
			log.error("Error in updRestrFacilityDetails = " + e.toString());
		} finally {

		}
	}

	/*
	 * @Author : Dinesh
	 * 
	 * @Date : 05/05/2014
	 * 
	 * @Purpose : For fetching Facility Details for Account Opening
	 */
	public HashMap getFacilityDetailsData(HashMap hshValues)
			 {
		HashMap hshResult = new HashMap();
		ResultSet rs = null, rs1 = null;
		String strQuery = "", strLoanType = "", strFac = "";

		ArrayList arrOutCol = new ArrayList();
		ArrayList arrOutRow = new ArrayList();

		try {
			String strAppNo = correctNull((String) hshValues.get("appno"));

			if (strAppNo.length() == 0)
				strAppNo = correctNull((String) hshValues.get("strappno"));

			strQuery = SQLParser.getSqlQuery("commworkflowsel2^" + strAppNo);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strAppStatus = Helper.correctNull((String) rs
						.getString("app_status"));
				String strLoantype = Helper.correctNull(rs
						.getString("app_loantype"));
				hshResult.put("app_legalcomp", correctNull((String) rs
						.getString("app_legalcomp")));
				hshResult.put("appstatus", strAppStatus);
				hshResult.put("app_loantype", strLoantype);
			}

			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_appstatus^" + strAppNo);
			if (rs.next()) {
				strLoanType = Helper.correctNull((String) rs
						.getString("app_loantype"));
				strLoanType = strLoanType.toLowerCase();
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_approvedFacdetails^"
					+ strAppNo + "^" + strLoanType + "^" + "A");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				String strVal = "", strType = "";
				String strVal1 = Helper.correctInt(rs
						.getString("facility_group"));

				if (strVal1.equals("0")) {
					if (Helper.correctNull(rs.getString("facility_category"))
							.equalsIgnoreCase("A")) {
						strVal1 = "Adhoc-Limit";
					} else {
						strVal1 = "Main-Limit";
					}
				} else {
					if (Helper.correctNull(rs.getString("facility_category"))
							.equalsIgnoreCase("A")) {
						strVal1 = "Adhoc-Limit";
					} else {
						strVal1 = "Sub-Limit";
					}
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("sel_sublimitVal^"
									+ strAppNo
									+ "^"
									+ Helper.correctInt(rs
											.getString("facility_group")));

					if (rs1.next()) {
						strVal1 = strVal1 + " -> "
								+ correctNull(rs1.getString("com_facdesc"));
						strFac = correctNull(rs1.getString("com_facdesc"));
					}
					strType = "1";
				}

				arrOutCol = new ArrayList();

				arrOutCol.add(correctNull(rs.getString("facility_sno"))); // 0
				arrOutCol.add(correctNull(rs.getString("com_facdesc"))); // 1
				if (strType.equalsIgnoreCase("1")) {
					arrOutCol.add("Sub-Limit of " + strFac); // 2
				} else {
					if (Helper.correctNull(rs.getString("facility_category"))
							.equalsIgnoreCase("A")) {
						arrOutCol.add("Adhoc-Limit"); // 2
					} else {
						arrOutCol.add("Main-Limit"); // 2
					}
				}

				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_sancamt"))); // 3
				arrOutCol
						.add(Helper.correctDouble(rs.getString("facheaddesc"))); // 4
				arrOutCol.add(Helper.correctDouble(rs
						.getString("facility_group"))); // 5
				arrOutCol
						.add(Helper.correctNull(rs.getString("cbs_accountno"))); // 6
				arrOutCol.add(Helper.correctNull(rs
						.getString("facility_prefix"))); // 7
				arrOutCol.add(Helper.correctNull(rs
						.getString("facility_suffix"))); // 8
				arrOutCol.add(Helper.correctNull(rs
						.getString("facility_accountopen"))); // 9

				if (Helper.correctNull(rs.getString("facility_status"))
						.equalsIgnoreCase("pa"))
					arrOutCol.add("Approved/Active");// 10
				else
					arrOutCol.add("Approved/Closed");// 10

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_accountopenedfacilities^"
						+ strAppNo + "^"
						+ Helper.correctInt(rs.getString("facility_sno")) + "^"
						+ strAppNo + "^"
						+ Helper.correctInt(rs.getString("facility_sno")));

				if (rs1.next())
					arrOutCol.add("Done - "
							+ Helper.correctNull(rs1
									.getString("laps_handoff_time")));
				else {
					if (Helper.correctNull(rs.getString("facility_category"))
							.equalsIgnoreCase("A"))
						arrOutCol.add("");
					else
						arrOutCol.add("Not Done");
				}
				// Revalidation
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("sel_revalidationComments^"
						+ strAppNo + "^"
						+ Helper.correctInt(rs.getString("facility_sno")));

				if (rs1.next()) {
					if (Helper.correctNull(rs1.getString("app_status"))
							.equalsIgnoreCase("op"))
						arrOutCol.add("Done - Pending");
					else if (Helper.correctNull(rs1.getString("app_status"))
							.equalsIgnoreCase("pa"))
						arrOutCol.add("Done - Approved");
					else if (Helper.correctNull(rs1.getString("app_status"))
							.equalsIgnoreCase("pr"))
						arrOutCol.add("Done - Rejected");
					else
						arrOutCol.add("");
				} else {
					arrOutCol.add("Not Done");
				}
				// ===============
				String strNature = "";
				if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("A")) {
					strVal1 = "Adhoc-Limit";
				}
				if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("R")) {
					strVal1 = "Regular Limit";
				}
				if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("D")) {
					strVal1 = "Additional Limit";
				}
				if (Helper.correctNull(rs.getString("facility_category"))
						.equalsIgnoreCase("O")) {
					strVal1 = "One Time Limit";
				}
				arrOutCol.add(strVal1);//
				arrOutRow.add(arrOutCol);
			}
			hshResult.put("arrFacDetRow", arrOutRow);
		} catch (Exception e) {
			log.error("Error in getFacilityDetailsData = " + e.toString());
		} finally {

		}
		return hshResult;
	}

	public HashMap getRestrFacilityDetails(HashMap hshValues)
			 {
		HashMap hshResult = new HashMap();
		try {
			ArrayList arrRow = null;
			String strfacility = correctNull((String) hshValues.get("facility"));
			if (strfacility.length() == 0)
				strfacility = correctNull((String) hshValues
						.get("select_facility"));
			if (strfacility.length() == 0)
				strfacility = "0";
			String strappno = correctNull((String) hshValues.get("appno"));
			if (strappno.length() == 0)
				strappno = correctNull((String) hshValues.get("strappno"));

			String strQuery = SQLParser.getSqlQuery("commworkflowsel2^"
					+ strappno);
			ResultSet rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strAppStatus = Helper.correctNull((String) rs
						.getString("app_status"));
				String strLoantype = Helper.correctNull(rs
						.getString("app_loantype"));
				hshResult.put("app_legalcomp", correctNull((String) rs
						.getString("app_legalcomp")));
				hshResult.put("appstatus", strAppStatus);
				hshResult.put("app_loantype", strLoantype);
				hshResult.put("sanc_date", Helper.correctNull(rs
						.getString("APP_PROCESSDATE")));
				if (strLoantype.equalsIgnoreCase("P")) {
					strfacility = "1";
				}
			}
			if (rs != null)
				rs.close();

			if (!strfacility.equalsIgnoreCase("0") && strfacility.length() > 0) {
				strQuery = SQLParser.getSqlQuery("selloan_account_details^"
						+ strappno + "^" + strfacility);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshResult.put("restr_eff_date", Helper
							.correctNull((String) rs
									.getString("restr_eff_date")));
					hshResult.put("loan_sno", Helper.correctNull((String) rs
							.getString("loan_sno")));

				}
				if (rs != null) {
					rs.close();
				}
			}
			hshResult.put("strfacility", strfacility);
			hshResult.put("strOrgCode", correctNull((String) hshValues
					.get("strOrgCode")));
		} catch (Exception e) {
			log.error("Error in getLoanAccountData = " + e.toString());
		} finally {

		}
		return hshResult;
	}

	public void updFacilityDetailsData(HashMap hshValues)  {
		HashMap hshResult = new HashMap();
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		String strQuery = "", strLoanType = "", strFac = "";

		ArrayList arrValues = new ArrayList();

		try {
			String strAppNo = correctNull((String) hshValues.get("appno"));

			String strAction = correctNull((String) hshValues.get("hidAction"));

			if (strAppNo.length() == 0)
				strAppNo = correctNull((String) hshValues.get("strappno"));

			String[] strPrefix = null;
			String[] strSuffix = null;
			String[] strFacSno = null;
			if (hshValues.get("txt_prefix") instanceof java.lang.String) {
				strPrefix = new String[1];
				strPrefix[0] = (String) hshValues.get("txt_prefix");
			} else {
				strPrefix = (String[]) hshValues.get("txt_prefix");
			}
			if (hshValues.get("txt_suffix") instanceof java.lang.String) {
				strSuffix = new String[1];
				strSuffix[0] = (String) hshValues.get("txt_suffix");
			} else {
				strSuffix = (String[]) hshValues.get("txt_suffix");
			}
			if (hshValues.get("hidFacSno") instanceof java.lang.String) {
				strFacSno = new String[1];
				strFacSno[0] = (String) hshValues.get("hidFacSno");
			} else {
				strFacSno = (String[]) hshValues.get("hidFacSno");
			}

			int intQsize = 0;
			if (strAction.equalsIgnoreCase("update")) {
				for (int i = 0; i < strFacSno.length; i++) {
					hshQueryValues = new HashMap();
					hshQuery = new HashMap();
					arrValues = new ArrayList();

					arrValues.add(strPrefix[i]);
					arrValues.add(strSuffix[i]);
					arrValues.add(strPrefix[i] + "~" + strSuffix[i]);
					arrValues.add(strAppNo);
					arrValues.add(strFacSno[i]);

					intQsize = intQsize + 1;
					hshQuery.put("strQueryId", "upd_approvedFacdetails");
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}

			}

		} catch (Exception e) {
			log.error("Error in updFacilityDetailsData = " + e.toString());
		} finally {

		}
	}

	private void updatePostsanctionbkTables(HashMap hshValues)
			 {
		ResultSet rs = null, rs1 = null, rs2 = null;
		HashMap hshResult = new HashMap();
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		String strQuery = "", strParameters = "", strFac = "";
		int intSno = 0;
		int intCount = 0;
		ArrayList arrValues = new ArrayList();

		try {
			String strAppNo = correctNull((String) hshValues.get("appno"));

			int intQsize = 0;

			hshQueryValues = new HashMap();
			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delfacilities_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delapp_securitydetails_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delmis_appdetails_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delmis_appdisplayscreen_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delmis_appclassification_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delper_cuscbsaccountdata_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "deltl_repayschedule_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delcom_comments_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delcom_companydetails_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delcom_groupconcerns_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delper_demographics_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_mclr_value");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_mclr_spreadvalue");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delete_appinwardreg_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			hshQuery = new HashMap();
			arrValues = new ArrayList();
			intQsize = intQsize + 1;
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_BankingArrangment_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			hshQuery = new HashMap();
			arrValues = new ArrayList();
			intQsize = intQsize + 1;
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_revBAConsortium_tl_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			hshQuery = new HashMap();
			arrValues = new ArrayList();
			intQsize = intQsize + 1;
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_BAConsortium_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			hshQueryValues.put("size", String.valueOf(intQsize));
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updateData");

			rs = DBUtils.executeLAPSQuery("selinwarddetails^" + strAppNo);
			if (rs.next()) {
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_appinwardreg_corp");
				arrValues.add(Helper.correctNull(rs
						.getString("facility_govtsponschem")));
				arrValues.add(Helper.correctNull(rs
						.getString("facility_schemetype")));
				arrValues.add(Helper.correctNull(rs
						.getString("facility_sponsagency")));
				arrValues.add(Helper.correctNull(rs
						.getString("facility_subsidytype")));
				arrValues.add(Helper.correctNull(rs
						.getString("facility_subsidyamunt")));
				arrValues.add(Helper.correctNull(rs
						.getString("facility_agency")));
				arrValues.add(Helper.correctNull(rs.getString("app_inwardno")));
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

			intQsize = 0;
			hshQueryValues = new HashMap();

			if (rs != null)
				rs.close();
			boolean bflag = true;
			String strExAppno = "";
			strQuery = SQLParser.getSqlQuery("sel_PS_oldaccnum^" + strAppNo
					+ "^ ");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				if (!strExAppno.equalsIgnoreCase(Helper.correctNull(rs
						.getString("PS_OLD_APP_NO")))) {
					bflag = true;
				}

				strExAppno = Helper.correctNull(rs.getString("PS_OLD_APP_NO"));
				if (!Helper.correctNull(rs.getString("PS_APP_SNO"))
						.equalsIgnoreCase("")) {
					strParameters = Helper.correctNull(rs
							.getString("PS_MODIFY_TERMS"));

					strQuery = SQLParser.getSqlQuery("select_facilityCode^"
							+ strAppNo + "^"
							+ Helper.correctNull(rs.getString("PS_APP_SNO")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						if (!Helper
								.correctNull(rs1.getString("facility_group"))
								.equalsIgnoreCase("0")) {
							if (rs2 != null)
								rs2.close();
							strQuery = SQLParser
									.getSqlQuery("sel_post_sanction_applications^"
											+ strAppNo
											+ "^ and ps_app_sno='"
											+ Helper
													.correctNull(rs1
															.getString("facility_group"))
											+ "'");
							rs2 = DBUtils.executeQuery(strQuery);
							if (rs2.next()) {
								String strParam = "@"
										+ Helper.correctNull(rs2
												.getString("ps_modify_terms"));
								if (!strParameters.contains("@MARGIN")
										&& !strParameters.contains("@MODSEC")
										&& !strParameters.contains("@SEC")) {
									if (strParam.contains("@MARGIN")
											|| strParam.contains("@MODSEC")
											|| strParam.contains("@SEC")) {
										strParameters = strParameters + "@SEC";
									}
								}
								if (!strParameters.contains("@MARGIN")) {
									if (strParam.contains("@GUAR")) {
										strParameters = strParameters + "@GUAR";
									}
								}
							}
						}
					}

					if (strParameters.contains("DLA")
							|| strParameters.contains("INLIM")
							|| strParameters.contains("DATEEX")
							|| strParameters.contains("REODWC")
							|| strParameters.contains("MRS")
							|| strParameters.contains("DLP")
							|| strParameters.contains("MRI")
							|| strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MODGSS")
							|| strParameters.contains("MODBA")
							|| strParameters.contains("CGTMSE")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();

						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insfacilityps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

					}
					if (strParameters.contains("MODBA")) {

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_BankingArrangment_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_BAConsortium_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_BAConsortium_tl_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

					}
					if (strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insmisappdetailsps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insmisappdisplayscreenps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery
								.put("strQueryId", "insmis_appclassificationps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("CHBRANCH")
							|| strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")
							|| strParameters.contains("CHDPOWER")
							|| strParameters.contains("CHSCHEMECODE")
							|| strParameters.contains("DLA")
							|| strParameters.contains("INLIM")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "inspercuscbsaccountdataps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("MRS")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "instlrepayscheduleps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("DCCO")
							|| strParameters.contains("CHDCCO")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "inscomcommentsps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("SEC")
							|| strParameters.contains("MODSEC")
							|| strParameters.contains("MARGIN")
							|| strParameters.contains("GUAR")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insappsecuritydetailsps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("LAD")
							|| strParameters.contains("SUBLIMIT")) {
						if (rs1 != null)
							rs1.close();
						strQuery = SQLParser
								.getSqlQuery("selfacilitysublimit^"
										+ strAppNo
										+ "^"
										+ Helper.correctNull(rs
												.getString("PS_APP_SNO")));
						rs1 = DBUtils.executeQuery(strQuery);
						while (rs1.next()) {

							if (strParameters.contains("LAD")
									|| strParameters.contains("SUBLIMIT")) {
								if (bflag) {
									strQuery = SQLParser
											.getSqlQuery("maxfacilitysno^"
													+ Helper
															.correctNull(rs
																	.getString("PS_OLD_APP_NO")));

									if (rs2 != null) {
										rs2.close();
									}
									rs2 = DBUtils.executeQuery(strQuery);
									if (rs2.next()) {
										intSno = rs2.getInt(1);
										intSno = intSno - 1;
										bflag = false;
									}
								} else {
									intSno = intSno + 1;
								}
							}

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "insfacility_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_SNO")));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"inscom_termscond_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"inscom_facdocuments_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"insmis_appdetails_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"insmis_appdisplayscreen_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"insmis_appclassification_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"insper_cuscbsaccountdata_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"instl_repayschedule_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(strAppNo);
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"inscom_comments_postsanct");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"upd_facility_mclrspread");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"upd_facility_mclrspreadvalue");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "upd_fac_shg_share");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(String.valueOf(intSno + 1));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sno")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"ins_BankingArrangment_postsanction");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"ins_BAConsortium_postsanction");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"ins_BAConsortium_tl_postsanction");
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(strAppNo);
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
							if (!strParameters.contains("LAD")) {
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"post_updcom_companydetails_aa");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								arrValues.add(String.valueOf(intSno + 1));
								arrValues.add(Helper.correctNull(rs1
										.getString("facility_sno")));
								arrValues.add(strAppNo);
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"post_app_securitydetails_copy");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								arrValues.add(String.valueOf(intSno + 1));
								arrValues.add(Helper.correctNull(rs1
										.getString("facility_sno")));
								arrValues.add(strAppNo);
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));
							}
						}

					}

					if (strParameters.contains("GUAR")) {

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "compromoterins_bk");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

					}
					// added for cgtmse
					if (strParameters.contains("CGTMSE")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_cgtmse_details_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_cgtmsedetails_ps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MRI")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "fac_mclr_value_bk");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "fac_mclr_spreadvalue_bk");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("DLA")
							|| strParameters.contains("INLIM")
							|| strParameters.contains("DATEEX")
							|| strParameters.contains("REODWC")
							|| strParameters.contains("DLP")
							|| strParameters.contains("MRI")
							|| strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MODGSS")
							|| strParameters.contains("MODBA")
							|| strParameters.contains("MRS")
							|| strParameters.contains("CGTMSE")) {

						strQuery = SQLParser
								.getSqlQuery("select_facilityCode^"
										+ strAppNo
										+ "^"
										+ Helper.correctNull(rs
												.getString("PS_APP_SNO")));
						if (rs2 != null) {
							rs2.close();
						}
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "updfacilitiespostsanc");
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_proposed")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_sancamt")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_tenor")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_months")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_interest")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_sancinterest")));
							if (strParameters.contains("REODWC"))
								arrValues.add(Helper.correctNull(rs2
										.getString("facility_reviewdate")));
							else
								arrValues.add(Helper.correctNull(rs2
										.getString("facility_duedate")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_baserate")));
							arrValues.add(Helper.correctNull(rs2
									.getString("bplr")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_intsubtype")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_govtsponschem")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_schemetype")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_sponsagency")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_subsidytype")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_subsidyamunt")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_propbanktype")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_agency")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_leaderbank")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_roitype")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_roiscore")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_processed_type")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_premium_tenor")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_premium_loan_amount")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_ins_account_no")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_ins_company_name")));
							arrValues.add(Helper.correctNull(rs2
									.getString("fac_ins_funded_company_name")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_perinstall")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_reviewdate")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_SNO")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						}
					}

					if (strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_misappdetails");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger.UpdateLogger("MISappdetails table delete ==="
								+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updmisappdetailsps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("MISappdetails table selectinsert ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_misappdisplayscreen");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappdisplayscreen table delete ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updmisappdisplayscreenps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappdisplayscreen table selectinsert ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_misappclassification");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappclassification table delete ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery
								.put("strQueryId", "updmis_appclassificationps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappclassification table selectinsert ==="
										+ hshQuery);
					}

					if (strParameters.contains("MODBA")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_BankingArrangment");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_BankingArrangment_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_revBAConsortium_tl");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_BAConsortium_tl_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_revBAConsortium");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_BAConsortium_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"del_BAConsortiumLeadpropdelete");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_Baconssort_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"del_BAConsortiumLeadpropdelete_tl");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_BaconssortTL_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

					}
					// ================end==========================//

					if (strParameters.contains("CHBRANCH")
							|| strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")
							|| strParameters.contains("CHDPOWER")
							|| strParameters.contains("CHSCHEMECODE")
							|| strParameters.contains("DLA")
							|| strParameters.contains("INLIM")) {
						if (rs2 != null) {
							rs2.close();
						}
						strQuery = SQLParser
								.getSqlQuery("sel_cbsdetails^"
										+ strAppNo
										+ "^"
										+ Helper.correctNull(rs
												.getString("PS_APP_SNO")));
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "update_cbsdetails");
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE6")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE7")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE8")));
							arrValues.add(Helper.correctNull(rs2
									.getString("MODE_OF_OPERATION")));
							arrValues.add(Helper.correctNull(rs2
									.getString("DRAWING_PWR_IND")));
							arrValues.add(Helper.correctNull(rs2
									.getString("DRAWING_PWR")));
							arrValues.add(Helper.correctNull(rs2
									.getString("NATUREOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("TYPEOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("MODEOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("PURPOSEOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE3")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOANDISBBRANCH")));
							arrValues.add(Helper.correctNull(rs2
									.getString("SECURITYCODE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE7FINCODE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE8FINCODE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_schemecode")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_glsubheadcode")));
							arrValues.add(Helper.correctNull(rs2
									.getString("INTRATEFREQ")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LBRCODE")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_SNO")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						}
					}
					if (strParameters.contains("MRS")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "delete_repayschedule_corp");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updtlrepayscheduleps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("DCCO")
							|| strParameters.contains("CHDCCO")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_management");
						arrValues.add("BreifDetaisTL");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updcomcommentsps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("SEC")
							|| strParameters.contains("MODSEC")
							|| strParameters.contains("MARGIN")
							|| strParameters.contains("GUAR")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"del_proposedsecuritydetails");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updappsecuritydetailsps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("GUAR")||strParameters.contains("LAD")||strParameters.contains("SUBLIMIT")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_com_companydetails_ps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updcom_companydetails_ps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

					}
					if (strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MRI")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_value_del_old_proposal");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_value_Upd_old_proposal");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_spreadvalue_del_old_proposal");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_spreadvalue_Upd_old_proposal");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_SNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("PS_APP_SNO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
				}

				// if(intQsize>0)
				// EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			}

			if (rs != null)
				rs.close();
			// MODGSS Parent Inward Reverse Update

			String strExistingAppno = "";
			String strExistingInwardno = "";
			boolean bupdFlag = true;
			rs = DBUtils.executeLAPSQuery("sel_facilitygovtsponsdet^"
					+ strAppNo);
			while (rs.next()) {
				if (!strExistingAppno.equalsIgnoreCase(Helper.correctNull(rs
						.getString("FACILITY_APPNO")))) {
					if (!strExistingAppno.equalsIgnoreCase("") && bupdFlag) {
						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("sel_ps_inwarddetails^"
								+ strExistingAppno + "^" + strAppNo);
						if (rs1.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "ins_appinwardreg_ps");
							arrValues.add(strAppNo);
							arrValues.add(strExistingAppno);
							arrValues.add(Helper.correctNull(rs1
									.getString("app_inwardno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "upd_appinwardreg_corp");
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_govtsponschem")));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_schemetype")));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_sponsagency")));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_subsidytype")));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_subsidyamunt")));
							arrValues.add(Helper.correctNull(rs1
									.getString("facility_agency")));
							arrValues.add(Helper.correctNull(rs1
									.getString("app_inwardno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						} else {

							if (rs1 != null)
								rs1.close();
							rs1 = DBUtils.executeLAPSQuery("sel_applications^"
									+ strExistingAppno);
							if (rs1.next()) {
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"ins_appinwardreg_ps");
								arrValues.add(strAppNo);
								arrValues.add(strExistingAppno);
								arrValues.add(Helper.correctNull(rs1
										.getString("app_inwardno")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"upd_appinwardreg_corp");
								arrValues.add("2");
								arrValues.add("0");
								arrValues.add("0");
								arrValues.add("0");
								arrValues.add("");
								arrValues.add("");
								arrValues.add(Helper.correctNull(rs1
										.getString("app_inwardno")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));
							}
						}
					}
					bupdFlag = true;
				}

				if (Helper.correctNull(rs.getString("govt")).equalsIgnoreCase(
						"Y")
						&& Helper.correctNull(rs.getString("subsidyflag"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("sponsagency"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("schemetype"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("subsidytype"))
								.equalsIgnoreCase("Y")
						&& Helper.correctNull(rs.getString("agency"))
								.equalsIgnoreCase("Y")) {
					if (Helper.correctNull(
							rs.getString("facility_govtsponschem"))
							.equalsIgnoreCase("1")
							&& bupdFlag) {
						bupdFlag = false;

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_appinwardreg_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("FACILITY_APPNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("inward_no")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "upd_appinwardreg_corp");
						arrValues.add(Helper.correctNull(rs
								.getString("facility_govtsponschem")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_schemetype")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_sponsagency")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_subsidytype")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_subsidyamunt")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_agency")));
						arrValues.add(Helper.correctNull(rs
								.getString("inward_no")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
				} else {
					if (Helper.correctNull(
							rs.getString("facility_govtsponschem"))
							.equalsIgnoreCase("1")
							&& bupdFlag) {
						bupdFlag = false;

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_appinwardreg_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("FACILITY_APPNO")));
						arrValues.add(Helper.correctNull(rs
								.getString("inward_no")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "upd_appinwardreg_corp");
						arrValues.add(Helper.correctNull(rs
								.getString("facility_govtsponschem")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_schemetype")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_sponsagency")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_subsidytype")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_subsidyamunt")));
						arrValues.add(Helper.correctNull(rs
								.getString("facility_agency")));
						arrValues.add(Helper.correctNull(rs
								.getString("inward_no")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
				}

				strExistingAppno = Helper.correctNull(rs
						.getString("FACILITY_APPNO"));
				strExistingInwardno = Helper.correctNull(rs
						.getString("inward_no"));

			}

			{
				if (!strExistingAppno.equalsIgnoreCase("") && bupdFlag) {
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_ps_inwarddetails^"
							+ strExistingAppno + "^" + strAppNo);
					if (rs1.next()) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_appinwardreg_ps");
						arrValues.add(strAppNo);
						arrValues.add(strExistingAppno);
						arrValues.add(Helper.correctNull(rs1
								.getString("app_inwardno")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "upd_appinwardreg_corp");
						arrValues.add(Helper.correctNull(rs1
								.getString("facility_govtsponschem")));
						arrValues.add(Helper.correctNull(rs1
								.getString("facility_schemetype")));
						arrValues.add(Helper.correctNull(rs1
								.getString("facility_sponsagency")));
						arrValues.add(Helper.correctNull(rs1
								.getString("facility_subsidytype")));
						arrValues.add(Helper.correctNull(rs1
								.getString("facility_subsidyamunt")));
						arrValues.add(Helper.correctNull(rs1
								.getString("facility_agency")));
						arrValues.add(Helper.correctNull(rs1
								.getString("app_inwardno")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					} else {

						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("sel_applications^"
								+ strExistingAppno);
						if (rs1.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "ins_appinwardreg_ps");
							arrValues.add(strAppNo);
							arrValues.add(strExistingAppno);
							arrValues.add(Helper.correctNull(rs1
									.getString("app_inwardno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "upd_appinwardreg_corp");
							arrValues.add("2");
							arrValues.add("0");
							arrValues.add("0");
							arrValues.add("0");
							arrValues.add("");
							arrValues.add("");
							arrValues.add(Helper.correctNull(rs1
									.getString("app_inwardno")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						}
					}
				}
			}
			if (intQsize > 0)
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

		} catch (Exception e) {
			log.error("Error in updatePostsanctionbkTables = " + e.toString());
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}

	}

	private void updatePostsanctionRetailbkTables(HashMap hshValues)
			 {
		ResultSet rs = null, rs1 = null, rs2 = null;
		HashMap hshResult = new HashMap();
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		String strQuery = "", strParameters = "", strFac = "", strPrdCode = "0";
		String strParentInward = "";
		int intSno = 0;

		ArrayList arrValues = new ArrayList();

		try {
			String strAppNo = correctNull((String) hshValues.get("appno"));

			int intQsize = 0;

			hshQueryValues = new HashMap();
			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delloandetailsbk_postsanc");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delapp_securitydetails_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delmis_appdetails_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delmis_appdisplayscreen_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delmis_appclassification_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delper_cuscbsaccountdata_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "deltl_repayschedule_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delcom_groupconcerns_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delper_demographics_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_mclr_value");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_mclr_spreadvalue");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "delete_appinwardreg_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_loansecure_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_per_house_proposed_asset_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			intQsize = intQsize + 1;
			hshQuery = new HashMap();
			arrValues = new ArrayList();
			arrValues.add(strAppNo);
			hshQuery.put("strQueryId", "del_pmay_houseloan_details_ps");
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put(String.valueOf(intQsize), hshQuery);

			hshQueryValues.put("size", String.valueOf(intQsize));
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updateData");

			boolean bflag = true;
			strQuery = SQLParser.getSqlQuery("sel_PS_oldaccnum^" + strAppNo
					+ "^ ");
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {

				strQuery = SQLParser.getSqlQuery("comfunsel1^"
						+ Helper.correctNull(rs.getString("PS_OLD_APP_NO")));
				if (rs2 != null) {
					rs2.close();
				}
				rs2 = DBUtils.executeQuery(strQuery);
				if (rs2.next()) {
					strPrdCode = Helper.correctNull(rs2
							.getString("app_prdcode"));
				}

				if (rs1 != null)
					rs1.close();
				rs1 = DBUtils.executeLAPSQuery("comfunsel1^"
						+ Helper.correctNull(rs.getString("PS_OLD_APP_NO")));
				if (rs1.next()) {
					strParentInward = Helper.correctNull(rs1
							.getString("app_inwardno"));
				}

				intQsize = 0;
				hshQueryValues = new HashMap();
				if (!Helper.correctNull(rs.getString("PS_APP_SNO"))
						.equalsIgnoreCase("")) {
					strParameters = Helper.correctNull(rs
							.getString("PS_MODIFY_TERMS"));

					if (strParameters.contains("DLA")
							|| strParameters.contains("SLILA")
							|| strParameters.contains("DLP")
							|| strParameters.contains("MRI")
							|| strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MODGSS")
							|| strParameters.contains("MOEX")
							|| strParameters.contains("CGTMSE")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insloandetailsbk_postsanc");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						strQuery = SQLParser.getSqlQuery("checkcostloanprd^"
								+ Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
						if (rs2 != null) {
							rs2.close();
						}
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"updateloandetails_purposeofloan");
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_purposeoflo")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						}

					}

					if (strParameters.contains("MOEX")
							|| strParameters.contains("MRS")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_loansecure_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insmisappdetailsps");
						arrValues.add(strAppNo);
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insmisappdisplayscreenps");
						arrValues.add(strAppNo);
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery
								.put("strQueryId", "insmis_appclassificationps");
						arrValues.add(strAppNo);
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("CHBRANCH")
							|| strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")
							|| strParameters.contains("CHDPOWER")
							|| strParameters.contains("CHSCHEMECODE")
							|| strParameters.contains("DLA")
							|| strParameters.contains("SLILA")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "inspercuscbsaccountdataps");
						arrValues.add(strAppNo);
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("MRS")
							|| strParameters.contains("DLA")
							|| strParameters.contains("DLP")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "instlrepayscheduleps");
						arrValues.add(strAppNo);
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					if (strParameters.contains("SEC")
							|| strParameters.contains("MODSEC")
							|| strParameters.contains("GUAR")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insappsecuritydetailsps");
						arrValues.add(strAppNo);
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("GUAR")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "insper_demographics_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "inscom_groupconcerns_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					/*
					 * if(strParameters.contains("BRTOMCLR") ||
					 * strParameters.contains("MRI")) { hshQuery = new
					 * HashMap(); arrValues = new ArrayList();
					 * intQsize=intQsize+1;
					 * hshQuery.put("strQueryId","fac_mclr_value_bk");
					 * arrValues.add(strAppNo); arrValues.add("1");
					 * arrValues.add("1");
					 * arrValues.add(Helper.correctNull(rs.getString
					 * ("PS_OLD_APP_NO"))); hshQuery.put("arrValues",arrValues);
					 * hshQueryValues.put(String.valueOf(intQsize),hshQuery);
					 * hshQueryValues.put("size",String.valueOf(intQsize));
					 * 
					 * hshQuery = new HashMap(); arrValues = new ArrayList();
					 * intQsize=intQsize+1;
					 * hshQuery.put("strQueryId","fac_mclr_spreadvalue_bk");
					 * arrValues.add(strAppNo); arrValues.add("1");
					 * arrValues.add("1");
					 * arrValues.add(Helper.correctNull(rs.getString
					 * ("PS_OLD_APP_NO"))); hshQuery.put("arrValues",arrValues);
					 * hshQueryValues.put(String.valueOf(intQsize),hshQuery);
					 * hshQueryValues.put("size",String.valueOf(intQsize)); }
					 */
					if (strParameters.contains("MODGSS")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_appinwardreg_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strParentInward);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_pmay_houseloan_details_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"ins_per_house_proposed_asset_ps");
						arrValues.add(strAppNo);
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("DLA")
							|| strParameters.contains("SLILA")
							|| strParameters.contains("DLP")
							|| strParameters.contains("MRI")
							|| strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MODGSS")
							|| strParameters.contains("MOEX")) {

						strQuery = SQLParser.getSqlQuery("select_loandetails^"
								+ strAppNo);
						if (rs2 != null) {
							rs2.close();
						}
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"updloandetails_postsanc");
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_modintrate")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_recmdamt")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_reqterms")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_amtreqd")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_mclrtabcode")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_mclrtype")));

							arrValues.add(Helper.correctNull(rs2
									.getString("loan_govt")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_sub")));
							arrValues.add(Helper.correctNull(rs2
									.getString("govt_scheme")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_sponseragency")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_subsidytype")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_agencyname")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_msmeexposure")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_BASERATE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_CREDITRSKVAL")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_BUSSTATVAL")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_MCLR_MIGRATION_DATE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_EMI")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_interestcharged")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_ROITYPE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_ROISCORE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_PROCESSED_TYPE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_PREMIUM_TENOR")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_PREMIUM_LOAN_AMOUNT")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_INS_ACCOUNT_NO")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOAN_INS_COMPANY_NAME")));
							arrValues
									.add(Helper
											.correctNull(rs2
													.getString("LOAN_INS_FUNDED_COMPANY_NAME")));

							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId",
									"updappraisalsanction_postsanction");
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_recmdamt")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));

							if (strParameters.contains("MODGSS")) {
								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId", "upd_appinwardreg");
								arrValues.add(Helper.correctNull(rs2
										.getString("loan_govt")));
								arrValues.add(Helper.correctNull(rs2
										.getString("govt_scheme")));
								arrValues.add(Helper.correctNull(rs2
										.getString("loan_sub")));
								arrValues.add(Helper.correctNull(rs2
										.getString("loan_sponseragency")));
								arrValues.add(Helper.correctNull(rs2
										.getString("loan_subsidytype")));
								arrValues.add(Helper.correctNull(rs2
										.getString("loan_agencyname")));
								arrValues.add(strParentInward);
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId", "del_pmay_desc");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"reins_pmay_houseloan_details");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								arrValues.add(strAppNo);
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"del_per_house_proposed_asset1");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));

								hshQuery = new HashMap();
								arrValues = new ArrayList();
								intQsize = intQsize + 1;
								hshQuery.put("strQueryId",
										"reins_per_house_proposed_asset");
								arrValues.add(Helper.correctNull(rs
										.getString("PS_OLD_APP_NO")));
								arrValues.add(strAppNo);
								hshQuery.put("arrValues", arrValues);
								hshQueryValues.put(String.valueOf(intQsize),
										hshQuery);
								hshQueryValues.put("size", String
										.valueOf(intQsize));
							}
						}
					}

					if (strParameters.contains("MOEX")
							|| strParameters.contains("MRS")) {

						strQuery = SQLParser.getSqlQuery("getloansecure_renew^"
								+ strAppNo);
						if (rs2 != null) {
							rs2.close();
						}
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "upd_per_loan_secure");
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_noofinstallment")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_servised")));
							arrValues.add(Helper.correctNull(rs2
									.getString("loan_periodicity")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						}
					}

					if (strParameters.contains("MIS")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_misappdetails");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger.UpdateLogger("MISappdetails table delete ==="
								+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updmisappdetailsps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("MISappdetails table selectinsert ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_misappdisplayscreen");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappdisplayscreen table delete ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updmisappdisplayscreenps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappdisplayscreen table selectinsert ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "del_misappclassification");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappclassification table delete ==="
										+ hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery
								.put("strQueryId", "updmis_appclassificationps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						MISLogger
								.UpdateLogger("misappclassification table selectinsert ==="
										+ hshQuery);
					}
					if (strParameters.contains("CHBRANCH")
							|| strParameters.contains("MIS")
							|| strParameters.contains("MISMOD")
							|| strParameters.contains("CHDPOWER")
							|| strParameters.contains("CHSCHEMECODE")
							|| strParameters.contains("DLA")
							|| strParameters.contains("SLILA")) {
						if (rs2 != null) {
							rs2.close();
						}
						strQuery = SQLParser.getSqlQuery("sel_cbsdetails^"
								+ strAppNo + "^1");
						rs2 = DBUtils.executeQuery(strQuery);
						if (rs2.next()) {
							hshQuery = new HashMap();
							arrValues = new ArrayList();
							intQsize = intQsize + 1;
							hshQuery.put("strQueryId", "update_cbsdetails");
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE6")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE7")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE8")));
							arrValues.add(Helper.correctNull(rs2
									.getString("MODE_OF_OPERATION")));
							arrValues.add(Helper.correctNull(rs2
									.getString("DRAWING_PWR_IND")));
							arrValues.add(Helper.correctNull(rs2
									.getString("DRAWING_PWR")));
							arrValues.add(Helper.correctNull(rs2
									.getString("NATUREOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("TYPEOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("MODEOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("PURPOSEOFADV")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE3")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LOANDISBBRANCH")));
							arrValues.add(Helper.correctNull(rs2
									.getString("SECURITYCODE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE7FINCODE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("FREECODE8FINCODE")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_schemecode")));
							arrValues.add(Helper.correctNull(rs2
									.getString("facility_glsubheadcode")));
							arrValues.add(Helper.correctNull(rs2
									.getString("INTRATEFREQ")));
							arrValues.add(Helper.correctNull(rs2
									.getString("LBRCODE")));
							arrValues.add(Helper.correctNull(rs
									.getString("PS_OLD_APP_NO")));
							arrValues.add("1");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put(String.valueOf(intQsize),
									hshQuery);
							hshQueryValues
									.put("size", String.valueOf(intQsize));
						}
					}
					if (strParameters.contains("MRS")
							|| strParameters.contains("DLA")
							|| strParameters.contains("DLP")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "delete_repayschedule_corp");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updtlrepayscheduleps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("SEC")
							|| strParameters.contains("MODSEC")
							|| strParameters.contains("GUAR")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"del_proposedsecuritydetails");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "updappsecuritydetailsps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("GUAR")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"delper_demographics_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"insper_demographics_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"del_com_groupconcerns_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"inscom_groupconcerns_postsanction");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

					if (strParameters.contains("BRTOMCLR")
							|| strParameters.contains("MRI")) {
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_value_del_old_proposal");
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_value_Upd_old_proposal");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add("1");
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_spreadvalue_del_old_proposal");
						arrValues.add("1");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId",
								"fac_mclr_spreadvalue_Upd_old_proposal");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add("1");
						arrValues.add(strAppNo);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}
					// added for CGTMSE parameter
					if (strParameters.contains("CGTMSE")) {
						intQsize = intQsize + 1;
						hshQuery = new HashMap();
						arrValues = new ArrayList();
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("strQueryId", "del_cgtmse_details_ps");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);

						hshQuery = new HashMap();
						arrValues = new ArrayList();
						intQsize = intQsize + 1;
						hshQuery.put("strQueryId", "ins_cgtmsedetails_ps");
						arrValues.add(Helper.correctNull(rs
								.getString("PS_OLD_APP_NO")));
						arrValues.add("1");
						arrValues.add(strAppNo);
						arrValues.add("1");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put(String.valueOf(intQsize), hshQuery);
						hshQueryValues.put("size", String.valueOf(intQsize));
					}

				}

				if (intQsize > 0)
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
			}

		} catch (Exception e) {
			log.error("Error in updatePostsanctionbkTables = " + e.toString());
			throw new EJBException(e.getMessage());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs1 != null) {
					rs1.close();
				}

			} catch (Exception e1) {
				throw new EJBException("Error closing connection.." + e1);
			}
		}

	}

	public HashMap getPostSanctionFacDetails(HashMap hshValues)
			 {
		HashMap hshResult = new HashMap();
		ArrayList arrCol = new ArrayList();
		ArrayList arrRow = new ArrayList();

		java.text.NumberFormat nf = java.text.NumberFormat.getInstance();
		nf.setMinimumFractionDigits(2);
		nf.setMaximumFractionDigits(2);
		nf.setGroupingUsed(false);
		String strAppstatus = "";
		String strOldDate = "", strNewDate = "", strOldNo = "", strReviewedDate = "", strOldReviewedDate = "", strREODWCDueDate = "";
		ArrayList arrOutbankRow = new ArrayList();
		ArrayList arrOutbankCol = new ArrayList();
		ArrayList arroldOutbankRow = new ArrayList();
		ArrayList arroldOutbankCol = new ArrayList();

		ArrayList arrOutbankRowtl = new ArrayList();
		ArrayList arrOutbankColtl = new ArrayList();
		ArrayList arroldOutbankRowtl = new ArrayList();
		ArrayList arroldOutbankColtl = new ArrayList();
		try {
			String strappno = correctNull((String) hshValues
					.get("Applicationno"));
			String sessionModuleType = correctNull((String) hshValues
					.get("sessionModuleType"));
			int intFacCount = 0;
			String strModifiedTerms = "", strFacSno = "", strPrdDesc = "";
			String strOldFacSno = "", strOldPrdDesc = "", stroldproposalnumber = "";
			ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null;

			rs = DBUtils.executeLAPSQuery("pergetloanProducttypecode^"
					+ strappno);
			if (rs.next()) {
				strAppstatus = Helper.correctNull(rs.getString("app_status"));
			}

			String strQuery = SQLParser
					.getSqlQuery("sel_post_sanction_applications^" + strappno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				stroldproposalnumber = Helper.correctNull(rs
						.getString("PS_OLD_APP_NO"));
				hshResult = new HashMap();
				intFacCount++;
				strModifiedTerms = "@"
						+ Helper.correctNull(rs.getString("ps_modify_terms"));
				if (sessionModuleType.equalsIgnoreCase("RET")) {
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("findapptypeoffline^"
							+ strappno);
					if (rs1.next()) {
						hshResult.put("strProductDesc", Helper.correctNull(rs1
								.getString("prd_desc")));
						strFacSno = "1";
						strPrdDesc = Helper.correctNull(rs1
								.getString("prd_desc"));
					}
				} else {
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("select_facilityproposed^"
							+ strappno + "^"
							+ Helper.correctNull(rs.getString("ps_app_sno")));
					if (rs1.next()) {
						hshResult.put("strProductDesc", Helper.correctNull(rs1
								.getString("facility_displaydesc")));
						hshResult.put("strProductSno", Helper.correctNull(rs
								.getString("ps_app_sno")));
						strPrdDesc = Helper.correctNull(rs1
								.getString("facility_displaydesc"));

						if (!Helper
								.correctNull(rs1.getString("facility_group"))
								.equalsIgnoreCase("0")) {
							if (rs2 != null)
								rs2.close();
							strQuery = SQLParser
									.getSqlQuery("sel_post_sanction_applications^"
											+ strappno
											+ "^ and ps_app_sno='"
											+ Helper
													.correctNull(rs1
															.getString("facility_group"))
											+ "'");
							rs2 = DBUtils.executeQuery(strQuery);
							if (rs2.next()) {
								String strParam = "@"
										+ Helper.correctNull(rs2
												.getString("ps_modify_terms"));
								if (!strModifiedTerms.contains("@MARGIN")
										&& !strModifiedTerms
												.contains("@MODSEC")
										&& !strModifiedTerms.contains("@SEC")) {
									if (strParam.contains("@MARGIN")
											|| strParam.contains("@MODSEC")
											|| strParam.contains("@SEC")) {
										strModifiedTerms = strModifiedTerms
												+ "@SEC";
									}
								}
								if (!strModifiedTerms.contains("@MARGIN")) {
									if (strParam.contains("@GUAR")) {
										strModifiedTerms = strModifiedTerms
												+ "@GUAR";
									}
								}
							}
						}
					}
					strFacSno = Helper.correctNull(rs.getString("ps_app_sno"));
				}

				if (sessionModuleType.equalsIgnoreCase("RET")) {
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils
							.executeLAPSQuery("findapptypeoffline^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no")));
					if (rs1.next()) {
						strOldFacSno = "1";
						strOldPrdDesc = Helper.correctNull(rs1
								.getString("prd_desc"));
					}
				} else {
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils
							.executeLAPSQuery("select_facilityproposed^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_sno")));
					if (rs1.next()) {
						strOldPrdDesc = Helper.correctNull(rs1
								.getString("facility_displaydesc"));
						strOldFacSno = Helper.correctNull(rs
								.getString("ps_old_app_sno"));
					}
				}
				if (strModifiedTerms.contains("INLIM")
						|| strModifiedTerms.contains("REODWC")
						|| strModifiedTerms.contains("DLA")
						|| strModifiedTerms.contains("SLILA")
						|| strModifiedTerms.contains("DLP")
						|| strModifiedTerms.contains("MRI")
						|| strModifiedTerms.contains("DATEEX")
						|| strModifiedTerms.contains("BRTOMCLR")
						|| strModifiedTerms.contains("MODBA")
						|| strModifiedTerms.contains("MODGSS")
						|| strModifiedTerms.contains("MOEX")) {
					if (sessionModuleType.equalsIgnoreCase("RET")) {
						if (rs1 != null)
							rs1.close();
						if (strAppstatus.equalsIgnoreCase("op"))
							rs1 = DBUtils.executeLAPSQuery("getappamt^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no")));
						else
							rs1 = DBUtils.executeLAPSQuery("getappamt_PS^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no")) + "^"
									+ strappno);
						if (rs1.next()) {
							hshResult.put("strOldAmount", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_amtreqd")))));
							hshResult.put("strOldSancAmount", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_recmdamt")))));
							hshResult.put("strOldReqTerms",
									Helper.correctNull(rs1
											.getString("loan_reqterms")));
							hshResult.put("strOldReqTerms0",
									Helper.correctNull(rs1
											.getString("loan_reqterms")));
							hshResult.put("strOldInterest", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_modintrate")))));
							hshResult
									.put(
											"strOldBaseInterest",
											nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs1
																			.getString("loan_baserate")))));
							hshResult
									.put(
											"LOAN_MCLR_MIGRATION_DATE",
											Helper
													.correctNull(rs1
															.getString("LOAN_MCLR_MIGRATION_DATE")));
							hshResult
									.put(
											"strLoaninterestchargedEx0",
											Helper
													.correctNull(rs1
															.getString("loan_interestcharged")));
							hshResult.put("strEMIEx0", Helper.correctNull(rs1
									.getString("loan_emi")));
							if (Helper.correctNull(
									rs1.getString("loan_inttype"))
									.equalsIgnoreCase("Fixed"))
								hshResult.put("strOldIntDef", "F");
							else {
								String strQuery1 = SQLParser
										.getSqlQuery("sanctiondate_mclr^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no")));
								if (rs2 != null)
									rs2.close();
								rs2 = DBUtils.executeQuery(strQuery1);
								if (rs2.next()) {
									if (Integer.parseInt(Helper.correctInt(rs2
											.getString("datediff"))) < 0)
										hshResult.put("strOldIntDef", "");
									else
										hshResult.put("strOldIntDef", "S");
								}
							}

							String strTemp = Helper.correctNull(rs1
									.getString("loan_mclrtype"));
							if (!strTemp.equalsIgnoreCase("")) {
								String[] strArr = strTemp.split("@");
								if (strArr.length > 1) {
									if (rs3 != null)
										rs3.close();
									rs3 = DBUtils
											.executeLAPSQuery("selcbsiddatadesc^34^"
													+ strArr[0]);
									if (rs3.next()) {
										hshResult
												.put(
														"strOldMCLRtype",
														Helper
																.correctNull(rs3
																		.getString("cbs_static_data_desc")));
										hshResult
												.put(
														"strOldMCLRCode",
														Helper
																.correctNull(rs3
																		.getString("CBS_STATIC_DATA_PASSING_CODE")));
									}
									hshResult
											.put(
													"strOldMCLRValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(strArr[1]))));
								}
							}

							hshResult.put("strOldCRPValue", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_creditrskval")))));
							hshResult.put("strOldBSPValue", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_busstatval")))));

							if (Helper.correctNull(rs1.getString("loan_govt"))
									.equalsIgnoreCase("1"))
								hshResult.put("strOldGovtScheme", "Yes");
							else if (Helper.correctNull(
									rs1.getString("loan_govt"))
									.equalsIgnoreCase("2"))
								hshResult.put("strOldGovtScheme", "No");

							hshResult.put("strOldSudsidyAmt", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_sub")))));
							hshResult.put("strOldGovtSchemeVal", Helper
									.correctNull(rs1.getString("govt_scheme")));

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^11^"
											+ Helper.correctNull(rs1
													.getString("govt_scheme")));
							if (rs3.next()) {
								hshResult.put("strOldSchemeType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^3^"
											+ Helper
													.correctNull(rs1
															.getString("loan_sponseragency")));
							if (rs3.next()) {
								hshResult.put("strOldSponserAgency", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^5^"
											+ Helper
													.correctNull(rs1
															.getString("loan_subsidytype")));
							if (rs3.next()) {
								hshResult.put("strOldSubsidyType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

						}
						if (rs1 != null)
							rs1.close();

						rs1 = DBUtils.executeLAPSQuery("getappamt^" + strappno);
						if (rs1.next()) {
							hshResult.put("strAmount", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_amtreqd")))));
							hshResult.put("strSancAmount", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_recmdamt")))));
							hshResult.put("strBaseInterest", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_baserate")))));
							hshResult.put("strReqTerms", Helper.correctNull(rs1
									.getString("loan_reqterms")));
							hshResult.put("strReqTerms0",
									Helper.correctNull(rs1
											.getString("loan_reqterms")));
							hshResult.put("strInterest", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_modintrate")))));
							hshResult
									.put(
											"LOAN_MCLR_MIGRATION_DATE",
											Helper
													.correctNull(rs1
															.getString("LOAN_MCLR_MIGRATION_DATE")));
							hshResult
									.put(
											"strLoaninterestcharged0",
											Helper
													.correctNull(rs1
															.getString("loan_interestcharged")));
							hshResult.put("strEMI0", Helper.correctDouble(rs1
									.getString("loan_emi")));
							String strTemp = Helper.correctNull(rs1
									.getString("loan_mclrtype"));
							if (!strTemp.equalsIgnoreCase("")) {
								String[] strArr = strTemp.split("@");
								if (strArr.length > 1) {
									if (rs3 != null)
										rs3.close();
									rs3 = DBUtils
											.executeLAPSQuery("selcbsiddatadesc^34^"
													+ strArr[0]);
									if (rs3.next()) {
										hshResult
												.put(
														"strMCLRtype",
														Helper
																.correctNull(rs3
																		.getString("cbs_static_data_desc")));
										hshResult
												.put(
														"strMCLRCode",
														Helper
																.correctNull(rs3
																		.getString("CBS_STATIC_DATA_PASSING_CODE")));
									}
									hshResult
											.put(
													"strMCLRValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(strArr[1]))));
								}
							}
							hshResult.put("strCRPValue", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_creditrskval")))));
							hshResult.put("strBSPValue", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_busstatval")))));
							if (Helper.correctNull(
									rs1.getString("loan_inttype"))
									.equalsIgnoreCase("Fixed"))
								hshResult.put("strIntDef", "F");
							else
								hshResult.put("strIntDef", "S");

							if (Helper.correctNull(rs1.getString("loan_govt"))
									.equalsIgnoreCase("1"))
								hshResult.put("strGovtScheme", "Yes");
							else if (Helper.correctNull(
									rs1.getString("loan_govt"))
									.equalsIgnoreCase("2"))
								hshResult.put("strGovtScheme", "No");

							hshResult.put("strSudsidyAmt", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("loan_sub")))));
							hshResult.put("strGovtSchemeVal", Helper
									.correctNull(rs1.getString("govt_scheme")));

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^11^"
											+ Helper.correctNull(rs1
													.getString("govt_scheme")));
							if (rs3.next()) {
								hshResult.put("strSchemeType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^3^"
											+ Helper
													.correctNull(rs1
															.getString("loan_sponseragency")));
							if (rs3.next()) {
								hshResult.put("strSponserAgency", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^5^"
											+ Helper
													.correctNull(rs1
															.getString("loan_subsidytype")));
							if (rs3.next()) {
								hshResult.put("strSubsidyType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}
						}

						if (rs1 != null)
							rs1.close();
						if (strAppstatus.equalsIgnoreCase("op"))
							rs1 = DBUtils.executeLAPSQuery("sel_emi^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no")));
						else
							rs1 = DBUtils
									.executeLAPSQuery("select_loansecure_ps^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_no"))
											+ "^" + strappno);
						if (rs1.next()) {
							hshResult
									.put("strHolidayEx0", Helper.correctInt(rs1
											.getString("loan_noofinstallment")));
							hshResult.put("strInteresServisedEx0", Helper
									.correctDouble(rs1
											.getString("loan_servised")));
						}

						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("sel_emi^" + strappno);
						if (rs1.next()) {
							hshResult.put("strHoliday0", Helper.correctInt(rs1
									.getString("loan_noofinstallment")));
							hshResult.put("strInteresServised0", Helper
									.correctDouble(rs1
											.getString("loan_servised")));
						}

						hshResult.put("strProposalNo0", strappno);

						int intVal = 0;
						if (rs3 != null)
							rs3.close();
						rs3 = DBUtils
								.executeLAPSQuery("sel_post_sanction_appl^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^" + strappno);
						while (rs3.next()) {
							if (!Helper.correctNull(rs3.getString("ps_app_no"))
									.equalsIgnoreCase(strappno)) {
								intVal++;
								if (rs1 != null)
									rs1.close();
								rs1 = DBUtils
										.executeLAPSQuery("select_loansecure_ps^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no"))
												+ "^"
												+ Helper
														.correctNull(rs3
																.getString("ps_app_no")));
								if (rs1.next()) {
									hshResult
											.put(
													"strHolidayEx" + intVal,
													Helper
															.correctInt(rs1
																	.getString("loan_noofinstallment")));
									hshResult.put("strInteresServisedEx"
											+ intVal, Helper.correctDouble(rs1
											.getString("loan_servised")));
								}

								if (rs1 != null)
									rs1.close();
								rs1 = DBUtils.executeLAPSQuery("sel_emi^"
										+ Helper.correctNull(rs3
												.getString("ps_app_no")));
								if (rs1.next()) {
									hshResult
											.put(
													"strHoliday" + intVal,
													Helper
															.correctInt(rs1
																	.getString("loan_noofinstallment")));
									hshResult
											.put(
													"strInteresServised"
															+ intVal,
													Helper
															.correctDouble(rs1
																	.getString("loan_servised")));
								}

								if (rs1 != null)
									rs1.close();

								rs1 = DBUtils.executeLAPSQuery("getappamt^"
										+ Helper.correctNull(rs3
												.getString("ps_app_no")));
								if (rs1.next()) {
									hshResult
											.put(
													"strReqTerms" + intVal,
													Helper
															.correctNull(rs1
																	.getString("loan_reqterms")));
									hshResult
											.put(
													"strLoaninterestcharged"
															+ intVal,
													Helper
															.correctNull(rs1
																	.getString("loan_interestcharged")));
									hshResult.put("strEMI" + intVal, Helper
											.correctNull(rs1
													.getString("loan_emi")));

								}

								if (rs1 != null)
									rs1.close();
								rs1 = DBUtils.executeLAPSQuery("getappamt_PS^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs3
												.getString("ps_app_no")));
								if (rs1.next()) {
									hshResult
											.put(
													"strOldReqTerms" + intVal,
													Helper
															.correctNull(rs1
																	.getString("loan_reqterms")));
									hshResult
											.put(
													"strLoaninterestchargedEx"
															+ intVal,
													Helper
															.correctNull(rs1
																	.getString("loan_interestcharged")));
									hshResult.put("strEMIEx" + intVal, Helper
											.correctNull(rs1
													.getString("loan_emi")));
								}

								hshResult.put("strProposalNo" + intVal,
										Helper.correctNull(rs3
												.getString("ps_app_no")));

							}
						}

						hshResult.put("strintVal", String.valueOf(intVal));

					} else {
						String strSpread1 = "1", strSpread2 = "2";
						if (rs1 != null)
							rs1.close();
						if (strAppstatus.equalsIgnoreCase("op"))
							rs1 = DBUtils
									.executeLAPSQuery("select_facilityproposed^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_no"))
											+ "^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_sno")));
						else
							rs1 = DBUtils
									.executeLAPSQuery("select_facilityproposed_ps^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_no"))
											+ "^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_sno"))
											+ "^"
											+ Helper.correctNull(rs
													.getString("ps_app_sno"))
											+ "^" + strappno);
						if (rs1.next()) {
							hshResult.put("strOldAmount", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("facility_proposed")))));
							hshResult
									.put(
											"strOldBaseInterest",
											nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs1
																			.getString("facility_baserate")))));
							hshResult.put("strOldSancAmount", Helper
									.correctNull(rs1
											.getString("facility_sancamt")));
							hshResult.put("strOldReqTerms", Helper
									.correctNull(rs1
											.getString("facility_months")));
							hshResult
									.put(
											"strOldInterest",
											nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs1
																			.getString("facility_sancinterest")))));
							hshResult.put("strOldIntDef",
									Helper.correctNull(rs1
											.getString("com_facintdef")));
							hshResult
									.put(
											"fac_mclr_migration_date",
											Helper
													.correctNull(rs1
															.getString("fac_mclr_migration_date")));
							if (Helper.correctNull(
									rs1.getString("facility_inttype"))
									.equalsIgnoreCase("Flo")) {
								String strQuery1 = SQLParser
										.getSqlQuery("sanctiondate_mclr^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no")));
								if (rs2 != null)
									rs2.close();
								rs2 = DBUtils.executeQuery(strQuery1);
								if (rs2.next()) {
									if (Integer.parseInt(Helper.correctInt(rs2
											.getString("datediff"))) < 0)
										hshResult.put("strOldIntDef", "");
									else
										hshResult
												.put(
														"strOldIntDef",
														Helper
																.correctNull(rs1
																		.getString("com_facintdef")));
								}
							}
							// hshResult.put("strOldDuedate",
							// Helper.correctNull(rs1.getString("facility_duedate")));
							strOldDate = Helper.correctNull(rs1
									.getString("facility_duedate"));
							strOldReviewedDate = Helper.correctNull(rs1
									.getString("facility_reviewdate"));
							String stroldFACILITY_INTSUBTYPE = Helper
									.correctNull(rs1
											.getString("FACILITY_INTSUBTYPE"));
							if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("BR"))
								stroldFACILITY_INTSUBTYPE = "Base Rate";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("MCLR"))
								stroldFACILITY_INTSUBTYPE = "MCLR";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("BRLEC"))
								stroldFACILITY_INTSUBTYPE = "BR linked Export Credit";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("MCLEC"))
								stroldFACILITY_INTSUBTYPE = "MCLR linked Export Credit";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("BPLR"))
								stroldFACILITY_INTSUBTYPE = "BPLR";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("LIBOR"))
								stroldFACILITY_INTSUBTYPE = "LIBOR";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("EURIBOR"))
								stroldFACILITY_INTSUBTYPE = "EURIBOR";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("EUROLIBOR"))
								stroldFACILITY_INTSUBTYPE = "EUROLIBOR";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("COMMI"))
								stroldFACILITY_INTSUBTYPE = "Commission";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("NOTAP"))
								stroldFACILITY_INTSUBTYPE = "Not Applicable";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("SMTB"))
								stroldFACILITY_INTSUBTYPE = "6 MONTHS TREASURY BILL";
							else if (stroldFACILITY_INTSUBTYPE
									.equalsIgnoreCase("TYGS"))
								stroldFACILITY_INTSUBTYPE = "10 YEAR GOVT SECURITY";

							hshResult.put("stroldFACILITY_INTSUBTYPE",
									stroldFACILITY_INTSUBTYPE);

							if (Helper.correctNull(
									rs1.getString("com_facintdef"))
									.equalsIgnoreCase("S")
									|| Helper.correctNull(
											rs1.getString("com_facintdef"))
											.equalsIgnoreCase("M")) {
								if (rs2 != null)
									rs2.close();
								if (strAppstatus.equalsIgnoreCase("op"))
									rs2 = DBUtils
											.executeLAPSQuery("sel_facility_mclrspread^"
													+ Helper
															.correctNull(rs
																	.getString("ps_old_app_sno"))
													+ "^"
													+ Helper
															.correctNull(rs
																	.getString("ps_old_app_no")));
								else
									rs2 = DBUtils
											.executeLAPSQuery("sel_facility_mclrspread_ps^"
													+ Helper
															.correctNull(rs
																	.getString("ps_app_sno"))
													+ "^"
													+ strappno
													+ "^"
													+ Helper
															.correctNull(rs
																	.getString("ps_old_app_no"))
													+ "^"
													+ Helper
															.correctNull(rs
																	.getString("ps_old_app_sno")));
								if (rs2.next()) {
									String strTemp = Helper.correctNull(rs2
											.getString("facility_mclrtype"));
									if (!strTemp.equalsIgnoreCase("")) {
										String[] strArr = strTemp.split("@");
										if (strArr.length > 1) {
											if (rs3 != null)
												rs3.close();
											rs3 = DBUtils
													.executeLAPSQuery("selcbsiddatadesc^34^"
															+ strArr[0]);
											if (rs3.next()) {
												hshResult
														.put(
																"strOldMCLRtype",
																Helper
																		.correctNull(rs3
																				.getString("cbs_static_data_desc")));
												hshResult
														.put(
																"strOldMCLRCode",
																Helper
																		.correctNull(rs3
																				.getString("CBS_STATIC_DATA_PASSING_CODE")));
												strSpread1 = Helper
														.correctNull(rs3
																.getString("cbs_static_sanc_refno"));
												strSpread2 = Helper
														.correctNull(rs3
																.getString("cbs_static_cgtmse"));
											}
										}
									}

									hshResult
											.put(
													"strOldMCLRValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs2
																					.getString("mclr_spread")))));
									hshResult
											.put(
													"strOldCRPValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs2
																					.getString("mclr_crp_total")))));
									hshResult
											.put(
													"strOldBSPValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs2
																					.getString("mclr_bsp_total")))));
									hshResult.put("stroldfbilldate",Helper.correctNull(rs2.getString("FBILL_DATE")));
									hshResult.put("stroldfbillfreq",Helper.correctNull(rs2.getString("FBILL_FRQ")));
								}
							}

							if (rs2 != null)
								rs2.close();
							arrRow = new ArrayList();
							arrCol = new ArrayList();
							if (strAppstatus.equalsIgnoreCase("op"))
								strQuery = SQLParser
										.getSqlQuery("sel_facilitymclr^"
												+ strSpread1
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_sno"))
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no")));
							else
								strQuery = SQLParser
										.getSqlQuery("sel_facilitymclr_ps^"
												+ strSpread1
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_app_sno"))
												+ "^"
												+ strappno
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no"))
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_sno")));
							rs2 = DBUtils.executeQuery(strQuery);
							while (rs2.next()) {
								arrCol = new ArrayList();
								arrCol.add(Helper.correctNull(rs2
										.getString("mclr_caption")));
								if (!(Helper.correctNull(
										rs2.getString("mclr_option"))
										.equalsIgnoreCase("-") || Helper
										.correctNull(
												rs2.getString("mclr_option"))
										.equalsIgnoreCase(""))) {
									String strTemp = Helper.correctNull(rs2
											.getString("mclr_option"));
									String[] strArr = strTemp.split("-");

									if (strArr.length > 1) {
										if (rs3 != null)
											rs3.close();
										rs3 = DBUtils
												.executeLAPSQuery("sel_mclrspreadmaster^"
														+ strArr[0]);
										if (rs3.next()) {
											arrCol.add(Helper.correctNull(rs3
													.getString("mclr_desc")));
										} else {
											arrCol.add("");
										}
									} else {
										arrCol.add("");
									}
								} else {
									arrCol.add(" ");
								}

								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("mclr_spreadval")))));
								arrRow.add(arrCol);
							}
							if (arrRow != null && arrRow.size() > 0)
								hshResult.put("arrRowOLDCRP", arrRow);

							if (rs2 != null)
								rs2.close();
							arrRow = new ArrayList();
							arrCol = new ArrayList();
							if (strAppstatus.equalsIgnoreCase("op"))
								strQuery = SQLParser
										.getSqlQuery("sel_facilitymclr^"
												+ strSpread2
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_sno"))
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no")));
							else
								strQuery = SQLParser
										.getSqlQuery("sel_facilitymclr_ps^"
												+ strSpread2
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_app_sno"))
												+ "^"
												+ strappno
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_no"))
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_old_app_sno")));
							rs2 = DBUtils.executeQuery(strQuery);
							while (rs2.next()) {
								arrCol = new ArrayList();
								arrCol.add(Helper.correctNull(rs2
										.getString("mclr_caption")));
								if (!(Helper.correctNull(
										rs2.getString("mclr_option"))
										.equalsIgnoreCase("-") || Helper
										.correctNull(
												rs2.getString("mclr_option"))
										.equalsIgnoreCase(""))) {
									String strTemp = Helper.correctNull(rs2
											.getString("mclr_option"));
									String[] strArr = strTemp.split("-");

									if (strArr.length > 1) {
										if (rs3 != null)
											rs3.close();
										rs3 = DBUtils
												.executeLAPSQuery("sel_mclrspreadmaster^"
														+ strArr[0]);
										if (rs3.next()) {
											arrCol.add(Helper.correctNull(rs3
													.getString("mclr_desc")));
										} else {
											arrCol.add("");
										}
									} else {
										arrCol.add("");
									}
								} else {
									arrCol.add(" ");
								}

								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("mclr_spreadval")))));
								arrRow.add(arrCol);
							}
							if (arrRow != null && arrRow.size() > 0)
								hshResult.put("arrRowOLDBSP", arrRow);

							if (Helper.correctNull(
									rs1.getString("facility_govtsponschem"))
									.equalsIgnoreCase("1"))
								hshResult.put("strOldGovtScheme", "Yes");
							else if (Helper.correctNull(
									rs1.getString("facility_govtsponschem"))
									.equalsIgnoreCase("2"))
								hshResult.put("strOldGovtScheme", "No");

							hshResult
									.put(
											"strOldSudsidyAmt",
											nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs1
																			.getString("facility_subsidyamunt")))));
							hshResult.put("strOldAgency", Helper
									.correctNull(rs1
											.getString("facility_agency")));

							if (Helper.correctNull(
									rs1.getString("facility_propbanktype"))
									.equalsIgnoreCase("S"))
								hshResult.put("strOldBankArrangement", "Sole");
							else if (Helper.correctNull(
									rs1.getString("facility_propbanktype"))
									.equalsIgnoreCase("C"))
								hshResult.put("strOldBankArrangement",
										"Consortium");
							else if (Helper.correctNull(
									rs1.getString("facility_propbanktype"))
									.equalsIgnoreCase("M"))
								hshResult.put("strOldBankArrangement",
										"Multiple Banking");

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^11^"
											+ Helper
													.correctNull(rs1
															.getString("facility_schemetype")));
							if (rs3.next()) {
								hshResult.put("strOldSchemeType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^3^"
											+ Helper
													.correctNull(rs1
															.getString("facility_sponsagency")));
							if (rs3.next()) {
								hshResult.put("strOldSponserAgency", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^5^"
											+ Helper
													.correctNull(rs1
															.getString("facility_subsidytype")));
							if (rs3.next()) {
								hshResult.put("strOldSubsidyType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

							if (!Helper.correctNull(
									rs1.getString("FACILITY_LEADERBANK"))
									.equalsIgnoreCase("")) {
								if (rs3 != null) {
									rs3.close();
								}
								rs3 = DBUtils
										.executeLAPSQuery("getstaticdescription^"
												+ "147"
												+ "^"
												+ Helper
														.correctNull(rs1
																.getString("FACILITY_LEADERBANK")));
								if (rs3.next()) {
									hshResult
											.put(
													"strOldConsortiumName",
													Helper
															.correctNull(rs3
																	.getString("stat_data_desc1")));
								}
							}

						}
						if (rs1 != null)
							rs1.close();
						strSpread1 = "1";
						strSpread2 = "2";
						rs1 = DBUtils
								.executeLAPSQuery("select_facilityproposed^"
										+ strappno
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno")));
						if (rs1.next()) {
							hshResult.put("strAmount", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("facility_proposed")))));
							hshResult.put("strBaseInterest", nf.format(Double
									.parseDouble(Helper.correctDouble(rs1
											.getString("facility_baserate")))));
							hshResult.put("strSancAmount", Helper
									.correctNull(rs1
											.getString("facility_sancamt")));
							hshResult.put("strReqTerms", Helper.correctNull(rs1
									.getString("facility_months")));
							hshResult
									.put(
											"strInterest",
											nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs1
																			.getString("facility_sancinterest")))));
							hshResult.put("strDuedate", Helper.correctNull(rs1
									.getString("facility_duedate")));
							hshResult
									.put(
											"fac_mclr_migration_date",
											Helper
													.correctNull(rs1
															.getString("fac_mclr_migration_date")));
							strNewDate = Helper.correctNull(rs1
									.getString("facility_duedate"));
							strReviewedDate = Helper.correctNull(rs1
									.getString("facility_reviewdate"));
							hshResult.put("strIntDef", Helper.correctNull(rs1
									.getString("com_facintdef")));
							String strnewFACILITY_INTSUBTYPE = Helper
									.correctNull(rs1
											.getString("FACILITY_INTSUBTYPE"));
							if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("BR"))
								strnewFACILITY_INTSUBTYPE = "Base Rate";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("MCLR"))
								strnewFACILITY_INTSUBTYPE = "MCLR";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("BRLEC"))
								strnewFACILITY_INTSUBTYPE = "BR linked Export Credit";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("MCLEC"))
								strnewFACILITY_INTSUBTYPE = "MCLR linked Export Credit";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("BPLR"))
								strnewFACILITY_INTSUBTYPE = "BPLR";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("LIBOR"))
								strnewFACILITY_INTSUBTYPE = "LIBOR";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("EURIBOR"))
								strnewFACILITY_INTSUBTYPE = "EURIBOR";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("EUROLIBOR"))
								strnewFACILITY_INTSUBTYPE = "EUROLIBOR";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("COMMI"))
								strnewFACILITY_INTSUBTYPE = "Commission";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("NOTAP"))
								strnewFACILITY_INTSUBTYPE = "Not Applicable";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("SMTB"))
								strnewFACILITY_INTSUBTYPE = "6 MONTHS TREASURY BILL";
							else if (strnewFACILITY_INTSUBTYPE
									.equalsIgnoreCase("TYGS"))
								strnewFACILITY_INTSUBTYPE = "10 YEAR GOVT SECURITY";

							hshResult.put("strnewFACILITY_INTSUBTYPE",
									strnewFACILITY_INTSUBTYPE);

							if (Helper.correctNull(
									rs1.getString("com_facintdef"))
									.equalsIgnoreCase("S")
									|| Helper.correctNull(
											rs1.getString("com_facintdef"))
											.equalsIgnoreCase("M")) {
								if (rs2 != null)
									rs2.close();

								rs2 = DBUtils
										.executeLAPSQuery("sel_facility_mclrspread^"
												+ Helper
														.correctNull(rs
																.getString("ps_app_sno"))
												+ "^" + strappno);
								if (rs2.next()) {

									String strTemp = Helper.correctNull(rs2
											.getString("facility_mclrtype"));
									if (!strTemp.equalsIgnoreCase("")) {
										String[] strArr = strTemp.split("@");
										if (strArr.length > 1) {
											if (rs3 != null)
												rs3.close();
											rs3 = DBUtils
													.executeLAPSQuery("selcbsiddatadesc^34^"
															+ strArr[0]);
											if (rs3.next()) {
												hshResult
														.put(
																"strMCLRtype",
																Helper
																		.correctNull(rs3
																				.getString("cbs_static_data_desc")));
												hshResult
														.put(
																"strMCLRCode",
																Helper
																		.correctNull(rs3
																				.getString("CBS_STATIC_DATA_PASSING_CODE")));
												strSpread1 = Helper
														.correctNull(rs3
																.getString("cbs_static_sanc_refno"));
												strSpread2 = Helper
														.correctNull(rs3
																.getString("cbs_static_cgtmse"));
											}
										}
									}

									hshResult
											.put(
													"strMCLRValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs2
																					.getString("mclr_spread")))));
									hshResult
											.put(
													"strCRPValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs2
																					.getString("mclr_crp_total")))));
									hshResult
											.put(
													"strBSPValue",
													nf
															.format(Double
																	.parseDouble(Helper
																			.correctDouble(rs2
																					.getString("mclr_bsp_total")))));
									
									hshResult.put("strfbilldate",Helper.correctNull(rs2.getString("FBILL_DATE")));
									hshResult.put("strfbillfreq",Helper.correctNull(rs2.getString("FBILL_FRQ")));
								}

								if (rs2 != null)
									rs2.close();
								arrRow = new ArrayList();
								arrCol = new ArrayList();
								strQuery = SQLParser
										.getSqlQuery("sel_facilitymclr^"
												+ strSpread1
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_app_sno"))
												+ "^" + strappno);
								rs2 = DBUtils.executeQuery(strQuery);
								while (rs2.next()) {
									arrCol = new ArrayList();
									arrCol.add(Helper.correctNull(rs2
											.getString("mclr_caption")));
									if (!(Helper.correctNull(
											rs2.getString("mclr_option"))
											.equalsIgnoreCase("-") || Helper
											.correctNull(
													rs2
															.getString("mclr_option"))
											.equalsIgnoreCase(""))) {
										String strTemp = Helper.correctNull(rs2
												.getString("mclr_option"));
										String[] strArr = strTemp.split("-");

										if (strArr.length > 1) {
											if (rs3 != null)
												rs3.close();
											rs3 = DBUtils
													.executeLAPSQuery("sel_mclrspreadmaster^"
															+ strArr[0]);
											if (rs3.next()) {
												arrCol
														.add(Helper
																.correctNull(rs3
																		.getString("mclr_desc")));
											} else {
												arrCol.add("");
											}
										} else {
											arrCol.add("");
										}
									} else {
										arrCol.add(" ");
									}

									arrCol
											.add(nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs2
																			.getString("mclr_spreadval")))));
									arrRow.add(arrCol);
								}
								if (arrRow != null && arrRow.size() > 0)
									hshResult.put("arrRowCRP", arrRow);

								if (rs2 != null)
									rs2.close();
								arrRow = new ArrayList();
								arrCol = new ArrayList();
								strQuery = SQLParser
										.getSqlQuery("sel_facilitymclr^"
												+ strSpread2
												+ "^"
												+ Helper
														.correctNull(rs
																.getString("ps_app_sno"))
												+ "^" + strappno);
								rs2 = DBUtils.executeQuery(strQuery);
								while (rs2.next()) {
									arrCol = new ArrayList();
									arrCol.add(Helper.correctNull(rs2
											.getString("mclr_caption")));
									if (!(Helper.correctNull(
											rs2.getString("mclr_option"))
											.equalsIgnoreCase("-") || Helper
											.correctNull(
													rs2
															.getString("mclr_option"))
											.equalsIgnoreCase(""))) {
										String strTemp = Helper.correctNull(rs2
												.getString("mclr_option"));
										String[] strArr = strTemp.split("-");

										if (strArr.length > 1) {
											if (rs3 != null)
												rs3.close();
											rs3 = DBUtils
													.executeLAPSQuery("sel_mclrspreadmaster^"
															+ strArr[0]);
											if (rs3.next()) {
												arrCol
														.add(Helper
																.correctNull(rs3
																		.getString("mclr_desc")));
											} else {
												arrCol.add("");
											}
										} else {
											arrCol.add("");
										}
									} else {
										arrCol.add(" ");
									}

									arrCol
											.add(nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs2
																			.getString("mclr_spreadval")))));
									arrRow.add(arrCol);
								}
								if (arrRow != null && arrRow.size() > 0)
									hshResult.put("arrRowBSP", arrRow);
							}

							if (Helper.correctNull(
									rs1.getString("facility_govtsponschem"))
									.equalsIgnoreCase("1"))
								hshResult.put("strGovtScheme", "Yes");
							else if (Helper.correctNull(
									rs1.getString("facility_govtsponschem"))
									.equalsIgnoreCase("2"))
								hshResult.put("strGovtScheme", "No");

							hshResult
									.put(
											"strSudsidyAmt",
											nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs1
																			.getString("facility_subsidyamunt")))));
							hshResult.put("strAgency", Helper.correctNull(rs1
									.getString("facility_agency")));

							if (Helper.correctNull(
									rs1.getString("facility_propbanktype"))
									.equalsIgnoreCase("S"))
								hshResult.put("strBankArrangement", "Sole");
							else if (Helper.correctNull(
									rs1.getString("facility_propbanktype"))
									.equalsIgnoreCase("C"))
								hshResult.put("strBankArrangement",
										"Consortium");
							else if (Helper.correctNull(
									rs1.getString("facility_propbanktype"))
									.equalsIgnoreCase("M"))
								hshResult.put("strBankArrangement",
										"Multiple Banking");

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^11^"
											+ Helper
													.correctNull(rs1
															.getString("facility_schemetype")));
							if (rs3.next()) {
								hshResult.put("strSchemeType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^3^"
											+ Helper
													.correctNull(rs1
															.getString("facility_sponsagency")));
							if (rs3.next()) {
								hshResult.put("strSponserAgency", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}
							if (rs3 != null)
								rs3.close();
							rs3 = DBUtils
									.executeLAPSQuery("selstatdatabyiddesc^5^"
											+ Helper
													.correctNull(rs1
															.getString("facility_subsidytype")));
							if (rs3.next()) {
								hshResult.put("strSubsidyType", Helper
										.correctNull(rs3
												.getString("stat_data_desc1")));
							}

							if (!Helper.correctNull(
									rs1.getString("FACILITY_LEADERBANK"))
									.equalsIgnoreCase("")) {
								if (rs3 != null) {
									rs3.close();
								}
								rs3 = DBUtils
										.executeLAPSQuery("getstaticdescription^"
												+ "147"
												+ "^"
												+ Helper
														.correctNull(rs1
																.getString("FACILITY_LEADERBANK")));
								if (rs3.next()) {
									hshResult
											.put(
													"strConsortiumName",
													Helper
															.correctNull(rs3
																	.getString("stat_data_desc1")));
								}
							}

						}

					}

					if (strModifiedTerms.contains("DATEEX")
							|| strModifiedTerms.contains("REODWC")) {
						strOldNo = Helper.correctNull(rs
								.getString("ps_old_app_no"));
						arrRow = new ArrayList();
						rs1 = DBUtils.executeLAPSQuery("selectps_duedate^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_sno"))
								+ "^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_no")));
						while (rs1.next()) {
							arrCol = new ArrayList();
							arrCol.add(strOldNo);
							if (!strModifiedTerms.contains("REODWC")) {
								// arrCol.add(Helper.correctNull(rs1.getString("facilityduedate")));
								strREODWCDueDate = Helper.correctNull(rs1
										.getString("facilityduedate"));
							} else {
								if (Helper.correctNull(
										rs1.getString("facility_reviewdate"))
										.equalsIgnoreCase("")) {
									strREODWCDueDate = Helper.correctNull(rs1
											.getString("facilityduedate"));
								}
								// arrCol.add(strREODWCDueDate);
							}
							arrCol.add(strREODWCDueDate);
							arrCol.add(Helper.correctNull(rs1
									.getString("facility_reviewdate")));
							strOldNo = Helper.correctNull(rs1
									.getString("facility_proposedappno"));
							arrRow.add(arrCol);
							if (strOldNo.equalsIgnoreCase(strappno))
								break;
						}// if(arrRow.size()<=0){
						/*
						 * if(strAppstatus.equalsIgnoreCase("op")) { arrCol =
						 * new ArrayList(); arrCol.add(strOldNo);
						 * arrCol.add(strOldDate);
						 * arrCol.add(strOldReviewedDate); arrRow.add(arrCol); }
						 */
						arrCol = new ArrayList();
						arrCol.add(strappno);
						if (!strModifiedTerms.contains("REODWC")) {
							arrCol.add(strNewDate);
						} else {
							arrCol.add(strREODWCDueDate);
						}
						arrCol.add(strReviewedDate);
						arrRow.add(arrCol);

						hshResult.put("arrDATEEX", arrRow);
					}
				}
				if (strModifiedTerms.contains("MRS")) {
					if (rs1 != null)
						rs1.close();
					arrRow = new ArrayList();
					if (strAppstatus.equalsIgnoreCase("op"))
						rs1 = DBUtils.executeLAPSQuery("sel_tl_repayschedule^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_no"))
								+ "^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_sno")));
					else
						rs1 = DBUtils
								.executeLAPSQuery("sel_tl_repayschedule_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno")) + "^"
										+ strappno);
					while (rs1.next()) {
						hshResult.put("strMRSFlag", "Y");
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull(rs1
								.getString("TL_FEQUENCY")));
						arrCol.add(Helper.correctNull(rs1
								.getString("TL_NOOFINST")));
						arrCol.add(nf.format(Double.parseDouble(Helper
								.correctDouble(rs1.getString("TL_INSTAMT")))));
						arrCol.add(nf.format(Double.parseDouble(Helper
								.correctDouble(rs1.getString("TL_TOTALAMT")))));
						arrRow.add(arrCol);
					}

					hshResult.put("arrMRSExisting", arrRow);
					if (rs1 != null)
						rs1.close();

					arrRow = new ArrayList();
					rs1 = DBUtils.executeLAPSQuery("sel_tl_repayschedule^"
							+ strappno + "^"
							+ Helper.correctNull(rs.getString("ps_app_sno")));
					while (rs1.next()) {
						hshResult.put("strMRSFlag", "Y");
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull(rs1
								.getString("TL_FEQUENCY")));
						arrCol.add(Helper.correctNull(rs1
								.getString("TL_NOOFINST")));
						arrCol.add(nf.format(Double.parseDouble(Helper
								.correctDouble(rs1.getString("TL_INSTAMT")))));
						arrCol.add(nf.format(Double.parseDouble(Helper
								.correctDouble(rs1.getString("TL_TOTALAMT")))));
						arrRow.add(arrCol);
					}
					hshResult.put("arrMRSProposed", arrRow);
				}
				if (strModifiedTerms.contains("DCCO")
						|| strModifiedTerms.contains("CHDCCO")) {
					strOldDate = "";
					strNewDate = "";
					strOldNo = "";
					if (rs1 != null)
						rs1.close();
					if (strAppstatus.equalsIgnoreCase("op"))
						rs1 = DBUtils
								.executeLAPSQuery("sel_management^BreifDetaisTL^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no")));
					else
						rs1 = DBUtils
								.executeLAPSQuery("sel_management_ps^BreifDetaisTL^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno"))
										+ "^"
										+ strappno);
					if (rs1.next()) {
						// hshResult.put("strDCCOOld",
						// Helper.correctNull(rs1.getString("com_date")));
						hshResult.put("strDACCOOld", Helper.correctNull(rs1
								.getString("com_daccodate")));
						strOldDate = Helper.correctNull(rs1
								.getString("com_date"));
					}

					if (rs1 != null)
						rs1.close();

					rs1 = DBUtils
							.executeLAPSQuery("sel_management^BreifDetaisTL^"
									+ Helper.correctNull(rs
											.getString("ps_app_sno")) + "^"
									+ strappno);
					if (rs1.next()) {
						// hshResult.put("strDCCONew",
						// Helper.correctNull(rs1.getString("com_date")));
						hshResult.put("strDACCONew", Helper.correctNull(rs1
								.getString("com_daccodate")));
						strNewDate = Helper.correctNull(rs1
								.getString("com_date"));
					}

					strOldNo = Helper
							.correctNull(rs.getString("ps_old_app_no"));
					arrRow = new ArrayList();
					rs1 = DBUtils
							.executeLAPSQuery("selectps_dccodate^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_sno"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no")));
					while (rs1.next()) {
						arrCol = new ArrayList();
						arrCol.add(strOldNo);
						arrCol
								.add(Helper.correctNull(rs1
										.getString("comdate")));
						strOldNo = Helper.correctNull(rs1
								.getString("com_proposedappno"));
						arrRow.add(arrCol);
						if (strOldNo.equalsIgnoreCase(strappno))
							break;
					}
					if (strAppstatus.equalsIgnoreCase("op")) {
						arrCol = new ArrayList();
						arrCol.add(strOldNo);
						arrCol.add(strOldDate);
						arrRow.add(arrCol);
					}

					arrCol = new ArrayList();
					arrCol.add(strappno);
					arrCol.add(strNewDate);
					arrRow.add(arrCol);

					hshResult.put("arrDcco", arrRow);

					if (rs1 != null)
						rs1.close();
					if (strAppstatus.equalsIgnoreCase("op"))
						rs1 = DBUtils
								.executeLAPSQuery("select_facilityproposed^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno")));
					else
						rs1 = DBUtils
								.executeLAPSQuery("select_facilityproposed_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno")) + "^"
										+ strappno);
					if (rs1.next()) {
						hshResult.put("strOldHoliday", Helper.correctInt(rs1
								.getString("FACILITY_HOLIDAYPERIOD")));
						hshResult.put("strOldTenor", Helper.correctInt(rs1
								.getString("FACILITY_MONTHS")));
					}
					if (rs1 != null)
						rs1.close();

					rs1 = DBUtils.executeLAPSQuery("select_facilityproposed^"
							+ strappno + "^"
							+ Helper.correctNull(rs.getString("ps_app_sno")));
					if (rs1.next()) {
						hshResult.put("strHoliday", Helper.correctInt(rs1
								.getString("FACILITY_HOLIDAYPERIOD")));
						hshResult.put("strTenor", Helper.correctInt(rs1
								.getString("FACILITY_MONTHS")));
					}
					if (rs1 != null)
						rs1.close();

				}
				if (strModifiedTerms.contains("CHBRANCH")
						|| strModifiedTerms.contains("CHDPOWER")
						|| strModifiedTerms.contains("CHSCHEMECODE")) {
					if (rs1 != null)
						rs1.close();
					if (strAppstatus.equalsIgnoreCase("op"))
						rs1 = DBUtils
								.executeLAPSQuery("selcbsfacilityavailingbrancg^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno")));
					else
						rs1 = DBUtils
								.executeLAPSQuery("selcbsfacilityavailingbrancg_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno"))
										+ "^"
										+ strappno);
					if (rs1.next()) {
						hshResult.put("strFacAvailBranchOld", Helper
								.correctNull(rs1.getString("org_name")));
						hshResult.put("strFacAvailBranchCodeOld", Helper
								.correctNull(rs1.getString("org_scode")));

						hshResult.put("strDrawingPowerIndicatorOld", Helper
								.correctNull(rs1
										.getString("draw_power_indicator")));
						hshResult.put("strDrawingPowerAmountOld", Helper
								.correctNull(rs1.getString("drawing_pwr")));

						hshResult.put("strSchemeCodeOld", Helper
								.correctNull(rs1
										.getString("facility_schemecode")));
						hshResult.put("strGLSubHeadCodeOld", Helper
								.correctNull(rs1
										.getString("facility_glsubheadcode")));

					}

					if (rs1 != null)
						rs1.close();

					rs1 = DBUtils
							.executeLAPSQuery("selcbsfacilityavailingbrancg^"
									+ strappno
									+ "^"
									+ Helper.correctNull(rs
											.getString("ps_app_sno")));
					if (rs1.next()) {
						hshResult.put("strFacAvailBranchNew", Helper
								.correctNull(rs1.getString("org_name")));
						hshResult.put("strFacAvailBranchCodeNew", Helper
								.correctNull(rs1.getString("org_scode")));

						hshResult.put("strDrawingPowerIndicatorNew", Helper
								.correctNull(rs1
										.getString("draw_power_indicator")));
						hshResult.put("strDrawingPowerAmountNew", Helper
								.correctNull(rs1.getString("drawing_pwr")));

						hshResult.put("strSchemeCodeNew", Helper
								.correctNull(rs1
										.getString("facility_schemecode")));
						hshResult.put("strGLSubHeadCodeNew", Helper
								.correctNull(rs1
										.getString("facility_glsubheadcode")));
					}
				}
				if (strModifiedTerms.contains("MIS@")) {
					String strPur[] = new String[2];
					String strBankScheme = "", strBankSchemeDesc = "", strguarantee = "";
					String strPurpose = "", strBsrCode = "", strBsr1Code = "", strMainAct = "", strSubAct = "";

					if (rs1 != null)
						rs1.close();
					if (sessionModuleType.equalsIgnoreCase("RET")) {
						strQuery = SQLParser.getSqlQuery("sel_prdloantype^"
								+ strappno);
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strBankScheme = Helper.correctNull(rs1
									.getString("prd_bankscheme"));
						}
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_facility_bankscheme^"
										+ strappno
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno")));
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strBankScheme = Helper.correctNull(rs1
									.getString("com_bankscheme"));

						}
					}
					if (rs1 != null) {
						rs1.close();
					}

					strQuery = SQLParser.getSqlQuery("sel_misstaticdatadesc^1^"
							+ strBankScheme);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strBankSchemeDesc = Helper.correctNull(rs1
								.getString("mis_static_data_desc"));
					}
					hshResult.put("strBankSchemeDesc", strBankSchemeDesc);

					if (rs1 != null)
						rs1.close();
					strQuery = SQLParser.getSqlQuery("sel_misappdetails^"
							+ strappno + "^"
							+ Helper.correctNull(rs.getString("ps_app_sno")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strguarantee = Helper.correctNull((String) rs1
								.getString("app_guarantee"));
						strPurpose = Helper.correctNull((String) rs1
								.getString("app_purpose"));
						strBsrCode = Helper.correctNull((String) rs1
								.getString("app_bsrcode"));
						strBsr1Code = Helper.correctNull((String) rs1
								.getString("app_bsr1code"));
						strMainAct = Helper.correctNull((String) rs1
								.getString("app_mainactivity"));
						strSubAct = Helper.correctNull((String) rs1
								.getString("app_subactivity"));
						hshResult
								.put("app_activitycode", Helper.correctNull(rs1
										.getString("app_activitycode")));

					}
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^" + "17"
							+ "^" + strguarantee);
					if (rs1.next()) {
						hshResult.put("app_Guarantee_Covered", Helper
								.correctNull((String) rs1
										.getString("mis_static_data_desc")));
					}
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
							+ strMainAct + "^" + strSubAct);
					if (rs1.next()) {
						hshResult.put("mis_subactdesc", Helper
								.correctNull((String) rs1
										.getString("mis_subactdesc")));
					}

					if (rs1 != null) {
						rs1.close();
					}

					if (rs2 != null)
						rs2.close();
					rs2 = DBUtils.executeLAPSQuery("sel_misappclassification^"
							+ strappno + "^"
							+ Helper.correctNull(rs.getString("ps_app_sno")));
					if (rs2.next()) {
						String strSector = Helper.correctNull((String) rs2
								.getString("app_sector"));
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "22"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("APP_INFRASTRCODE")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_infrastructure",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_infrastructure", "Nil");
						}

						if (strSector.equalsIgnoreCase("01")
								|| strSector.equalsIgnoreCase("1")) {
							hshResult.put("mis_sctortloan", "Priority Sector");
						} else if (strSector.equalsIgnoreCase("02")
								|| strSector.equalsIgnoreCase("2")) {
							hshResult.put("mis_sctortloan",
									"Non Priority Sector");
						} else {
							hshResult.put("mis_sctortloan", "");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "7"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_subsector")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_subscetroloan",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
									+ "8"
									+ "^"
									+ Helper.correctNull((String) rs2
											.getString("app_subsector")));
							if (rs1.next()) {
								hshResult
										.put(
												"mis_subscetroloan",
												Helper
														.correctNull((String) rs1
																.getString("mis_static_data_desc")));
							}
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "9"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_weakersec")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_weaksection",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_weaksection", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "11"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_sensitivesector")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_sensitivitysec",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_sensitivitysec", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "12"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_agriculture")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_indcattyepagr",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_indcattyepagr", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("sel_activity_codedetails^"
										+ "2" + "^" + strMainAct);
						if (rs1.next()) {
							hshResult
									.put(
											"mis_mainactivitydesc",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_mainactivitydesc", "Nil");
						}

						if (rs1 != null) {
							rs1.close();
						}

						if (!strPurpose.equalsIgnoreCase("")) {
							strPur = strPurpose.split("_");
							rs1 = DBUtils
									.executeLAPSQuery("sel_purpose_detailsmis^"
											+ "3" + "^" + strPur[0] + "^"
											+ strPur[1]);
							if (rs1.next()) {
								hshResult
										.put(
												"mis_purpose",
												Helper
														.correctNull((String) rs1
																.getString("mis_static_data_desc")));
							}
						} else {
							hshResult.put("mis_purpose", "Nil");
						}

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_BSRNameforcode^"
								+ strBsrCode);
						if (rs1.next()) {
							hshResult.put("mis_bsrcodedesc", Helper
									.correctNull((String) rs1
											.getString("ind_name")));
						} else {
							hshResult.put("mis_bsrcodedesc", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("sel_activity_codedetails^"
										+ "6" + "^" + strBsr1Code);
						if (rs1.next()) {
							hshResult
									.put(
											"mis_bsr1codedesc",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_bsr1codedesc", "Nil");
						}
						if (rs1 != null)
							rs1.close();
					}
					strQuery = SQLParser.getSqlQuery("sel_misappdisplayscreen^"
							+ strappno + "^"
							+ Helper.correctNull(rs.getString("ps_app_sno")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {

						hshResult
								.put("APP_SALETURNOVER", Helper.correctNull(rs1
										.getString("APP_SALETURNOVER")));
						hshResult.put("APP_SALESTURNOVER_DATE", Helper
								.correctNull(rs1
										.getString("APP_SALESTURNOVER_DATE")));
						hshResult.put("APP_INVESTMENT_DATE", Helper
								.correctNull((String) rs1
										.getString("APP_INVESTMENT_DATE")));
						rs2 = DBUtils
								.executeLAPSQuery("selmiscust^243^"
										+ Helper
												.correctNull((String) rs1
														.getString("APP_CRITERIA_SALESTURNOVER")));
						if (rs2.next()) {
							hshResult.put("APP_CRITERIA_SALESTURNOVER", Helper
									.correctNull(rs2
											.getString("stat_data_desc1")));

						}
						if (rs2 != null)
							rs2.close();

						rs2 = DBUtils.executeLAPSQuery("selmiscust^248^"
								+ Helper.correctNull((String) rs1
										.getString("APP_CRITERIA_INVESTMENT")));
						if (rs2.next()) {
							hshResult.put("APP_CRITERIA_INVESTMENT", Helper
									.correctNull(rs2
											.getString("stat_data_desc1")));

						}
						hshResult.put("app_plantval", Helper.correctNull(rs1
								.getString("app_plantval")));
						hshResult.put("app_indname", Helper.correctNull(rs1
								.getString("app_indname")));

					}
					if (sessionModuleType.equalsIgnoreCase("RET")) {
						strQuery = SQLParser.getSqlQuery("sel_prdloantype^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_no")));
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strBankScheme = Helper.correctNull(rs1
									.getString("prd_bankscheme"));
						}
					} else {
						strQuery = SQLParser
								.getSqlQuery("sel_facility_bankscheme^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno")));
						rs1 = DBUtils.executeQuery(strQuery);
						if (rs1.next()) {
							strBankScheme = Helper.correctNull((String) rs1
									.getString("com_bankscheme"));

						}
					}
					if (rs1 != null) {
						rs1.close();
					}

					strQuery = SQLParser.getSqlQuery("sel_misstaticdatadesc^1^"
							+ strBankScheme);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strBankSchemeDesc = Helper.correctNull(rs1
								.getString("mis_static_data_desc"));
					}
					hshResult.put("strBankSchemeDescold", strBankSchemeDesc);

					if (rs1 != null)
						rs1.close();
					if (strAppstatus.equalsIgnoreCase("op"))
						strQuery = SQLParser.getSqlQuery("sel_misappdetails^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_no"))
								+ "^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_sno")));
					else
						strQuery = SQLParser
								.getSqlQuery("sel_misappdetails_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno")) + "^"
										+ strappno);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						strguarantee = Helper.correctNull((String) rs1
								.getString("app_guarantee"));
						strPurpose = Helper.correctNull((String) rs1
								.getString("app_purpose"));
						strBsrCode = Helper.correctNull((String) rs1
								.getString("app_bsrcode"));
						strBsr1Code = Helper.correctNull((String) rs1
								.getString("app_bsr1code"));
						strMainAct = Helper.correctNull((String) rs1
								.getString("app_mainactivity"));
						hshResult
								.put("app_activitycodeold", Helper
										.correctNull(rs1
												.getString("app_activitycode")));
						strSubAct = Helper.correctNull((String) rs1
								.getString("app_subactivity"));

					}
					if (rs1 != null)
						rs1.close();
					rs1 = DBUtils.executeLAPSQuery("sel_guarantee^" + "17"
							+ "^" + strguarantee);
					if (rs1.next()) {
						hshResult.put("app_GuaranteeCoveredold", Helper
								.correctNull((String) rs1
										.getString("mis_static_data_desc")));
					}

					rs1 = DBUtils.executeLAPSQuery("sel_MISSubActivityDesc^"
							+ strMainAct + "^" + strSubAct);
					if (rs1.next()) {
						hshResult.put("mis_subactdescold", Helper
								.correctNull((String) rs1
										.getString("mis_subactdesc")));
					}

					if (rs1 != null) {
						rs1.close();
					}

					if (strAppstatus.equalsIgnoreCase("op"))
						rs2 = DBUtils
								.executeLAPSQuery("sel_misappclassification^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno")));
					else
						rs2 = DBUtils
								.executeLAPSQuery("sel_misappclassification_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno"))
										+ "^"
										+ strappno);
					if (rs2.next()) {
						String strSector = Helper.correctNull((String) rs2
								.getString("app_sector"));
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "22"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("APP_INFRASTRCODE")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_infrastructureold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_infrastructureold", "Nil");
						}
						if (strSector.equalsIgnoreCase("01")
								|| strSector.equalsIgnoreCase("1")) {
							hshResult.put("mis_sctortloanold",
									"Priority Sector");
						} else if (strSector.equalsIgnoreCase("02")
								|| strSector.equalsIgnoreCase("2")) {
							hshResult.put("mis_sctortloanold",
									"Non Priority Sector");
						} else {
							hshResult.put("mis_sctortloanold", "");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "7"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_subsector")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_subscetroloanold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							if (rs1 != null) {
								rs1.close();
							}
							rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
									+ "8"
									+ "^"
									+ Helper.correctNull((String) rs2
											.getString("app_subsector")));
							if (rs1.next()) {
								hshResult
										.put(
												"mis_subscetroloanold",
												Helper
														.correctNull((String) rs1
																.getString("mis_static_data_desc")));
							}
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "9"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_weakersec")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_weaksectionold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_weaksectionold", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "11"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_sensitivesector")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_sensitivitysecold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_sensitivitysecold", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_guarantee^"
								+ "12"
								+ "^"
								+ Helper.correctNull((String) rs2
										.getString("app_agriculture")));
						if (rs1.next()) {
							hshResult
									.put(
											"mis_indcattyepagrold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_indcattyepagrold", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("sel_activity_codedetails^"
										+ "2" + "^" + strMainAct);
						if (rs1.next()) {
							hshResult
									.put(
											"mis_mainactivitydescold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_mainactivitydescold", "Nil");
						}

						if (rs1 != null) {
							rs1.close();
						}

						if (!strPurpose.equalsIgnoreCase("")) {
							strPur = strPurpose.split("_");
							rs1 = DBUtils
									.executeLAPSQuery("sel_purpose_detailsmis^"
											+ "3" + "^" + strPur[0] + "^"
											+ strPur[1]);
							if (rs1.next()) {
								hshResult
										.put(
												"mis_purposeold",
												Helper
														.correctNull((String) rs1
																.getString("mis_static_data_desc")));
							}
						} else {
							hshResult.put("mis_purposeold", "Nil");
						}

						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils.executeLAPSQuery("sel_BSRNameforcode^"
								+ strBsrCode);
						if (rs1.next()) {
							hshResult.put("mis_bsrcodedescold", Helper
									.correctNull((String) rs1
											.getString("ind_name")));
						} else {
							hshResult.put("mis_bsrcodedescold", "Nil");
						}
						if (rs1 != null) {
							rs1.close();
						}
						rs1 = DBUtils
								.executeLAPSQuery("sel_activity_codedetails^"
										+ "6" + "^" + strBsr1Code);
						if (rs1.next()) {
							hshResult
									.put(
											"mis_bsr1codedescold",
											Helper
													.correctNull((String) rs1
															.getString("mis_static_data_desc")));
						} else {
							hshResult.put("mis_bsr1codedescold", "Nil");
						}
					}
					if (rs2 != null) {
						rs2.close();
					}
					if (rs1 != null) {
						rs1.close();
					}
					if (strAppstatus.equalsIgnoreCase("op"))
						rs1 = DBUtils
								.executeLAPSQuery("sel_misappdisplayscreen^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno")));
					else
						rs1 = DBUtils
								.executeLAPSQuery("sel_misappdisplayscreen_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_sno"))
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno")) + "^"
										+ strappno);
					if (rs1.next()) {
						hshResult
								.put("APP_SALETURNOVER_OLD", Helper
										.correctNull(rs1
												.getString("APP_SALETURNOVER")));
						hshResult.put("APP_SALESTURNOVER_DATE_OLD", Helper
								.correctNull(rs1
										.getString("APP_SALESTURNOVER_DATE")));
						// hshResult.put("APP_CRITERIA_SALESTURNOVER",Helper.correctNull((String)rs1.getString("APP_CRITERIA_SALESTURNOVER")));
						hshResult.put("APP_INVESTMENT_DATE_OLD", Helper
								.correctNull((String) rs1
										.getString("APP_INVESTMENT_DATE")));
						rs2 = DBUtils
								.executeLAPSQuery("selmiscust^243^"
										+ Helper
												.correctNull((String) rs1
														.getString("APP_CRITERIA_SALESTURNOVER")));
						if (rs2.next()) {
							hshResult.put("APP_CRITERIA_SALESTURNOVER_OLD",
									Helper.correctNull(rs2
											.getString("stat_data_desc1")));

						}
						if (rs2 != null)
							rs2.close();

						rs2 = DBUtils.executeLAPSQuery("selmiscust^248^"
								+ Helper.correctNull((String) rs1
										.getString("APP_CRITERIA_INVESTMENT")));
						if (rs2.next()) {
							hshResult.put("APP_CRITERIA_INVESTMENT_OLD", Helper
									.correctNull(rs2
											.getString("stat_data_desc1")));

						}
						hshResult.put("app_plantval_old", Helper
								.correctNull(rs1.getString("app_plantval")));
						hshResult.put("app_indname_old", Helper.correctNull(rs1
								.getString("app_indname")));
					}
				}
				if (strModifiedTerms.contains("SEC")
						|| strModifiedTerms.contains("MODSEC")
						|| strModifiedTerms.contains("MARGIN")) {
					ArrayList arrOutRow = new ArrayList();
					ArrayList arrOutCol = new ArrayList();
					ArrayList arrOutCol1 = new ArrayList();
					ArrayList arrOutRow1 = new ArrayList();
					int k = 0;
					if (rs1 != null) {
						rs1.close();
					}
					rs1 = DBUtils
							.executeLAPSQuery("secExisFacilityDetailsView_facwise^"
									+ strappno + "^" + "P^A" + "^" + strFacSno);
					while (rs1.next()) {
						arrOutCol = new ArrayList();
						if (correctNull(rs1.getString("app_sec_securitytype"))
								.equalsIgnoreCase("1")) {
							if (k == 0) {
								k++;
								arrOutCol.add(strPrdDesc);// 0
								arrOutCol.add("");// 1
								arrOutCol.add(""); // 2
								arrOutCol.add("");// 3
								arrOutCol.add("");// 4
								arrOutRow.add(arrOutCol);
							}
							arrOutCol = new ArrayList();
							arrOutCol.add(correctNull(Helper.CLOBToString(rs1
									.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
							arrOutCol.add(correctNull(rs1
									.getString("app_sec_securityvalue"))); // 2
							arrOutCol.add(correctNull(rs1
									.getString("app_sec_margin"))); // 3
							arrOutCol.add(correctNull(rs1
									.getString("cus_sec_valuation_date")));// 4

							arrOutRow.add(arrOutCol);
						}
						if (correctNull(rs1.getString("app_sec_securitytype"))
								.equalsIgnoreCase("2")) {
							arrOutCol = new ArrayList();
							arrOutCol.add(correctNull(Helper.CLOBToString(rs1
									.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
							arrOutCol.add(correctNull(rs1
									.getString("app_sec_securityvalue"))); // 2
							arrOutCol.add(correctNull(rs1
									.getString("cus_sec_valuation_date")));// 3
							arrOutRow1.add(arrOutCol);
						}
					}
					hshResult.put("arrPropSecPrime", arrOutRow);
					hshResult.put("arrPropSecCollateral", arrOutRow1);

					arrOutRow = new ArrayList();
					arrOutCol = new ArrayList();
					arrOutCol1 = new ArrayList();
					arrOutRow1 = new ArrayList();
					k = 0;
					if (rs1 != null) {
						rs1.close();
					}
					if (strAppstatus.equalsIgnoreCase("op"))
						rs1 = DBUtils
								.executeLAPSQuery("secExisFacilityDetailsView_facwiseattached^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^" + "P" + "^" + strOldFacSno);
					else
						rs1 = DBUtils
								.executeLAPSQuery("secExisFacilityDetailsView_facwiseattached_ps^"
										+ Helper.correctNull(rs
												.getString("ps_old_app_no"))
										+ "^"
										+ "P"
										+ "^"
										+ strOldFacSno
										+ "^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno"))
										+ "^"
										+ strappno);
					while (rs1.next()) {
						arrOutCol = new ArrayList();
						if (correctNull(rs1.getString("app_sec_securitytype"))
								.equalsIgnoreCase("1")) {
							if (k == 0) {
								k++;
								arrOutCol.add(strOldPrdDesc);// 0
								arrOutCol.add("");// 1
								arrOutCol.add(""); // 2
								arrOutCol.add("");// 3
								arrOutCol.add("");// 4
								arrOutRow.add(arrOutCol);
							}
							arrOutCol = new ArrayList();
							arrOutCol.add(correctNull(Helper.CLOBToString(rs1
									.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
							arrOutCol.add(correctNull(rs1
									.getString("app_sec_securityvalue"))); // 2
							arrOutCol.add(correctNull(rs1
									.getString("app_sec_margin"))); // 3
							arrOutCol.add(correctNull(rs1
									.getString("cus_sec_valuation_date")));// 4

							arrOutRow.add(arrOutCol);
						}
						if (correctNull(rs1.getString("app_sec_securitytype"))
								.equalsIgnoreCase("2")) {
							arrOutCol = new ArrayList();
							arrOutCol.add(correctNull(Helper.CLOBToString(rs1
									.getClob("CUS_SEC_SECURITY_DESCRIPTION"))));// 1
							arrOutCol.add(correctNull(rs1
									.getString("app_sec_securityvalue"))); // 2
							arrOutCol.add(correctNull(rs1
									.getString("cus_sec_valuation_date")));// 3
							arrOutRow1.add(arrOutCol);
						}
					}
					hshResult.put("arrExisSecPrime", arrOutRow);
					hshResult.put("arrExisSecCollateral", arrOutRow1);
				}
				if (strModifiedTerms.contains("SUBLIMIT")
						|| strModifiedTerms.contains("LAD")) {
					arrRow = new ArrayList();
					rs1 = DBUtils.executeLAPSQuery("selpostsancfacilities^"
							+ strappno + "^" + strFacSno);
					while (rs1.next()) {
						arrCol = new ArrayList();
						arrCol.add(Helper.correctNull(rs1
								.getString("facility_displaydesc")));
						arrCol.add(Helper.correctNull(rs1
								.getString("facility_sancamt")));
						arrCol.add(Helper.correctNull(rs1
								.getString("facility_months")));
						arrRow.add(arrCol);
					}
					hshResult.put("arrSubLimit", arrRow);
				}
				if (strModifiedTerms.contains("COEX")) {
					if (rs2 != null)
						rs2.close();
					rs2 = DBUtils.executeLAPSQuery("eduparticularssel^"
							+ strappno);
					if (rs2.next()) {
						hshResult.put("EDU_COURSE_EXTEND", correctNull(rs2
								.getString("EDU_COURSE_EXTEND")));
						hshResult.put("EDU_COURSE_STRTDATE", correctNull(rs2
								.getString("EDU_COURSE_STRTDATE")));
					}
				}
				if (strModifiedTerms.contains("GUAR")) {
					String strTemp = "";
					if (sessionModuleType.equalsIgnoreCase("RET")) {

						arrRow = new ArrayList();
						if (rs2 != null)
							rs2.close();
						rs2 = DBUtils
								.executeLAPSQuery("selguarantordetailsretail^"
										+ strappno);
						while (rs2.next()) {
							arrCol = new ArrayList();
							if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("G"))
								strTemp = "Guarantor";
							else if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("C"))
								strTemp = "Co-Applicant";
							else if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("O"))
								strTemp = "Co-Obligant";
							else if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("P"))
								strTemp = "Sole Proprietor";
							else
								strTemp = " ";
							arrCol.add(strTemp);// 0
							arrCol.add(Helper.changetoTitlecase(correctNull(rs2
									.getString("appname"))));// 1
							arrCol.add(correctNull(rs2.getString("age")));// 2
							String strEmpstatus = correctNull(rs2
									.getString("perapp_employment"));
							if (strEmpstatus.equals("1")
									|| strEmpstatus.equals("9")) {
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perinc_takehome")))));// 3
							} else {
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perinc_year1_income")))));// 3
							}
							arrCol.add(nf.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("perapp_networth")))));// 4
							arrCol.add(correctNull(rs2
									.getString("perapp_networthason")));// 5
							arrCol.add(Helper.correctNull(rs2
									.getString("PERINC_YEAREND1")));// 6
							if (arrCol.size() > 0) {
								arrRow.add(arrCol);
							}
						}
						hshResult.put("arrGuarProp", arrRow);
						arrRow = new ArrayList();
						if (rs2 != null)
							rs2.close();
						if (strAppstatus.equalsIgnoreCase("op"))
							rs2 = DBUtils
									.executeLAPSQuery("selguarantordetailsretail^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_no")));
						else
							rs2 = DBUtils
									.executeLAPSQuery("selguarantordetailsretail_ps^"
											+ strappno);
						while (rs2.next()) {
							arrCol = new ArrayList();
							if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("G"))
								strTemp = "Guarantor";
							else if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("C"))
								strTemp = "Co-Applicant";
							else if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("O"))
								strTemp = "Co-Obligant";
							else if (correctNull(rs2.getString("demo_type"))
									.equalsIgnoreCase("P"))
								strTemp = "Sole Proprietor";
							else
								strTemp = " ";
							arrCol.add(strTemp);// 0
							arrCol.add(Helper.changetoTitlecase(correctNull(rs2
									.getString("appname"))));// 1
							arrCol.add(correctNull(rs2.getString("age")));// 2
							String strEmpstatus = correctNull(rs2
									.getString("perapp_employment"));
							if (strEmpstatus.equals("1")
									|| strEmpstatus.equals("9")) {
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perinc_takehome")))));// 3
							} else {
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perinc_year1_income")))));// 3
							}
							arrCol.add(nf.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("perapp_networth")))));// 4
							arrCol.add(correctNull(rs2
									.getString("perapp_networthason")));// 5
							arrCol.add(Helper.correctNull(rs2
									.getString("PERINC_YEAREND1")));// 6
							if (arrCol.size() > 0) {
								arrRow.add(arrCol);
							}
						}
						hshResult.put("arrGuarExis", arrRow);

					} else {
						arrRow = new ArrayList();
						if (strAppstatus.equalsIgnoreCase("op"))
							rs1 = DBUtils.executeLAPSQuery("selguarantorappid^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_sno"))
									+ "^"
									+ Helper.correctNull(rs
											.getString("ps_old_app_no")));
						else
							rs1 = DBUtils
									.executeLAPSQuery("selguarantorappid_ps^"
											+ Helper.correctNull(rs
													.getString("ps_app_sno"))
											+ "^"
											+ strappno
											+ "^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_sno"))
											+ "^"
											+ Helper
													.correctNull(rs
															.getString("ps_old_app_no")));
						while (rs1.next()) {
							if (rs2 != null)
								rs2.close();
							rs2 = DBUtils
									.executeLAPSQuery("selguarantordetailsexisting^"
											+ Helper.correctInt(rs1
													.getString("appid")));
							if (rs2.next()) {
								arrCol = new ArrayList();
								if (correctNull(rs1.getString("com_compdttype"))
										.equalsIgnoreCase("G"))
									strTemp = "Guarantor";
								else if (correctNull(
										rs1.getString("com_compdttype"))
										.equalsIgnoreCase("C"))
									strTemp = "Co-Applicant";
								else if (correctNull(
										rs1.getString("com_compdttype"))
										.equalsIgnoreCase("CO"))
									strTemp = "Co-Obligant";
								else if (correctNull(
										rs1.getString("com_compdttype"))
										.equalsIgnoreCase("SP"))
									strTemp = "Sole Proprietor";
								else
									strTemp = " ";
								arrCol.add(strTemp);// 0
								arrCol.add(Helper
										.changetoTitlecase(correctNull(rs2
												.getString("appname"))));// 1
								arrCol.add(correctNull(rs2.getString("age")));// 2
								String strEmpstatus = correctNull(rs2
										.getString("perapp_employment"));
								if (strEmpstatus.equals("1")
										|| strEmpstatus.equals("9")) {
									arrCol
											.add(nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs2
																			.getString("perinc_takehome")))));// 3
								} else {
									arrCol
											.add(nf
													.format(Double
															.parseDouble(Helper
																	.correctDouble(rs2
																			.getString("perinc_year1_income")))));// 3
								}
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perapp_networth")))));// 4
								arrCol.add(correctNull(rs2
										.getString("perapp_networthason")));// 5
								arrCol.add(Helper.correctNull(rs2
										.getString("PERINC_YEAREND1")));// 6
								if (arrCol.size() > 0) {
									arrRow.add(arrCol);
								}
							}
						}

						hshResult.put("arrGuarExis", arrRow);

						arrRow = new ArrayList();
						if (rs2 != null)
							rs2.close();
						rs2 = DBUtils
								.executeLAPSQuery("selguarantordetailsproposed^"
										+ Helper.correctNull(rs
												.getString("ps_app_sno"))
										+ "^"
										+ strappno);
						while (rs2.next()) {
							arrCol = new ArrayList();
							if (correctNull(rs2.getString("com_compdttype"))
									.equalsIgnoreCase("G"))
								strTemp = "Guarantor";
							else if (correctNull(
									rs2.getString("com_compdttype"))
									.equalsIgnoreCase("C"))
								strTemp = "Co-Applicant";
							else if (correctNull(
									rs2.getString("com_compdttype"))
									.equalsIgnoreCase("CO"))
								strTemp = "Co-Obligant";
							else if (correctNull(
									rs2.getString("com_compdttype"))
									.equalsIgnoreCase("SP"))
								strTemp = "Sole Proprietor";
							else
								strTemp = "";
							arrCol.add(strTemp);// 0
							arrCol.add(Helper.changetoTitlecase(correctNull(rs2
									.getString("appname"))));// 0
							arrCol.add(correctNull(rs2.getString("age")));// 1
							String strEmpstatus = correctNull(rs2
									.getString("perapp_employment"));
							if (strEmpstatus.equals("1")
									|| strEmpstatus.equals("9")) {
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perinc_takehome")))));// 2
							} else {
								arrCol
										.add(nf
												.format(Double
														.parseDouble(Helper
																.correctDouble(rs2
																		.getString("perinc_year1_income")))));// 2
							}
							arrCol.add(nf.format(Double.parseDouble(Helper
									.correctDouble(rs2
											.getString("perapp_networth")))));// 4
							arrCol.add(correctNull(rs2
									.getString("perapp_networthason")));// 5
							arrCol.add(Helper.correctNull(rs2
									.getString("PERINC_YEAREND1")));// 7
							if (arrCol.size() > 0) {
								arrRow.add(arrCol);
							}
						}

						hshResult.put("arrGuarProp", arrRow);
					}
				}
				if (strModifiedTerms.contains("MODGSS")) {
					if (rs2 != null)
						rs2.close();
					rs2 = DBUtils.executeLAPSQuery("sel_PMAY_desc^" + strappno);
					if (rs2.next()) {
						hshResult.put("strPMAY_HOUSE_CAT", Helper
								.correctNull(rs2.getString("PMAY_HOUSE_CAT")));
						hshResult.put("strPMAY_LOAN_TYPE", Helper
								.correctNull(rs2.getString("PMAY_LOAN_TYPE")));
						hshResult.put("strPMAY_OWN_MODE", Helper
								.correctNull(rs2.getString("PMAY_OWN_MODE")));
						hshResult.put("strPMAY_BORR_PUCCA", Helper
								.correctNull(rs2.getString("PMAY_BORR_PUCCA")));
						hshResult.put("strPMAY_PREFER_CAT", Helper
								.correctNull(rs2.getString("PMAY_PREFER_CAT")));
						hshResult
								.put("strPMAY_SUBSID_INST", Helper
										.correctNull(rs2
												.getString("PMAY_SUBSID_INST")));
						hshResult.put("strPMAY_OTHER_CATEGORY", Helper
								.CLOBToString(rs2
										.getClob("PMAY_OTHER_CATEGORY")));
						hshResult.put("strPMAY_SOURCE_APP", Helper
								.correctNull(rs2.getString("PMAY_SOURCE_APP")));
						hshResult.put("strPMAY_CERTIF_HOUSEOWN", Helper
								.correctNull(rs2
										.getString("PMAY_CERTIF_HOUSEOWN")));

						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("select_Pmay_desc^"
								+ Helper.correctNull(rs2
										.getString("PMAY_HOUSE_CAT")));
						if (rs1.next()) {
							hshResult.put("strPMAY_HOUSECATDESC", Helper
									.correctNull(rs1
											.getString("PM_SUBCATEGORY")));
						}

					}
					if (rs2 != null)
						rs2.close();
					if (strAppstatus.equalsIgnoreCase("op"))
						rs2 = DBUtils.executeLAPSQuery("sel_PMAY_desc^"
								+ Helper.correctNull(rs
										.getString("ps_old_app_no")));
					else
						rs2 = DBUtils.executeLAPSQuery("sel_PMAY_detailps^"
								+ strappno);
					if (rs2.next()) {
						hshResult.put("strOldPMAY_HOUSE_CAT", Helper
								.correctNull(rs2.getString("PMAY_HOUSE_CAT")));
						hshResult.put("strOldPMAY_LOAN_TYPE", Helper
								.correctNull(rs2.getString("PMAY_LOAN_TYPE")));
						hshResult.put("strOldPMAY_OWN_MODE", Helper
								.correctNull(rs2.getString("PMAY_OWN_MODE")));
						hshResult.put("strOldPMAY_BORR_PUCCA", Helper
								.correctNull(rs2.getString("PMAY_BORR_PUCCA")));
						hshResult.put("strOldPMAY_PREFER_CAT", Helper
								.correctNull(rs2.getString("PMAY_PREFER_CAT")));
						hshResult
								.put("strOldPMAY_SUBSID_INST", Helper
										.correctNull(rs2
												.getString("PMAY_SUBSID_INST")));
						hshResult.put("strOldPMAY_OTHER_CATEGORY", Helper
								.CLOBToString(rs2
										.getClob("PMAY_OTHER_CATEGORY")));
						hshResult.put("strOldPMAY_SOURCE_APP", Helper
								.correctNull(rs2.getString("PMAY_SOURCE_APP")));
						hshResult.put("strOldPMAY_CERTIF_HOUSEOWN", Helper
								.correctNull(rs2
										.getString("PMAY_CERTIF_HOUSEOWN")));

						if (rs1 != null)
							rs1.close();
						rs1 = DBUtils.executeLAPSQuery("select_Pmay_desc^"
								+ Helper.correctNull(rs2
										.getString("PMAY_HOUSE_CAT")));
						if (rs1.next()) {
							hshResult.put("strOldPMAY_HOUSECATDESC", Helper
									.correctNull(rs1
											.getString("PM_SUBCATEGORY")));
						}
					}
				}
				hshResult.put("strModifiedTerms", strModifiedTerms);
				hshValues.put("hshResult" + intFacCount, hshResult);
			}
			if (rs2 != null)
				rs2.close();
			String stroldprocessingfee = "", strnewprocessingfee = "";
			if (sessionModuleType.equalsIgnoreCase("RET")) {
				if (rs2 != null)
					rs2.close();
				rs2 = DBUtils.executeLAPSQuery("selperprdintrate^"
						+ stroldproposalnumber);
				if (rs2.next()) {
					stroldprocessingfee = Helper.correctNull(rs2
							.getString("loan_profee"));
					hshValues.put("stroldprocessingfee", stroldprocessingfee);
				}
				if (rs2 != null)
					rs2.close();
				rs2 = DBUtils.executeLAPSQuery("selperprdintrate^" + strappno);
				if (rs2.next()) {
					strnewprocessingfee = Helper.correctNull(rs2
							.getString("loan_profee"));
					hshValues.put("strnewprocessingfee", strnewprocessingfee);
				}
			} else {

				if (rs2 != null)
					rs2.close();
				rs2 = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
						+ stroldproposalnumber);
				if (rs2.next()) {
					stroldprocessingfee = Helper.correctNull(rs2
							.getString("com_processingfee"));
					hshValues.put("stroldprocessingfee", stroldprocessingfee);
				}
				if (rs2 != null)
					rs2.close();
				rs2 = DBUtils.executeLAPSQuery("sel_corporate_breifbackground^"
						+ strappno);
				if (rs2.next()) {
					strnewprocessingfee = Helper.correctNull(rs2
							.getString("com_processingfee"));
					hshValues.put("strnewprocessingfee", strnewprocessingfee);
				}
			}
			hshValues.put("strFacCount", String.valueOf(intFacCount));
			String strBAConsType = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_BAConsVal^" + strappno);
			if (rs.next()) {
				hshValues.put("com_wc_bnkarg", correctNull((String) rs
						.getString("com_wc_bnkarg")));
				hshValues.put("com_wc_type", correctNull((String) rs
						.getString("com_wc_type")));
				hshValues.put("com_tl_bnkarg", correctNull((String) rs
						.getString("com_tl_bnkarg")));
				hshValues.put("com_tl_type", correctNull((String) rs
						.getString("com_tl_type")));
				strBAConsType = correctNull((String) rs
						.getString("com_wc_type"));
			}

			strQuery = SQLParser.getSqlQuery("sel_BAoldConsortium^" + strappno);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arrOutbankCol = new ArrayList();

				arrOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_sno")));// 0
				arrOutbankCol.add(correctNull((String) rs
						.getString("com_con_bank_code")));// 1
				arrOutbankCol.add(correctNull((String) rs
						.getString("com_con_fac_nature")));// 2
				String faclimit = correctNull((String) rs
						.getString("com_con_fac_type"));
				if (faclimit.equalsIgnoreCase("M")) {
					faclimit = "Main Limit";
				} else if (faclimit.equalsIgnoreCase("S")) {
					faclimit = "sub Limit";
				} else {
					faclimit = "";
				}
				arrOutbankCol.add(faclimit);// 3
				arrOutbankCol.add(correctNull((String) rs
						.getString("com_con_fac_limitof")));// 4
				arrOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_limit")));// 5
				arrOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_outstanding")));// 6
				arrOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_int_rate")));// 7
				arrOutbankCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("com_con_remarks"))));// 8

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^147^"
						+ correctNull((String) rs
								.getString("com_con_bank_code")));
				if (!rs1.next()) {
					arrOutbankCol.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arrOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 9
					break;
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^144^"
						+ correctNull((String) rs
								.getString("com_con_fac_nature")));
				if (!rs1.next()) {
					arrOutbankCol.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arrOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 10
					break;
				}
				arrOutbankCol.add(correctNull((String) rs
						.getString("COM_CONS_ASSET_CLASSFICATION")));// 11
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^31^"
						+ correctNull(rs
								.getString("COM_CONS_ASSET_CLASSFICATION")));
				if (rs1.next()) {
					arrOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 12
				} else {
					arrOutbankCol.add("");
				}
				arrOutbankCol.add(Helper.correctNull((String) rs
						.getString("COM_CON_BRANCH_NAME")));// 13
				arrOutbankCol.add(Helper.correctNull((String) rs
						.getString("COM_CON_EMAIL_ID")));// 14
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^259^"
						+ correctNull((String) rs
								.getString("COM_CON_BRANCH_NAME")));
				if (rs1.next()) {
					arrOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 12
				} else {
					arrOutbankCol.add("");
				}
				arrOutbankRow.add(arrOutbankCol);

			}
			hshValues.put("arrOutbankRow", arrOutbankRow);

			String stroldBAConsType = "";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_BAConsVal^"
					+ stroldproposalnumber);
			if (rs.next()) {
				hshValues.put("com_wc_bnkarg_old", correctNull((String) rs
						.getString("com_wc_bnkarg")));
				hshValues.put("com_wc_type_old", correctNull((String) rs
						.getString("com_wc_type")));
				hshValues.put("com_tl_bnkarg_old", correctNull((String) rs
						.getString("com_tl_bnkarg")));
				hshValues.put("com_tl_type_old", correctNull((String) rs
						.getString("com_tl_type")));

			}

			strQuery = SQLParser.getSqlQuery("sel_BAoldConsortium^"
					+ stroldproposalnumber);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				arroldOutbankCol = new ArrayList();

				arroldOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_sno")));// 0
				arroldOutbankCol.add(correctNull((String) rs
						.getString("com_con_bank_code")));// 1
				arroldOutbankCol.add(correctNull((String) rs
						.getString("com_con_fac_nature")));// 2
				String faclimit = correctNull((String) rs
						.getString("com_con_fac_type"));
				if (faclimit.equalsIgnoreCase("M")) {
					faclimit = "Main Limit";
				} else if (faclimit.equalsIgnoreCase("S")) {
					faclimit = "sub Limit";
				} else {
					faclimit = "";
				}
				arroldOutbankCol.add(faclimit);// 3
				// arroldOutbankCol.add(correctNull((String)rs.getString("com_con_fac_type")));//3
				arroldOutbankCol.add(correctNull((String) rs
						.getString("com_con_fac_limitof")));// 4
				arroldOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_limit")));// 5
				arroldOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_outstanding")));// 6
				arroldOutbankCol.add(Helper.correctInt((String) rs
						.getString("com_con_int_rate")));// 7
				arroldOutbankCol.add(correctNull(Helper.CLOBToString(rs
						.getClob("com_con_remarks"))));// 8

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^147^"
						+ correctNull((String) rs
								.getString("com_con_bank_code")));
				if (!rs1.next()) {
					arroldOutbankCol.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arroldOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 9
					break;
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^144^"
						+ correctNull((String) rs
								.getString("com_con_fac_nature")));
				if (!rs1.next()) {
					arroldOutbankCol.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arroldOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 10
					break;
				}
				arroldOutbankCol.add(correctNull((String) rs
						.getString("COM_CONS_ASSET_CLASSFICATION")));// 11
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^31^"
						+ correctNull(rs
								.getString("COM_CONS_ASSET_CLASSFICATION")));
				if (rs1.next()) {
					arroldOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 12
				} else {
					arroldOutbankCol.add("");
				}
				arroldOutbankCol.add(Helper.correctNull((String) rs
						.getString("COM_CON_BRANCH_NAME")));// 13
				arroldOutbankCol.add(Helper.correctNull((String) rs
						.getString("COM_CON_EMAIL_ID")));// 14
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^259^"
						+ correctNull((String) rs
								.getString("COM_CON_BRANCH_NAME")));
				if (rs1.next()) {
					arroldOutbankCol.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 12
				} else {
					arroldOutbankCol.add("");
				}
				arroldOutbankRow.add(arroldOutbankCol);

			}
			hshValues.put("arroldOutbankRow", arroldOutbankRow);

			strQuery = SQLParser.getSqlQuery("sel_BAoldConsortium_tl^"
					+ strappno);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arrOutbankColtl = new ArrayList();

				arrOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_sno")));// 0
				arrOutbankColtl.add(correctNull((String) rs
						.getString("com_con_bank_code")));// 1
				arrOutbankColtl.add(correctNull((String) rs
						.getString("com_con_fac_nature")));// 2
				String faclimit = correctNull((String) rs
						.getString("com_con_fac_type"));
				if (faclimit.equalsIgnoreCase("M")) {
					faclimit = "Main Limit";
				} else if (faclimit.equalsIgnoreCase("S")) {
					faclimit = "sub Limit";
				} else {
					faclimit = "";
				}
				arrOutbankColtl.add(faclimit);// 3
				arrOutbankColtl.add(correctNull((String) rs
						.getString("com_con_fac_limitof")));// 4
				arrOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_limit")));// 5
				arrOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_outstanding")));// 6
				arrOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_int_rate")));// 7
				arrOutbankColtl.add(correctNull(Helper.CLOBToString(rs
						.getClob("com_con_remarks"))));// 8

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^147^"
						+ correctNull((String) rs
								.getString("com_con_bank_code")));
				if (!rs1.next()) {
					arrOutbankColtl.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arrOutbankColtl.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 9
					break;
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^144^"
						+ correctNull((String) rs
								.getString("com_con_fac_nature")));
				if (!rs1.next()) {
					arrOutbankColtl.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arrOutbankColtl.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 10
					break;
				}
				arrOutbankColtl.add(Helper.correctInt((String) rs
						.getString("COM_CON_OUTSTANDING_AS_ON")));// 11
				arrOutbankColtl.add(Helper.correctInt((String) rs
						.getString("COM_CON_UNRELEASED_PORTION")));// 12
				arrOutbankColtl.add(Helper.correctNull(rs
						.getString("COM_CON_BRANCH_NAME")));// 13
				arrOutbankColtl.add(Helper.correctNull(rs
						.getString("COM_CON_EMAIL_ID")));// 14
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^259^"
						+ correctNull((String) rs
								.getString("COM_CON_BRANCH_NAME")));
				if (rs1.next()) {
					arrOutbankColtl.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 12
				} else {
					arrOutbankColtl.add("");
				}
				arrOutbankRowtl.add(arrOutbankColtl);

			}

			hshValues.put("arrOutbankRowtl", arrOutbankRowtl);
			strQuery = SQLParser.getSqlQuery("sel_BAoldConsortium_tl^"
					+ stroldproposalnumber);
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				arroldOutbankColtl = new ArrayList();

				arroldOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_sno")));// 0
				arroldOutbankColtl.add(correctNull((String) rs
						.getString("com_con_bank_code")));// 1
				arroldOutbankColtl.add(correctNull((String) rs
						.getString("com_con_fac_nature")));// 2
				String faclimit = correctNull((String) rs
						.getString("com_con_fac_type"));
				if (faclimit.equalsIgnoreCase("M")) {
					faclimit = "Main Limit";
				} else if (faclimit.equalsIgnoreCase("S")) {
					faclimit = "sub Limit";
				} else {
					faclimit = "";
				}
				arroldOutbankColtl.add(faclimit);// 3
				arroldOutbankColtl.add(correctNull((String) rs
						.getString("com_con_fac_limitof")));// 4
				arroldOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_limit")));// 5
				arroldOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_outstanding")));// 6
				arroldOutbankColtl.add(Helper.correctInt((String) rs
						.getString("com_con_int_rate")));// 7
				arroldOutbankColtl.add(correctNull(Helper.CLOBToString(rs
						.getClob("com_con_remarks"))));// 8

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^147^"
						+ correctNull((String) rs
								.getString("com_con_bank_code")));
				if (!rs1.next()) {
					arroldOutbankColtl.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arroldOutbankColtl.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 9
					break;
				}

				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("selstatdatabyiddesc^144^"
						+ correctNull((String) rs
								.getString("com_con_fac_nature")));
				if (!rs1.next()) {
					arroldOutbankColtl.add("");
				}
				rs1.beforeFirst();
				while (rs1.next()) {
					arroldOutbankColtl.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 10
					break;
				}
				arroldOutbankColtl.add(Helper.correctInt((String) rs
						.getString("COM_CON_OUTSTANDING_AS_ON")));// 11
				arroldOutbankColtl.add(Helper.correctInt((String) rs
						.getString("COM_CON_UNRELEASED_PORTION")));// 12
				arroldOutbankColtl.add(Helper.correctNull(rs
						.getString("COM_CON_BRANCH_NAME")));// 13
				arroldOutbankColtl.add(Helper.correctNull(rs
						.getString("COM_CON_EMAIL_ID")));// 14
				if (rs1 != null) {
					rs1.close();
				}
				rs1 = DBUtils.executeLAPSQuery("getstaticdescription^259^"
						+ correctNull((String) rs
								.getString("COM_CON_BRANCH_NAME")));
				if (rs1.next()) {
					arroldOutbankColtl.add(Helper.correctNull(rs1
							.getString("stat_data_desc1")));// 12
				} else {
					arroldOutbankColtl.add("");
				}
				arroldOutbankRowtl.add(arroldOutbankColtl);

			}
			hshValues.put("arroldOutbankRowtl", arroldOutbankRowtl);
			String strFinancialrequired = "", strVal = "", strValuesIn = "", strVal1 = "", strVal2 = "", strVal3 = "", str_arr = "", strValuesIn1 = "", strAmountValue = "", strAmtValueIn = "";

			// Values In
			String strOrgCode = "";
			// strValuesIn="",strValuesIn1="";
			if (rs != null) {
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("selorgno^" + strappno);
			if (rs.next()) {
				strOrgCode = correctNull(rs.getString("app_orgcode"));
				strValuesIn = correctNull(rs.getString("app_valuesin"));
				strValuesIn1 = correctNull(rs.getString("app_valuesin"));
				strValuesIn1 = correctNull(rs.getString("app_valuesin"));
				strFinancialrequired = correctNull(rs
						.getString("APP_FACILITYREQUIRED"));
			}
			hshValues.put("Financialrequired", strFinancialrequired);
			hshValues.put("valuesin", strValuesIn1);

			if (strValuesIn.equals("C")) {
				strValuesIn = "Crore";
			} else if (strValuesIn.equals("L")) {
				strValuesIn = "Lacs";
			} else if (strValuesIn.equals("R")) {
				strValuesIn = "Rs";
			}

			hshValues.put("strValuesIn", strValuesIn);

			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_amountvalue^" + strappno);
			if (rs.next()) {
				strAmountValue = Helper.correctNull(rs
						.getString("com_amountvalue"));

			}
			if (strAmountValue.equalsIgnoreCase("C")) {
				strAmtValueIn = "Crore";
			} else if (strAmountValue.equalsIgnoreCase("L")) {
				strAmtValueIn = "Lacs";
			} else {
				strAmtValueIn = "Rs";
			}

			hshValues.put("strAmountValue", strAmountValue);
			hshValues.put("strAmtValueIn", strAmtValueIn);

		} catch (Exception e) {
			log.error("Error in getPostSanctionFacDetails = " + e.toString());
		} finally {

		}
		return hshValues;
	}

	public String getDocumentID(HashMap hshValues)  {
		String docid = "";
		ResultSet rs = null;
		try {
			rs = DBUtils.executeLAPSQuery("sel_docid");
			if (rs.next()) {
				docid = rs.getString("snorelmax");
				int docidlength = docid.length();
				if (docidlength == 1) {
					String str = "DOC000";
					docid = str.concat(docid);
				} else if (docidlength == 2) {
					String str = "DOC00";
					docid = str.concat(docid);
				} else if (docidlength == 3) {
					String str = "DOC0";
					docid = str.concat(docid);
				} else if (docidlength == 4) {
					String str = "DOC";
					docid = str.concat(docid);
				}
			}
		} catch (Exception e) {
			throw new EJBException(e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				throw new EJBException("Error closing connection.. " + e1);
			}
		}
		return docid;
	}

	public HashMap getCGTMSE_txndet(HashMap hshValues)  {

		String strAppno = "";
		ResultSet rs = null;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		String strModuleType = "";
		String strAppstatus = "", strQuery = "";
		strAppno = correctNull((String) hshValues.get("appno"));
		String strUserId = (String) hshValues.get("strUserId");
		String sessionModuleType = Helper.correctNull((String) hshValues
				.get("sessionModuleType"));
		String strFacsno = Helper.correctInt((String) hshValues
				.get("sel_facility"));
		try {

			if (strFacsno.equalsIgnoreCase("s"))
				strFacsno = "0";

			if (sessionModuleType.equalsIgnoreCase("RET"))
				strFacsno = "1";
			strQuery = SQLParser.getSqlQuery("sel_cgtmse_txndet^" + strAppno
					+ "^" + strFacsno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("TXNDET_APPNO", Helper.correctNull((String) rs
						.getString("TXNDET_APPNO")));
				hshValues.put("TXNDET_TXNID", Helper.correctNull((String) rs
						.getString("TXNDET_TXNID")));
				hshValues.put("TXNDET_TXNDATE", Helper.correctNull((String) rs
						.getString("TXNDET_TXNDATE")));
				hshValues
						.put("TXNDET_TXNAMOUNT", Helper.correctNull((String) rs
								.getString("TXNDET_TXNAMOUNT")));
				hshValues.put("TXNDET_APPL_STATUS", Helper
						.correctNull((String) rs
								.getString("TXNDET_APPL_STATUS")));
				hshValues.put("TXNDET_APPL_REFNO",
						Helper.correctNull((String) rs
								.getString("TXNDET_APPL_REFNO")));
				hshValues
						.put("TXNDET_APPL_DATE", Helper.correctNull((String) rs
								.getString("TXNDET_APPL_DATE")));
				hshValues.put("TXNDET_CGPAN_NO", Helper.correctNull((String) rs
						.getString("TXNDET_CGPAN_NO")));
				hshValues.put("TXNDET_APPROVAL_DATE", Helper
						.correctNull((String) rs
								.getString("TXNDET_APPROVAL_DATE")));
				hshValues.put("TXNDET_REJECTION_REMARKS", Helper
						.correctNull((String) rs
								.getString("TXNDET_REJECTION_REMARKS")));
				hshValues.put("TXNDET_PAYMENT_ACKNO", Helper
						.correctNull((String) rs
								.getString("TXNDET_PAYMENT_ACKNO")));
				hshValues.put("TXNDET_GUA_STARTDATE", Helper
						.correctNull((String) rs
								.getString("TXNDET_GUA_STARTDATE")));
				hshValues.put("TXNDET_GUA_ENDDATE", Helper
						.correctNull((String) rs
								.getString("TXNDET_GUA_ENDDATE")));
				hshValues.put("TXNDET_FAC_SNO", Helper.correctNull((String) rs
						.getString("TXNDET_FAC_SNO")));
				hshValues.put("TXNDET_CRDT_AMT", Helper.correctNull((String) rs
						.getString("TXNDET_CRDT_AMT")));
				hshValues.put("TXNDET_AMT_DISBURSED", Helper
						.correctNull((String) rs
								.getString("TXNDET_AMT_DISBURSED")));
				hshValues.put("TXNDET_OUTS_BAL_AMT", Helper
						.correctNull((String) rs
								.getString("TXNDET_OUTS_BAL_AMT")));
				hshValues.put("TXNDET_OUTS_BAL_DT", Helper
						.correctNull((String) rs
								.getString("TXNDET_OUTS_BAL_DT")));
				hshValues.put("TXNDET_FST_INS_DUE_DT", Helper
						.correctNull((String) rs
								.getString("TXNDET_FST_INS_DUE_DT")));
				hshValues.put("TXNDET_DT_FST_DISB", Helper
						.correctNull((String) rs
								.getString("TXNDET_DT_FST_DISB")));
				hshValues.put("TXNDET_DT_LST_DISB", Helper
						.correctNull((String) rs
								.getString("TXNDET_DT_LST_DISB")));
				hshValues.put("TXNDET_AMT_DISBURSEDWC", Helper
						.correctNull((String) rs
								.getString("TXNDET_AMT_DISBURSEDWC")));
				hshValues.put("TXNDET_DT_FST_DISBWC", Helper
						.correctNull((String) rs
								.getString("TXNDET_DT_FST_DISBWC")));
				hshValues.put("TXNDET_DT_LST_DISBWC", Helper
						.correctNull((String) rs
								.getString("TXNDET_DT_LST_DISBWC")));
				hshValues.put("TXNDET_CRDT_FUNDBASED", Helper
						.correctNull((String) rs
								.getString("TXNDET_CRDT_FUNDBASED")));
				hshValues.put("TXNDET_CRDT_NONFUNDBASED", Helper
						.correctNull((String) rs
								.getString("TXNDET_CRDT_NONFUNDBASED")));
				hshValues.put("TXNDET_OUTSTD_FUND", Helper
						.correctNull((String) rs
								.getString("TXNDET_OUTSTD_FUND")));
				hshValues.put("TXNDET_OUTFB_DT", Helper.correctNull((String) rs
						.getString("TXNDET_OUTFB_DT")));
				hshValues.put("TXNDET_OUTSTD_NONFUND", Helper
						.correctNull((String) rs
								.getString("TXNDET_OUTSTD_NONFUND")));
				hshValues
						.put("TXNDET_OUTNFB_DT", Helper.correctNull((String) rs
								.getString("TXNDET_OUTNFB_DT")));
				hshValues.put("TXNDET_GUARANTEE_FEE_AMOUNT", Helper
						.correctNull((String) rs
								.getString("TXNDET_GUARANTEE_FEE_AMOUNT")));
				hshValues.put("TXNDET_TAXABLE_AMOUNT", Helper
						.correctNull((String) rs
								.getString("TXNDET_TAXABLE_AMOUNT")));
				hshValues
						.put("TXNDET_IGST_RATE", Helper.correctNull((String) rs
								.getString("TXNDET_IGST_RATE")));
				hshValues.put("TXNDET_IGST_AMOUNT", Helper
						.correctNull((String) rs
								.getString("TXNDET_IGST_AMOUNT")));
				hshValues
						.put("TXNDET_CGST_RATE", Helper.correctNull((String) rs
								.getString("TXNDET_CGST_RATE")));
				hshValues.put("TXNDET_CGST_AMOUNT", Helper
						.correctNull((String) rs
								.getString("TXNDET_CGST_AMOUNT")));
				hshValues
						.put("TXNDET_SGST_RATE", Helper.correctNull((String) rs
								.getString("TXNDET_SGST_RATE")));
				hshValues.put("TXNDET_SGST_AMOUNT", Helper
						.correctNull((String) rs
								.getString("TXNDET_SGST_AMOUNT")));

				hshValues.put("Actiontype", "update");
			} else {
				hshValues.put("Actiontype", "insert");
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("setuserssel^" + strUserId);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("usr_department", Helper.correctNull((String) rs
						.getString("usr_department")));

			}

			if (rs != null) {
				rs.close();
			}

			strQuery = SQLParser.getSqlQuery("commworkflowsel2^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				String strAppStatus = rs.getString("app_status");
				String strLoantype = correctNull(rs.getString("app_loantype"));
				String strApplevel = correctNull(rs.getString("app_orglevel"));
				hshValues.put("appstatus", strAppStatus);
				hshValues.put("app_loantype", strLoantype);
				hshValues.put("app_legalcomp", correctNull(rs
						.getString("app_legalcomp")));
			}

			if (sessionModuleType.equalsIgnoreCase("CORP")
					|| sessionModuleType.equalsIgnoreCase("AGR")) {
				// String
				// fac_sno=Helper.correctInt((String)hshValues.get("sel_facility"));
				if (rs != null) {
					rs.close();
				}

				hshValues.put("facilitySNO", strFacsno);

				strQuery = SQLParser.getSqlQuery("get_facnature^" + strAppno
						+ "^" + strFacsno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("FacilityNature",
							Helper.correctNull((String) rs
									.getString("COM_FACNATURE")));
					hshValues.put("com_factype", Helper.correctNull((String) rs
							.getString("com_factype")));
					hshValues.put("FACILITY_WHT_CGTMSEAPPLY", correctNull(rs
							.getString("FACILITY_WHT_CGTMSEAPPLY")));
					hshValues.put("strloan_recmdamt", correctNull(rs
							.getString("facility_proposed")));
				}
			} else {
				hshValues.put("FacilityNature", "2");

				if (rs != null) {
					rs.close();
				}

				strQuery = SQLParser.getSqlQuery("getApprovedLoanDetails^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("strloan_recmdamt", correctNull(rs
							.getString("loan_recmdamt")));
				}
			}
			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("selloanagainstparams^115");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("strparamAmount", Helper.correctInt(rs
						.getString("loan_paramval")));
			}
			if (rs != null) {
				rs.close();
			}
			if (sessionModuleType.equalsIgnoreCase("CORP")
					|| sessionModuleType.equalsIgnoreCase("AGR")) {
				
			}
			else
			{
				strQuery = SQLParser.getSqlQuery("getApprovedSanctionDateDetails^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("APP_PROCESSDATE", correctNull(rs
							.getString("APP_PROCESSDATE")));
				}
			}

		} catch (Exception e) {
			throw new EJBException(e.getMessage());
		}
		return hshValues;
	}

	public HashMap updateCGTMSE_txndet(HashMap hshValues)  {
		String strAction = "";
		HashMap hshResult = null;
		hshResult = new HashMap();
		String strFromflowpoint = "";
		String strToflowpoint = "";
		String strFromuserid = "";
		String strTouserid = "";
		String strAppno = "";
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		StringBuilder sbAuditTrialOld = new StringBuilder();

		try {
			strAction = (String) hshValues.get("hidAction");
			strAction = correctNull((String) hshValues.get("hidAction"));
			strAppno = correctNull((String) hshValues.get("appno"));
			if (strAppno.equals("")) {
				strAppno = correctNull((String) hshValues.get("hidAppNo"));
			}
			strFromuserid = (String) hshValues.get("strUserId");

			if (strAction.equalsIgnoreCase("insert")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "ins_cgtmse_txndet");
				arrValues.add(strAppno);// 1
				arrValues.add(strFromuserid);// 2
				arrValues.add(correctNull((String) hshValues.get("txt_txnID")));// 3
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txt_txnDate")));// 4
				arrValues.add(correctNull((String) hshValues
						.get("txt_txnAmount"))); // 5
				arrValues.add(correctNull((String) hshValues
						.get("sel_applStatus")));// 6
				arrValues.add(correctNull((String) hshValues
						.get("txt_appl_refno")));// 7
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txt_applDate")));// 8
				arrValues.add(correctNull((String) hshValues
						.get("txt_CG_panno")));// 9
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txt_approvalDate")));// 10
				arrValues.add(correctNull((String) hshValues
						.get("txt_rej_remarks")));// 11
				arrValues.add(correctNull((String) hshValues
						.get("txt_payment_ackwno")));// 12
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txt_guanrantee_startDate")));// 13
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txt_guanrantee_endDate")));// 14
				arrValues.add(correctNull((String) hshValues
						.get("sel_facility")));// 15
				arrValues
						.add(correctNull((String) hshValues.get("txt_CrdtAmt")));// 16
				arrValues.add(correctNull((String) hshValues
						.get("txt_AmtDisbursment")));// 17
				arrValues.add(correctNull((String) hshValues
						.get("txt_OutsAmount")));// 18
				arrValues.add(Helper.correctNull((String) hshValues
						.get("DtOutsAmnt")));// 19
				arrValues.add(Helper.correctNull((String) hshValues
						.get("DtFstInsDue")));// 20
				arrValues.add(Helper.correctNull((String) hshValues
						.get("DtFstDisbursment")));// 21
				arrValues.add(Helper.correctNull((String) hshValues
						.get("DtLstDisbursment")));// 22
				arrValues.add(correctNull((String) hshValues
						.get("txt_AmtDisbursmentwc")));// 22  wc
				arrValues.add(Helper.correctNull((String) hshValues
						.get("DtFstDisbursmentwc")));// 22  wc
				arrValues.add(Helper.correctNull((String) hshValues
						.get("DtLstDisbursmentwc")));// 22  wc
				arrValues.add(correctNull((String) hshValues
						.get("txt_CrdtFundBased")));// 23
				arrValues.add(correctNull((String) hshValues
						.get("txt_CrdtNonFundBased")));// 24
				arrValues.add(correctNull((String) hshValues
						.get("OutsdFundBased")));// 25
				arrValues.add(Helper.correctNull((String) hshValues
						.get("OFBDt")));// 26
				arrValues.add(correctNull((String) hshValues
						.get("OutsdNonFundBased")));// 27
				arrValues.add(Helper.correctNull((String) hshValues
						.get("ONFBdT")));// 28
				arrValues.add(correctNull((String) hshValues
						.get("txt_GF_Amount")));// 29
				arrValues.add(correctNull((String) hshValues
						.get("txt_TX_Amount")));// 30
				arrValues.add(correctNull((String) hshValues
						.get("txt_IGST_Rate")));// 31
				arrValues.add(correctNull((String) hshValues
						.get("txt_IGST_Amount")));// 32
				arrValues.add(correctNull((String) hshValues
						.get("txt_CGST_Rate")));// 33
				arrValues.add(correctNull((String) hshValues
						.get("txt_CGST_Amount")));// 34
				arrValues.add(correctNull((String) hshValues
						.get("txt_SGST_Rate")));// 35
				arrValues.add(correctNull((String) hshValues
						.get("txt_SGST_Amount")));// 36
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			} else if (strAction.equalsIgnoreCase("update")) {

				String strQuery = SQLParser.getSqlQuery("sel_cgtmse_txndet^"
						+ strAppno + "^"
						+ correctNull((String) hshValues.get("sel_facility")));
				ResultSet rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					sbAuditTrialOld
							.append("Serial No=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_FAC_SNO")))
							.append("~Transaction ID =")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_TXNID")))
							.append("~Transation Date=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_TXNDATE")))
							.append("~Transation Amount=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_TXNAMOUNT")))
							.append("~Transation Status=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_APPL_STATUS")))
							.append("~Application Ref No=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_APPL_REFNO")))
							.append("~Application Date=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_APPL_DATE")))
							.append("~CG PAN No=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_CGPAN_NO")))
							.append("~Approval Date=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_APPROVAL_DATE")))
							.append("~Rejection Remarks=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_REJECTION_REMARKS")))
							.append("~Payment ackw no=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_PAYMENT_ACKNO")))
							.append("~Guarantee Start Date=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_GUA_STARTDATE")))
							.append("~Guarantee End Date=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_GUA_ENDDATE")))
							.append("~Guarantee Fee Amount=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_GUARANTEE_FEE_AMOUNT")))
							.append("~Taxable Amount=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_TAXABLE_AMOUNT")))
							.append("~IGST Rate=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_IGST_RATE")))
							.append("~IGST Amount=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_IGST_AMOUNT")))
							.append("~CGST Rate=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_CGST_RATE")))
							.append("~CGST Amount=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_CGST_AMOUNT")))
							.append("~SGST Rate=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_SGST_RATE")))
							.append("~SGST Amount=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_SGST_AMOUNT")))
							.append("~Credit amount to be Guaranteed=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_CRDT_AMT")))
							.append("~Amount Disbursed=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_AMT_DISBURSED")))
							.append("~Outstanding Amount=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_OUTS_BAL_AMT")))
							.append("~Date of Outstanding Amount=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_OUTS_BAL_DT")))
							.append("~Date of First Installment Due=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_FST_INS_DUE_DT")))
							.append(
									"~Date of first Disbursement if already made=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_DT_FST_DISB")))
							.append(
									"~Date of Last and Final Disbursement if already made=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_DT_LST_DISB")))
							.append(
									"~Amount Disbursed=")//Amount
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_AMT_DISBURSEDWC")))
							.append(
									"~Date of first Disbursement if already made=")  //first dis
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_DT_FST_DISBWC")))
							.append(
									"~Date of Last and Final Disbursement if already made=")//final dis
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_DT_LST_DISBWC")))
							.append("~Fund Based=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_CRDT_FUNDBASED")))
							.append("~Non-Fund Based=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_CRDT_NONFUNDBASED")))
							.append("~Outstanding Fund Based Facility=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_OUTSTD_FUND")))
							.append("~Outstanding Fund Based Facility as on =")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_OUTFB_DT")))
							.append("~Outstanding Non-Fund Based Facility=")
							.append(
									Helper
											.correctNull(rs
													.getString("TXNDET_OUTSTD_NONFUND")))
							.append(
									"~Outstanding Non-Fund Based Facility as on=")
							.append(
									Helper.correctNull(rs
											.getString("TXNDET_OUTNFB_DT")));
				}

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_cgtmse_txndet");
				arrValues.add(correctNull((String) hshValues.get("txt_txnID")));
				arrValues
						.add(correctNull((String) hshValues.get("txt_txnDate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_txnAmount")));
				arrValues.add(correctNull((String) hshValues
						.get("sel_applStatus")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_appl_refno")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_applDate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_CG_panno")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_approvalDate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_rej_remarks")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_payment_ackwno")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_guanrantee_startDate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_guanrantee_endDate")));
				arrValues.add(strFromuserid);
				arrValues
						.add(correctNull((String) hshValues.get("txt_CrdtAmt")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_AmtDisbursment")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_OutsAmount")));
				arrValues
						.add(correctNull((String) hshValues.get("DtOutsAmnt")));
				arrValues
						.add(correctNull((String) hshValues.get("DtFstInsDue")));
				arrValues.add(correctNull((String) hshValues
						.get("DtFstDisbursment")));
				arrValues.add(correctNull((String) hshValues
						.get("DtLstDisbursment")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_AmtDisbursmentwc")));  //wc amount
				arrValues.add(correctNull((String) hshValues
						.get("DtFstDisbursmentwc")));  // wc first
				arrValues.add(correctNull((String) hshValues
						.get("DtLstDisbursmentwc")));  // wc last
				arrValues.add(correctNull((String) hshValues
						.get("txt_CrdtFundBased")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_CrdtNonFundBased")));
				arrValues.add(correctNull((String) hshValues
						.get("OutsdFundBased")));
				arrValues.add(correctNull((String) hshValues.get("OFBDt")));
				arrValues.add(correctNull((String) hshValues
						.get("OutsdNonFundBased")));
				arrValues.add(correctNull((String) hshValues.get("ONFBdT")));

				arrValues.add(correctNull((String) hshValues
						.get("txt_GF_Amount")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_TX_Amount")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_IGST_Rate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_IGST_Amount")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_CGST_Rate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_CGST_Amount")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_SGST_Rate")));
				arrValues.add(correctNull((String) hshValues
						.get("txt_SGST_Amount")));
				arrValues.add(strAppno);
				arrValues.add(correctNull((String) hshValues
						.get("sel_facility")));
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			}

			StringBuilder sbAuditTrial = new StringBuilder();

			if (strAction.equalsIgnoreCase("update")) {
				hshValues.put("strAction", "update");
			} else {
				hshValues.put("strAction", "insert");
			}

			sbAuditTrial
					.append("Serial No=")
					.append(
							Helper.correctNull((String) hshValues
									.get("sel_facility")))
					.append("~Transaction ID =")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_txnID")))
					.append("~Transation Date=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_txnDate")))
					.append("~Transation Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_txnAmount")))
					.append("~Transation Status=")
					.append(
							Helper.correctNull((String) hshValues
									.get("sel_applStatus")))
					.append("~Application Ref No=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_appl_refno")))
					.append("~Application Date=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_applDate")))
					.append("~CG PAN No=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_CG_panno")))
					.append("~Approval Date=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_approvalDate")))
					.append("~Rejection Remarks=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_rej_remarks")))
					.append("~Payment ackw no=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_payment_ackwno")))
					.append("~Guarantee Start Date=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_guanrantee_startDate")))
					.append("~Guarantee End Date=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_guanrantee_endDate")))
					.append("~Guarantee Fee Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_GF_Amount")))
					.append("~Taxable Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_TX_Amount")))
					.append("~IGST Rate=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_IGST_Rate")))
					.append("~IGST Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_IGST_Amount")))
					.append("~CGST Rate=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_CGST_Rate")))
					.append("~CGST Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_CGST_Amount")))
					.append("~SGST Rate=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_SGST_Rate")))
					.append("~SGST Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_SGST_Amount")))
					.append("~Credit amount to be Guaranteed=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_CrdtAmt")))
					.append("~Amount Disbursed=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_AmtDisbursment")))
					.append("~Outstanding Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_OutsAmount")))
					.append("~Date of Outstanding Amount=")
					.append(
							Helper.correctNull((String) hshValues
									.get("DtOutsAmnt")))
					.append("~Date of First Installment Due=")
					.append(
							Helper.correctNull((String) hshValues
									.get("DtFstInsDue")))
					.append("~Date of first Disbursement if already made=")
					.append(
							Helper.correctNull((String) hshValues
									.get("DtFstDisbursment")))
					.append(
							"~Date of Last and Final Disbursement if already made=")
					.append(
							Helper.correctNull((String) hshValues
									.get("DtLstDisbursment")))
					.append(
							"~Amount Disbursed=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_AmtDisbursmentwc")))
					.append(
							"~Date of first Disbursement if already made=")
					.append(
							Helper.correctNull((String) hshValues
									.get("DtFstDisbursmentwc")))
					.append(
							"~Date of Last and Final Disbursement if already made=")
					.append(
							Helper.correctNull((String) hshValues
									.get("DtLstDisbursmentwc")))
					.append("~Fund Based=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_CrdtFundBased")))
					.append("~Non-Fund Based=")
					.append(
							Helper.correctNull((String) hshValues
									.get("txt_CrdtNonFundBased")))
					.append("~Outstanding Fund Based Facility=")
					.append(
							Helper.correctNull((String) hshValues
									.get("OutsdFundBased")))
					.append("~Outstanding Fund Based Facility as on =")
					.append(Helper.correctNull((String) hshValues.get("OFBDt")))
					.append("~Outstanding Non-Fund Based Facility=").append(
							Helper.correctNull((String) hshValues
									.get("OutsdNonFundBased"))).append(
							"~Outstanding Non-Fund Based Facility as on=")
					.append(
							Helper
									.correctNull((String) hshValues
											.get("ONFBdT")));

			AuditTrial.auditNewLog(hshValues, "556", strAppno, sbAuditTrial
					.toString(), sbAuditTrialOld.toString());

		} catch (Exception e) {
			throw new EJBException(e.toString());
		}
		return hshResult;
	}

	public HashMap getRevalidateComments(HashMap hshValues)  {
		String strAppno = "";
		ResultSet rs = null, rs1 = null;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		String strQuery = "";
		strAppno = correctNull((String) hshValues.get("appno"));
		String strUserId = (String) hshValues.get("strUserId");
		String strOrgLevel = Helper.correctInt((String) hshValues
				.get("strOrgLevel"));
		String strOrgCode = Helper.correctInt((String) hshValues
				.get("strOrgCode"));
		String strAction = Helper.correctInt((String) hshValues
				.get("hidAction"));
		String sessionModuleType = Helper.correctInt((String) hshValues
				.get("sessionModuleType"));
		String strFacilitysno = Helper.correctInt((String) hshValues
				.get("hidFacilitysno"));
		try {

			if (sessionModuleType.equalsIgnoreCase("CORP")
					|| sessionModuleType.equalsIgnoreCase("AGR")) {
				strQuery = SQLParser.getSqlQuery("sel_fac_revalidation^"
						+ strAppno + "^ and facility_sno='" + strFacilitysno
						+ "'");
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("APP_REVALIDATEDBY", Helper
							.correctNull((String) rs
									.getString("fac_revalidatedby")));
					hshValues.put("APP_PROCESSDATE", Helper
							.correctNull((String) rs
									.getString("FAC_PROCESSDATE")));
					hshValues.put("APP_REVALDATE", Helper
							.correctNull((String) rs
									.getString("fac_revalidationdate")));
					hshValues.put("APP_REVALFLAG", Helper
							.correctNull((String) rs
									.getString("fac_revalidationflag")));
					hshValues.put("APP_REVALSTATUS", Helper
							.correctNull((String) rs
									.getString("fac_revalidationstatus")));
					hshValues.put("APP_SANCVAL", Helper.correctNull((String) rs
							.getString("COM_SANC_DAYS")));
					hshValues.put("APP_REVALVAL", Helper
							.correctNull((String) rs
									.getString("COM_REVALID_DAYS")));
					hshValues.put("APP_NOTAVAILVAL", Helper
							.correctNull((String) rs
									.getString("COM_NOTAVAILED_DAYS")));
					if (strOrgLevel.equalsIgnoreCase("A"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("COM_BRANCH_POWER")));
					if (strOrgLevel.equalsIgnoreCase("R"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("COM_RO_POWER")));
					if (strOrgLevel.equalsIgnoreCase("C"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("COM_HO_POWER")));
					if (strOrgLevel.equalsIgnoreCase("D"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("COM_CLPU_POWER")));

					String strRevalDate = Helper.correctNull((String) rs
							.getString("fac_revalidationdate"));
					if (strRevalDate.equalsIgnoreCase(""))
						strRevalDate = Helper.correctNull((String) rs
								.getString("FAC_PROCESSDATE"));

					strQuery = SQLParser.getSqlQuery("sel_validationdetails^"
							+ Helper.correctNull((String) rs
									.getString("FAC_PROCESSDATE"))
							+ "^"
							+ Helper.correctInt((String) rs
									.getString("COM_SANC_DAYS"))
							+ "^"
							+ strRevalDate
							+ "^"
							+ Helper.correctInt((String) rs
									.getString("COM_SANC_DAYS"))
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("FAC_PROCESSDATE"))
							+ "^"
							+ Helper.correctInt((String) rs
									.getString("COM_SANC_DAYS")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshValues.put("strSancValidity", Helper
								.correctNull((String) rs1
										.getString("sancvalidity")));
						hshValues.put("strRevalValidity", Helper
								.correctNull((String) rs1
										.getString("revalvalidity")));
						hshValues.put("strNotAvailedValidity", Helper
								.correctNull((String) rs1
										.getString("notavailedvalidity")));
					}

				}
			} else {
				strQuery = SQLParser.getSqlQuery("sel_revalidfromApp^"
						+ strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("APP_REVALIDATEDBY", Helper
							.correctNull((String) rs
									.getString("APP_REVALIDATEDBY")));
					hshValues.put("APP_PROCESSDATE", Helper
							.correctNull((String) rs
									.getString("APP_PROCESSDATE")));
					hshValues.put("APP_REVALDATE", Helper
							.correctNull((String) rs
									.getString("APP_REVALIDATIONDATE")));
					hshValues.put("APP_REVALFLAG", Helper
							.correctNull((String) rs
									.getString("APP_REVALIDATIONFLAG")));
					hshValues.put("APP_REVALSTATUS", Helper
							.correctNull((String) rs
									.getString("APP_REVALIDATIONSTATUS")));
					hshValues.put("APP_SANCVAL", Helper.correctNull((String) rs
							.getString("PRD_SANC_VALID")));
					hshValues.put("APP_REVALVAL", Helper
							.correctNull((String) rs
									.getString("PRD_REVALID_DAYS")));
					hshValues.put("APP_NOTAVAILVAL", Helper
							.correctNull((String) rs
									.getString("PRD_NOTAVAILED_DAYS")));
					if (strOrgLevel.equalsIgnoreCase("A"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("PRD_BRANCH")));
					if (strOrgLevel.equalsIgnoreCase("R"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("PRD_RO")));
					if (strOrgLevel.equalsIgnoreCase("C"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("PRD_HO")));
					if (strOrgLevel.equalsIgnoreCase("D"))
						hshValues.put("strAuthority", correctNull(rs
								.getString("PRD_CLPU")));

					String strRevalDate = Helper.correctNull((String) rs
							.getString("APP_REVALIDATIONDATE"));
					if (strRevalDate.equalsIgnoreCase(""))
						strRevalDate = Helper.correctNull((String) rs
								.getString("APP_PROCESSDATE"));

					strQuery = SQLParser.getSqlQuery("sel_validationdetails^"
							+ Helper.correctNull((String) rs
									.getString("APP_PROCESSDATE"))
							+ "^"
							+ Helper.correctInt((String) rs
									.getString("PRD_SANC_VALID"))
							+ "^"
							+ strRevalDate
							+ "^"
							+ Helper.correctInt((String) rs
									.getString("PRD_REVALID_DAYS"))
							+ "^"
							+ Helper.correctNull((String) rs
									.getString("APP_PROCESSDATE"))
							+ "^"
							+ Helper.correctInt((String) rs
									.getString("PRD_NOTAVAILED_DAYS")));
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						hshValues.put("strSancValidity", Helper
								.correctNull((String) rs1
										.getString("sancvalidity")));
						hshValues.put("strRevalValidity", Helper
								.correctNull((String) rs1
										.getString("revalvalidity")));
						hshValues.put("strNotAvailedValidity", Helper
								.correctNull((String) rs1
										.getString("notavailedvalidity")));
					}
				}
			}

			if (rs != null) {
				rs.close();
			}
			strQuery = SQLParser.getSqlQuery("sel_revalidationComments^"
					+ strAppno + "^" + strFacilitysno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				hshValues.put("APP_NO", Helper.correctNull((String) rs
						.getString("APP_NO")));
				hshValues.put("APP_CREATEDBY", Helper.correctNull((String) rs
						.getString("APP_CREATEDBY")));
				hshValues.put("APP_PROCESSEDBY", Helper.correctNull((String) rs
						.getString("APP_PROCESSEDBY")));
				hshValues.put("APP_STATUS", Helper.correctNull((String) rs
						.getString("APP_STATUS")));
				hshValues.put("APP_REVALIDATION_REASON", Helper.CLOBToString(rs
						.getClob("APP_REVALIDATION_REASON")));
				hshValues.put("APP_SANCTION_CMTS", Helper.CLOBToString(rs
						.getClob("APP_SANCTION_CMTS")));
				hshValues.put("APP_REFERENCENO", Helper.correctNull(rs
						.getString("APP_REFERENCENO")));
				hshValues.put("strRecordFlag", "Y");
			}
			if (rs != null) {
				rs.close();
			}

			rs = DBUtils.executeLAPSQuery("sel_accountopenedfacilities^"
					+ strAppno + "^" + strFacilitysno + "^" + strAppno + "^"
					+ strFacilitysno);
			if (rs.next())
				hshValues.put("strAccFlag", "Y");

			if (rs != null) {
				rs.close();
			}

		}

		catch (Exception e) {
			throw new EJBException(e.getMessage());
		}
		return hshValues;

	}

	public HashMap updateRevalidateComments(HashMap hshValues)
			 {
		HashMap hshResult = new HashMap();
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		ResultSet rs = null;
		String strQuery = "", str_CREATEDORG = "", strUserId1 = "";
		String appno = Helper.correctNull((String) hshValues.get("appno"));
		String strUserId = (String) hshValues.get("strUserId");
		String strOrgScode = (String) hshValues.get("strOrgShortCode");
		String strAction = Helper.correctNull((String) hshValues
				.get("hidAction"));
		String strTouserid = (String) hshValues.get("hidmail_tousrid");
		String strStatus = Helper.correctNull((String) hshValues
				.get("sel_Status"));
		String strUserDepartment = Helper.correctNull((String) hshValues
				.get("strUserDepartment"));
		String strSessionModuleType = Helper.correctNull((String) hshValues
				.get("sessionModuleType"));
		String strFacsno = Helper.correctInt((String) hshValues
				.get("hidFacilitysno"));
		int intSize = 0;
		StringBuilder sbAuditTrial = new StringBuilder();
		StringBuilder sboldAudit = new StringBuilder();
		try {
			if (strAction.equalsIgnoreCase("")) {
				strAction = "insert";
			}

			if (!appno.equalsIgnoreCase("")) {
				strQuery = SQLParser.getSqlQuery("sel_revalidationComments^"
						+ appno + "^" + strFacsno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					if (strAction.equalsIgnoreCase("insert"))
						strAction = "update";
					sboldAudit.append("~ Reason for Revalidation=").append(
							Helper.CLOBToString(rs
									.getClob("APP_REVALIDATION_REASON")))
							.append("~Revalidation Approval comments=").append(
									Helper.CLOBToString(rs
											.getClob("APP_SANCTION_CMTS")));

				}
				if (rs != null) {
					rs.close();
				}
			}

			if (strAction.equalsIgnoreCase("insert")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "ins_revalidatecomments");
				arrValues.add(appno);
				arrValues.add(strUserId);
				arrValues.add(strOrgScode);
				arrValues.add("op");
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txtarea_comments")));
				arrValues.add(strUserDepartment);
				arrValues.add(strFacsno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", String.valueOf(++intSize));
				hshQueryValues.put(String.valueOf(intSize), hshQuery);

			} else if (strAction.equalsIgnoreCase("update")) {
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_revalidatecomments");
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txtarea_comments")));
				arrValues.add(appno);
				arrValues.add(strFacsno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", String.valueOf(++intSize));
				hshQueryValues.put(String.valueOf(intSize), hshQuery);
			}
			if (intSize > 0)
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			if (strAction.equalsIgnoreCase("approve")
					|| strAction.equalsIgnoreCase("reject")) {
				intSize = 0;
				if (strSessionModuleType.equalsIgnoreCase("RET")
						|| strSessionModuleType.equalsIgnoreCase("LAD")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_app_revalidData");
					arrValues.add(strUserId);
					arrValues.add("Y");
					if (strAction.equalsIgnoreCase("approve"))
						arrValues.add("pa");
					else
						arrValues.add("pr");
					arrValues.add(appno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", String.valueOf(++intSize));
					hshQueryValues.put(String.valueOf(intSize), hshQuery);
				} else if (strSessionModuleType.equalsIgnoreCase("AGR")
						|| strSessionModuleType.equalsIgnoreCase("CORP")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_fac_revalidData");
					arrValues.add(strUserId);
					arrValues.add("Y");
					if (strAction.equalsIgnoreCase("approve"))
						arrValues.add("pa");
					else
						arrValues.add("pr");
					arrValues.add(appno);
					arrValues.add(strFacsno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", String.valueOf(++intSize));
					hshQueryValues.put(String.valueOf(intSize), hshQuery);
				}

				String strReferenceno = "";
				if (strAction.equalsIgnoreCase("approve")) {
					hshValues.put("strPageID", "Revalidation");
					strReferenceno = getSanctionRefernceNumber(hshValues);
				}

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_app_revalidData1");
				arrValues.add(strUserId);
				arrValues.add(strOrgScode);
				if (strAction.equalsIgnoreCase("approve"))
					arrValues.add("pa");
				else
					arrValues.add("pr");
				arrValues.add(Helper.correctNull((String) hshValues
						.get("txtarea_comments1")));
				arrValues.add(strUserDepartment);
				arrValues.add(strReferenceno);
				arrValues.add(appno);
				arrValues.add(strFacsno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", String.valueOf(++intSize));
				hshQueryValues.put(String.valueOf(intSize), hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

			if (strAction.equalsIgnoreCase("undo")) {
				intSize = 0;
				if (strSessionModuleType.equalsIgnoreCase("RET")
						|| strSessionModuleType.equalsIgnoreCase("LAD")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_app_revalidData4");
					arrValues.add("op");
					arrValues.add(appno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", String.valueOf(++intSize));
					hshQueryValues.put(String.valueOf(intSize), hshQuery);
				} else if (strSessionModuleType.equalsIgnoreCase("AGR")
						|| strSessionModuleType.equalsIgnoreCase("CORP")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_fac_revalidData1");
					arrValues.add("op");
					arrValues.add(appno);
					arrValues.add(strFacsno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", String.valueOf(++intSize));
					hshQueryValues.put(String.valueOf(intSize), hshQuery);
				}

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "upd_app_revalidData2");
				arrValues.add(strUserId);
				arrValues.add("Y");
				arrValues.add("op");
				arrValues.add(null);
				arrValues.add(null);
				arrValues.add(null);
				arrValues.add(null);
				arrValues.add(null);
				arrValues.add(appno);
				arrValues.add(strFacsno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("size", String.valueOf(++intSize));
				hshQueryValues.put(String.valueOf(intSize), hshQuery);

				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");
			}

			if (strAction.equalsIgnoreCase("send")) {
				intSize = 0;
				if (strSessionModuleType.equalsIgnoreCase("RET")
						|| strSessionModuleType.equalsIgnoreCase("LAD")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_app_revalidData");
					arrValues.add(strTouserid);
					arrValues.add("Y");
					arrValues.add("op");
					arrValues.add(appno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", String.valueOf(++intSize));
					hshQueryValues.put(String.valueOf(intSize), hshQuery);

					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				} else if (strSessionModuleType.equalsIgnoreCase("AGR")
						|| strSessionModuleType.equalsIgnoreCase("CORP")) {
					hshQuery = new HashMap();
					arrValues = new ArrayList();
					hshQuery.put("strQueryId", "upd_fac_revalidData");
					arrValues.add(strTouserid);
					arrValues.add("Y");
					arrValues.add("op");
					arrValues.add(appno);
					arrValues.add(strFacsno);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("size", String.valueOf(++intSize));
					hshQueryValues.put(String.valueOf(intSize), hshQuery);
					EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
							"updateData");
				}
			}

			hshResult = getRevalidateComments(hshValues);

			hshResult.put("strStatus", strAction);

			sbAuditTrial.append("~ Reason for Revalidation=").append(
					Helper.correctNull((String) hshValues
							.get("txtarea_comments"))).append(
					"~Revalidation Approval comments=").append(
					Helper.correctNull((String) hshValues
							.get("txtarea_comments1")))
					.append("~Facility_sno=").append(strFacsno);
			if (strAction.equalsIgnoreCase("send")) {
				sbAuditTrial.append("~ Sent To =").append(strTouserid);
			}

			hshValues.put("strAction", strAction);

			AuditTrial.auditNewLog(hshValues, "244", appno, sbAuditTrial
					.toString(), sboldAudit.toString());
		} catch (Exception e) {
			throw new EJBException("Error in Insert Data " + e.getMessage());
		}
		return hshResult;
	}

	public HashMap updateDigiSanctionDetails(HashMap hshValues)
			 {
		ResultSet rs = null, rs1 = null, rs3 = null, rs2 = null;
		String strAppno = Helper
				.correctNull((String) hshValues.get("strappno"));
		if (strAppno.equals("")) {
			strAppno = Helper.correctNull((String) hshValues.get("appno"));
		}
		if (strAppno.equals("")) {
			strAppno = Helper.correctNull((String) hshValues
					.get("hidProposalNum"));
		}
		String strAction = Helper.correctNull((String) hshValues
				.get("hidAction"));
		String strUserId = Helper.correctNull((String) hshValues
				.get("strUserId"));
		String orgscode = Helper.correctNull((String) hshValues
				.get("strOrgShortCode"));
		String strUserClass = Helper.correctNull((String) hshValues
				.get("strUserClass"));
		String hidKYCChk = Helper.correctNull((String) hshValues
				.get("hidKYCChk"));
		String strAdd = Helper.correctNull((String) hshValues.get("sel_add"));
		String strEmpl = Helper.correctNull((String) hshValues
				.get("sel_employment"));
		String strBnkstmt = Helper.correctNull((String) hshValues
				.get("sel_bankstat"));
		String strappid = Helper.correctNull((String) hshValues
				.get("hidapplicantid"));
		// String strchkpan=Helper.correctNull((String)
		// hshValues.get("hid_PANuser"));
		String strcustflag = Helper.correctNull((String) hshValues
				.get("strcbscustflag"));
		String strfipending = Helper.correctNull((String) hshValues
				.get("hid_FIPEND_FLAG"));
		String strkycPending = Helper.correctNull((String) hshValues
				.get("hid_KYCPEND_FLAG"));
		String stremanPending = Helper.correctNull((String) hshValues
				.get("hid_EMANPEND_FLAG"));
		String str_sms_flag = "";
		String strtxt_comments = Helper.correctNull((String) hshValues
				.get("txt_sanctioncomments"));

		String strQuery = "", strMessage = "";
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		CommWorkflowBean commwrkfko = new CommWorkflowBean();

		try {
			if (strAction.equalsIgnoreCase("Submit")) {
				/*
				 * if(rs!=null){rs.close();}
				 * strQuery=SQLParser.getSqlQuery("sel_userid_appl^"+strAppno);
				 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) {
				 * strUserId=Helper.correctNull((String)rs.getString("USR_ID"));
				 * orgscode
				 * =Helper.correctNull((String)rs.getString("ORG_SCODE"));
				 * strUserClass
				 * =Helper.correctNull((String)rs.getString("USR_CLASS")); }
				 */

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "commworkflowupd");
				arrValues.add("pa");
				arrValues.add(strUserId);
				arrValues.add(strtxt_comments);
				arrValues.add(orgscode);
				arrValues.add(strUserClass);
				arrValues.add("");
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				String strInwardno = "";
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strInwardno = Helper.correctNull((String) rs
							.getString("app_inwardno"));
				}
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updinwardappstatus");
				arrValues.add("pa");
				arrValues.add(strInwardno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				// sms service
				DigitalAppInterfaceBean digi = new DigitalAppInterfaceBean();
				hshValues = digi.updateSubmitData(hshValues);

				// sanction reference numnber
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("sel_userdet_userid^"
						+ strUserId);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					hshValues.put("strSolid", Helper.correctNull((String) rs
							.getString("ORG_SCODE")));
					hshValues.put("strOrgLevel", Helper.correctNull((String) rs
							.getString("ORG_LEVEL")));
					hshValues.put("strOrgCode", Helper.correctNull((String) rs
							.getString("ORG_CODE")));
					hshValues.put("strUserDepartments", Helper
							.correctNull((String) rs
									.getString("USR_DEPARTMENT")));
				}
				hshValues.put("hidAction", "approve");
				hshValues.put("sessionModuleType", "RET");
				hshValues.put("strApplicationType", "F");
				hshValues.put("digiloan", "Y");

				String strReferenceno = commwrkfko
						.getSanctionRefernceNumber(hshValues);

				hshValues.put("strReferenceno", strReferenceno);
				hshValues.put("strSanctionDate", Helper.getCurrentDateTime());

			} else if (strAction.equalsIgnoreCase("undo")) {
				hshQueryValues = new HashMap();

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "commworkflowundo1");
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add("y");
				arrValues.add(strAppno);
				hshQuery.put("strQueryId", "updreferencenum");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("2", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(strUserId);
				arrValues.add("Y");
				arrValues.add(strAppno);
				hshQuery.put("strQueryId", "upd_undousrdet");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("3", hshQuery);

				String strInwardno = "";
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strInwardno = Helper.correctNull((String) rs
							.getString("app_inwardno"));
				}

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add("op");
				arrValues.add(strInwardno);
				hshQuery.put("strQueryId", "updinwardappstatus");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("4", hshQuery);

				hshQuery = new HashMap();
				arrValues = new ArrayList();
				arrValues.add(strAppno);
				hshQuery.put("strQueryId", "upd_retailapplicantid");
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("5", hshQuery);

				hshQueryValues.put("size", "5");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			} else if (strAction.equalsIgnoreCase("reject")) {
				String strInwardno = "";
				if (rs != null) {
					rs.close();
				}
				strQuery = SQLParser.getSqlQuery("comfunsel1^" + strAppno);
				rs = DBUtils.executeQuery(strQuery);
				if (rs.next()) {
					strInwardno = Helper.correctNull((String) rs
							.getString("app_inwardno"));
				}
				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "updinwardappstatus");
				arrValues.add("pr");
				arrValues.add(strInwardno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "commworkflowupddigi");
				arrValues.add("pr");
				arrValues.add(strUserId);
				arrValues.add(orgscode);
				arrValues.add(strUserClass);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

				hshValues.put("hidAction", "approve");
				hshValues.put("sessionModuleType", "RET");
				hshValues.put("strApplicationType", "F");
				hshValues.put("digiloan", "Y");

				String strReferenceno = commwrkfko
						.getSanctionRefernceNumber(hshValues);

				hshValues.put("strReferenceno", strReferenceno);
				hshValues.put("strSanctionDate", Helper.getCurrentDateTime());

				hshQueryValues = new HashMap();
				hshQuery = new HashMap();
				arrValues = new ArrayList();
				hshQuery.put("strQueryId", "update_comment");
				arrValues.add(strtxt_comments);
				arrValues.add(strAppno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				hshQueryValues.put("size", "1");
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updateData");

			}

		} catch (Exception e) {
			throw new EJBException(
					"Error in DigitalAppInterface Bean updateSanctionDetails..."
							+ e.toString());
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException(
						"Error in DigitalAppInterface Bean updateSanctionDetails in clossing connection..."
								+ e.toString());
			}
		}

		return hshValues;
	}

	public HashMap manualloanAccountCreationService(HashMap hshValues)
			 {

		String line = "", strRequestUuid = "", strInputXMLRequest = "", strRes = "", strServiceReqId = "", strServiceReqVersion = "", strChannelId = "", strBankId = "", strMsgDateTim = "", strRequestId = "", strInputVal = "", strstatus = "", strMessage = "", strMobileno = "", strresultmsg = "", strMessageDateTime = "", strQuery = "";
		ResultSet rs = null, rs1 = null, rs2 = null;
		String strAccountno = "";
		HashMap accountFlat = new HashMap();

		try {

			String hidAction = Helper.correctNull((String) hshValues
					.get("hidAction"));
			String appno = Helper.correctNull((String) hshValues.get("appno"));
			String strdepositprdtype = "", strdigisubtype = "";
			if (hidAction.equals("manualCBS")) {
				strQuery = SQLParser.getSqlQuery("sel_AccountHandOffDetails^"
						+ appno);
				rs = DBUtils.executeQuery(strQuery);

				strQuery = SQLParser
						.getCBSSqlQuery("sel_cbs_accno_fromfinacle_newconnection^"
								+ appno);
				rs1 = DBUtils.executeQueryCBSConnection(strQuery);

				if (!(rs.next() || rs1.next())) {
					hshValues.put("moduleType", "RETDIGI");
					strQuery = SQLParser
							.getSqlQuery("sel_depositmanualcreation^" + appno);
					rs2 = DBUtils.executeQuery(strQuery);
					if (rs2.next()) {// aif
						hshValues.put("strPrdType",
								Helper.correctNull((String) rs2
										.getString("prd_type")));
						hshValues.put("strdigiType", Helper
								.correctNull((String) rs2
										.getString("APP_LOANSUBTYPE_DIGI")));
						strdepositprdtype = Helper.correctNull((String) rs2
								.getString("prd_type"));
						strdigisubtype = Helper.correctNull((String) rs2
								.getString("APP_LOANSUBTYPE_DIGI"));
					}
					if (rs2 != null) {
						rs2.close();
					}
					FinacleInterfaceBean getAccountFlatFileReportObj = new FinacleInterfaceBean();
					accountFlat = getAccountFlatFileReportObj
							.getOtherFlatFileReport(hshValues);

					log
							.info("Loan Account Trigger Service ========== Data Pushed to Staging Table");
					log.info("**************strdepositprdtype***************"
							+ strdepositprdtype);
					log.info("**************strdigisubtype***************"
							+ strdigisubtype);
				}
			}

			log
					.info("Loan Account Trigger Service ========== CBS Account Creation API Started");

			HashMap hshQueryValues = new HashMap();
			HashMap hshQuery = new HashMap();
			ArrayList arrValues = new ArrayList();

			String strSolID = "";
			strQuery = SQLParser.getSqlQuery("sel_cbsdetails^" + appno + "^1");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				strSolID = Helper.correctNull((String) rs
						.getString("LOANDISBBRANCH"));
			}

			SimpleDateFormat simpledateformat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss.SSS");
			strMessageDateTime = simpledateformat.format(new Date());

			log
					.info("Loan Account Trigger Service ========== Request Generation");

			if ((strdepositprdtype.equalsIgnoreCase("pR") || strdepositprdtype
					.equalsIgnoreCase("pG"))
					&& (strdigisubtype.equalsIgnoreCase(""))) {
				strInputXMLRequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><FIXML xsi:schemaLocation=\"http://www.finacle.com/fixml RetCustInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"
						+ "<Header><RequestHeader><MessageKey><RequestUUID> Req_"
						+ appno
						+ " </RequestUUID><ServiceRequestId>executeFinacleScript"
						+ "</ServiceRequestId><ServiceRequestVersion>10.2</ServiceRequestVersion><ChannelId>COR</ChannelId></MessageKey>"
						+ "<RequestMessageInfo><BankId>01</BankId><MessageDateTime>"
						+ strMessageDateTime
						+ "</MessageDateTime></RequestMessageInfo>"
						+ "</RequestHeader></Header><Body><executeFinacleScriptRequest>"
						+ "<ExecuteFinacleScriptInputVO><requestId>lnodopn_gldl.scr</requestId></ExecuteFinacleScriptInputVO>"
						+ "<executeFinacleScript_CustomData><InputVal>"
						+ appno
						+ "1"
						+ strSolID
						+ "</InputVal></executeFinacleScript_CustomData></executeFinacleScriptRequest></Body></FIXML>";
			} else {
				strInputXMLRequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><FIXML xsi:schemaLocation=\"http://www.finacle.com/fixml RetCustInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"
						+ "<Header><RequestHeader><MessageKey><RequestUUID> Req_"
						+ appno
						+ " </RequestUUID><ServiceRequestId>executeFinacleScript"
						+ "</ServiceRequestId><ServiceRequestVersion>10.2</ServiceRequestVersion><ChannelId>COR</ChannelId></MessageKey>"
						+ "<RequestMessageInfo><BankId>01</BankId><MessageDateTime>"
						+ strMessageDateTime
						+ "</MessageDateTime></RequestMessageInfo>"
						+ "</RequestHeader></Header><Body><executeFinacleScriptRequest>"
						+ "<ExecuteFinacleScriptInputVO><requestId>lnodopn_digiloan.scr</requestId></ExecuteFinacleScriptInputVO>"
						+ "<executeFinacleScript_CustomData><InputVal>"
						+ appno
						+ "1"
						+ strSolID
						+ "</InputVal></executeFinacleScript_CustomData></executeFinacleScriptRequest></Body></FIXML>";

			}
			log
					.info("################@@@@@@@@@@@@@ Loan Account Creation Requet @@@@@@@@@@@@@################"
							+ strInputXMLRequest);

			// LogWriter.log(LAPSLogLevel.ERROR,""+"################@@@@@@@@@@@@@    Service URL      @@@@@@@@@@@@@################"+
			// ApplicationParams.getstrCHMCIBILURL());
			// System.out.println("################@@@@@@@@@@@@@    Service URL      @@@@@@@@@@@@@################"+
			// ApplicationParams.getstrCHMCIBILURL());
			URL url = new URL(ApplicationParams.getStrCBSIDCreation());
			log.info("Loan Account Creation URL ===> " + url);
			// HttpURLConnection urlcon = (HttpURLConnection)
			// url.openConnection();
			HttpsURLConnection urlcon = (HttpsURLConnection) url
					.openConnection();

			urlcon.setRequestProperty("User-Agent", "");
			urlcon.setDoInput(true);
			urlcon.setDoOutput(true);
			urlcon.setRequestMethod("POST");
			urlcon.setRequestProperty("Content-Type",
					"application/xml;charset=UTF-8");

			OutputStreamWriter osw = new OutputStreamWriter(urlcon
					.getOutputStream(), "UTF-8");

			BufferedWriter bWriter = new BufferedWriter(osw);
			bWriter.write(strInputXMLRequest);
			bWriter.close();

			InputStream inputStream = urlcon.getInputStream();
			InputStreamReader isreader = new InputStreamReader(inputStream,
					"UTF-8");

			BufferedReader rd = new BufferedReader(isreader);
			if (rd != null) {
				StringBuffer result = new StringBuffer();
				while ((line = rd.readLine()) != null) {
					result.append(line);
				}
				log
						.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
								+ result.toString());
				// LogWriter.log(LAPSLogLevel.ERROR,""+"############@@@@@@@@@@@@@  Response  @@@@@@@@@@@@@############"
				// + result.toString());
				strRes = result.toString();
				System.out.println(strRes);

				try {

					String responseCbs = result.toString();
					responseCbs = responseCbs.replace("^([\\W]+)<", "<");
					responseCbs = responseCbs.replace("utf-16", "utf-8");

					int nodesize = 0;
					DocumentBuilderFactory docbuildfactory = DocumentBuilderFactory
							.newInstance();
					DocumentBuilder docBuilder = docbuildfactory
							.newDocumentBuilder();
					Document doc = docBuilder.parse(new ByteArrayInputStream(
							responseCbs.getBytes()));
					doc.getDocumentElement().normalize();

					String strStatus = "";
					NodeList nodesListheader = doc
							.getElementsByTagName("executeFinacleScript_CustomData");
					strStatus = (String) ((Element) nodesListheader.item(0))
							.getElementsByTagName("SuccessOrFailure").item(0)
							.getChildNodes().item(0).getNodeValue();

					NodeList nodesList = doc.getElementsByTagName("Body");
					if (strStatus.equalsIgnoreCase("Y")) {
						strresultmsg = (String) ((Element) nodesList.item(0))
								.getElementsByTagName("RESULT_MSG").item(0)
								.getChildNodes().item(0).getNodeValue();
						strAccountno = (String) ((Element) nodesList.item(0))
								.getElementsByTagName("RESULT_MSG1").item(0)
								.getChildNodes().item(0).getNodeValue();
						strstatus = "Success";
					} else {
						strresultmsg = (String) ((Element) nodesList.item(0))
								.getElementsByTagName("Error_1").item(0)
								.getChildNodes().item(0).getNodeValue();
						if (strresultmsg.contains("already opened in FINACLE"))
							strAccountno = (String) ((Element) nodesList
									.item(0)).getElementsByTagName("Error_2")
									.item(0).getChildNodes().item(0)
									.getNodeValue();
						strstatus = "Failure";
					}

					hshValues.put("resultmsg", strresultmsg);
					hshValues.put("strstatus", strstatus);
					hshValues.put("strAccountno", strAccountno);

					if (strstatus.equalsIgnoreCase("Success")) {
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						hshQuery.put("strQueryId", "upd_cbs_accno_laps");
						arrValues = new ArrayList();
						arrValues.add(strAccountno);
						arrValues.add(appno);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}

					if (!strstatus.equalsIgnoreCase("SUCCESS")) {
						hshQueryValues = new HashMap();
						hshQuery = new HashMap();
						hshQuery.put("strQueryId", "ins_cbs_api_error_status");
						arrValues = new ArrayList();
						arrValues.add("");
						arrValues.add(strresultmsg);// appraised by
						arrValues.add(appno);
						arrValues.add("Loan Account Creation");
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
					}

					if (strstatus.equalsIgnoreCase("SUCCESS")) {
						String strAppno = (String) hshValues.get("appno");

						rs = DBUtils.executeLAPSQuery("sel_sms_master");
						if (rs.next()) {
							strMessage = Helper.correctNull(rs
									.getString("SMS_CBS_ACCOUNT_CREATION"));
						}

						rs = DBUtils.executeLAPSQuery("sel_appdetails_sms^"
								+ strAppno);
						if (rs.next()) {
							strMessage = strMessage.replaceAll("@CName", Helper
									.correctNull(rs.getString("perapp_fname")));
							strMessage = strMessage.replaceAll("@SAMT", Helper
									.correctDouble(rs
											.getString("loan_recmdamt")));
							strMobileno = Helper.correctNull(rs
									.getString("con_mobile"));
						}

						String query = null;
						URLConnection conn = null;
						String charset = "UTF-8";
						try {
							query = String
									.format(
											"dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
											ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),
											URLEncoder
													.encode(ApplicationParams
															.getStrSMSUserID(),
															charset),
											ApplicationParams
													.getStrSMSPassword(),
													 URLEncoder
													.encode(ApplicationParams
															.getStrSMSSender(),
															charset),
											URLEncoder.encode(strMobileno,
													charset),
											URLEncoder.encode(ApplicationParams
													.getStrSMSTypeFlag(),
													charset),
											URLEncoder.encode(strMessage,
													charset));

							// log.info("==================Invoking Service in Try Block================"+ApplicationParams.getStrSMSURL()
							// + "?" + query);
							conn = new URL(ApplicationParams.getStrSMSURL()
									+ "?" + query).openConnection();
							// log.info("================== Service Ended================");

						} catch (Exception e) {
							query = "dcode="
									+ ApplicationParams.getStrSMSDCode()
									+ "&userid="
									+ ApplicationParams.getStrSMSUserID()
									+ "&pwd="
									+ ApplicationParams.getStrSMSPassword()
									+ "&sender="
									+ ApplicationParams.getStrSMSSender()
									+ "&pno=" + strMobileno + "&msgtype="
									+ ApplicationParams.getStrSMSTypeFlag()
									+ "&msgtxt=" + strMessage;
							// log.info("==================Invoking Service in Catch Block================"+ApplicationParams.getStrSMSURL()
							// + "?" + query);
							conn = new URL(ApplicationParams.getStrSMSURL()
									+ "?" + query).openConnection();
							// log.info("================== Service Ended================");

							throw new EJBException(
									"Exception in viewDocumentData ==="
											+ e.getMessage());
						}

					}

				}

				catch (Exception e) {
					System.out.println("Exception.....................");
					e.printStackTrace();
					throw new EJBException("Exception in Input Output ==="
							+ e.getMessage());

				}

			}
			if (hidAction.equals("manualCBS")) {
				CommWorkflowBean cmmwrkflow = new CommWorkflowBean();
				hshValues = cmmwrkflow.getHistory(hshValues);
			}

		} catch (Exception ex) {
			// .LogWriter.log(LAPSLogLevel.ERROR,""+"Exception in updateCHMCIBILreport"
			// + ex);
			ex.printStackTrace();
			throw new EJBException("Error in loanAccountCreationService"
					+ ex.getMessage());

		}

		finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				throw new EJBException("Error in closing Connection "
						+ e.getMessage());
			}
		}

		return hshValues;
	}

	public HashMap msmeInPrinciple(HashMap hshValues) 

	{
		HashMap hshQuery = new HashMap();
		HashMap hshRecord = new HashMap();
		ArrayList arrValues = new ArrayList();
		ArrayList arrFacilities = new ArrayList();
		HashMap hshQueryValues = new HashMap();
		ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null;
		String strInputJSONRequest = "", line = "", strQuery = "", strAppno = "", appRefNo = "", facilityLimit = "", facStatus = "", appcbsId = "", facilityId = "", sanctionAmount = "", interestRate = "", facilities = "", facilityStatus = "", facilityTenor = "", facHolidayPeriod = "", usrid = "", usrclass = "", usrDesig = "", usrDept = "", usrFname = "", usrGrpid = "", usrFun = "", usrScode = "", strsanctionPersonDetails = "", facheadcode = "", facsecamount = "";
		strAppno = correctNull((String) hshValues.get("appno"));

		// System.out.print(hshValues);

		try {

			strQuery = SQLParser.getSqlQuery("sel_AppRefNo^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				appRefNo = Helper.correctNull((String) rs
						.getString("INWARD_DIGIAPPNO"));

			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_msme_cbsid^" + strAppno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				appcbsId = Helper.correctNull((String) rs
						.getString("PERAPP_CBSID"));
			}
			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_facility_Inprinciple^"
					+ strAppno);
			rs = DBUtils.executeQuery(strQuery);

			while (rs.next()) {
				facilityId = Helper.correctNull((String) rs
						.getString("FACILITY_ID"));
				sanctionAmount = Helper.correctNull((String) rs
						.getString("FACILITY_SANCAMT"));
				// facilityLimit=Helper.correctNull((String)rs.getString("facility_freshlimit"));
				interestRate = Helper.correctNull((String) rs
						.getString("FACILITY_INTEREST"));
				facilityStatus = Helper.correctNull((String) rs
						.getString("FACILITY_SANCSTATUS"));
				if (facilityStatus.equals("A"))
					facStatus = "ACCEPTED";
				if (facilityStatus.equals("R"))
					facStatus = "REJECTED";
				facilityTenor = Helper.correctNull((String) rs
						.getString("FACILITY_MONTHS"));
				facHolidayPeriod = Helper.correctNull((String) rs
						.getString("FACILITY_HOLIDAYPERIOD"));
				facsecamount = Helper.correctNull((String) rs
						.getString("FACILITY_SECAMOUNT"));
				if (facsecamount.equals("")) {
					facsecamount = "0";
				}
				facheadcode = Helper.correctNull((String) rs
						.getString("FACILITY_CODE"));

				facilities = "{\"FacilityId\": \"" + facilityId
						+ "\", \"SanctionAmount\": \"" + sanctionAmount
						+ "\" ,\"InterestRate\": \"" + interestRate
						+ "\",\"Status\":\"" + facStatus + "\","
						+ "\"HolidayPeriod\":\"" + facHolidayPeriod
						+ "\",\"Tenor\":\"" + facilityTenor + "\","
						+ "\"facilityName\":\"" + facheadcode
						+ "\",\"loanAmount\":\"" + sanctionAmount + "\","
						+ "\"CollartralAmount\":\"" + facsecamount + "\"}";

				arrFacilities.add(facilities);

			}

			if (rs != null)
				rs.close();
			strQuery = SQLParser.getSqlQuery("sel_devcheck^" + strAppno + "^"
					+ "S");
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				usrid = Helper.correctNull((String) rs.getString("COM_USER"));
				if (!usrid.equalsIgnoreCase("")) {
					strQuery = SQLParser.getSqlQuery("msme_usr^" + usrid);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						usrclass = Helper.correctNull((String) rs1
								.getString("USR_CLASS"));
						usrDesig = Helper.correctNull((String) rs1
								.getString("USER_DESIGNATION"));
						usrDept = Helper.correctNull((String) rs1
								.getString("USR_DEPARTMENT"));
						usrFname = Helper.correctNull((String) rs1
								.getString("USR_FNAME"));
						usrGrpid = Helper.correctNull((String) rs1
								.getString("USR_GRPID"));
						usrFun = Helper.correctNull((String) rs1
								.getString("USR_FUNCTION"));
						usrScode = Helper.correctNull((String) rs1
								.getString("ORG_SCODE"));

					}
				}

				if (!usrDesig.equalsIgnoreCase("")) {
					if (rs1 != null)
						rs1.close();
					strQuery = SQLParser.getSqlQuery("selcbsiddatadesc^" + "27"
							+ "^" + usrDesig);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						usrDesig = Helper.correctNull((String) rs1
								.getString("cbs_static_data_desc"));
					}
				}

				if (!usrGrpid.equalsIgnoreCase("")) {
					if (rs1 != null)
						rs1.close();
					strQuery = SQLParser.getSqlQuery("setgroupssel_audit^"
							+ usrGrpid);
					rs1 = DBUtils.executeQuery(strQuery);
					if (rs1.next()) {
						usrGrpid = Helper.correctNull((String) rs1
								.getString("grp_name"));
					}
				}
				strsanctionPersonDetails = "{\"classPower\": " + usrclass
						+ ", \"designation\": \"" + usrDesig
						+ "\" ,\"department\": \"" + usrDept
						+ "\",\"solid\":\"" + usrScode + "\",\"group\":\""
						+ usrGrpid + "\",\"function\":\"" + usrFun
						+ "\",\"name\":\"" + usrFname + "\"}";
			}

			if (strsanctionPersonDetails.equals("")) {
				strsanctionPersonDetails = "{\"classPower\":\"" + usrclass
						+ "\" , \"designation\": \"" + usrDesig
						+ "\" ,\"department\": \"" + usrDept
						+ "\",\"solid\":\"" + usrScode + "\",\"group\":\""
						+ usrGrpid + "\",\"function\":\"" + usrFun
						+ "\",\"name\":\"" + usrFname + "\"}";
			}

			strInputJSONRequest = "{\"ApplicationRefNum\": \"" + appRefNo
					+ "\",\"custId\": \"" + appcbsId + "\", \"Facility\":"
					+ arrFacilities + ", \"sanctionPersonDetails\":"
					+ strsanctionPersonDetails + "}";

			log
					.info("################@@@@@@@@@@@@@ Sanction Service request @@@@@@@@@@@@@################"
							+ strInputJSONRequest);

			// System.out.println("################@@@@@@@@@@@@@   FinalInPrinciple Service URL  @@@@@@@@@@@@@################"+
			URL url = new URL(ApplicationParams.getStrInprincipleUrl());
			log.info("FinalInPrinciple Url=========== " + url);

			HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
			urlcon.setRequestProperty("User-Agent", "");
			urlcon.setDoInput(true);
			urlcon.setDoOutput(true);
			urlcon.setRequestMethod("POST");
			urlcon.setRequestProperty("Content-Type",
					"application/json;charset=UTF-8");
			urlcon.setRequestProperty("Authorization", ApplicationParams
					.getStrInprincipleAuthValue());
			OutputStream outputStream = urlcon.getOutputStream();
			OutputStreamWriter osw = new OutputStreamWriter(outputStream,
					"UTF8");

			BufferedWriter bWriter = new BufferedWriter(osw);
			bWriter.write(strInputJSONRequest);
			bWriter.close();

			InputStream inputStream = urlcon.getInputStream();
			InputStreamReader isreader = new InputStreamReader(inputStream,
					"UTF-8");

			BufferedReader rd = new BufferedReader(isreader);

			if (rd != null) {
				StringBuffer result = new StringBuffer();
				while ((line = rd.readLine()) != null) {
					result.append(line);
				}

				log
						.info("################@@@@@@@@@@@@@ InprincipleService Response @@@@@@@@@@@@@################ "
								+ result.toString());

				JSONObject json = new JSONObject(result.toString());
				String resultStatus = String.valueOf(json.get("status"));
				if (!(resultStatus.equalsIgnoreCase("200"))) {
					throw new Exception("InprincipleSanctionStatus Error");

				}

				// JSONObject status = json.getJSONObject("status");
				// hshValues.put("InprincipleStatus",(String)json.get("status"));

			}
		} catch (Exception e) {
			System.out
					.println("Exception.....................InprincipleService");
			e.printStackTrace();
			throw new EJBException("Exception in InprincipleService ==="
					+ e.getMessage());

		}
		return hshValues;
	}

	// /====================================sms triggering
	// =========================================================//

	public void updsmsTrigger(HashMap hshValues)  {
		ResultSet rs = null;
		ResultSet rs2 = null, rs4 = null;
		int intUpdateSize = 0;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		ArrayList arrRowsmsdate = new ArrayList();
		ArrayList arrColsmsdate = new ArrayList();

		String strMessage = "", strMobileno = "", strRejReason = "", strfacappno = "", strfacsno = "";
		boolean bflag = false;

		try {

			rs = DBUtils.executeLAPSQuery("selstatdatabyiddescsms");
			while (rs.next()) {
				arrRowsmsdate.add(Helper.correctNull(rs
						.getString("stat_data_desc")));
				// bflag=true;

			}
			if (rs != null) {
				rs.close();
			}
			if (arrRowsmsdate != null) {
				rs2 = DBUtils.executeLAPSQuery("sel_sms_master");

				if (rs2.next()) {
					strMessage = Helper.correctNull(rs2
							.getString("SMS_CARLOAN"));
				}

				if (rs2 != null)
					rs2.close();

				rs4 = DBUtils.executeLAPSQuery("sel_fetchsmdet");
				while (rs4.next()) {
					if (arrRowsmsdate.contains(Helper.correctNull(rs4
							.getString("noofdays")))) {
						arrValues = new ArrayList();
						strMessage = strMessage.replaceAll("@CName", Helper
								.correctNull(rs4.getString("perapp_name")));
						// strMobileno="8686743083";
						strMobileno = Helper.correctNull(rs4
								.getString("mobile"));
						strfacappno = Helper
								.correctNull(rs4.getString("appno"));
						strfacsno = Helper.correctNull(rs4
								.getString("facility_sno"));
						arrValues.add(Helper.correctNull(rs4
								.getString("perapp_name")));
						arrValues.add(Helper.correctNull(rs4
								.getString("mobile")));
						arrValues.add(Helper
								.correctNull(rs4.getString("appno")));
						arrValues.add(Helper.correctNull(rs4
								.getString("facility_sno")));

						if (!strMobileno.equalsIgnoreCase("")) {
							
							log
									.info("================== Message Service================");
							String charset = "UTF-8", strFileIds = "";

							String query = null;
							URLConnection conn = null;

							try {
								query = String
										.format(
												"dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
												ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSUserID(),
																charset),
												
																ApplicationParams
																		.getStrSMSPassword(),
																
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSSender(),
																charset),
												URLEncoder.encode(strMobileno,
														charset),
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSTypeFlag(),
																charset),
												URLEncoder.encode(strMessage,
														charset));
								/*query = String.format("dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
										URLEncoder.encode(ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),charset), URLEncoder.encode(ApplicationParams.getStrSMSUserID(), charset), URLEncoder
												.encode(ApplicationParams.getStrSMSPassword(), charset), URLEncoder.encode(ApplicationParams.getStrSMSSender(), charset), URLEncoder
												.encode(strMobileno, charset), URLEncoder.encode(ApplicationParams.getStrSMSTypeFlag(), charset),
												URLEncoder.encode(strMessage, charset));*/

								log
										.info("==================Invoking Service in Try Block================"
												+ ApplicationParams
														.getStrSMSURL()
												+ "?"
												+ query);
								conn = new URL(ApplicationParams.getStrSMSURL()
										+ "?" + query).openConnection();
								
								
								
								log
										.info("================== Service Ended================");

							} catch (Exception e) {
								/*query = String.format("dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
										URLEncoder.encode(ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),charset), URLEncoder.encode(ApplicationParams.getStrSMSUserID(), charset), URLEncoder
												.encode(ApplicationParams.getStrSMSPassword(), charset), URLEncoder.encode(ApplicationParams.getStrSMSSender(), charset), URLEncoder
												.encode(strMobileno, charset), URLEncoder.encode(ApplicationParams.getStrSMSTypeFlag(), charset),
												URLEncoder.encode(strMessage, charset));*/
								
								query = String
								.format(
										"dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
										ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),
										URLEncoder
												.encode(
														ApplicationParams
																.getStrSMSUserID(),
														charset),
										
														ApplicationParams
																.getStrSMSPassword(),
														
										URLEncoder
												.encode(
														ApplicationParams
																.getStrSMSSender(),
														charset),
										URLEncoder.encode(strMobileno,
												charset),
										URLEncoder
												.encode(
														ApplicationParams
																.getStrSMSTypeFlag(),
														charset),
										URLEncoder.encode(strMessage,
												charset));
								
								log
										.info("==================Invoking Service in Catch Block================"
												+ ApplicationParams
														.getStrSMSURL()
												+ "?"
												+ query);
								conn = new URL(ApplicationParams.getStrSMSURL()
										+ "?" + query).openConnection();
								log
										.info("================== Service Ended================");

							}
                            
							conn.setDoOutput(true);
							conn.setRequestProperty("Accept-Charset", charset);
							BufferedReader br = new BufferedReader(
									new InputStreamReader(conn.getInputStream()));
							String output;
							while ((output = br.readLine()) != null) {
								strFileIds += output;
							}
							log
							.info("================== strFileIds================"+strFileIds);
							hshQuery = new HashMap();
							hshQueryValues = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strMobileno);
							arrValues.add(strMessage);
							arrValues.add(strFileIds);
							arrValues.add(strfacappno);
							arrValues.add(strfacsno);
							hshQuery.put("strQueryId", "ins_carsmshistroy");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");

						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception.....................updsmsTrigger");
			e.printStackTrace();
			throw new EJBException("Exception in updsmsTrigger ==="
					+ e.getMessage());

		}
	}

	
	
	public void updsmsforsecurity(HashMap hshValues) throws EJBException {
		ResultSet rs = null;
		ResultSet rs2 = null, rs4 = null;
		int intUpdateSize = 0;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		ArrayList arrRowsmsdate = new ArrayList();
		ArrayList arrColsmsdate = new ArrayList();

		String strMessage90 = "", strMobileno = "", strRejReason = "", strfacappno = "", strfacsno = "";
		String strMessage60="";
		String strMessage30="";
		String strMessage07="",str90="",str60="",str30="",str07="";
		
		boolean bflag = false;

		try {
			
			if(rs != null)
			{
				rs.close();
			}
			rs = DBUtils.executeLAPSQuery("sel_sms_master");
			if (rs.next()) {
				
				strMessage90 = Helper.correctNull(rs.getString("SMS_SECURITY_90"));
				strMessage60 = Helper.correctNull(rs.getString("SMS_SECURITY_60"));
				strMessage30 = Helper.correctNull(rs.getString("SMS_SECURITY_30"));
				strMessage07 = Helper.correctNull(rs.getString("SMS_SECURITY_07"));
				str90=strMessage90;
				str60=strMessage60;
				str30=strMessage30;
				str07=strMessage07;
			}
			if(rs4 != null)
			{
				rs4.close();
			}
			String exdScode="";
			String exdsecid="";
			rs4 = DBUtils.executeLAPSQuery("sel_fetchsmdetforsecurity");
			
			while (rs4.next()) {
				
				/*if(rs != null)
				{
					rs.close();
				}
				rs = DBUtils.executeLAPSQuery("sel_sms_master");
				if (rs.next()) {
					
					strMessage90 = Helper.correctNull(rs.getString("SMS_SECURITY_90"));
					strMessage60 = Helper.correctNull(rs.getString("SMS_SECURITY_60"));
					strMessage30 = Helper.correctNull(rs.getString("SMS_SECURITY_30"));
					strMessage07 = Helper.correctNull(rs.getString("SMS_SECURITY_07"));
				}
				if(rs != null)
				{
					rs.close();
				}*/
				
				String secid=Helper.correctNull(rs4.getString("CUS_SEC_ID"));
				String cname=Helper.correctNull(rs4.getString("NAME"));
				String valdate =Helper.correctNull(rs4.getString("CUS_SEC_VALUATION_DATE1"));
				String abmnum =Helper.correctNull(rs4.getString("ORG_ABMMOBILE"));
				String branchhead =Helper.correctNull(rs4.getString("ORG_MANAGER_CTNUM"));
				String diff =Helper.correctNull(rs4.getString("DIFF"));
				//String diff="90";
				String strAppno =Helper.correctNull(rs4.getString("APP_NO"));
				String scode= Helper.correctNull(rs4.getString("ORG_SCODE"));
				
				
				if(exdScode.equalsIgnoreCase(scode)&&exdsecid.equalsIgnoreCase(secid))
					continue;
				
				exdScode =scode;
				exdsecid=secid;
				if(diff.equalsIgnoreCase("90"))
				{
					if(secid.length()>29)
					{
						secid=secid.substring(0,29);
					}

					if(cname.length()>29)
					{
						cname=cname.substring(0,29);
					}
					
					strMessage90=strMessage90.replaceAll("@securityid", secid).replaceAll("@CName",cname)
							.replaceAll("@revdate",valdate);
					
					if(!("").equalsIgnoreCase(branchhead))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", branchhead);
					hshTemp.put("strMessage",strMessage90 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					if(!("").equalsIgnoreCase(abmnum))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", abmnum);
					hshTemp.put("strMessage",strMessage90 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
				  strMessage90=str90;	
				}
				else if(diff.equalsIgnoreCase("60"))
				{
					if(secid.length()>29)
					{
						secid=secid.substring(0,29);
					}

					if(cname.length()>29)
					{
						cname=cname.substring(0,29);
					}
					strMessage60=strMessage60.replaceAll("@securityid", secid).replaceAll("@CName",cname)
							.replaceAll("@revdate",valdate);
					
					if(!("").equalsIgnoreCase(branchhead))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", branchhead);
					hshTemp.put("strMessage",strMessage60 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					if(!("").equalsIgnoreCase(abmnum))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", abmnum);
					hshTemp.put("strMessage",strMessage60 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					strMessage60=str60;
					
				}
				else if(diff.equalsIgnoreCase("30"))
				{
					if(secid.length()>29)
					{
						secid=secid.substring(0,29);
					}

					if(cname.length()>29)
					{
						cname=cname.substring(0,29);
					}
					strMessage30=strMessage30.replaceAll("@securityid", secid).replaceAll("@CName",cname)
							.replaceAll("@revdate",valdate);
					
					
					if(!("").equalsIgnoreCase(branchhead))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", branchhead);
					hshTemp.put("strMessage",strMessage30 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					if(!("").equalsIgnoreCase(abmnum))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", abmnum);
					hshTemp.put("strMessage",strMessage30 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					strMessage30=str30;
				}
				else if(diff.equalsIgnoreCase("7"))
				{
					if(secid.length()>29)
					{
						secid=secid.substring(0,29);
					}

					if(cname.length()>29)
					{
						cname=cname.substring(0,29);
					}
					strMessage07=strMessage07.replaceAll("@securityid", secid).replaceAll("@CName",cname);
					
					if(!("").equalsIgnoreCase(branchhead))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", branchhead);
					hshTemp.put("strMessage",strMessage07 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					if(!("").equalsIgnoreCase(abmnum))
					{
						
					HashMap hshTemp = new HashMap();
					hshTemp.put("strMobileno", abmnum);
					hshTemp.put("strMessage",strMessage07 );
					hshTemp.put("strAppno", strAppno);
					Helper.sendSMSFromVariousPlace(hshTemp);
					}
					strMessage07=str07;
							
				}
				
			}
			
			
			
			
		} catch (Exception e) {
			System.out.println("Exception.....................updsmsforsecurity");
			e.printStackTrace();
			throw new EJBException("Exception in updsmsforsecurity ==="
					+ e.getMessage());

		}
		finally
	  	{
	  		try
	  		{	
	  			if(rs!= null)
	  			{
	  				rs.close();
	  			}
	  			if(rs4!= null)
	  			{
	  				rs4.close();
	  			}
	  		}
	  		catch(Exception cf)
	  		{
	  			throw new EJBException("Error closing the connection "+cf.getMessage());
	  		}
	  	}
		
		
	}
	
	public void updatequerystatus(HashMap hshValues) throws EJBException {
		ResultSet rs = null;
		ResultSet rs2 = null, rs4 = null;
		int intUpdateSize = 0;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		ArrayList arrRowsmsdate = new ArrayList();
		ArrayList arrColsmsdate = new ArrayList();

		String strMessage90 = "", strMobileno = "", strRejReason = "", strfacappno = "", strfacsno = "";
		String strMessage60="";
		String strMessage30="";
		String strMessage07="",str90="",str60="",str30="",str07="";
		String strQuery="";
		boolean bflag = false;

		try {
			
			if(rs != null)
			{
				rs.close();
			}
			/*rs = DBUtils.executeLAPSQuery("getpendingquerystatus");
			if (rs.next()) {
				
				strMessage90 = Helper.correctNull(rs.getString("SMS_SECURITY_90"));
				strMessage60 = Helper.correctNull(rs.getString("SMS_SECURITY_60"));
				strMessage30 = Helper.correctNull(rs.getString("SMS_SECURITY_30"));
				strMessage07 = Helper.correctNull(rs.getString("SMS_SECURITY_07"));
				str90=strMessage90;
				str60=strMessage60;
				str30=strMessage30;
				str07=strMessage07;
			}
			if(rs4 != null)
			{
				rs4.close();
			}
			String exdScode="";
			String exdsecid="";*/
			log.info("***********************inside method*******************");
			rs4 = DBUtils.executeLAPSQuery("getpendingquerystatus");
			
			while (rs4.next()) {
				String appno=Helper.correctNull(rs4.getString("AQ_APPNO"));
				String loantype =Helper.correctNull(rs4.getString("APP_LOANTYPE"));
				String orgcode =Helper.correctNull(rs4.getString("APP_ORGCODE"));	
				String defdate =Helper.correctNull(rs4.getString("DEFDATE"));
				String orglevel =Helper.correctNull(rs4.getString("ORG_LEVEL"));
				String frompoint =Helper.correctNull(rs4.getString("MAIL_FROMFLOWPOINT"));
				String topoint =Helper.correctNull(rs4.getString("MAIL_TOFLOWPOINT"));
				String orghead =Helper.correctNull(rs4.getString("ORG_HEAD"));
				String appholder =Helper.correctNull(rs4.getString("APP_APPLNHOLDER"));
				int difdate=Integer.parseInt(defdate) ;
				if(orglevel.equalsIgnoreCase("A"))
				{
					
					if(loantype.equalsIgnoreCase("C"))
					{
						if(difdate>15)
						{
					hshQueryValues = new HashMap();
					hshQuery=new HashMap();
					arrValues=new ArrayList();
					hshQuery.put("strQueryId","commworkflowinsnew_query");
					arrValues.add(appno);
					arrValues.add(appholder);
					arrValues.add(orghead);
					arrValues.add(frompoint);
					arrValues.add(topoint);
					arrValues.add("C");
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+appholder);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						arrValues.add(Helper.correctNull(rs.getString("org_scode")));
						arrValues.add(Helper.correctNull(rs.getString("usr_department")));
					}
					else
					{
						arrValues.add("");
						arrValues.add("");
					}
					if(rs != null)
					{
						rs.close();
					}
					strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+orghead);
					rs=DBUtils.executeQuery(strQuery);
					if(rs.next())
					{
						arrValues.add(Helper.correctNull(rs.getString("org_scode")));
						arrValues.add(Helper.correctNull(rs.getString("usr_department")));
					}
					else
					{
						arrValues.add("");
						arrValues.add("");
					}
					
					arrValues.add("Y");
					arrValues.add(defdate);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess",
							hshQueryValues, "updateData");
					
					hshQueryValues = new HashMap();
					hshQuery=new HashMap();
					arrValues=new ArrayList();
					hshQuery.put("strQueryId","updmailbxchkstatus");
					arrValues.add("Y");
					arrValues.add(orghead);
					arrValues.add(appno);
					//hshQuery.put("arrValues",arrValues);
					//hshQueryValues.put("size","1");
					//hshQueryValues.put("1",hshQuery);
					hshQuery.put("arrValues", arrValues);
					hshQueryValues.put("1", hshQuery);
					hshQueryValues.put("size", "1");
					EJBInvoker.executeStateLess("dataaccess",
							hshQueryValues, "updateData");
					}
					
					}
					else
					{

						hshQueryValues = new HashMap();
						hshQuery=new HashMap();
						arrValues=new ArrayList();
						hshQuery.put("strQueryId","commworkflowinsnew_query");
						arrValues.add(appno);
						arrValues.add(appholder);
						arrValues.add(orghead);
						arrValues.add(frompoint);
						arrValues.add(topoint);
						arrValues.add("C");
						if(rs != null)
						{
							rs.close();
						}
						strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+appholder);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							arrValues.add(Helper.correctNull(rs.getString("org_scode")));
							arrValues.add(Helper.correctNull(rs.getString("usr_department")));
						}
						else
						{
							arrValues.add("");
							arrValues.add("");
						}
						if(rs != null)
						{
							rs.close();
						}
						strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+orghead);
						rs=DBUtils.executeQuery(strQuery);
						if(rs.next())
						{
							arrValues.add(Helper.correctNull(rs.getString("org_scode")));
							arrValues.add(Helper.correctNull(rs.getString("usr_department")));
						}
						else
						{
							arrValues.add("");
							arrValues.add("");
						}
						
						arrValues.add("Y");
						arrValues.add(defdate);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
						
						hshQueryValues = new HashMap();
						hshQuery=new HashMap();
						arrValues=new ArrayList();
						hshQuery.put("strQueryId","updmailbxchkstatus");
						arrValues.add("Y");
						arrValues.add(orghead);
						arrValues.add(appno);
						//hshQuery.put("arrValues",arrValues);
						//hshQueryValues.put("size","1");
						//hshQueryValues.put("1",hshQuery);
						hshQuery.put("arrValues", arrValues);
						hshQueryValues.put("1", hshQuery);
						hshQueryValues.put("size", "1");
						EJBInvoker.executeStateLess("dataaccess",
								hshQueryValues, "updateData");
						
							
					}
				}
				
				
			}
			
			
			
			
		} catch (Exception e) {
			System.out.println("Exception.....................updsmsforsecurity");
			e.printStackTrace();
			throw new EJBException("Exception in updsmsforsecurity ==="
					+ e.getMessage());

		}
		finally
	  	{
	  		try
	  		{	
	  			if(rs!= null)
	  			{
	  				rs.close();
	  			}
	  			if(rs4!= null)
	  			{
	  				rs4.close();
	  			}
	  		}
	  		catch(Exception cf)
	  		{
	  			throw new EJBException("Error closing the connection "+cf.getMessage());
	  		}
	  	}
		
		
	}	
	
	public HashMap setDecHistory(HashMap hshValues)  {
		HashMap hshResult = new HashMap();
		ResultSet rs = null;
		String strappno = "";
		String strCusid = "";
		String strCusname = "";
		String strOrg_code = "";
		String strOrg_dept = "";
		String str_appid = "";
		String staff_id = "";
		String CIN = "";
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();

		try {

			strappno = correctNull((String) hshValues.get("appno"));
			// strCusid = correctNull((String)hshValues.get("cus_id"));
			strCusname = correctNull((String) hshValues.get("cus_name"));

			str_appid = correctNull((String) hshValues.get("strAppNewid"));

			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(SQLParser.getSqlQuery("sel_staffandCIN^"
					+ str_appid));

			if (rs.next()) {

				CIN = correctNull((String) rs.getString("COMINFO_CIN"));

			}
			if (("").equalsIgnoreCase(CIN)) {
				CIN = correctNull((String) hshValues.get("strCIN"));
			}
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(SQLParser.getSqlQuery("coapdetails^"
					+ str_appid));

			if (rs.next()) {

				strCusid = correctNull((String) rs.getString("perapp_cbsid"));

			}
			staff_id = correctNull((String) hshValues.get("strUserId"));
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(SQLParser.getSqlQuery("sel_staffandOrgs^"
					+ staff_id));

			if (rs.next()) {
				strOrg_code = correctNull((String) rs.getString("ORG_SCODE"));
				strOrg_dept = correctNull((String) rs
						.getString("USR_DEPARTMENT"));

			}
			hshQueryValues.put("size", "1");
			hshQuery.put("strQueryId", "ins_dechis_details");
			arrValues.add(strCusid);
			arrValues.add(strCusname);
			arrValues.add(strappno);
			arrValues.add(CIN);
			arrValues.add(staff_id);
			arrValues.add(strOrg_code);
			arrValues.add(strOrg_dept);

			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put("1", hshQuery);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");

		} catch (Exception e) {
			log.error("Error in setDecHistory = " + e.toString());
		} finally {

		}
		return hshResult;
	}

	public HashMap getAuditTrail_dec(HashMap hshValues)  {
		HashMap hshResult = new HashMap();
		ResultSet rs = null;
		ResultSet rs1 = null;
		ArrayList arrCol = null;
		ArrayList arrRow = new ArrayList();
		String strappno = "";
		String strOrg_code = "";
		String strOrg_dept = "";
		try {
			strappno = correctNull((String) hshValues.get("appno"));
			if (rs != null)
				rs.close();
			rs = DBUtils.executeQuery(SQLParser
					.getSqlQuery("sel_auditReport_dec^" + strappno));

			while (rs.next()) {
				arrCol = new ArrayList();
				arrCol.add(correctNull(rs.getString("COM_CUSTOMERID")));// 0
				arrCol.add(correctNull(rs.getString("COM_CUSTOMERNAME")));// 1
				arrCol.add(correctNull(rs.getString("COM_PROPOSALNUMBER")));// 2
				arrCol.add(correctNull(rs.getString("COM_CINNUMBER")));// 3
				arrCol.add(correctNull(rs.getString("COM_STAFFID")));// 4
				arrCol.add(correctNull(rs.getString("COM_ORGCODE")));// 5
				strOrg_code = correctNull(rs.getString("COM_ORGCODE"));
				strOrg_dept = correctNull(rs.getString("COM_ORGDEPT"));
				if (("001").equalsIgnoreCase(strOrg_code)) {
					if (rs1 != null) {
						rs1.close();
					}

					rs1 = DBUtils.executeQuery(SQLParser
							.getSqlQuery("sel_CBSStaticDataPassingCode^20^"
									+ strOrg_dept));
					if (rs1.next()) {
						strOrg_dept = Helper.correctNull((String) rs1
								.getString("cbs_static_data_desc"));
					}
					if (strOrg_dept.equalsIgnoreCase("")) {
						strOrg_dept = "";
					}
				}
				arrCol.add(strOrg_dept);// 6
				arrCol.add(correctNull(rs.getString("COM_MODIFIEDDATE")));// 7

				arrRow.add(arrCol);

			}
			hshResult.put("arrRow", arrRow);

		} catch (Exception e) {
			log.error("Error in getAuditTrail_dec = " + e.toString());
		} finally {

		}
		return hshResult;
	}

	public HashMap getReadyForSAnctionUsingDBFunction(HashMap hshValues)
			 {
		HashMap returnHsh = new HashMap();
		Connection conn = null;
		String returnVal = "", Appno = "", userId = "", facilitysno = "";
		CallableStatement cstmt = null;
		Appno = Helper.correctNull((String) hshValues.get("appno"));
		facilitysno = Helper.correctNull((String) hshValues.get("facilitysno"));
		if (facilitysno.equals("")) {
			facilitysno = Helper.correctNull((String) hshValues
					.get("sel_facility"));
		}
		try {
			log.info("Before getReadyForSAnctionUsingDBFunction function");
			conn = getConnection();
			cstmt = conn.prepareCall("{? = call READY_FOR_SANCTION(?,?)}");
			cstmt.registerOutParameter(1, Types.VARCHAR);
			cstmt.setString(2, Appno);
			cstmt.setString(3, facilitysno);
			cstmt.executeUpdate();
			returnVal = Helper.correctNull(cstmt.getString(1));
			log.info("After getReadyForSAnctionUsingDBFunction function : "
					+ returnVal);
			returnHsh.put("returnVal", returnVal);
			conn.close();
			cstmt.close();
		} catch (Exception e) {
			throw new EJBException(
					"Error in getReadyForSAnctionUsingDBFunction "
							+ e.getMessage());
		}
		return returnHsh;
	}
	
	public ArrayList getFromToOrgLevel(String strFromuserid,String strTouserid) // From To Org Level
	{
		ArrayList arrIds=new ArrayList();
		try
		{			
			String fromissaralusr="",toissaralusr="";
			String brfromorgcode="",brfromorglevel="",brfromorgulp="";
			String brtoorgcode="",brtoorglevel="",brtoorgulp="";
			String strQuery = SQLParser.getSqlQuery("selorg_detuserid^"+strFromuserid);
			ResultSet rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				brfromorgcode=correctNull((String)rs.getString("org_code"));
				brfromorglevel=correctNull((String)rs.getString("org_level"));
				brfromorgulp=correctNull((String)rs.getString("ORG_ISULP"));	
			}
			
			strQuery = SQLParser.getSqlQuery("selorg_detuserid^"+strTouserid);
			rs = DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				brtoorgcode=correctNull((String)rs.getString("org_code"));
				brtoorglevel=correctNull((String)rs.getString("org_level"));
				brtoorgulp=correctNull((String)rs.getString("ORG_ISULP"));
			}
			
			if(brfromorglevel.equals("D")) // RO/SARAL
			{
				strQuery = SQLParser.getSqlQuery("sel_usrwhethersaralusr^"+strFromuserid);
				rs = DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					fromissaralusr=correctNull((String)rs.getString("USR_WHETHERSARALUSR"));
				}
				if(fromissaralusr.equalsIgnoreCase("Y"))
				{
					fromissaralusr="S";
				}
				else
				{
					fromissaralusr="D";
				}					
			}
			else
			if(brfromorglevel.equals("A")) // Branch or ULP
			{
				if(brfromorgulp.equalsIgnoreCase("Y"))
				{
					fromissaralusr="U";
				}
				else
				{
					fromissaralusr="A";
				}					
			}
			else // CO,FGMO
			{
				fromissaralusr=brfromorglevel;
			}
			
			arrIds.add(fromissaralusr);
			// to user
			if(brtoorglevel.equals("D")) // RO/SARAL
			{
				strQuery = SQLParser.getSqlQuery("sel_usrwhethersaralusr^"+strTouserid);
				rs = DBUtils.executeQuery(strQuery);
				if(rs.next())
				{
					toissaralusr=correctNull((String)rs.getString("USR_WHETHERSARALUSR"));
				}
				if(toissaralusr.equalsIgnoreCase("Y"))
				{
					toissaralusr="S";
				}
				else
				{
					toissaralusr="D";
				}					
			}
			else
			if(brtoorglevel.equals("A")) // Branch or ULP
			{
				if(brtoorgulp.equalsIgnoreCase("Y"))
				{
					toissaralusr="U";
				}
				else
				{
					toissaralusr="A";
				}					
			}
			else // CO,FGMO
			{
				toissaralusr=brtoorglevel;
			}
			arrIds.add(toissaralusr);	
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return arrIds;
	}
	
	
	

public HashMap checkLoanInterestModify(HashMap hshRequestValues)throws NamingException, Exception,CertificateException
	{
		HashMap hshRequest= new HashMap();
		
		TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
	        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
	            return null;
	        }
	        public void checkClientTrusted(X509Certificate[] certs, String authType) {
	        }
	        public void checkServerTrusted(X509Certificate[] certs, String authType) {
	        }
			/*@Override
			public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
				// TODO Auto-generated method stub
				
			}
			@Override
			public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
				// TODO Auto-generated method stub
				
			}*/
	    }
	};
		
		
		HashMap hsh= new HashMap();
		String strResponse2="",interestrate="";
		
		HashMap hshQueryValues= new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		double douintval=0.00;
		String sessionModuleType=Helper.correctNull((String)hshRequestValues.get("sessionModuleType"));	
		String appno=Helper.correctNull((String)hshRequestValues.get("appno"));		
		if(appno.equalsIgnoreCase(""))
		{
			appno=Helper.correctNull((String)hshRequestValues.get("appno1"));	
		}
		
		String hidapplicationType="",hidappid="",strOrgCode="",strUserId="",inwardno="",strOrgShortCode="",userclass="";
		String strUserDesignation="",apporgname="",appname="",strAppType="",appholder="",strOrgLevel="",hidFacSno="";
		
		hidapplicationType=Helper.correctNull((String)hshRequestValues.get("hidapplicationType"));
		hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantid"));
		if(hidappid.equalsIgnoreCase(""))
		{
			
			hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantnewid"));
		}
		strOrgCode=Helper.correctNull((String)hshRequestValues.get("strOrgCode"));
		strUserId=Helper.correctNull((String)hshRequestValues.get("strUserId"));
		inwardno=Helper.correctNull((String)hshRequestValues.get("inwardno"));
		strOrgShortCode=Helper.correctNull((String)hshRequestValues.get("strOrgShortCode"));
		userclass=Helper.correctNull((String)hshRequestValues.get("userclass"));
		strUserDesignation=Helper.correctNull((String)hshRequestValues.get("strUserDesignation"));
		apporgname=Helper.correctNull((String)hshRequestValues.get("apporgname"));
		appname=Helper.correctNull((String)hshRequestValues.get("appname"));
		strAppType=Helper.correctNull((String)hshRequestValues.get("strAppType"));
		appholder=Helper.correctNull((String)hshRequestValues.get("appholder"));
		strOrgLevel=Helper.correctNull((String)hshRequestValues.get("strOrgLevel"));
		hidFacSno=Helper.correctNull((String)hshRequestValues.get("hidFacSno"));
		String ActNum="",startdate="",FreqMonths="",FreqMonthsdata="",mclrtabcode="",plainresponse="",plainresponse2="";
		String strQuery="",strcustid="",parentappno="";
		String strRequest="",ReqUUID="",ServiceReqId="Req_LINTTM101"+appno,strVersionId="10.2",strChannelId="COR",strBankId="01",StrMessageDateTime="2012-10-02T14:14:27.262";
		String StrCustId="114021219",strAppurl="",strResponse="",Req_LINTTM101="Req_LINTTM101";
		ResultSet rs=null;
		String strintdiff="",Loan_Sanct_Eff_ROI_date="",MCLR_EFFECTIVEFROM="",MCLR_BASERATESPREAD="",MCLR_TYPE="",FACILITY_SANCINTEREST="",FACILITY_MCLRTYPE="";
		String	StrSecondReq="";
		double intrate1=0.00,intrate2=0.00,intdiff=0.00;
		hsh.put("updroiinfin", "updroiinfin");
		hsh.put("hidFacSnoroi", "hidFacSno");
		try
		{	
			
		
		strQuery = SQLParser.getSqlQuery("sel_perappidcbsid^" + hidappid);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			strcustid = Helper.correctNull((String) rs
					.getString("perapp_cbsid"));
		}
		
				
		strQuery = SQLParser.getSqlQuery("selparentappnodet^" + appno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			parentappno = Helper.correctNull((String) rs
					.getString("app_parent_appno"));
		}
		
		
		
		
		
		if(sessionModuleType.equalsIgnoreCase("RET"))
		{
		strQuery = SQLParser.getSqlQuery("retaccno^" + parentappno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			ActNum = Helper.correctNull((String) rs
					.getString("CBS_ACCOUNTNO"));
		}
		
		
		
		
		strQuery = SQLParser.getSqlQuery("selretduedate^" + appno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			startdate = Helper.correctNull((String) rs
					.getString("LOAN_DUEDATE"));
			mclrtabcode= Helper.correctNull((String) rs
					.getString("loan_mclrtabcode"));
			Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
					.getString("Loan_Sanct_Eff_ROI_date"));
		}
		
		
				
		
		
		strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode+"^"+mclrtabcode);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
					.getString("MCLR_EFFECTIVEFROM"));
			
		}
		//2022-08-30 00:00:00.0
		if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
		{
		MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
		}
		strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			MCLR_TYPE = Helper.correctNull((String) rs
					.getString("MCLR_TYPE"));
			MCLR_BASERATESPREAD=Helper.correctNull((String) rs
					.getString("MCLR_BASERATESPREAD"));
			
		}
		
		
//		strQuery = SQLParser.getSqlQuery("selretfreq^" + parentappno);
//		rs = DBUtils.executeQuery(strQuery);
//		if (rs.next()) {
//			FreqMonthsdata = Helper.correctNull((String) rs
//					.getString("TL_FEQUENCY"));
//		}
		
		FreqMonthsdata=MCLR_TYPE;
		if(FreqMonthsdata.equalsIgnoreCase("M"))
		{
			FreqMonths="1";
		}
		else if(FreqMonthsdata.equalsIgnoreCase("Y"))
		{
			FreqMonths="12";
		}
		else if(FreqMonthsdata.equalsIgnoreCase("H"))
		{
			FreqMonths="6";
		}
		else if(FreqMonthsdata.equalsIgnoreCase("Q"))
		{
			FreqMonths="3";
		}
		else
		{
			FreqMonths="12";
		}
		
		if(mclrtabcode.equalsIgnoreCase("AGSEC") || mclrtabcode.equalsIgnoreCase("ATBIL" )|| mclrtabcode.equalsIgnoreCase("NTBIL"))					
		{
	FreqMonths="3";
		}
		
		String int1="",int2="";
		strQuery = SQLParser.getSqlQuery("selupdateROIInFInancleoldroi^" + appno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			//intrate1=Double.parseDouble(Helper.correctNull((String) rs
				//	.getString("old_modified_roi")));
			intrate2= Double.parseDouble(Helper.correctNull((String) rs
					.getString("loan_modintrate")));
		}
			intrate1=Double.parseDouble(MCLR_BASERATESPREAD);
			if(intrate1>intrate2)
			{
			intdiff=intrate1-intrate2;
			}
			else
			{
				intdiff=intrate2-intrate1;	
			}
			//intdiff=Math.round(intdiff);
			
			java.text.NumberFormat nf = java.text.NumberFormat
					.getNumberInstance();
					nf.setGroupingUsed(false);
					nf.setMaximumFractionDigits(2);
					nf.setMinimumFractionDigits(2);
					 strintdiff=nf.format((intdiff));
					
		//}
		}
		
		if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
		{

			
			String FACILITY_OLDAPPSNO="";
			strQuery = SQLParser.getSqlQuery("selfaciparentappnodet^" + appno+"^"+hidFacSno);
			rs = DBUtils.executeQuery(strQuery);
			if (rs.next()) {
				parentappno = Helper.correctNull((String) rs
						.getString("app_parent_appno"));
				FACILITY_OLDAPPSNO = Helper.correctNull((String) rs
						.getString("app_parent_appno"));
				
			
			}
			
			
			//strQuery = SQLParser.getSqlQuery("selcorpagractno^" + appno+"^"+parentappno);
			strQuery = SQLParser.getSqlQuery("selcorpagractno^"+parentappno+"^"+ appno+"^"+hidFacSno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			ActNum = Helper.correctNull((String) rs
					.getString("CBS_ACCOUNTNO"));
		}
		
		
		strQuery = SQLParser.getSqlQuery("sel_postsanfacmclrrate^" + appno+"^"+hidFacSno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
//			FreqMonthsdata = Helper.correctNull((String) rs
//					.getString("FACILITY_PERINSTALL"));
			FACILITY_SANCINTEREST=Helper.correctNull((String) rs
					.getString("FACILITY_SANCINTEREST"));
			startdate = Helper.correctNull((String) rs
					.getString("LOAN_DUEDATE"));
			Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
					.getString("facility_effintroidate"));
//			mclrtabcodeval=Helper.correctNull((String) rs
//					.getString("FACILITY_INTSUBTYPE"));
		}
		
		
		strQuery = SQLParser.getSqlQuery("sel_postsanfacroidet^" + appno+"^"+hidFacSno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			FACILITY_MCLRTYPE = Helper.correctNull((String) rs
					.getString("FACILITY_MCLRTYPE"));
			if(!FACILITY_MCLRTYPE.equalsIgnoreCase(""))
			{
				MCLR_TYPE=FACILITY_MCLRTYPE.substring(0,1);
			}
			mclrtabcode=Helper.correctNull((String) rs
					.getString("MCLR_TABLECODE"));
		}
		
		
		
		
		FreqMonthsdata=MCLR_TYPE;
		if(FreqMonthsdata.equalsIgnoreCase("M"))
		{
			FreqMonths="1";
		}
		else if(FreqMonthsdata.equalsIgnoreCase("Y"))
		{
			FreqMonths="12";
		}
		else if(FreqMonthsdata.equalsIgnoreCase("H"))
		{
			FreqMonths="6";
		}
		else if(FreqMonthsdata.equalsIgnoreCase("Q"))
		{
			FreqMonths="3";
		}
		else
		{
			FreqMonths="12";
		}
		
		if(mclrtabcode.equalsIgnoreCase("AGSEC") || (mclrtabcode.equalsIgnoreCase("ATBIL" )) || mclrtabcode.equalsIgnoreCase("NTBIL"))					
		{
	FreqMonths="3";
		}	
		
		
		strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode+"^"+mclrtabcode);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
					.getString("MCLR_EFFECTIVEFROM"));
			
		}
		//2022-08-30 00:00:00.0
		if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
		{
		MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
		}

		
		
		
		strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			MCLR_TYPE = Helper.correctNull((String) rs
					.getString("MCLR_TYPE"));
			MCLR_BASERATESPREAD=Helper.correctNull((String) rs
					.getString("MCLR_BASERATESPREAD"));
			
		}
		
		intrate2= Double.parseDouble(FACILITY_SANCINTEREST);
		
		intrate1=Double.parseDouble(MCLR_BASERATESPREAD);

		if(intrate1>intrate2)
		{
		intdiff=intrate1-intrate2;
		}
		else
		{
			intdiff=intrate2-intrate1;	
		}
		//intdiff=Math.round(intdiff);
		
		java.text.NumberFormat nf = java.text.NumberFormat
				.getNumberInstance();
				nf.setGroupingUsed(false);
				nf.setMaximumFractionDigits(2);
				nf.setMinimumFractionDigits(2);
				 strintdiff=nf.format((intdiff));
		
		
		}
		
		
		
		
		String executeFinacleScript="executeFinacleScript";
		String BankId="01";
		
		strRequest="<?xml version=\'1.0\' encoding=\'UTF-8\'?>"+
		"<FIXML xsi:schemaLocation=\'http://www.finacle.com/fixml executeFinacleScript.xsd\' xmlns=\'http://www.finacle.com/fixml\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>"+
		"<Header>"+
		"<RequestHeader>"+
		"<MessageKey>"+
		"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
		"<ServiceRequestId>"+executeFinacleScript+"</ServiceRequestId>"+
		"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
		"<ChannelId>COR</ChannelId>"+
		"<LanguageId></LanguageId>"+
		"</MessageKey>"+
	    "<RequestMessageInfo>"+
		"<BankId>"+BankId+"</BankId>"+
		"<TimeZone></TimeZone>"+
		"<EntityId></EntityId>"+
		"<EntityType></EntityType>"+
		"<ArmCorrelationId></ArmCorrelationId>"+
		"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
		"</RequestMessageInfo>"+
		"<Security>"+
		"<Token>"+
		"<PasswordToken>"+
		"<UserId></UserId>"+
		"<Password></Password>"+
		"</PasswordToken>"+
		"</Token>"+
		"<FICertToken></FICertToken>"+
		"<RealUserLoginSessionId></RealUserLoginSessionId>"+
		"<RealUser></RealUser>"+
		"<RealUserPwd></RealUserPwd>"+
		"<SSOTransferToken></SSOTransferToken>"+
		"</Security>"+
		"</RequestHeader>"+
		"</Header>"+
		"<Body>"+
		"<executeFinacleScriptRequest>"+
		"<ExecuteFinacleScriptInputVO>"+
		"<requestId>FI_LINTTModify.scr</requestId>"+
		"</ExecuteFinacleScriptInputVO>"+
		"<executeFinacleScript_CustomData>"+
		"<AcctNum>"+ActNum+"</AcctNum>"+
		"<tblCode>"+mclrtabcode+"</tblCode>"+
		"<startDate>"+startdate+"</startDate>"+
		"<peggedFreqInMnths>"+FreqMonths+"</peggedFreqInMnths>"+
		"<PrefIntRate>"+strintdiff+"</PrefIntRate>"+
		"<peggedFlg>Y</peggedFlg>"+
		"</executeFinacleScript_CustomData>"+
		"</executeFinacleScriptRequest>"+
		"</Body>"+
		"</FIXML>";
		
		System.out.println("==========strRequest============"+strRequest);
		
		
		String strEncyrpteddata="",EncyrptedAesSessionKey="";
		byte[] Sessionkey=KblEncyrptionDecyrption.generateAESKey();
		System.out.println("==========Sessionkey=======1====="+Sessionkey);
		 strEncyrpteddata=KblEncyrptionDecyrption.getAESEncryptedData(strRequest, Sessionkey);   //strRequest
		System.out.println("==========strEncyrpteddata============"+strEncyrpteddata);
		 EncyrptedAesSessionKey=KblEncyrptionDecyrption.encryptAESKey(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
		System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);

		//(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
		//strEncyrpteddata=URLEncoder.encode(strEncyrpteddata, "UTF-8");
		//EncyrptedAesSessionKey=URLEncoder.encode(EncyrptedAesSessionKey, "UTF-8");

		
		
		
		
		
		
		
		String encrequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <xenc:EncryptedData Type=\"http://www.w3.org/2001/04/xmlenc#Element\"  xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"> <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"/> <dsig:KeyInfo xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"> <xenc:EncryptedKey> <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"> <dsig:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/> <xenc:OAEPparams/> <xenc:MGFAlgorithm Algorithm=\"http://www.w3.org/2009/xmlenc11#mgf1sha256\"/> </xenc:EncryptionMethod> <dsig:KeyInfo> <dsig:KeyName>pronteff_sha</dsig:KeyName> </dsig:KeyInfo> <xenc:CipherData> <xenc:CipherValue>" + 
		        EncyrptedAesSessionKey + "</xenc:CipherValue> " + 
		        "</xenc:CipherData> " + 
		        "</xenc:EncryptedKey> " + 
		        "</dsig:KeyInfo> " + 
		        "<xenc:CipherData> " + 
		        "<xenc:CipherValue>" + strEncyrpteddata + "</xenc:CipherValue> " + 
		        "</xenc:CipherData>" + 
		        "</xenc:EncryptedData>";
		
		System.out.println("==============encrequest========="+encrequest);
		
		
		String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";


		 strprivate_key_req = "yes";
		  strprivateKeyfile = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDuqhqoOkp/AysN8fnaOIl2pubeCj+HuYvZhnzvYHhwoMgklFv4Jzx8cioDdOMRmVRVGFMt5cOQWt/6JuJqr34h9NE7wYJOepQO2e5DnuwczFy0K1Ad5CXoJrX7v72Fimn/AGJtZ9jUcyu6BzK2ryBYvA4qyI7em7+EnOix/c2TtTHybklXKry2BIV43Cc5EXW7++YCn1TM+qkebXAcRp/ROnWPWx8rR/bO1PfOfDrvNcbS+un7e7EPMFpP90W6nw2euI0n3TSLq/92cI2chmK1B5d0EYXQxqxoNw6IUsZDD9sI6caD8Bf1mHAfEUwLZR/S3uAZHRik5hR7LMa9Gi+lAgMBAAECggEAE7JU3N64AzTJutmQ2zegm1A5lshAZ1J4KOL2hfLvkwFR7eLoltmgyPcgYdn7BhrMtkZ5pudiymkVjwQ32hd9pg5vA4Am4ZSFikGQw7fmmJctF27I/+Pc/68iLxKrRiLJjf1Zd4St2mq0MyLLm/68AVa+fJLCEmZxhIpGkgSg5g2nXY90Zfh8dNuE5WNtXZr5hOsTwwpjIt7Nq4RCo+puIvAh+6GAOHOGgMKgKTgpl7UIxsnUkEMNO1e/DYs9d84tjKzEPA4ezBerRI4NskyeqGifUMkuUFLCnEBzYMv4AAMnCxCJxHlcAlQ+aKe7DyrtmcRGcDBvz/Xg9YGSRpyEQQKBgQD4AH12tF3tH3KQjGueH7cipP/0XH33H4Mfem6ulTQxAG/S2NfcgZAaxckbVGJhCarDI1/T1Qq78BzUGBqV3G1e4BE2dwzqfBkVj63kDXFVojJTIX1ILAyjy67GKtOLBi3ZCRAa+crTFzjOPMuM8aumP5M+XEz6tfKBHwINY+eJHQKBgQD2XIYbrgXnaUJjcmdhcxO/W44SPSx29MhSmEKfMC8U6m60tcelRbwS/UlJEAgcWy3oBW+y0Bhol2jcJIFiUjRVBu36KoiGqqQkG8Wt/cqRtfCTDAgehdjpo+3PdAawFZMincSNa6RxByE273SePdK+vbXVdvEfZcywUw3ctk8CKQKBgQDWspXrTfqCbdcgjHAeVBaXR4DOa8QhTIaXmcZ4HXMxeM9WGaPGoeO/Sbrwjf0dROEwTk+Hc8f3K8fJVZSuaEXG/PPp0ua7mPOeVuSTqY+UMvaeQT/UW04V/x8vL6QzlwXZ/p6Su+17EX98C+Wr/ww6wI8YTY/W++0VG2MLdJHdgQKBgAuU8/UPLFXhu+5C7ZtGNrJzUm2HFLUO8u/3GoKzWDNKhiPWu+kIKzxVTgGyUD9NBg53WvX0FIGuRI685JxDsxQgPEXbhAmYshjEeXmhiclp3UJ8eVE+B6GMRFzRXpMeoIkrE5d2bQenRyd3AGuEColPD+JWMiXAumu7q9Ypd/NpAoGBALKDdzeyzd/swvWCY1bPbSpUp7liskSFPW7RpjxvNWoGVXoer5hares0oj26ylSB/GJEKH8Zf6kxtFnXEa68eXWF9BjUFGVgNJdnheUIU1tzgz7kZ8QXeHxpkhnByMq5UzfGwpgN4TG/K9bnrQTPWsjXKZovKOpdxgnMJ9CBa9Si";
		
	publicKey = "MIIGyjCCBbKgAwIBAgIQVvoCwd862nm76xqtn9DfUzANBgkqhkiG9w0BAQsFADCBujELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEuMCwGA1UEAxMlRW50cnVzdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEwxSzAeFw0yMjA2MDcxMzAzMTZaFw0yMzA2MTkxMzAzMTZaMG0xCzAJBgNVBAYTAklOMRIwEAYDVQQIEwlLYXJuYXRha2ExEjAQBgNVBAcTCUJlbmdhbHVydTEfMB0GA1UEChMWVGhlIEthcm5hdGFrYSBCYW5rIEx0ZDEVMBMGA1UEAwwMKi5rYmxiYW5rLmluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp86yWyvuMNgUrTw3M9O5127o+B+4BPp2ePM5YoFFIUO3TFEdN2lUm4Q0RWW7JK79NTJUUfPvXUqzEm/mf+Wyn4zFDIF4h1Scvp9FH3FsbdrZzzNADltyM2o90AmjW/+RBD1FQgjyjD2qm14ctsuGvHGWODOIT7rCKFjPEWoIoajMiHvbCDjqLutS6ktzh8dTbiRGoIK5pQGM+Kt8otOdaVnIm0ttfrLFCXOXYOP7CYJrmtEyKqc9pcwQJFGPrAYRPJjezMGxsUMiXyVRFL1LGPhKGLKwgRxg0pT3fCcn6LAIGCHuAQFVPXHN+769ScBGiUa1BXTyz5t/KmGW6rUfVQIDAQABo4IDFjCCAxIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUmRA+Ka1DFq8Enyd+eB6dzyY+19EwHwYDVR0jBBgwFoAUgqJwdN28Uz/Pe9T3zX+nYMYKTL8waAYIKwYBBQUHAQEEXDBaMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5lbnRydXN0Lm5ldDAzBggrBgEFBQcwAoYnaHR0cDovL2FpYS5lbnRydXN0Lm5ldC9sMWstY2hhaW4yNTYuY2VyMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwuZW50cnVzdC5uZXQvbGV2ZWwxay5jcmwwIwYDVR0RBBwwGoIMKi5rYmxiYW5rLmluggprYmxiYW5rLmluMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTAYDVR0gBEUwQzA3BgpghkgBhvpsCgEFMCkwJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LmVudHJ1c3QubmV0L3JwYTAIBgZngQwBAgIwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB3AFWB1MIWkDYBSuoLm1c8U/DA5Dh4cCUIFy+jqh0HE9MMAAABgT5DI+MAAAQDAEgwRgIhALBKX4JLqjzs5k2gBBnkplRDAwIg+OZnnlvwlEL1og6dAiEAwp+oyBDsVfQCw2TYrli7CUNzj7YY7S+6dQ7LpUi2cBkAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYE+QyPfAAAEAwBHMEUCIAz81sZ68SzB9gskN2/BBH24jbx6LqGBhbDRSOSjsc7zAiEAun1tE8zop33gXgkHrhSSVdAf3x8Vx18JGgZdI3ywgm4AdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYE+QyPnAAAEAwBHMEUCIGIdknwV398C2br+TZPWoxrTV1fB0ZYF8Mm+2gqJhWdyAiEAtqVmTEii7RWNGi0jBROl+uAP7pKZm3fuq99zcovPzeYwDQYJKoZIhvcNAQELBQADggEBANhsvnugpawMmyjegkvDu4yx3cBJB3FDhHPZbueupn2P7km63V0uEe3mL7mUDJmRsYwaQPXCEg0MnMOQhvRZQ7MEnt/Xo+C2uSkz+66fNtQMfjqSSTMslr17lUrYoXIYVZbD7VKCXISl5mxzAQBHsmzjSreRC1mrxQfze9RCsqZnSQT7waiRby0xAxM7EHYgNTtFePNLHk588aBlqnD438UKtOU5k1qvEDszgTYTujyFB57so+Bnq0tGDEmiyKhkqF0xpr2P7Rv5SjS9gReMF2Uoc2MOd5AJvshgRa8eyDbgPHB8vWPZ2b4uBCw9BE6Ij3AzC3z9sQ0qdh9tf3BOqb8=";
				String strNeslPasswordKey ="ApiUat@12345";  //"Kbl@12345";
		// char[] pwd = "Kbl@12345".toCharArray();	
				char[] pwd = "ApiUat@12345".toCharArray();	
		 String deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
		 String deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
		 
		 
		 //decryptAESKeylatnew
		 
		// byte[] DecyrptedAesSessionKey=KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey);
		//	System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);
			
			
		 
		 //byte [] decyrptedAesSessionKey=KblEncyrptionDecyrption.decryptAESKey(EncyrptedAesSessionKey.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey);
		 
		// System.out.println("==============decyrptedAesSessionKey========="+decyrptedAesSessionKey);
		 
		 
		// System.out.println("==============KblEncyrptionDecyrption.decryptHeader()========="+KblEncyrptionDecyrption.decryptwhole(encrequest, strprivateKeyfile, publicKey));//(EncyrptedAesSessionKey,strprivateKeyfile));// ApplicationParams.getStrPostSancationDecryptionFile()));

		 
//		System.out.println("==============KblEncyrptionDecyrption.decryptHeader()========="+KblEncyrptionDecyrption.decryptHeader(EncyrptedAesSessionKey,strprivateKeyfile));// ApplicationParams.getStrPostSancationDecryptionFile()));

		
//		System.out.println("==============KblEncyrptionDecyrption.decyrptkey()========="+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), "ApiUat@12345"));

		
		String token="";
		OAuthTokenGeneration oauth = new OAuthTokenGeneration();
		HashMap Result= new HashMap();
		Result=oauth.getOAuthAuth(hshRequestValues);
		token=Helper.correctNull((String)Result.get("access_token"));
		strAppurl=ApplicationParams.getStrPostSancationEncryptionURL();//"https://apiuat.ktkbank.com:8443/non-production/development/fi-lintmodify/filint";

		
		String finalToken="",accessToken="",headerStatus="",clientId="",clientSecret="",TokenUrl="",Method="",Scope="",certiPath="",gType="",reqConcat="",testCommand="",location="",errCode="",errMessage="";
		Map<String,Object> responseMap = new HashMap<String, Object>();
		Map<String,String> ser = new HashMap<String, String>();
		Gson gson = new Gson();
		Type mapType = null;






			  gType="client_credentials";
			  clientId="92c2d9b9793695f7bd9aaa411d7657e0";
			  clientSecret="7a1980519b524854cfdf25cef98a95e9";
			  Scope="CCFM";
			
			 certiPath="/home/lapsuat/patches/NationalPortal/ktk1/ktk.crt";
			 
			 
			 System.out.println("----------IN "+Method+" Method | SSLContext-----------------");
				SSLContext ssl_ctx = SSLContext.getInstance("TLSv1.2");
				ssl_ctx.init(null,trustAllCerts,null);
				HostnameVerifier allHostsValid = new HostnameVerifier(){
					public boolean verify(String hostname,SSLSession session){
						return true;
					}
				};
						
			
				URL url = new URL(ApplicationParams.getStrPostSanctionURLEnc1());
			System.out.println("----------IN "+Method+" Method | "+ApplicationParams.getStrPostSanctionURLEnc1()+"-----------------");
			HttpsURLConnection con = (HttpsURLConnection)url.openConnection();
			HttpsURLConnection.setDefaultSSLSocketFactory(ssl_ctx.getSocketFactory());
			// Install the all-trusting host verifier
			HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
			location =certiPath;
			if(!location.equalsIgnoreCase("0")){
				System.out.println("----------IN "+Method+" Method | With certificate-----------------");
				System.setProperty("javax.net.ssl.trustStore", location);
			}
			else{
				System.out.println("----------IN "+Method+" Method | Without certificate-----------------");
			}

			StringBuilder data = new StringBuilder();
			//testCommand
			if(testCommand.equalsIgnoreCase("1")){
				data.append("grant_type="+gType);
				data.append("client_id="+clientId);
				data.append("client_secret="+clientSecret);
				data.append("scope="+Scope);
			}
			else{
				data.append("grant_type="+gType+"&client_id="+clientId+"&client_secret="+clientSecret+"&scope="+Scope);
			}
			System.out.println("----------IN "+Method+" Method | data"+data+"-----------------");
			
			//encrequest=URLEncoder.encode(encrequest, "UTF-8");
			
			byte[] byteArray = encrequest.toString().getBytes("UTF-8");

			System.out.println("byteArray-----------------"+byteArray);

			if(reqConcat.equalsIgnoreCase("Basic")){
				System.out.println("----------IN "+Method+" Method | Encoding Client ID & Secret-----------------");
				//con.setRequestProperty("Authorization",reqConcat+" "+getEncodedIdAndPassword(clientId,clientSecret));
			}
			
			/*Map<String, String> headers = new HashMap<>();

			headers.put("X-IBM-Client-Id", clientId);
			headers.put("X-IBM-Client-Secret", clientSecret);
			headers.put("Authorization", "Bearer "+token);
			for (String headerKey : headers.keySet()) {
				con.setRequestProperty(headerKey, headers.get(headerKey));
				System.out.println("======headerKey========="+headerKey+"========="+headers.get(headerKey));
			}*/
			
			con.setDoInput(true);
			
			con.setRequestProperty("X-IBM-Client-Id",clientId);
			con.setRequestProperty("X-IBM-Client-Secret",clientSecret);
			con.setRequestProperty("Authorization","Bearer "+token);
			
			
			con.setRequestProperty("Content-Type","application/xml");
			//con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");		
			con.setRequestProperty("Accept","*/*");		
			con.setRequestProperty("Accept-Encoding" ,"gzip, deflate, br");
			con.setRequestProperty("Connection", "keep-alive");
			con.setRequestMethod("POST");
			con.setConnectTimeout(5000);
			con .setDoOutput(true);
			
		
			OutputStream os = con.getOutputStream();
			//os.write(byteArray, 0, byteArray.length);
			os.write(encrequest.getBytes("UTF-8"));
			os.close();
			
			
			
			String response="";
			System.out.println("===========responsecode:" + con.getResponseCode());
			System.out.println("===========ResponseMessage:"+con.getResponseMessage());
			try
			{
			if (200 == con.getResponseCode()) {

				String tempStr = "";
				BufferedReader inStream = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
				while ((tempStr = inStream.readLine()) != null) {
					response = response + tempStr;
				}
			}else {
				response=String.valueOf(con.getResponseCode());
			}
			System.out.println("=========response:"+response);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			System.out.println("===========Error===============================");
		}
		
		
			
			//System.out.println("====after outputStream======");
			//OutputStreamWriter osw = new OutputStreamWriter(os);
			//System.out.println("====after OutputStreamWriter======");
			//osw.write(encrequest.getBytes());//strRequest);
			
			Date connectionStartTime=new Date();
			System.out.println("::Request Sent At: " + connectionStartTime);
			System.out.println("::Request Data: "+ encrequest);
			
			String line="",strRes="";
//			 StringBuilder response = new StringBuilder();
//			try(BufferedReader br = new BufferedReader(
//					  new InputStreamReader(con.getInputStream(), "utf-8"))) {
//					   
//					    String responseLine = null;
//					    while ((responseLine = br.readLine()) != null) {
//					        response.append(responseLine.trim());
//					        
//					    }
//					    System.out.println("===1111111111111111111111=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+response.toString());
//					}
//			System.out.println("=====111111111111111111====$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$============"+new String(response));
//			
//			
			String plainRequestnew=response;
			
		/*	StringWriter strwrt = new StringWriter();
			IOUtils.copy(con.getInputStream(), strwrt,StandardCharsets.UTF_8);
			plainRequestnew= strwrt.toString();*/
			
			System.out.println("===#################=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+plainRequestnew.toString());
			
			System.out.println("===222222222222222222222222222222=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+new String(plainRequestnew));
			
		//	response=plainRequestnew;
//			String line="",strRes="";
//			InputStreamReader reader = new InputStreamReader(con.getInputStream());
//			BufferedReader in = new BufferedReader(reader);
//			
//			StringBuffer result = new StringBuffer();
//			while ((line = in.readLine()) != null) {
//				result.append(line);
//			}
			
//			log
//			.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
//					+ new String(response));

	strRes = plainRequestnew.toString();
	System.out.println(strRes);
	plainresponse= plainRequestnew.toString();
	strResponse=strRes;   
				System.out.println("^^^^^^^^^^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+strResponse);
				
				 
				 
				 
//				 BASE64Decoder decod=new BASE64Decoder();
//					byte b[]		= decod.decodeBuffer(strResponse);
//						      System.out.println("decodeBuffer:**********************:"+strResponse);
//						      String str	= new String(b);
//						      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
//						      
//						      
//						      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
//						      
//						      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
						      
				 
	/*InputStream geek = null;
	 geek = new FileInputStream(new String(strResponse));
			 StringWriter strwrt = new StringWriter();
				IOUtils.copy(geek, strwrt,StandardCharsets.UTF_8);
				strResponse= strwrt.toString(); */   
				
	//PostSanFirstRes.xml
			/*local file reader*/
			
	/*		BufferedReader br1 = null;
			FileReader fr1 = null;
			String ResponseXML="";
			
			fr1 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
			//br1 = new BufferedReader(fr1);	
			
			
			
//			 Scanner responseReader = new Scanner(br1);
//	         StringBuffer buffer = new StringBuffer();
//	         while (responseReader.hasNextLine()) {
//	            buffer.append(responseReader.nextLine()+"\n");
//	         }
	         
	        
	         
	       //  try(BufferedReader br = new BufferedReader(
	        //		  new InputStreamReader(con.getInputStream(), "utf-8"))) {
	        	 
	           try(BufferedReader br = new BufferedReader(fr1)){
	         		 // new FileReader("D:\\API\\decodeapiresponse.txt", "utf-8"))) {
	        		    StringBuilder response = new StringBuilder();
	        		    StringBuilder line = new StringBuilder();
	        		    String responseLine = null;
	        		    while ((responseLine = br.readLine()) != null) {
	        		        response.append(responseLine.trim().getBytes("utf-8"));
	        		        line.append(responseLine.trim());
	        		    }
	        		    
	        		    System.out.println("*************************"+new String(response));
	        		    System.out.println("+++++++++++++++++++================="+response.toString());
	        		    
	        		    
	        		    System.out.println("*************************"+new String(line));
	        		    System.out.println("+++++++++++++++++++================="+line.toString());
	        		    
	        		}
	           
	         
	           
	           
	         
	     //    responseReader.close();
	         
	         
//	           String line="",strRes="";
//	  		 StringBuilder response = new StringBuilder();
//	  	"	try(BufferedReader br = new BufferedReader(
//	  				  new InputStreamReader( "utf-8"))) {
//	  				   
//	  				    String responseLine = null;
//	  				    while ((responseLine = br.readLine()) != null) {
//	  				        response.append(responseLine.trim());
//	  				        
//	  				    }
//	  				    System.out.println("====================="+response.toString());
//	  				}
	         
	 		
//	           FileReader	fr3 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
//	 		br1 = new BufferedReader(fr3);	
//	         
//	 		//BufferedInputStream reader = new BufferedInputStream();
//	         BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream("D:\\API\\decodeapiresponsenew.txt"));
//	          
//	         byte[] buffer1 = new byte[4096];
//	         int bytesRead = -1;
//	          
//	         while ((bytesRead = br1.read()) != -1) {
//	             writer.write(buffer1, 0, bytesRead);
//	         }
//	         
//	         writer.close();
	         //reader.close();
	           
	           
	           StringBuilder response = new StringBuilder();
	           FileReader	fr3 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
	    		br1 = new BufferedReader(fr3);
	        		    
	        		     String responseLine = null;
	        		     while ((responseLine = br1.readLine()) != null) {
	        		         response.append(responseLine.trim().getBytes("utf-8"));
	        		     }
	        		     System.out.println("+++++++++++++++++++++++++++++++++++"+response.toString());
	        		     System.out.println("+++++++++++++++++++++++++++++++++++"+new String(response));
	        		 
	           
	           
	         //Printing the Response
	     /*   byte a[]=new String(buffer).getBytes("UTF-16LE");
	        byte bb[]=new String(buffer).getBytes("UTF-8");
	        byte c[]=new String(buffer).getBytes("ISO-8859-2");
	        byte d[]=new String(buffer).getBytes("ISO-8859-1");  
	        
	        
	        System.out.println("^^^^^^^^^^^^^^UTF-16LE^^^^^^@@@@@@@@@@@@@@@@@======="+new String(a));
	         System.out.println("^^^^^^^^^^^^^^UTF-8^^^^^^@@@@@@@@@@@@@@@@@======="+new String(bb));
	         System.out.println("^^^^^^^^^ISO-8859-2^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+new String(c));
	         System.out.println("^^^^^^^^^^^ISO-8859-1^^^^^^^^^@@@@@@@@@@@@@@@@@======="+new String(d));  */
	         
	         
	         
	        // plainresponse=new String(buffer);
	       //s   strResponse=new String(buffer);
			
	          
	         // plainresponse;//=new String(buffer);
	         // strResponse;String(buffer);
			
	    /*      System.out.println("^^^^^^^^^^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+strResponse.getBytes("UTF-8"));
				
				// byte[] decodedBytes = Base64.getDecoder().decode(strResponse);
				 
				// System.out.println("====decodedBytes=====>"+decodedBytes);*/
				 
				 
				 BASE64Decoder decod=new BASE64Decoder();
					byte b[]		= decod.decodeBuffer(strResponse);
						      System.out.println("decodeBuffer:**********************:"+strResponse);
						      String str	= new String(b);
						      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
						      
						      
						      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
						      
						      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
						      
				 	// byte[] decodedBytes1 = Base64.getDecoder().decode(str);
					 
					// System.out.println("====decodedBytes1=====>"+decodedBytes1); 
					 
					 
				      
			// StringWriter strwrt = new StringWriter();
				//IOUtils.copy(inputStream, strwrt,StandardCharsets.UTF_8);
				//strResponse= strwrt.toString(StandardCharsets.UTF_8);
			
			/* byte[] decodedBytes = Base64.getDecoder().decode(strResponse);
			 
			 System.out.println("====decodedBytes=====>"+decodedBytes); */
			 
			 
				     
			/*InputStream geek1 = null;
			 geek1 = new FileInputStream("D:\\API\\decodeapiresponse.txt");
					 StringWriter strwrt1 = new StringWriter();
						IOUtils.copy(geek1, strwrt1,StandardCharsets.UTF_8);
						strResponse= strwrt1.toString();  
						
						System.out.println("####################################"+strResponse);
			byte[] bres=plainresponse.getBytes(StandardCharsets.UTF_8);
			String strResponse1=new String(bres);*/
			
			
			
				

	

			System.out.println("====before=====>"+strResponse.getBytes("UTF-8"));
			
			
			
			
			//String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";


			 strprivate_key_req = "yes";
			  strprivateKeyfile = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDuqhqoOkp/AysN8fnaOIl2pubeCj+HuYvZhnzvYHhwoMgklFv4Jzx8cioDdOMRmVRVGFMt5cOQWt/6JuJqr34h9NE7wYJOepQO2e5DnuwczFy0K1Ad5CXoJrX7v72Fimn/AGJtZ9jUcyu6BzK2ryBYvA4qyI7em7+EnOix/c2TtTHybklXKry2BIV43Cc5EXW7++YCn1TM+qkebXAcRp/ROnWPWx8rR/bO1PfOfDrvNcbS+un7e7EPMFpP90W6nw2euI0n3TSLq/92cI2chmK1B5d0EYXQxqxoNw6IUsZDD9sI6caD8Bf1mHAfEUwLZR/S3uAZHRik5hR7LMa9Gi+lAgMBAAECggEAE7JU3N64AzTJutmQ2zegm1A5lshAZ1J4KOL2hfLvkwFR7eLoltmgyPcgYdn7BhrMtkZ5pudiymkVjwQ32hd9pg5vA4Am4ZSFikGQw7fmmJctF27I/+Pc/68iLxKrRiLJjf1Zd4St2mq0MyLLm/68AVa+fJLCEmZxhIpGkgSg5g2nXY90Zfh8dNuE5WNtXZr5hOsTwwpjIt7Nq4RCo+puIvAh+6GAOHOGgMKgKTgpl7UIxsnUkEMNO1e/DYs9d84tjKzEPA4ezBerRI4NskyeqGifUMkuUFLCnEBzYMv4AAMnCxCJxHlcAlQ+aKe7DyrtmcRGcDBvz/Xg9YGSRpyEQQKBgQD4AH12tF3tH3KQjGueH7cipP/0XH33H4Mfem6ulTQxAG/S2NfcgZAaxckbVGJhCarDI1/T1Qq78BzUGBqV3G1e4BE2dwzqfBkVj63kDXFVojJTIX1ILAyjy67GKtOLBi3ZCRAa+crTFzjOPMuM8aumP5M+XEz6tfKBHwINY+eJHQKBgQD2XIYbrgXnaUJjcmdhcxO/W44SPSx29MhSmEKfMC8U6m60tcelRbwS/UlJEAgcWy3oBW+y0Bhol2jcJIFiUjRVBu36KoiGqqQkG8Wt/cqRtfCTDAgehdjpo+3PdAawFZMincSNa6RxByE273SePdK+vbXVdvEfZcywUw3ctk8CKQKBgQDWspXrTfqCbdcgjHAeVBaXR4DOa8QhTIaXmcZ4HXMxeM9WGaPGoeO/Sbrwjf0dROEwTk+Hc8f3K8fJVZSuaEXG/PPp0ua7mPOeVuSTqY+UMvaeQT/UW04V/x8vL6QzlwXZ/p6Su+17EX98C+Wr/ww6wI8YTY/W++0VG2MLdJHdgQKBgAuU8/UPLFXhu+5C7ZtGNrJzUm2HFLUO8u/3GoKzWDNKhiPWu+kIKzxVTgGyUD9NBg53WvX0FIGuRI685JxDsxQgPEXbhAmYshjEeXmhiclp3UJ8eVE+B6GMRFzRXpMeoIkrE5d2bQenRyd3AGuEColPD+JWMiXAumu7q9Ypd/NpAoGBALKDdzeyzd/swvWCY1bPbSpUp7liskSFPW7RpjxvNWoGVXoer5hares0oj26ylSB/GJEKH8Zf6kxtFnXEa68eXWF9BjUFGVgNJdnheUIU1tzgz7kZ8QXeHxpkhnByMq5UzfGwpgN4TG/K9bnrQTPWsjXKZovKOpdxgnMJ9CBa9Si";
			
	 publicKey = "MIIGyjCCBbKgAwIBAgIQVvoCwd862nm76xqtn9DfUzANBgkqhkiG9w0BAQsFADCBujELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEuMCwGA1UEAxMlRW50cnVzdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEwxSzAeFw0yMjA2MDcxMzAzMTZaFw0yMzA2MTkxMzAzMTZaMG0xCzAJBgNVBAYTAklOMRIwEAYDVQQIEwlLYXJuYXRha2ExEjAQBgNVBAcTCUJlbmdhbHVydTEfMB0GA1UEChMWVGhlIEthcm5hdGFrYSBCYW5rIEx0ZDEVMBMGA1UEAwwMKi5rYmxiYW5rLmluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp86yWyvuMNgUrTw3M9O5127o+B+4BPp2ePM5YoFFIUO3TFEdN2lUm4Q0RWW7JK79NTJUUfPvXUqzEm/mf+Wyn4zFDIF4h1Scvp9FH3FsbdrZzzNADltyM2o90AmjW/+RBD1FQgjyjD2qm14ctsuGvHGWODOIT7rCKFjPEWoIoajMiHvbCDjqLutS6ktzh8dTbiRGoIK5pQGM+Kt8otOdaVnIm0ttfrLFCXOXYOP7CYJrmtEyKqc9pcwQJFGPrAYRPJjezMGxsUMiXyVRFL1LGPhKGLKwgRxg0pT3fCcn6LAIGCHuAQFVPXHN+769ScBGiUa1BXTyz5t/KmGW6rUfVQIDAQABo4IDFjCCAxIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUmRA+Ka1DFq8Enyd+eB6dzyY+19EwHwYDVR0jBBgwFoAUgqJwdN28Uz/Pe9T3zX+nYMYKTL8waAYIKwYBBQUHAQEEXDBaMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5lbnRydXN0Lm5ldDAzBggrBgEFBQcwAoYnaHR0cDovL2FpYS5lbnRydXN0Lm5ldC9sMWstY2hhaW4yNTYuY2VyMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwuZW50cnVzdC5uZXQvbGV2ZWwxay5jcmwwIwYDVR0RBBwwGoIMKi5rYmxiYW5rLmluggprYmxiYW5rLmluMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTAYDVR0gBEUwQzA3BgpghkgBhvpsCgEFMCkwJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LmVudHJ1c3QubmV0L3JwYTAIBgZngQwBAgIwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB3AFWB1MIWkDYBSuoLm1c8U/DA5Dh4cCUIFy+jqh0HE9MMAAABgT5DI+MAAAQDAEgwRgIhALBKX4JLqjzs5k2gBBnkplRDAwIg+OZnnlvwlEL1og6dAiEAwp+oyBDsVfQCw2TYrli7CUNzj7YY7S+6dQ7LpUi2cBkAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYE+QyPfAAAEAwBHMEUCIAz81sZ68SzB9gskN2/BBH24jbx6LqGBhbDRSOSjsc7zAiEAun1tE8zop33gXgkHrhSSVdAf3x8Vx18JGgZdI3ywgm4AdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYE+QyPnAAAEAwBHMEUCIGIdknwV398C2br+TZPWoxrTV1fB0ZYF8Mm+2gqJhWdyAiEAtqVmTEii7RWNGi0jBROl+uAP7pKZm3fuq99zcovPzeYwDQYJKoZIhvcNAQELBQADggEBANhsvnugpawMmyjegkvDu4yx3cBJB3FDhHPZbueupn2P7km63V0uEe3mL7mUDJmRsYwaQPXCEg0MnMOQhvRZQ7MEnt/Xo+C2uSkz+66fNtQMfjqSSTMslr17lUrYoXIYVZbD7VKCXISl5mxzAQBHsmzjSreRC1mrxQfze9RCsqZnSQT7waiRby0xAxM7EHYgNTtFePNLHk588aBlqnD438UKtOU5k1qvEDszgTYTujyFB57so+Bnq0tGDEmiyKhkqF0xpr2P7Rv5SjS9gReMF2Uoc2MOd5AJvshgRa8eyDbgPHB8vWPZ2b4uBCw9BE6Ij3AzC3z9sQ0qdh9tf3BOqb8=";
					 strNeslPasswordKey ="ApiUat@12345";  //"Kbl@12345";
			// char[] pwd = "Kbl@12345".toCharArray();	
					 pwd = "ApiUat@12345".toCharArray();	
			  deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
			  deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
			// KBLAPIMGMTNEW.crt
			 //strprivateKeyfiles
			 

			  
			  String privateKeyFile1=ApplicationParams.getStrPostSancationDecryptionFile();
			  BASE64Encoder b64 = new BASE64Encoder();
				PrivateKey privateKey = KblEncyrptionDecyrption.getRSAprivaetKeys1(privateKeyFile1, strNeslPasswordKey.toCharArray());
				String privatekey2=(b64.encode(privateKey.getEncoded()));
				byte [] key=privatekey1.getBytes();
				
				
				System.out.println("+++++++++++++++****************++++++++============="+KblEncyrptionDecyrption.decrypt(strResponse, strprivateKeyfile, publicKey));
				
				
				System.out.println("+++++++++++++++++++++++============="+KblEncyrptionDecyrption.getAESDecryptedData(new String(strResponse),key));
				
				
			  
			 
//			  System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.signSHA256RSANew(strResponse, strprivateKeyfile));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//				
//			  String strsignSHA256RSANew=KblEncyrptionDecyrption.signSHA256RSANew(strResponse, strprivateKeyfile);
//			  
//			  System.out.println("strsignSHA256RSANew======strsignSHA256RSANew==========>"+strsignSHA256RSANew);//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//				
//			  System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(strResponse, strprivateKeyfile,publicKey,EncyrptedAesSessionKey));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));
//			 // decryptAESKey
//			  System.out.println("decryptAESKeylatnew======decryptAESKeylatnew==========>"+KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey));
//			 //str   strResponse
//			  
//			  System.out.println("getAESDecryptedDatalatnew======getAESDecryptedDatalatnew==========>"+KblEncyrptionDecyrption.getAESDecryptedDatalatnew(strsignSHA256RSANew,KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey)));
//				
//			  
			  
			  
			// System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(strsignSHA256RSANew, strprivateKeyfile,publicKey,EncyrptedAesSessionKey));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
				  
			 
			    
			 
			 System.out.println("decrypt767757557777777777777777777777577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decSignSHA256RSA(strResponse,"SHA256withRSA", strprivateKeyfile));
			 
			 
			 
			 System.out.println("decrypt767757557777777777777777777777577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.signSHA256RSA(strResponse, strprivateKeyfile));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
				
			 String shaval=KblEncyrptionDecyrption.signSHA256RSA(str, strprivateKeyfile);
			 
			 System.out.println("shaval==========>"+shaval);//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
				
			// public static String getAESDecryptedData(String encryptedText,byte decKey[])
			 
			 //public static byte[] decryptAESKey(byte[] encryptedKey,String privateKeyFile,String filePassword)throws Exception
			 
			 
			/*String strdecyrpteddata=KblEncyrptionDecyrption.decryptAESKey(shaval.getBytes("UTF-8"),ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);   //strRequest
				System.out.println("==========strEncyrpteddata============"+strEncyrpteddata);
				 EncyrptedAesSessionKey=KblEncyrptionDecyrption.encryptAESKey(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
				System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);*/
				
			 
				
			/* String deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
			 String deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
			// KBLAPIMGMTNEW.crt
			// System.out.println("decryptAESKey==========>"+KblEncyrptionDecyrption.decryptAESKey(shaval.getBytes(StandardCharsets.UTF_8),deckeyfile,strNeslPasswordKey));
			 
			 
			 
			 //System.out.println("decryptAESKeylatest======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.getAESDecryptedData(EncyrptedAesSessionKey.getBytes("UTF-8"), deckeypfxfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
				
			 
			 //decryptAESKeylatest
			 
			System.out.println("decryptAESKeylatest======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes("UTF-8"), deckeypfxfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			 	
			 
			 System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(shaval, ApplicationParams.getStrPostSancationDecryptionFile(), ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
				
			 
			// System.out.println("decryptAESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decSignSHA256RSA(strResponse, "SHA256withRSA", ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
				
			 
			 
			 
			System.out.println("decryptAESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptAESKey(bres, deckeyfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			//System.out.println("Output================>"+strResponse);
			System.out.println("getAESDecryptedData=====33333333333333333333333333333333===========>"+KblEncyrptionDecyrption.getAESDecryptedData(shaval, Sessionkey));
	*/
			
			strResponse=strResponse.replace("xenc:", "");
		    strResponse=strResponse.replace("dsig:", "");
		    strResponse=strResponse.replace("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "");
		    strResponse=strResponse.replace("Type=\"http://www.w3.org/2001/04/xmlenc#Element\"","");
		    strResponse=strResponse.replace("xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"","");
		    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"","");
		    strResponse=strResponse.replace("xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"","");
		    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"","");			
		    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"","");
		    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#mgf1sha256\"","");	
		    strResponse=strResponse.trim();
			System.out.println("====After=====>"+strResponse);
			DocumentBuilderFactory factory1 = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder1 = factory1.newDocumentBuilder();
			 
			InputSource inputSource1 	   = new InputSource(new StringReader(strResponse));
		    Document document1 				   = builder1.parse(inputSource1);
		    
			//Build Document
			//Document document = builder.parse(new InputStream(strResponse)) ;
		    String CipherValue12="", CipherValue2="";
				
			document1.getDocumentElement().normalize();
			
			System.out.println("Root Element :" + document1.getDocumentElement().getNodeName());
			
			NodeList list1 = document1.getElementsByTagName("CipherData");

		    for (int temp = 0; temp < list1.getLength(); temp++) {

		        Node node = list1.item(temp);

		        if (node.getNodeType() == Node.ELEMENT_NODE) {

		            Element element1 = (Element) node;

		            // get staff's attribute
		           // String id = element.getAttribute("id");

		            // get text
		            if(temp==0)
		            {
		             CipherValue2 = element1.getElementsByTagName("CipherValue").item(0).getTextContent();
		             System.out.println("CipherValue2================>"+CipherValue2);
		            }
		            if(temp==1)
		            {
		            	 CipherValue12 = element1.getElementsByTagName("CipherValue").item(0).getTextContent();
		            	System.out.println("CipherValue1================>"+CipherValue12);
		            }
		        }
		    }

		    
		    System.out.println("DecryptDatanew======================1================="+KblEncyrptionDecyrption.DecryptDatanew(CipherValue2,CipherValue12,strprivateKeyfile,publicKey,strNeslPasswordKey));
			
		   
		    System.out.println("decrypsssssssssssssssssssssssssssstAESKey================>"+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));
			  
		    
		    System.out.println("decrypsssssssssssssssssssssssssssstAESKey================>"+KblEncyrptionDecyrption.decryptAESKeylatest(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));
		    System.out.println("decryptAESKeyData================>"+KblEncyrptionDecyrption.getAESDecryptedDatalatest(CipherValue12,KblEncyrptionDecyrption.decryptAESKeylatest(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey)));

		    //System.out.println("Output================>"+strResponse);

//		String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";
	//
	//
//		 strprivate_key_req = "yes";
//		  strprivateKeyfile = "MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDGG4K7rm1tPUfpXnWUA18kZ2BCR+u9uwxiFg7fqh7zukOvMzX4Maz3EdooSLiq+/Qr/+VUk0M6LSURZ08FGix7jE6cLcdGuXooHwjceEB8cnd2KyhXTvGJLdinJfZUlbHKUEELFmyy2jjPLEfqgRFMfhDybwZJi0yZ0//Zfi9OdgI5s7ew1NYtIUuAYe5dogMbohg1VKnKvrnwsNODtlLZOkrI65x+UOR+gAfPiSb7rGxrWMfiiJOMbzn+X+kOPbg1HAt9WLm7P+9V7xCMfQK8mQkQrFMi1u7EfNMOIf1cFyGjUaLHQzqV+ViOu8C2ZLG3wKRLkz2DReZJbJeq74tSMLJAF9Z4YC3m769HYmY8478f0KGtZgBgv5SKD3V3OMuPobyjP7SPx2a9IeIMiF/aYlVYHa2IoGr2Ug/RyGx0Op6h+KkrsKV4vFxyQ8XCuBtX2vgIqfDN0Sxrj8X1JpGdbFISYLeVttJ/ArTm0TXE/XiAfjmpl2s8Yl3LkovrFeuTJywgATn47jALT3j/8PJrExH251IWIXRJS+6G0DWhv5rgvK+kqxFrF8vIoMi2hW8goObRRoeMkb736l1we2404RJEjNgtlY69LyhHB2olOex5nyHyBATlwEeP4Yb1cmJzZxGH+54MQmv5jtkzU+fciey3nj4n6wwTehxmTI2a8QIDAQABAoICAF6AuyGKuLqWtBo4LECaRyWXhsy3gFZ2xxZ3TUsW3UMJBMar2D/4enk18+qpniY6oKTool5xDW3QIVGnBYP6k2Owb8OC9v/e9M302AZL+v8in6goOEtF5mS5ERPTQSniaviGxjBi1yGOhfEWP4w3W6gwrybnHYmxwK3U+sSmtCxqkO8zsxnQvgazTlAE52+VHIRvE7tFEuYbi5ms0ImRTP5BF3G3K2T6c7WAn7k5xPXjr6iZpmiDHFeuq2yUFhnsCVaUdUqrK5aOjj5hF3TdIZQUMMXaXqJNA4OJxCiGwFTQ2AQPqmYBxQ3L75nPKMQZTsnIRNekeoCHtK4r9kHdmYiYRMB9ltA5425V2W5Wy2ykaMwu9SHoWt8hwNrPfb9jLS0ebd+X4b0YUK1hdLhTRrlCDlrC3L9oh6NtL+M4Zo+GO89giSrdZAjAOObaZZtJl/OGrBR7dEw+M5dDi76NSQVts6LxAATmsEAEcs9I2adVWUZt+M1gbjHXkhzEKyuV6HuRQc2K+UpWuFTG/3iu2UeqEAoCRRLvK11iBTFKNq4JuSjkBF5QVluFSe1nX+P+/kElUNlj0YjRbzoDcH1Y3T+87bQ3e0wjwBTz0I/t6De/PFDs6B2fof280RV3/ZBL9jc5Nel7LVIsYpEhd7ckt9QhGWi92G5QZjBG53p+l2GRAoIBAQD9bS3cA4slzS7AhD357wBsgr5nahRoTxFrqdCfOHwkb+QH1TG+rYTgFJ2N9PkWLN9eQf0FTXSJB54u7MlRKSI4i1KCjVlCg7FGvo4vlXT/rpdB+bcIWhlg9D7TA8akVG4JN6UQQllnzODKvu0yIptMjD5Tg9T/7lvA4YHMXX4k4avj+/6y3dHwiDPCDOBvUFqgR16IFW1W3hTrPLY6mrD7e11hA6NtTWjbOG2TE7otQJ46KmF/pXLzwXNkQu+nmfahi7eitC/etUpoxgNfbYCYjjpcAf7jBKlHUm2r0vsjVNzrwSe6iJ3yi6Rkv9WcKSlQQ12NK9AEkZ502C0/uPCVAoIBAQDIHoVz3Tq8SutrAQtKIxx3UoSCYuZm5scD7ko8CAaxCs43tN7U+Wila71hDsYYvx2hgz8MKXVWOhlEQ+xeUoLDwetBNLZIDDFeXS8d3z0156VQ+lzN5ApXPt6EzkibBWxSGmner5rMm/JXrTrUdwmh+15EoBILlLyeibkQIhAS9qXpUscWA//hzP1U99j//dZ6gemkKvhmHDkIq7IDV0BjgRdwbYgHJoKvkHnOs5czLOUklJn95ynhRHXBHVaWeaoIfIbDcf2THNF+RVghzJhieq9ODmWwfA+kOkBPeOckqBKCxc2OCq9CFr3dD+MKd2DyZEx4tpjYbkiH+6b7Ph3tAoIBAH6PfLyIhIAvVO7N3AmqYyLNtHr+zgw9mGyVFNu/ILgtrMqAnOQl0dr6UKipM4/wfuiaudphERax2DyFAhDnIvDsGxuZrX77N5gl5+o5kIFz1pQbOl4QaOYzdAB7vUMp6v3tbSCOkgm1lnmKGfjUsYvr6eBZUREzH11XATRnaGzQysADg/Idtw+RZY++UIMmtOugWMRLNxyPshC8dCEWSdZ9iGe/omkepIP+TTKLQooA4EQaEDDoFl1HOfJTP04LJNEObnnx1Io7LVrfsKWCkRsexGRYlssW89brglux9LtzURTnlIiiW4baWBH8f5gKMlikG985hxwRAPpHT2moWXUCggEAfoqWNpLAzknNnWcWnXWgTW93bP9e09jAJaMre9RTbuX3SlBry14+psN/B/2QlBtdgED+wBEDKlgom/sbXvVrzJ81xJCxZtOW8CWaYphEG270IUV/I448X7jYej/6t1Pxj+U15uNBznoZ/wkCN1FiXPQXQuu5HWua7eEGjcYMRgGDHgwC6c/zoPO/iVgD9rOrSOIXPIETe3YDNpFjSiuFAqahjK0mI+ddIekIrQTw6iJMbxosWdovqEti7o8/rn0WYLFlgfb1sm25ps/wj8bQ4QzVB1WhRbzdIyrWeapo9sv0kI7FkTj+Y5r/yeZ+2aJtQjjcBkToV4s9AAfIKfy4bQKCAQAtwJWY/FJCbxkf4PTP3qQvSAjq4KlczvA6YGhu8g9wCUMWOxu7QkcYtxMOrX7ifvxC5Ti7FwJsXILtU8WeIc997xB/nzMVsNHoax9p2x0kgmDzChLA+JZc1tq1KaBkSPcFuIqfv6EVYE9RD6GtlVEHkyNT4wakfpI0i9wJ71l080+ELMWHG9TjrPLQNeiYB3IVbxXy7fVtcIXPrM8qXLU/8J/9dAnEMJPQWQrwEP57dSb/5S5VUDELil/Pk/FKy+qIImvpoPxhomqIkV9QjgnYF9MK2eB5A2n3mDTog2y/7K+T8TfFyjpppa12+D/XYe4fT8M8MMCQmMT0JHsHtS5+";
//		  publicKey = "MIIGSTCCBDGgAwIBAgIJANIpNP2nRJgtMA0GCSqGSIb3DQEBCwUAMIG6MQswCQYDVQQGEwJJTjEQMA4GA1UECAwHR3VqYXJhdDESMBAGA1UEBwwJQWhtZWRhYmFkMSEwHwYDVQQKDBhPbmxpbmUgUFNCIExvYW5zIExpbWl0ZWQxITAfBgNVBAsMGE9ubGluZSBQU0IgTG9hbnMgTGltaXRlZDEYMBYGA1UEAwwPTmF0aW9uYWwgUG9ydGFsMSUwIwYJKoZIhvcNAQkBFhZuby1yZXBseUBqYW5zYW1hcnRoLmluMB4XDTIxMTAxMjExNTEyN1oXDTMxMTAxMDExNTEyN1owgboxCzAJBgNVBAYTAklOMRAwDgYDVQQIDAdHdWphcmF0MRIwEAYDVQQHDAlBaG1lZGFiYWQxITAfBgNVBAoMGE9ubGluZSBQU0IgTG9hbnMgTGltaXRlZDEhMB8GA1UECwwYT25saW5lIFBTQiBMb2FucyBMaW1pdGVkMRgwFgYDVQQDDA9OYXRpb25hbCBQb3J0YWwxJTAjBgkqhkiG9w0BCQEWFm5vLXJlcGx5QGphbnNhbWFydGguaW4wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDju2DLs9RbjTJ5qqY26iV4tzdDBUl9LFjUPg1YeAp2x4YT9UGYNWQdVhdBS+P2bocghLgI+iWpDaxnKjHKpQy2+7FfHf2SNHCAwhqVGjMxtaWGNGO76aEpkDzy7l3Tad1V40zBhh0F7vDRC/LaKoF7dYifQRD+HK9UVDOe8Zt1mzvqoCYvMRnEfaKB0pFcdiA6IcVKuv/AIsWM3rCVTl4AtNeoUr8NiqKWuSarSxriU5u9r90vMBMWYqNT62GyCmDjfZh34g3Gla3sN6jWK52iqJjAjL7ZMU/+g3U1mhghV5Fa/20LJMXHW94OrnFnC62k/6XnXL2SqAwgq+6NG4SPdMaai2BcJyfxghKVFwDuEMkOTSYGHPEjuuTqIgxkpz4/nD/ar8BlMC77z7QUPAu3MscWVrzXUbwfhgzaZDUygP1HudxK6H/gRR/Z3fxoGDtxC02ZrIkX8MkyF8p20eQ7UtnoDVynSat780I0bRp3LOrbhgW+KCxQt9cKc/oudTG+S2Qric2RgS6/gOy/2m2vwfJIOjTTggY1DgQIYSIiLK9tZvfaiDFZPemTPmKKF84KCgsuLbqVfdSdL2SvHzIy4lvO6B90lAZns/KnVtT6HJxrMgIplqEtzgUkldFatNLIMjfcFtZtaTF2PKIQOerVpvF36rs5WJPHtwAW6/oXEQIDAQABo1AwTjAdBgNVHQ4EFgQUqUPLwzrVExe5ABR+Kwqeu5cmg0AwHwYDVR0jBBgwFoAUqUPLwzrVExe5ABR+Kwqeu5cmg0AwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEABRI/ht7r9RTDtJEnbtedVrvSRycOEJBpu/BEREoGnjipHxq5Pa/9xUNIro0/NT/enZ2roCkCGgzd75ueXKv0Wr5tdYYlTSnzpOPcTSdTpWjtgRZqcLTzLBOg2dTxvncgOy6/586s0uN57BlaeT7rX2WRtxte621vzBoRrq4Ib3+lDSOrH1005j0Lwu0g7O4zSE7yU7oSYgyNOxH9dvoSIl5bmBhsmx+BqE92V3Yop7G9KWZBazhGmnSDlrsLxEWK/M7LZQ9ZRoFFjH7jHZbJbTE1GgWL1IugSDiRweq01B4p7LSbqcUnUuI5jjTxgvvgG6sWPvqDmJLAYo9ZGX0BUiF8YTpUdTHVnbKJsuQtBCsVCiiIdV/sqXqoNyFWAlp90L+f+yZ0pkKPMhLmGstCOHCMebY7invBp9thCTZFrAA1YMVc0pXQMrjMfOPOqApX+pHmPT4y60ZavJ6Fe7LqkZq4dQ0fbDT8UMpCQuyeMJzI8wpI8BlFOFSNSzut+5wT+/PRhdGgpv6uJSJZLDjGv8VQFmPJ8VRq2Phacq5f2h7ubRt9oZ42pCfDbz94SqGrDWymaFxMafFFv/U2iYkClWBs1brmMx+AWZxGuJomzsWInhjfpXaoBIvU9eZtjvJXSyIL5+mQ877Lu8hIv409Kc+F0KmpgWMTDYh/Zh/4+Xs=";
//		String strNeslPasswordKey ="Kbl@12345";
//		 char[] pwd = "Kbl@12345".toCharArray();	
//		 
//		 //strprivateKeyfile
//		 
//		System.out.println("decryptAESKey================>"+KblEncyrptionDecyrption.decryptAESKey(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//		//System.out.println("Output================>"+strResponse);
//		System.out.println("getAESDecryptedData================>"+KblEncyrptionDecyrption.getAESDecryptedData(CipherValue12, KblEncyrptionDecyrption.decryptAESKey(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey)));

			
			
			strResponse=strResponse.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml executeFinacleScript.xsd\" xmlns=\"http://www.finacle.com/fixml\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");
			
	        strResponse=strResponse.trim();
			System.out.println("====After=====>"+strResponse);
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			 
			InputSource inputSource 	   = new InputSource(new StringReader(strResponse));
		    Document document 				   = builder.parse(inputSource);
		    
			//Build Document
			//Document document = builder.parse(new InputStream(strResponse)) ;
		    String CipherValue1="", CipherValue="";
				
			document.getDocumentElement().normalize();
			
			System.out.println("Root Element :" + document.getDocumentElement().getNodeName());
			
			NodeList list = document.getElementsByTagName("Body");

	        for (int temp = 0; temp < list.getLength(); temp++) {

	            Node node = list.item(temp);

	            if (node.getNodeType() == Node.ELEMENT_NODE) {

	                Element element = (Element) node;

	               
	                
	                if(element.getElementsByTagName("SUCCESS").getLength()>0)
	                		{
	                	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
	                	hsh.put("PostSanctionROIStatus", "S");  
	                	hsh.put("Status","S");
	                	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
	                	
	                		}
	               
	                
	                if(element.getElementsByTagName("ErrorDesc").getLength()>0)
		                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
	            		{
	            	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
	            	hsh.put("PostSanctionROIStatus", "F");  
	            	
	            	hsh.put("Status","F");
	            	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
	            	
	            	hshQuery =new HashMap();
	            	arrValues=new ArrayList();
	            	hshQueryValues.put("size", "1");
	            	if(sessionModuleType.equalsIgnoreCase("RET"))
	            	{
	            	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
	            	}
	            	if(!sessionModuleType.equalsIgnoreCase("RET"))
	            	{
	            	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
	            	}
	            	    	arrValues.add(appno);
	            	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
	            	    	{
	            	    		arrValues.add(hidFacSno);
	            	    	}
	            	    	hshQuery.put("arrValues", arrValues);
	            	    	hshQueryValues.put("1", hshQuery);
	            	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	            	    			"updatedata");
	           		 
	           		 
	           		hshQuery =new HashMap();
	           		arrValues=new ArrayList();
	           		hshQueryValues.put("size", "1");
	         			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
	         			arrValues.add(appno);
	         			arrValues.add(parentappno);
	         			arrValues.add("F");
	         			arrValues.add(strUserId);
	         			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
	         			arrValues.add("executeFinacleScript");
	         			arrValues.add(ServiceReqId);
	         			arrValues.add(sessionModuleType);
	         			arrValues.add("");
	         			arrValues.add("");
	         			arrValues.add("LoanAcctInq");   			
	         			arrValues.add(hidFacSno);
	         		
	         			hshQuery.put("arrValues", arrValues);
	         			hshQueryValues.put("1", hshQuery);
	         			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	         					"updatedata");
	            		}
	                
	                if(element.getElementsByTagName("error").getLength()>0)
	                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
	        		{
	        	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
	        	hsh.put("PostSanctionROIStatus", "F");  
	        	
	        	hsh.put("Status","F");
	        	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
	        	
	        	
	        	hshQuery =new HashMap();
	        	arrValues=new ArrayList();
	        	hshQueryValues.put("size", "1");
	        	if(sessionModuleType.equalsIgnoreCase("RET"))
	        	{
	        	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
	        	}
	        	if(!sessionModuleType.equalsIgnoreCase("RET"))
	        	{
	        	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
	        	}
	        	    	arrValues.add(appno);
	        	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
	        	    	{
	        	    		arrValues.add(hidFacSno);
	        	    	}
	        	    	hshQuery.put("arrValues", arrValues);
	        	    	hshQueryValues.put("1", hshQuery);
	        	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	        	    			"updatedata");
	     			
	       		 
	       		 
	       		hshQuery =new HashMap();
	       		arrValues=new ArrayList();
	       		hshQueryValues.put("size", "1");
	     			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
	     			arrValues.add(appno);
	     			arrValues.add(parentappno);
	     			arrValues.add("F");
	     			arrValues.add(strUserId);
	     			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
	     			arrValues.add("executeFinacleScript");
	     			arrValues.add(ServiceReqId);
	     			arrValues.add(sessionModuleType);
	     			arrValues.add("");
	     			arrValues.add("");
	     			arrValues.add("LoanAcctInq");   			
	     			arrValues.add(hidFacSno);
	     		
	     			hshQuery.put("arrValues", arrValues);
	     			hshQueryValues.put("1", hshQuery);
	     			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	     					"updatedata");
	        		}
	                
	            }
	        }

		  
			
			
		System.out.println("Output================>"+strResponse);
		
		
		
		if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))
		{
		

		
		
	StrSecondReq="<FIXML xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+
		"<Header>"+
		"<RequestHeader>"+
		"<MessageKey>"+
		"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
		"<ServiceRequestId>LoanAcctInq</ServiceRequestId>"+
		"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
		"<ChannelId>COR</ChannelId>"+
		"</MessageKey>"+
		"<RequestMessageInfo>"+
		"<BankId>"+BankId+"</BankId>"+
		"<TimeZone></TimeZone>"+
		"<EntityId></EntityId>"+
		"<EntityType></EntityType>"+
		"<ArmCorrelationId></ArmCorrelationId>"+
		"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
		"</RequestMessageInfo>"+
		"<Security>"+
		"<Token>"+
		"<PasswordToken>"+
		"<UserId></UserId>"+
		"<Password></Password>"+
		"</PasswordToken>"+
		"</Token>"+
		"<FICertToken></FICertToken>"+
		"<RealUserLoginSessionId></RealUserLoginSessionId>"+
		"<RealUser></RealUser>"+
		"<RealUserPwd></RealUserPwd>"+
		"<SSOTransferToken></SSOTransferToken>"+
		"</Security>"+
		"</RequestHeader>"+
		"</Header>"+
		"<Body>"+
		"<LoanAcctInqRequest>"+
		"<LoanAcctInqRq>"+
		"<LoanAcctId>"+
		"<AcctId>"+ActNum+"</AcctId>"+
		"</LoanAcctId>"+
		"</LoanAcctInqRq>"+
		"<LoanAcctInq_CustomData/>"+
		"</LoanAcctInqRequest>"+
		"</Body>"+
		"</FIXML>";



	System.out.println("==========StrSecondReq============"+StrSecondReq);



	URL url2 = new URL(ApplicationParams.getStrPostSanctionNURL2());

	System.out.println("==========ApplicationParams.getStrPostSanctionNURL2()============"+ApplicationParams.getStrPostSanctionNURL2());
	HttpURLConnection con2 = (HttpURLConnection) url2.openConnection();
	con2.setDoInput(true);

	con2.setRequestMethod("POST");
	con2.setRequestProperty("Content-Type","text/xml; charset=UTF-8");
	con2.setConnectTimeout(5000);
	con2 .setDoOutput(true);

	OutputStream os2 = con2.getOutputStream();
	System.out.println("====after outputStream======");
	OutputStreamWriter osw2 = new OutputStreamWriter(os2);
	System.out.println("====after OutputStreamWriter======");
	osw2.write(StrSecondReq);//strRequest);
	//osw.flush();


	Date connectionStartTime1=new Date();
	System.out.println("::StrSecondReq Sent At: " + connectionStartTime1);
	System.out.println("::StrSecondReq Data: "+ StrSecondReq);
	osw2.close();


	String line2="",strRes2="";
	InputStreamReader reader2 = new InputStreamReader(con2.getInputStream());
	BufferedReader in2 = new BufferedReader(reader2);

	StringBuffer result2 = new StringBuffer();
	while ((line2 = in2.readLine()) != null) {
		result2.append(line2);
	}

	log
	.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
			+ result2.toString());

	strRes2 = result2.toString();
	System.out.println(strRes2);
	plainresponse2=strRes2;
	strResponse2=strRes2;   


	/*System.out.println("strResponse2=================="+strResponse2);*/



	/*BufferedReader br2 = null;
	FileReader fr2 = null;
	String ResponseXML2="";

	fr2 = new FileReader("D:\\loanAccResponse.xml");//E:\\PostSanctionapi.xml");
	br2 = new BufferedReader(fr2);	



	Scanner responseReader2 = new Scanner(br2);
	StringBuffer buffer2 = new StringBuffer();
	while (responseReader2.hasNextLine()) {
	buffer2.append(responseReader2.nextLine()+"\n");
	}
	responseReader2.close();
	//Printing the Response
	System.out.println(buffer2.toString());
	plainresponse2=buffer2.toString();
	strResponse2=buffer2.toString();    */


	System.out.println("strResponse2=================="+strResponse2);

	strResponse2=strResponse2.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");


	strResponse=strResponse.trim();
	System.out.println("====After=====>"+strResponse);

	DocumentBuilderFactory factory2 = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder2 = factory2.newDocumentBuilder();

	InputSource inputSource2 	   = new InputSource(new StringReader(strResponse2));
	Document document2 				   = builder.parse(inputSource2);

	//Build Document
	//Document document = builder.parse(new InputStream(strResponse)) ;


	document.getDocumentElement().normalize();

	System.out.println("Root Element :" + document2.getDocumentElement().getNodeName());

	NodeList list2 = document2.getElementsByTagName("HostTransaction");

	for (int temp = 0; temp < list2.getLength(); temp++) {

	Node node2 = list2.item(temp);

	if (node2.getNodeType() == Node.ELEMENT_NODE) {

	 Element element2 = (Element) node2;

	 // get staff's attribute
	// String id = element.getAttribute("id");

	 // get text
	 
	 if(element2.getElementsByTagName("Status").getLength()>=0)
	 		{
	 	hsh.put("flagval", Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()));
	 	
	 	if(Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()).equalsIgnoreCase("SUCCESS"))
	 	{
	 	hsh.put("Status", "S");  
	 	}
	 	
	 	
	 	if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))	
	 	{
	 		
	 		NodeList list3 = document2.getElementsByTagName("NetIntRate");

	 		 for (int temp3 = 0; temp3 < list3.getLength(); temp3++) {

	 		     Node node3 = list3.item(temp3);

	 		     if (node3.getNodeType() == Node.ELEMENT_NODE) {

	 		         Element element3 = (Element) node3;
	 		
	 		         
	 		        interestrate=Helper.correctNull((String)element3.getElementsByTagName("value").item(0).getTextContent());
	 		        douintval=Double.valueOf(interestrate);
	 		         
	 		     }
	 		
	 		 }
	 		 
	 		 
	 		hshQuery =new HashMap();
	    	arrValues=new ArrayList();
	    	hshQueryValues.put("size", "1");
	    	if(sessionModuleType.equalsIgnoreCase("RET"))
	    	{
	    	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
	    	    	hsh.put("successflag", "true");
	    	}
	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
	    	{
	    	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
	    	}
	    	    	arrValues.add(appno);
	    	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
	    	    	{
	    	    		arrValues.add(hidFacSno);
	    	    	}
	    	    	hshQuery.put("arrValues", arrValues);
	    	    	hshQueryValues.put("1", hshQuery);
	    	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	    	    			"updatedata");
			
	 		 
	 		 
	 		hshQuery =new HashMap();
	 		arrValues=new ArrayList();
	 		hshQueryValues.put("size", "1");
			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
			arrValues.add(appno);
			arrValues.add(parentappno);
			arrValues.add("S");
			arrValues.add(strUserId);
			arrValues.add("");
			arrValues.add("executeFinacleScript");
			arrValues.add(ServiceReqId);
			arrValues.add(sessionModuleType);
			arrValues.add("");
			arrValues.add("");
			arrValues.add("LoanAcctInq");   			
			arrValues.add(hidFacSno);
		
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put("1", hshQuery);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
			
			if(sessionModuleType.equalsIgnoreCase("RET"))
			{
			hshQuery =new HashMap();
	 		arrValues=new ArrayList();
			hshQueryValues.put("size", "1");
			hshQuery.put("strQueryId", "updateROIInFInancle");
			arrValues.add(""+douintval);
			arrValues.add(""+douintval);
			arrValues.add(""+douintval);
			arrValues.add(appno);
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put("1", hshQuery);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
			}
			else
			{
				//updatecorpagrupdroi
				
				hshQuery =new HashMap();
		 		arrValues=new ArrayList();
				hshQueryValues.put("size", "1");
				hshQuery.put("strQueryId", "updatecorpagrupdroi");
				arrValues.add(""+douintval);
				arrValues.add(appno);
				arrValues.add(hidFacSno);
				hshQuery.put("arrValues", arrValues);
				hshQueryValues.put("1", hshQuery);
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			}
			
			
			if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
			{
				
				int count=0,counta=0,countb=0;
				String appcount="";
				rs = DBUtils.executeLAPSQuery("sel_postsanctiondateroicorpagrimridetcount^" + appno);
				if (rs.next()) {
					count = rs.getInt("count");
					
				}
				if(rs!=null)
					rs.close();
				
				rs = DBUtils.executeLAPSQuery("sel_postsanctiondateroicorpagrimridet^" + appno);
				while (rs.next()) {
					
					if(!correctNull((String) rs.getString("facility_sancupdroi")).equalsIgnoreCase(""))
					{
					counta+=1;
					}
				}
				if(rs!=null)
					rs.close();
				
				if(count==counta)
				{
					hsh.put("successflag", "true");
				}
				
				else
				{
					ResultSet rs1=null;
				String parentappno1="",ActNum1="";
				strQuery = SQLParser.getSqlQuery("selfaciparentappnodetall^" + appno);
				rs = DBUtils.executeQuery(strQuery);
				while (rs.next()) {
					parentappno1 = Helper.correctNull((String) rs
							.getString("app_parent_appno"));
				
					
				
			String FACILITY_SNO="";
			strQuery = SQLParser.getSqlQuery("selpostsanroiselectioncorpagrmriparent^" + appno+"^"+parentappno1);
			rs1 = DBUtils.executeQuery(strQuery);
			if (rs1.next()) {
				ActNum1 = Helper.correctNull((String) rs1
						.getString("CBS_ACCOUNTNO"));
			}
				if(ActNum1.equalsIgnoreCase(""))
				{
					hsh.put("successflag", "true");
				}
				}
				}			
				
				
				
			}
			
			if(Helper.correctNull((String)hsh.get("successflag")).equalsIgnoreCase("true"))
			{
	String 	strAppno=appno,appstatus1="",application_flag="",strOrgcodenew="",strOrglevelnew="",strappholder="",str_sentorglevelnew="",strOrgHeadnew="";
	String strFromflowpoint="",strToflowpoint="";

	rs = DBUtils.executeLAPSQuery("commworkflowsel2^" + strAppno);
		if (rs.next()) {
			appstatus1 = correctNull((String) rs.getString("app_status"));
			application_flag = Helper.correctNull((String) rs
					.getString("app_renew_flag"));
			strOrgcodenew=Helper.correctNull((String)rs.getString("APP_ORGCODE"));
			strOrglevelnew=Helper.correctNull((String)rs.getString("app_orglevel"));
		    strappholder=Helper.correctNull((String)rs.getString("APP_APPLNHOLDER"));
		}
		
		if(rs!=null)
			rs.close();
		strQuery=SQLParser.getSqlQuery("selorg_level^"+strOrgcodenew);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			str_sentorglevelnew = correctNull((String)rs.getString("org_level"));
			strOrgHeadnew = correctNull((String)rs.getString("org_head"));
		}
		
		strFromflowpoint = (String) hshRequestValues.get("mail_fromflowpoint");
		strToflowpoint = (String) hshRequestValues.get("mail_toflowpoint");

		System.out.println("======strOrglevelnew======="+strOrglevelnew);
		
		
		String scodeforallmoduls="";
		String headoforg="";
		
		if(!strOrglevelnew.equalsIgnoreCase("A"))
		{
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("sel_retmclrresetfreq^"+strAppno);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				scodeforallmoduls=Helper.correctNull(rs.getString("LOAN_PERTAINS_BRANCH"));
			}
			
			
		
		
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("getorgheadfromorgnisation^"+scodeforallmoduls);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				headoforg=Helper.correctNull(rs.getString("ORG_HEAD"));
			}
			
			strOrgHeadnew=headoforg;
		}
	//if(strOrglevelnew.equalsIgnoreCase("A"))
		//{

			String strsms="";
			hshQueryValues = new HashMap();
			hshQuery=new HashMap();
			arrValues=new ArrayList();
			hshQuery.put("strQueryId","commworkflowinsnew3");
			arrValues.add(strAppno);
			arrValues.add(strappholder);
			arrValues.add(strOrgHeadnew);
			arrValues.add(strFromflowpoint);
			//arrValues.add(strToflowpoint);
			arrValues.add("C");
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strappholder);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				arrValues.add(Helper.correctNull(rs.getString("org_scode")));
				arrValues.add(Helper.correctNull(rs.getString("usr_department")));
			}
			else
			{
				arrValues.add("");
				arrValues.add("");
			}
			if(rs != null)
			{
				rs.close();
			}
			strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strOrgHeadnew);
			rs=DBUtils.executeQuery(strQuery);
			if(rs.next())
			{
				arrValues.add(Helper.correctNull(rs.getString("org_scode")));
				arrValues.add(Helper.correctNull(rs.getString("usr_department")));
			}
			else
			{
				arrValues.add("");
				arrValues.add("");
			}
			arrValues.add("Y");
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("1",hshQuery);
			
			hshQuery=new HashMap();
			arrValues=new ArrayList();
			hshQuery.put("strQueryId","updmailbxchkstatus");
			arrValues.add("Y");
			arrValues.add(strOrgHeadnew);
			arrValues.add(strAppno);
			hshQuery.put("arrValues",arrValues);
			hshQueryValues.put("size","2");
			hshQueryValues.put("2",hshQuery);
			EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
			
		}
			
			
			
	 	}

	 	else
	 	{
	 if(element2.getElementsByTagName("error").getLength()>0)
	 //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
		{
	hsh.put("flag", Helper.correctNull((String)element2.getElementsByTagName("error").item(0).getTextContent()));
	hsh.put("Status", "F");  
		}
	 
	 if(sessionModuleType.equalsIgnoreCase("RET"))
	 {
	     	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
	 }
	 if(!sessionModuleType.equalsIgnoreCase("RET"))
	 {
	     	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
	 }
	     	arrValues.add(appno);
	     	if(!sessionModuleType.equalsIgnoreCase("RET"))
	     	{
	     		arrValues.add(hidFacSno);
	     	}
	     	hshQuery.put("arrValues", arrValues);
	     	hshQueryValues.put("1", hshQuery);
	     	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	     			"updatedata");
		
		 
		 
		hshQuery =new HashMap();
		arrValues=new ArrayList();
		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
		arrValues.add(appno);
		arrValues.add(parentappno);
		arrValues.add("F");
		arrValues.add(strUserId);
		arrValues.add(Helper.correctNull((String)hsh.get("flag")));
		arrValues.add("executeFinacleScript");
		arrValues.add(ServiceReqId);
		arrValues.add("");
		arrValues.add("");
		arrValues.add("");
		arrValues.add("LoanAcctInq");   			
		arrValues.add(hidFacSno);

		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
				"updatedata");

	 		}
	 		}
	}
	}

		}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			hsh.put("Status","F");
	    	hsh.put("flag",e.toString());
	    	
	    	hshQuery =new HashMap();
	    	arrValues=new ArrayList();
	    	hshQueryValues.put("size", "1");
	if(sessionModuleType.equalsIgnoreCase("RET"))
	{
	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
	}
	if(!sessionModuleType.equalsIgnoreCase("RET"))
	{
	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
	}
	    	arrValues.add(appno);
	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
	    	{
	    		arrValues.add(hidFacSno);
	    	}
	    	hshQuery.put("arrValues", arrValues);
	    	hshQueryValues.put("1", hshQuery);
	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	    			"updatedata");
	    	
	    	 
	    	 
	    	hshQuery =new HashMap();
	    	arrValues=new ArrayList();
	    	hshQueryValues.put("size", "1");
	 
	    	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
	    	
	    	arrValues.add(appno);
	    	arrValues.add(parentappno);
	    	arrValues.add("F");
	    	arrValues.add(strUserId);
	    	arrValues.add(Helper.correctNull((String)hsh.get("flag")));
	    	arrValues.add("executeFinacleScript");
	    	arrValues.add(ServiceReqId);
	    	arrValues.add(sessionModuleType);
	    	arrValues.add("");
	    	arrValues.add("");
	    	arrValues.add("LoanAcctInq"); 
	    	arrValues.add(hidFacSno);
	    	hshQuery.put("arrValues", arrValues);
	    	hshQueryValues.put("1", hshQuery);
	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
	    			"updatedata");
	    	
		}
		finally
		{
			int strsno=0;
			try {
				rs=DBUtils.executeLAPSQuery("sel_max_POSTSANCTION_APISTATUS_LOGGER");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				if(rs.next())
				{
					strsno=Integer.parseInt(rs.getString("TYPE"));
				}
			} catch (NumberFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
			
			
			hshQuery= new HashMap();
			arrValues = new ArrayList();
			hshQueryValues.put("size", "1");
			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS_LOGGER");
			arrValues.add(appno);
			arrValues.add(parentappno);
			arrValues.add(strRequest);
			arrValues.add("");
			arrValues.add(plainresponse);
			arrValues.add("");
			arrValues.add(sessionModuleType);
			arrValues.add(""+strsno);
			arrValues.add(strUserId);
			arrValues.add("");
			arrValues.add("executeFinacleScript");
			arrValues.add(ServiceReqId);
			arrValues.add(StrSecondReq);
			arrValues.add("");
			arrValues.add("");
			arrValues.add("");
			arrValues.add("");
			arrValues.add("LoanAcctInq");
			arrValues.add(plainresponse2);
			arrValues.add(""); 
			arrValues.add(hidFacSno); 
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put("1", hshQuery);
			try {
				EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
						"updatedata");
			} catch (NamingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return hsh;
	}

public HashMap checkLoanInterestModifyWithoutenc(HashMap hshRequestValues)
{
HashMap hsh= new HashMap();
String strResponse2="",interestrate="";

HashMap hshQueryValues= new HashMap();
HashMap hshQuery = new HashMap();
ArrayList arrValues = new ArrayList();
double douintval=0.00;
String sessionModuleType=Helper.correctNull((String)hshRequestValues.get("sessionModuleType"));	
String appno=Helper.correctNull((String)hshRequestValues.get("appno"));		
if(appno.equalsIgnoreCase(""))
{
	appno=Helper.correctNull((String)hshRequestValues.get("appno1"));	
}

String hidapplicationType="",hidappid="",strOrgCode="",strUserId="",inwardno="",strOrgShortCode="",userclass="";
String strUserDesignation="",apporgname="",appname="",strAppType="",appholder="",strOrgLevel="";

hidapplicationType=Helper.correctNull((String)hshRequestValues.get("hidapplicationType"));
hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantid"));
if(hidappid.equalsIgnoreCase(""))
{
	
	hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantnewid"));
}
strOrgCode=Helper.correctNull((String)hshRequestValues.get("strOrgCode"));
strUserId=Helper.correctNull((String)hshRequestValues.get("strUserId"));
inwardno=Helper.correctNull((String)hshRequestValues.get("inwardno"));
strOrgShortCode=Helper.correctNull((String)hshRequestValues.get("strOrgShortCode"));
userclass=Helper.correctNull((String)hshRequestValues.get("userclass"));
strUserDesignation=Helper.correctNull((String)hshRequestValues.get("strUserDesignation"));
apporgname=Helper.correctNull((String)hshRequestValues.get("apporgname"));
appname=Helper.correctNull((String)hshRequestValues.get("appname"));
strAppType=Helper.correctNull((String)hshRequestValues.get("strAppType"));
appholder=Helper.correctNull((String)hshRequestValues.get("appholder"));
strOrgLevel=Helper.correctNull((String)hshRequestValues.get("strOrgLevel"));
String hidFacSno=Helper.correctNull((String)hshRequestValues.get("hidFacSno"));
String ActNum="",startdate="",FreqMonths="",FreqMonthsdata="",mclrtabcode="",plainresponse="",plainresponse2="";
String strQuery="",strcustid="",parentappno="";
String strRequest="",ReqUUID="",ServiceReqId="Req_LINTTM101"+appno,strVersionId="10.2",strChannelId="COR",strBankId="01",StrMessageDateTime="2012-10-02T14:14:27.262";
String StrCustId="114021219",strAppurl="",strResponse="",Req_LINTTM101="Req_LINTTM101";
ResultSet rs=null;
String strintdiff="",Loan_Sanct_Eff_ROI_date="",MCLR_EFFECTIVEFROM="",MCLR_BASERATESPREAD="",MCLR_TYPE="",mclrtabcodeval="",FACILITY_MCLRTYPE="",FACILITY_SANCINTEREST="";
String	StrSecondReq="";
double intrate1=0.00,intrate2=0.00,intdiff=0.00;
hsh.put("updroiinfin", "updroiinfin");
try
{	
	

strQuery = SQLParser.getSqlQuery("sel_perappidcbsid^" + hidappid);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	strcustid = Helper.correctNull((String) rs
			.getString("perapp_cbsid"));
}

		





if(sessionModuleType.equalsIgnoreCase("RET"))
{
	
	strQuery = SQLParser.getSqlQuery("selparentappnodet^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		parentappno = Helper.correctNull((String) rs
				.getString("app_parent_appno"));
	}
	
strQuery = SQLParser.getSqlQuery("retaccno^" + parentappno);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	ActNum = Helper.correctNull((String) rs
			.getString("CBS_ACCOUNTNO"));
}




strQuery = SQLParser.getSqlQuery("selretduedate^" + appno);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	startdate = Helper.correctNull((String) rs
			.getString("LOAN_DUEDATE"));
	mclrtabcode= Helper.correctNull((String) rs
			.getString("loan_mclrtabcode"));
	Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
			.getString("Loan_Sanct_Eff_ROI_date"));
}


		


strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
			.getString("MCLR_EFFECTIVEFROM"));
	
}
//2022-08-30 00:00:00.0
if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
{
MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
}
//strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
//rs = DBUtils.executeQuery(strQuery);
//if (rs.next()) {
//	MCLR_TYPE = Helper.correctNull((String) rs
//			.getString("MCLR_TYPE"));
//	MCLR_BASERATESPREAD=Helper.correctNull((String) rs
//			.getString("MCLR_BASERATESPREAD"));
//	
//}


strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	MCLR_TYPE = Helper.correctNull((String) rs
			.getString("MCLR_TYPE"));
	MCLR_BASERATESPREAD=Helper.correctNull((String) rs
			.getString("MCLR_BASERATESPREAD"));
	
}


//strQuery = SQLParser.getSqlQuery("selretfreq^" + parentappno);
//rs = DBUtils.executeQuery(strQuery);
//if (rs.next()) {
//	FreqMonthsdata = Helper.correctNull((String) rs
//			.getString("TL_FEQUENCY"));
//}

FreqMonthsdata=MCLR_TYPE;
if(FreqMonthsdata.equalsIgnoreCase("M"))
{
	FreqMonths="1";
}
else if(FreqMonthsdata.equalsIgnoreCase("Y"))
{
	FreqMonths="12";
}
else if(FreqMonthsdata.equalsIgnoreCase("H"))
{
	FreqMonths="6";
}
else if(FreqMonthsdata.equalsIgnoreCase("Q"))
{
	FreqMonths="3";
}
else
{
	FreqMonths="12";
}

if(mclrtabcode.equalsIgnoreCase("AGSEC") || (mclrtabcode.equalsIgnoreCase("ATBIL" )))					
{
FreqMonths="3";
}

String int1="",int2="";
strQuery = SQLParser.getSqlQuery("selupdateROIInFInancleoldroi^" + appno);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	//intrate1=Double.parseDouble(Helper.correctNull((String) rs
		//	.getString("old_modified_roi")));
	intrate2= Double.parseDouble(Helper.correctNull((String) rs
			.getString("loan_modintrate")));
	
	intrate1=Double.parseDouble(MCLR_BASERATESPREAD);
}
	if(intrate1>intrate2)
	{
	intdiff=intrate1-intrate2;
	}
	else
	{
		intdiff=intrate2-intrate1;	
	}
	//intdiff=Math.round(intdiff);
	
	java.text.NumberFormat nf = java.text.NumberFormat
			.getNumberInstance();
			nf.setGroupingUsed(false);
			nf.setMaximumFractionDigits(2);
			nf.setMinimumFractionDigits(2);
			 strintdiff=nf.format((intdiff));
			

}

if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
{
	

	strQuery = SQLParser.getSqlQuery("selfaciparentappnodet^" + appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		parentappno = Helper.correctNull((String) rs
				.getString("app_parent_appno"));
	}
	
	

strQuery = SQLParser.getSqlQuery("selcorpagractno^" + parentappno+"^"+hidFacSno);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	ActNum = Helper.correctNull((String) rs
			.getString("CBS_ACCOUNTNO"));
}


strQuery = SQLParser.getSqlQuery("sel_postsanfacmclrrate^" + appno+"^"+hidFacSno);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
//	FreqMonthsdata = Helper.correctNull((String) rs
//			.getString("FACILITY_PERINSTALL"));
	FACILITY_SANCINTEREST=Helper.correctNull((String) rs
			.getString("FACILITY_SANCINTEREST"));
	startdate = Helper.correctNull((String) rs
			.getString("LOAN_DUEDATE"));
	Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
			.getString("facility_effintroidate"));
//	mclrtabcodeval=Helper.correctNull((String) rs
//			.getString("FACILITY_INTSUBTYPE"));
}


strQuery = SQLParser.getSqlQuery("sel_postsanfacroidet^" + appno+"^"+hidFacSno);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	FACILITY_MCLRTYPE = Helper.correctNull((String) rs
			.getString("FACILITY_MCLRTYPE"));
	if(!FACILITY_MCLRTYPE.equalsIgnoreCase(""))
	{
		MCLR_TYPE=FACILITY_MCLRTYPE.substring(0,1);
	}
	mclrtabcode=Helper.correctNull((String) rs
			.getString("MCLR_TABLECODE"));
}




FreqMonthsdata=MCLR_TYPE;
if(FreqMonthsdata.equalsIgnoreCase("M"))
{
	FreqMonths="1";
}
else if(FreqMonthsdata.equalsIgnoreCase("Y"))
{
	FreqMonths="12";
}
else if(FreqMonthsdata.equalsIgnoreCase("H"))
{
	FreqMonths="6";
}
else if(FreqMonthsdata.equalsIgnoreCase("Q"))
{
	FreqMonths="3";
}
else
{
	FreqMonths="12";
}

if(mclrtabcode.equalsIgnoreCase("AGSEC") || (mclrtabcode.equalsIgnoreCase("ATBIL" )))					
{
FreqMonths="3";
}	


strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
			.getString("MCLR_EFFECTIVEFROM"));
	
}
//2022-08-30 00:00:00.0
if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
{
MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
}
//strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
//rs = DBUtils.executeQuery(strQuery);
//if (rs.next()) {
////	MCLR_TYPE = Helper.correctNull((String) rs
////			.getString("MCLR_TYPE"));
//	MCLR_BASERATESPREAD=Helper.correctNull((String) rs
//			.getString("MCLR_BASERATESPREAD"));
//	
//}



strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
rs = DBUtils.executeQuery(strQuery);
if (rs.next()) {
	MCLR_TYPE = Helper.correctNull((String) rs
			.getString("MCLR_TYPE"));
	MCLR_BASERATESPREAD=Helper.correctNull((String) rs
			.getString("MCLR_BASERATESPREAD"));
	
}

intrate2= Double.parseDouble(FACILITY_SANCINTEREST);

intrate1=Double.parseDouble(MCLR_BASERATESPREAD);

if(intrate1>intrate2)
{
intdiff=intrate1-intrate2;
}
else
{
	intdiff=intrate2-intrate1;	
}
//intdiff=Math.round(intdiff);

java.text.NumberFormat nf = java.text.NumberFormat
		.getNumberInstance();
		nf.setGroupingUsed(false);
		nf.setMaximumFractionDigits(2);
		nf.setMinimumFractionDigits(2);
		 strintdiff=nf.format((intdiff));

}


String executeFinacleScript="executeFinacleScript";
String BankId="01";

strRequest="<?xml version=\'1.0\' encoding=\'UTF-8\'?>"+
"<FIXML xsi:schemaLocation=\'http://www.finacle.com/fixml executeFinacleScript.xsd\' xmlns=\'http://www.finacle.com/fixml\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>"+
"<Header>"+
"<RequestHeader>"+
"<MessageKey>"+
"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
"<ServiceRequestId>"+executeFinacleScript+"</ServiceRequestId>"+
"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
"<ChannelId>COR</ChannelId>"+
"<LanguageId></LanguageId>"+
"</MessageKey>"+
"<RequestMessageInfo>"+
"<BankId>"+BankId+"</BankId>"+
"<TimeZone></TimeZone>"+
"<EntityId></EntityId>"+
"<EntityType></EntityType>"+
"<ArmCorrelationId></ArmCorrelationId>"+
"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
"</RequestMessageInfo>"+
"<Security>"+
"<Token>"+
"<PasswordToken>"+
"<UserId></UserId>"+
"<Password></Password>"+
"</PasswordToken>"+
"</Token>"+
"<FICertToken></FICertToken>"+
"<RealUserLoginSessionId></RealUserLoginSessionId>"+
"<RealUser></RealUser>"+
"<RealUserPwd></RealUserPwd>"+
"<SSOTransferToken></SSOTransferToken>"+
"</Security>"+
"</RequestHeader>"+
"</Header>"+
"<Body>"+
"<executeFinacleScriptRequest>"+
"<ExecuteFinacleScriptInputVO>"+
"<requestId>FI_LINTTModify.scr</requestId>"+
"</ExecuteFinacleScriptInputVO>"+
"<executeFinacleScript_CustomData>"+
"<AcctNum>"+ActNum+"</AcctNum>"+
"<tblCode>"+mclrtabcode+"</tblCode>"+
"<startDate>"+startdate+"</startDate>"+
"<peggedFreqInMnths>"+FreqMonths+"</peggedFreqInMnths>"+
"<PrefIntRate>"+strintdiff+"</PrefIntRate>"+
"<peggedFlg>Y</peggedFlg>"+
"</executeFinacleScript_CustomData>"+
"</executeFinacleScriptRequest>"+
"</Body>"+
"</FIXML>";

System.out.println("==========strRequest============"+strRequest);



	URL url = new URL(ApplicationParams.getStrPostSanctionURLEnc1());

	System.out.println("==========ApplicationParams.getStrPostSanctionNURL()============"+ApplicationParams.getStrPostSanctionNURL());
HttpURLConnection con = (HttpURLConnection) url.openConnection();
con.setDoInput(true);

con.setRequestMethod("POST");
con.setRequestProperty("Content-Type","text/xml; charset=UTF-8");
	
	
	con.setConnectTimeout(5000);
	con .setDoOutput(true);

OutputStream os = con.getOutputStream();
	System.out.println("====after outputStream======");
	OutputStreamWriter osw = new OutputStreamWriter(os);
	System.out.println("====after OutputStreamWriter======");
	osw.write(strRequest);//strRequest);
	//osw.flush();
	
	
	Date connectionStartTime=new Date();
	System.out.println("::Request Sent At: " + connectionStartTime);
	System.out.println("::Request Data: "+ strRequest);
	osw.close();
	
	
	String line="",strRes="";
	InputStreamReader reader = new InputStreamReader(con.getInputStream());
	BufferedReader in = new BufferedReader(reader);
	
	StringBuffer result = new StringBuffer();
	while ((line = in.readLine()) != null) {
		result.append(line);
	}
	
	log
	.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
			+ result.toString());

strRes = result.toString();
System.out.println(strRes);
plainresponse= result.toString();
strResponse=strRes; 
		

//PostSanFirstRes.xml
	/*local file reader*/
	
/*	BufferedReader br1 = null;
	FileReader fr1 = null;
	String ResponseXML="";
	
	fr1 = new FileReader("D:\\PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
	br1 = new BufferedReader(fr1);	
	
	
	
	 Scanner responseReader = new Scanner(br1);
     StringBuffer buffer = new StringBuffer();
     while (responseReader.hasNextLine()) {
        buffer.append(responseReader.nextLine()+"\n");
     }
     responseReader.close();
     //Printing the Response
     System.out.println(buffer.toString());
     plainresponse=buffer.toString();
     strResponse=buffer.toString();
	
	
	System.out.println("====before=====>"+strResponse); */
	
	
	strResponse=strResponse.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml executeFinacleScript.xsd\" xmlns=\"http://www.finacle.com/fixml\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");
	
    strResponse=strResponse.trim();
	System.out.println("====After=====>"+strResponse);
	
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	 
	InputSource inputSource 	   = new InputSource(new StringReader(strResponse));
    Document document 				   = builder.parse(inputSource);
    
	//Build Document
	//Document document = builder.parse(new InputStream(strResponse)) ;
    String CipherValue1="", CipherValue="";
		
	document.getDocumentElement().normalize();
	
	System.out.println("Root Element :" + document.getDocumentElement().getNodeName());
	
	NodeList list = document.getElementsByTagName("Body");

    for (int temp = 0; temp < list.getLength(); temp++) {

        Node node = list.item(temp);

        if (node.getNodeType() == Node.ELEMENT_NODE) {

            Element element = (Element) node;

            // get staff's attribute
           // String id = element.getAttribute("id");

            // get text
            
            if(element.getElementsByTagName("SUCCESS").getLength()>0)
            		{
            	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
            	hsh.put("PostSanctionROIStatus", "S");  
            	hsh.put("Status","S");
            	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
            	
            		}
           
            
            if(element.getElementsByTagName("ErrorDesc").getLength()>0)
                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
        		{
        	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
        	hsh.put("PostSanctionROIStatus", "F");  
        	
        	hsh.put("Status","F");
        	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
        	
        	 hshQuery =new HashMap();
       		arrValues=new ArrayList();
       		hshQueryValues.put("size", "1");
     			hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
     			arrValues.add(appno);
     		
     			hshQuery.put("arrValues", arrValues);
     			hshQueryValues.put("1", hshQuery);
     			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
     					"updatedata");
     			
       		 
       		 
       		hshQuery =new HashMap();
       		arrValues=new ArrayList();
       		hshQueryValues.put("size", "1");
     			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
     			arrValues.add(appno);
     			arrValues.add(parentappno);
     			arrValues.add("F");
     			arrValues.add(strUserId);
     			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
     			arrValues.add("executeFinacleScript");
     			arrValues.add(ServiceReqId);
     			arrValues.add("");
     			arrValues.add("");
     			arrValues.add("");
     			arrValues.add("LoanAcctInq");   			
     			
     		
     			hshQuery.put("arrValues", arrValues);
     			hshQueryValues.put("1", hshQuery);
     			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
     					"updatedata");
        		}
            
            if(element.getElementsByTagName("error").getLength()>0)
            //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
    		{
    	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
    	hsh.put("PostSanctionROIStatus", "F");  
    	
    	hsh.put("Status","F");
    	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
    	
    	
    	 hshQuery =new HashMap();
   		arrValues=new ArrayList();
   		hshQueryValues.put("size", "1");
 			hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
 			arrValues.add(appno);
 		
 			hshQuery.put("arrValues", arrValues);
 			hshQueryValues.put("1", hshQuery);
 			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
 					"updatedata");
 			
   		 
   		 
   		hshQuery =new HashMap();
   		arrValues=new ArrayList();
   		hshQueryValues.put("size", "1");
 			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
 			arrValues.add(appno);
 			arrValues.add(parentappno);
 			arrValues.add("F");
 			arrValues.add(strUserId);
 			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
 			arrValues.add("executeFinacleScript");
 			arrValues.add(ServiceReqId);
 			arrValues.add("");
 			arrValues.add("");
 			arrValues.add("");
 			arrValues.add("LoanAcctInq");   			
 			
 		
 			hshQuery.put("arrValues", arrValues);
 			hshQueryValues.put("1", hshQuery);
 			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
 					"updatedata");
    		}
            
        }
    }

  
	
	
System.out.println("Output================>"+strResponse);



if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))
{




/*StrSecondReq="<FIXML xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+
"<Header>"+
"<RequestHeader>"+
"<MessageKey>"+
"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
"<ServiceRequestId>LoanAcctInq</ServiceRequestId>"+
"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
"<ChannelId>COR</ChannelId>"+
"</MessageKey>"+
"<RequestMessageInfo>"+
"<BankId>"+BankId+"</BankId>"+
"<TimeZone></TimeZone>"+
"<EntityId></EntityId>"+
"<EntityType></EntityType>"+
"<ArmCorrelationId></ArmCorrelationId>"+
"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
"</RequestMessageInfo>"+
"<Security>"+
"<Token>"+
"<PasswordToken>"+
"<UserId></UserId>"+
"<Password></Password>"+
"</PasswordToken>"+
"</Token>"+
"<FICertToken></FICertToken>"+
"<RealUserLoginSessionId></RealUserLoginSessionId>"+
"<RealUser></RealUser>"+
"<RealUserPwd></RealUserPwd>"+
"<SSOTransferToken></SSOTransferToken>"+
"</Security>"+
"</RequestHeader>"+
"</Header>"+
"<Body>"+
"<LoanAcctInqRequest>"+
"<LoanAcctInqRq>"+
"<LoanAcctId>"+
"<AcctId>"+ActNum+"</AcctId>"+
"</LoanAcctId>"+
"</LoanAcctInqRq>"+
"<LoanAcctInq_CustomData/>"+
"</LoanAcctInqRequest>"+
"</Body>"+
"</FIXML>";



System.out.println("==========StrSecondReq============"+StrSecondReq);



URL url2 = new URL(ApplicationParams.getStrPostSanctionNURL2());

System.out.println("==========ApplicationParams.getStrPostSanctionNURL2()============"+ApplicationParams.getStrPostSanctionNURL2());
HttpURLConnection con2 = (HttpURLConnection) url2.openConnection();
con2.setDoInput(true);

con2.setRequestMethod("POST");
con2.setRequestProperty("Content-Type","text/xml; charset=UTF-8");
con2.setConnectTimeout(5000);
con2 .setDoOutput(true);

OutputStream os2 = con2.getOutputStream();
System.out.println("====after outputStream======");
OutputStreamWriter osw2 = new OutputStreamWriter(os2);
System.out.println("====after OutputStreamWriter======");
osw2.write(StrSecondReq);//strRequest);
//osw.flush();


Date connectionStartTime1=new Date();
System.out.println("::StrSecondReq Sent At: " + connectionStartTime1);
System.out.println("::StrSecondReq Data: "+ StrSecondReq);
osw2.close();


String line2="",strRes2="";
InputStreamReader reader2 = new InputStreamReader(con2.getInputStream());
BufferedReader in2 = new BufferedReader(reader2);

StringBuffer result2 = new StringBuffer();
while ((line2 = in2.readLine()) != null) {
result2.append(line2);
}

log
.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
	+ result2.toString());

strRes2 = result2.toString();
System.out.println(strRes2);
plainresponse2=strRes2;
strResponse2=strRes2; 


/*System.out.println("strResponse2=================="+strResponse2);*/

/*BufferedReader br2 = null;
FileReader fr2 = null;
String ResponseXML2="";

fr2 = new FileReader("D:\\loanAccResponse.xml");//E:\\PostSanctionapi.xml");
br2 = new BufferedReader(fr2);	



Scanner responseReader2 = new Scanner(br2);
StringBuffer buffer2 = new StringBuffer();
while (responseReader2.hasNextLine()) {
buffer2.append(responseReader2.nextLine()+"\n");
}
responseReader2.close();
//Printing the Response
System.out.println(buffer2.toString());
plainresponse2=buffer2.toString();
strResponse2=buffer2.toString();


System.out.println("strResponse2=================="+strResponse2);*/

strResponse2=strResponse2.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");


strResponse=strResponse.trim();
System.out.println("====After=====>"+strResponse);

DocumentBuilderFactory factory2 = DocumentBuilderFactory.newInstance();
DocumentBuilder builder2 = factory2.newDocumentBuilder();

InputSource inputSource2 	   = new InputSource(new StringReader(strResponse2));
Document document2 				   = builder.parse(inputSource2);

//Build Document
//Document document = builder.parse(new InputStream(strResponse)) ;


document.getDocumentElement().normalize();

System.out.println("Root Element :" + document2.getDocumentElement().getNodeName());

NodeList list2 = document2.getElementsByTagName("HostTransaction");

for (int temp = 0; temp < list2.getLength(); temp++) {

Node node2 = list2.item(temp);

if (node2.getNodeType() == Node.ELEMENT_NODE) {

Element element2 = (Element) node2;

// get staff's attribute
//String id = element.getAttribute("id");

// get text

if(element2.getElementsByTagName("Status").getLength()>=0)
		{
	hsh.put("flagval", Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()));
	
	if(Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()).equalsIgnoreCase("SUCCESS"))
	{
	hsh.put("Status", "S");  
	}
	if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))	
	{
		
		NodeList list3 = document2.getElementsByTagName("NetIntRate");

		 for (int temp3 = 0; temp3 < list3.getLength(); temp3++) {

		     Node node3 = list3.item(temp3);

		     if (node3.getNodeType() == Node.ELEMENT_NODE) {

		         Element element3 = (Element) node3;
		
		         
		        interestrate=Helper.correctNull((String)element3.getElementsByTagName("value").item(0).getTextContent());
		        douintval=Double.valueOf(interestrate);
		         
		     }
		
		 }
		 
		 
		hshQuery =new HashMap();
		arrValues=new ArrayList();
		hshQueryValues.put("size", "1");
	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
	arrValues.add(appno);

	hshQuery.put("arrValues", arrValues);
	hshQueryValues.put("1", hshQuery);
	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
			"updatedata");
	
		 
		 
		hshQuery =new HashMap();
		arrValues=new ArrayList();
		hshQueryValues.put("size", "1");
	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
	arrValues.add(appno);
	arrValues.add(parentappno);
	arrValues.add("S");
	arrValues.add(strUserId);
	arrValues.add("");
	arrValues.add("executeFinacleScript");
	arrValues.add(ServiceReqId);
	arrValues.add("");
	arrValues.add("");
	arrValues.add("");
	arrValues.add("LoanAcctInq");   			
	

	hshQuery.put("arrValues", arrValues);
	hshQueryValues.put("1", hshQuery);
	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
			"updatedata");
	
	hshQuery =new HashMap();
		arrValues=new ArrayList();
	hshQueryValues.put("size", "1");
	hshQuery.put("strQueryId", "updateROIInFInancle");
	arrValues.add(""+douintval);
	arrValues.add(""+douintval);
	arrValues.add(""+douintval);
	arrValues.add(appno);
	hshQuery.put("arrValues", arrValues);
	hshQueryValues.put("1", hshQuery);
	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
			"updatedata");
	
	
String 	strAppno=appno,appstatus1="",application_flag="",strOrgcodenew="",strOrglevelnew="",strappholder="",str_sentorglevelnew="",strOrgHeadnew="";
String strFromflowpoint="",strToflowpoint="";

rs = DBUtils.executeLAPSQuery("commworkflowsel2^" + strAppno);
if (rs.next()) {
	appstatus1 = correctNull((String) rs.getString("app_status"));
	application_flag = Helper.correctNull((String) rs
			.getString("app_renew_flag"));
	strOrgcodenew=Helper.correctNull((String)rs.getString("APP_ORGCODE"));
	strOrglevelnew=Helper.correctNull((String)rs.getString("app_orglevel"));
    strappholder=Helper.correctNull((String)rs.getString("APP_APPLNHOLDER"));
}

if(rs!=null)
	rs.close();
strQuery=SQLParser.getSqlQuery("selorg_level^"+strOrgcodenew);
rs=DBUtils.executeQuery(strQuery);
if(rs.next())
{
	str_sentorglevelnew = correctNull((String)rs.getString("org_level"));
	strOrgHeadnew = correctNull((String)rs.getString("org_head"));
}

strFromflowpoint = (String) hshRequestValues.get("mail_fromflowpoint");
strToflowpoint = (String) hshRequestValues.get("mail_toflowpoint");

System.out.println("======strOrglevelnew======="+strOrglevelnew);


String scodeforallmoduls="";
String headoforg="";

if(!strOrglevelnew.equalsIgnoreCase("A"))
{
	if(rs != null)
	{
		rs.close();
	}
	strQuery=SQLParser.getSqlQuery("sel_retmclrresetfreq^"+strAppno);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{
		scodeforallmoduls=Helper.correctNull(rs.getString("LOAN_PERTAINS_BRANCH"));
	}
	
	


	if(rs != null)
	{
		rs.close();
	}
	strQuery=SQLParser.getSqlQuery("getorgheadfromorgnisation^"+scodeforallmoduls);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{
		headoforg=Helper.correctNull(rs.getString("ORG_HEAD"));
	}
	
	strOrgHeadnew=headoforg;
}
//if(strOrglevelnew.equalsIgnoreCase("A"))
//{

	String strsms="";
	hshQueryValues = new HashMap();
	hshQuery=new HashMap();
	arrValues=new ArrayList();
	hshQuery.put("strQueryId","commworkflowinsnew3");
	arrValues.add(strAppno);
	arrValues.add(strappholder);
	arrValues.add(strOrgHeadnew);
	arrValues.add(strFromflowpoint);
	//arrValues.add(strToflowpoint);
	arrValues.add("C");
	if(rs != null)
	{
		rs.close();
	}
	strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strappholder);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{
		arrValues.add(Helper.correctNull(rs.getString("org_scode")));
		arrValues.add(Helper.correctNull(rs.getString("usr_department")));
	}
	else
	{
		arrValues.add("");
		arrValues.add("");
	}
	if(rs != null)
	{
		rs.close();
	}
	strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strOrgHeadnew);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{
		arrValues.add(Helper.correctNull(rs.getString("org_scode")));
		arrValues.add(Helper.correctNull(rs.getString("usr_department")));
	}
	else
	{
		arrValues.add("");
		arrValues.add("");
	}
	arrValues.add("Y");
	hshQuery.put("arrValues",arrValues);
	hshQueryValues.put("1",hshQuery);
	
	hshQuery=new HashMap();
	arrValues=new ArrayList();
	hshQuery.put("strQueryId","updmailbxchkstatus");
	arrValues.add("Y");
	arrValues.add(strOrgHeadnew);
	arrValues.add(strAppno);
	hshQuery.put("arrValues",arrValues);
	hshQueryValues.put("size","2");
	hshQueryValues.put("2",hshQuery);
	EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
	
//}
	
	
	
	}

	else
	{
if(element2.getElementsByTagName("error").getLength()>0)
//if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
{
hsh.put("flag", Helper.correctNull((String)element2.getElementsByTagName("error").item(0).getTextContent()));
hsh.put("Status", "F");  
}

hshQuery =new HashMap();
arrValues=new ArrayList();
hshQueryValues.put("size", "1");
hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
arrValues.add(appno);

hshQuery.put("arrValues", arrValues);
hshQueryValues.put("1", hshQuery);
EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
		"updatedata");

 
 
hshQuery =new HashMap();
arrValues=new ArrayList();
hshQueryValues.put("size", "1");
hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
arrValues.add(appno);
arrValues.add(parentappno);
arrValues.add("F");
arrValues.add(strUserId);
arrValues.add(Helper.correctNull((String)hsh.get("flag")));
arrValues.add("executeFinacleScript");
arrValues.add(ServiceReqId);
arrValues.add("");
arrValues.add("");
arrValues.add("");
arrValues.add("LoanAcctInq");   			


hshQuery.put("arrValues", arrValues);
hshQueryValues.put("1", hshQuery);
EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
		"updatedata");

		}
		}
}
}

}
}
catch(Exception e)
{
	e.printStackTrace();
}
finally
{
	int strsno=0;
	try {
		rs=DBUtils.executeLAPSQuery("sel_max_POSTSANCTION_APISTATUS_LOGGER");
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	try {
		if(rs.next())
		{
			strsno=Integer.parseInt(rs.getString("TYPE"));
		}
	} catch (NumberFormatException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}	
	
	
	hshQuery= new HashMap();
	arrValues = new ArrayList();
	hshQueryValues.put("size", "1");
	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS_LOGGER");
	arrValues.add(appno);
	arrValues.add(parentappno);
	arrValues.add(strRequest);
	arrValues.add("");
	arrValues.add(plainresponse);
	arrValues.add("");
	arrValues.add("");
	arrValues.add(""+strsno);
	arrValues.add(strUserId);
	arrValues.add("");
	arrValues.add("executeFinacleScript");
	arrValues.add(ServiceReqId);
	arrValues.add(StrSecondReq);
	arrValues.add("");
	arrValues.add("");
	arrValues.add("");
	arrValues.add("");
	arrValues.add("LoanAcctInq");
	arrValues.add(plainresponse2);
	arrValues.add("");   			
	hshQuery.put("arrValues", arrValues);
	hshQueryValues.put("1", hshQuery);
	try {
		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
				"updatedata");
	} catch (NamingException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}
return hsh;
}
public HashMap checkLoanInterestModifyhttpheader(HashMap hshRequestValues) throws NamingException, Exception
{
	



	HashMap hshRequest= new HashMap();
	
	TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
        public void checkClientTrusted(X509Certificate[] certs, String authType) {
        }
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
        }
    }
};
	
	
	HashMap hsh= new HashMap();
	String strResponse2="",interestrate="";
	
	HashMap hshQueryValues= new HashMap();
	HashMap hshQuery = new HashMap();
	ArrayList arrValues = new ArrayList();
	double douintval=0.00;
	String sessionModuleType=Helper.correctNull((String)hshRequestValues.get("sessionModuleType"));	
	String appno=Helper.correctNull((String)hshRequestValues.get("appno"));		
	if(appno.equalsIgnoreCase(""))
	{
		appno=Helper.correctNull((String)hshRequestValues.get("appno1"));	
	}
	
	String hidapplicationType="",hidappid="",strOrgCode="",strUserId="",inwardno="",strOrgShortCode="",userclass="";
	String strUserDesignation="",apporgname="",appname="",strAppType="",appholder="",strOrgLevel="",hidFacSno="";
	
	hidapplicationType=Helper.correctNull((String)hshRequestValues.get("hidapplicationType"));
	hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantid"));
	if(hidappid.equalsIgnoreCase(""))
	{
		
		hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantnewid"));
	}
	strOrgCode=Helper.correctNull((String)hshRequestValues.get("strOrgCode"));
	strUserId=Helper.correctNull((String)hshRequestValues.get("strUserId"));
	inwardno=Helper.correctNull((String)hshRequestValues.get("inwardno"));
	strOrgShortCode=Helper.correctNull((String)hshRequestValues.get("strOrgShortCode"));
	userclass=Helper.correctNull((String)hshRequestValues.get("userclass"));
	strUserDesignation=Helper.correctNull((String)hshRequestValues.get("strUserDesignation"));
	apporgname=Helper.correctNull((String)hshRequestValues.get("apporgname"));
	appname=Helper.correctNull((String)hshRequestValues.get("appname"));
	strAppType=Helper.correctNull((String)hshRequestValues.get("strAppType"));
	appholder=Helper.correctNull((String)hshRequestValues.get("appholder"));
	strOrgLevel=Helper.correctNull((String)hshRequestValues.get("strOrgLevel"));
	hidFacSno=Helper.correctNull((String)hshRequestValues.get("hidFacSno"));
	String ActNum="",startdate="",FreqMonths="",FreqMonthsdata="",mclrtabcode="",plainresponse="",plainresponse2="";
	String strQuery="",strcustid="",parentappno="";
	String strRequest="",ReqUUID="",ServiceReqId="Req_LINTTM101"+appno,strVersionId="10.2",strChannelId="COR",strBankId="01",StrMessageDateTime="2012-10-02T14:14:27.262";
	String StrCustId="114021219",strAppurl="",strResponse="",Req_LINTTM101="Req_LINTTM101";
	ResultSet rs=null;
	String strintdiff="",Loan_Sanct_Eff_ROI_date="",MCLR_EFFECTIVEFROM="",MCLR_BASERATESPREAD="",MCLR_TYPE="",FACILITY_SANCINTEREST="",FACILITY_MCLRTYPE="";
	String	StrSecondReq="";
	double intrate1=0.00,intrate2=0.00,intdiff=0.00;
	hsh.put("updroiinfin", "updroiinfin");
	hsh.put("hidFacSnoroi", "hidFacSno");
	try
	{	
		
	
	strQuery = SQLParser.getSqlQuery("sel_perappidcbsid^" + hidappid);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		strcustid = Helper.correctNull((String) rs
				.getString("perapp_cbsid"));
	}
	
			
	strQuery = SQLParser.getSqlQuery("selparentappnodet^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		parentappno = Helper.correctNull((String) rs
				.getString("app_parent_appno"));
	}
	
	
	
	
	
	if(sessionModuleType.equalsIgnoreCase("RET"))
	{
	strQuery = SQLParser.getSqlQuery("retaccno^" + parentappno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		ActNum = Helper.correctNull((String) rs
				.getString("CBS_ACCOUNTNO"));
	}
	
	
	
	
	strQuery = SQLParser.getSqlQuery("selretduedate^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		startdate = Helper.correctNull((String) rs
				.getString("LOAN_DUEDATE"));
		mclrtabcode= Helper.correctNull((String) rs
				.getString("loan_mclrtabcode"));
		Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
				.getString("Loan_Sanct_Eff_ROI_date"));
	}
	
	
			
	
	
	strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
				.getString("MCLR_EFFECTIVEFROM"));
		
	}
	//2022-08-30 00:00:00.0
	if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
	{
	MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
	}
	strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_TYPE = Helper.correctNull((String) rs
				.getString("MCLR_TYPE"));
		MCLR_BASERATESPREAD=Helper.correctNull((String) rs
				.getString("MCLR_BASERATESPREAD"));
		
	}
	
	
//	strQuery = SQLParser.getSqlQuery("selretfreq^" + parentappno);
//	rs = DBUtils.executeQuery(strQuery);
//	if (rs.next()) {
//		FreqMonthsdata = Helper.correctNull((String) rs
//				.getString("TL_FEQUENCY"));
//	}
	
	FreqMonthsdata=MCLR_TYPE;
	if(FreqMonthsdata.equalsIgnoreCase("M"))
	{
		FreqMonths="1";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Y"))
	{
		FreqMonths="12";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("H"))
	{
		FreqMonths="6";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Q"))
	{
		FreqMonths="3";
	}
	else
	{
		FreqMonths="12";
	}
	
	if(mclrtabcode.equalsIgnoreCase("AGSEC") || mclrtabcode.equalsIgnoreCase("ATBIL" )|| mclrtabcode.equalsIgnoreCase("NTBIL"))					
	{
FreqMonths="3";
	}
	
	String int1="",int2="";
	strQuery = SQLParser.getSqlQuery("selupdateROIInFInancleoldroi^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		//intrate1=Double.parseDouble(Helper.correctNull((String) rs
			//	.getString("old_modified_roi")));
		intrate2= Double.parseDouble(Helper.correctNull((String) rs
				.getString("loan_modintrate")));
	}
		intrate1=Double.parseDouble(MCLR_BASERATESPREAD);
		if(intrate1>intrate2)
		{
		intdiff=intrate1-intrate2;
		}
		else
		{
			intdiff=intrate2-intrate1;	
		}
		//intdiff=Math.round(intdiff);
		
		java.text.NumberFormat nf = java.text.NumberFormat
				.getNumberInstance();
				nf.setGroupingUsed(false);
				nf.setMaximumFractionDigits(2);
				nf.setMinimumFractionDigits(2);
				 strintdiff=nf.format((intdiff));
				
	//}
	}
	
	if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
	{

		
		String FACILITY_OLDAPPSNO="";
		strQuery = SQLParser.getSqlQuery("selfaciparentappnodet^" + appno+"^"+hidFacSno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			parentappno = Helper.correctNull((String) rs
					.getString("app_parent_appno"));
			FACILITY_OLDAPPSNO = Helper.correctNull((String) rs
					.getString("app_parent_appno"));
			
		
		}
		
		
		//strQuery = SQLParser.getSqlQuery("selcorpagractno^" + appno+"^"+parentappno);
		strQuery = SQLParser.getSqlQuery("selcorpagractno^"+parentappno+"^"+ appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		ActNum = Helper.correctNull((String) rs
				.getString("CBS_ACCOUNTNO"));
	}
	
	
	strQuery = SQLParser.getSqlQuery("sel_postsanfacmclrrate^" + appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
//		FreqMonthsdata = Helper.correctNull((String) rs
//				.getString("FACILITY_PERINSTALL"));
		FACILITY_SANCINTEREST=Helper.correctNull((String) rs
				.getString("FACILITY_SANCINTEREST"));
		startdate = Helper.correctNull((String) rs
				.getString("LOAN_DUEDATE"));
		Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
				.getString("facility_effintroidate"));
//		mclrtabcodeval=Helper.correctNull((String) rs
//				.getString("FACILITY_INTSUBTYPE"));
	}
	
	
	strQuery = SQLParser.getSqlQuery("sel_postsanfacroidet^" + appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		FACILITY_MCLRTYPE = Helper.correctNull((String) rs
				.getString("FACILITY_MCLRTYPE"));
		if(!FACILITY_MCLRTYPE.equalsIgnoreCase(""))
		{
			MCLR_TYPE=FACILITY_MCLRTYPE.substring(0,1);
		}
		mclrtabcode=Helper.correctNull((String) rs
				.getString("MCLR_TABLECODE"));
	}
	
	
	
	
	FreqMonthsdata=MCLR_TYPE;
	if(FreqMonthsdata.equalsIgnoreCase("M"))
	{
		FreqMonths="1";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Y"))
	{
		FreqMonths="12";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("H"))
	{
		FreqMonths="6";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Q"))
	{
		FreqMonths="3";
	}
	else
	{
		FreqMonths="12";
	}
	
	if(mclrtabcode.equalsIgnoreCase("AGSEC") || (mclrtabcode.equalsIgnoreCase("ATBIL" )) || mclrtabcode.equalsIgnoreCase("NTBIL"))					
	{
FreqMonths="3";
	}	
	
	
	strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
				.getString("MCLR_EFFECTIVEFROM"));
		
	}
	//2022-08-30 00:00:00.0
	if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
	{
	MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
	}

	
	
	
	strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_TYPE = Helper.correctNull((String) rs
				.getString("MCLR_TYPE"));
		MCLR_BASERATESPREAD=Helper.correctNull((String) rs
				.getString("MCLR_BASERATESPREAD"));
		
	}
	
	intrate2= Double.parseDouble(FACILITY_SANCINTEREST);
	
	intrate1=Double.parseDouble(MCLR_BASERATESPREAD);

	if(intrate1>intrate2)
	{
	intdiff=intrate1-intrate2;
	}
	else
	{
		intdiff=intrate2-intrate1;	
	}
	//intdiff=Math.round(intdiff);
	
	java.text.NumberFormat nf = java.text.NumberFormat
			.getNumberInstance();
			nf.setGroupingUsed(false);
			nf.setMaximumFractionDigits(2);
			nf.setMinimumFractionDigits(2);
			 strintdiff=nf.format((intdiff));
	
	
	}
	
	
	
	
	String executeFinacleScript="executeFinacleScript";
	String BankId="01";
	
	strRequest="<?xml version=\'1.0\' encoding=\'UTF-8\'?>"+
	"<FIXML xsi:schemaLocation=\'http://www.finacle.com/fixml executeFinacleScript.xsd\' xmlns=\'http://www.finacle.com/fixml\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>"+
	"<Header>"+
	"<RequestHeader>"+
	"<MessageKey>"+
	"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
	"<ServiceRequestId>"+executeFinacleScript+"</ServiceRequestId>"+
	"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
	"<ChannelId>COR</ChannelId>"+
	"<LanguageId></LanguageId>"+
	"</MessageKey>"+
    "<RequestMessageInfo>"+
	"<BankId>"+BankId+"</BankId>"+
	"<TimeZone></TimeZone>"+
	"<EntityId></EntityId>"+
	"<EntityType></EntityType>"+
	"<ArmCorrelationId></ArmCorrelationId>"+
	"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
	"</RequestMessageInfo>"+
	"<Security>"+
	"<Token>"+
	"<PasswordToken>"+
	"<UserId></UserId>"+
	"<Password></Password>"+
	"</PasswordToken>"+
	"</Token>"+
	"<FICertToken></FICertToken>"+
	"<RealUserLoginSessionId></RealUserLoginSessionId>"+
	"<RealUser></RealUser>"+
	"<RealUserPwd></RealUserPwd>"+
	"<SSOTransferToken></SSOTransferToken>"+
	"</Security>"+
	"</RequestHeader>"+
	"</Header>"+
	"<Body>"+
	"<executeFinacleScriptRequest>"+
	"<ExecuteFinacleScriptInputVO>"+
	"<requestId>FI_LINTTModify.scr</requestId>"+
	"</ExecuteFinacleScriptInputVO>"+
	"<executeFinacleScript_CustomData>"+
	"<AcctNum>"+ActNum+"</AcctNum>"+
	"<tblCode>"+mclrtabcode+"</tblCode>"+
	"<startDate>"+startdate+"</startDate>"+
	"<peggedFreqInMnths>"+FreqMonths+"</peggedFreqInMnths>"+
	"<PrefIntRate>"+strintdiff+"</PrefIntRate>"+
	"<peggedFlg>Y</peggedFlg>"+
	"</executeFinacleScript_CustomData>"+
	"</executeFinacleScriptRequest>"+
	"</Body>"+
	"</FIXML>";
	
	System.out.println("==========strRequest============"+strRequest);
	
	
	String strEncyrpteddata="",EncyrptedAesSessionKey="";
	byte[] Sessionkey=KblEncyrptionDecyrption.generateAESKey();
	System.out.println("==========Sessionkey=======1====="+Sessionkey);
	 strEncyrpteddata=KblEncyrptionDecyrption.getAESEncryptedData(strRequest, Sessionkey);   //strRequest
	System.out.println("==========strEncyrpteddata============"+strEncyrpteddata);
	 EncyrptedAesSessionKey=KblEncyrptionDecyrption.encryptAESKey(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
	System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);
	
	
	
	String encrequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <xenc:EncryptedData Type=\"http://www.w3.org/2001/04/xmlenc#Element\"  xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"> <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"/> <dsig:KeyInfo xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"> <xenc:EncryptedKey> <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"> <dsig:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/> <xenc:OAEPparams/> <xenc:MGFAlgorithm Algorithm=\"http://www.w3.org/2009/xmlenc11#mgf1sha256\"/> </xenc:EncryptionMethod> <dsig:KeyInfo> <dsig:KeyName>pronteff_sha</dsig:KeyName> </dsig:KeyInfo> <xenc:CipherData> <xenc:CipherValue>" + 
	        EncyrptedAesSessionKey + "</xenc:CipherValue> " + 
	        "</xenc:CipherData> " + 
	        "</xenc:EncryptedKey> " + 
	        "</dsig:KeyInfo> " + 
	        "<xenc:CipherData> " + 
	        "<xenc:CipherValue>" + strEncyrpteddata + "</xenc:CipherValue> " + 
	        "</xenc:CipherData>" + 
	        "</xenc:EncryptedData>";
	
	System.out.println("==============encrequest========="+encrequest);
	
	
	String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";


	 strprivate_key_req = "yes";
	  strprivateKeyfile = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDuqhqoOkp/AysN8fnaOIl2pubeCj+HuYvZhnzvYHhwoMgklFv4Jzx8cioDdOMRmVRVGFMt5cOQWt/6JuJqr34h9NE7wYJOepQO2e5DnuwczFy0K1Ad5CXoJrX7v72Fimn/AGJtZ9jUcyu6BzK2ryBYvA4qyI7em7+EnOix/c2TtTHybklXKry2BIV43Cc5EXW7++YCn1TM+qkebXAcRp/ROnWPWx8rR/bO1PfOfDrvNcbS+un7e7EPMFpP90W6nw2euI0n3TSLq/92cI2chmK1B5d0EYXQxqxoNw6IUsZDD9sI6caD8Bf1mHAfEUwLZR/S3uAZHRik5hR7LMa9Gi+lAgMBAAECggEAE7JU3N64AzTJutmQ2zegm1A5lshAZ1J4KOL2hfLvkwFR7eLoltmgyPcgYdn7BhrMtkZ5pudiymkVjwQ32hd9pg5vA4Am4ZSFikGQw7fmmJctF27I/+Pc/68iLxKrRiLJjf1Zd4St2mq0MyLLm/68AVa+fJLCEmZxhIpGkgSg5g2nXY90Zfh8dNuE5WNtXZr5hOsTwwpjIt7Nq4RCo+puIvAh+6GAOHOGgMKgKTgpl7UIxsnUkEMNO1e/DYs9d84tjKzEPA4ezBerRI4NskyeqGifUMkuUFLCnEBzYMv4AAMnCxCJxHlcAlQ+aKe7DyrtmcRGcDBvz/Xg9YGSRpyEQQKBgQD4AH12tF3tH3KQjGueH7cipP/0XH33H4Mfem6ulTQxAG/S2NfcgZAaxckbVGJhCarDI1/T1Qq78BzUGBqV3G1e4BE2dwzqfBkVj63kDXFVojJTIX1ILAyjy67GKtOLBi3ZCRAa+crTFzjOPMuM8aumP5M+XEz6tfKBHwINY+eJHQKBgQD2XIYbrgXnaUJjcmdhcxO/W44SPSx29MhSmEKfMC8U6m60tcelRbwS/UlJEAgcWy3oBW+y0Bhol2jcJIFiUjRVBu36KoiGqqQkG8Wt/cqRtfCTDAgehdjpo+3PdAawFZMincSNa6RxByE273SePdK+vbXVdvEfZcywUw3ctk8CKQKBgQDWspXrTfqCbdcgjHAeVBaXR4DOa8QhTIaXmcZ4HXMxeM9WGaPGoeO/Sbrwjf0dROEwTk+Hc8f3K8fJVZSuaEXG/PPp0ua7mPOeVuSTqY+UMvaeQT/UW04V/x8vL6QzlwXZ/p6Su+17EX98C+Wr/ww6wI8YTY/W++0VG2MLdJHdgQKBgAuU8/UPLFXhu+5C7ZtGNrJzUm2HFLUO8u/3GoKzWDNKhiPWu+kIKzxVTgGyUD9NBg53WvX0FIGuRI685JxDsxQgPEXbhAmYshjEeXmhiclp3UJ8eVE+B6GMRFzRXpMeoIkrE5d2bQenRyd3AGuEColPD+JWMiXAumu7q9Ypd/NpAoGBALKDdzeyzd/swvWCY1bPbSpUp7liskSFPW7RpjxvNWoGVXoer5hares0oj26ylSB/GJEKH8Zf6kxtFnXEa68eXWF9BjUFGVgNJdnheUIU1tzgz7kZ8QXeHxpkhnByMq5UzfGwpgN4TG/K9bnrQTPWsjXKZovKOpdxgnMJ9CBa9Si";
	
publicKey = "MIIGyjCCBbKgAwIBAgIQVvoCwd862nm76xqtn9DfUzANBgkqhkiG9w0BAQsFADCBujELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEuMCwGA1UEAxMlRW50cnVzdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEwxSzAeFw0yMjA2MDcxMzAzMTZaFw0yMzA2MTkxMzAzMTZaMG0xCzAJBgNVBAYTAklOMRIwEAYDVQQIEwlLYXJuYXRha2ExEjAQBgNVBAcTCUJlbmdhbHVydTEfMB0GA1UEChMWVGhlIEthcm5hdGFrYSBCYW5rIEx0ZDEVMBMGA1UEAwwMKi5rYmxiYW5rLmluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp86yWyvuMNgUrTw3M9O5127o+B+4BPp2ePM5YoFFIUO3TFEdN2lUm4Q0RWW7JK79NTJUUfPvXUqzEm/mf+Wyn4zFDIF4h1Scvp9FH3FsbdrZzzNADltyM2o90AmjW/+RBD1FQgjyjD2qm14ctsuGvHGWODOIT7rCKFjPEWoIoajMiHvbCDjqLutS6ktzh8dTbiRGoIK5pQGM+Kt8otOdaVnIm0ttfrLFCXOXYOP7CYJrmtEyKqc9pcwQJFGPrAYRPJjezMGxsUMiXyVRFL1LGPhKGLKwgRxg0pT3fCcn6LAIGCHuAQFVPXHN+769ScBGiUa1BXTyz5t/KmGW6rUfVQIDAQABo4IDFjCCAxIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUmRA+Ka1DFq8Enyd+eB6dzyY+19EwHwYDVR0jBBgwFoAUgqJwdN28Uz/Pe9T3zX+nYMYKTL8waAYIKwYBBQUHAQEEXDBaMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5lbnRydXN0Lm5ldDAzBggrBgEFBQcwAoYnaHR0cDovL2FpYS5lbnRydXN0Lm5ldC9sMWstY2hhaW4yNTYuY2VyMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwuZW50cnVzdC5uZXQvbGV2ZWwxay5jcmwwIwYDVR0RBBwwGoIMKi5rYmxiYW5rLmluggprYmxiYW5rLmluMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTAYDVR0gBEUwQzA3BgpghkgBhvpsCgEFMCkwJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LmVudHJ1c3QubmV0L3JwYTAIBgZngQwBAgIwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB3AFWB1MIWkDYBSuoLm1c8U/DA5Dh4cCUIFy+jqh0HE9MMAAABgT5DI+MAAAQDAEgwRgIhALBKX4JLqjzs5k2gBBnkplRDAwIg+OZnnlvwlEL1og6dAiEAwp+oyBDsVfQCw2TYrli7CUNzj7YY7S+6dQ7LpUi2cBkAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYE+QyPfAAAEAwBHMEUCIAz81sZ68SzB9gskN2/BBH24jbx6LqGBhbDRSOSjsc7zAiEAun1tE8zop33gXgkHrhSSVdAf3x8Vx18JGgZdI3ywgm4AdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYE+QyPnAAAEAwBHMEUCIGIdknwV398C2br+TZPWoxrTV1fB0ZYF8Mm+2gqJhWdyAiEAtqVmTEii7RWNGi0jBROl+uAP7pKZm3fuq99zcovPzeYwDQYJKoZIhvcNAQELBQADggEBANhsvnugpawMmyjegkvDu4yx3cBJB3FDhHPZbueupn2P7km63V0uEe3mL7mUDJmRsYwaQPXCEg0MnMOQhvRZQ7MEnt/Xo+C2uSkz+66fNtQMfjqSSTMslr17lUrYoXIYVZbD7VKCXISl5mxzAQBHsmzjSreRC1mrxQfze9RCsqZnSQT7waiRby0xAxM7EHYgNTtFePNLHk588aBlqnD438UKtOU5k1qvEDszgTYTujyFB57so+Bnq0tGDEmiyKhkqF0xpr2P7Rv5SjS9gReMF2Uoc2MOd5AJvshgRa8eyDbgPHB8vWPZ2b4uBCw9BE6Ij3AzC3z9sQ0qdh9tf3BOqb8=";
			String strNeslPasswordKey ="ApiUat@12345";  //"Kbl@12345";
	// char[] pwd = "Kbl@12345".toCharArray();	
			char[] pwd = "ApiUat@12345".toCharArray();	
	 String deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
	 String deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
	 
		
	String token="";
	OAuthTokenGeneration oauth = new OAuthTokenGeneration();
	HashMap Result= new HashMap();
	Result=oauth.getOAuthAuth(hshRequestValues);
	token=Helper.correctNull((String)Result.get("access_token"));
	strAppurl=ApplicationParams.getStrPostSancationEncryptionURL();//"https://apiuat.ktkbank.com:8443/non-production/development/fi-lintmodify/filint";

	
	String finalToken="",accessToken="",headerStatus="",clientId="",clientSecret="",TokenUrl="",Method="",Scope="",certiPath="",gType="",reqConcat="",testCommand="",location="",errCode="",errMessage="";
	Map<String,Object> responseMap = new HashMap<String, Object>();
	Map<String,String> ser = new HashMap<String, String>();
	Gson gson = new Gson();
	Type mapType = null;

		  gType="client_credentials";
		  clientId="92c2d9b9793695f7bd9aaa411d7657e0";
		  clientSecret="7a1980519b524854cfdf25cef98a95e9";
		  Scope="CCFM";
		
		 certiPath="/home/lapsuat/patches/NationalPortal/ktk1/ktk.crt";
		 
		 
		 System.out.println("----------IN "+Method+" Method | SSLContext-----------------");
			SSLContext ssl_ctx = SSLContext.getInstance("TLSv1.2");
			ssl_ctx.init(null,trustAllCerts,null);
			HostnameVerifier allHostsValid = new HostnameVerifier(){
				public boolean verify(String hostname,SSLSession session){
					return true;
				}
			};
					
		
			URL url = new URL(ApplicationParams.getStrPostSanctionURLEnc1());
		System.out.println("----------IN "+Method+" Method | "+ApplicationParams.getStrPostSanctionURLEnc1()+"-----------------");
		HttpsURLConnection con = (HttpsURLConnection)url.openConnection();
		HttpsURLConnection.setDefaultSSLSocketFactory(ssl_ctx.getSocketFactory());
		// Install the all-trusting host verifier
		HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
		location =certiPath;
		if(!location.equalsIgnoreCase("0")){
			System.out.println("----------IN "+Method+" Method | With certificate-----------------");
			System.setProperty("javax.net.ssl.trustStore", location);
		}
		else{
			System.out.println("----------IN "+Method+" Method | Without certificate-----------------");
		}

		StringBuilder data = new StringBuilder();
		//testCommand
		if(testCommand.equalsIgnoreCase("1")){
			data.append("grant_type="+gType);
			data.append("client_id="+clientId);
			data.append("client_secret="+clientSecret);
			data.append("scope="+Scope);
		}
		else{
			data.append("grant_type="+gType+"&client_id="+clientId+"&client_secret="+clientSecret+"&scope="+Scope);
		}
		System.out.println("----------IN "+Method+" Method | data"+data+"-----------------");
		
		//encrequest=URLEncoder.encode(encrequest, "UTF-8");
		
		byte[] byteArray = encrequest.toString().getBytes("UTF-8");

		System.out.println("byteArray-----------------"+byteArray);

		if(reqConcat.equalsIgnoreCase("Basic")){
			System.out.println("----------IN "+Method+" Method | Encoding Client ID & Secret-----------------");
			//con.setRequestProperty("Authorization",reqConcat+" "+getEncodedIdAndPassword(clientId,clientSecret));
		}
		
		/*Map<String, String> headers = new HashMap<>();

		headers.put("X-IBM-Client-Id", clientId);
		headers.put("X-IBM-Client-Secret", clientSecret);
		headers.put("Authorization", "Bearer "+token);
		for (String headerKey : headers.keySet()) {
			con.setRequestProperty(headerKey, headers.get(headerKey));
			System.out.println("======headerKey========="+headerKey+"========="+headers.get(headerKey));
		}*/
		
		//con.setDoInput(true);
		        con.setRequestProperty("X-IBM-Client-Id",clientId);
				con.setRequestProperty("X-IBM-Client-Secret",clientSecret);
				con.setRequestProperty("Authorization","Bearer "+token);
				
				
		con.setRequestProperty("Content-Type","application/xml");
		//con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");		
		con.setRequestProperty("Accept","*/*");		
		con.setRequestProperty("Accept-Encoding" ,"gzip, deflate, br");
		con.setRequestProperty("Connection", "keep-alive");
		con.setRequestMethod("POST");
		con.setConnectTimeout(5000);
		con .setDoOutput(true);
		con.setDoInput(true);
		String response="";
		
		System.out.println("=== connection intialization===================");
				OutputStream outStream= con.getOutputStream();
				System.out.println("===service call ===getting outputstream");
				outStream.write(encrequest.getBytes("UTF-8"));
				outStream.close();
				
				System.out.println("======service call=====responsecode:" + con.getResponseCode());
				System.out.println("======service call=====ResponseMessage:"+con.getResponseMessage());
				try
				{
				if (200 == con.getResponseCode()) {
	
					String tempStr = "";
					BufferedReader inStream = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
					while ((tempStr = inStream.readLine()) != null) {
						response = response + tempStr;
					}
				}else {
					response=String.valueOf(con.getResponseCode());
				}
				System.out.println("===service call==response:"+response);
			} catch (IOException ioe) {
				ioe.printStackTrace();
				System.out.println("===========service call Error occurred while processing============ ");
			}
				
				String line="",strRes="",plainRequestnew=response;
		
	///////////////////////////////////////////////
	/*	OutputStream os = con.getOutputStream();
		//os.write(byteArray, 0, byteArray.length);
		os.write(byteArray, 0, byteArray.length);
		os.close();
		
		System.out.println("====after outputStream======");
		//OutputStreamWriter osw = new OutputStreamWriter(os);
		//System.out.println("====after OutputStreamWriter======");
		//osw.write(encrequest);//strRequest);
		
		Date connectionStartTime=new Date();
		System.out.println("::Request Sent At: " + connectionStartTime);
		System.out.println("::Request Data: "+ encrequest);
		
		String line="",strRes="";
//		 StringBuilder response = new StringBuilder();
//		try(BufferedReader br = new BufferedReader(
//				  new InputStreamReader(con.getInputStream(), "utf-8"))) {
//				   
//				    String responseLine = null;
//				    while ((responseLine = br.readLine()) != null) {
//				        response.append(responseLine.trim());
//				        
//				    }
//				    System.out.println("===1111111111111111111111=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+response.toString());
//				}
//		System.out.println("=====111111111111111111====$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$============"+new String(response));
//		
//		
		String plainRequestnew="";
		
		StringWriter strwrt = new StringWriter();
		IOUtils.copy(con.getInputStream(), strwrt,StandardCharsets.UTF_8);
		plainRequestnew= strwrt.toString();
		
		System.out.println("===#################=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+plainRequestnew.toString());
		
		System.out.println("===222222222222222222222222222222=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+new String(plainRequestnew));*/
		
	//	response=plainRequestnew;
//		String line="",strRes="";
//		InputStreamReader reader = new InputStreamReader(con.getInputStream());
//		BufferedReader in = new BufferedReader(reader);
//		
//		StringBuffer result = new StringBuffer();
//		while ((line = in.readLine()) != null) {
//			result.append(line);
//		}
		
//		log
//		.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
//				+ new String(response));

strRes = plainRequestnew.toString();
System.out.println(strRes);
plainresponse= plainRequestnew.toString();
strResponse=strRes;   
			System.out.println("^^^^^^^^^^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+strResponse);
			
			 
			 
			 
//			 BASE64Decoder decod=new BASE64Decoder();
//				byte b[]		= decod.decodeBuffer(strResponse);
//					      System.out.println("decodeBuffer:**********************:"+strResponse);
//					      String str	= new String(b);
//					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
//					      
//					      
//					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
//					      
//					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
					      
			 
/*InputStream geek = null;
 geek = new FileInputStream(new String(strResponse));
		 StringWriter strwrt = new StringWriter();
			IOUtils.copy(geek, strwrt,StandardCharsets.UTF_8);
			strResponse= strwrt.toString(); */   
			
//PostSanFirstRes.xml
		/*local file reader*/
		
/*		BufferedReader br1 = null;
		FileReader fr1 = null;
		String ResponseXML="";
		
		fr1 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
		//br1 = new BufferedReader(fr1);	
		
		
		
//		 Scanner responseReader = new Scanner(br1);
//         StringBuffer buffer = new StringBuffer();
//         while (responseReader.hasNextLine()) {
//            buffer.append(responseReader.nextLine()+"\n");
//         }
         
        
         
       //  try(BufferedReader br = new BufferedReader(
        //		  new InputStreamReader(con.getInputStream(), "utf-8"))) {
        	 
           try(BufferedReader br = new BufferedReader(fr1)){
         		 // new FileReader("D:\\API\\decodeapiresponse.txt", "utf-8"))) {
        		    StringBuilder response = new StringBuilder();
        		    StringBuilder line = new StringBuilder();
        		    String responseLine = null;
        		    while ((responseLine = br.readLine()) != null) {
        		        response.append(responseLine.trim().getBytes("utf-8"));
        		        line.append(responseLine.trim());
        		    }
        		    
        		    System.out.println("*************************"+new String(response));
        		    System.out.println("+++++++++++++++++++================="+response.toString());
        		    
        		    
        		    System.out.println("*************************"+new String(line));
        		    System.out.println("+++++++++++++++++++================="+line.toString());
        		    
        		}
           
         
           
           
         
     //    responseReader.close();
         
         
//           String line="",strRes="";
//  		 StringBuilder response = new StringBuilder();
//  	"	try(BufferedReader br = new BufferedReader(
//  				  new InputStreamReader( "utf-8"))) {
//  				   
//  				    String responseLine = null;
//  				    while ((responseLine = br.readLine()) != null) {
//  				        response.append(responseLine.trim());
//  				        
//  				    }
//  				    System.out.println("====================="+response.toString());
//  				}
         
 		
//           FileReader	fr3 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
// 		br1 = new BufferedReader(fr3);	
//         
// 		//BufferedInputStream reader = new BufferedInputStream();
//         BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream("D:\\API\\decodeapiresponsenew.txt"));
//          
//         byte[] buffer1 = new byte[4096];
//         int bytesRead = -1;
//          
//         while ((bytesRead = br1.read()) != -1) {
//             writer.write(buffer1, 0, bytesRead);
//         }
//         
//         writer.close();
         //reader.close();
           
           
           StringBuilder response = new StringBuilder();
           FileReader	fr3 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
    		br1 = new BufferedReader(fr3);
        		    
        		     String responseLine = null;
        		     while ((responseLine = br1.readLine()) != null) {
        		         response.append(responseLine.trim().getBytes("utf-8"));
        		     }
        		     System.out.println("+++++++++++++++++++++++++++++++++++"+response.toString());
        		     System.out.println("+++++++++++++++++++++++++++++++++++"+new String(response));
        		 
           
           
         //Printing the Response
     /*   byte a[]=new String(buffer).getBytes("UTF-16LE");
        byte bb[]=new String(buffer).getBytes("UTF-8");
        byte c[]=new String(buffer).getBytes("ISO-8859-2");
        byte d[]=new String(buffer).getBytes("ISO-8859-1");  
        
        
        System.out.println("^^^^^^^^^^^^^^UTF-16LE^^^^^^@@@@@@@@@@@@@@@@@======="+new String(a));
         System.out.println("^^^^^^^^^^^^^^UTF-8^^^^^^@@@@@@@@@@@@@@@@@======="+new String(bb));
         System.out.println("^^^^^^^^^ISO-8859-2^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+new String(c));
         System.out.println("^^^^^^^^^^^ISO-8859-1^^^^^^^^^@@@@@@@@@@@@@@@@@======="+new String(d));  */
         
         
         
        // plainresponse=new String(buffer);
       //s   strResponse=new String(buffer);
		
          
         // plainresponse;//=new String(buffer);
         // strResponse;String(buffer);
		
    /*      System.out.println("^^^^^^^^^^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+strResponse.getBytes("UTF-8"));
			
			// byte[] decodedBytes = Base64.getDecoder().decode(strResponse);
			 
			// System.out.println("====decodedBytes=====>"+decodedBytes);*/
			 
			 
			
					      
			 	// byte[] decodedBytes1 = Base64.getDecoder().decode(str);
				 
				// System.out.println("====decodedBytes1=====>"+decodedBytes1); 
				 
				 
			      
		// StringWriter strwrt = new StringWriter();
			//IOUtils.copy(inputStream, strwrt,StandardCharsets.UTF_8);
			//strResponse= strwrt.toString(StandardCharsets.UTF_8);
		
		/* byte[] decodedBytes = Base64.getDecoder().decode(strResponse);
		 
		 System.out.println("====decodedBytes=====>"+decodedBytes); */
		 
		 
			     
		/*InputStream geek1 = null;
		 geek1 = new FileInputStream("D:\\API\\decodeapiresponse.txt");
				 StringWriter strwrt1 = new StringWriter();
					IOUtils.copy(geek1, strwrt1,StandardCharsets.UTF_8);
					strResponse= strwrt1.toString();  
					
					System.out.println("####################################"+strResponse);
		byte[] bres=plainresponse.getBytes(StandardCharsets.UTF_8);
		String strResponse1=new String(bres);*/
		
		
		
			
			

	System.out.println("====before=====>"+strResponse.getBytes("UTF-8"));

		System.out.println("====before=====>"+strResponse.getBytes("UTF-8"));

		
		
		
		//String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";


		 strprivate_key_req = "yes";
		  strprivateKeyfile = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDuqhqoOkp/AysN8fnaOIl2pubeCj+HuYvZhnzvYHhwoMgklFv4Jzx8cioDdOMRmVRVGFMt5cOQWt/6JuJqr34h9NE7wYJOepQO2e5DnuwczFy0K1Ad5CXoJrX7v72Fimn/AGJtZ9jUcyu6BzK2ryBYvA4qyI7em7+EnOix/c2TtTHybklXKry2BIV43Cc5EXW7++YCn1TM+qkebXAcRp/ROnWPWx8rR/bO1PfOfDrvNcbS+un7e7EPMFpP90W6nw2euI0n3TSLq/92cI2chmK1B5d0EYXQxqxoNw6IUsZDD9sI6caD8Bf1mHAfEUwLZR/S3uAZHRik5hR7LMa9Gi+lAgMBAAECggEAE7JU3N64AzTJutmQ2zegm1A5lshAZ1J4KOL2hfLvkwFR7eLoltmgyPcgYdn7BhrMtkZ5pudiymkVjwQ32hd9pg5vA4Am4ZSFikGQw7fmmJctF27I/+Pc/68iLxKrRiLJjf1Zd4St2mq0MyLLm/68AVa+fJLCEmZxhIpGkgSg5g2nXY90Zfh8dNuE5WNtXZr5hOsTwwpjIt7Nq4RCo+puIvAh+6GAOHOGgMKgKTgpl7UIxsnUkEMNO1e/DYs9d84tjKzEPA4ezBerRI4NskyeqGifUMkuUFLCnEBzYMv4AAMnCxCJxHlcAlQ+aKe7DyrtmcRGcDBvz/Xg9YGSRpyEQQKBgQD4AH12tF3tH3KQjGueH7cipP/0XH33H4Mfem6ulTQxAG/S2NfcgZAaxckbVGJhCarDI1/T1Qq78BzUGBqV3G1e4BE2dwzqfBkVj63kDXFVojJTIX1ILAyjy67GKtOLBi3ZCRAa+crTFzjOPMuM8aumP5M+XEz6tfKBHwINY+eJHQKBgQD2XIYbrgXnaUJjcmdhcxO/W44SPSx29MhSmEKfMC8U6m60tcelRbwS/UlJEAgcWy3oBW+y0Bhol2jcJIFiUjRVBu36KoiGqqQkG8Wt/cqRtfCTDAgehdjpo+3PdAawFZMincSNa6RxByE273SePdK+vbXVdvEfZcywUw3ctk8CKQKBgQDWspXrTfqCbdcgjHAeVBaXR4DOa8QhTIaXmcZ4HXMxeM9WGaPGoeO/Sbrwjf0dROEwTk+Hc8f3K8fJVZSuaEXG/PPp0ua7mPOeVuSTqY+UMvaeQT/UW04V/x8vL6QzlwXZ/p6Su+17EX98C+Wr/ww6wI8YTY/W++0VG2MLdJHdgQKBgAuU8/UPLFXhu+5C7ZtGNrJzUm2HFLUO8u/3GoKzWDNKhiPWu+kIKzxVTgGyUD9NBg53WvX0FIGuRI685JxDsxQgPEXbhAmYshjEeXmhiclp3UJ8eVE+B6GMRFzRXpMeoIkrE5d2bQenRyd3AGuEColPD+JWMiXAumu7q9Ypd/NpAoGBALKDdzeyzd/swvWCY1bPbSpUp7liskSFPW7RpjxvNWoGVXoer5hares0oj26ylSB/GJEKH8Zf6kxtFnXEa68eXWF9BjUFGVgNJdnheUIU1tzgz7kZ8QXeHxpkhnByMq5UzfGwpgN4TG/K9bnrQTPWsjXKZovKOpdxgnMJ9CBa9Si";
		
 publicKey = "MIIGyjCCBbKgAwIBAgIQVvoCwd862nm76xqtn9DfUzANBgkqhkiG9w0BAQsFADCBujELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEuMCwGA1UEAxMlRW50cnVzdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEwxSzAeFw0yMjA2MDcxMzAzMTZaFw0yMzA2MTkxMzAzMTZaMG0xCzAJBgNVBAYTAklOMRIwEAYDVQQIEwlLYXJuYXRha2ExEjAQBgNVBAcTCUJlbmdhbHVydTEfMB0GA1UEChMWVGhlIEthcm5hdGFrYSBCYW5rIEx0ZDEVMBMGA1UEAwwMKi5rYmxiYW5rLmluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp86yWyvuMNgUrTw3M9O5127o+B+4BPp2ePM5YoFFIUO3TFEdN2lUm4Q0RWW7JK79NTJUUfPvXUqzEm/mf+Wyn4zFDIF4h1Scvp9FH3FsbdrZzzNADltyM2o90AmjW/+RBD1FQgjyjD2qm14ctsuGvHGWODOIT7rCKFjPEWoIoajMiHvbCDjqLutS6ktzh8dTbiRGoIK5pQGM+Kt8otOdaVnIm0ttfrLFCXOXYOP7CYJrmtEyKqc9pcwQJFGPrAYRPJjezMGxsUMiXyVRFL1LGPhKGLKwgRxg0pT3fCcn6LAIGCHuAQFVPXHN+769ScBGiUa1BXTyz5t/KmGW6rUfVQIDAQABo4IDFjCCAxIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUmRA+Ka1DFq8Enyd+eB6dzyY+19EwHwYDVR0jBBgwFoAUgqJwdN28Uz/Pe9T3zX+nYMYKTL8waAYIKwYBBQUHAQEEXDBaMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5lbnRydXN0Lm5ldDAzBggrBgEFBQcwAoYnaHR0cDovL2FpYS5lbnRydXN0Lm5ldC9sMWstY2hhaW4yNTYuY2VyMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwuZW50cnVzdC5uZXQvbGV2ZWwxay5jcmwwIwYDVR0RBBwwGoIMKi5rYmxiYW5rLmluggprYmxiYW5rLmluMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTAYDVR0gBEUwQzA3BgpghkgBhvpsCgEFMCkwJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LmVudHJ1c3QubmV0L3JwYTAIBgZngQwBAgIwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB3AFWB1MIWkDYBSuoLm1c8U/DA5Dh4cCUIFy+jqh0HE9MMAAABgT5DI+MAAAQDAEgwRgIhALBKX4JLqjzs5k2gBBnkplRDAwIg+OZnnlvwlEL1og6dAiEAwp+oyBDsVfQCw2TYrli7CUNzj7YY7S+6dQ7LpUi2cBkAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYE+QyPfAAAEAwBHMEUCIAz81sZ68SzB9gskN2/BBH24jbx6LqGBhbDRSOSjsc7zAiEAun1tE8zop33gXgkHrhSSVdAf3x8Vx18JGgZdI3ywgm4AdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYE+QyPnAAAEAwBHMEUCIGIdknwV398C2br+TZPWoxrTV1fB0ZYF8Mm+2gqJhWdyAiEAtqVmTEii7RWNGi0jBROl+uAP7pKZm3fuq99zcovPzeYwDQYJKoZIhvcNAQELBQADggEBANhsvnugpawMmyjegkvDu4yx3cBJB3FDhHPZbueupn2P7km63V0uEe3mL7mUDJmRsYwaQPXCEg0MnMOQhvRZQ7MEnt/Xo+C2uSkz+66fNtQMfjqSSTMslr17lUrYoXIYVZbD7VKCXISl5mxzAQBHsmzjSreRC1mrxQfze9RCsqZnSQT7waiRby0xAxM7EHYgNTtFePNLHk588aBlqnD438UKtOU5k1qvEDszgTYTujyFB57so+Bnq0tGDEmiyKhkqF0xpr2P7Rv5SjS9gReMF2Uoc2MOd5AJvshgRa8eyDbgPHB8vWPZ2b4uBCw9BE6Ij3AzC3z9sQ0qdh9tf3BOqb8=";
				 strNeslPasswordKey ="ApiUat@12345";  //"Kbl@12345";
		// char[] pwd = "Kbl@12345".toCharArray();	
				 pwd = "ApiUat@12345".toCharArray();	
		  deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
		  deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
		// KBLAPIMGMTNEW.crt
		 //strprivateKeyfiles
		 

		  
		  String privateKeyFile1=ApplicationParams.getStrPostSancationDecryptionFile();
		  BASE64Encoder b64 = new BASE64Encoder();
			PrivateKey privateKey = KblEncyrptionDecyrption.getRSAprivaetKeys1(privateKeyFile1, strNeslPasswordKey.toCharArray());
			String privatekey2=(b64.encode(privateKey.getEncoded()));
			byte [] key=privatekey1.getBytes();
			
			
			System.out.println("+++++++++++++++****************++++++++============="+KblEncyrptionDecyrption.decrypt(strResponse, strprivateKeyfile, publicKey));
			
			
			System.out.println("+++++++++++++++++++++++============="+KblEncyrptionDecyrption.getAESDecryptedData(new String(strResponse),key));
			
			
		  
		 
//		  System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.signSHA256RSANew(strResponse, strprivateKeyfile));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//			
//		  String strsignSHA256RSANew=KblEncyrptionDecyrption.signSHA256RSANew(strResponse, strprivateKeyfile);
//		  
//		  System.out.println("strsignSHA256RSANew======strsignSHA256RSANew==========>"+strsignSHA256RSANew);//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//			
//		  System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(strResponse, strprivateKeyfile,publicKey,EncyrptedAesSessionKey));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));
//		 // decryptAESKey
//		  System.out.println("decryptAESKeylatnew======decryptAESKeylatnew==========>"+KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey));
//		 //str   strResponse
//		  
//		  System.out.println("getAESDecryptedDatalatnew======getAESDecryptedDatalatnew==========>"+KblEncyrptionDecyrption.getAESDecryptedDatalatnew(strsignSHA256RSANew,KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey)));
//			
//		  
		  
		  
		// System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(strsignSHA256RSANew, strprivateKeyfile,publicKey,EncyrptedAesSessionKey));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			  
		 
		    
		 
		 System.out.println("decrypt767757557777777777777777777777577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decSignSHA256RSA(strResponse,"SHA256withRSA", strprivateKeyfile));
		 
		 
		 
		 System.out.println("decrypt767757557777777777777777777777577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.signSHA256RSA(strResponse, strprivateKeyfile));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 //String shaval=KblEncyrptionDecyrption.signSHA256RSA(str, strprivateKeyfile);
		 
		// System.out.println("shaval==========>"+shaval);//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		// public static String getAESDecryptedData(String encryptedText,byte decKey[])
		 
		 //public static byte[] decryptAESKey(byte[] encryptedKey,String privateKeyFile,String filePassword)throws Exception
		 
		 
		/*String strdecyrpteddata=KblEncyrptionDecyrption.decryptAESKey(shaval.getBytes("UTF-8"),ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);   //strRequest
			System.out.println("==========strEncyrpteddata============"+strEncyrpteddata);
			 EncyrptedAesSessionKey=KblEncyrptionDecyrption.encryptAESKey(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
			System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);*/
			
		 
			
		/* String deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
		 String deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
		// KBLAPIMGMTNEW.crt
		// System.out.println("decryptAESKey==========>"+KblEncyrptionDecyrption.decryptAESKey(shaval.getBytes(StandardCharsets.UTF_8),deckeyfile,strNeslPasswordKey));
		 
		 
		 
		 //System.out.println("decryptAESKeylatest======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.getAESDecryptedData(EncyrptedAesSessionKey.getBytes("UTF-8"), deckeypfxfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 
		 //decryptAESKeylatest
		 
		System.out.println("decryptAESKeylatest======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes("UTF-8"), deckeypfxfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
		 	
		 
		 System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(shaval, ApplicationParams.getStrPostSancationDecryptionFile(), ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 
		// System.out.println("decryptAESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decSignSHA256RSA(strResponse, "SHA256withRSA", ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 
		 
		 
		System.out.println("decryptAESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptAESKey(bres, deckeyfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
		//System.out.println("Output================>"+strResponse);
		System.out.println("getAESDecryptedData=====33333333333333333333333333333333===========>"+KblEncyrptionDecyrption.getAESDecryptedData(shaval, Sessionkey));
*/
		
		strResponse=strResponse.replace("xenc:", "");
	    strResponse=strResponse.replace("dsig:", "");
	    strResponse=strResponse.replace("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "");
	    strResponse=strResponse.replace("Type=\"http://www.w3.org/2001/04/xmlenc#Element\"","");
	    strResponse=strResponse.replace("xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"","");
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"","");
	    strResponse=strResponse.replace("xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"","");
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"","");			
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"","");
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#mgf1sha256\"","");	
	    strResponse=strResponse.trim();
		System.out.println("====After=====>"+strResponse);
		DocumentBuilderFactory factory1 = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder1 = factory1.newDocumentBuilder();
		 
		InputSource inputSource1 	   = new InputSource(new StringReader(strResponse));
	    Document document1 				   = builder1.parse(inputSource1);
	    
		//Build Document
		//Document document = builder.parse(new InputStream(strResponse)) ;
	    String CipherValue12="", CipherValue2="";
			
		document1.getDocumentElement().normalize();
		
		System.out.println("Root Element :" + document1.getDocumentElement().getNodeName());
		
		NodeList list1 = document1.getElementsByTagName("CipherData");

	    for (int temp = 0; temp < list1.getLength(); temp++) {

	        Node node = list1.item(temp);

	        if (node.getNodeType() == Node.ELEMENT_NODE) {

	            Element element1 = (Element) node;

	            // get staff's attribute
	           // String id = element.getAttribute("id");

	            // get text
	            if(temp==0)
	            {
	             CipherValue2 = element1.getElementsByTagName("CipherValue").item(0).getTextContent();
	             System.out.println("CipherValue2================>"+CipherValue2);
	            }
	            if(temp==1)
	            {
	            	 CipherValue12 = element1.getElementsByTagName("CipherValue").item(0).getTextContent();
	            	System.out.println("CipherValue1================>"+CipherValue12);
	            }
	        }
	    }

	    
	    System.out.println("DecryptDatanew======================1================="+KblEncyrptionDecyrption.DecryptDatanew(CipherValue2,CipherValue12,strprivateKeyfile,publicKey,strNeslPasswordKey));
		
	   
	    System.out.println("decrypsssssssssssssssssssssssssssstAESKey================>"+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));
		  
	    
	    System.out.println("decrypsssssssssssssssssssssssssssstAESKey================>"+KblEncyrptionDecyrption.decryptAESKeylatest(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));
	    System.out.println("decryptAESKeyData================>"+KblEncyrptionDecyrption.getAESDecryptedDatalatest(CipherValue12,KblEncyrptionDecyrption.decryptAESKeylatest(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey)));

	    //System.out.println("Output================>"+strResponse);

//	String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";
//
//
//	 strprivate_key_req = "yes";
//	  strprivateKeyfile = "MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDGG4K7rm1tPUfpXnWUA18kZ2BCR+u9uwxiFg7fqh7zukOvMzX4Maz3EdooSLiq+/Qr/+VUk0M6LSURZ08FGix7jE6cLcdGuXooHwjceEB8cnd2KyhXTvGJLdinJfZUlbHKUEELFmyy2jjPLEfqgRFMfhDybwZJi0yZ0//Zfi9OdgI5s7ew1NYtIUuAYe5dogMbohg1VKnKvrnwsNODtlLZOkrI65x+UOR+gAfPiSb7rGxrWMfiiJOMbzn+X+kOPbg1HAt9WLm7P+9V7xCMfQK8mQkQrFMi1u7EfNMOIf1cFyGjUaLHQzqV+ViOu8C2ZLG3wKRLkz2DReZJbJeq74tSMLJAF9Z4YC3m769HYmY8478f0KGtZgBgv5SKD3V3OMuPobyjP7SPx2a9IeIMiF/aYlVYHa2IoGr2Ug/RyGx0Op6h+KkrsKV4vFxyQ8XCuBtX2vgIqfDN0Sxrj8X1JpGdbFISYLeVttJ/ArTm0TXE/XiAfjmpl2s8Yl3LkovrFeuTJywgATn47jALT3j/8PJrExH251IWIXRJS+6G0DWhv5rgvK+kqxFrF8vIoMi2hW8goObRRoeMkb736l1we2404RJEjNgtlY69LyhHB2olOex5nyHyBATlwEeP4Yb1cmJzZxGH+54MQmv5jtkzU+fciey3nj4n6wwTehxmTI2a8QIDAQABAoICAF6AuyGKuLqWtBo4LECaRyWXhsy3gFZ2xxZ3TUsW3UMJBMar2D/4enk18+qpniY6oKTool5xDW3QIVGnBYP6k2Owb8OC9v/e9M302AZL+v8in6goOEtF5mS5ERPTQSniaviGxjBi1yGOhfEWP4w3W6gwrybnHYmxwK3U+sSmtCxqkO8zsxnQvgazTlAE52+VHIRvE7tFEuYbi5ms0ImRTP5BF3G3K2T6c7WAn7k5xPXjr6iZpmiDHFeuq2yUFhnsCVaUdUqrK5aOjj5hF3TdIZQUMMXaXqJNA4OJxCiGwFTQ2AQPqmYBxQ3L75nPKMQZTsnIRNekeoCHtK4r9kHdmYiYRMB9ltA5425V2W5Wy2ykaMwu9SHoWt8hwNrPfb9jLS0ebd+X4b0YUK1hdLhTRrlCDlrC3L9oh6NtL+M4Zo+GO89giSrdZAjAOObaZZtJl/OGrBR7dEw+M5dDi76NSQVts6LxAATmsEAEcs9I2adVWUZt+M1gbjHXkhzEKyuV6HuRQc2K+UpWuFTG/3iu2UeqEAoCRRLvK11iBTFKNq4JuSjkBF5QVluFSe1nX+P+/kElUNlj0YjRbzoDcH1Y3T+87bQ3e0wjwBTz0I/t6De/PFDs6B2fof280RV3/ZBL9jc5Nel7LVIsYpEhd7ckt9QhGWi92G5QZjBG53p+l2GRAoIBAQD9bS3cA4slzS7AhD357wBsgr5nahRoTxFrqdCfOHwkb+QH1TG+rYTgFJ2N9PkWLN9eQf0FTXSJB54u7MlRKSI4i1KCjVlCg7FGvo4vlXT/rpdB+bcIWhlg9D7TA8akVG4JN6UQQllnzODKvu0yIptMjD5Tg9T/7lvA4YHMXX4k4avj+/6y3dHwiDPCDOBvUFqgR16IFW1W3hTrPLY6mrD7e11hA6NtTWjbOG2TE7otQJ46KmF/pXLzwXNkQu+nmfahi7eitC/etUpoxgNfbYCYjjpcAf7jBKlHUm2r0vsjVNzrwSe6iJ3yi6Rkv9WcKSlQQ12NK9AEkZ502C0/uPCVAoIBAQDIHoVz3Tq8SutrAQtKIxx3UoSCYuZm5scD7ko8CAaxCs43tN7U+Wila71hDsYYvx2hgz8MKXVWOhlEQ+xeUoLDwetBNLZIDDFeXS8d3z0156VQ+lzN5ApXPt6EzkibBWxSGmner5rMm/JXrTrUdwmh+15EoBILlLyeibkQIhAS9qXpUscWA//hzP1U99j//dZ6gemkKvhmHDkIq7IDV0BjgRdwbYgHJoKvkHnOs5czLOUklJn95ynhRHXBHVaWeaoIfIbDcf2THNF+RVghzJhieq9ODmWwfA+kOkBPeOckqBKCxc2OCq9CFr3dD+MKd2DyZEx4tpjYbkiH+6b7Ph3tAoIBAH6PfLyIhIAvVO7N3AmqYyLNtHr+zgw9mGyVFNu/ILgtrMqAnOQl0dr6UKipM4/wfuiaudphERax2DyFAhDnIvDsGxuZrX77N5gl5+o5kIFz1pQbOl4QaOYzdAB7vUMp6v3tbSCOkgm1lnmKGfjUsYvr6eBZUREzH11XATRnaGzQysADg/Idtw+RZY++UIMmtOugWMRLNxyPshC8dCEWSdZ9iGe/omkepIP+TTKLQooA4EQaEDDoFl1HOfJTP04LJNEObnnx1Io7LVrfsKWCkRsexGRYlssW89brglux9LtzURTnlIiiW4baWBH8f5gKMlikG985hxwRAPpHT2moWXUCggEAfoqWNpLAzknNnWcWnXWgTW93bP9e09jAJaMre9RTbuX3SlBry14+psN/B/2QlBtdgED+wBEDKlgom/sbXvVrzJ81xJCxZtOW8CWaYphEG270IUV/I448X7jYej/6t1Pxj+U15uNBznoZ/wkCN1FiXPQXQuu5HWua7eEGjcYMRgGDHgwC6c/zoPO/iVgD9rOrSOIXPIETe3YDNpFjSiuFAqahjK0mI+ddIekIrQTw6iJMbxosWdovqEti7o8/rn0WYLFlgfb1sm25ps/wj8bQ4QzVB1WhRbzdIyrWeapo9sv0kI7FkTj+Y5r/yeZ+2aJtQjjcBkToV4s9AAfIKfy4bQKCAQAtwJWY/FJCbxkf4PTP3qQvSAjq4KlczvA6YGhu8g9wCUMWOxu7QkcYtxMOrX7ifvxC5Ti7FwJsXILtU8WeIc997xB/nzMVsNHoax9p2x0kgmDzChLA+JZc1tq1KaBkSPcFuIqfv6EVYE9RD6GtlVEHkyNT4wakfpI0i9wJ71l080+ELMWHG9TjrPLQNeiYB3IVbxXy7fVtcIXPrM8qXLU/8J/9dAnEMJPQWQrwEP57dSb/5S5VUDELil/Pk/FKy+qIImvpoPxhomqIkV9QjgnYF9MK2eB5A2n3mDTog2y/7K+T8TfFyjpppa12+D/XYe4fT8M8MMCQmMT0JHsHtS5+";
//	  publicKey = "MIIGSTCCBDGgAwIBAgIJANIpNP2nRJgtMA0GCSqGSIb3DQEBCwUAMIG6MQswCQYDVQQGEwJJTjEQMA4GA1UECAwHR3VqYXJhdDESMBAGA1UEBwwJQWhtZWRhYmFkMSEwHwYDVQQKDBhPbmxpbmUgUFNCIExvYW5zIExpbWl0ZWQxITAfBgNVBAsMGE9ubGluZSBQU0IgTG9hbnMgTGltaXRlZDEYMBYGA1UEAwwPTmF0aW9uYWwgUG9ydGFsMSUwIwYJKoZIhvcNAQkBFhZuby1yZXBseUBqYW5zYW1hcnRoLmluMB4XDTIxMTAxMjExNTEyN1oXDTMxMTAxMDExNTEyN1owgboxCzAJBgNVBAYTAklOMRAwDgYDVQQIDAdHdWphcmF0MRIwEAYDVQQHDAlBaG1lZGFiYWQxITAfBgNVBAoMGE9ubGluZSBQU0IgTG9hbnMgTGltaXRlZDEhMB8GA1UECwwYT25saW5lIFBTQiBMb2FucyBMaW1pdGVkMRgwFgYDVQQDDA9OYXRpb25hbCBQb3J0YWwxJTAjBgkqhkiG9w0BCQEWFm5vLXJlcGx5QGphbnNhbWFydGguaW4wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDju2DLs9RbjTJ5qqY26iV4tzdDBUl9LFjUPg1YeAp2x4YT9UGYNWQdVhdBS+P2bocghLgI+iWpDaxnKjHKpQy2+7FfHf2SNHCAwhqVGjMxtaWGNGO76aEpkDzy7l3Tad1V40zBhh0F7vDRC/LaKoF7dYifQRD+HK9UVDOe8Zt1mzvqoCYvMRnEfaKB0pFcdiA6IcVKuv/AIsWM3rCVTl4AtNeoUr8NiqKWuSarSxriU5u9r90vMBMWYqNT62GyCmDjfZh34g3Gla3sN6jWK52iqJjAjL7ZMU/+g3U1mhghV5Fa/20LJMXHW94OrnFnC62k/6XnXL2SqAwgq+6NG4SPdMaai2BcJyfxghKVFwDuEMkOTSYGHPEjuuTqIgxkpz4/nD/ar8BlMC77z7QUPAu3MscWVrzXUbwfhgzaZDUygP1HudxK6H/gRR/Z3fxoGDtxC02ZrIkX8MkyF8p20eQ7UtnoDVynSat780I0bRp3LOrbhgW+KCxQt9cKc/oudTG+S2Qric2RgS6/gOy/2m2vwfJIOjTTggY1DgQIYSIiLK9tZvfaiDFZPemTPmKKF84KCgsuLbqVfdSdL2SvHzIy4lvO6B90lAZns/KnVtT6HJxrMgIplqEtzgUkldFatNLIMjfcFtZtaTF2PKIQOerVpvF36rs5WJPHtwAW6/oXEQIDAQABo1AwTjAdBgNVHQ4EFgQUqUPLwzrVExe5ABR+Kwqeu5cmg0AwHwYDVR0jBBgwFoAUqUPLwzrVExe5ABR+Kwqeu5cmg0AwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEABRI/ht7r9RTDtJEnbtedVrvSRycOEJBpu/BEREoGnjipHxq5Pa/9xUNIro0/NT/enZ2roCkCGgzd75ueXKv0Wr5tdYYlTSnzpOPcTSdTpWjtgRZqcLTzLBOg2dTxvncgOy6/586s0uN57BlaeT7rX2WRtxte621vzBoRrq4Ib3+lDSOrH1005j0Lwu0g7O4zSE7yU7oSYgyNOxH9dvoSIl5bmBhsmx+BqE92V3Yop7G9KWZBazhGmnSDlrsLxEWK/M7LZQ9ZRoFFjH7jHZbJbTE1GgWL1IugSDiRweq01B4p7LSbqcUnUuI5jjTxgvvgG6sWPvqDmJLAYo9ZGX0BUiF8YTpUdTHVnbKJsuQtBCsVCiiIdV/sqXqoNyFWAlp90L+f+yZ0pkKPMhLmGstCOHCMebY7invBp9thCTZFrAA1YMVc0pXQMrjMfOPOqApX+pHmPT4y60ZavJ6Fe7LqkZq4dQ0fbDT8UMpCQuyeMJzI8wpI8BlFOFSNSzut+5wT+/PRhdGgpv6uJSJZLDjGv8VQFmPJ8VRq2Phacq5f2h7ubRt9oZ42pCfDbz94SqGrDWymaFxMafFFv/U2iYkClWBs1brmMx+AWZxGuJomzsWInhjfpXaoBIvU9eZtjvJXSyIL5+mQ877Lu8hIv409Kc+F0KmpgWMTDYh/Zh/4+Xs=";
//	String strNeslPasswordKey ="Kbl@12345";
//	 char[] pwd = "Kbl@12345".toCharArray();	
//	 
//	 //strprivateKeyfile
//	 
//	System.out.println("decryptAESKey================>"+KblEncyrptionDecyrption.decryptAESKey(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//	//System.out.println("Output================>"+strResponse);
//	System.out.println("getAESDecryptedData================>"+KblEncyrptionDecyrption.getAESDecryptedData(CipherValue12, KblEncyrptionDecyrption.decryptAESKey(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey)));

		
		
		strResponse=strResponse.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml executeFinacleScript.xsd\" xmlns=\"http://www.finacle.com/fixml\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");
		
        strResponse=strResponse.trim();
		System.out.println("====After=====>"+strResponse);
		
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		 
		InputSource inputSource 	   = new InputSource(new StringReader(strResponse));
	    Document document 				   = builder.parse(inputSource);
	    
		//Build Document
		//Document document = builder.parse(new InputStream(strResponse)) ;
	    String CipherValue1="", CipherValue="";
			
		document.getDocumentElement().normalize();
		
		System.out.println("Root Element :" + document.getDocumentElement().getNodeName());
		
		NodeList list = document.getElementsByTagName("Body");

        for (int temp = 0; temp < list.getLength(); temp++) {

            Node node = list.item(temp);

            if (node.getNodeType() == Node.ELEMENT_NODE) {

                Element element = (Element) node;

               
                
                if(element.getElementsByTagName("SUCCESS").getLength()>0)
                		{
                	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
                	hsh.put("PostSanctionROIStatus", "S");  
                	hsh.put("Status","S");
                	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
                	
                		}
               
                
                if(element.getElementsByTagName("ErrorDesc").getLength()>0)
	                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
            		{
            	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
            	hsh.put("PostSanctionROIStatus", "F");  
            	
            	hsh.put("Status","F");
            	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
            	
            	hshQuery =new HashMap();
            	arrValues=new ArrayList();
            	hshQueryValues.put("size", "1");
            	if(sessionModuleType.equalsIgnoreCase("RET"))
            	{
            	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
            	}
            	if(!sessionModuleType.equalsIgnoreCase("RET"))
            	{
            	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
            	}
            	    	arrValues.add(appno);
            	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
            	    	{
            	    		arrValues.add(hidFacSno);
            	    	}
            	    	hshQuery.put("arrValues", arrValues);
            	    	hshQueryValues.put("1", hshQuery);
            	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
            	    			"updatedata");
           		 
           		 
           		hshQuery =new HashMap();
           		arrValues=new ArrayList();
           		hshQueryValues.put("size", "1");
         			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
         			arrValues.add(appno);
         			arrValues.add(parentappno);
         			arrValues.add("F");
         			arrValues.add(strUserId);
         			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
         			arrValues.add("executeFinacleScript");
         			arrValues.add(ServiceReqId);
         			arrValues.add(sessionModuleType);
         			arrValues.add("");
         			arrValues.add("");
         			arrValues.add("LoanAcctInq");   			
         			arrValues.add(hidFacSno);
         		
         			hshQuery.put("arrValues", arrValues);
         			hshQueryValues.put("1", hshQuery);
         			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
         					"updatedata");
            		}
                
                if(element.getElementsByTagName("error").getLength()>0)
                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
        		{
        	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
        	hsh.put("PostSanctionROIStatus", "F");  
        	
        	hsh.put("Status","F");
        	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
        	
        	
        	hshQuery =new HashMap();
        	arrValues=new ArrayList();
        	hshQueryValues.put("size", "1");
        	if(sessionModuleType.equalsIgnoreCase("RET"))
        	{
        	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
        	}
        	if(!sessionModuleType.equalsIgnoreCase("RET"))
        	{
        	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
        	}
        	    	arrValues.add(appno);
        	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
        	    	{
        	    		arrValues.add(hidFacSno);
        	    	}
        	    	hshQuery.put("arrValues", arrValues);
        	    	hshQueryValues.put("1", hshQuery);
        	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
        	    			"updatedata");
     			
       		 
       		 
       		hshQuery =new HashMap();
       		arrValues=new ArrayList();
       		hshQueryValues.put("size", "1");
     			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
     			arrValues.add(appno);
     			arrValues.add(parentappno);
     			arrValues.add("F");
     			arrValues.add(strUserId);
     			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
     			arrValues.add("executeFinacleScript");
     			arrValues.add(ServiceReqId);
     			arrValues.add(sessionModuleType);
     			arrValues.add("");
     			arrValues.add("");
     			arrValues.add("LoanAcctInq");   			
     			arrValues.add(hidFacSno);
     		
     			hshQuery.put("arrValues", arrValues);
     			hshQueryValues.put("1", hshQuery);
     			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
     					"updatedata");
        		}
                
            }
        }

	  
		
		
	System.out.println("Output================>"+strResponse);
	
	
	
	if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))
	{
	

	
	
StrSecondReq="<FIXML xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+
	"<Header>"+
	"<RequestHeader>"+
	"<MessageKey>"+
	"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
	"<ServiceRequestId>LoanAcctInq</ServiceRequestId>"+
	"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
	"<ChannelId>COR</ChannelId>"+
	"</MessageKey>"+
	"<RequestMessageInfo>"+
	"<BankId>"+BankId+"</BankId>"+
	"<TimeZone></TimeZone>"+
	"<EntityId></EntityId>"+
	"<EntityType></EntityType>"+
	"<ArmCorrelationId></ArmCorrelationId>"+
	"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
	"</RequestMessageInfo>"+
	"<Security>"+
	"<Token>"+
	"<PasswordToken>"+
	"<UserId></UserId>"+
	"<Password></Password>"+
	"</PasswordToken>"+
	"</Token>"+
	"<FICertToken></FICertToken>"+
	"<RealUserLoginSessionId></RealUserLoginSessionId>"+
	"<RealUser></RealUser>"+
	"<RealUserPwd></RealUserPwd>"+
	"<SSOTransferToken></SSOTransferToken>"+
	"</Security>"+
	"</RequestHeader>"+
	"</Header>"+
	"<Body>"+
	"<LoanAcctInqRequest>"+
	"<LoanAcctInqRq>"+
	"<LoanAcctId>"+
	"<AcctId>"+ActNum+"</AcctId>"+
	"</LoanAcctId>"+
	"</LoanAcctInqRq>"+
	"<LoanAcctInq_CustomData/>"+
	"</LoanAcctInqRequest>"+
	"</Body>"+
	"</FIXML>";



System.out.println("==========StrSecondReq============"+StrSecondReq);



URL url2 = new URL(ApplicationParams.getStrPostSanctionNURL2());

System.out.println("==========ApplicationParams.getStrPostSanctionNURL2()============"+ApplicationParams.getStrPostSanctionNURL2());
HttpURLConnection con2 = (HttpURLConnection) url2.openConnection();
con2.setDoInput(true);

con2.setRequestMethod("POST");
con2.setRequestProperty("Content-Type","text/xml; charset=UTF-8");
con2.setConnectTimeout(5000);
con2 .setDoOutput(true);

OutputStream os2 = con2.getOutputStream();
System.out.println("====after outputStream======");
OutputStreamWriter osw2 = new OutputStreamWriter(os2);
System.out.println("====after OutputStreamWriter======");
osw2.write(StrSecondReq);//strRequest);
//osw.flush();


Date connectionStartTime1=new Date();
System.out.println("::StrSecondReq Sent At: " + connectionStartTime1);
System.out.println("::StrSecondReq Data: "+ StrSecondReq);
osw2.close();


String line2="",strRes2="";
InputStreamReader reader2 = new InputStreamReader(con2.getInputStream());
BufferedReader in2 = new BufferedReader(reader2);

StringBuffer result2 = new StringBuffer();
while ((line2 = in2.readLine()) != null) {
	result2.append(line2);
}

log
.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
		+ result2.toString());

strRes2 = result2.toString();
System.out.println(strRes2);
plainresponse2=strRes2;
strResponse2=strRes2;   


/*System.out.println("strResponse2=================="+strResponse2);*/



/*BufferedReader br2 = null;
FileReader fr2 = null;
String ResponseXML2="";

fr2 = new FileReader("D:\\loanAccResponse.xml");//E:\\PostSanctionapi.xml");
br2 = new BufferedReader(fr2);	



Scanner responseReader2 = new Scanner(br2);
StringBuffer buffer2 = new StringBuffer();
while (responseReader2.hasNextLine()) {
buffer2.append(responseReader2.nextLine()+"\n");
}
responseReader2.close();
//Printing the Response
System.out.println(buffer2.toString());
plainresponse2=buffer2.toString();
strResponse2=buffer2.toString();    */


System.out.println("strResponse2=================="+strResponse2);

strResponse2=strResponse2.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");


strResponse=strResponse.trim();
System.out.println("====After=====>"+strResponse);

DocumentBuilderFactory factory2 = DocumentBuilderFactory.newInstance();
DocumentBuilder builder2 = factory2.newDocumentBuilder();

InputSource inputSource2 	   = new InputSource(new StringReader(strResponse2));
Document document2 				   = builder.parse(inputSource2);

//Build Document
//Document document = builder.parse(new InputStream(strResponse)) ;


document.getDocumentElement().normalize();

System.out.println("Root Element :" + document2.getDocumentElement().getNodeName());

NodeList list2 = document2.getElementsByTagName("HostTransaction");

for (int temp = 0; temp < list2.getLength(); temp++) {

Node node2 = list2.item(temp);

if (node2.getNodeType() == Node.ELEMENT_NODE) {

 Element element2 = (Element) node2;

 // get staff's attribute
// String id = element.getAttribute("id");

 // get text
 
 if(element2.getElementsByTagName("Status").getLength()>=0)
 		{
 	hsh.put("flagval", Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()));
 	
 	if(Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()).equalsIgnoreCase("SUCCESS"))
 	{
 	hsh.put("Status", "S");  
 	}
 	
 	
 	if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))	
 	{
 		
 		NodeList list3 = document2.getElementsByTagName("NetIntRate");

 		 for (int temp3 = 0; temp3 < list3.getLength(); temp3++) {

 		     Node node3 = list3.item(temp3);

 		     if (node3.getNodeType() == Node.ELEMENT_NODE) {

 		         Element element3 = (Element) node3;
 		
 		         
 		        interestrate=Helper.correctNull((String)element3.getElementsByTagName("value").item(0).getTextContent());
 		        douintval=Double.valueOf(interestrate);
 		         
 		     }
 		
 		 }
 		 
 		 
 		hshQuery =new HashMap();
    	arrValues=new ArrayList();
    	hshQueryValues.put("size", "1");
    	if(sessionModuleType.equalsIgnoreCase("RET"))
    	{
    	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
    	    	hsh.put("successflag", "true");
    	}
    	if(!sessionModuleType.equalsIgnoreCase("RET"))
    	{
    	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
    	}
    	    	arrValues.add(appno);
    	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
    	    	{
    	    		arrValues.add(hidFacSno);
    	    	}
    	    	hshQuery.put("arrValues", arrValues);
    	    	hshQueryValues.put("1", hshQuery);
    	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
    	    			"updatedata");
		
 		 
 		 
 		hshQuery =new HashMap();
 		arrValues=new ArrayList();
 		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
		arrValues.add(appno);
		arrValues.add(parentappno);
		arrValues.add("S");
		arrValues.add(strUserId);
		arrValues.add("");
		arrValues.add("executeFinacleScript");
		arrValues.add(ServiceReqId);
		arrValues.add(sessionModuleType);
		arrValues.add("");
		arrValues.add("");
		arrValues.add("LoanAcctInq");   			
		arrValues.add(hidFacSno);
	
		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
				"updatedata");
		
		if(sessionModuleType.equalsIgnoreCase("RET"))
		{
		hshQuery =new HashMap();
 		arrValues=new ArrayList();
		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "updateROIInFInancle");
		arrValues.add(""+douintval);
		arrValues.add(""+douintval);
		arrValues.add(""+douintval);
		arrValues.add(appno);
		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
				"updatedata");
		}
		else
		{
			//updatecorpagrupdroi
			
			hshQuery =new HashMap();
	 		arrValues=new ArrayList();
			hshQueryValues.put("size", "1");
			hshQuery.put("strQueryId", "updatecorpagrupdroi");
			arrValues.add(""+douintval);
			arrValues.add(appno);
			arrValues.add(hidFacSno);
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put("1", hshQuery);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
		}
		
		
		if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
		{
			
			int count=0,counta=0,countb=0;
			String appcount="";
			rs = DBUtils.executeLAPSQuery("sel_postsanctiondateroicorpagrimridetcount^" + appno);
			if (rs.next()) {
				count = rs.getInt("count");
				
			}
			if(rs!=null)
				rs.close();
			
			rs = DBUtils.executeLAPSQuery("sel_postsanctiondateroicorpagrimridet^" + appno);
			while (rs.next()) {
				
				if(!correctNull((String) rs.getString("facility_sancupdroi")).equalsIgnoreCase(""))
				{
				counta+=1;
				}
			}
			if(rs!=null)
				rs.close();
			
			if(count==counta)
			{
				hsh.put("successflag", "true");
			}
			
			else
			{
				ResultSet rs1=null;
			String parentappno1="",ActNum1="";
			strQuery = SQLParser.getSqlQuery("selfaciparentappnodetall^" + appno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				parentappno1 = Helper.correctNull((String) rs
						.getString("app_parent_appno"));
			
				
			
		String FACILITY_SNO="";
		strQuery = SQLParser.getSqlQuery("selpostsanroiselectioncorpagrmriparent^" + appno+"^"+parentappno1);
		rs1 = DBUtils.executeQuery(strQuery);
		if (rs1.next()) {
			ActNum1 = Helper.correctNull((String) rs1
					.getString("CBS_ACCOUNTNO"));
		}
			if(ActNum1.equalsIgnoreCase(""))
			{
				hsh.put("successflag", "true");
			}
			}
			}			
			
			
			
		}
		
		if(Helper.correctNull((String)hsh.get("successflag")).equalsIgnoreCase("true"))
		{
String 	strAppno=appno,appstatus1="",application_flag="",strOrgcodenew="",strOrglevelnew="",strappholder="",str_sentorglevelnew="",strOrgHeadnew="";
String strFromflowpoint="",strToflowpoint="";

rs = DBUtils.executeLAPSQuery("commworkflowsel2^" + strAppno);
	if (rs.next()) {
		appstatus1 = correctNull((String) rs.getString("app_status"));
		application_flag = Helper.correctNull((String) rs
				.getString("app_renew_flag"));
		strOrgcodenew=Helper.correctNull((String)rs.getString("APP_ORGCODE"));
		strOrglevelnew=Helper.correctNull((String)rs.getString("app_orglevel"));
	    strappholder=Helper.correctNull((String)rs.getString("APP_APPLNHOLDER"));
	}
	
	if(rs!=null)
		rs.close();
	strQuery=SQLParser.getSqlQuery("selorg_level^"+strOrgcodenew);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{
		str_sentorglevelnew = correctNull((String)rs.getString("org_level"));
		strOrgHeadnew = correctNull((String)rs.getString("org_head"));
	}
	
	strFromflowpoint = (String) hshRequestValues.get("mail_fromflowpoint");
	strToflowpoint = (String) hshRequestValues.get("mail_toflowpoint");

	System.out.println("======strOrglevelnew======="+strOrglevelnew);
	
	
	String scodeforallmoduls="";
	String headoforg="";
	
	if(!strOrglevelnew.equalsIgnoreCase("A"))
	{
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("sel_retmclrresetfreq^"+strAppno);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			scodeforallmoduls=Helper.correctNull(rs.getString("LOAN_PERTAINS_BRANCH"));
		}
		
		
	
	
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("getorgheadfromorgnisation^"+scodeforallmoduls);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			headoforg=Helper.correctNull(rs.getString("ORG_HEAD"));
		}
		
		strOrgHeadnew=headoforg;
	}
//if(strOrglevelnew.equalsIgnoreCase("A"))
	//{

		String strsms="";
		hshQueryValues = new HashMap();
		hshQuery=new HashMap();
		arrValues=new ArrayList();
		hshQuery.put("strQueryId","commworkflowinsnew3");
		arrValues.add(strAppno);
		arrValues.add(strappholder);
		arrValues.add(strOrgHeadnew);
		arrValues.add(strFromflowpoint);
		//arrValues.add(strToflowpoint);
		arrValues.add("C");
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strappholder);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			arrValues.add(Helper.correctNull(rs.getString("org_scode")));
			arrValues.add(Helper.correctNull(rs.getString("usr_department")));
		}
		else
		{
			arrValues.add("");
			arrValues.add("");
		}
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strOrgHeadnew);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			arrValues.add(Helper.correctNull(rs.getString("org_scode")));
			arrValues.add(Helper.correctNull(rs.getString("usr_department")));
		}
		else
		{
			arrValues.add("");
			arrValues.add("");
		}
		arrValues.add("Y");
		hshQuery.put("arrValues",arrValues);
		hshQueryValues.put("1",hshQuery);
		
		hshQuery=new HashMap();
		arrValues=new ArrayList();
		hshQuery.put("strQueryId","updmailbxchkstatus");
		arrValues.add("Y");
		arrValues.add(strOrgHeadnew);
		arrValues.add(strAppno);
		hshQuery.put("arrValues",arrValues);
		hshQueryValues.put("size","2");
		hshQueryValues.put("2",hshQuery);
		EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		
	}
		
		
		
 	}

 	else
 	{
 if(element2.getElementsByTagName("error").getLength()>0)
 //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
	{
hsh.put("flag", Helper.correctNull((String)element2.getElementsByTagName("error").item(0).getTextContent()));
hsh.put("Status", "F");  
	}
 
 if(sessionModuleType.equalsIgnoreCase("RET"))
 {
     	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
 }
 if(!sessionModuleType.equalsIgnoreCase("RET"))
 {
     	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
 }
     	arrValues.add(appno);
     	if(!sessionModuleType.equalsIgnoreCase("RET"))
     	{
     		arrValues.add(hidFacSno);
     	}
     	hshQuery.put("arrValues", arrValues);
     	hshQueryValues.put("1", hshQuery);
     	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
     			"updatedata");
	
	 
	 
	hshQuery =new HashMap();
	arrValues=new ArrayList();
	hshQueryValues.put("size", "1");
	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
	arrValues.add(appno);
	arrValues.add(parentappno);
	arrValues.add("F");
	arrValues.add(strUserId);
	arrValues.add(Helper.correctNull((String)hsh.get("flag")));
	arrValues.add("executeFinacleScript");
	arrValues.add(ServiceReqId);
	arrValues.add("");
	arrValues.add("");
	arrValues.add("");
	arrValues.add("LoanAcctInq");   			
	arrValues.add(hidFacSno);

	hshQuery.put("arrValues", arrValues);
	hshQueryValues.put("1", hshQuery);
	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
			"updatedata");

 		}
 		}
}
}

	}
	}
	catch(Exception e)
	{
		e.printStackTrace();
		hsh.put("Status","F");
    	hsh.put("flag",e.toString());
    	
    	hshQuery =new HashMap();
    	arrValues=new ArrayList();
    	hshQueryValues.put("size", "1");
if(sessionModuleType.equalsIgnoreCase("RET"))
{
    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
}
if(!sessionModuleType.equalsIgnoreCase("RET"))
{
    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
}
    	arrValues.add(appno);
    	if(!sessionModuleType.equalsIgnoreCase("RET"))
    	{
    		arrValues.add(hidFacSno);
    	}
    	hshQuery.put("arrValues", arrValues);
    	hshQueryValues.put("1", hshQuery);
    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
    			"updatedata");
    	
    	 
    	 
    	hshQuery =new HashMap();
    	arrValues=new ArrayList();
    	hshQueryValues.put("size", "1");
 
    	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
    	
    	arrValues.add(appno);
    	arrValues.add(parentappno);
    	arrValues.add("F");
    	arrValues.add(strUserId);
    	arrValues.add(Helper.correctNull((String)hsh.get("flag")));
    	arrValues.add("executeFinacleScript");
    	arrValues.add(ServiceReqId);
    	arrValues.add(sessionModuleType);
    	arrValues.add("");
    	arrValues.add("");
    	arrValues.add("LoanAcctInq"); 
    	arrValues.add(hidFacSno);
    	hshQuery.put("arrValues", arrValues);
    	hshQueryValues.put("1", hshQuery);
    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
    			"updatedata");
    	
	}
	finally
	{
		int strsno=0;
		try {
			rs=DBUtils.executeLAPSQuery("sel_max_POSTSANCTION_APISTATUS_LOGGER");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			if(rs.next())
			{
				strsno=Integer.parseInt(rs.getString("TYPE"));
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		
		hshQuery= new HashMap();
		arrValues = new ArrayList();
		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS_LOGGER");
		arrValues.add(appno);
		arrValues.add(parentappno);
		arrValues.add(strRequest);
		arrValues.add("");
		arrValues.add(plainresponse);
		arrValues.add("");
		arrValues.add(sessionModuleType);
		arrValues.add(""+strsno);
		arrValues.add(strUserId);
		arrValues.add("");
		arrValues.add("executeFinacleScript");
		arrValues.add(ServiceReqId);
		arrValues.add(StrSecondReq);
		arrValues.add("");
		arrValues.add("");
		arrValues.add("");
		arrValues.add("");
		arrValues.add("LoanAcctInq");
		arrValues.add(plainresponse2);
		arrValues.add(""); 
		arrValues.add(hidFacSno); 
		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		try {
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	return hsh;

}


public HashMap checkLoanInterestModifyWithoutCerti(HashMap hshRequestValues)throws NamingException, Exception,CertificateException
{
	HashMap hshRequest= new HashMap();
	
	TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
        public void checkClientTrusted(X509Certificate[] certs, String authType) {
        }
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
        }
    }
};
	
	
	HashMap hsh= new HashMap();
	String strResponse2="",interestrate="";
	
	HashMap hshQueryValues= new HashMap();
	HashMap hshQuery = new HashMap();
	ArrayList arrValues = new ArrayList();
	double douintval=0.00;
	String sessionModuleType=Helper.correctNull((String)hshRequestValues.get("sessionModuleType"));	
	String appno=Helper.correctNull((String)hshRequestValues.get("appno"));		
	if(appno.equalsIgnoreCase(""))
	{
		appno=Helper.correctNull((String)hshRequestValues.get("appno1"));	
	}
	
	String hidapplicationType="",hidappid="",strOrgCode="",strUserId="",inwardno="",strOrgShortCode="",userclass="";
	String strUserDesignation="",apporgname="",appname="",strAppType="",appholder="",strOrgLevel="",hidFacSno="";
	
	hidapplicationType=Helper.correctNull((String)hshRequestValues.get("hidapplicationType"));
	hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantid"));
	if(hidappid.equalsIgnoreCase(""))
	{
		
		hidappid=Helper.correctNull((String)hshRequestValues.get("hidapplicantnewid"));
	}
	strOrgCode=Helper.correctNull((String)hshRequestValues.get("strOrgCode"));
	strUserId=Helper.correctNull((String)hshRequestValues.get("strUserId"));
	inwardno=Helper.correctNull((String)hshRequestValues.get("inwardno"));
	strOrgShortCode=Helper.correctNull((String)hshRequestValues.get("strOrgShortCode"));
	userclass=Helper.correctNull((String)hshRequestValues.get("userclass"));
	strUserDesignation=Helper.correctNull((String)hshRequestValues.get("strUserDesignation"));
	apporgname=Helper.correctNull((String)hshRequestValues.get("apporgname"));
	appname=Helper.correctNull((String)hshRequestValues.get("appname"));
	strAppType=Helper.correctNull((String)hshRequestValues.get("strAppType"));
	appholder=Helper.correctNull((String)hshRequestValues.get("appholder"));
	strOrgLevel=Helper.correctNull((String)hshRequestValues.get("strOrgLevel"));
	hidFacSno=Helper.correctNull((String)hshRequestValues.get("hidFacSno"));
	String ActNum="",startdate="",FreqMonths="",FreqMonthsdata="",mclrtabcode="",plainresponse="",plainresponse2="";
	String strQuery="",strcustid="",parentappno="";
	String strRequest="",ReqUUID="",ServiceReqId="Req_LINTTM101"+appno,strVersionId="10.2",strChannelId="COR",strBankId="01",StrMessageDateTime="2012-10-02T14:14:27.262";
	String StrCustId="114021219",strAppurl="",strResponse="",Req_LINTTM101="Req_LINTTM101";
	ResultSet rs=null;
	String strintdiff="",Loan_Sanct_Eff_ROI_date="",MCLR_EFFECTIVEFROM="",MCLR_BASERATESPREAD="",MCLR_TYPE="",FACILITY_SANCINTEREST="",FACILITY_MCLRTYPE="";
	String	StrSecondReq="";
	double intrate1=0.00,intrate2=0.00,intdiff=0.00;
	hsh.put("updroiinfin", "updroiinfin");
	hsh.put("hidFacSnoroi", "hidFacSno");
	try
	{		
	strQuery = SQLParser.getSqlQuery("sel_perappidcbsid^" + hidappid);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		strcustid = Helper.correctNull((String) rs
				.getString("perapp_cbsid"));
	}			
	strQuery = SQLParser.getSqlQuery("selparentappnodet^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		parentappno = Helper.correctNull((String) rs
				.getString("app_parent_appno"));
	}
	if(sessionModuleType.equalsIgnoreCase("RET"))
	{
	strQuery = SQLParser.getSqlQuery("retaccno^" + parentappno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		ActNum = Helper.correctNull((String) rs
				.getString("CBS_ACCOUNTNO"));
	}	
	strQuery = SQLParser.getSqlQuery("selretduedate^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		startdate = Helper.correctNull((String) rs
				.getString("LOAN_DUEDATE"));
		mclrtabcode= Helper.correctNull((String) rs
				.getString("loan_mclrtabcode"));
		Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
				.getString("Loan_Sanct_Eff_ROI_date"));
	}	
	strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
				.getString("MCLR_EFFECTIVEFROM"));
		
	}
	if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
	{
	MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
	}
	strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_TYPE = Helper.correctNull((String) rs
				.getString("MCLR_TYPE"));
		MCLR_BASERATESPREAD=Helper.correctNull((String) rs
				.getString("MCLR_BASERATESPREAD"));
		
	}
	FreqMonthsdata=MCLR_TYPE;
	if(FreqMonthsdata.equalsIgnoreCase("M"))
	{
		FreqMonths="1";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Y"))
	{
		FreqMonths="12";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("H"))
	{
		FreqMonths="6";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Q"))
	{
		FreqMonths="3";
	}
	else
	{
		FreqMonths="12";
	}
	
	if(mclrtabcode.equalsIgnoreCase("AGSEC") || mclrtabcode.equalsIgnoreCase("ATBIL" )|| mclrtabcode.equalsIgnoreCase("NTBIL"))					
	{
FreqMonths="3";
	}
	
	String int1="",int2="";
	strQuery = SQLParser.getSqlQuery("selupdateROIInFInancleoldroi^" + appno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		intrate2= Double.parseDouble(Helper.correctNull((String) rs
				.getString("loan_modintrate")));
	}
		intrate1=Double.parseDouble(MCLR_BASERATESPREAD);
		if(intrate1>intrate2)
		{
		intdiff=intrate1-intrate2;
		}
		else
		{
			intdiff=intrate2-intrate1;	
		}
		//intdiff=Math.round(intdiff);
		
		java.text.NumberFormat nf = java.text.NumberFormat
				.getNumberInstance();
				nf.setGroupingUsed(false);
				nf.setMaximumFractionDigits(2);
				nf.setMinimumFractionDigits(2);
				 strintdiff=nf.format((intdiff));
				
	//}
	}
	
	if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
	{

		
		String FACILITY_OLDAPPSNO="";
		strQuery = SQLParser.getSqlQuery("selfaciparentappnodet^" + appno+"^"+hidFacSno);
		rs = DBUtils.executeQuery(strQuery);
		if (rs.next()) {
			parentappno = Helper.correctNull((String) rs
					.getString("app_parent_appno"));
			FACILITY_OLDAPPSNO = Helper.correctNull((String) rs
					.getString("app_parent_appno"));
			
		
		}
		
		
		//strQuery = SQLParser.getSqlQuery("selcorpagractno^" + appno+"^"+parentappno);
		strQuery = SQLParser.getSqlQuery("selcorpagractno^"+parentappno+"^"+ appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		ActNum = Helper.correctNull((String) rs
				.getString("CBS_ACCOUNTNO"));
	}
	
	
	strQuery = SQLParser.getSqlQuery("sel_postsanfacmclrrate^" + appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
//		FreqMonthsdata = Helper.correctNull((String) rs
//				.getString("FACILITY_PERINSTALL"));
		FACILITY_SANCINTEREST=Helper.correctNull((String) rs
				.getString("FACILITY_SANCINTEREST"));
		startdate = Helper.correctNull((String) rs
				.getString("LOAN_DUEDATE"));
		Loan_Sanct_Eff_ROI_date=Helper.correctNull((String) rs
				.getString("facility_effintroidate"));
//		mclrtabcodeval=Helper.correctNull((String) rs
//				.getString("FACILITY_INTSUBTYPE"));
	}
	
	
	strQuery = SQLParser.getSqlQuery("sel_postsanfacroidet^" + appno+"^"+hidFacSno);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		FACILITY_MCLRTYPE = Helper.correctNull((String) rs
				.getString("FACILITY_MCLRTYPE"));
		if(!FACILITY_MCLRTYPE.equalsIgnoreCase(""))
		{
			MCLR_TYPE=FACILITY_MCLRTYPE.substring(0,1);
		}
		mclrtabcode=Helper.correctNull((String) rs
				.getString("MCLR_TABLECODE"));
	}
	
	
	
	
	FreqMonthsdata=MCLR_TYPE;
	if(FreqMonthsdata.equalsIgnoreCase("M"))
	{
		FreqMonths="1";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Y"))
	{
		FreqMonths="12";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("H"))
	{
		FreqMonths="6";
	}
	else if(FreqMonthsdata.equalsIgnoreCase("Q"))
	{
		FreqMonths="3";
	}
	else
	{
		FreqMonths="12";
	}
	
	if(mclrtabcode.equalsIgnoreCase("AGSEC") || (mclrtabcode.equalsIgnoreCase("ATBIL" )) || mclrtabcode.equalsIgnoreCase("NTBIL"))					
	{
FreqMonths="3";
	}	
	
	
	strQuery = SQLParser.getSqlQuery("maxeffectdateinmclr^" +Loan_Sanct_Eff_ROI_date +"^"+mclrtabcode+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_EFFECTIVEFROM = Helper.correctNull((String) rs
				.getString("MCLR_EFFECTIVEFROM"));
		
	}
	//2022-08-30 00:00:00.0
	if(!MCLR_EFFECTIVEFROM.equalsIgnoreCase(""))
	{
	MCLR_EFFECTIVEFROM=MCLR_EFFECTIVEFROM.substring(8,10)+"/"+MCLR_EFFECTIVEFROM.substring(5,7)+"/"+MCLR_EFFECTIVEFROM.substring(0,4);
	}

	
	
	
	strQuery = SQLParser.getSqlQuery("postsanroibaserateslab^" +MCLR_EFFECTIVEFROM+"^"+mclrtabcode+"^"+MCLR_EFFECTIVEFROM+"^"+mclrtabcode);
	rs = DBUtils.executeQuery(strQuery);
	if (rs.next()) {
		MCLR_TYPE = Helper.correctNull((String) rs
				.getString("MCLR_TYPE"));
		MCLR_BASERATESPREAD=Helper.correctNull((String) rs
				.getString("MCLR_BASERATESPREAD"));
		
	}
	
	intrate2= Double.parseDouble(FACILITY_SANCINTEREST);
	
	intrate1=Double.parseDouble(MCLR_BASERATESPREAD);

	if(intrate1>intrate2)
	{
	intdiff=intrate1-intrate2;
	}
	else
	{
		intdiff=intrate2-intrate1;	
	}
	//intdiff=Math.round(intdiff);
	
	java.text.NumberFormat nf = java.text.NumberFormat
			.getNumberInstance();
			nf.setGroupingUsed(false);
			nf.setMaximumFractionDigits(2);
			nf.setMinimumFractionDigits(2);
			 strintdiff=nf.format((intdiff));
	
	
	}
	
	
	
	
	String executeFinacleScript="executeFinacleScript";
	String BankId="01";
	
	strRequest="<?xml version=\'1.0\' encoding=\'UTF-8\'?>"+
	"<FIXML xsi:schemaLocation=\'http://www.finacle.com/fixml executeFinacleScript.xsd\' xmlns=\'http://www.finacle.com/fixml\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'>"+
	"<Header>"+
	"<RequestHeader>"+
	"<MessageKey>"+
	"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
	"<ServiceRequestId>"+executeFinacleScript+"</ServiceRequestId>"+
	"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
	"<ChannelId>COR</ChannelId>"+
	"<LanguageId></LanguageId>"+
	"</MessageKey>"+
    "<RequestMessageInfo>"+
	"<BankId>"+BankId+"</BankId>"+
	"<TimeZone></TimeZone>"+
	"<EntityId></EntityId>"+
	"<EntityType></EntityType>"+
	"<ArmCorrelationId></ArmCorrelationId>"+
	"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
	"</RequestMessageInfo>"+
	"<Security>"+
	"<Token>"+
	"<PasswordToken>"+
	"<UserId></UserId>"+
	"<Password></Password>"+
	"</PasswordToken>"+
	"</Token>"+
	"<FICertToken></FICertToken>"+
	"<RealUserLoginSessionId></RealUserLoginSessionId>"+
	"<RealUser></RealUser>"+
	"<RealUserPwd></RealUserPwd>"+
	"<SSOTransferToken></SSOTransferToken>"+
	"</Security>"+
	"</RequestHeader>"+
	"</Header>"+
	"<Body>"+
	"<executeFinacleScriptRequest>"+
	"<ExecuteFinacleScriptInputVO>"+
	"<requestId>FI_LINTTModify.scr</requestId>"+
	"</ExecuteFinacleScriptInputVO>"+
	"<executeFinacleScript_CustomData>"+
	"<AcctNum>"+ActNum+"</AcctNum>"+
	"<tblCode>"+mclrtabcode+"</tblCode>"+
	"<startDate>"+startdate+"</startDate>"+
	"<peggedFreqInMnths>"+FreqMonths+"</peggedFreqInMnths>"+
	"<PrefIntRate>"+strintdiff+"</PrefIntRate>"+
	"<peggedFlg>Y</peggedFlg>"+
	"</executeFinacleScript_CustomData>"+
	"</executeFinacleScriptRequest>"+
	"</Body>"+
	"</FIXML>";
	
	System.out.println("==========strRequest============"+strRequest);
	
	
	String strEncyrpteddata="",EncyrptedAesSessionKey="";
	byte[] Sessionkey=KblEncyrptionDecyrption.generateAESKey();
	System.out.println("==========Sessionkey=======1====="+Sessionkey);
	 strEncyrpteddata=KblEncyrptionDecyrption.getAESEncryptedData(strRequest, Sessionkey);   //strRequest
	System.out.println("==========strEncyrpteddata============"+strEncyrpteddata);
	 EncyrptedAesSessionKey=KblEncyrptionDecyrption.encryptAESKey(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
	System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);

	//(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
	//strEncyrpteddata=URLEncoder.encode(strEncyrpteddata, "UTF-8");
	//EncyrptedAesSessionKey=URLEncoder.encode(EncyrptedAesSessionKey, "UTF-8");

	
	
	
	
	
	
	
	String encrequest = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <xenc:EncryptedData Type=\"http://www.w3.org/2001/04/xmlenc#Element\"  xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"> <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"/> <dsig:KeyInfo xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"> <xenc:EncryptedKey> <xenc:EncryptionMethod Algorithm=\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"> <dsig:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/> <xenc:OAEPparams/> <xenc:MGFAlgorithm Algorithm=\"http://www.w3.org/2009/xmlenc11#mgf1sha256\"/> </xenc:EncryptionMethod> <dsig:KeyInfo> <dsig:KeyName>pronteff_sha</dsig:KeyName> </dsig:KeyInfo> <xenc:CipherData> <xenc:CipherValue>" + 
	        EncyrptedAesSessionKey + "</xenc:CipherValue> " + 
	        "</xenc:CipherData> " + 
	        "</xenc:EncryptedKey> " + 
	        "</dsig:KeyInfo> " + 
	        "<xenc:CipherData> " + 
	        "<xenc:CipherValue>" + strEncyrpteddata + "</xenc:CipherValue> " + 
	        "</xenc:CipherData>" + 
	        "</xenc:EncryptedData>";
	
	System.out.println("==============encrequest========="+encrequest);
	
	
	String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";


	 strprivate_key_req = "yes";
	  strprivateKeyfile = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDuqhqoOkp/AysN8fnaOIl2pubeCj+HuYvZhnzvYHhwoMgklFv4Jzx8cioDdOMRmVRVGFMt5cOQWt/6JuJqr34h9NE7wYJOepQO2e5DnuwczFy0K1Ad5CXoJrX7v72Fimn/AGJtZ9jUcyu6BzK2ryBYvA4qyI7em7+EnOix/c2TtTHybklXKry2BIV43Cc5EXW7++YCn1TM+qkebXAcRp/ROnWPWx8rR/bO1PfOfDrvNcbS+un7e7EPMFpP90W6nw2euI0n3TSLq/92cI2chmK1B5d0EYXQxqxoNw6IUsZDD9sI6caD8Bf1mHAfEUwLZR/S3uAZHRik5hR7LMa9Gi+lAgMBAAECggEAE7JU3N64AzTJutmQ2zegm1A5lshAZ1J4KOL2hfLvkwFR7eLoltmgyPcgYdn7BhrMtkZ5pudiymkVjwQ32hd9pg5vA4Am4ZSFikGQw7fmmJctF27I/+Pc/68iLxKrRiLJjf1Zd4St2mq0MyLLm/68AVa+fJLCEmZxhIpGkgSg5g2nXY90Zfh8dNuE5WNtXZr5hOsTwwpjIt7Nq4RCo+puIvAh+6GAOHOGgMKgKTgpl7UIxsnUkEMNO1e/DYs9d84tjKzEPA4ezBerRI4NskyeqGifUMkuUFLCnEBzYMv4AAMnCxCJxHlcAlQ+aKe7DyrtmcRGcDBvz/Xg9YGSRpyEQQKBgQD4AH12tF3tH3KQjGueH7cipP/0XH33H4Mfem6ulTQxAG/S2NfcgZAaxckbVGJhCarDI1/T1Qq78BzUGBqV3G1e4BE2dwzqfBkVj63kDXFVojJTIX1ILAyjy67GKtOLBi3ZCRAa+crTFzjOPMuM8aumP5M+XEz6tfKBHwINY+eJHQKBgQD2XIYbrgXnaUJjcmdhcxO/W44SPSx29MhSmEKfMC8U6m60tcelRbwS/UlJEAgcWy3oBW+y0Bhol2jcJIFiUjRVBu36KoiGqqQkG8Wt/cqRtfCTDAgehdjpo+3PdAawFZMincSNa6RxByE273SePdK+vbXVdvEfZcywUw3ctk8CKQKBgQDWspXrTfqCbdcgjHAeVBaXR4DOa8QhTIaXmcZ4HXMxeM9WGaPGoeO/Sbrwjf0dROEwTk+Hc8f3K8fJVZSuaEXG/PPp0ua7mPOeVuSTqY+UMvaeQT/UW04V/x8vL6QzlwXZ/p6Su+17EX98C+Wr/ww6wI8YTY/W++0VG2MLdJHdgQKBgAuU8/UPLFXhu+5C7ZtGNrJzUm2HFLUO8u/3GoKzWDNKhiPWu+kIKzxVTgGyUD9NBg53WvX0FIGuRI685JxDsxQgPEXbhAmYshjEeXmhiclp3UJ8eVE+B6GMRFzRXpMeoIkrE5d2bQenRyd3AGuEColPD+JWMiXAumu7q9Ypd/NpAoGBALKDdzeyzd/swvWCY1bPbSpUp7liskSFPW7RpjxvNWoGVXoer5hares0oj26ylSB/GJEKH8Zf6kxtFnXEa68eXWF9BjUFGVgNJdnheUIU1tzgz7kZ8QXeHxpkhnByMq5UzfGwpgN4TG/K9bnrQTPWsjXKZovKOpdxgnMJ9CBa9Si";
	
publicKey = "MIIGyjCCBbKgAwIBAgIQVvoCwd862nm76xqtn9DfUzANBgkqhkiG9w0BAQsFADCBujELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEuMCwGA1UEAxMlRW50cnVzdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEwxSzAeFw0yMjA2MDcxMzAzMTZaFw0yMzA2MTkxMzAzMTZaMG0xCzAJBgNVBAYTAklOMRIwEAYDVQQIEwlLYXJuYXRha2ExEjAQBgNVBAcTCUJlbmdhbHVydTEfMB0GA1UEChMWVGhlIEthcm5hdGFrYSBCYW5rIEx0ZDEVMBMGA1UEAwwMKi5rYmxiYW5rLmluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp86yWyvuMNgUrTw3M9O5127o+B+4BPp2ePM5YoFFIUO3TFEdN2lUm4Q0RWW7JK79NTJUUfPvXUqzEm/mf+Wyn4zFDIF4h1Scvp9FH3FsbdrZzzNADltyM2o90AmjW/+RBD1FQgjyjD2qm14ctsuGvHGWODOIT7rCKFjPEWoIoajMiHvbCDjqLutS6ktzh8dTbiRGoIK5pQGM+Kt8otOdaVnIm0ttfrLFCXOXYOP7CYJrmtEyKqc9pcwQJFGPrAYRPJjezMGxsUMiXyVRFL1LGPhKGLKwgRxg0pT3fCcn6LAIGCHuAQFVPXHN+769ScBGiUa1BXTyz5t/KmGW6rUfVQIDAQABo4IDFjCCAxIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUmRA+Ka1DFq8Enyd+eB6dzyY+19EwHwYDVR0jBBgwFoAUgqJwdN28Uz/Pe9T3zX+nYMYKTL8waAYIKwYBBQUHAQEEXDBaMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5lbnRydXN0Lm5ldDAzBggrBgEFBQcwAoYnaHR0cDovL2FpYS5lbnRydXN0Lm5ldC9sMWstY2hhaW4yNTYuY2VyMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwuZW50cnVzdC5uZXQvbGV2ZWwxay5jcmwwIwYDVR0RBBwwGoIMKi5rYmxiYW5rLmluggprYmxiYW5rLmluMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTAYDVR0gBEUwQzA3BgpghkgBhvpsCgEFMCkwJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LmVudHJ1c3QubmV0L3JwYTAIBgZngQwBAgIwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB3AFWB1MIWkDYBSuoLm1c8U/DA5Dh4cCUIFy+jqh0HE9MMAAABgT5DI+MAAAQDAEgwRgIhALBKX4JLqjzs5k2gBBnkplRDAwIg+OZnnlvwlEL1og6dAiEAwp+oyBDsVfQCw2TYrli7CUNzj7YY7S+6dQ7LpUi2cBkAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYE+QyPfAAAEAwBHMEUCIAz81sZ68SzB9gskN2/BBH24jbx6LqGBhbDRSOSjsc7zAiEAun1tE8zop33gXgkHrhSSVdAf3x8Vx18JGgZdI3ywgm4AdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYE+QyPnAAAEAwBHMEUCIGIdknwV398C2br+TZPWoxrTV1fB0ZYF8Mm+2gqJhWdyAiEAtqVmTEii7RWNGi0jBROl+uAP7pKZm3fuq99zcovPzeYwDQYJKoZIhvcNAQELBQADggEBANhsvnugpawMmyjegkvDu4yx3cBJB3FDhHPZbueupn2P7km63V0uEe3mL7mUDJmRsYwaQPXCEg0MnMOQhvRZQ7MEnt/Xo+C2uSkz+66fNtQMfjqSSTMslr17lUrYoXIYVZbD7VKCXISl5mxzAQBHsmzjSreRC1mrxQfze9RCsqZnSQT7waiRby0xAxM7EHYgNTtFePNLHk588aBlqnD438UKtOU5k1qvEDszgTYTujyFB57so+Bnq0tGDEmiyKhkqF0xpr2P7Rv5SjS9gReMF2Uoc2MOd5AJvshgRa8eyDbgPHB8vWPZ2b4uBCw9BE6Ij3AzC3z9sQ0qdh9tf3BOqb8=";
			String strNeslPasswordKey ="ApiUat@12345";  //"Kbl@12345";
	// char[] pwd = "Kbl@12345".toCharArray();	
			char[] pwd = "ApiUat@12345".toCharArray();	
	 String deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
	 String deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
	 
	 
	
	
	String token="";
	OAuthTokenGeneration oauth = new OAuthTokenGeneration();
	HashMap Result= new HashMap();
	Result=oauth.getOAuthAuth(hshRequestValues);
	token=Helper.correctNull((String)Result.get("access_token"));
	strAppurl=ApplicationParams.getStrPostSancationEncryptionURL();//"https://apiuat.ktkbank.com:8443/non-production/development/fi-lintmodify/filint";

	
	String finalToken="",accessToken="",headerStatus="",clientId="",clientSecret="",TokenUrl="",Method="",Scope="",certiPath="",gType="",reqConcat="",testCommand="",location="",errCode="",errMessage="";
	Map<String,Object> responseMap = new HashMap<String, Object>();
	Map<String,String> ser = new HashMap<String, String>();
	Gson gson = new Gson();
	Type mapType = null;






		  gType="client_credentials";
		  clientId="92c2d9b9793695f7bd9aaa411d7657e0";
		  clientSecret="7a1980519b524854cfdf25cef98a95e9";
		  Scope="CCFM";
		
		 certiPath="/home/lapsuat/patches/NationalPortal/ktk1/ktk.crt";
		 
		 
		 System.out.println("----------IN "+Method+" Method | SSLContext-----------------");
			SSLContext ssl_ctx = SSLContext.getInstance("TLSv1.2");
			ssl_ctx.init(null,trustAllCerts,null);
			HostnameVerifier allHostsValid = new HostnameVerifier(){
				public boolean verify(String hostname,SSLSession session){
					return true;
				}
			};
					
		
			URL url = new URL(ApplicationParams.getStrPostSanctionURLEnc1());
		System.out.println("----------IN "+Method+" Method | "+ApplicationParams.getStrPostSanctionURLEnc1()+"-----------------");
		HttpsURLConnection con = (HttpsURLConnection)url.openConnection();
		HttpsURLConnection.setDefaultSSLSocketFactory(ssl_ctx.getSocketFactory());
		// Install the all-trusting host verifier
		HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
		location =certiPath;
		if(!location.equalsIgnoreCase("0")){
			System.out.println("----------IN "+Method+" Method | With certificate-----------------");
			System.setProperty("javax.net.ssl.trustStore", location);
		}
		else{
			System.out.println("----------IN "+Method+" Method | Without certificate-----------------");
		}

		StringBuilder data = new StringBuilder();
		//testCommand
		if(testCommand.equalsIgnoreCase("1")){
			data.append("grant_type="+gType);
			data.append("client_id="+clientId);
			data.append("client_secret="+clientSecret);
			data.append("scope="+Scope);
		}
		else{
			data.append("grant_type="+gType+"&client_id="+clientId+"&client_secret="+clientSecret+"&scope="+Scope);
		}
		System.out.println("----------IN "+Method+" Method | data"+data+"-----------------");
		
		//encrequest=URLEncoder.encode(encrequest, "UTF-8");
		
		byte[] byteArray = encrequest.toString().getBytes("UTF-8");

		System.out.println("byteArray-----------------"+byteArray);

		if(reqConcat.equalsIgnoreCase("Basic")){
			System.out.println("----------IN "+Method+" Method | Encoding Client ID & Secret-----------------");
			//con.setRequestProperty("Authorization",reqConcat+" "+getEncodedIdAndPassword(clientId,clientSecret));
		}
		
		/*Map<String, String> headers = new HashMap<>();

		headers.put("X-IBM-Client-Id", clientId);
		headers.put("X-IBM-Client-Secret", clientSecret);
		headers.put("Authorization", "Bearer "+token);
		for (String headerKey : headers.keySet()) {
			con.setRequestProperty(headerKey, headers.get(headerKey));
			System.out.println("======headerKey========="+headerKey+"========="+headers.get(headerKey));
		}*/
		
		con.setDoInput(true);
		
		con.setRequestProperty("X-IBM-Client-Id",clientId);
		con.setRequestProperty("X-IBM-Client-Secret",clientSecret);
		con.setRequestProperty("Authorization","Bearer "+token);
		
		
		con.setRequestProperty("Content-Type","application/xml");
		//con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");		
		con.setRequestProperty("Accept","*/*");		
		con.setRequestProperty("Accept-Encoding" ,"gzip, deflate, br");
		con.setRequestProperty("Connection", "keep-alive");
		con.setRequestMethod("POST");
		con.setConnectTimeout(5000);
		con .setDoOutput(true);
		
	
		OutputStream os = con.getOutputStream();
		//os.write(byteArray, 0, byteArray.length);
		os.write(encrequest.getBytes("UTF-8"));
		os.close();
		
		
		
		String response="";
		System.out.println("===========responsecode:" + con.getResponseCode());
		System.out.println("===========ResponseMessage:"+con.getResponseMessage());
		try
		{
		if (200 == con.getResponseCode()) {

			String tempStr = "";
			BufferedReader inStream = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
			while ((tempStr = inStream.readLine()) != null) {
				response = response + tempStr;
			}
		}else {
			response=String.valueOf(con.getResponseCode());
		}
		System.out.println("=========response:"+response);
	} catch (IOException ioe) {
		ioe.printStackTrace();
		System.out.println("===========Error===============================");
	}
	
	
		
		//System.out.println("====after outputStream======");
		//OutputStreamWriter osw = new OutputStreamWriter(os);
		//System.out.println("====after OutputStreamWriter======");
		//osw.write(encrequest.getBytes());//strRequest);
		
		Date connectionStartTime=new Date();
		System.out.println("::Request Sent At: " + connectionStartTime);
		System.out.println("::Request Data: "+ encrequest);
		
		String line="",strRes="";
//		 StringBuilder response = new StringBuilder();
//		try(BufferedReader br = new BufferedReader(
//				  new InputStreamReader(con.getInputStream(), "utf-8"))) {
//				   
//				    String responseLine = null;
//				    while ((responseLine = br.readLine()) != null) {
//				        response.append(responseLine.trim());
//				        
//				    }
//				    System.out.println("===1111111111111111111111=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+response.toString());
//				}
//		System.out.println("=====111111111111111111====$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$============"+new String(response));
//		
//		
		String plainRequestnew=response;
		
	/*	StringWriter strwrt = new StringWriter();
		IOUtils.copy(con.getInputStream(), strwrt,StandardCharsets.UTF_8);
		plainRequestnew= strwrt.toString();*/
		
		System.out.println("===#################=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+plainRequestnew.toString());
		
		System.out.println("===222222222222222222222222222222=======@@@@@@@@@@@@@@@@@@@@@@@@==========="+new String(plainRequestnew));
		
	//	response=plainRequestnew;
//		String line="",strRes="";
//		InputStreamReader reader = new InputStreamReader(con.getInputStream());
//		BufferedReader in = new BufferedReader(reader);
//		
//		StringBuffer result = new StringBuffer();
//		while ((line = in.readLine()) != null) {
//			result.append(line);
//		}
		
//		log
//		.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
//				+ new String(response));

strRes = plainRequestnew.toString();
System.out.println(strRes);
plainresponse= plainRequestnew.toString();
strResponse=strRes;   
			System.out.println("^^^^^^^^^^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+strResponse);
			
			 
			 
			 
//			 BASE64Decoder decod=new BASE64Decoder();
//				byte b[]		= decod.decodeBuffer(strResponse);
//					      System.out.println("decodeBuffer:**********************:"+strResponse);
//					      String str	= new String(b);
//					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
//					      
//					      
//					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
//					      
//					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
					      
			 
/*InputStream geek = null;
 geek = new FileInputStream(new String(strResponse));
		 StringWriter strwrt = new StringWriter();
			IOUtils.copy(geek, strwrt,StandardCharsets.UTF_8);
			strResponse= strwrt.toString(); */   
			
//PostSanFirstRes.xml
		/*local file reader*/
		
/*		BufferedReader br1 = null;
		FileReader fr1 = null;
		String ResponseXML="";
		
		fr1 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
		//br1 = new BufferedReader(fr1);	
		
		
		
//		 Scanner responseReader = new Scanner(br1);
//         StringBuffer buffer = new StringBuffer();
//         while (responseReader.hasNextLine()) {
//            buffer.append(responseReader.nextLine()+"\n");
//         }
         
        
         
       //  try(BufferedReader br = new BufferedReader(
        //		  new InputStreamReader(con.getInputStream(), "utf-8"))) {
        	 
           try(BufferedReader br = new BufferedReader(fr1)){
         		 // new FileReader("D:\\API\\decodeapiresponse.txt", "utf-8"))) {
        		    StringBuilder response = new StringBuilder();
        		    StringBuilder line = new StringBuilder();
        		    String responseLine = null;
        		    while ((responseLine = br.readLine()) != null) {
        		        response.append(responseLine.trim().getBytes("utf-8"));
        		        line.append(responseLine.trim());
        		    }
        		    
        		    System.out.println("*************************"+new String(response));
        		    System.out.println("+++++++++++++++++++================="+response.toString());
        		    
        		    
        		    System.out.println("*************************"+new String(line));
        		    System.out.println("+++++++++++++++++++================="+line.toString());
        		    
        		}
           
         
           
           
         
     //    responseReader.close();
         
         
//           String line="",strRes="";
//  		 StringBuilder response = new StringBuilder();
//  	"	try(BufferedReader br = new BufferedReader(
//  				  new InputStreamReader( "utf-8"))) {
//  				   
//  				    String responseLine = null;
//  				    while ((responseLine = br.readLine()) != null) {
//  				        response.append(responseLine.trim());
//  				        
//  				    }
//  				    System.out.println("====================="+response.toString());
//  				}
         
 		
//           FileReader	fr3 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
// 		br1 = new BufferedReader(fr3);	
//         
// 		//BufferedInputStream reader = new BufferedInputStream();
//         BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream("D:\\API\\decodeapiresponsenew.txt"));
//          
//         byte[] buffer1 = new byte[4096];
//         int bytesRead = -1;
//          
//         while ((bytesRead = br1.read()) != -1) {
//             writer.write(buffer1, 0, bytesRead);
//         }
//         
//         writer.close();
         //reader.close();
           
           
           StringBuilder response = new StringBuilder();
           FileReader	fr3 = new FileReader("D:\\API\\decodeapiresponse.txt");//api.txt");//PostSanFirstResEncrption.xml");//PostSanFirstRes.xml");//E:\\PostSanctionapi.xml");
    		br1 = new BufferedReader(fr3);
        		    
        		     String responseLine = null;
        		     while ((responseLine = br1.readLine()) != null) {
        		         response.append(responseLine.trim().getBytes("utf-8"));
        		     }
        		     System.out.println("+++++++++++++++++++++++++++++++++++"+response.toString());
        		     System.out.println("+++++++++++++++++++++++++++++++++++"+new String(response));
        		 
           
           
         //Printing the Response
     /*   byte a[]=new String(buffer).getBytes("UTF-16LE");
        byte bb[]=new String(buffer).getBytes("UTF-8");
        byte c[]=new String(buffer).getBytes("ISO-8859-2");
        byte d[]=new String(buffer).getBytes("ISO-8859-1");  
        
        
        System.out.println("^^^^^^^^^^^^^^UTF-16LE^^^^^^@@@@@@@@@@@@@@@@@======="+new String(a));
         System.out.println("^^^^^^^^^^^^^^UTF-8^^^^^^@@@@@@@@@@@@@@@@@======="+new String(bb));
         System.out.println("^^^^^^^^^ISO-8859-2^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+new String(c));
         System.out.println("^^^^^^^^^^^ISO-8859-1^^^^^^^^^@@@@@@@@@@@@@@@@@======="+new String(d));  */
         
         
         
        // plainresponse=new String(buffer);
       //s   strResponse=new String(buffer);
		
          
         // plainresponse;//=new String(buffer);
         // strResponse;String(buffer);
		
    /*      System.out.println("^^^^^^^^^^^^^^^^^^^^@@@@@@@@@@@@@@@@@======="+strResponse.getBytes("UTF-8"));
			
			// byte[] decodedBytes = Base64.getDecoder().decode(strResponse);
			 
			// System.out.println("====decodedBytes=====>"+decodedBytes);*/
			 
			 
			 BASE64Decoder decod=new BASE64Decoder();
				byte b[]		= decod.decodeBuffer(strResponse);
					      System.out.println("decodeBuffer:**********************:"+strResponse);
					      String str	= new String(b);
					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
					      
					      
					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
					      
					      System.out.println("Before Decripting:+++++++++++++++++++++++++++++++++++:"+str);
					      
			 	// byte[] decodedBytes1 = Base64.getDecoder().decode(str);
				 
				// System.out.println("====decodedBytes1=====>"+decodedBytes1); 
				 
				 
			      
		// StringWriter strwrt = new StringWriter();
			//IOUtils.copy(inputStream, strwrt,StandardCharsets.UTF_8);
			//strResponse= strwrt.toString(StandardCharsets.UTF_8);
		
		/* byte[] decodedBytes = Base64.getDecoder().decode(strResponse);
		 
		 System.out.println("====decodedBytes=====>"+decodedBytes); */
		 
		 
			     
		/*InputStream geek1 = null;
		 geek1 = new FileInputStream("D:\\API\\decodeapiresponse.txt");
				 StringWriter strwrt1 = new StringWriter();
					IOUtils.copy(geek1, strwrt1,StandardCharsets.UTF_8);
					strResponse= strwrt1.toString();  
					
					System.out.println("####################################"+strResponse);
		byte[] bres=plainresponse.getBytes(StandardCharsets.UTF_8);
		String strResponse1=new String(bres);*/
		
		
		
			
			


		System.out.println("====before=====>"+strResponse.getBytes("UTF-8"));
		
		
		
		
		//String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";


		 strprivate_key_req = "yes";
		  strprivateKeyfile = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDuqhqoOkp/AysN8fnaOIl2pubeCj+HuYvZhnzvYHhwoMgklFv4Jzx8cioDdOMRmVRVGFMt5cOQWt/6JuJqr34h9NE7wYJOepQO2e5DnuwczFy0K1Ad5CXoJrX7v72Fimn/AGJtZ9jUcyu6BzK2ryBYvA4qyI7em7+EnOix/c2TtTHybklXKry2BIV43Cc5EXW7++YCn1TM+qkebXAcRp/ROnWPWx8rR/bO1PfOfDrvNcbS+un7e7EPMFpP90W6nw2euI0n3TSLq/92cI2chmK1B5d0EYXQxqxoNw6IUsZDD9sI6caD8Bf1mHAfEUwLZR/S3uAZHRik5hR7LMa9Gi+lAgMBAAECggEAE7JU3N64AzTJutmQ2zegm1A5lshAZ1J4KOL2hfLvkwFR7eLoltmgyPcgYdn7BhrMtkZ5pudiymkVjwQ32hd9pg5vA4Am4ZSFikGQw7fmmJctF27I/+Pc/68iLxKrRiLJjf1Zd4St2mq0MyLLm/68AVa+fJLCEmZxhIpGkgSg5g2nXY90Zfh8dNuE5WNtXZr5hOsTwwpjIt7Nq4RCo+puIvAh+6GAOHOGgMKgKTgpl7UIxsnUkEMNO1e/DYs9d84tjKzEPA4ezBerRI4NskyeqGifUMkuUFLCnEBzYMv4AAMnCxCJxHlcAlQ+aKe7DyrtmcRGcDBvz/Xg9YGSRpyEQQKBgQD4AH12tF3tH3KQjGueH7cipP/0XH33H4Mfem6ulTQxAG/S2NfcgZAaxckbVGJhCarDI1/T1Qq78BzUGBqV3G1e4BE2dwzqfBkVj63kDXFVojJTIX1ILAyjy67GKtOLBi3ZCRAa+crTFzjOPMuM8aumP5M+XEz6tfKBHwINY+eJHQKBgQD2XIYbrgXnaUJjcmdhcxO/W44SPSx29MhSmEKfMC8U6m60tcelRbwS/UlJEAgcWy3oBW+y0Bhol2jcJIFiUjRVBu36KoiGqqQkG8Wt/cqRtfCTDAgehdjpo+3PdAawFZMincSNa6RxByE273SePdK+vbXVdvEfZcywUw3ctk8CKQKBgQDWspXrTfqCbdcgjHAeVBaXR4DOa8QhTIaXmcZ4HXMxeM9WGaPGoeO/Sbrwjf0dROEwTk+Hc8f3K8fJVZSuaEXG/PPp0ua7mPOeVuSTqY+UMvaeQT/UW04V/x8vL6QzlwXZ/p6Su+17EX98C+Wr/ww6wI8YTY/W++0VG2MLdJHdgQKBgAuU8/UPLFXhu+5C7ZtGNrJzUm2HFLUO8u/3GoKzWDNKhiPWu+kIKzxVTgGyUD9NBg53WvX0FIGuRI685JxDsxQgPEXbhAmYshjEeXmhiclp3UJ8eVE+B6GMRFzRXpMeoIkrE5d2bQenRyd3AGuEColPD+JWMiXAumu7q9Ypd/NpAoGBALKDdzeyzd/swvWCY1bPbSpUp7liskSFPW7RpjxvNWoGVXoer5hares0oj26ylSB/GJEKH8Zf6kxtFnXEa68eXWF9BjUFGVgNJdnheUIU1tzgz7kZ8QXeHxpkhnByMq5UzfGwpgN4TG/K9bnrQTPWsjXKZovKOpdxgnMJ9CBa9Si";
		
 publicKey = "MIIGyjCCBbKgAwIBAgIQVvoCwd862nm76xqtn9DfUzANBgkqhkiG9w0BAQsFADCBujELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEuMCwGA1UEAxMlRW50cnVzdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEwxSzAeFw0yMjA2MDcxMzAzMTZaFw0yMzA2MTkxMzAzMTZaMG0xCzAJBgNVBAYTAklOMRIwEAYDVQQIEwlLYXJuYXRha2ExEjAQBgNVBAcTCUJlbmdhbHVydTEfMB0GA1UEChMWVGhlIEthcm5hdGFrYSBCYW5rIEx0ZDEVMBMGA1UEAwwMKi5rYmxiYW5rLmluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp86yWyvuMNgUrTw3M9O5127o+B+4BPp2ePM5YoFFIUO3TFEdN2lUm4Q0RWW7JK79NTJUUfPvXUqzEm/mf+Wyn4zFDIF4h1Scvp9FH3FsbdrZzzNADltyM2o90AmjW/+RBD1FQgjyjD2qm14ctsuGvHGWODOIT7rCKFjPEWoIoajMiHvbCDjqLutS6ktzh8dTbiRGoIK5pQGM+Kt8otOdaVnIm0ttfrLFCXOXYOP7CYJrmtEyKqc9pcwQJFGPrAYRPJjezMGxsUMiXyVRFL1LGPhKGLKwgRxg0pT3fCcn6LAIGCHuAQFVPXHN+769ScBGiUa1BXTyz5t/KmGW6rUfVQIDAQABo4IDFjCCAxIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUmRA+Ka1DFq8Enyd+eB6dzyY+19EwHwYDVR0jBBgwFoAUgqJwdN28Uz/Pe9T3zX+nYMYKTL8waAYIKwYBBQUHAQEEXDBaMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5lbnRydXN0Lm5ldDAzBggrBgEFBQcwAoYnaHR0cDovL2FpYS5lbnRydXN0Lm5ldC9sMWstY2hhaW4yNTYuY2VyMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6Ly9jcmwuZW50cnVzdC5uZXQvbGV2ZWwxay5jcmwwIwYDVR0RBBwwGoIMKi5rYmxiYW5rLmluggprYmxiYW5rLmluMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTAYDVR0gBEUwQzA3BgpghkgBhvpsCgEFMCkwJwYIKwYBBQUHAgEWG2h0dHBzOi8vd3d3LmVudHJ1c3QubmV0L3JwYTAIBgZngQwBAgIwggF/BgorBgEEAdZ5AgQCBIIBbwSCAWsBaQB3AFWB1MIWkDYBSuoLm1c8U/DA5Dh4cCUIFy+jqh0HE9MMAAABgT5DI+MAAAQDAEgwRgIhALBKX4JLqjzs5k2gBBnkplRDAwIg+OZnnlvwlEL1og6dAiEAwp+oyBDsVfQCw2TYrli7CUNzj7YY7S+6dQ7LpUi2cBkAdgCzc3cH4YRQ+GOG1gWp3BEJSnktsWcMC4fc8AMOeTalmgAAAYE+QyPfAAAEAwBHMEUCIAz81sZ68SzB9gskN2/BBH24jbx6LqGBhbDRSOSjsc7zAiEAun1tE8zop33gXgkHrhSSVdAf3x8Vx18JGgZdI3ywgm4AdgCt9776fP8QyIudPZwePhhqtGcpXc+xDCTKhYY069yCigAAAYE+QyPnAAAEAwBHMEUCIGIdknwV398C2br+TZPWoxrTV1fB0ZYF8Mm+2gqJhWdyAiEAtqVmTEii7RWNGi0jBROl+uAP7pKZm3fuq99zcovPzeYwDQYJKoZIhvcNAQELBQADggEBANhsvnugpawMmyjegkvDu4yx3cBJB3FDhHPZbueupn2P7km63V0uEe3mL7mUDJmRsYwaQPXCEg0MnMOQhvRZQ7MEnt/Xo+C2uSkz+66fNtQMfjqSSTMslr17lUrYoXIYVZbD7VKCXISl5mxzAQBHsmzjSreRC1mrxQfze9RCsqZnSQT7waiRby0xAxM7EHYgNTtFePNLHk588aBlqnD438UKtOU5k1qvEDszgTYTujyFB57so+Bnq0tGDEmiyKhkqF0xpr2P7Rv5SjS9gReMF2Uoc2MOd5AJvshgRa8eyDbgPHB8vWPZ2b4uBCw9BE6Ij3AzC3z9sQ0qdh9tf3BOqb8=";
				 strNeslPasswordKey ="ApiUat@12345";  //"Kbl@12345";
		// char[] pwd = "Kbl@12345".toCharArray();	
				 pwd = "ApiUat@12345".toCharArray();	
		  deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
		  deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
		// KBLAPIMGMTNEW.crt
		 //strprivateKeyfiles
		 

		  
		  String privateKeyFile1=ApplicationParams.getStrPostSancationDecryptionFile();
		  BASE64Encoder b64 = new BASE64Encoder();
			PrivateKey privateKey = KblEncyrptionDecyrption.getRSAprivaetKeys1(privateKeyFile1, strNeslPasswordKey.toCharArray());
			String privatekey2=(b64.encode(privateKey.getEncoded()));
			byte [] key=privatekey1.getBytes();
			
			
			System.out.println("+++++++++++++++****************++++++++============="+KblEncyrptionDecyrption.decrypt(strResponse, strprivateKeyfile, publicKey));
			
			
			System.out.println("+++++++++++++++++++++++============="+KblEncyrptionDecyrption.getAESDecryptedData(new String(strResponse),key));
			
			
		  
		 
//		  System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.signSHA256RSANew(strResponse, strprivateKeyfile));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//			
//		  String strsignSHA256RSANew=KblEncyrptionDecyrption.signSHA256RSANew(strResponse, strprivateKeyfile);
//		  
//		  System.out.println("strsignSHA256RSANew======strsignSHA256RSANew==========>"+strsignSHA256RSANew);//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//			
//		  System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(strResponse, strprivateKeyfile,publicKey,EncyrptedAesSessionKey));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));
//		 // decryptAESKey
//		  System.out.println("decryptAESKeylatnew======decryptAESKeylatnew==========>"+KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey));
//		 //str   strResponse
//		  
//		  System.out.println("getAESDecryptedDatalatnew======getAESDecryptedDatalatnew==========>"+KblEncyrptionDecyrption.getAESDecryptedDatalatnew(strsignSHA256RSANew,KblEncyrptionDecyrption.decryptAESKeylatnew(EncyrptedAesSessionKey.getBytes(),ApplicationParams.getStrPostSancationDecryptionFile(),strNeslPasswordKey)));
//			
//		  
		  
		  
		// System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(strsignSHA256RSANew, strprivateKeyfile,publicKey,EncyrptedAesSessionKey));//ApplicationParams.getStrPostSancationEncryptionFile()));// ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			  
		 
		    
		 
		 System.out.println("decrypt767757557777777777777777777777577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decSignSHA256RSA(strResponse,"SHA256withRSA", strprivateKeyfile));
		 
		 
		 
		 System.out.println("decrypt767757557777777777777777777777577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.signSHA256RSA(strResponse, strprivateKeyfile));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 String shaval=KblEncyrptionDecyrption.signSHA256RSA(str, strprivateKeyfile);
		 
		 System.out.println("shaval==========>"+shaval);//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		// public static String getAESDecryptedData(String encryptedText,byte decKey[])
		 
		 //public static byte[] decryptAESKey(byte[] encryptedKey,String privateKeyFile,String filePassword)throws Exception
		 
		 
		/*String strdecyrpteddata=KblEncyrptionDecyrption.decryptAESKey(shaval.getBytes("UTF-8"),ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);   //strRequest
			System.out.println("==========strEncyrpteddata============"+strEncyrpteddata);
			 EncyrptedAesSessionKey=KblEncyrptionDecyrption.encryptAESKey(ApplicationParams.getStrPostSancationEncryptionFile(), Sessionkey);
			System.out.println("==========EncyrptedAesSessionKey============"+EncyrptedAesSessionKey);*/
			
		 
			
		/* String deckeyfile ="D://API//KBLAPIMGMTNEW.pem";
		 String deckeypfxfile ="D://API/APIGATEWAY_08-06-2022T102933.pfx";
		// KBLAPIMGMTNEW.crt
		// System.out.println("decryptAESKey==========>"+KblEncyrptionDecyrption.decryptAESKey(shaval.getBytes(StandardCharsets.UTF_8),deckeyfile,strNeslPasswordKey));
		 
		 
		 
		 //System.out.println("decryptAESKeylatest======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.getAESDecryptedData(EncyrptedAesSessionKey.getBytes("UTF-8"), deckeypfxfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 
		 //decryptAESKeylatest
		 
		System.out.println("decryptAESKeylatest======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes("UTF-8"), deckeypfxfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
		 	
		 
		 System.out.println("decrypt767757557577575AESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptwhole(shaval, ApplicationParams.getStrPostSancationDecryptionFile(), ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 
		// System.out.println("decryptAESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decSignSHA256RSA(strResponse, "SHA256withRSA", ApplicationParams.getStrPostSancationEncryptionFile()));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
			
		 
		 
		 
		System.out.println("decryptAESKey======1111111111111111111111111222222222222222==========>"+KblEncyrptionDecyrption.decryptAESKey(bres, deckeyfile, strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
		//System.out.println("Output================>"+strResponse);
		System.out.println("getAESDecryptedData=====33333333333333333333333333333333===========>"+KblEncyrptionDecyrption.getAESDecryptedData(shaval, Sessionkey));
*/
		
		strResponse=strResponse.replace("xenc:", "");
	    strResponse=strResponse.replace("dsig:", "");
	    strResponse=strResponse.replace("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "");
	    strResponse=strResponse.replace("Type=\"http://www.w3.org/2001/04/xmlenc#Element\"","");
	    strResponse=strResponse.replace("xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\"","");
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"","");
	    strResponse=strResponse.replace("xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"","");
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"","");			
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"","");
	    strResponse=strResponse.replace("Algorithm=\"http://www.w3.org/2009/xmlenc11#mgf1sha256\"","");	
	    strResponse=strResponse.trim();
		System.out.println("====After=====>"+strResponse);
		DocumentBuilderFactory factory1 = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder1 = factory1.newDocumentBuilder();
		 
		InputSource inputSource1 	   = new InputSource(new StringReader(strResponse));
	    Document document1 				   = builder1.parse(inputSource1);
	    
		//Build Document
		//Document document = builder.parse(new InputStream(strResponse)) ;
	    String CipherValue12="", CipherValue2="";
			
		document1.getDocumentElement().normalize();
		
		System.out.println("Root Element :" + document1.getDocumentElement().getNodeName());
		
		NodeList list1 = document1.getElementsByTagName("CipherData");

	    for (int temp = 0; temp < list1.getLength(); temp++) {

	        Node node = list1.item(temp);

	        if (node.getNodeType() == Node.ELEMENT_NODE) {

	            Element element1 = (Element) node;

	            // get staff's attribute
	           // String id = element.getAttribute("id");

	            // get text
	            if(temp==0)
	            {
	             CipherValue2 = element1.getElementsByTagName("CipherValue").item(0).getTextContent();
	             System.out.println("CipherValue2================>"+CipherValue2);
	            }
	            if(temp==1)
	            {
	            	 CipherValue12 = element1.getElementsByTagName("CipherValue").item(0).getTextContent();
	            	System.out.println("CipherValue1================>"+CipherValue12);
	            }
	        }
	    }

	    
	    System.out.println("DecryptDatanew======================1================="+KblEncyrptionDecyrption.DecryptDatanew(CipherValue2,CipherValue12,strprivateKeyfile,publicKey,strNeslPasswordKey));
		
	   
	    System.out.println("decrypsssssssssssssssssssssssssssstAESKey================>"+KblEncyrptionDecyrption.decryptAESKeylatest(EncyrptedAesSessionKey.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));
		  
	    
	    System.out.println("decrypsssssssssssssssssssssssssssstAESKey================>"+KblEncyrptionDecyrption.decryptAESKeylatest(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));
	    System.out.println("decryptAESKeyData================>"+KblEncyrptionDecyrption.getAESDecryptedDatalatest(CipherValue12,KblEncyrptionDecyrption.decryptAESKeylatest(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey)));

	    //System.out.println("Output================>"+strResponse);

//	String privatekey1="", publicKey="",strprivateKeyfile="",strprivate_key_req="";
//
//
//	 strprivate_key_req = "yes";
//	  strprivateKeyfile = "MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDGG4K7rm1tPUfpXnWUA18kZ2BCR+u9uwxiFg7fqh7zukOvMzX4Maz3EdooSLiq+/Qr/+VUk0M6LSURZ08FGix7jE6cLcdGuXooHwjceEB8cnd2KyhXTvGJLdinJfZUlbHKUEELFmyy2jjPLEfqgRFMfhDybwZJi0yZ0//Zfi9OdgI5s7ew1NYtIUuAYe5dogMbohg1VKnKvrnwsNODtlLZOkrI65x+UOR+gAfPiSb7rGxrWMfiiJOMbzn+X+kOPbg1HAt9WLm7P+9V7xCMfQK8mQkQrFMi1u7EfNMOIf1cFyGjUaLHQzqV+ViOu8C2ZLG3wKRLkz2DReZJbJeq74tSMLJAF9Z4YC3m769HYmY8478f0KGtZgBgv5SKD3V3OMuPobyjP7SPx2a9IeIMiF/aYlVYHa2IoGr2Ug/RyGx0Op6h+KkrsKV4vFxyQ8XCuBtX2vgIqfDN0Sxrj8X1JpGdbFISYLeVttJ/ArTm0TXE/XiAfjmpl2s8Yl3LkovrFeuTJywgATn47jALT3j/8PJrExH251IWIXRJS+6G0DWhv5rgvK+kqxFrF8vIoMi2hW8goObRRoeMkb736l1we2404RJEjNgtlY69LyhHB2olOex5nyHyBATlwEeP4Yb1cmJzZxGH+54MQmv5jtkzU+fciey3nj4n6wwTehxmTI2a8QIDAQABAoICAF6AuyGKuLqWtBo4LECaRyWXhsy3gFZ2xxZ3TUsW3UMJBMar2D/4enk18+qpniY6oKTool5xDW3QIVGnBYP6k2Owb8OC9v/e9M302AZL+v8in6goOEtF5mS5ERPTQSniaviGxjBi1yGOhfEWP4w3W6gwrybnHYmxwK3U+sSmtCxqkO8zsxnQvgazTlAE52+VHIRvE7tFEuYbi5ms0ImRTP5BF3G3K2T6c7WAn7k5xPXjr6iZpmiDHFeuq2yUFhnsCVaUdUqrK5aOjj5hF3TdIZQUMMXaXqJNA4OJxCiGwFTQ2AQPqmYBxQ3L75nPKMQZTsnIRNekeoCHtK4r9kHdmYiYRMB9ltA5425V2W5Wy2ykaMwu9SHoWt8hwNrPfb9jLS0ebd+X4b0YUK1hdLhTRrlCDlrC3L9oh6NtL+M4Zo+GO89giSrdZAjAOObaZZtJl/OGrBR7dEw+M5dDi76NSQVts6LxAATmsEAEcs9I2adVWUZt+M1gbjHXkhzEKyuV6HuRQc2K+UpWuFTG/3iu2UeqEAoCRRLvK11iBTFKNq4JuSjkBF5QVluFSe1nX+P+/kElUNlj0YjRbzoDcH1Y3T+87bQ3e0wjwBTz0I/t6De/PFDs6B2fof280RV3/ZBL9jc5Nel7LVIsYpEhd7ckt9QhGWi92G5QZjBG53p+l2GRAoIBAQD9bS3cA4slzS7AhD357wBsgr5nahRoTxFrqdCfOHwkb+QH1TG+rYTgFJ2N9PkWLN9eQf0FTXSJB54u7MlRKSI4i1KCjVlCg7FGvo4vlXT/rpdB+bcIWhlg9D7TA8akVG4JN6UQQllnzODKvu0yIptMjD5Tg9T/7lvA4YHMXX4k4avj+/6y3dHwiDPCDOBvUFqgR16IFW1W3hTrPLY6mrD7e11hA6NtTWjbOG2TE7otQJ46KmF/pXLzwXNkQu+nmfahi7eitC/etUpoxgNfbYCYjjpcAf7jBKlHUm2r0vsjVNzrwSe6iJ3yi6Rkv9WcKSlQQ12NK9AEkZ502C0/uPCVAoIBAQDIHoVz3Tq8SutrAQtKIxx3UoSCYuZm5scD7ko8CAaxCs43tN7U+Wila71hDsYYvx2hgz8MKXVWOhlEQ+xeUoLDwetBNLZIDDFeXS8d3z0156VQ+lzN5ApXPt6EzkibBWxSGmner5rMm/JXrTrUdwmh+15EoBILlLyeibkQIhAS9qXpUscWA//hzP1U99j//dZ6gemkKvhmHDkIq7IDV0BjgRdwbYgHJoKvkHnOs5czLOUklJn95ynhRHXBHVaWeaoIfIbDcf2THNF+RVghzJhieq9ODmWwfA+kOkBPeOckqBKCxc2OCq9CFr3dD+MKd2DyZEx4tpjYbkiH+6b7Ph3tAoIBAH6PfLyIhIAvVO7N3AmqYyLNtHr+zgw9mGyVFNu/ILgtrMqAnOQl0dr6UKipM4/wfuiaudphERax2DyFAhDnIvDsGxuZrX77N5gl5+o5kIFz1pQbOl4QaOYzdAB7vUMp6v3tbSCOkgm1lnmKGfjUsYvr6eBZUREzH11XATRnaGzQysADg/Idtw+RZY++UIMmtOugWMRLNxyPshC8dCEWSdZ9iGe/omkepIP+TTKLQooA4EQaEDDoFl1HOfJTP04LJNEObnnx1Io7LVrfsKWCkRsexGRYlssW89brglux9LtzURTnlIiiW4baWBH8f5gKMlikG985hxwRAPpHT2moWXUCggEAfoqWNpLAzknNnWcWnXWgTW93bP9e09jAJaMre9RTbuX3SlBry14+psN/B/2QlBtdgED+wBEDKlgom/sbXvVrzJ81xJCxZtOW8CWaYphEG270IUV/I448X7jYej/6t1Pxj+U15uNBznoZ/wkCN1FiXPQXQuu5HWua7eEGjcYMRgGDHgwC6c/zoPO/iVgD9rOrSOIXPIETe3YDNpFjSiuFAqahjK0mI+ddIekIrQTw6iJMbxosWdovqEti7o8/rn0WYLFlgfb1sm25ps/wj8bQ4QzVB1WhRbzdIyrWeapo9sv0kI7FkTj+Y5r/yeZ+2aJtQjjcBkToV4s9AAfIKfy4bQKCAQAtwJWY/FJCbxkf4PTP3qQvSAjq4KlczvA6YGhu8g9wCUMWOxu7QkcYtxMOrX7ifvxC5Ti7FwJsXILtU8WeIc997xB/nzMVsNHoax9p2x0kgmDzChLA+JZc1tq1KaBkSPcFuIqfv6EVYE9RD6GtlVEHkyNT4wakfpI0i9wJ71l080+ELMWHG9TjrPLQNeiYB3IVbxXy7fVtcIXPrM8qXLU/8J/9dAnEMJPQWQrwEP57dSb/5S5VUDELil/Pk/FKy+qIImvpoPxhomqIkV9QjgnYF9MK2eB5A2n3mDTog2y/7K+T8TfFyjpppa12+D/XYe4fT8M8MMCQmMT0JHsHtS5+";
//	  publicKey = "MIIGSTCCBDGgAwIBAgIJANIpNP2nRJgtMA0GCSqGSIb3DQEBCwUAMIG6MQswCQYDVQQGEwJJTjEQMA4GA1UECAwHR3VqYXJhdDESMBAGA1UEBwwJQWhtZWRhYmFkMSEwHwYDVQQKDBhPbmxpbmUgUFNCIExvYW5zIExpbWl0ZWQxITAfBgNVBAsMGE9ubGluZSBQU0IgTG9hbnMgTGltaXRlZDEYMBYGA1UEAwwPTmF0aW9uYWwgUG9ydGFsMSUwIwYJKoZIhvcNAQkBFhZuby1yZXBseUBqYW5zYW1hcnRoLmluMB4XDTIxMTAxMjExNTEyN1oXDTMxMTAxMDExNTEyN1owgboxCzAJBgNVBAYTAklOMRAwDgYDVQQIDAdHdWphcmF0MRIwEAYDVQQHDAlBaG1lZGFiYWQxITAfBgNVBAoMGE9ubGluZSBQU0IgTG9hbnMgTGltaXRlZDEhMB8GA1UECwwYT25saW5lIFBTQiBMb2FucyBMaW1pdGVkMRgwFgYDVQQDDA9OYXRpb25hbCBQb3J0YWwxJTAjBgkqhkiG9w0BCQEWFm5vLXJlcGx5QGphbnNhbWFydGguaW4wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDju2DLs9RbjTJ5qqY26iV4tzdDBUl9LFjUPg1YeAp2x4YT9UGYNWQdVhdBS+P2bocghLgI+iWpDaxnKjHKpQy2+7FfHf2SNHCAwhqVGjMxtaWGNGO76aEpkDzy7l3Tad1V40zBhh0F7vDRC/LaKoF7dYifQRD+HK9UVDOe8Zt1mzvqoCYvMRnEfaKB0pFcdiA6IcVKuv/AIsWM3rCVTl4AtNeoUr8NiqKWuSarSxriU5u9r90vMBMWYqNT62GyCmDjfZh34g3Gla3sN6jWK52iqJjAjL7ZMU/+g3U1mhghV5Fa/20LJMXHW94OrnFnC62k/6XnXL2SqAwgq+6NG4SPdMaai2BcJyfxghKVFwDuEMkOTSYGHPEjuuTqIgxkpz4/nD/ar8BlMC77z7QUPAu3MscWVrzXUbwfhgzaZDUygP1HudxK6H/gRR/Z3fxoGDtxC02ZrIkX8MkyF8p20eQ7UtnoDVynSat780I0bRp3LOrbhgW+KCxQt9cKc/oudTG+S2Qric2RgS6/gOy/2m2vwfJIOjTTggY1DgQIYSIiLK9tZvfaiDFZPemTPmKKF84KCgsuLbqVfdSdL2SvHzIy4lvO6B90lAZns/KnVtT6HJxrMgIplqEtzgUkldFatNLIMjfcFtZtaTF2PKIQOerVpvF36rs5WJPHtwAW6/oXEQIDAQABo1AwTjAdBgNVHQ4EFgQUqUPLwzrVExe5ABR+Kwqeu5cmg0AwHwYDVR0jBBgwFoAUqUPLwzrVExe5ABR+Kwqeu5cmg0AwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEABRI/ht7r9RTDtJEnbtedVrvSRycOEJBpu/BEREoGnjipHxq5Pa/9xUNIro0/NT/enZ2roCkCGgzd75ueXKv0Wr5tdYYlTSnzpOPcTSdTpWjtgRZqcLTzLBOg2dTxvncgOy6/586s0uN57BlaeT7rX2WRtxte621vzBoRrq4Ib3+lDSOrH1005j0Lwu0g7O4zSE7yU7oSYgyNOxH9dvoSIl5bmBhsmx+BqE92V3Yop7G9KWZBazhGmnSDlrsLxEWK/M7LZQ9ZRoFFjH7jHZbJbTE1GgWL1IugSDiRweq01B4p7LSbqcUnUuI5jjTxgvvgG6sWPvqDmJLAYo9ZGX0BUiF8YTpUdTHVnbKJsuQtBCsVCiiIdV/sqXqoNyFWAlp90L+f+yZ0pkKPMhLmGstCOHCMebY7invBp9thCTZFrAA1YMVc0pXQMrjMfOPOqApX+pHmPT4y60ZavJ6Fe7LqkZq4dQ0fbDT8UMpCQuyeMJzI8wpI8BlFOFSNSzut+5wT+/PRhdGgpv6uJSJZLDjGv8VQFmPJ8VRq2Phacq5f2h7ubRt9oZ42pCfDbz94SqGrDWymaFxMafFFv/U2iYkClWBs1brmMx+AWZxGuJomzsWInhjfpXaoBIvU9eZtjvJXSyIL5+mQ877Lu8hIv409Kc+F0KmpgWMTDYh/Zh/4+Xs=";
//	String strNeslPasswordKey ="Kbl@12345";
//	 char[] pwd = "Kbl@12345".toCharArray();	
//	 
//	 //strprivateKeyfile
//	 
//	System.out.println("decryptAESKey================>"+KblEncyrptionDecyrption.decryptAESKey(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey));//(strprivateKeyfile,CipherValue2.getBytes())); //PostSanctionAPIdecyrptfile.decryptAESKey(CipherValue2,ApplicationParams.getStrPostSancationDecryptionFile()));	
//	//System.out.println("Output================>"+strResponse);
//	System.out.println("getAESDecryptedData================>"+KblEncyrptionDecyrption.getAESDecryptedData(CipherValue12, KblEncyrptionDecyrption.decryptAESKey(CipherValue2.getBytes(), ApplicationParams.getStrPostSancationDecryptionFile(), strNeslPasswordKey)));

		
		
		strResponse=strResponse.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml executeFinacleScript.xsd\" xmlns=\"http://www.finacle.com/fixml\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");
		
        strResponse=strResponse.trim();
		System.out.println("====After=====>"+strResponse);
		
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();
		 
		InputSource inputSource 	   = new InputSource(new StringReader(strResponse));
	    Document document 				   = builder.parse(inputSource);
	    
		//Build Document
		//Document document = builder.parse(new InputStream(strResponse)) ;
	    String CipherValue1="", CipherValue="";
			
		document.getDocumentElement().normalize();
		
		System.out.println("Root Element :" + document.getDocumentElement().getNodeName());
		
		NodeList list = document.getElementsByTagName("Body");

        for (int temp = 0; temp < list.getLength(); temp++) {

            Node node = list.item(temp);

            if (node.getNodeType() == Node.ELEMENT_NODE) {

                Element element = (Element) node;

               
                
                if(element.getElementsByTagName("SUCCESS").getLength()>0)
                		{
                	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
                	hsh.put("PostSanctionROIStatus", "S");  
                	hsh.put("Status","S");
                	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("SUCCESS").item(0).getTextContent()));
                	
                		}
               
                
                if(element.getElementsByTagName("ErrorDesc").getLength()>0)
	                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
            		{
            	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
            	hsh.put("PostSanctionROIStatus", "F");  
            	
            	hsh.put("Status","F");
            	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("ErrorDesc").item(0).getTextContent()));
            	
            	hshQuery =new HashMap();
            	arrValues=new ArrayList();
            	hshQueryValues.put("size", "1");
            	if(sessionModuleType.equalsIgnoreCase("RET"))
            	{
            	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
            	}
            	if(!sessionModuleType.equalsIgnoreCase("RET"))
            	{
            	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
            	}
            	    	arrValues.add(appno);
            	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
            	    	{
            	    		arrValues.add(hidFacSno);
            	    	}
            	    	hshQuery.put("arrValues", arrValues);
            	    	hshQueryValues.put("1", hshQuery);
            	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
            	    			"updatedata");
           		 
           		 
           		hshQuery =new HashMap();
           		arrValues=new ArrayList();
           		hshQueryValues.put("size", "1");
         			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
         			arrValues.add(appno);
         			arrValues.add(parentappno);
         			arrValues.add("F");
         			arrValues.add(strUserId);
         			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
         			arrValues.add("executeFinacleScript");
         			arrValues.add(ServiceReqId);
         			arrValues.add(sessionModuleType);
         			arrValues.add("");
         			arrValues.add("");
         			arrValues.add("LoanAcctInq");   			
         			arrValues.add(hidFacSno);
         		
         			hshQuery.put("arrValues", arrValues);
         			hshQueryValues.put("1", hshQuery);
         			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
         					"updatedata");
            		}
                
                if(element.getElementsByTagName("error").getLength()>0)
                //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
        		{
        	hsh.put("PostSanctionROIflag", Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
        	hsh.put("PostSanctionROIStatus", "F");  
        	
        	hsh.put("Status","F");
        	hsh.put("flag",Helper.correctNull((String)element.getElementsByTagName("error").item(0).getTextContent()));
        	
        	
        	hshQuery =new HashMap();
        	arrValues=new ArrayList();
        	hshQueryValues.put("size", "1");
        	if(sessionModuleType.equalsIgnoreCase("RET"))
        	{
        	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
        	}
        	if(!sessionModuleType.equalsIgnoreCase("RET"))
        	{
        	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
        	}
        	    	arrValues.add(appno);
        	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
        	    	{
        	    		arrValues.add(hidFacSno);
        	    	}
        	    	hshQuery.put("arrValues", arrValues);
        	    	hshQueryValues.put("1", hshQuery);
        	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
        	    			"updatedata");
     			
       		 
       		 
       		hshQuery =new HashMap();
       		arrValues=new ArrayList();
       		hshQueryValues.put("size", "1");
     			hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
     			arrValues.add(appno);
     			arrValues.add(parentappno);
     			arrValues.add("F");
     			arrValues.add(strUserId);
     			arrValues.add(Helper.correctNull((String)hsh.get("flag")));
     			arrValues.add("executeFinacleScript");
     			arrValues.add(ServiceReqId);
     			arrValues.add(sessionModuleType);
     			arrValues.add("");
     			arrValues.add("");
     			arrValues.add("LoanAcctInq");   			
     			arrValues.add(hidFacSno);
     		
     			hshQuery.put("arrValues", arrValues);
     			hshQueryValues.put("1", hshQuery);
     			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
     					"updatedata");
        		}
                
            }
        }

	  
		
		
	System.out.println("Output================>"+strResponse);
	
	
	
	if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))
	{
	

	
	
StrSecondReq="<FIXML xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+
	"<Header>"+
	"<RequestHeader>"+
	"<MessageKey>"+
	"<RequestUUID>"+ServiceReqId+"</RequestUUID>"+
	"<ServiceRequestId>LoanAcctInq</ServiceRequestId>"+
	"<ServiceRequestVersion>"+strVersionId+"</ServiceRequestVersion>"+
	"<ChannelId>COR</ChannelId>"+
	"</MessageKey>"+
	"<RequestMessageInfo>"+
	"<BankId>"+BankId+"</BankId>"+
	"<TimeZone></TimeZone>"+
	"<EntityId></EntityId>"+
	"<EntityType></EntityType>"+
	"<ArmCorrelationId></ArmCorrelationId>"+
	"<MessageDateTime>"+Helper.correctDateFinacle()+"</MessageDateTime>"+
	"</RequestMessageInfo>"+
	"<Security>"+
	"<Token>"+
	"<PasswordToken>"+
	"<UserId></UserId>"+
	"<Password></Password>"+
	"</PasswordToken>"+
	"</Token>"+
	"<FICertToken></FICertToken>"+
	"<RealUserLoginSessionId></RealUserLoginSessionId>"+
	"<RealUser></RealUser>"+
	"<RealUserPwd></RealUserPwd>"+
	"<SSOTransferToken></SSOTransferToken>"+
	"</Security>"+
	"</RequestHeader>"+
	"</Header>"+
	"<Body>"+
	"<LoanAcctInqRequest>"+
	"<LoanAcctInqRq>"+
	"<LoanAcctId>"+
	"<AcctId>"+ActNum+"</AcctId>"+
	"</LoanAcctId>"+
	"</LoanAcctInqRq>"+
	"<LoanAcctInq_CustomData/>"+
	"</LoanAcctInqRequest>"+
	"</Body>"+
	"</FIXML>";



System.out.println("==========StrSecondReq============"+StrSecondReq);



URL url2 = new URL(ApplicationParams.getStrPostSanctionNURL2());

System.out.println("==========ApplicationParams.getStrPostSanctionNURL2()============"+ApplicationParams.getStrPostSanctionNURL2());
HttpURLConnection con2 = (HttpURLConnection) url2.openConnection();
con2.setDoInput(true);

con2.setRequestMethod("POST");
con2.setRequestProperty("Content-Type","text/xml; charset=UTF-8");
con2.setConnectTimeout(5000);
con2 .setDoOutput(true);

OutputStream os2 = con2.getOutputStream();
System.out.println("====after outputStream======");
OutputStreamWriter osw2 = new OutputStreamWriter(os2);
System.out.println("====after OutputStreamWriter======");
osw2.write(StrSecondReq);//strRequest);
//osw.flush();


Date connectionStartTime1=new Date();
System.out.println("::StrSecondReq Sent At: " + connectionStartTime1);
System.out.println("::StrSecondReq Data: "+ StrSecondReq);
osw2.close();


String line2="",strRes2="";
InputStreamReader reader2 = new InputStreamReader(con2.getInputStream());
BufferedReader in2 = new BufferedReader(reader2);

StringBuffer result2 = new StringBuffer();
while ((line2 = in2.readLine()) != null) {
	result2.append(line2);
}

log
.info("################@@@@@@@@@@@@@ Response @@@@@@@@@@@@@################"
		+ result2.toString());

strRes2 = result2.toString();
System.out.println(strRes2);
plainresponse2=strRes2;
strResponse2=strRes2;   


/*System.out.println("strResponse2=================="+strResponse2);*/



/*BufferedReader br2 = null;
FileReader fr2 = null;
String ResponseXML2="";

fr2 = new FileReader("D:\\loanAccResponse.xml");//E:\\PostSanctionapi.xml");
br2 = new BufferedReader(fr2);	



Scanner responseReader2 = new Scanner(br2);
StringBuffer buffer2 = new StringBuffer();
while (responseReader2.hasNextLine()) {
buffer2.append(responseReader2.nextLine()+"\n");
}
responseReader2.close();
//Printing the Response
System.out.println(buffer2.toString());
plainresponse2=buffer2.toString();
strResponse2=buffer2.toString();    */


System.out.println("strResponse2=================="+strResponse2);

strResponse2=strResponse2.replace("xsi:schemaLocation=\"http://www.finacle.com/fixml LoanAcctInq.xsd\" xmlns=\"http://www.finacle.com/fixml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"","");


strResponse=strResponse.trim();
System.out.println("====After=====>"+strResponse);

DocumentBuilderFactory factory2 = DocumentBuilderFactory.newInstance();
DocumentBuilder builder2 = factory2.newDocumentBuilder();

InputSource inputSource2 	   = new InputSource(new StringReader(strResponse2));
Document document2 				   = builder.parse(inputSource2);

//Build Document
//Document document = builder.parse(new InputStream(strResponse)) ;


document.getDocumentElement().normalize();

System.out.println("Root Element :" + document2.getDocumentElement().getNodeName());

NodeList list2 = document2.getElementsByTagName("HostTransaction");

for (int temp = 0; temp < list2.getLength(); temp++) {

Node node2 = list2.item(temp);

if (node2.getNodeType() == Node.ELEMENT_NODE) {

 Element element2 = (Element) node2;

 // get staff's attribute
// String id = element.getAttribute("id");

 // get text
 
 if(element2.getElementsByTagName("Status").getLength()>=0)
 		{
 	hsh.put("flagval", Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()));
 	
 	if(Helper.correctNull((String)element2.getElementsByTagName("Status").item(0).getTextContent()).equalsIgnoreCase("SUCCESS"))
 	{
 	hsh.put("Status", "S");  
 	}
 	
 	
 	if(Helper.correctNull((String)hsh.get("Status")).equalsIgnoreCase("S"))	
 	{
 		
 		NodeList list3 = document2.getElementsByTagName("NetIntRate");

 		 for (int temp3 = 0; temp3 < list3.getLength(); temp3++) {

 		     Node node3 = list3.item(temp3);

 		     if (node3.getNodeType() == Node.ELEMENT_NODE) {

 		         Element element3 = (Element) node3;
 		
 		         
 		        interestrate=Helper.correctNull((String)element3.getElementsByTagName("value").item(0).getTextContent());
 		        douintval=Double.valueOf(interestrate);
 		         
 		     }
 		
 		 }
 		 
 		 
 		hshQuery =new HashMap();
    	arrValues=new ArrayList();
    	hshQueryValues.put("size", "1");
    	if(sessionModuleType.equalsIgnoreCase("RET"))
    	{
    	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
    	    	hsh.put("successflag", "true");
    	}
    	if(!sessionModuleType.equalsIgnoreCase("RET"))
    	{
    	    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
    	}
    	    	arrValues.add(appno);
    	    	if(!sessionModuleType.equalsIgnoreCase("RET"))
    	    	{
    	    		arrValues.add(hidFacSno);
    	    	}
    	    	hshQuery.put("arrValues", arrValues);
    	    	hshQueryValues.put("1", hshQuery);
    	    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
    	    			"updatedata");
		
 		 
 		 
 		hshQuery =new HashMap();
 		arrValues=new ArrayList();
 		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
		arrValues.add(appno);
		arrValues.add(parentappno);
		arrValues.add("S");
		arrValues.add(strUserId);
		arrValues.add("");
		arrValues.add("executeFinacleScript");
		arrValues.add(ServiceReqId);
		arrValues.add(sessionModuleType);
		arrValues.add("");
		arrValues.add("");
		arrValues.add("LoanAcctInq");   			
		arrValues.add(hidFacSno);
	
		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
				"updatedata");
		
		if(sessionModuleType.equalsIgnoreCase("RET"))
		{
		hshQuery =new HashMap();
 		arrValues=new ArrayList();
		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "updateROIInFInancle");
		arrValues.add(""+douintval);
		arrValues.add(""+douintval);
		arrValues.add(""+douintval);
		arrValues.add(appno);
		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
				"updatedata");
		}
		else
		{
			//updatecorpagrupdroi
			
			hshQuery =new HashMap();
	 		arrValues=new ArrayList();
			hshQueryValues.put("size", "1");
			hshQuery.put("strQueryId", "updatecorpagrupdroi");
			arrValues.add(""+douintval);
			arrValues.add(appno);
			arrValues.add(hidFacSno);
			hshQuery.put("arrValues", arrValues);
			hshQueryValues.put("1", hshQuery);
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
		}
		
		
		if(sessionModuleType.equalsIgnoreCase("CORP") || sessionModuleType.equalsIgnoreCase("AGR"))
		{
			
			int count=0,counta=0,countb=0;
			String appcount="";
			rs = DBUtils.executeLAPSQuery("sel_postsanctiondateroicorpagrimridetcount^" + appno);
			if (rs.next()) {
				count = rs.getInt("count");
				
			}
			if(rs!=null)
				rs.close();
			
			rs = DBUtils.executeLAPSQuery("sel_postsanctiondateroicorpagrimridet^" + appno);
			while (rs.next()) {
				
				if(!correctNull((String) rs.getString("facility_sancupdroi")).equalsIgnoreCase(""))
				{
				counta+=1;
				}
			}
			if(rs!=null)
				rs.close();
			
			if(count==counta)
			{
				hsh.put("successflag", "true");
			}
			
			else
			{
				ResultSet rs1=null;
			String parentappno1="",ActNum1="";
			strQuery = SQLParser.getSqlQuery("selfaciparentappnodetall^" + appno);
			rs = DBUtils.executeQuery(strQuery);
			while (rs.next()) {
				parentappno1 = Helper.correctNull((String) rs
						.getString("app_parent_appno"));
			
				
			
		String FACILITY_SNO="";
		strQuery = SQLParser.getSqlQuery("selpostsanroiselectioncorpagrmriparent^" + appno+"^"+parentappno1);
		rs1 = DBUtils.executeQuery(strQuery);
		if (rs1.next()) {
			ActNum1 = Helper.correctNull((String) rs1
					.getString("CBS_ACCOUNTNO"));
		}
			if(ActNum1.equalsIgnoreCase(""))
			{
				hsh.put("successflag", "true");
			}
			}
			}			
			
			
			
		}
		
		if(Helper.correctNull((String)hsh.get("successflag")).equalsIgnoreCase("true"))
		{
String 	strAppno=appno,appstatus1="",application_flag="",strOrgcodenew="",strOrglevelnew="",strappholder="",str_sentorglevelnew="",strOrgHeadnew="";
String strFromflowpoint="",strToflowpoint="";

rs = DBUtils.executeLAPSQuery("commworkflowsel2^" + strAppno);
	if (rs.next()) {
		appstatus1 = correctNull((String) rs.getString("app_status"));
		application_flag = Helper.correctNull((String) rs
				.getString("app_renew_flag"));
		strOrgcodenew=Helper.correctNull((String)rs.getString("APP_ORGCODE"));
		strOrglevelnew=Helper.correctNull((String)rs.getString("app_orglevel"));
	    strappholder=Helper.correctNull((String)rs.getString("APP_APPLNHOLDER"));
	}
	
	if(rs!=null)
		rs.close();
	strQuery=SQLParser.getSqlQuery("selorg_level^"+strOrgcodenew);
	rs=DBUtils.executeQuery(strQuery);
	if(rs.next())
	{
		str_sentorglevelnew = correctNull((String)rs.getString("org_level"));
		strOrgHeadnew = correctNull((String)rs.getString("org_head"));
	}
	
	strFromflowpoint = (String) hshRequestValues.get("mail_fromflowpoint");
	strToflowpoint = (String) hshRequestValues.get("mail_toflowpoint");

	System.out.println("======strOrglevelnew======="+strOrglevelnew);
	
	
	String scodeforallmoduls="";
	String headoforg="";
	
	if(!strOrglevelnew.equalsIgnoreCase("A"))
	{
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("sel_retmclrresetfreq^"+strAppno);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			scodeforallmoduls=Helper.correctNull(rs.getString("LOAN_PERTAINS_BRANCH"));
		}
		
		
	
	
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("getorgheadfromorgnisation^"+scodeforallmoduls);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			headoforg=Helper.correctNull(rs.getString("ORG_HEAD"));
		}
		
		strOrgHeadnew=headoforg;
	}
//if(strOrglevelnew.equalsIgnoreCase("A"))
	//{

		String strsms="";
		hshQueryValues = new HashMap();
		hshQuery=new HashMap();
		arrValues=new ArrayList();
		hshQuery.put("strQueryId","commworkflowinsnew3");
		arrValues.add(strAppno);
		arrValues.add(strappholder);
		arrValues.add(strOrgHeadnew);
		arrValues.add(strFromflowpoint);
		//arrValues.add(strToflowpoint);
		arrValues.add("C");
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strappholder);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			arrValues.add(Helper.correctNull(rs.getString("org_scode")));
			arrValues.add(Helper.correctNull(rs.getString("usr_department")));
		}
		else
		{
			arrValues.add("");
			arrValues.add("");
		}
		if(rs != null)
		{
			rs.close();
		}
		strQuery=SQLParser.getSqlQuery("workflowusersanlimit^"+strOrgHeadnew);
		rs=DBUtils.executeQuery(strQuery);
		if(rs.next())
		{
			arrValues.add(Helper.correctNull(rs.getString("org_scode")));
			arrValues.add(Helper.correctNull(rs.getString("usr_department")));
		}
		else
		{
			arrValues.add("");
			arrValues.add("");
		}
		arrValues.add("Y");
		hshQuery.put("arrValues",arrValues);
		hshQueryValues.put("1",hshQuery);
		
		hshQuery=new HashMap();
		arrValues=new ArrayList();
		hshQuery.put("strQueryId","updmailbxchkstatus");
		arrValues.add("Y");
		arrValues.add(strOrgHeadnew);
		arrValues.add(strAppno);
		hshQuery.put("arrValues",arrValues);
		hshQueryValues.put("size","2");
		hshQueryValues.put("2",hshQuery);
		EJBInvoker.executeStateLess("dataaccess",hshQueryValues,"updateData");
		
	}
		
		
		
 	}

 	else
 	{
 if(element2.getElementsByTagName("error").getLength()>0)
 //if(element.getElementsByTagName("ErrorDesc").item(0).getTextContent().length()>=0)
	{
hsh.put("flag", Helper.correctNull((String)element2.getElementsByTagName("error").item(0).getTextContent()));
hsh.put("Status", "F");  
	}
 
 if(sessionModuleType.equalsIgnoreCase("RET"))
 {
     	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
 }
 if(!sessionModuleType.equalsIgnoreCase("RET"))
 {
     	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
 }
     	arrValues.add(appno);
     	if(!sessionModuleType.equalsIgnoreCase("RET"))
     	{
     		arrValues.add(hidFacSno);
     	}
     	hshQuery.put("arrValues", arrValues);
     	hshQueryValues.put("1", hshQuery);
     	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
     			"updatedata");
	
	 
	 
	hshQuery =new HashMap();
	arrValues=new ArrayList();
	hshQueryValues.put("size", "1");
	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
	arrValues.add(appno);
	arrValues.add(parentappno);
	arrValues.add("F");
	arrValues.add(strUserId);
	arrValues.add(Helper.correctNull((String)hsh.get("flag")));
	arrValues.add("executeFinacleScript");
	arrValues.add(ServiceReqId);
	arrValues.add("");
	arrValues.add("");
	arrValues.add("");
	arrValues.add("LoanAcctInq");   			
	arrValues.add(hidFacSno);

	hshQuery.put("arrValues", arrValues);
	hshQueryValues.put("1", hshQuery);
	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
			"updatedata");

 		}
 		}
}
}

	}
	}
	catch(Exception e)
	{
		e.printStackTrace();
		hsh.put("Status","F");
    	hsh.put("flag",e.toString());
    	
    	hshQuery =new HashMap();
    	arrValues=new ArrayList();
    	hshQueryValues.put("size", "1");
if(sessionModuleType.equalsIgnoreCase("RET"))
{
    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUS");
}
if(!sessionModuleType.equalsIgnoreCase("RET"))
{
    	hshQuery.put("strQueryId", "del_POSTSANCTION_APISTATUScorpagr");
}
    	arrValues.add(appno);
    	if(!sessionModuleType.equalsIgnoreCase("RET"))
    	{
    		arrValues.add(hidFacSno);
    	}
    	hshQuery.put("arrValues", arrValues);
    	hshQueryValues.put("1", hshQuery);
    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
    			"updatedata");
    	
    	 
    	 
    	hshQuery =new HashMap();
    	arrValues=new ArrayList();
    	hshQueryValues.put("size", "1");
 
    	hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS");
    	
    	arrValues.add(appno);
    	arrValues.add(parentappno);
    	arrValues.add("F");
    	arrValues.add(strUserId);
    	arrValues.add(Helper.correctNull((String)hsh.get("flag")));
    	arrValues.add("executeFinacleScript");
    	arrValues.add(ServiceReqId);
    	arrValues.add(sessionModuleType);
    	arrValues.add("");
    	arrValues.add("");
    	arrValues.add("LoanAcctInq"); 
    	arrValues.add(hidFacSno);
    	hshQuery.put("arrValues", arrValues);
    	hshQueryValues.put("1", hshQuery);
    	EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
    			"updatedata");
    	
	}
	finally
	{
		int strsno=0;
		try {
			rs=DBUtils.executeLAPSQuery("sel_max_POSTSANCTION_APISTATUS_LOGGER");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			if(rs.next())
			{
				strsno=Integer.parseInt(rs.getString("TYPE"));
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		
		hshQuery= new HashMap();
		arrValues = new ArrayList();
		hshQueryValues.put("size", "1");
		hshQuery.put("strQueryId", "ins_POSTSANCTION_APISTATUS_LOGGER");
		arrValues.add(appno);
		arrValues.add(parentappno);
		arrValues.add(strRequest);
		arrValues.add("");
		arrValues.add(plainresponse);
		arrValues.add("");
		arrValues.add(sessionModuleType);
		arrValues.add(""+strsno);
		arrValues.add(strUserId);
		arrValues.add("");
		arrValues.add("executeFinacleScript");
		arrValues.add(ServiceReqId);
		arrValues.add(StrSecondReq);
		arrValues.add("");
		arrValues.add("");
		arrValues.add("");
		arrValues.add("");
		arrValues.add("LoanAcctInq");
		arrValues.add(plainresponse2);
		arrValues.add(""); 
		arrValues.add(hidFacSno); 
		hshQuery.put("arrValues", arrValues);
		hshQueryValues.put("1", hshQuery);
		try {
			EJBInvoker.executeStateLess("dataaccess", hshQueryValues,
					"updatedata");
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	return hsh;
}






	// /====================================sms triggering
	// =========================================================//

	/*public void updsmsTriggerScheduler(HashMap hshValues)  {
		ResultSet rs = null;
		ResultSet rs2 = null, rs4 = null;
		int intUpdateSize = 0;
		HashMap hshQueryValues = new HashMap();
		HashMap hshQuery = new HashMap();
		ArrayList arrValues = new ArrayList();
		ArrayList arrRowsmsdate = new ArrayList();
		ArrayList arrColsmsdate = new ArrayList();

		String strMessage = "", strMobileno = "", strRejReason = "", strfacappno = "", strfacsno = "";
		boolean bflag = false;

		try {

			rs = DBUtils.executeLAPSQuery("selstatdatabyiddescsms");
			while (rs.next()) {
				arrRowsmsdate.add(Helper.correctNull(rs
						.getString("stat_data_desc")));
				// bflag=true;

			}
			if (rs != null) {
				rs.close();
			}
			if (arrRowsmsdate != null) {
				rs2 = DBUtils.executeLAPSQuery("sel_sms_master");

				if (rs2.next()) {
					strMessage = Helper.correctNull(rs2
							.getString("SMS_CARLOAN"));
				}

				if (rs2 != null)
					rs2.close();

				rs4 = DBUtils.executeLAPSQuery("sel_fecthsmdet");
				while (rs4.next()) {
					if (arrRowsmsdate.contains(Helper.correctNull(rs4
							.getString("noofdays")))) {
						arrValues = new ArrayList();
						strMessage = strMessage.replaceAll("@CName", Helper
								.correctNull(rs4.getString("perapp_name")));
						// strMobileno="8686743083";
						strMobileno = Helper.correctNull(rs4
								.getString("mobile"));
						strfacappno = Helper
								.correctNull(rs4.getString("appno"));
						strfacsno = Helper.correctNull(rs4
								.getString("facility_sno"));
						arrValues.add(Helper.correctNull(rs4
								.getString("perapp_name")));
						arrValues.add(Helper.correctNull(rs4
								.getString("mobile")));
						arrValues.add(Helper
								.correctNull(rs4.getString("appno")));
						arrValues.add(Helper.correctNull(rs4
								.getString("facility_sno")));

						if (!strMobileno.equalsIgnoreCase("")) {
							log
									.info("================== Message Service================");
							String charset = "UTF-8", strFileIds = "";

							String query = null;
							URLConnection conn = null;

							try {
								/*query = String
										.format(
												"dcode=%s&userid=%s&pwd=%s&sender=%s&pno=%s&msgtype=%s&msgtxt=%s",
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSDCode(),
																charset),
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSUserID(),
																charset),
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSPassword(),
																charset),
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSSender(),
																charset),
												URLEncoder.encode(strMobileno,
														charset),
												URLEncoder
														.encode(
																ApplicationParams
																		.getStrSMSTypeFlag(),
																charset),
												URLEncoder.encode(strMessage,
														charset));*/
								
							/*	query = String.format("dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
										URLEncoder.encode(ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),charset), URLEncoder.encode(ApplicationParams.getStrSMSUserID(), charset), URLEncoder
												.encode(ApplicationParams.getStrSMSPassword(), charset), URLEncoder.encode(ApplicationParams.getStrSMSSender(), charset), URLEncoder
												.encode(strMobileno, charset), URLEncoder.encode(ApplicationParams.getStrSMSTypeFlag(), charset),
												URLEncoder.encode(strMessage, charset));

								log
										.info("==================Invoking Service in Try Block================"
												+ ApplicationParams
														.getStrSMSURL()
												+ "?"
												+ query);
								conn = new URL(ApplicationParams.getStrSMSURL()
										+ "?" + query).openConnection();
								log
										.info("================== Service Ended================");

							} catch (Exception e) {
								/*query = "dcode="
										+ ApplicationParams.getStrSMSDCode()
										+ "&userid="
										+ ApplicationParams.getStrSMSUserID()
										+ "&pwd="
										+ ApplicationParams.getStrSMSPassword()
										+ "&sender="
										+ ApplicationParams.getStrSMSSender()
										+ "&pno=" + strMobileno + "&msgtype="
										+ ApplicationParams.getStrSMSTypeFlag()
										+ "&msgtxt=" + strMessage;*/
								
							/*	query = String.format("dcode=%s&userid=%s&pwd=%s&sender=%s&to=%s&msgtype=%s&msgtxt=%s",
										URLEncoder.encode(ApplicationParams.getStrSMSDCode()+"&"+ApplicationParams.getStrSMSDCode1()+"&"+ApplicationParams.getStrSMSDCode2()+"&"+ApplicationParams.getStrSMSDCode3()+"&"+ApplicationParams.getStrSMSDCode4()+"&"+ApplicationParams.getStrSMSDCode5(),charset), URLEncoder.encode(ApplicationParams.getStrSMSUserID(), charset), URLEncoder
												.encode(ApplicationParams.getStrSMSPassword(), charset), URLEncoder.encode(ApplicationParams.getStrSMSSender(), charset), URLEncoder
												.encode(strMobileno, charset), URLEncoder.encode(ApplicationParams.getStrSMSTypeFlag(), charset),
												URLEncoder.encode(strMessage, charset));
								log
										.info("==================Invoking Service in Catch Block================"
												+ ApplicationParams
														.getStrSMSURL()
												+ "?"
												+ query);
								conn = new URL(ApplicationParams.getStrSMSURL()
										+ "?" + query).openConnection();
								log
										.info("================== Service Ended================");

							}

							conn.setDoOutput(true);
							conn.setRequestProperty("Accept-Charset", charset);
							BufferedReader br = new BufferedReader(
									new InputStreamReader(conn.getInputStream()));
							String output;
							while ((output = br.readLine()) != null) {
								strFileIds = output;
							}

							hshQuery = new HashMap();
							hshQueryValues = new HashMap();
							arrValues = new ArrayList();
							arrValues.add(strMobileno);
							arrValues.add(strMessage);
							arrValues.add(strFileIds);
							arrValues.add(strfacappno);
							arrValues.add(strfacsno);
							hshQuery.put("strQueryId", "ins_carsmshistroy");
							hshQuery.put("arrValues", arrValues);
							hshQueryValues.put("1", hshQuery);
							hshQueryValues.put("size", "1");
							EJBInvoker.executeStateLess("dataaccess",
									hshQueryValues, "updateData");

						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception.....................updsmsTrigger");
			e.printStackTrace();
			throw new EJBException("Exception in updsmsTrigger ==="
					+ e.getMessage());

		}
	}*/
}

/*
 * private double emi(int intTerms,int intRec,int intRate) { double dblEmif =
 * 0.00; double emif;
 * 
 * try { double dsrint = (double)intRate/(12100); double dn =
 * Math.pow((dsrint+1),(double)intTerms)-1; double nu = dsrint
 * Math.pow((dsrint+1),(double)intTerms); emif = (double)(nu/dn) (double)intRec;
 * dblEmif = Math.rint(emif); } catch(Exception ce) { throw new
 * EJBException("Error Occured  "+ce.getMessage()); } return dblEmif;
 * 
 * } private Double[] intRates(int intTerms,double dblEmi,double dblRect,double
 * dblRate) { Double intRates[] = null; double principal; try { double dsrint =
 * (double)dblRate/(12100); int x=1; intRates = new Double[intTerms]; Double
 * dblRec[] = new Double[intTerms+1]; dblRec[0] = new Double(dblRect);
 * 
 * for(int i=0;i<intTerms;i++) { intRates[i] = new Double(Math.round(
 * Double.parseDouble(String.valueOf(dblRec[i])) dsrint)); principal = dblEmi
 * -(Double.parseDouble(String.valueOf(dblRec[i])) dsrint); dblRec[x] = new
 * Double(Double.parseDouble(String.valueOf(dblRec[i])) - principal); ++x; } }
 * catch(Exception se) { throw new
 * EJBException("Error Occured  "+se.getMessage()); } return intRates; }
 */

/*
 * private double checkDiscretionaryPowers(HashMap hshValues) throws
 * EJBException { java.text.NumberFormat
 * jtn=java.text.NumberFormat.getInstance(); jtn.setMaximumFractionDigits(2);
 * jtn.setMinimumFractionDigits(2); jtn.setGroupingUsed(false);
 * 
 * ResultSet rs=null; String strUserId =""; String
 * strAppno="",strQuery="",strExp
 * ="$",strBorrowerGroup="",strUserClass="",strPrdType=""; double
 * dblPartyAnualCap
 * =0,dblGroupLimit=0,dblPartyFund=0,dblPartyNonFund=0,dblPartyAggregate
 * =0,dblUnsecured = 0; double dblAdhocLimit=0,dblAdhocMonths
 * =0,dblAdhocPercentage =0,dblGurantee=0,dblPartyTotal = 0; double
 * dblPartyPropAggregate
 * =0,dblExportCreditProposed=0,dblExportCreditPower=0,dblExportCreditNonFundPower
 * =0,dblExportCreditFundPower=0; int intUserClass=0;
 * 
 * try {
 * 
 * strAppno=correctNull((String)hshValues.get("appno"));
 * strPrdType=correctNull((String)hshValues.get("prdtype")); strUserId =
 * correctNull((String)hshValues.get("strUserId"));
 * strUserClass=correctNull((String)hshValues.get("userclass"));
 * if(!strUserClass.trim().equals("")) { intUserClass =
 * Integer.parseInt(strUserClass); } if(intUserClass>830) { strExp = strExp +
 * " There is no rights provided for approve or reject"; throw new
 * Exception(strExp); }
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("seluserdiscpowers^"+strUserId);
 * 
 * if(rs.next()) { dblPartyAnualCap = rs.getDouble("disc_perpartyanncap");
 * dblGroupLimit = rs.getDouble("disc_grouplimit"); dblPartyFund =
 * rs.getDouble("disc_perptyfundbased"); dblPartyNonFund =
 * rs.getDouble("disc_perptynonfund"); // dblPartyAggregate = dblPartyFund +
 * dblPartyNonFund; dblUnsecured = rs.getDouble("disc_perptyunsecured");
 * dblAdhocLimit = rs.getDouble("disc_adhocsanclimit"); dblAdhocMonths =
 * rs.getDouble("disc_adhocmonths"); dblAdhocPercentage =
 * rs.getDouble("disc_adhocpercentage"); dblGurantee =
 * rs.getDouble("disc_guarantee"); dblPartyTotal =
 * rs.getDouble("disc_perptytotal"); dblPartyAggregate = dblPartyTotal; }
 * if(strPrdType.trim().equalsIgnoreCase("C")) {
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selborrowerfacilities^"+strAppno); double
 * dblPartyExistingFund
 * =0,dblPartyProposedFund=0,dblPartySanctionedFund=0,dblPartyExistingNonFund
 * =0,dblPartyProposedNonFund=0,dblPartySanctionedNonFund=0; double
 * dblGroupExistingFund
 * =0,dblGroupProposedFund=0,dblGroupSanctionedFund=0,dblGroupExistingNonFund
 * =0,dblGroupProposedNonFund=0,dblGroupSanctionedNonFund=0; double
 * dblGroupProposed
 * =0,dblPartyDiff=0,dblGroupDiff=0,dblAnnualPerBorrower=0,dblAnnualPerGroup=0;
 * double dblApprovedPerBorrower=0,dblApprovedPerGroup=0,dblSanctionedFund=0;
 * 
 * String IsGroup="N",strGroup=""; int intGroup=0; while(rs.next()) { strGroup =
 * correctNull((String)rs.getString("comapp_group")); String strFacilityType =
 * correctNull((String)rs.getString("facility_for"));
 * if(strFacilityType.trim().equals("F")) { dblPartyExistingFund =
 * rs.getDouble("existing"); dblPartyProposedFund = rs.getDouble("proposed");
 * dblPartySanctionedFund = rs.getDouble("sanctioned"); } else
 * if(strFacilityType.trim().equals("NF")) { dblPartyExistingNonFund =
 * rs.getDouble("existing"); dblPartyProposedNonFund = rs.getDouble("proposed");
 * dblPartySanctionedNonFund = rs.getDouble("sanctioned"); } }
 * 
 * dblPartyDiff =
 * (dblPartyProposedFund+dblPartyProposedNonFund)-(dblPartyExistingFund
 * +dblPartyExistingNonFund); dblSanctionedFund = dblPartyExistingFund;
 * if(!strGroup.trim().equals("")) { intGroup = Integer.parseInt(strGroup); }
 * 
 * if(intGroup>0) { IsGroup ="Y"; } dblPartyPropAggregate = dblPartyProposedFund
 * + dblPartyProposedNonFund; if(IsGroup.trim().equals("Y")) {
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selgroupfacilities^"+strAppno); while(rs.next())
 * { String strFacilityType = correctNull((String)rs.getString("facility_for"));
 * if(strFacilityType.trim().equals("F")) { dblGroupExistingFund =
 * rs.getDouble("existing"); dblGroupProposedFund = rs.getDouble("proposed");
 * dblGroupSanctionedFund = rs.getDouble("sanctioned"); } else
 * if(strFacilityType.trim().equals("NF")) { dblGroupExistingNonFund =
 * rs.getDouble("existing"); dblGroupProposedNonFund = rs.getDouble("proposed");
 * dblGroupSanctionedNonFund = rs.getDouble("sanctioned"); } } }
 * dblGroupProposed = dblGroupProposedFund + dblGroupProposedNonFund;
 * dblGroupDiff =
 * (dblGroupProposedFund+dblGroupProposedNonFund)-(dblGroupExistingFund
 * +dblGroupExistingNonFund); // To check annual cap // find financial year int
 * intYear=0,intMonth=0; String strFrom="",strTo="";
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selcurrentyear"); if(rs.next()) { intYear =
 * rs.getInt("curryear"); intMonth = rs.getInt("curmonth"); if((intMonth>=4) &&
 * (intMonth<=12)) { strFrom = "01/04/"+Integer.toString(intYear); strTo =
 * "31/03/"+Integer.toString(intYear+1); } else { strFrom =
 * "01/04/"+Integer.toString(intYear-1); strTo =
 * "31/03/"+Integer.toString(intYear); } } double
 * dblApprovedPerBorrowercom=0,dblApprovedPerBorrowerper=0;
 * strQuery=SQLParser.getSqlQuery
 * ("seluserapprovedperborrowercom^"+strAppno+"^"+strUserId
 * +"^"+strFrom+"^"+strTo); if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) { dblApprovedPerBorrowercom
 * = rs.getDouble("approvedamt"); }
 * 
 * 
 * strQuery=SQLParser.getSqlQuery("seluserapprovedperborrowerper^"+strUserId+"^"+
 * strFrom+"^"+strTo); if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) { dblApprovedPerBorrowerper
 * = rs.getDouble("approvedamt"); }
 * 
 * dblAnnualPerBorrower = dblApprovedPerBorrowercom + dblApprovedPerBorrowerper
 * + dblPartyDiff;
 * 
 * 
 * strQuery=SQLParser.getSqlQuery("seluserapprovedpergroup^"+strAppno+"^"+strUserId
 * +"^"+strFrom+"^"+strTo); if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) { dblApprovedPerGroup =
 * rs.getDouble("approvedamt"); } dblAnnualPerGroup = dblApprovedPerGroup +
 * dblGroupDiff; // To check export credit limit
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selexportcreditlimit^"+strAppno); double
 * dblExportCreditExistingFund
 * =0,dblExportCreditProposedFund=0,dblExportCreditExistingNonFund
 * =0,dblExportCreditProposedNonFund=0; while(rs.next()) { String strFacType =
 * correctNull((String)rs.getString("facility_for")); double
 * dblval1=0,dblval2=0; if(strFacType.trim().equals("F")) { dblval1 =
 * rs.getDouble("existing"); dblval2 = rs.getDouble("proposed");
 * dblExportCreditExistingFund = dblExportCreditExistingFund + dblval1;
 * dblExportCreditProposedFund = dblExportCreditProposedFund + dblval2; } else
 * if(strFacType.trim().equals("NF")) { dblval1 = rs.getDouble("existing");
 * dblval2 = rs.getDouble("proposed"); dblExportCreditExistingNonFund =
 * dblExportCreditExistingNonFund + dblval1; dblExportCreditProposedNonFund =
 * dblExportCreditProposedNonFund + dblval2; } } dblExportCreditProposed =
 * dblExportCreditProposedFund + dblExportCreditProposedNonFund; double
 * dblExportCreditLimit=0; if(intUserClass <740 ) { dblExportCreditPower =
 * (dblPartyFund (125/100)); // 125 percent of fund based limit for below GM }
 * else if((intUserClass >= 740) && ( intUserClass < 800 ) ) {
 * dblExportCreditPower = (dblPartyFund (150/100)); // 150 percent of fund based
 * limit for GM }
 * 
 * // To check adhoc limits
 * 
 * if(rs != null) rs.close();
 * rs=DBUtils.executeLAPSQuery("seladhocfacilities^"+strAppno); double
 * dblAdhocExistingFund
 * =0,dblAdhocExistingNonFund=0,dblAdhocProposedFund=0,dblAdhocProposedNonFund
 * =0,dblMonths=0,dblAdhocProposed=0; while(rs.next()) { String strAdhocFacType
 * = correctNull((String)rs.getString("facility_for")); dblMonths =
 * rs.getDouble("facility_months"); double dblval1=0,dblval2=0;
 * if(strAdhocFacType.trim().equals("F")) { dblval1 = rs.getDouble("existing");
 * dblval2 = rs.getDouble("proposed"); dblAdhocExistingFund =
 * dblAdhocExistingFund + dblval1; dblAdhocProposedFund = dblAdhocProposedFund +
 * dblval2; } else if(strAdhocFacType.trim().equals("NF")) { dblval1 =
 * rs.getDouble("existing"); dblval2 = rs.getDouble("proposed");
 * dblAdhocExistingNonFund = dblAdhocExistingNonFund + dblval1;
 * dblAdhocProposedNonFund = dblAdhocProposedNonFund + dblval2; } }
 * dblAdhocProposed = dblAdhocProposedFund + dblAdhocProposedNonFund; double
 * dblPercSancFund=0; if(dblAdhocPercentage>0) { dblPercSancFund =
 * (dblSanctionedFund (dblAdhocPercentage/100)); } if((dblPercSancFund>0) &&
 * (dblAdhocLimit>0)) { if(dblPercSancFund<dblAdhocLimit) { dblAdhocLimit =
 * dblPercSancFund; } } else if((dblPercSancFund>0) && (dblAdhocLimit==0)) {
 * dblAdhocLimit = dblPercSancFund; }
 * 
 * if((intUserClass == 800 ) || (intUserClass ==810)) { dblPartyPropAggregate =
 * dblPartyPropAggregate + dblAdhocProposed; }
 * 
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selunsecuredfacilities^"+strAppno); double
 * dblUnsecExisting=0,dblUnsecProposed=0,dblUnsecSanctioned=0; if(rs.next()) {
 * dblUnsecExisting = rs.getDouble("existing"); dblUnsecProposed =
 * rs.getDouble("proposed"); }
 * 
 * // To check the discretionary limits
 * dblPartyPropAggregate=dblPartyPropAggregate100000;
 * dblPartyProposedFund=dblPartyProposedFund100000;
 * dblPartyProposedNonFund=dblPartyProposedNonFund100000;
 * dblUnsecProposed=dblUnsecProposed100000;
 * dblAdhocProposed=dblAdhocProposed100000;
 * dblGroupProposed=dblGroupProposed100000;
 * dblAnnualPerBorrower=dblAnnualPerBorrower100000;
 * dblExportCreditProposed=dblExportCreditProposed100000;
 * 
 * if(dblPartyAggregate<dblPartyPropAggregate) { strExp = strExp +
 * "Per party discretionary lending power should not exceed more than "
 * +jtn.format(dblPartyAggregate); } else if((dblPartyFund<dblPartyProposedFund)
 * && (intUserClass != 800 ) && (intUserClass !=810)) { strExp = strExp +
 * "Per party fund based discretionary lending power should not exceed more than "
 * +jtn.format(dblPartyFund); } else if((dblPartyNonFund<dblPartyProposedNonFund
 * ) && (intUserClass != 800 ) && (intUserClass !=810)) { strExp = strExp +
 * "Per party non-fund based discretionary lending power should not exceed more than "
 * +jtn.format(dblPartyNonFund); } else if(dblUnsecured<dblUnsecProposed) {
 * strExp = strExp +
 * "Unsecured Advances out of Per party limit should not exceed more than "
 * +dblUnsecured; } else if((dblAdhocLimit<dblAdhocProposed) && (intUserClass !=
 * 800 ) && (intUserClass !=810)) { strExp = strExp +
 * "Discretionary lending power for adhoc limit should not exceed more than "
 * +jtn.format(dblAdhocLimit); } else if( (dblPartyFund< (dblAdhocProposed +
 * dblSanctionedFund)) && (intUserClass != 800 ) && (intUserClass !=810)) {
 * strExp = strExp +
 * "Discretionary lending power for adhoc facilities should not exceed more than "
 * +jtn.format(dblPartyFund) +" of fund based limit"; } else
 * if(dblAdhocMonths<dblMonths) { strExp = strExp +
 * "Adhoc months should not exceed more than "+dblAdhocMonths; }
 * 
 * else if((dblGroupLimit<dblGroupProposed) && (IsGroup.trim().equals("Y"))) {
 * strExp = strExp +
 * "Discretionary lending power should not exceed more than "+jtn
 * .format(dblGroupLimit) +" per group"; } else
 * if((dblPartyAnualCap<dblAnnualPerBorrower) && (intUserClass != 800 ) &&
 * (intUserClass !=810)) { strExp = strExp +
 * "Annual cap of discretionary lending power should not exceed more than "
 * +jtn.format(dblPartyAnualCap) +" per party"; } else
 * if(dblExportCreditPower<dblExportCreditProposed) { strExp = strExp +
 * "Export Credit discretionary lending power should not exceed more than "
 * +jtn.format(dblExportCreditPower) +" per party"; } dblPartyPropAggregate=
 * dblPartyPropAggregate/100000; } else {
 * 
 * String strPrdCode="";
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selperprdintrate^"+strAppno); if(rs.next()) {
 * strPrdCode = correctNull((String)rs.getString(4)); } double
 * dblPrdSancLimit=0,dblPrdLoanAmt=0;
 * 
 * if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeLAPSQuery("selLoanAmt^"+strAppno); if(rs.next()) {
 * dblPrdLoanAmt = rs.getDouble("loanamt"); } if(dblPrdLoanAmt>0) {
 * dblPrdLoanAmt = dblPrdLoanAmt/100000; // values are converting from rupees to
 * lacs }
 * strQuery=SQLParser.getSqlQuery("selretailsanctionlimit^"+strPrdCode+"^"
 * +strUserId); if(rs != null) rs.close();
 * 
 * rs=DBUtils.executeQuery(strQuery); if(rs.next()) { dblPrdSancLimit =
 * rs.getDouble("sanction_limit"); } if(dblPrdSancLimit>0) { dblPrdSancLimit =
 * dblPrdSancLimit/100000; // values are converting from rupees to lacs } /
 * if(dblPartyFund< dblPrdSancLimit) { dblPrdSancLimit = dblPartyFund; } /
 * if(dblPrdSancLimit<dblPrdLoanAmt) { strExp = strExp +
 * "Discretionary lending power should be within your powers";// not exceed more
 * than "+jtn.format(dblPrdSancLimit) ; } dblPartyPropAggregate = dblPrdLoanAmt;
 * 
 * } if(!strExp.trim().equals("$")) { throw new Exception(strExp); }
 * 
 * 
 * } catch(Exception e) { throw new EJBException(e.toString()); } finally { try
 * { if(rs != null) { rs.close(); }
 * 
 * } catch(Exception e) { throw new EJBException(e.toString()); } } return
 * dblPartyPropAggregate; }
 */